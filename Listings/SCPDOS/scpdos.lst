     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro reta 0
    78                              <1> cret a
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro retna 0
    82                              <1> cret na
    83                              <1> %endmacro
    84                              <1> 
    85                              <1> %macro breakpoint 0
    86                              <1> xchg bx, bx
    87                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    73                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    74                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    75                              <1>     devDrvChar     equ 8000h ;If set, Char device
    76                              <1> ;Bit 0 1=console input
    77                              <1> ;    1 1=console output (character devices)
    78                              <1> ;    2 1=NUL device
    79                              <1> ;    3 1=CLOCK device
    80                              <1> ;    4 1=INT 49 output (CON)
    81                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    82                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    83                              <1> ;   11 1=open/close/removable media supported (3.0+)
    84                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    85                              <1> ;      1=media descriptor in FAT required (block devices)
    86                              <1> ;   14 1=IOCTL supported
    87                              <1> ;   15 0=block device
    88                              <1> ;      1=character device
    89                              <1> 
    90                              <1> ;Driver structures
    91                              <1> 
    92                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    93                              <1> 
    94                              <1>     .hdrlen resb 1  ;Length of the request header
    95                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    96                              <1>     .cmdcde resb 1  ;Command code
    97                              <1>     .status resw 1  ;Status word
    98                              <1>     .devptr resq 1  ;Device queue pointer field
    99                              <1> 
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> struc drvReqHdr
   103                              <1>     drvReqHdrM
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc initReqPkt  ;Init Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM   ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   109 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   110 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   111 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   112 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   113                              <1> 
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   119 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   120 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   121 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   122                              <1> 
   123                              <1> endstruc
   124                              <1> 
   125                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   126                              <1> 
   127                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   128 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   129 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   130 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   131                              <1> 
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioReqPkt   ;IO Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   137 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   138 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   139 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   140 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   141 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   148 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc statusReqPkt   ;Status Request Packet
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   155                              <1> 
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc openReqPkt ;Open Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc closeReqPkt ;Close Device Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   179                              <1>      
   180                              <1> endstruc
   181                              <1> 
   182                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   183                              <1> 
   184                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   185 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   186 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   187 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   188 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   189 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   200                              <1>     
   201                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   202                              <1> 
   203                              <1> endstruc
   204                              <1> 
   205                              <1> 
   206                              <1> struc genioctlGetParamsTable
   207 00000000 ??                  <1>     .size           resb 1
   208 00000001 ??????????????      <1>     .res            resb 7
   209 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   210 00000010 ????????????????    <1>     .numSectors     resb 8
   211                              <1> endstruc
   212                              <1> 
   213                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   214                              <1> struc genioctlLBAformat
   215 00000000 ??                  <1>     .size           resb 1
   216 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   217 00000002 ????????????        <1>     .res            resb 6
   218 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   219                              <1> endstruc
   220                              <1> 
   221                              <1> struc genioctlLBAwrite
   222 00000000 ??                  <1>     .size           resb 1
   223 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   224 00000002 ????????????        <1>     .res            resb 6
   225 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   226 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   227                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> noInherit       equ 80h
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1>  
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   299 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   300 00000010 ????????????????    <1>     .newSFTVal      resq 1
   301 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   302 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   303 00000028 ????????????????    <1>     .newLastdrive   resq 1
   304 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   305 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   306 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   307 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   308 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   309 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   310 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc filename
   314                              <1> ;8.3 File name struct
   315 00000000 ????????????????    <1>     .fName  resb 8
   316 00000008 ??????              <1>     .fExt   resb 3
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   320 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   321 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   322 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   323 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   324 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   325 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   326 00000016 ????                <1>     .fileTime   resw 1  ;File time
   327 00000018 ????                <1>     .fileDate   resw 1  ;File date
   328 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   329 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   330                              <1> endstruc
   331                              <1> 
   332                              <1> struc psp
   333 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   334 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   335 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   336 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   337 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   338 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   339 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   340 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   341 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   342 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   343 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   344 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   345 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   346 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   347                              <1> ;Extra handle arrays are grouped into a linked list
   348                              <1> ;The below are in the same place as in DOS
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> struc clkStruc
   357 00000000 ????                <1>     .dateWord   resw 1
   358 00000002 ??                  <1>     .minutes    resb 1
   359 00000003 ??                  <1>     .hours      resb 1
   360 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   361 00000005 ??                  <1>     .seconds    resb 1
   362                              <1> endstruc
   363                              <1> 
   364                              <1> struc countryStruc
   365 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   366                              <1>                         ;0 = month day year hh:mm:ss
   367                              <1>                         ;1 = day month year hh:mm:ss
   368                              <1>                         ;2 = year month day hh:mm:ss
   369 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   370 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   371 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   372 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   373 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   374 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   375                              <1>                         ;0 = Symbol leads, without space
   376                              <1>                         ;1 = Symbol follows, without space
   377                              <1>                         ;2 = Symbol leads, one space
   378                              <1>                         ;3 = Symbol follows, one space
   379                              <1>                         ;4 = Symbol replace decimal separator
   380 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   381 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   382 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   383 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   384 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   385                              <1> endstruc
   386                              <1> 
   387                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   388                              <1> ;for a space of 64Gb
   389                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   390                              <1> dosLowBase  equ 600h    ;Low load address
   391                              <1> 
   392                              <1> ;Critical Error AH bitfield equates
   393                              <1> critRead    equ 0h
   394                              <1> critWrite   equ 1h
   395                              <1> critDOS     equ 0h
   396                              <1> critFAT     equ 2h
   397                              <1> critDir     equ 4h
   398                              <1> critData    equ 6h
   399                              <1> critFailOK  equ 8h
   400                              <1> critRetryOK equ 10h
   401                              <1> critIgnorOK equ 20h
   402                              <1> critCharDev equ 80h
   403                              <1> 
   404                              <1> critIgnore  equ 0
   405                              <1> critRetry   equ 1
   406                              <1> critAbort   equ 2
   407                              <1> critFail    equ 3
   408                              <1> 
   409                              <1> ;MISC ASCII control chars
   410                              <1> NUL equ 00h ;^@         | ASCII Null
   411                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   412                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   413                              <1> BEL equ 07h ;^G         | ASCII Bell
   414                              <1> BSP equ 08h ;^H         | ASCII Backspace
   415                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   416                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   417                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   418                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   419                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   420                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   421                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   422                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   423                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   424                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   425                              <1> SPC equ 20h ;Printable  | ASCII Space
   426                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   427                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   428                              <1> 
   429                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   430                              <1> ;Extended Ascii Codes
   431                              <1> eF1     equ 3Bh ;F1 second byte
   432                              <1> eF2     equ 3Ch ;F2 second byte
   433                              <1> eF3     equ 3Dh ;F3 second byte
   434                              <1> eF4     equ 3Eh ;F4 second byte
   435                              <1> eF5     equ 3Fh ;F5 second byte
   436                              <1> eF6     equ 40h ;F6 second byte
   437                              <1> eF7     equ 41h ;F7 second byte
   438                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   439                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   440                              <1> eIns    equ 52h ;Insert second byte
   441                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   442                              <1> 
   443                              <1> ;Default Configuration for the system
   444                              <1> 
   445                              <1> buffersDefault  equ 30
   446                              <1> filesDefault    equ 20
   447                              <1> fcbsDefault     equ 4
   448                              <1> safeFcbsDeflt   equ 0
   449                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
    11                              <1> ;This file will include the debuging symbols
    12                              <1> 
    13                              <1> %define true 1
    14                              <1> %define false 0
    15                              <1> 
    16                              <1> ;Switch the DEBUG to false in production!
    17                              <1> %define DEBUG false
    18                              <1> %define DPBINFO false
    19                              <1> %define REGS false
    20                              <1> %define ENDSTATUS false
    21                              <1> %define ALLOCTEST false
    22                              <1> 
    23                              <1> 
    24                              <1> ;Use this space as the debug stack
    25                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
    12                              <1> ;DOS Error codes
    13                              <1> 
    14                              <1> ;Extended Error Codes
    15                              <1> errInvFnc   equ 1   ;Invalid function number
    16                              <1> errFnf      equ 2   ;File not found
    17                              <1> errPnf      equ 3   ;Path not found
    18                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    19                              <1> errAccDen   equ 5   ;Access denied (to resource)
    20                              <1> errBadHdl   equ 6   ;Invalid handle
    21                              <1> errMCBbad   equ 7   ;MCB's destroyed
    22                              <1> errNoMem    equ 8   ;Insufficient memory
    23                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    24                              <1> errBadEnv   equ 10  ;Invalid environment
    25                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    26                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    27                              <1> errInvDat   equ 13  ;Invalid data
    28                              <1> ;           equ 14  ;Reserved
    29                              <1> errBadDrv   equ 15  ;Invalid drive specified
    30                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    31                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    32                              <1> errNoFil    equ 18  ;No more files, no match found
    33                              <1> ;The following are Driver error codes + 19
    34                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    35                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    36                              <1> errUnkUnt   equ 20  ;Unknown Unit
    37                              <1> errDrvNR    equ 21  ;Drive not ready
    38                              <1> errUnkCmd   equ 22  ;Unknown Command
    39                              <1> errCRCerr   equ 23  ;Data (CRC) error
    40                              <1> errBadRLn   equ 24  ;Bad request structure length
    41                              <1> errSekErr   equ 25  ;Seek error
    42                              <1> errUnkMed   equ 26  ;Unknown media type
    43                              <1> errSecNF    equ 27  ;Sector not Found
    44                              <1> errNoPap    equ 28  ;Printer out of paper
    45                              <1> errWF       equ 29  ;Write fault
    46                              <1> errRF       equ 30  ;Read fault
    47                              <1> errGF       equ 31  ;General fault
    48                              <1> ;----------------------------------------------
    49                              <1> ;The following two go inbetween the Disk errors
    50                              <1> errShrVio   equ 32  ;Sharing violations
    51                              <1> errLokVio   equ 33  ;File Lock violation
    52                              <1> ;----------------------------------------------
    53                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    54                              <1> errNoFCB    equ 35  ;FCB unavailable
    55                              <1> errShrFul   equ 36  ;Sharing buffer full
    56                              <1> 
    57                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    58                              <1> 
    59                              <1> errFilExist equ 80  ;File already exists
    60                              <1> errDirExist equ 82  ;Directory already exists
    61                              <1> errFI44     equ 83  ;Fail on INT 44h
    62                              <1> errRedir    equ 84  ;Too many levels of redirection
    63                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    64                              <1> errBadPass  equ 86  ;Bad password
    65                              <1> errBadParam equ 87  ;Bad parameter passed to request
    66                              <1> errNetWrite equ 88  ;Network Write Fault
    67                              <1> ;-----------------------------------------------------------------------------
    68                              <1> ;Error Loci
    69                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    70                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    71                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    72                              <1> eLocChr     equ 4   ;Serial/Character Device error
    73                              <1> eLocMem     equ 5   ;Related to RAM
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error Actions
    76                              <1> eActRet     equ 1   ;Retry
    77                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    78                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    79                              <1> eActAbt     equ 4   ;Abort with cleanup
    80                              <1> eActKil     equ 5   ;Abort without cleanup
    81                              <1> eActIgn     equ 6   ;Ignore error
    82                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error classes
    85                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    86                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    87                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    88                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    89                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    90                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    91                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    92                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    93                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    94                              <1> eClsLocked  equ 10  ;Resource Locked
    95                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    96                              <1> eClsClash   equ 12  ;Resource already exists!
    97                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
    13                              <1> ;This include file contains structures related to the EXE format
    14                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    15                              <1> 
    16                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    17                              <1> ; file.
    18                              <1> execLoadGo  equ 0
    19                              <1> execLoad    equ 1
    20                              <1> execInvld   equ 2
    21                              <1> execOverlay equ 3
    22                              <1> 
    23                              <1> struc execFrame
    24 00000000 ????????????????    <1>     .oldRBP     resq 1  
    25 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    26 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    27 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    28 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    37 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    38                              <1> .pProgEP:   ;Program EP, recycle this qword
    39 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    40 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    41                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    42                              <1> endstruc
    43                              <1> 
    44                              <1> ;Possible blocks to be pointed to by rbx
    45                              <1> 
    46                              <1> struc execProg 
    47 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    48 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    49 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    50 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    51                              <1> endstruc
    52                              <1> 
    53                              <1> struc loadProg
    54 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    55 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    56 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    57 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    58 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    59 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    60                              <1> endstruc
    61                              <1> 
    62                              <1> struc loadOvly
    63 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    64 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    65                              <1> endstruc
    66                              <1> 
    67                              <1> ;----------------------------
    68                              <1> ;   EXE header structures   :
    69                              <1> ;----------------------------
    70                              <1> 
    71                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    72                              <1> dosMagicSignature   equ "MZ"
    73                              <1> dosMagicSignature2  equ "ZM"
    74                              <1> struc imageDosHdr
    75 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    76 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    77 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    78 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    79 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    80 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    81 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    82 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    83 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    84 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    85 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    86 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    87 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    88 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    89 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    90 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    91 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    92 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    93 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    94                              <1> endstruc
    95                              <1> 
    96                              <1> ;Pssobile signatures pointed to by e_lfanew
    97                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    98                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    99                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
   100                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   101                              <1> 
   102                              <1> ;COFF File header @ [e_lfanew]
   103                              <1> 
   104                              <1> struc imageFileHeader
   105 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
   106 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   107 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   108 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   109 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   110 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   111 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   112 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   113                              <1> endstruc
   114                              <1> 
   115                              <1> ;The only valid values in the .machineType field
   116                              <1> 
   117                              <1> imageFileMachineUnknown equ 0
   118                              <1> imageFileMachineAMD64   equ 08664h 
   119                              <1> 
   120                              <1> ;Characteristics to check for
   121                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   122                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   123                              <1> 
   124                              <1> ;Optional header, immediately follows COFF header
   125                              <1> 
   126                              <1> struc imageFileOptionalHeader
   127 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   128 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   129 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   130 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   131 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   132 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   133 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   134 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   135 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   136 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   137 00000024 ????????            <1> 	.dFileAlignment             resd 1
   138 00000028 ????                <1> 	.wMajOSVer                  resw 1
   139 0000002A ????                <1> 	.wMinOSVer                  resw 1
   140 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   141 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   142 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   143 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   144 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   145 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   146 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   147 00000040 ????????            <1> 	.dCheckSum                  resd 1
   148 00000044 ????                <1> 	.wSubsystem                 resw 1
   149 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   150 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   151 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   152 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   153 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   154 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   155 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   156                              <1> endstruc
   157                              <1> 
   158                              <1> romMagicNum     equ 0107h
   159                              <1> pe32MagicNum    equ 010Bh
   160                              <1> pe64MagicNum    equ 020Bh
   161                              <1> 
   162                              <1> ;Data directory header structure
   163                              <1> 
   164                              <1> struc imageDataDirectory
   165 00000000 ????????            <1>     .virtualAddress  resd 1
   166 00000004 ????????            <1>     .size    resd 1
   167                              <1> endstruc
   168                              <1> 
   169                              <1> struc baseRelocBlock
   170 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   171 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   172                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   173                              <1> endstruc
   174                              <1> ;Section headers that form the Section Table.
   175                              <1> ;There are wNumberOfSections many entries in this table.
   176                              <1> ;Each entry is one imageSectionHdr
   177                              <1> 
   178                              <1> struc imageSectionHdr       ;size 40 bytes
   179 00000000 ????????????????    <1>     .qName                  resb 8
   180 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   181 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   182 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   183 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   184 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   185 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   186 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   187 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   188 00000024 ????????            <1> 	.dCharacteristics       resd 1
   189                              <1> endstruc
   190                              <1> 
   191                              <1> ;Section Hdr characteristics flags 
   192                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   193                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   194                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
    16                              <1> ; We arrive here with the following values in the registers.
    17                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    18                              <1> ; dx  = Int 33h boot device number
    19                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    20                              <1> 
    21 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    22 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    23 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    24 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    25 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    26 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    27 0000001A F348A5              <1>     rep movsq   ;Copy over
    28 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    29 00000022 50                  <1>     push rax
    30 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    31                              <1> sysInitldr:
    32                              <1> ;Now the tough part, load DOS to 800
    33 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    34                              <1> .read:
    35 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    36 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    36 00000035 00                  <1>
    37 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    38 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    39 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    40 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    41 0000003F CD33                <1>     int 33h
    42 00000041 7206                <1>     jc .readFail
    43 00000043 6800080000          <1>     push qword 800h
    44 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    45                              <1> .readFail:
    46 00000049 FFCE                <1>     dec esi
    47 0000004B 75DC                <1>     jnz .read
    48 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    49 00000054 B804130000          <1>     mov eax, 1304h
    50 00000059 CD30                <1>     int 30h
    51 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    52 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    52 00000066 6F6164204572726F72- <1>
    52 0000006F 0A0D00              <1>
    53 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    53 0000007B 000000000000000000- <1>
    53 00000084 000000000000000000- <1>
    53 0000008D 000000000000000000- <1>
    53 00000096 000000000000000000- <1>
    53 0000009F 000000000000000000- <1>
    53 000000A8 000000000000000000- <1>
    53 000000B1 000000000000000000- <1>
    53 000000BA 000000000000000000- <1>
    53 000000C3 000000000000000000- <1>
    53 000000CC 000000000000000000- <1>
    53 000000D5 000000000000000000- <1>
    53 000000DE 000000000000000000- <1>
    53 000000E7 000000000000000000- <1>
    53 000000F0 000000000000000000- <1>
    53 000000F9 00000000000000      <1>
    54                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    55                              <1>     ;Store space for a static PSP
    56 00000100 000000000000000000- <1>     db 100h dup 00h
    56 00000109 000000000000000000- <1>
    56 00000112 000000000000000000- <1>
    56 0000011B 000000000000000000- <1>
    56 00000124 000000000000000000- <1>
    56 0000012D 000000000000000000- <1>
    56 00000136 000000000000000000- <1>
    56 0000013F 000000000000000000- <1>
    56 00000148 000000000000000000- <1>
    56 00000151 000000000000000000- <1>
    56 0000015A 000000000000000000- <1>
    56 00000163 000000000000000000- <1>
    56 0000016C 000000000000000000- <1>
    56 00000175 000000000000000000- <1>
    56 0000017E 000000000000000000- <1>
    56 00000187 000000000000000000- <1>
    56 00000190 000000000000000000- <1>
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 00000000            <1>
    57                              <1> ;END OF FIRST SECTOR!!
    58                              <1> ;DOS SYSINIT BEGINS HERE
    59                              <1> ;First move the alignment of the DOSSEG to 4Kb
    60                              <1> initBegin:
    61 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    62 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    63 00000206 0F32                <1>     rdmsr
    64 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    65 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    66 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    67 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    68 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    69 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    70 00000221 89F8                <1>     mov eax, edi
    71 00000223 4889FA              <1>     mov rdx, rdi
    72 00000226 48C1EA20            <1>     shr rdx, 20h
    73 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    74                              <1> ;------------------------------------------------;
    75                              <1> ;              Connect Debugger                  ;
    76                              <1> ;------------------------------------------------;
    77                              <1> %if DEBUG
    78                              <1> ;Only connect if in debug mode
    79                              <1>     mov eax, 0C501h ;Connect debugger
    80                              <1>     int 35h
    81                              <1> %endif
    82                              <1> ;------------------------------------------------;
    83                              <1> ;           Sanitise the data area               ;
    84                              <1> ;------------------------------------------------;
    85                              <1> ; This call initialises ALL fields in the DOS    ;
    86                              <1> ; data area with 0's. Thus any fields, which     ;
    87                              <1> ; need to be initialised with a 0 value, are     ;
    88                              <1> ; initialised for free.                          ;
    89                              <1> ;------------------------------------------------;
    90 0000022C B9[BCDA0300]        <1>     mov ecx, dSegLen
    91 00000231 30C0                <1>     xor al, al
    92 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    93 00000234 F3AA                <1>     rep stosb
    94 00000236 5F                  <1>     pop rdi
    95                              <1> ;------------------------------------------------;
    96                              <1> ;          Start saving Basic DOS data           ;
    97                              <1> ;------------------------------------------------;
    98 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    98 0000023C [10C00300]          <1>
    99                              <1> ;Copy DOS to its final resting place
   100 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
   100 00000245 [00C00300]          <1>
   101 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   101 0000024E [08C00300]          <1>
   102 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   103 00000255 4881C7[BCDA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   104 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   105 00000263 B900100000          <1>     mov ecx, 1000h
   106 00000268 F348A5              <1>     rep movsq
   107                              <1> 
   108 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   109 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   110 00000271 664489C0            <1>     mov ax, r8w
   111 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   112 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   113 00000285 64C60425[7EC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   113 0000028D 05                  <1>
   114 0000028E 64C60425[A3C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   114 00000296 05                  <1>
   115 00000297 64C60425[7FC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 0000029F 01                  <1>
   116 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   116 000002A5 [25C00300]0300      <1>
   117 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   117 000002B0 [27C00300]0100      <1>
   118                              <1>     ;If no detected Int 33h devices, halt 
   119 000002B6 49C1E810            <1>     shr r8, 2*8
   120 000002BA 4584C0              <1>     test r8b, r8b
   121 000002BD 0F8426100000        <1>     jz errorInit
   122                              <1> ;------------------------------------------------;
   123                              <1> ;          Add additional page tables            ;
   124                              <1> ;------------------------------------------------;
   125                              <1> ;This will allow for up to 64Gb of addressible space
   126 000002C3 4889EF              <1>     mov rdi, rbp
   127                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   128 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   129 000002CB 57                  <1>     push rdi
   130 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   130 000002D5 00                  <1>
   131                              <1> pdtLoop:
   132 000002D6 48AB                <1>     stosq
   133 000002D8 480500002000        <1>     add rax, 200000h
   134 000002DE FFC9                <1>     dec ecx
   135 000002E0 75F4                <1>     jnz pdtLoop
   136 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   137                              <1> ;Now we add every 4kb page to the page directory pointer table
   138                              <1> ;15 4kb pages to consider
   139 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   140 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   141 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   142 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   143 000002F7 B93C000000          <1>     mov ecx, 60
   144 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   145                              <1> pdptLoop:
   146 00000302 48AB                <1>     stosq
   147 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   148 0000030A FFC9                <1>     dec ecx
   149 0000030C 75F4                <1>     jnz pdptLoop
   150 0000030E 0F20DF              <1>     mov rdi, cr3
   151 00000311 0F22DF              <1>     mov cr3, rdi
   152                              <1> ;------------------------------------------------;
   153                              <1> ;                   MCB inits                    ;
   154                              <1> ;------------------------------------------------;
   155                              <1> mcbInit:
   156 00000314 B820E80000          <1>     mov eax, 0E820h
   157 00000319 CD35                <1>     int 35h
   158                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   159 0000031B E804010000          <1>     call .mcbFindAddress
   160 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   161                              <1>     ;Here, we try use E801h
   162 00000322 B801E80000          <1>     mov eax, 0E801h
   163 00000327 CD35                <1>     int 35h
   164 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   165 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   166 0000032F 85C0                <1>     test eax, eax
   167 00000331 741B                <1>     jz .worst
   168 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   169 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   170 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   171 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   172 00000349 E909010000          <1>     jmp mcbBuild
   173                              <1> .worst:
   174                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   175 0000034E B800002000          <1>     mov eax, 200000h
   176 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   176 00000358 [08C00300]          <1>
   177 0000035C 29D8                <1>     sub eax, ebx
   178 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   179 00000366 E9EC000000          <1>     jmp mcbBuild 
   180                              <1> .mcbi1:
   181 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   182 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   182 00000377 00                  <1>
   183 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   184 0000037C 0F85C2000000        <1>     jne .mcbFail
   185 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   186                              <1>     ;PCI hole always exists so this value will always be a dword
   187 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   188 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   189 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   190 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   191 0000039B 773C                <1>     ja .skipISA
   192                              <1> ;Here we deal with ISA hole issues
   193 0000039D B820E80000          <1>     mov eax, 0E820h
   194 000003A2 CD35                <1>     int 35h
   195 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   195 000003AD 00                  <1>
   196 000003AE E871000000          <1>     call .mcbFindAddress
   197 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   198 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   198 000003C2 00                  <1>
   199 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   200 000003C7 0F858A000000        <1>     jne mcbBuild  
   201 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   202 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   203                              <1> .skipISA:
   204 000003D9 B820E80000          <1>     mov eax, 0E820h
   205 000003DE CD35                <1>     int 35h
   206 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   206 000003E9 00                  <1>
   207 000003EA E835000000          <1>     call .mcbFindAddress
   208 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   209 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   209 000003FA 00                  <1>
   210 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   211 000003FF 7556                <1>     jne mcbBuild   
   212 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   213                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   214 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   214 0000040E 00                  <1>
   215 0000040F 4839CB              <1>     cmp rbx, rcx
   216 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   217 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   217 0000041B [1BC00300]          <1>
   218 0000041F E933000000          <1>     jmp mcbBuild
   219                              <1> .mcbFindAddress:
   220                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   221                              <1> ;Entry: rax = Address of arena to search for
   222                              <1> ;       rsi = Pointer to memory map
   223                              <1> ;       ecx = Number of 24 byte entries
   224                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   225                              <1> ;       CF=CY : value in rax not found
   226 00000424 56                  <1>     push rsi
   227 00000425 51                  <1>     push rcx
   228 00000426 50                  <1>     push rax
   229                              <1> .mfa0:
   230 00000427 483B06              <1>     cmp rax, qword [rsi]
   231 0000042A 7410                <1>     je .mcbAddressFound
   232 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   233 00000433 FFC9                <1>     dec ecx
   234 00000435 79F0                <1>     jns .mfa0
   235                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   236 00000437 58                  <1>     pop rax
   237 00000438 59                  <1>     pop rcx
   238 00000439 5E                  <1>     pop rsi
   239 0000043A F9                  <1>     stc
   240 0000043B C3                  <1>     ret
   241                              <1> .mcbAddressFound:
   242 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   243 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   244 00000440 59                  <1>     pop rcx
   245 00000441 5E                  <1>     pop rsi
   246 00000442 F8                  <1>     clc
   247 00000443 C3                  <1>     ret
   248                              <1> .mcbFail:
   249 00000444 488D2DD40E0000      <1>     lea rbp, mcbFailmsg
   250 0000044B B804130000          <1>     mov eax, 1304h
   251 00000450 CD30                <1>     int 30h
   252 00000452 E9920E0000          <1>     jmp errorInit
   253                              <1> 
   254                              <1> mcbBuild:
   255                              <1> ;Actually build the MCB chain here
   256                              <1> ;Start by computing the difference between userbase and DOS area
   257                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   258 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   258 0000045C [08C00300]          <1>
   259 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   260 00000467 56                  <1>     push rsi    ;Save ptr
   261 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   262 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   263 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   264 0000047A 5B                  <1>     pop rbx
   265 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   266 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   267 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   268 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   269 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   270 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   270 00000499 [39C00300]          <1>
   271                              <1> 
   272                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   273 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   273 000004A5 00000000            <1>
   274 000004A9 746E                <1>     jz .skipISA
   275                              <1>     ;Here if an ISA hole exists, place a MCB around it
   276 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   277                              <1>     ;Remove one MCB worth of space from alloc
   278 000004B2 31C9                <1>     xor ecx, ecx
   279 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   280 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   281 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   282 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   283 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   284 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   285 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   286 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   286 000004DA 00                  <1>
   287 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   288 000004DE 480510000000        <1>     add rax, mcb_size
   289 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   290 000004E7 C1E904              <1>     shr ecx, 4
   291 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   292 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   293 000004F0 4881C310000000      <1>     add rbx, mcb_size
   294 000004F7 4801CB              <1>     add rbx, rcx
   295                              <1>     ;RBX should now be at 16Mb
   296 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   297 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   298 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   299 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   300 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   301 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   302                              <1> .skipISA:
   303                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   304                              <1>     ;rbx points to a block with "Z" marker
   305 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   305 00000521 00000000            <1>
   306 00000525 7470                <1>     jz .exit
   307                              <1>     ;Add PCI hole MCB
   308 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   309                              <1>     ;Remove one MCB worth of space from alloc
   310 0000052E 31C9                <1>     xor ecx, ecx
   311 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   312 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   313 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   314 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   315 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   316 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   317 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   318 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   318 00000556 00                  <1>
   319 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   320 0000055A 480510000000        <1>     add rax, mcb_size
   321 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   322 00000563 C1E904              <1>     shr ecx, 4
   323 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   324 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   325 0000056C 4881C310000000      <1>     add rbx, mcb_size
   326 00000573 4801CB              <1>     add rbx, rcx
   327                              <1>     ;RBX should now be at 4Gb
   328 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   329 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   330 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   330 00000586 [1BC00300]          <1>
   331 0000058A 48C1E904            <1>     shr rcx, 4
   332 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   333 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   334                              <1> .exit:
   335                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   336 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   337                              <1> ;------------------------------------------------;
   338                              <1> ;          Kernel inits and adjustments          ;
   339                              <1> ;------------------------------------------------;
   340                              <1> ;Adjust Interrupt Entries Int 00h-15h
   341                              <1> adjExceptions:
   342 0000059E 30DB                <1>     xor bl, bl
   343 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   344 000005A5 CD35                <1>     int 35h
   345 000005A7 31C9                <1>     xor ecx, ecx    ;Start from interrupt 00h
   346 000005A9 488D3D250E0000      <1>     lea rdi, exceptData
   347 000005B0 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   348                              <1> .ai0:
   349 000005B2 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   350 000005B7 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   351 000005BA 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   352                              <1> .ai1:
   353 000005BD CD35                <1>     int 35h
   354 000005BF 4881C708000000      <1>     add rdi, 8
   355 000005C6 FFC1                <1>     inc ecx
   356 000005C8 81F915000000        <1>     cmp ecx, 21
   357 000005CE 75E2                <1>     jne .ai0
   358                              <1> ;Adjust Interrupt Entries Int 40h-49h
   359                              <1> adjInts:
   360 000005D0 B340                <1>     mov bl, 40h
   361 000005D2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   362 000005D7 CD35                <1>     int 35h
   363 000005D9 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   364 000005DE 488D3DA00E0000      <1>     lea rdi, intData
   365 000005E5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   366                              <1> .ai0:
   367 000005E7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   368 000005EC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   369 000005EF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   370                              <1> .ai1:
   371 000005F2 CD35                <1>     int 35h
   372 000005F4 4881C708000000      <1>     add rdi, 8
   373 000005FB FFC1                <1>     inc ecx
   374 000005FD 81F950000000        <1>     cmp ecx, 50h
   375 00000603 75E2                <1>     jne .ai0
   376                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   377                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   378                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   379                              <1>     %if DEBUG
   380                              <1> debugPopUpMsg:
   381                              <1>     push rbx
   382                              <1>     push rbp
   383                              <1>     push rcx
   384                              <1>     push rdx
   385                              <1>     mov ecx, 53 ;A large number of lines
   386                              <1>     xor edx, edx    ;COM 1
   387                              <1> .cls:
   388                              <1>     mov eax, 010Ah ;Transmit Line feed
   389                              <1>     int 34h
   390                              <1>     dec ecx
   391                              <1>     jnz .cls
   392                              <1>     lea rbx, qword [debPrintNullString + rbp]
   393                              <1>     lea rbp, .msg
   394                              <1>     call rbx
   395                              <1>     jmp short .exit
   396                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   397                              <1> .exit:
   398                              <1>     pop rdx
   399                              <1>     pop rcx
   400                              <1>     pop rbp
   401                              <1>     pop rbx
   402                              <1>     %endif
   403                              <1> 
   404                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   405 00000605 488D15DD0C0000      <1>     lea rdx, errorInit ;Get segment start address
   406 0000060C B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   407 00000611 CD41                <1>     int 41h
   408 00000613 488D15CF0C0000      <1>     lea rdx, errorInit ;Get segment start address
   409 0000061A B844250000          <1>     mov eax, 2544h
   410 0000061F CD41                <1>     int 41h
   411                              <1> ;------------------------------------------------;
   412                              <1> ;          Driver Adjustments and inits          ;
   413                              <1> ;------------------------------------------------;
   414                              <1> ;Modify the pointers in nData before putting them in the data area
   415 00000621 48012DDD0E0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   416 00000628 48012DE00E0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   417 0000062F 48012DE10E0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   418                              <1> ;Copy the Null driver to its location in Sysvars
   419 00000636 B922000000          <1>     mov ecx, drvHdr_size
   420 0000063B 488D35C30E0000      <1>     lea rsi, qword [nData]
   421 00000642 488DBD[80C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   422 00000649 F3A4                <1>     rep movsb   
   423                              <1> 
   424                              <1> ;Adjust the addresses in the other driver headers 
   425 0000064B 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   425 0000064D [6071000000000000]  <1>
   426 00000655 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   427 0000065A 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   428                              <1> adjDrivers:
   429 0000065E E86A0C0000          <1>     call adjustDrvHdr
   430 00000663 E2F9                <1>     loop adjDrivers
   431                              <1> ;Open NUL
   432                              <1> ;NUL opened
   433                              <1> ;Open CON
   434                              <1> conInit:    ;Rather than keeping this resident... do it here
   435                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   436 00000665 488D95[4B740000]    <1>     lea rdx, qword [rbp + fastOutput]
   437 0000066C B849250000          <1>     mov eax, 2549h
   438 00000671 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   439 00000673 488D95[53740000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   440 0000067A B83B250000          <1>     mov eax, 253Bh
   441 0000067F CD41                <1>     int 41h ;Hook int 3Bh
   442                              <1> .ci0:
   443 00000681 B401                <1>     mov ah, 01      ;Get buffer status
   444 00000683 CD36                <1>     int 36h
   445 00000685 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   446 00000687 30E4                <1>     xor ah, ah
   447 00000689 CD36                <1>     int 36h ;Read key to flush from buffer
   448 0000068B EBF4                <1>     jmp short .ci0
   449                              <1> .ci1:
   450 0000068D B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   451 00000692 CD30                <1>     int 30h
   452 00000694 B402                <1>     mov ah, 02h
   453 00000696 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   454 00000698 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   455 0000069A CD30                <1>     int 30h
   456 0000069C B707                <1>     mov bh, 07h     ;Grey/Black attribs
   457 0000069E B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   458 000006A3 CD30                <1>     int 30h
   459                              <1> 
   460                              <1>     ;Save ptr to ConHdr in Sysvars
   461 000006A5 488D85[60710000]    <1>     lea rax, qword [rbp + conHdr]
   462 000006AC 6448890425-         <1>     mov qword fs:[vConPtr], rax
   462 000006B1 [59C00300]          <1>
   463                              <1> 
   464                              <1>     ;Fix the ext ESC function handler address
   465 000006B5 488D85[5C250000]    <1>     lea rax, qword [rbp + editKeys]
   466 000006BC 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   466 000006C1 [5A000000]          <1>
   467                              <1> 
   468                              <1> ;CLOCK init prock
   469                              <1> ;Set the time and date using the RTC (if present)
   470                              <1> clkInit:
   471                              <1>    ;Save ptr to ClkHdr in Sysvars first
   472 000006C5 488D85[C6710000]    <1>     lea rax, qword [rbp + clkHdr]
   473 000006CC 6448890425-         <1>     mov qword fs:[clockPtr], rax
   473 000006D1 [51C00300]          <1>
   474                              <1> ;CH - Hours, in BCD
   475                              <1> ;CL - Minutes, in BCD
   476                              <1> ;DH - Seconds, in BCD
   477 000006D5 B402                <1>     mov ah, 02  ;Read RTC Time
   478 000006D7 CD3A                <1>     int 3Ah
   479 000006D9 7271                <1>     jc .clkEnd  ;if error, just exit
   480                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   481 000006DB 0FB6C5              <1>     movzx eax, ch   ;Hours
   482 000006DE E84D000000          <1>     call .bcd2Bin
   483 000006E3 88C5                <1>     mov ch, al
   484 000006E5 0FB6C1              <1>     movzx eax, cl     ;Mins
   485 000006E8 E843000000          <1>     call .bcd2Bin
   486 000006ED 88C1                <1>     mov cl, al
   487 000006EF 0FB6C6              <1>     movzx eax, dh   ;Seconds
   488 000006F2 E839000000          <1>     call .bcd2Bin
   489 000006F7 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   490 000006F9 89C2                <1>     mov edx, eax
   491 000006FB B42D                <1>     mov ah, 2Dh ;DOS Set Time
   492 000006FD CD41                <1>     int 41h
   493                              <1> ;Now get the date from RTC
   494                              <1> ;CL - Year, in BCD
   495                              <1> ;DH - Month, in BCD
   496                              <1> ;DL - Day, in BCD
   497 000006FF B404                <1>     mov ah, 04  ;Read RTC Date
   498 00000701 CD3A                <1>     int 3Ah
   499 00000703 7247                <1>     jc .clkEnd
   500                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   501 00000705 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   502 00000708 E823000000          <1>     call .bcd2Bin
   503 0000070D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   504 00000710 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   505 00000716 0FB6C6              <1>     movzx eax, dh   ;Get Months
   506 00000719 E812000000          <1>     call .bcd2Bin
   507 0000071E 88C6                <1>     mov dh, al  
   508 00000720 0FB6C2              <1>     movzx eax, dl   ;Get day
   509 00000723 E808000000          <1>     call .bcd2Bin
   510 00000728 88C2                <1>     mov dl, al
   511 0000072A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   512 0000072C CD41                <1>     int 41h
   513 0000072E EB1C                <1>     jmp short .clkEnd
   514                              <1> .bcd2Bin:
   515                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   516 00000730 51                  <1>     push rcx
   517 00000731 89C1                <1>     mov ecx, eax
   518 00000733 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   519 00000738 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   520 0000073E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   521 00000741 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   522                              <1> .b2blp:
   523 00000744 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   524 00000746 FFC9                <1>     dec ecx
   525 00000748 75FA                <1>     jnz .b2blp
   526                              <1> .b2bexit:
   527 0000074A 59                  <1>     pop rcx
   528 0000074B C3                  <1>     ret
   529                              <1> .clkEnd:
   530                              <1> ;------------------------------------------------;
   531                              <1> ;         Link DOS to temporary Buffer           ;
   532                              <1> ;------------------------------------------------;
   533                              <1> tempBufferInit:
   534 0000074C 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   535 00000753 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   535 00000758 [63C00300]          <1>
   536 0000075C 31C0                <1>     xor eax, eax
   537 0000075E 48FFC8              <1>     dec rax
   538 00000761 48AB                <1>     stosq   ;.nextBufPtr, end of list
   539 00000763 AA                  <1>     stosb   ;.driveNumber, Free entry
   540 00000764 48FFC0              <1>     inc rax
   541 00000767 AA                  <1>     stosb   ;.bufferFlags, No flags
   542                              <1> ;------------------------------------------------;
   543                              <1> ;         Init msd driver, create DPB            ;
   544                              <1> ;------------------------------------------------;
   545                              <1> storageInits:
   546                              <1> ;First save dpb pointer in sysvars
   547 00000768 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   548 0000076F 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   548 00000774 [41C00300]          <1>
   549                              <1> ;Open Mass Storage
   550 00000778 55                  <1>     push rbp
   551 00000779 E8A90D0000          <1>     call diskInit
   552 0000077E 5D                  <1>     pop rbp
   553 0000077F 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   554 00000782 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
   555 0000078A 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   556 0000078C 0F84570B0000        <1>     jz errorInit
   557 00000792 488D95[E67B0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   558 00000799 30C9                <1>     xor cl, cl  ;Clear counter
   559 0000079B 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   559 000007A0 [41C00300]          <1>
   560                              <1> .si0:   
   561 000007A4 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   562 000007A7 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   563 000007A9 CD41                <1>     int 41h
   564                              <1> ;Add other data to DPB
   565 000007AB 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   566 000007AE 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   567 000007B1 50                  <1>     push rax
   568 000007B2 488D87[E8710000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   569 000007B9 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   570 000007BD 58                  <1>     pop rax
   571 000007BE FEC1                <1>     inc cl
   572 000007C0 38C1                <1>     cmp cl, al  ;When above, we are have finished
   573 000007C2 7716                <1>     ja .si1
   574 000007C4 50                  <1>     push rax
   575 000007C5 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   576 000007C9 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   577 000007CD 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   578 000007D0 58                  <1>     pop rax
   579 000007D1 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   580 000007D8 EBCA                <1>     jmp short .si0
   581                              <1> .si1:
   582                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   583 000007DA 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   584 000007E2 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   585                              <1> ;------------------------------------------------;
   586                              <1> ;          Find largest sector size              ;
   587                              <1> ;------------------------------------------------;
   588                              <1> sectorSizeSearch:
   589                              <1> ;Done by reading BPB's for each drive
   590 000007E5 488D9D[E67B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   591                              <1>     
   592                              <1>     ;Go thru each block individually
   593 000007EC 31C0                <1>     xor eax, eax
   594 000007EE 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   595                              <1> .findLargest:
   596 000007F1 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   597 000007F5 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   598 000007FA 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   599 00000801 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   600 00000804 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   601 00000807 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   602 00000809 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   602 0000080E [61C00300]          <1>
   603                              <1> ;------------------------------------------------;
   604                              <1> ;                CDS array inits                 ;
   605                              <1> ;------------------------------------------------;
   606 00000812 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   607 00000817 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   608 0000081E E802000000          <1>     call makeCDSArray
   609 00000823 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   610                              <1> makeCDSArray:
   611                              <1> ;Input: ecx = Size of array
   612                              <1> ;       rdi = Pointer to the start of the CDS array
   613                              <1> ;Ouput: rdi = first byte past the end of the table
   614 00000825 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   614 0000082A [6BC00300]          <1>
   615 0000082E 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   615 00000833 [41C00300]          <1>
   616 00000837 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   617                              <1> .tempCDS:
   618 0000083C 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   619 0000083E 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   620 00000842 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   621 00000849 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   622 0000084F 31D2                <1>     xor edx, edx    ;Use edx for flags
   623 00000851 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   624 00000858 7409                <1>     je .skipValidCDS
   625 0000085A BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   626 0000085F 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   627                              <1> .skipValidCDS:
   628 00000863 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   629 00000867 FFC0                <1>     inc eax ;Increment the drive letter
   630 00000869 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   631 00000870 FFC9                <1>     dec ecx
   632 00000872 75C8                <1>     jnz .tempCDS
   633 00000874 C3                  <1>     ret
   634                              <1> initialCDSWritten:
   635                              <1> ;------------------------------------------------;
   636                              <1> ;     Set up general PSP areas and DOS vars      ;
   637                              <1> ;------------------------------------------------;
   638                              <1> ;Additional DOS Vars init and fixups
   639 00000875 64C60425[FEC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   639 0000087D FF                  <1>
   640 0000087E 64C60425[C6C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   640 00000886 2F                  <1>
   641 00000887 488DBD[D1010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   642 0000088E 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   642 00000893 [2E000000]          <1>
   643                              <1> 
   644                              <1> ;Server Table setup
   645 00000897 488D3D(F5030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   646 0000089E 48893D(83DA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   647                              <1> 
   648                              <1> ;Set network machine name to... nothing!
   649 000008A5 488DBD[CBC30300]    <1>     lea rdi, qword [rbp + machineName]
   650 000008AC B910000000          <1>     mov ecx, 10h    ;16 chars long
   651 000008B1 B020                <1>     mov al, SPC ;Space char
   652 000008B3 F3AA                <1>     rep stosb   ;Fill with space chars
   653                              <1> 
   654                              <1> 
   655                              <1> ;Patch Data Table init
   656 000008B5 488DBD[DBC30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   657 000008BC 488D85[34690000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   658 000008C3 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   659 000008C5 488D85[3E690000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   660 000008CC 48AB                <1>     stosq
   661 000008CE 488D85[48690000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   662 000008D5 48AB                <1>     stosq
   663 000008D7 488D85[52690000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   664 000008DE 48AB                <1>     stosq
   665                              <1> 
   666                              <1> ;Initial PSP Init
   667 000008E0 488D1D19F8FFFF      <1>     lea rbx, qword [tempPSP]
   668 000008E7 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   668 000008EC [14C40300]          <1>
   669 000008F0 53                  <1>     push rbx
   670 000008F1 4881C380000000      <1>     add rbx, psp.dta
   671 000008F8 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   671 000008FD [0CC40300]          <1>
   672 00000901 5B                  <1>     pop rbx
   673 00000902 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   674 00000907 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   675 0000090D C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   676 00000911 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   677 00000919 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   678 0000091D 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   679 00000921 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   680 00000925 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   680 0000092E FF                  <1>
   681 0000092F 48AB                <1>     stosq   ;8 bytes
   682 00000931 31C0                <1>     xor eax, eax
   683 00000933 50                  <1>     push rax    ;Save 0 on the stack
   684 00000934 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   685 00000937 48AB                <1>     stosq   ;16 bytes
   686 00000939 AB                  <1>     stosd   ;20 bytes
   687 0000093A 58                  <1>     pop rax ;Get 0 back
   688 0000093B 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   689 0000093F 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   690 00000943 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   691 00000947 4889DA              <1>     mov rdx, rbx
   692 0000094A B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   693 0000094F CD41                <1>     int 41h
   694 00000951 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   695 00000955 B843350000          <1>     mov eax, 3543h
   696 0000095A CD41                <1>     int 41h
   697 0000095C 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   698 00000960 B844350000          <1>     mov eax, 3544h
   699 00000965 CD41                <1>     int 41h
   700 00000967 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   701                              <1> 
   702 0000096B B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   703 00000970 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   704 00000974 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   705                              <1> ;------------------------------------------------;
   706                              <1> ;          Default File Handle Creation          ;
   707                              <1> ;                                                ;
   708                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   709                              <1> ;------------------------------------------------;
   710                              <1> defaultFileHandles:
   711                              <1> ;Fill in the default file table entries
   712 00000976 488D9D[2CC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   713 0000097D 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   714 00000984 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   715 0000098A 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   715 0000098F [49C00300]          <1>
   716 00000993 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   716 0000099C 20                  <1>
   717                              <1> ;GOTO FIRST FILE 
   718 0000099D 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   719                              <1> ;Write AUX
   720 000009A4 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   721 000009A9 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   722 000009AF C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   723 000009B3 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   724                              <1>     ;No EOF when reading from the device
   725 000009B7 488B85[82710000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   726 000009BE 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   727                              <1>     ;Ignore disk related fields and Date/Time of open
   728 000009C2 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   729                              <1>     ;11 chars in 8.3 name
   730 000009C6 488D35C6090000      <1>     lea rsi, auxName
   731 000009CD B903000000          <1>     mov ecx, 3
   732 000009D2 F3A4                <1>     rep movsb   ;Move the three bytes
   733 000009D4 4889D0              <1>     mov rax, rdx
   734 000009D7 48AB                <1>     stosq   ;Eight spaces left to print
   735 000009D9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   735 000009DE [14C40300]          <1>
   736 000009E2 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   737                              <1> ;GOTO NEXT ENTRY
   738 000009E6 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   739                              <1>     ;Write CON
   740 000009ED 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   741 000009F2 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   742 000009F8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   743 000009FC C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   744                              <1>     ;No EOF when reading from the device
   745 00000A00 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   745 00000A05 [59C00300]          <1>
   746 00000A09 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   747                              <1>     ;Ignore disk related fields and Date/Time of open
   748 00000A0D 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   749                              <1>     ;11 chars in 8.3 name
   750 00000A11 488D3577090000      <1>     lea rsi, conName
   751 00000A18 B903000000          <1>     mov ecx, 3
   752 00000A1D F3A4                <1>     rep movsb   ;Move the three bytes
   753 00000A1F 4889D0              <1>     mov rax, rdx
   754 00000A22 48AB                <1>     stosq   ;Eight spaces left to print
   755 00000A24 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   755 00000A29 [14C40300]          <1>
   756 00000A2D 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   757                              <1> ;GOTO NEXT ENTRY
   758 00000A31 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   759                              <1> ;Write PRN
   760 00000A38 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   761 00000A3D 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   762 00000A43 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   763 00000A47 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   764                              <1>     ;Want EOF when reading from to the device
   765 00000A4B 488B85[A4710000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   766 00000A52 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   767                              <1>     ;Ignore disk related fields and Date/Time of open
   768 00000A56 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   769                              <1>     ;11 chars in 8.3 name
   770 00000A5A 488D3536090000      <1>     lea rsi, prnName
   771 00000A61 B903000000          <1>     mov ecx, 3
   772 00000A66 F3A4                <1>     rep movsb   ;Move the three bytes
   773 00000A68 4889D0              <1>     mov rax, rdx
   774 00000A6B 48AB                <1>     stosq   ;Eight spaces left to print
   775 00000A6D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   775 00000A72 [14C40300]          <1>
   776 00000A76 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   777                              <1> ;Zero word 0 of entry 4 and 5
   778 00000A7A 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   779 00000A81 31C0                <1>     xor eax, eax
   780                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   781                              <1>     ; which is ok as these are empty entries, ready to be used)
   782 00000A83 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   783 00000A85 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   784 00000A8C 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   785                              <1> ;------------------------------------------------;
   786                              <1> ;              Setup DLLMGR Hooks                ;
   787                              <1> ;------------------------------------------------;   
   788 00000A8E 488DBD[A4C00300]    <1>     lea rdi, qword [rbp + dllHooks]
   789 00000A95 488D85[23700000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = CY
   790 00000A9C 48AB                <1>     stosq
   791 00000A9E 48AB                <1>     stosq
   792                              <1> ;------------------------------------------------;
   793                              <1> ;               Setup Share Hooks                ;
   794                              <1> ;------------------------------------------------;
   795 00000AA0 488DBD[B4C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   796 00000AA7 488D9D[23700000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   797 00000AAE 488D85[1D700000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   798 00000AB5 48AB                <1>     stosq   ;Store bad for openFileCheck
   799 00000AB7 4893                <1>     xchg rax, rbx
   800 00000AB9 48AB                <1>     stosq   ;Store good for open
   801 00000ABB 48AB                <1>     stosq   ;Store good for close
   802 00000ABD 4893                <1>     xchg rax, rbx
   803                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   804 00000ABF B905000000          <1>     mov ecx, 5
   805 00000AC4 F348AB              <1>     rep stosq
   806 00000AC7 4893                <1>     xchg rax, rbx
   807 00000AC9 48AB                <1>     stosq   ;Store good for check file lock exists
   808 00000ACB 4893                <1>     xchg rax, rbx
   809                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   810 00000ACD B903000000          <1>     mov ecx, 3
   811 00000AD2 F348AB              <1>     rep stosq
   812 00000AD5 4893                <1>     xchg rax, rbx
   813 00000AD7 48AB                <1>     stosq   ;Store good for close dup file share
   814 00000AD9 4893                <1>     xchg rax, rbx
   815 00000ADB 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   816 00000ADD 48AB                <1>     stosq   ;Store bad for update dir information
   817                              <1> ;------------------------------------------------;
   818                              <1> ;             Print Welcome Message              ;
   819                              <1> ;------------------------------------------------;
   820 00000ADF 488D1523080000      <1>     lea rdx, strtmsg
   821 00000AE6 B409                <1>     mov ah, 09h
   822 00000AE8 CD41                <1>     int 41h    
   823                              <1> ;------------------------------------------------;
   824                              <1> ;               Load CONFIG.SYS                  ;
   825                              <1> ;------------------------------------------------;
   826                              <1> ;Setup stackframe, workout base 
   827 00000AEA 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   828                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   829 00000AF1 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   830 00000AF5 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   831 00000AFB 7421                <1>     je setupFrame   ;If so, jump
   832 00000AFD 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   833 00000B00 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   834 00000B04 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   835 00000B0A 7412                <1>     je setupFrame   ;If so, jump
   836 00000B0C 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   837 00000B0F 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   838 00000B13 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   839 00000B19 7403                <1>     je setupFrame   ;If so, jump
   840 00000B1B 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   841                              <1> setupFrame:
   842 00000B1E 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   843 00000B25 55                  <1>     push rbp
   844 00000B26 4889E5              <1>     mov rbp, rsp
   845 00000B29 4881EC68000000      <1>     sub rsp, cfgFrame_size
   846 00000B30 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   847 00000B34 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
   848 00000B3C 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
   849 00000B44 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   850 00000B4C 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   851 00000B54 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   852                              <1> 
   853 00000B5C 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   854 00000B64 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   855 00000B66 7406                <1>     jz notHDD
   856                              <1> ;Set Current Drive to C:
   857 00000B68 B202                <1>     mov dl, 2
   858 00000B6A B40E                <1>     mov ah, 0Eh ;Select C: Drive
   859 00000B6C CD41                <1>     int 41h
   860                              <1> notHDD:
   861 00000B6E 488D1526080000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   862 00000B75 B43D                <1>     mov ah, 3Dh ;Open file for reading
   863 00000B77 B000                <1>     mov al, ReadAccess
   864 00000B79 CD41                <1>     int 41h
   865 00000B7B 0F8267050000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   866                              <1> ;------------------------------------------------;
   867                              <1> ;              Process CONFIG.SYS                ;
   868                              <1> ;------------------------------------------------;
   869                              <1> ;Create a stack frame with the following order.
   870                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   871                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   872                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   873                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   874                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   875                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   876                              <1> ;
   877                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   878                              <1> ;-------------------------------------------------------------------------;
   879                              <1> ; CONFIG.SYS processing pseudocode:-
   880                              <1> ;
   881                              <1> ; _START:
   882                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   883                              <1> ; If (EOF encountered)
   884                              <1> ;   Insert a terminating ^Z to the end of the line. 
   885                              <1> ;   Close handle.
   886                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   887                              <1> ;   If (CR or EOF encoutered before terminating char)
   888                              <1> ;       Bad line error msg. 
   889                              <1> ;       If (CR encountered)
   890                              <1> ;           Goto _START
   891                              <1> ;       Else
   892                              <1> ;           Goto _EXIT
   893                              <1> ;   Else 
   894                              <1> ;       If (Keyword AND not DEVICE) 
   895                              <1> ;           Store it's value on stack or change internal variable value
   896                              <1> ;       If (DEVICE)
   897                              <1> ;           Move endPtr after end of line and try load the driver.
   898                              <1> ;           If (driver doesn't exist or fails to init)
   899                              <1> ;               print bad driver error msg.
   900                              <1> ;       Else 
   901                              <1> ;           Bad line error msg
   902                              <1> ;       If (line terminated by CR)
   903                              <1> ;           Goto _START
   904                              <1> ; _EXIT:
   905                              <1> ;-------------------------------------------------------------------------;
   906                              <1> ; Note:
   907                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   908                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   909                              <1> ;   adjust the memory pointer and start loading next line.
   910                              <1> ;   The space marked as "endPtr" can be used as a buffer by the disk buffers.
   911                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   912                              <1> ;   data structures according to the values on the stack frame.
   913                              <1> ;-------------------------------------------------------------------------;
   914                              <1> ;Start CONFIG.SYS parsing here
   915                              <1> configParse:
   916 00000B81 488945B8            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   917 00000B85 48C745B000000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   918                              <1> .newLine:
   919                              <1> ;Keeps the new line unless a DEVICE= command read it, which adjusts endPtr
   920 00000B8D 488B55A8            <1>     mov rdx, qword [rbp - cfgFrame.endPtr]  ;Start reading into here
   921 00000B91 488955A0            <1>     mov qword [rbp - cfgFrame.linePtr], rdx	;Use var for start of line ptr
   922                              <1> .nextChar:
   923 00000B95 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   924 00000B99 6681FBFFFF          <1>     cmp bx, -1
   925 00000B9E 0F84D4000000        <1>     je .stopProcessError
   926 00000BA4 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   927 00000BA9 B901000000          <1>     mov ecx, 1  ;Read one byte
   928 00000BAE CD41                <1>     int 41h
   929 00000BB0 0F82C2000000        <1>     jc .stopProcessError
   930 00000BB6 85C9                <1>     test ecx, ecx	;If this is zero, EOF reached
   931 00000BB8 7508                <1>     jnz .notEOF
   932 00000BBA 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Note we are at EOF
   933                              <1> .notEOF:
   934 00000BC2 48FF45A8            <1>     inc qword [rbp - cfgFrame.endPtr]	;Goto next byte
   935 00000BC6 0FB602              <1>     movzx eax, byte [rdx]
   936 00000BC9 3C0D                <1>     cmp al, CR
   937 00000BCB 741C                <1>     je .endOfLine
   938 00000BCD 3C0A                <1>     cmp al, LF
   939 00000BCF 7418                <1>     je .endOfLine
   940 00000BD1 3C61                <1>     cmp al, "a"
   941 00000BD3 720F                <1>     jb .notChar
   942 00000BD5 3C7A                <1>     cmp al, "z"
   943 00000BD7 770B                <1>     ja .notChar
   944 00000BD9 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   945 00000BDA B813120000          <1>     mov eax, 1213h  ;Uppercase the char
   946 00000BDF CD4F                <1>     int 4fh
   947 00000BE1 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   948 00000BE3 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   949                              <1> .notChar:
   950 00000BE4 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   951 00000BE7 EBAC                <1>     jmp short .nextChar
   952                              <1> .endOfLine:
   953                              <1> ;rdx points to terminating char
   954                              <1> ;First find the length of the instruction word
   955 00000BE9 31C9                <1>     xor ecx, ecx
   956                              <1> .cmdNameLenGet:
   957 00000BEB AC                  <1>     lodsb
   958 00000BEC E875000000          <1>     call .isCharTerminal
   959 00000BF1 740A                <1>     jz .endOfCommandFound
   960 00000BF3 FFC1                <1>     inc ecx
   961 00000BF5 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   962 00000BFB 72EE                <1>     jb .cmdNameLenGet
   963                              <1> ;Else, fall through in error
   964                              <1> .endOfCommandFound:
   965                              <1> ;ecx has the length of the command
   966 00000BFD 81F90A000000        <1>     cmp ecx, 10
   967 00000C03 7473                <1>     je .stopProcessError
   968 00000C05 488D3DCE000000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   969                              <1> .cmdSearch:
   970 00000C0C 803FFF              <1>     cmp byte [rdi], -1
   971 00000C0F 7467                <1>     je .stopProcessError
   972 00000C11 380F                <1>     cmp byte [rdi], cl
   973 00000C13 7544                <1>     jne .gotoNextCmd
   974                              <1>     ;Candidate command found, check said command is the command we want
   975 00000C15 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   976 00000C19 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   977 00000C20 7456                <1>     je .stopProcessError
   978 00000C22 57                  <1>     push rdi
   979 00000C23 51                  <1>     push rcx
   980 00000C24 48FFC7              <1>     inc rdi ;Go to next char
   981 00000C27 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   982 00000C29 59                  <1>     pop rcx
   983 00000C2A 5F                  <1>     pop rdi
   984 00000C2B 752C                <1>     jne .gotoNextCmd    ;If not equal, just goto next command
   985                              <1>     ;Else, rdi + rcx points to the word ptr of the function
   986                              <1>     ;rdx points to the terminating char of the line 
   987 00000C2D 52                  <1>     push rdx    ;This is to know whether we continue processing or end now
   988 00000C2E 488D35A5000000      <1>     lea rsi, .keyTbl
   989 00000C35 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   990 00000C38 4803740F01          <1>     add rsi, qword [rdi + rcx + 1]  ;This is the offset from .keyTbl
   991 00000C3D 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   992 00000C40 F8                  <1>     clc ;Esure flags are happy before entering
   993 00000C41 FFD6                <1>     call rsi    ;Call this function
   994 00000C43 5A                  <1>     pop rdx
   995 00000C44 7232                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   996 00000C46 48F745B0FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   997 00000C4E 0F8589040000        <1>     jnz .cfgExit
   998 00000C54 E934FFFFFF          <1>     jmp .newLine
   999                              <1> .gotoNextCmd:
  1000 00000C59 0FB607              <1>     movzx eax, byte [rdi]
  1001 00000C5C 0503000000          <1>     add eax, 3
  1002 00000C61 4801C7              <1>     add rdi, rax
  1003 00000C64 EBA6                <1>     jmp short .cmdSearch
  1004                              <1> .isCharTerminal:
  1005                              <1> ;Input: AL = Char to check
  1006                              <1> ;Output: ZF=ZE -> Char terminal
  1007                              <1> ;        ZF=NZ -> Char not terminal
  1008 00000C66 3C3D                <1>     cmp al, "="
  1009                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39 00000C68 7501                <3>  j%-1 short %%a
    40                              <3>  return
    18                              <4> %%_ret:
    19 00000C6A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    41                              <3> %%a:
    42                              <3>  %endif
  1010 00000C6B 3C20                <1>     cmp al, SPC
  1011                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C6D 74(6A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1012 00000C6F 3C09                <1>     cmp al, TAB
  1013                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C71 74(6A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1014 00000C73 3C3B                <1>     cmp al, ";"
  1015                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C75 74(6A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1016                              <1>     return
    18                              <2> %%_ret:
    19 00000C77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1017                              <1> .stopProcessError:
  1018 00000C78 488D1534000000      <1>     lea rdx, .speLine
  1019 00000C7F B800090000          <1>     mov eax, 0900h
  1020 00000C84 CD41                <1>     int 41h
  1021                              <1>     ;Reset all values to default
  1022 00000C86 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
  1023 00000C8E 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
  1024 00000C96 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
  1025 00000C9E 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
  1026 00000CA6 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
  1027 00000CAE E92A040000          <1>     jmp .cfgExit
  1028 00000CB3 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
  1028 00000CBC 6E6973656420636F6D- <1>
  1028 00000CC5 6D616E6420696E2043- <1>
  1028 00000CCE 4F4E4649472E535953- <1>
  1028 00000CD7 0D0A24              <1>
  1029                              <1> .keyTbl: 
  1030 00000CDA 05425245414B        <1>     db 5, "BREAK"           ;DONE
  1031 00000CE0 5D00                <1> 	dw .breakHandler - .keyTbl
  1032 00000CE2 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
  1033 00000CEA 8A00                <1> 	dw .bufHandler - .keyTbl
  1034 00000CEC 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
  1035 00000CF4 FC00                <1> 	dw .countryScan - .keyTbl
  1036 00000CF6 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
  1037 00000CFD FD00                <1> 	dw .drvLoader - .keyTbl
  1038 00000CFF 0446434253          <1> 	db 4, "FCBS"            ;DONE (to be ignored for a while now)
  1039 00000D04 2B03                <1> 	dw .fcbHandler - .keyTbl
  1040 00000D06 0546494C4553        <1> 	db 5, "FILES"           ;DONE
  1041 00000D0C 2C03                <1> 	dw .sftHandler - .keyTbl
  1042 00000D0E 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
  1042 00000D17 45                  <1>
  1043 00000D18 B203                <1> 	dw .lastdriveHandler - .keyTbl
  1044 00000D1A 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
  1045 00000D20 0004                <1> 	dw .shellHandler - .keyTbl
  1046 00000D22 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
  1047 00000D29 0104                <1> 	dw .stacksHandler - .keyTbl
  1048 00000D2B 08445249565041524D  <1>     db 8, "DRIVPARM"
  1049 00000D34 0204                <1>     dw .drivParm - .keyTbl  ;Ignored for now
  1050 00000D36 FF                  <1> 	db -1	;End of table marker
  1051                              <1> .breakHandler:
  1052 00000D37 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1053 00000D3B 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
  1054                              <1>     ;This must be the word ON or OFF 
  1055 00000D42 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
  1056 00000D44 66813E4F4E          <1>     cmp word [rsi], "ON"
  1057 00000D49 740F                <1>     je .breakOn
  1058 00000D4B 66813E4F46          <1>     cmp word [rsi], "OF"
  1059 00000D50 7506                <1>     jne .breakBad
  1060 00000D52 807E0246            <1>     cmp byte [rsi + 2], "F"
  1061 00000D56 7404                <1>     je .breakCommon
  1062                              <1> .breakBad:
  1063 00000D58 F9                  <1>     stc
  1064                              <1>     return
    18                              <2> %%_ret:
    19 00000D59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1065                              <1> .breakOn:
  1066 00000D5A FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
  1067                              <1> .breakCommon:
  1068 00000D5C B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
  1069 00000D61 CD41                <1>     int 41h
  1070                              <1>     return
    18                              <2> %%_ret:
    19 00000D63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1071                              <1> 
  1072                              <1> .bufHandler:
  1073 00000D64 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1074 00000D68 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
  1075                              <1>     ;This must be at most three digits, anything else is a failure
  1076 00000D6F 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1077 00000D72 31C9                <1>     xor ecx, ecx
  1078 00000D74 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1079 00000D75 3C30                <1>     cmp al, "0"
  1080 00000D77 724A                <1>     jb .bufHandlerErr
  1081 00000D79 3C39                <1>     cmp al, "9"
  1082 00000D7B 7746                <1>     ja .bufHandlerErr
  1083 00000D7D FFC1                <1>     inc ecx ;Increment char counter
  1084 00000D7F AC                  <1>     lodsb   ;Get second char
  1085 00000D80 E840000000          <1>     call .bufHandlerTermCheck
  1086 00000D85 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
  1087 00000D87 3C30                <1>     cmp al, "0"
  1088 00000D89 7238                <1>     jb .bufHandlerErr
  1089 00000D8B 3C39                <1>     cmp al, "9"
  1090 00000D8D 7734                <1>     ja .bufHandlerErr
  1091 00000D8F AC                  <1>     lodsb   ;Check no more chars!
  1092 00000D90 E830000000          <1>     call .bufHandlerTermCheck
  1093 00000D95 752C                <1>     jne .bufHandlerErr
  1094                              <1> .bufHandlerProcess:
  1095 00000D97 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1096 00000D99 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1097                              <1> .bufHandlerLp:
  1098 00000D9C AC                  <1>     lodsb   ;Get the digit
  1099 00000D9D E817000000          <1>     call .bufHandlerMul
  1100 00000DA2 67E304              <1>     jecxz .bufHandlerPrepExit
  1101 00000DA5 FFC9                <1>     dec ecx
  1102 00000DA7 EBF3                <1>     jmp short .bufHandlerLp 
  1103                              <1> .bufHandlerPrepExit:
  1104                              <1> ;edx has the value now, so place it in stack
  1105 00000DA9 B91E000000          <1>     mov ecx, buffersDefault
  1106 00000DAE 85D2                <1>     test edx, edx
  1107 00000DB0 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
  1108 00000DB3 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
  1109 00000DB7 F8                  <1>     clc
  1110                              <1>     return
    18                              <2> %%_ret:
    19 00000DB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1111                              <1> .bufHandlerMul:
  1112 00000DB9 2C30                <1>     sub al, "0" ;Convert to a binary value
  1113 00000DBB F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1114 00000DBD 0FB7C0              <1>     movzx eax, ax
  1115 00000DC0 01C2                <1>     add edx, eax
  1116                              <1>     return
    18                              <2> %%_ret:
    19 00000DC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1117                              <1> .bufHandlerErr:
  1118 00000DC3 F9                  <1>     stc
  1119                              <1>     return
    18                              <2> %%_ret:
    19 00000DC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1120                              <1> .bufHandlerTermCheck:
  1121 00000DC5 3C20                <1>     cmp al, SPC
  1122                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DC7 74(C4)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1123 00000DC9 3C09                <1>     cmp al, TAB
  1124                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DCB 74(C4)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1125 00000DCD 3C0D                <1>     cmp al, CR
  1126                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DCF 74(C4)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1127 00000DD1 3C0A                <1>     cmp al, LF
  1128                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DD3 74(C4)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1129                              <1>     return
    18                              <2> %%_ret:
    19 00000DD5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1130                              <1> .countryScan:
  1131                              <1>     return
    18                              <2> %%_ret:
    19 00000DD6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1132                              <1> .drvLoader:
  1133                              <1> ;We first try to read the driver into the byte after rdx.
  1134                              <1> ;If we cannot open the file, or we can open but not read the whole file
  1135                              <1> ; we error with Bad or missing filename msg, and proceed as if nothing happened 
  1136                              <1> ; (CF=NC). 
  1137                              <1> ; Thus we DO NOT adjust .endPtr or .linePtr and recycle that space for the 
  1138                              <1> ; next line.
  1139                              <1> ;If the open succeeded and we were able to read the whole driver into memory, 
  1140                              <1> ; we pass the lineptr to the driver and call init for the driver.
  1141                              <1> ; Once the driver returns, if the DONE bit is set, we read the offset of 
  1142                              <1> ; free memory above the driver and add that to the endPtr. If the driver
  1143                              <1> ; is a block driver, we add to the endPtr the space for "Units supported" 
  1144                              <1> ; number of DPBs.
  1145 00000DD7 4889D6              <1>     mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
  1146 00000DDA 488B7DA0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
  1147 00000DDE 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
  1148 00000DE5 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
  1149 00000DE8 B820000000          <1>     mov eax, SPC
  1150                              <1> .drvFindEndOfFileName:
  1151 00000DED AE                  <1>     scasb  ;Is this char the space?
  1152 00000DEE 7416                <1>     je .fileNameFound
  1153                              <1>     ;Was the char terminal?
  1154 00000DF0 807FFF0D            <1>     cmp byte [rdi - 1], CR
  1155 00000DF4 0F84A0010000        <1>     je .drvBad
  1156 00000DFA 807FFF0A            <1>     cmp byte [rdi - 1], LF
  1157 00000DFE 0F8496010000        <1>     je .drvBad
  1158 00000E04 EBE7                <1>     jmp short .drvFindEndOfFileName
  1159                              <1> .fileNameFound:
  1160 00000E06 C647FF00            <1>     mov byte [rdi - 1], 0   ;Null terminate the path to the file
  1161 00000E0A B8003D0000          <1>     mov eax, 3D00h  ;Read only file
  1162 00000E0F CD41                <1>     int 41h
  1163 00000E11 0F8283010000        <1>     jc .drvBad
  1164 00000E17 C647FF20            <1>     mov byte [rdi - 1], " " ;Replace the null with a space now again
  1165 00000E1B 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
  1166 00000E1E 668905DE010000      <1>     mov word [.drvHandle], ax   ;Save the handle in variable
  1167 00000E25 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
  1168 00000E27 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
  1169 00000E2C CD41                <1>     int 41h
  1170 00000E2E 89C1                <1>     mov ecx, eax    ;Get the file size in ecx
  1171 00000E30 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
  1172 00000E32 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
  1173 00000E37 CD41                <1>     int 41h
  1174                              <1>     ;Now we read ecx bytes to rsi as rsi points to first byte past the end
  1175                              <1>     ; of the DEVICE= line 
  1176 00000E39 4889F2              <1>     mov rdx, rsi    ;Point to first byte past the end of DEVICE= line
  1177 00000E3C 89CE                <1>     mov esi, ecx    ;Save the number of bytes to read in esi
  1178 00000E3E B8003F0000          <1>     mov eax, 3F00h  ;Read handle    
  1179 00000E43 CD41                <1>     int 41h
  1180 00000E45 0F8241010000        <1>     jc .drvBadClose
  1181 00000E4B 39CE                <1>     cmp esi, ecx    ;Were all bytes read in?
  1182 00000E4D 0F8539010000        <1>     jne .drvBadClose
  1183                              <1>     ;Ok, full file read in, now prepare to call driver init routine
  1184 00000E53 4889D6              <1>     mov rsi, rdx    ;Move ptr to driver header to rsi
  1185 00000E56 488D1D87010000      <1>     lea rbx, .drvInitStruc
  1186 00000E5D C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1187 00000E60 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1188 00000E64 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1189 00000E6A C6430D00            <1>     mov byte [rbx + initReqPkt.numunt], 0
  1190 00000E6E 488B45A0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
  1191 00000E72 480507000000        <1>     add rax, 7  ;Goto the first byte past DEVICE=
  1192 00000E78 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
  1193 00000E7C 48C7431600000000    <1>     mov qword [rbx + initReqPkt.optptr], 0
  1194 00000E84 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol]
  1194 00000E89 [7DC00300]          <1>
  1195 00000E8D FFC8                <1>     dec eax ;Get a 0 based count
  1196 00000E8F 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1197 00000E92 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
  1198 00000E95 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1199 00000E98 66F743030001        <1>     test word [rbx + initReqPkt.status], drvDonStatus
  1200 00000E9E 0F84E8000000        <1>     jz .drvBadClose
  1201 00000EA4 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1202 00000EAA 0F85DC000000        <1>     jnz .drvBadClose
  1203                              <1>     ;Now check that the driver wants to be installed
  1204 00000EB0 483B730E            <1>     cmp rsi, qword [rbx + initReqPkt.endptr]    ;This is for char and blk devs
  1205 00000EB4 0F84C2000000        <1>     je .drvWantsClose
  1206 00000EBA 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1207 00000EC0 750A                <1>     jnz .drvChar
  1208 00000EC2 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1209 00000EC6 0F84B0000000        <1>     je .drvWantsClose
  1210                              <1> .drvChar:
  1211                              <1>     ;Otherwise, this init passed, now build the structures we need.
  1212                              <1>     ;First adjust .endPtr
  1213 00000ECC 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]    ;Get the end pointer
  1214 00000ED0 488945A8            <1>     mov qword [rbp - cfgFrame.endPtr], rax  ;Move it here
  1215                              <1>     ;Now we link the driver into the driver chain
  1216 00000ED4 488B3D(80C00300)    <1>     mov rdi, qword [nulDevHdr + drvHdr.nxtPtr]  ;Get next ptr from nul drvr
  1217 00000EDB 48893E              <1>     mov qword [rsi + drvHdr.nxtPtr], rdi    ;And store it here
  1218 00000EDE 488935(80C00300)    <1>     mov qword [nulDevHdr + drvHdr.nxtPtr], rsi  ;And link nul to this driver
  1219                              <1>     ;Now if we are a char device, we are done so check here
  1220 00000EE5 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1221 00000EEB 0F85B9000000        <1>     jnz .drvWantsCloseChar  ;We are complete
  1222                              <1>     ;Now for block devices, we get the BPB ptr array and numUnits supported
  1223 00000EF1 0FB64B0D            <1>     movzx ecx, byte [rbx + initReqPkt.numunt]
  1224 00000EF5 488B5B16            <1>     mov rbx, qword [rbx + initReqPkt.optptr]    ;Get the BPB array pointer
  1225                              <1> 
  1226 00000EF9 4889F2              <1>     mov rdx, rsi    ;Move the driver pointer to rdx
  1227 00000EFC 488B75A8            <1>     mov rsi, qword [rbp - cfgFrame.endPtr]  ;Build DPB array here
  1228 00000F00 4889F7              <1>     mov rdi, rsi    ;Move rdi here too, to point to first new DPB later
  1229 00000F03 51                  <1>     push rcx
  1230 00000F04 52                  <1>     push rdx
  1231 00000F05 31D2                <1>     xor edx, edx
  1232 00000F07 B835000000          <1>     mov eax, dpb_size
  1233 00000F0C F7E1                <1>     mul ecx ;Multiply the number of DPB's needed with the size of a dpb
  1234 00000F0E 480145A8            <1>     add qword [rbp - cfgFrame.endPtr], rax  ;Add this value to endPtr
  1235 00000F12 5A                  <1>     pop rdx ;Get back the driver ptr in rdx
  1236 00000F13 59                  <1>     pop rcx ;Get back the number of units count
  1237                              <1>     
  1238 00000F14 4887EB              <1>     xchg rbp, rbx   ;Swap stack frame ptr and BPB array ptr
  1239 00000F17 4887F5              <1>     xchg rsi, rbp   ;Swap BPB array and DPB space ptrs
  1240                              <1> .drvBuildDPB:
  1241 00000F1A B800530000          <1>     mov eax, 5300h
  1242 00000F1F CD41                <1>     int 41h
  1243 00000F21 4881C678000000      <1>     add rsi, bpbEx_size ;Goto next bpb in array
  1244                              <1>     ;Adjust fields in DPB
  1245 00000F28 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] 
  1246 00000F30 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
  1247 00000F38 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al
  1248 00000F3B 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch
  1249 00000F3E 4889551B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdx
  1250 00000F42 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Point to next DPB
  1251 00000F46 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1252 00000F4A FEC5                <1>     inc ch  ;Increment unit number 
  1253 00000F4C 38E9                <1>     cmp cl, ch  ;Are we done?
  1254 00000F4E 7409                <1>     je .dpbInitDone
  1255 00000F50 4881C535000000      <1>     add rbp, dpb_size   ;Go to space for next DPB
  1256 00000F57 EBC1                <1>     jmp short .drvBuildDPB
  1257                              <1> .dpbInitDone:
  1258                              <1> ;Make sure we now make the last qNextDPBPtr = -1
  1259 00000F59 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
  1260                              <1>     ;Now we set the old last dpb to point to the first one
  1261 00000F61 64488B3425-         <1>     mov rsi, qword fs:[dpbHeadPtr]
  1261 00000F66 [41C00300]          <1>
  1262                              <1> .drvDPBLp:
  1263 00000F6A 807E25FF            <1>     cmp byte [rsi + dpb.qNextDPBPtr], -1
  1264 00000F6E 7406                <1>     je .drvLastDPBFound
  1265 00000F70 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Goto next DPB
  1266 00000F74 EBF4                <1>     jmp short .drvDPBLp
  1267                              <1> .drvLastDPBFound:
  1268 00000F76 48893E              <1>     mov qword [rsi], rdi    ;Chain this dpb now to the first new dpb
  1269 00000F79 4889DD              <1>     mov rbp, rbx    ;Return the stack frame ptr to rbp
  1270                              <1> ;And we are done!
  1271                              <1> .drvWantsClose:
  1272                              <1> ;If the driver wants to not install silently, it can here
  1273 00000F7C 0FB71D80000000      <1>     movzx ebx, word [.drvHandle] ;Get the handle back, close it and proceed
  1274 00000F83 B8003E0000          <1>     mov eax, 3E00h  
  1275 00000F88 CD41                <1>     int 41h 
  1276 00000F8A F8                  <1>     clc ;Never return with CF=CY
  1277                              <1>     return  
    18                              <2> %%_ret:
    19 00000F8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1278                              <1> .drvBadClose:
  1279 00000F8C 0FB71D70000000      <1>     movzx ebx, word [.drvHandle]    ;Get back handle to close
  1280 00000F93 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1281 00000F98 CD41                <1>     int 41h
  1282                              <1> .drvBad:
  1283 00000F9A 488D1529000000      <1>     lea rdx, .drvBadMsg
  1284 00000FA1 B800090000          <1>     mov eax, 0900h
  1285 00000FA6 CD41                <1>     int 41h
  1286 00000FA8 F8                  <1>     clc ;Never return with CF=CY
  1287                              <1>     return
    18                              <2> %%_ret:
    19 00000FA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1288                              <1> .drvWantsCloseChar:
  1289                              <1> ;Final checks, to see if we are CLOCK$ or CON
  1290 00000FAA 66F746080100        <1>     test word [rsi + drvHdr.attrib], devDrvConIn
  1291 00000FB0 7407                <1>     jz .dwccClock
  1292 00000FB2 488935(59C00300)    <1>     mov qword [vConPtr], rsi
  1293                              <1> .dwccClock:
  1294 00000FB9 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1295 00000FBF 74BB                <1>     jz .drvWantsClose
  1296 00000FC1 488935(51C00300)    <1>     mov qword [clockPtr], rsi
  1297 00000FC8 EBB2                <1>     jmp short .drvWantsClose
  1298 00000FCA 426164206F72206D69- <1> .drvBadMsg: db "Bad or missing filename",CR,LF,"$"
  1298 00000FD3 7373696E672066696C- <1>
  1298 00000FDC 656E616D650D0A24    <1>
  1299 00000FE4 000000000000000000- <1> .drvInitStruc: db initReqPkt_size dup (0)  
  1299 00000FED 000000000000000000- <1>
  1299 00000FF6 000000000000000000- <1>
  1299 00000FFF 00000000            <1>
  1300 00001003 FFFF                <1> .drvHandle: dw -1
  1301                              <1> 
  1302                              <1> .fcbHandler:
  1303                              <1>     return
    18                              <2> %%_ret:
    19 00001005 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1304                              <1> .sftHandler:
  1305                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1306 00001006 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1307 0000100A 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1308                              <1>     ;This must be at most three digits, anything else is a failure
  1309 00001011 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1310 00001014 31C9                <1>     xor ecx, ecx
  1311 00001016 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1312 00001017 3C30                <1>     cmp al, "0"
  1313 00001019 725E                <1>     jb .sftHandlerErr
  1314 0000101B 3C39                <1>     cmp al, "9"
  1315 0000101D 775A                <1>     ja .sftHandlerErr
  1316 0000101F FFC1                <1>     inc ecx ;Increment char counter
  1317 00001021 AC                  <1>     lodsb   ;Get second char
  1318 00001022 E854000000          <1>     call .sftHandlerTermCheck
  1319 00001027 7420                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1320 00001029 3C30                <1>     cmp al, "0"
  1321 0000102B 724C                <1>     jb .sftHandlerErr
  1322 0000102D 3C39                <1>     cmp al, "9"
  1323 0000102F 7748                <1>     ja .sftHandlerErr
  1324 00001031 FFC1                <1>     inc ecx ;Increment char counter
  1325 00001033 AC                  <1>     lodsb   ;Get third char
  1326 00001034 E842000000          <1>     call .sftHandlerTermCheck
  1327 00001039 3C30                <1>     cmp al, "0"
  1328 0000103B 723C                <1>     jb .sftHandlerErr
  1329 0000103D 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1330 0000103F 7738                <1>     ja .sftHandlerErr
  1331 00001041 AC                  <1>     lodsb   ;Check no more chars!
  1332 00001042 E834000000          <1>     call .sftHandlerTermCheck
  1333 00001047 7530                <1>     jne .sftHandlerErr
  1334                              <1> .sftHandlerProcess:
  1335 00001049 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1336 0000104B 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1337                              <1> .sftHandlerLp:
  1338 0000104E AC                  <1>     lodsb   ;Get the digit
  1339 0000104F E81B000000          <1>     call .sftHandlerMul
  1340 00001054 67E304              <1>     jecxz .sftHandlerPrepExit
  1341 00001057 FFC9                <1>     dec ecx
  1342 00001059 EBF3                <1>     jmp short .sftHandlerLp 
  1343                              <1> .sftHandlerPrepExit:
  1344                              <1> ;edx has the value now, so place it in stack
  1345 0000105B B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1346 00001060 81FA08000000        <1>     cmp edx, 8
  1347 00001066 0F42D1              <1>     cmovb edx, ecx
  1348 00001069 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1349 0000106D F8                  <1>     clc
  1350                              <1>     return
    18                              <2> %%_ret:
    19 0000106E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1351                              <1> .sftHandlerMul:
  1352 0000106F 2C30                <1>     sub al, "0" ;Convert to a binary value
  1353 00001071 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1354 00001073 0FB7C0              <1>     movzx eax, ax
  1355 00001076 01C2                <1>     add edx, eax
  1356                              <1>     return
    18                              <2> %%_ret:
    19 00001078 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1357                              <1> .sftHandlerErr:
  1358 00001079 F9                  <1>     stc
  1359                              <1>     return
    18                              <2> %%_ret:
    19 0000107A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1360                              <1> .sftHandlerTermCheck:
  1361 0000107B 3C20                <1>     cmp al, SPC
  1362                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000107D 74(7A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1363 0000107F 3C09                <1>     cmp al, TAB
  1364                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001081 74(7A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1365 00001083 3C0D                <1>     cmp al, CR
  1366                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001085 74(7A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1367 00001087 3C0A                <1>     cmp al, LF
  1368                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001089 74(7A)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1369                              <1>     return
    18                              <2> %%_ret:
    19 0000108B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1370                              <1> .lastdriveHandler:
  1371 0000108C 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1372 00001090 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1373 00001097 AC                  <1>     lodsb   ;Get this char
  1374 00001098 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1375 0000109B 50                  <1>     push rax    ;Push on stack
  1376 0000109C B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1377 000010A1 CD4F                <1>     int 4Fh
  1378 000010A3 5B                  <1>     pop rbx
  1379 000010A4 3C5A                <1>     cmp al, "Z"
  1380 000010A6 77D1                <1>     ja .sftHandlerErr
  1381 000010A8 3C41                <1>     cmp al, "A"
  1382 000010AA 72CD                <1>     jb .sftHandlerErr
  1383 000010AC 803E0D              <1>     cmp byte [rsi], CR
  1384 000010AF 740F                <1>     je .ldProceed
  1385 000010B1 803E0A              <1>     cmp byte [rsi], LF
  1386 000010B4 740A                <1>     je .ldProceed
  1387 000010B6 803E09              <1>     cmp byte [rsi], TAB
  1388 000010B9 7405                <1>     je .ldProceed
  1389 000010BB 803E20              <1>     cmp byte [rsi], SPC
  1390 000010BE 75B9                <1>     jne .sftHandlerErr
  1391                              <1> .ldProceed:
  1392 000010C0 2C41                <1>     sub al, "A" ;Convert into a number
  1393 000010C2 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1394 000010C5 BA05000000          <1>     mov edx, lastDriveDeflt
  1395 000010CA 3D05000000          <1>     cmp eax, lastDriveDeflt
  1396 000010CF 0F42C2              <1>     cmovb eax, edx
  1397 000010D2 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1398 000010D6 F8                  <1>     clc
  1399                              <1>     return
    18                              <2> %%_ret:
    19 000010D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1400                              <1> .ldBad:
  1401 000010D8 F9                  <1>     stc
  1402                              <1>     return
    18                              <2> %%_ret:
    19 000010D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1403                              <1> .shellHandler:
  1404                              <1>     return
    18                              <2> %%_ret:
    19 000010DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1405                              <1> .stacksHandler:
  1406                              <1>     return
    18                              <2> %%_ret:
    19 000010DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1407                              <1> .drivParm:
  1408                              <1>     return
    18                              <2> %%_ret:
    19 000010DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1409                              <1> 
  1410                              <1> .cfgExit:
  1411 000010DD 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1412 000010E1 B83E000000          <1>     mov eax, 3eh    ;Close the handle
  1413 000010E6 CD41                <1>     int 41h ;bx already has the handle
  1414                              <1> ;------------------------------------------------;
  1415                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1416                              <1> ;                  CONFIG.SYS                    ;
  1417                              <1> ;------------------------------------------------;
  1418                              <1> ;Add additional buffers. Start from tmpBufHdr
  1419                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
  1420                              <1> ;Add additional FCBS.
  1421                              <1> ;Create a larger CDS if needed.
  1422                              <1> noCfg:
  1423                              <1> ;Start with buffers:
  1424 000010E8 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new buffers size
  1425 000010EC 64880C25[7FC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1426                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1427 000010F4 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
  1427 000010F9 [61C00300]          <1>
  1428 000010FD 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
  1429                              <1>     ;Each buffer has no flags, drive number must be -1
  1430 00001103 488B7DA8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
  1431 00001107 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
  1431 0000110C [63C00300]          <1>
  1432 00001110 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1433 00001113 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1434 00001115 67E325              <1>     jecxz .lastBuffer
  1435                              <1> .bufferLoop:
  1436 00001118 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1437 0000111B 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1438 0000111E 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1439 00001124 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1440 00001128 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1441 0000112B 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1442 0000112E 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1443 00001132 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1444 00001136 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1445 00001139 FFC9                <1>     dec ecx
  1446 0000113B 75DB                <1>     jnz .bufferLoop
  1447                              <1> .lastBuffer:
  1448 0000113D 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1449 00001140 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1450 00001147 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1451 0000114D 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1452 00001151 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1453 00001154 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1454 00001157 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1455 0000115B 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1456 0000115F 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1457                              <1> 
  1458                              <1> ;Now build a new SFT header for the number of files specified by user
  1459 00001163 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1460 00001167 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1461 0000116D 7430                <1>     je .skipSFT
  1462 0000116F 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
  1462 00001174 [49C00300]          <1>
  1463 00001178 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
  1464 0000117B 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
  1465 0000117F 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
  1466 00001183 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
  1467 0000118A 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
  1468 00001191 B84F000000          <1>     mov eax, sft_size
  1469 00001196 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1470 00001198 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1471 0000119B 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1472                              <1> .skipSFT:
  1473                              <1> ;FCBS at rdi
  1474 0000119F 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
  1474 000011A4 [73C00300]          <1>
  1475 000011A8 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
  1476 000011AF 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1477 000011B3 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
  1478 000011B7 B84F000000          <1>     mov eax, sft_size
  1479 000011BC F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1480 000011BE 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1481 000011C1 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1482 000011C5 488B4DE0            <1>     mov rcx, qword [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
  1483 000011C9 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
  1483 000011CE [7BC00300]          <1>
  1484                              <1> ;And CDS now
  1485 000011D2 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1486 000011D6 64880C25[7EC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1487 000011DE 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
  1487 000011E3 [6BC00300]          <1>
  1488 000011E7 E839F6FFFF          <1>     call makeCDSArray
  1489 000011EC 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1490                              <1> 
  1491                              <1> ;Computation of new space is complete, now work out how many bytes this is
  1492 000011F0 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1493 000011F3 5D                  <1>     pop rbp
  1494 000011F4 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
  1495 000011FB 4829DF              <1>     sub rdi, rbx    ;Gives difference now
  1496 000011FE 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
  1497 00001202 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
  1498                              <1> ;Resize DOS allocation before loading COMMAND.COM
  1499 00001205 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
  1499 0000120A [39C00300]          <1>
  1500 0000120E 4981C010000000      <1>     add r8, mcb.program
  1501 00001215 B44A                <1>     mov ah, 4Ah
  1502 00001217 CD41                <1>     int 41h
  1503                              <1> ;Now we close all five default handles and open AUX, CON and PRN.
  1504 00001219 644C8B0425-         <1>     mov r8, qword fs:[currentPSP]
  1504 0000121E [14C40300]          <1>
  1505 00001222 31DB                <1>     xor ebx, ebx
  1506                              <1> closeHandlesLoop:
  1507 00001224 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1508 00001229 CD41                <1>     int 41h
  1509 0000122B FFC3                <1>     inc ebx ;Goto next handle
  1510 0000122D 81FB06000000        <1>     cmp ebx, 6
  1511 00001233 75EF                <1>     jne closeHandlesLoop
  1512 00001235 488D1557010000      <1>     lea rdx, auxName
  1513 0000123C B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1514 00001241 CD41                <1>     int 41h
  1515 00001243 89C3                <1>     mov ebx, eax
  1516 00001245 B903000000          <1>     mov ecx, 3  ;
  1517 0000124A B800460000          <1>     mov eax, 4600h  ;DUP2
  1518 0000124F CD41                <1>     int 41h
  1519 00001251 B8003E0000          <1>     mov eax, 3e00h
  1520 00001256 CD41                <1>     int 41h ;Close the original handle
  1521 00001258 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1522 0000125D 488D152B010000      <1>     lea rdx, conName
  1523 00001264 CD41                <1>     int 41h
  1524 00001266 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1525 00001268 B800450000          <1>     mov eax, 4500h  ;DUP
  1526 0000126D CD41                <1>     int 41h
  1527 0000126F B800450000          <1>     mov eax, 4500h  ;DUP
  1528 00001274 CD41                <1>     int 41h
  1529 00001276 488D151A010000      <1>     lea rdx, prnName
  1530 0000127D B8023D0000          <1>     mov eax, 3D02h
  1531 00001282 CD41                <1>     int 41h       ;Open file
  1532                              <1> 
  1533                              <1>     
  1534                              <1>     %if DEBUG && ALLOCTEST
  1535                              <1> ;Test Allocation, Growth and Deallocation
  1536                              <1>     mov r15, qword fs:[currentPSP]
  1537                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
  1538                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
  1539                              <1>     mov ah, 48h ;Allocate
  1540                              <1>     int 41h
  1541                              <1> 
  1542                              <1>     mov byte [rax - 10h], 0 ;Trash chain
  1543                              <1>     mov r8, rax ;Move the pointer to r8
  1544                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
  1545                              <1>     mov ah, 4Ah
  1546                              <1>     int 41h
  1547                              <1> 
  1548                              <1>     mov ah, 49h ;Free r8
  1549                              <1>     int 41h
  1550                              <1>     mov qword fs:[currentPSP], r15
  1551                              <1>     %endif
  1552                              <1> 
  1553                              <1>     %if ENDSTATUS
  1554                              <1> debugFinal:
  1555                              <1>     ;Print system state
  1556                              <1>     push rbp    ;Only rbp really matters here
  1557                              <1>     mov r8, rbp
  1558                              <1> 
  1559                              <1>     lea rbp, .msg2
  1560                              <1>     lea r9, qword [r8 + debPrintNullString]
  1561                              <1>     call r9
  1562                              <1> 
  1563                              <1>     lea rbx, qword [.msg + 15]
  1564                              <1>     mov rax, qword fs:[biosUBase]
  1565                              <1> 
  1566                              <1>     lea r9, qword [r8 + overlayQword]
  1567                              <1>     call r9
  1568                              <1> 
  1569                              <1>     add rbx, 19+8
  1570                              <1>     mov rax, qword fs:[dosSegPtr]
  1571                              <1>     call r9
  1572                              <1> 
  1573                              <1>     add rbx, 19+8
  1574                              <1>     mov rax, qword fs:[mcbChainPtr]
  1575                              <1>     call r9
  1576                              <1> 
  1577                              <1>     add rbx, 20+8
  1578                              <1>     lea r9, qword [r8 + overlayDword]
  1579                              <1>     mov eax, dword fs:[loProtMem]
  1580                              <1>     call r9
  1581                              <1> 
  1582                              <1>     add rbx, 10+8
  1583                              <1>     mov eax, dword fs:[hiProtMem]
  1584                              <1>     call r9
  1585                              <1> 
  1586                              <1>     add rbx, 10+8
  1587                              <1>     mov rax, qword fs:[longMem]
  1588                              <1>     lea r9, qword [r8 + overlayQword]
  1589                              <1>     call r9
  1590                              <1> 
  1591                              <1>     add rbx, 19+8
  1592                              <1>     mov rax, qword fs:[dpbHeadPtr]
  1593                              <1>     call r9
  1594                              <1> 
  1595                              <1>     add rbx, 19+8
  1596                              <1>     mov rax, qword fs:[sftHeadPtr]
  1597                              <1>     call r9
  1598                              <1> 
  1599                              <1>     add rbx, 19+8
  1600                              <1>     mov rax, qword fs:[bufHeadPtr]
  1601                              <1>     call r9
  1602                              <1> 
  1603                              <1>     add rbx, 19+8
  1604                              <1>     mov rax, qword fs:[cdsHeadPtr]
  1605                              <1>     call r9
  1606                              <1> 
  1607                              <1>     lea r9, qword [r8 + overlayByte]
  1608                              <1> 
  1609                              <1>     add rbx, 25+19
  1610                              <1>     movzx rax, byte fs:[numPhysVol]
  1611                              <1>     call r9
  1612                              <1> 
  1613                              <1>     add rbx, 30
  1614                              <1>     movzx rax, byte fs:[numFixDrv]
  1615                              <1>     call r9
  1616                              <1> 
  1617                              <1>     add rbx, 30
  1618                              <1>     movzx rax, byte fs:[numRemDrv]
  1619                              <1>     call r9
  1620                              <1> 
  1621                              <1>     add rbx, 16
  1622                              <1>     movzx rax, byte fs:[bootDrive]
  1623                              <1>     add al, "A"
  1624                              <1>     mov byte [rbx], al
  1625                              <1> 
  1626                              <1>     lea rbp, .msg
  1627                              <1>     lea r9, qword [r8 + debPrintNullString]
  1628                              <1>     call r9
  1629                              <1>     pop rbp
  1630                              <1>     jmp l1
  1631                              <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1632                              <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1633                              <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1634                              <1>         db "Arena1: FFFFFFFFh ",
  1635                              <1>         db "Arena2: FFFFFFFFh ",
  1636                              <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1637                              <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1638                              <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1639                              <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1640                              <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1641                              <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1642                              <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1643                              <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1644                              <1>         db "Boot drive Z:",0Ah,0Dh
  1645                              <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1646                              <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1647                              <1>     %endif
  1648                              <1> l1:
  1649                              <1>     ;Load COMMAND.COM
  1650                              <1>     ;Get currentPSP ptr
  1651 00001284 B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1652 00001286 CD41                <1>     int 41h
  1653 00001288 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1654 0000128A CD41                <1>     int 41h
  1655 0000128C 0441                <1>     add al, "A"
  1656 0000128E 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1657 00001294 488D1D1A010000      <1>     lea rbx, cmdBlock
  1658 0000129B 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1659 0000129F 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1660 000012A3 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1661 000012A7 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1662 000012AB 488D15F4000000      <1>     lea rdx, cmdLine
  1663 000012B2 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1664 000012B6 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1665 000012BB CD41                <1>     int 41h
  1666 000012BD 488D15A6000000      <1>     lea rdx, badCom
  1667 000012C4 B409                <1>     mov ah, 09h ;Print message
  1668 000012C6 CD41                <1>     int 41h
  1669 000012C8 E92A000000          <1>     jmp errorInit.ei0
  1670                              <1>     
  1671                              <1> ;--------------------------------
  1672                              <1> ;       PROCS FOR SYSINIT       :
  1673                              <1> ;--------------------------------
  1674                              <1> adjustDrvHdr:
  1675                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1676                              <1> ;       rbp = Ptr to the start of the DOS segment
  1677                              <1> ;Output: rsi = EA of next header in DOS segment
  1678 000012CD 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1679 000012D1 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1680 000012D5 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1681 000012DC 740A                <1>     je .exit
  1682 000012DE 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1683 000012E1 4881C622000000      <1>     add rsi, drvHdr_size
  1684                              <1> .exit:
  1685 000012E8 C3                  <1>     ret
  1686                              <1> errorInit:
  1687                              <1> ;If a critical error occurs during sysinit, fail through here
  1688                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1689 000012E9 488D2D49000000      <1>     lea rbp, hltmsg
  1690 000012F0 B804130000          <1>     mov eax, 1304h
  1691 000012F5 CD30                <1>     int 30h
  1692                              <1>     ;cli ;Clear interrupts
  1693                              <1>     ;mov al, -1
  1694                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1695                              <1>     ;out dx, al      ;Mask all lines
  1696                              <1>     ;mov dx, 21h     ;PIC1 data
  1697                              <1>     ;out dx, al      ;Mask all lines
  1698                              <1> .ei0:
  1699 000012F7 F4                  <1>     hlt
  1700 000012F8 F390                <1>     pause
  1701 000012FA EBFB                <1>     jmp short .ei0
  1702                              <1> noCmdCom:
  1703 000012FC 488D1567000000      <1>     lea rdx, badCom
  1704 00001303 B409                <1>     mov ah, 09h
  1705 00001305 CD41                <1>     int 41h
  1706 00001307 EBEE                <1>     jmp short errorInit.ei0
  1707                              <1> ;--------------------------------
  1708                              <1> ;       DATA FOR SYSINIT        :
  1709                              <1> ;--------------------------------
  1710 00001309 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1710 00001312 5343502F444F532E2E- <1>
  1710 0000131B 2E0A0D24            <1>
  1711 0000131F 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1711 00001328 6C6F636174696F6E20- <1>
  1711 00001331 4572726F720A0D00    <1>
  1712 00001339 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1712 00001342 7469616C6973696E67- <1>
  1712 0000134B 20534350444F532E53- <1>
  1712 00001354 59532E205379737465- <1>
  1712 0000135D 6D2068616C74696E67- <1>
  1712 00001366 2E2E2E00            <1>
  1713 0000136A 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1713 00001373 7373696E6720436F6D- <1>
  1713 0000137C 6D616E6420696E7465- <1>
  1713 00001385 727072657465720A0D- <1>
  1713 0000138E 24                  <1>
  1714 0000138F 434F4E00            <1> conName db "CON",0
  1715 00001393 41555800            <1> auxName db "AUX",0
  1716 00001397 50524E00            <1> prnName db "PRN",0
  1717                              <1> 
  1718 0000139B 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1718 000013A4 5300                <1>
  1719 000013A6 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1719 000013AF 442E434F4D00        <1>
  1720                              <1> cmdBlock:
  1721                              <1>     istruc execProg
  1722 000013B5 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1723 000013BD 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1724 000013C5 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1725 000013CD 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1726                              <1>     iend
  1727                              <1> exceptData:
  1728 000013D5 [FB5C000000000000]  <1>     dq i0
  1729 000013DD [025D000000000000]  <1>     dq i1
  1730 000013E5 [0C5D000000000000]  <1>     dq i2
  1731 000013ED [165D000000000000]  <1>     dq i3
  1732 000013F5 [205D000000000000]  <1>     dq i4
  1733 000013FD [2A5D000000000000]  <1>     dq i5
  1734 00001405 [315D000000000000]  <1>     dq i6
  1735 0000140D [385D000000000000]  <1>     dq i7
  1736 00001415 [3F5D000000000000]  <1>     dq i8
  1737 0000141D [465D000000000000]  <1>     dq i9
  1738 00001425 [4D5D000000000000]  <1>     dq i10
  1739 0000142D [545D000000000000]  <1>     dq i11
  1740 00001435 [5B5D000000000000]  <1>     dq i12
  1741 0000143D [625D000000000000]  <1>     dq i13
  1742 00001445 [695D000000000000]  <1>     dq i14
  1743 0000144D [705D000000000000]  <1>     dq i15
  1744 00001455 [775D000000000000]  <1>     dq i16
  1745 0000145D [7E5D000000000000]  <1>     dq i17
  1746 00001465 [855D000000000000]  <1>     dq i18
  1747 0000146D [8C5D000000000000]  <1>     dq i19
  1748 00001475 [935D000000000000]  <1>     dq i20
  1749 0000147D [9A5D000000000000]  <1>     dq i21
  1750                              <1> 
  1751                              <1> intData:
  1752 00001485 [5C51000000000000]  <1>     dq terminateProcess ;Int 40h
  1753 0000148D [AE67000000000000]  <1>     dq functionDispatch ;Int 41h
  1754 00001495 [E912000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1755 0000149D [0469000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1756 000014A5 [C360000000000000]  <1>     dq dosDefCritErrHdlr 
  1757 000014AD [9361000000000000]  <1>     dq absDiskRead      ;Int 45h
  1758 000014B5 [7461000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1759 000014BD [6351000000000000]  <1>     dq terminateRes     ;Int 47h
  1760 000014C5 [0469000000000000]  <1>     dq defaultIretq     ;Int 48h
  1761 000014CD [0469000000000000]  <1>     dq defaultIretq     ;Int 49h
  1762 000014D5 [0469000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1763 000014DD [0469000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1764 000014E5 [0469000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1765 000014ED [0469000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1766 000014F5 [0469000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1767 000014FD [B26F000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1768                              <1> nData:
  1769 00001505 [6071000000000000]  <1>     dq conHdr
  1770 0000150D 0480                <1>     dw 08004h
  1771 0000150F [0873000000000000]  <1>     dq nulStrat
  1772 00001517 [0E73000000000000]  <1>     dq nulIntr
  1773 0000151F 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1774                              <1> 
  1775                              <1> diskInit:
  1776                              <1>     ;We create a function to deal with BPB parsing etc
  1777                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1778                              <1>     ;   They dont have to be bootable
  1779                              <1>     ;Then go back and look for other partitions partitions. 
  1780                              <1>     ;   Add each other primary or logical ptn (until max)
  1781                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1782                              <1>     ;Use r8 as device counter
  1783                              <1>     ;Use r15 as the pointer to the next free BPB entry
  1784                              <1>     ;First set up the two default BPB's if no removable drives
  1785 00001527 4C8DBD[0E7C0000]    <1>     lea r15, [rbp + msdDriver.msdBPBblks]    ;Point to the BPB storage place
  1786 0000152E 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1786 00001536 00                  <1>
  1787 00001537 0F8480000000        <1>     jz .remInit ;No? Go to removables
  1788 0000153D 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1788 00001546 00                  <1>
  1789 00001547 B280                <1>     mov dl, 80h ;Start with HDD 0
  1790                              <1> .primary:
  1791 00001549 64803C25[7DC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1791 00001551 03                  <1>
  1792 00001552 7469                <1>     je .remInit
  1793 00001554 31C9                <1>     xor ecx, ecx    ;Sector 0
  1794 00001556 E8EC000000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1795 0000155B 724F                <1>     jc .primaryEpilog
  1796                              <1>     ;Here, check MBR or BPB
  1797 0000155D 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1798 00001566 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1799                              <1>     ;Now check if BPB or MBR
  1800 00001568 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1801 0000156A 8A6302              <1>     mov ah, byte [rbx + 2]
  1802 0000156D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1803 00001571 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1804                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1805                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1806 00001573 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1807 0000157A B104                <1>     mov cl, 4
  1808                              <1> .checkPrimary:
  1809 0000157C 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1810 0000157F 3C01                <1>     cmp al, 01
  1811 00001581 7421                <1>     je .primaryFound
  1812 00001583 3C04                <1>     cmp al, 04
  1813 00001585 741D                <1>     je .primaryFound
  1814 00001587 3C06                <1>     cmp al, 06
  1815 00001589 7419                <1>     je .primaryFound
  1816 0000158B 3C0B                <1>     cmp al, 0Bh
  1817 0000158D 7415                <1>     je .primaryFound
  1818 0000158F 3C0C                <1>     cmp al, 0Ch
  1819 00001591 7411                <1>     je .primaryFound
  1820 00001593 3C0E                <1>     cmp al, 0Eh
  1821 00001595 740D                <1>     je .primaryFound
  1822 00001597 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1823 0000159E FEC9                <1>     dec cl
  1824 000015A0 740A                <1>     jz .primaryEpilog
  1825 000015A2 EBD8                <1>     jmp short .checkPrimary
  1826                              <1> .primaryFound:
  1827                              <1>     ;Copy the first sector of this partition into memory
  1828 000015A4 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1829 000015A7 E8A9000000          <1>     call .readSectorAndAddDataToTables
  1830                              <1> .primaryEpilog:
  1831 000015AC FEC2                <1>     inc dl  ;Goto next BIOS drive
  1832 000015AE 88D6                <1>     mov dh, dl
  1833 000015B0 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1834 000015B3 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1835 000015BB 758C                <1>     jne .primary    ;Whilst we have fewer, go back
  1836                              <1> .extended:
  1837                              <1> ;We have gone through all the devices once
  1838                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1839                              <1>     ;je .remInit ;If yes, get removable devices
  1840                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1841                              <1>     ;xor ecx, ecx    ;Get MBR back
  1842                              <1>     ;call .initReadSector
  1843                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1844                              <1> .remInit:
  1845                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1846                              <1> ; for some reason the removable drives stop working or dont exist.
  1847 000015BD 488DB5[667E0000]    <1>     lea rsi, qword [rbp + msdDriver.dfltBPB]  ;Point to the default BPB
  1848 000015C4 488DBD[E67B0000]    <1>     lea rdi, qword [rbp + msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
  1849 000015CB 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
  1850 000015CE 48897708            <1>     mov qword [rdi + 8], rsi
  1851                              <1> ;This forces the hard drives to start at C:
  1852 000015D2 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
  1853 000015D5 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1854 000015D7 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1855                              <1>     ;rdi points to the space for the subsequent bpb's
  1856 000015DA 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1856 000015E2 00                  <1>
  1857 000015E3 750A                <1>     jnz .removables
  1858 000015E5 64800425[7DC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1858 000015ED 02                  <1>
  1859 000015EE C3                  <1>     ret ;and return!
  1860                              <1> .removables:
  1861 000015EF 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1862 000015F1 E85F000000          <1>     call .readSectorAndAddDataToTables
  1863                              <1> .removableEpilogue:
  1864 000015F6 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1865 000015F8 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1866 00001600 7412                <1>     je .end
  1867 00001602 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1868 00001609 7503                <1>     jne .re0
  1869 0000160B 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
  1870                              <1> .re0:
  1871 0000160E 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1872 00001612 72DB                <1>     jb .removables
  1873                              <1> .end:
  1874 00001614 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1874 0000161C 01                  <1>
  1875 0000161D 7401                <1>     je .singleRemDev
  1876 0000161F C3                  <1>     ret
  1877                              <1> .singleRemDev:
  1878                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1879 00001620 488D9D[DC7B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1880 00001627 8A95[DC7B0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1881 0000162D 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1882 00001630 488D9D[E67B0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1883 00001637 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1884 0000163A 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1885 0000163E 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1886 00001646 C3                  <1>     ret
  1887                              <1> .initReadSector:
  1888                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1889 00001647 B482                <1>     mov ah, 82h ;Read
  1890 00001649 B001                <1>     mov al, 1   ;One sector
  1891 0000164B 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1892 00001652 CD33                <1>     int 33h
  1893 00001654 C3                  <1>     ret
  1894                              <1> 
  1895                              <1> .readSectorAndAddDataToTables:
  1896                              <1> ;Input:
  1897                              <1> ;ecx = Sector number to read
  1898                              <1> ;r15 -> bpb array entry for the BPB
  1899                              <1> ;r8 = Logical Drive number (offset into arrays)
  1900 00001655 E8EDFFFFFF          <1>     call .initReadSector
  1901                              <1>     retc   ;Goto next device
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000165A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000165C C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1902                              <1>     ;Now verify this is a BPB
  1903 0000165D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1904 0000165F 8A6302              <1>     mov ah, byte [rbx + 2]
  1905 00001662 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1906                              <1>     retne   ;If not, skip
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001666 75(5C)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1907                              <1>     ;Now copy data to internal tables
  1908 00001668 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1909 0000166B 51                  <1>     push rcx
  1910 0000166C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1911 00001671 4C89FF              <1>     mov rdi, r15
  1912 00001674 F348A5              <1>     rep movsq   ;Copy the BPB
  1913 00001677 59                  <1>     pop rcx
  1914                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1915 00001678 4A8D9C05[DC7B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1916                              <1>     ;Add device count to rbx to point to correct entry
  1917 00001680 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1918 00001682 4A8D9CC5[E67B0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1919 0000168A 4C893B              <1>     mov qword [rbx], r15
  1920 0000168D 49FFC0              <1>     inc r8  ;Goto next logical drive
  1921 00001690 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1922 00001698 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
  1923                              <1>     return
    18                              <2> %%_ret:
    19 0000169F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
    18                              <1> ;This file contains the main DOS data segment
    19                              <1> dosAPT: ;Additional Page tables
    20 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    21                              <1> dosDataArea:
    22 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    23 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    24 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    25 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    26 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    27 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    28 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    29 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    30                              <1> ;Above is the system stats
    31                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    32                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    33 0003C023 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    34 0003C025 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    35 0003C027 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    36 0003C029 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    37 0003C031 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    38                              <1>     ;   A value of 0 means no chars buffered.
    39 0003C039 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    40                              <1> sysVarsPtr:
    41 0003C041 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    42 0003C049 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    43 0003C051 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    44                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    45 0003C059 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    46                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    47 0003C061 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    48 0003C063 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    49 0003C06B ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    50 0003C073 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    51 0003C07B ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    52                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    53 0003C07D ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    54 0003C07E ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    55 0003C07F ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    56 0003C080 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    57 0003C0A2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    58                              <1> ;Additional internal variables
    59 0003C0A3 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    60                              <1> 
    61                              <1>     ;DLL Manager hook functions here
    62                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    63                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    64                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    65                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    66                              <1>     ; and from within EXIT. 
    67                              <1>     ;
    68                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    69                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    70                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    71                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    72                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    73                              <1>     ; there is already an overlay there, to remove it's functions from the 
    74                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    75                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    76                              <1>     ; on EXIT, they can be removed from the registry. 
    77                              <1>     ;
    78                              <1>     ;In EXIT, the PSP of the ending task must be taken
    79                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
    80                              <1>     ; is a .COM file or an .EXE with no exports.
    81                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
    82                              <1>     ; it must return CF=CY.
    83                              <1> dllHooks:
    84 0003C0A4 ????????????????    <1>     registerDLL   resq 1    ;Entered with rbp = execFrame
    85 0003C0AC ????????????????    <1>     unloadDLLHook   resq 1  ;
    86                              <1>     ;Share hook functions here
    87                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    88                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    89                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    90                              <1> 
    91                              <1>     ;Note to programmer - Please adjust as necessary:
    92                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    93                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    94                              <1>     ;Those suffixed with a ? have their future in question.
    95                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
    96                              <1> 
    97                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
    98                              <1>     ; to see if there are any open handles. Its implementation is completely
    99                              <1>     ; optional, and an equivalent form of the function is provided for older
   100                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   101                              <1>     ;This function is defined as follows:
   102                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   103                              <1>     ;                       for.
   104                              <1>     ; Output: CF=CY -> Handle not supported.
   105                              <1>     ;         CF=NC -> Handle supported. 
   106                              <1>     ;           ZF=ZE -> No Files open.
   107                              <1>     ;           ZF=NZ -> Some files are open.
   108                              <1> shareHooks:
   109                              <1>     ;markerShare resq 1  ;Marker Share hook
   110 0003C0B4 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   111 0003C0BC ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   112 0003C0C4 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   113 0003C0CC ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   114 0003C0D4 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   115 0003C0DC ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   116 0003C0E4 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   117 0003C0EC ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   118 0003C0F4 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   119 0003C0FC ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   120 0003C104 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   121 0003C10C ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   122 0003C114 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   123 0003C11C ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   124 0003C124 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   125                              <1> ;Create SFT header and corresponding array of five default sft entries
   126 0003C12C <res Ah>            <1>     firstSftHeader  resb sfth_size
   127 0003C136 <res 4Fh>           <1>     firstSft    resb sft_size
   128 0003C185 <res 4Fh>           <1>     secondSft   resb sft_size
   129 0003C1D4 <res 4Fh>           <1>     thirdSft    resb sft_size
   130 0003C223 <res 4Fh>           <1>     fourthSft   resb sft_size
   131 0003C272 <res 4Fh>           <1>     fifthSft    resb sft_size
   132                              <1> 
   133                              <1> ;Virtual CONsole Buffers
   134 0003C2C1 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   135                              <1>     ;Only incremented when CON device runs vCon
   136                              <1> vConBuf:    ;Proper buffer symbol
   137 0003C2C2 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   138 0003C2C3 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   139                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   140 0003C343 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   141 0003C3C3 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   142                              <1> 
   143 0003C3C4 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   144 0003C3C5 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   145 0003C3C6 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   146 0003C3C7 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   147                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   148                              <1> 
   149 0003C3C8 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   150                              <1> ;Server stuff. Default to all zeros (blank)
   151 0003C3C9 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   152                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   153 0003C3CA ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   154 0003C3CB <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   155                              <1> ;Swappable Data Area
   156 0003C3DB <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   157 0003C3FB ??                  <1>                 resb 1  ;Alignment byte
   158                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   159 0003C3FC ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   160 0003C3FD ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   161 0003C3FE ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   162 0003C3FF ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   163 0003C400 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   164 0003C402 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   165 0003C403 ??                  <1>     errorClass  resb 1  ;Error Class
   166 0003C404 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   167 0003C40C ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   168 0003C414 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   169                              <1> 
   170 0003C41C ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   171 0003C424 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   172                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   173                              <1>     ;Lower byte: User Specified
   174 0003C426 ??                  <1>     currentDrv  resb 1  ;Default drive x
   175 0003C427 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   176                              <1> ;SDA, needs to be replaced between processes
   177                              <1> sdaMainSwap:
   178 0003C428 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   179 0003C430 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   180 0003C438 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   181 0003C43A ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   182 0003C442 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   183 0003C44A ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   184 0003C452 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   185 0003C454 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   186 0003C45C ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   187 0003C45D ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   188 0003C45E ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   189                              <1> 
   190 0003C45F ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   191 0003C467 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   192 0003C46F ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   193 0003C477 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   194 0003C47F ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   195                              <1> ;The below flag tells DOS to print ^C in the termination function
   196 0003C480 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   197 0003C481 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   198                              <1> ;Time stuff
   199                              <1> ;Read the below two as a word
   200 0003C482 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   201 0003C483 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   202 0003C484 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   203 0003C485 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   204 0003C487 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   205                              <1> 
   206 0003C488 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   207 0003C489 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   208 0003C48A ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   209                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   210                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   211                              <1> ; without forcing to re-build the whole primary request block.
   212                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   213                              <1> ; with secondary char output going through the secondary header
   214                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   215                              <1> ; for output)
   216                              <1> ;ioReqPkt is the largest possible packet
   217 0003C48B <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   218 0003C4B5 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   219                              <1>     altRet: ;Accessed as a qword
   220 0003C4DF <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   221 0003C509 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   222                              <1> ;Swappable Buffers
   223 0003C50A ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   224                              <1>     ;We add an additional byte to save ah too
   225 0003C510 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   226 0003C512 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   227 0003C592 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   228 0003C612 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   229 0003C61A ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   230 0003C622 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   231                              <1> ;Misc bookkeeping flags and vars
   232 0003C623 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   233 0003C64E <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   234 0003C66E <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   235 0003C6C9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   236 0003C6D5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   237 0003C6E1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   238                              <1> 
   239 0003C6E9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   240 0003C6EA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   241 0003C6EB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   242 0003C6EC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   243 0003C6ED ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   244 0003C6EE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   245 0003C6EF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   246 0003C6F0 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   247 0003C6F1 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   248 0003C6F2 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   249                              <1> 
   250 0003C6F3 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   251 0003C6F4 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   252 0003C6F5 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   253 0003C6F6 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   254 0003C6F7 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   255 0003C6F8 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   256 0003C6F9 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   257                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   258                              <1> workingDD:  ;Create a symbol for the working device driver too
   259 0003C6FA ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   260 0003C702 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   261 0003C70A ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   262                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   263                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   264 0003C712 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   265 0003C71A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   266 0003C722 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   267 0003C72A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   268 0003C72C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   269 0003C72E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   270                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   271                              <1> ; and 32 byte offset into the sector for directory
   272 0003C736 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   273                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   274                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   275 0003C73E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   276                              <1> ;***************************************************|
   277                              <1> ; Needs to be set up before any file access         |
   278                              <1> ; These vars keep track of file access properties   |
   279                              <1> ;   and must be used only for such purposes.        |
   280                              <1> ;***************************************************|
   281 0003C740 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   282 0003C744 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   283                              <1> 
   284 0003C748 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   285 0003C74C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   286 0003C74D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   287                              <1> 
   288 0003C755 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   289 0003C757 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   290                              <1> ;***************************************************|
   291 0003C75B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   292 0003C75F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   293 0003C763 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   294 0003C764 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   295 0003C768 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   296 0003C76C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   297                              <1> ;Directory stuff
   298 0003C770 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   299 0003C774 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   300 0003C778 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   301 0003C77A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   302                              <1> ;Error DPB 
   303 0003C77E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   304 0003C786 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   305                              <1>     
   306 0003C787 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   307 0003C7B2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   308                              <1> ;Stacks and scratch SFT
   309 0003C7D2 ????????????        <1>     alignb  8
   310 0003C7D8 <res 528h>          <1>     critStack   resq 165
   311 0003CD00 ????????????????    <1>     critStakTop resq 1
   312                              <1> 
   313 0003CD08 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   314                              <1>     
   315 0003CD57 ??                  <1>     alignb  8
   316 0003CD58 <res 638h>          <1>     AuxStack    resq 199
   317 0003D390 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   318 0003D398 <res 638h>          <1>     DiskStack   resq 199
   319 0003D9D0 ????????????????    <1>     DiskStakTop resq 1
   320                              <1> 
   321 0003D9D8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   322 0003D9D9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   323                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   324 0003D9DA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   325 0003DA4A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   326                              <1> ;Exception handler vars in SDA now 
   327 0003DA72 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   328 0003DA82 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   329                              <1>     sdaLen      equ     $ - sda 
   330                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   331                              <1> 
   332                              <1> ;Additional variables NOT in the SDA
   333 0003DA83 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   334 0003DA8B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   335 0003DA8C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   336                              <1>     ;for saving the current header when quickly doing a second request
   337                              <1> 
   338 0003DAB6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   339 0003DAB7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   340                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   341                              <1> inExtASCII:
   342 0003DAB9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   343 0003DABA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   344                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   345                              <1>     ; copy of the date/time record
   346                              <1> 
   347                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Static Data Variables       :
    24                              <1> ;-----------------------------------:
    25 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    26 00000001 5D                  <1> dosMinor    db 93      ;.93
    27 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    27 0000000B 535953              <1>
    28 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    28 00000017 535953              <1>
    29 0000001A 1400                <1> maxHndls    dw 20    ;Initially hardcoded 20, will be made changable soon
    30                              <1> ;Use the idea of having a JFT valid byte in the PSP to reuse PSP as ptrToNewJFT
    31                              <1> ;At that point, maxHndls will be removed
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Static Data Tables         :
    34                              <1> ;-----------------------------------:
    35                              <1> ctryTbl:
    36                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    37 0000001C 0100                <1>     dw 1            
    38 0000001E 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    39 00000023 2C00                <1>     db ",",0
    40 00000025 2E00                <1>     db ".",0
    41 00000027 2D00                <1>     db "-",0
    42 00000029 3A00                <1>     db ":",0
    43 0000002B 00                  <1>     db 0
    44 0000002C 02                  <1>     db 2 
    45 0000002D 00                  <1>     db 0 
    46 0000002E 0000000000000000    <1>     dq 0 
    47 00000036 2C00                <1>     db ",",0    
    48 00000038 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    48 00000041 00                  <1>
    49                              <1> 
    50                              <1> ;IO Char table
    51                              <1> ;This table has Request header length, command code and error flags
    52                              <1> ; as a packed DWORD entry
    53                              <1> ioRqCmdErrTbl:
    54                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    55                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    56 00000042 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    57 00000046 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    58 0000004A 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    59 0000004E 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    60 00000052 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    61 00000056 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    66                              <1> ; wish to install their own custom logic.
    67 0000005A 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    68 00000062 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    69 00000063 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    70                              <1> ;Extended ASCII keys with special meanings
    71 00000064 3B                  <1> extKeyTbl   db eF1
    72 00000065 4424                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    73 00000067 3C                  <1>             db eF2
    74 00000068 3624                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    75 0000006A 3D                  <1>             db eF3
    76 0000006B 3D24                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    77 0000006D 3E                  <1>             db eF4
    78 0000006E 7224                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    79 00000070 3F                  <1>             db eF5
    80 00000071 B724                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    81 00000073 40                  <1>             db eF6
    82 00000074 CD24                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    83 00000076 41                  <1>             db eF7
    84 00000077 D424                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    85 00000079 4B                  <1>             db eCursL
    86 0000007A 9B23                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    87 0000007C 4D                  <1>             db eCursR
    88 0000007D 4424                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    89 0000007F 52                  <1>             db eIns
    90 00000080 DF24                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    91 00000082 53                  <1>             db eDel
    92 00000083 E624                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    93                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    94                              <1> 
    95                              <1> ;When counting the number of days, first compute the number of years since
    96                              <1> ; 1980 and your year. 
    97                              <1> ;Then, using the table below, find the number of leap years between 1980
    98                              <1> ; and (YourYear - 1). 
    99                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   100                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   101                              <1> ;
   102                              <1> ;Use the months table to get the number of days in a normal month as leap 
   103                              <1> ; years are added using the previous comment.
   104                              <1> 
   105                              <1> ;This table is the number of days in the month
   106                              <1> ;The function which updates the days in Feb writes the number to this table
   107                              <1> monthsTbl:  
   108 00000085 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   108 0000008E 1F1E1F              <1>
   109                              <1> 
   110                              <1> ;Error tables
   111                              <1> errXlatTbl:
   112                              <1> ;Each entry is n bytes long, defined as
   113                              <1> ; Byte 0      : DOS function number for which translation will occur
   114                              <1> ; Byte 1      : Length of the table entry - 2
   115                              <1> ; Bytes n - 3 : Acceptable Error codes
   116                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   117                              <1> ;The table is terminated with a single -1 byte
   118                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   119                              <1> ; only on entry to a disk function
   120 00000091 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   121 00000095 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   122 0000009A 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   123 000000A0 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   124 000000A4 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   125 000000AA 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   126 000000B1 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   127 000000B4 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   128 000000B8 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   129 000000BC 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   130 000000C1 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   131 000000C5 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   132 000000CB 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   133 000000D2 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   134 000000D6 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   135 000000DA 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   136 000000DD 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   137 000000E1 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   138 000000E5 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   139 000000EA 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   140 000000F2 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   141 000000F4 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   142 000000F9 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   143 000000FC 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   144 00000102 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   145 00000106 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   146 00000109 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   147 0000010F 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   148 00000116 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   149 0000011C 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   150 00000120 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   151 00000124 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   152 00000127 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   153 0000012C FF                  <1>     db -1   ;End Of Table marker
   154                              <1> 
   155                              <1> 
   156                              <1> extErrTbl:
   157                              <1> ;This table contains the default values for how to respond
   158                              <1> ; to particular errors. Fields with -1 need to be filled in before
   159                              <1> ; setting variables using this table.
   160                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   161                              <1> ; Byte 0: Extended Error Code as a byte
   162                              <1> ; Byte 1: Error Class
   163                              <1> ; Byte 2: Error Suggested Action
   164                              <1> ; Byte 3: Error Locus
   165                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   166                              <1> ;
   167                              <1> ;Error 01: Invalid function number
   168 0000012D 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   169                              <1> ;Error 02: File not found
   170 00000131 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   171                              <1> ;Error 03: Path not found
   172 00000135 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   173                              <1> ;Error 04: Too many open handles, and no handles are left
   174 00000139 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   175                              <1> ;Error 05: Access being denied
   176 0000013D 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   177                              <1> ;Error 06: Invalid File handle being provided
   178 00000141 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   179                              <1> ;Error 07: MCB chain destroyed
   180 00000145 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   181                              <1> ;Error 08: No Memory remaining
   182 00000149 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   183                              <1> ;Error 09: Invalid MCB block Address
   184 0000014D 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   185                              <1> ;Error 0A: Bad Environment block
   186 00000151 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   187                              <1> ;Error 0B: Data provided in a bad format
   188 00000155 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   189                              <1> ;Error 0C: Access Code Invalid
   190 00000159 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   191                              <1> ;Error 0D: Error due to Invalid Data provided
   192 0000015D 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   193                              <1> ;Error 0F: Error due to a bad drive letter being provided
   194 00000161 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 10: Error due to attempting to delete the CWD
   196 00000165 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   197                              <1> ;Error 11: Error due to a unknown device being used
   198 00000169 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   199                              <1> ;Error 12: No more file handles available
   200 0000016D 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   201                              <1> ;Error 50: Network request not supported
   202 00000171 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   203                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   204 00000175 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   205                              <1> ;Error 21: File Locking Violation
   206 00000179 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   207                              <1> ;Error 54: Too many levels of redirection error
   208 0000017D 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   209                              <1> ;Error 56: Bad resource password provided
   210 00000181 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   211                              <1> ;Error 52: Directory already exists
   212 00000185 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   213                              <1> ;Error 32: Network request not supported by DOS
   214 00000189 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   215                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   216 0000018D 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   217                              <1> ;Error 57: Bad parameter in request
   218 00000191 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   219                              <1> ;Error 53: Fail was returned from Int 44h
   220 00000195 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   221                              <1> ;Error 24: Sharing Buffer Full
   222 00000199 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   223 0000019D FFFFFFFF            <1>     dd -1   ;End of table signature
   224                              <1> 
   225                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   226 000001A1 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   226 000001AA 090A0B0C0D0E0F      <1>
   227 000001B1 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   227 000001BA 191A1B1C1D1E1F      <1>
   228 000001C1 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   228 000001CA 3D3E3F5B5C5D7C      <1>
   229                              <1> badDirNameCharL equ $ - badDirNameChar
   230                              <1> ;The chars * ? . \ / need to always be handled separately
   231                              <1> 
   232                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   233 000001D1 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   233 000001DA 4545494949          <1>
   234 000001DF 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   234 000001E8 5559999A9B          <1>
   235 000001ED 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   235 000001F6 A5A6A7A8            <1>
   236 000001FA A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   236 00000203 B2B3B4              <1>
   237 00000206 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   237 0000020F BEBFC0              <1>
   238 00000212 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   238 0000021B CACBCC              <1>
   239 0000021E CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   239 00000227 D6D7D8              <1>
   240 0000022A D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   240 00000233 E2E3E4              <1>
   241 00000236 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   241 0000023F EEEFF0              <1>
   242 00000242 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   242 0000024B FAFBFC              <1>
   243 0000024E FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   244                              <1> 
   245                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   246 00000251 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   246 0000025A F0F6F6              <1>
   247 0000025D F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   247 00000266 F6F6F6              <1>
   248 00000269 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   248 00000272 FFF6FF              <1>
   249 00000275 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   249 0000027E FFFEF6              <1>
   250 00000281 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   250 0000028A FFF4F4              <1>
   251 0000028D F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   251 00000296 FFFFFF              <1>
   252 00000299 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002A2 FFFFFF              <1>
   253 000002A5 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   253 000002AE F6FFFF              <1>
   254 000002B1 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 000002BA FFFFFF              <1>
   255 000002BD FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002C6 FFFFFF              <1>
   256 000002C9 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   257                              <1> 
   258                              <1> hardErrorStack:
   259 000002D1 13                  <1>     db errWpd
   260 000002D2 0B                  <1>     db eClsMedia
   261 000002D3 07                  <1>     db eActRetUsr
   262 000002D4 02                  <1>     db eLocDsk
    21                                  %include "./Source/Data/dispTbl.asm"
    22                              <1> ;Kernel Dispatch Function Table
    23                              <1> 
    24                              <1> kDispTbl:
    25 000002D5 A84F                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    26 000002D7 AF1B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    27 000002D9 BC1B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    28 000002DB 901C                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    29 000002DD B91C                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    30 000002DF C11C                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    31 000002E1 D91C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    32 000002E3 0C1D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    33 000002E5 311D                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    34 000002E7 901D                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    35 000002E9 4320                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    36 000002EB 9F1D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    37 000002ED AB1D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    38 000002EF BA67                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    39 000002F1 EC67                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    40 000002F3 E427                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    41 000002F5 EE27                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    42 000002F7 8225                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    43 000002F9 3B26                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    44 000002FB C226                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    45 000002FD F827                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    46 000002FF 0228                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    47 00000301 0C28                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    48 00000303 F126                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    49 00000305 796A                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    50 00000307 0568                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    51 00000309 AF27                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    52 0000030B 0C68                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    53 0000030D 0E68                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    54 0000030F 796A                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    55 00000311 796A                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    56 00000313 AC68                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    57 00000315 796A                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    58 00000317 1628                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    59 00000319 2028                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    60 0000031B 5C27                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    61 0000031D 2A28                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    62 0000031F 5768                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    63 00000321 B44E                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    64 00000323 3428                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    65 00000325 3E28                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    66 00000327 D527                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    67 00000329 BC22                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    68 0000032B E322                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    69 0000032D E922                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    70 0000032F 0A23                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    71 00000331 8968                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    72 00000333 C227                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    73 00000335 9768                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    74 00000337 7A4F                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    75 00000339 AE68                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    76 0000033B 6967                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    77 0000033D E668                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    78 0000033F F768                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    79 00000341 0869                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    80 00000343 2458                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    81 00000345 4D58                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    82 00000347 8912                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    83 00000349 B914                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    84 0000034B 9216                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    85 0000034D 332A                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    86 0000034F 442A                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    87 00000351 6E2B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    88 00000353 AD2B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    89 00000355 E82B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    90 00000357 F42B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    91 00000359 592C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    92 0000035B C82C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    93 0000035D EA43                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    94 0000035F E02D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    95 00000361 1B2E                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    96 00000363 5A17                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    97 00000365 3049                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    98 00000367 5A4B                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    99 00000369 624C                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
   100 0000036B 0F51                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   101 0000036D AA4F                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   102 0000036F 4C69                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   103 00000371 302E                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   104 00000373 9B2E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   105 00000375 9767                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   106 00000377 A067                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   107 00000379 5A69                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   108 0000037B 6B69                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   109 0000037D 496A                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   110 0000037F A14E                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   111 00000381 CB2E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   112 00000383 572F                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   113 00000385 004E                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   114 00000387 506A                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   115 00000389 9F2F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   116 0000038B 6730                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   117 0000038D A130                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   118 0000038F 7A6A                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   119 00000391 3B6C                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   120 00000393 A16C                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   121 00000395 DD17                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   122 00000397 796A                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   123 00000399 A967                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   124 0000039B 796A                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   125 0000039D B267                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   126 0000039F 7C58                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   127 000003A1 7C58                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   128 000003A3 0D31                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   129 000003A5 7B30                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   130 000003A7 796A                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   131                              <1> kDispTblL  equ $ - kDispTbl 
   132                              <1> 
   133                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   134 000003A9 5B6C                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   135 000003AB 0439                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   136 000003AD 2261                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   137 000003AF 5E6C                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   138 000003B1 4A62                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   139 000003B3 EA1A                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   140 000003B5 3C58                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   141 000003B7 6300                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   142 000003B9 A742                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   143 000003BB 9500                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   144 000003BD 416D                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   145 000003BF C96C                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   146 000003C1 D135                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   147 000003C3 9B24                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   148 000003C5 A300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   149 000003C7 BD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   150 000003C9 CB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   151 000003CB A662                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   152 000003CD 8862                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   153 000003CF 5662                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   154 000003D1 D463                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   155 000003D3 DE00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   156 000003D5 D641                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   157 000003D7 1862                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   158 000003D9 3061                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   159 000003DB BD61                <1>     dw getCDS - mDispTbl    ;AX=1219h
   160 000003DD E60B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   161 000003DF 2E24                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   162 000003E1 A569                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   163 000003E3 A569                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   164 000003E5 BF62                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   165 000003E7 6E61                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   166 000003E9 0B42                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   167 000003EB FF16                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   168 000003ED 2F66                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   169 000003EF 2211                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   170 000003F1 A66C                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   171 000003F3 7D62                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   172                              <1> mDispTblL   equ     $ - mDispTbl
   173                              <1> 
   174                              <1> serverDispTbl:  ;Server Dispatch functions
   175 000003F5 0B                  <1>     db 0Bh  ;Number of entries
   176 000003F6 A169                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   177 000003F8 F369                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   178 000003FA 4C6A                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   179 000003FC 5D6A                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   180 000003FE 656A                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   181 00000400 6D6A                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   182 00000402 886A                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   183 00000404 B26A                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   184 00000406 B26A                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   185 00000408 B26A                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   186 0000040A BF6A                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %if DEBUG
    23                                  %include "./Source/Debug/debug.asm"
    24                                  %endif
    25                                  %include "./Source/Kernel/FAT/buffun.asm"
    26                              <1> ;This file contains FAT disk buffer related functions that
    27                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    28                              <1> ;----------------------------------------------------
    29                              <1> ;           Externally referenced functions         :
    30                              <1> ;----------------------------------------------------
    31                              <1> 
    32                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    33                              <1> ;Sets the buffer in rdi to the head of the chain
    34                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    35                              <1> ;Output: Buffer header set to the head of the chain
    36 0000040C 48393D(63C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    37 00000413 7428                <1>     je .exit
    38 00000415 56                  <1>     push rsi
    39 00000416 488B35(63C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    40                              <1> .mainlp:
    41 0000041D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    42 00000420 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    43 00000422 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    44 00000425 EBF6                <1>     jmp short .mainlp
    45                              <1> .fnd:
    46 00000427 57                  <1>     push rdi
    47 00000428 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    48 0000042B 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    49 0000042E 5F                  <1>     pop rdi ;Get original buf back
    50 0000042F 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    51 00000432 488735(63C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    52 00000439 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    53 0000043C 5E                  <1>     pop rsi
    54                              <1> .exit:
    55                              <1>     return
    18                              <2> %%_ret:
    19 0000043D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> 
    57                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    58                              <1> ;1 External reference
    59                              <1> ;Input: rdi = Buffer header to flush and free
    60 0000043E E844000000          <1>     call flushBuffer
    61 00000443 7206                <1>     jc .exit
    62                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    63 00000445 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    64                              <1> .exit:
    65                              <1>     return
    18                              <2> %%_ret:
    19 0000044B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    68                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    69                              <1> ;Output: rdi = First disk buffer
    70 0000044C 488B3D(63C00300)    <1>     mov rdi, [bufHeadPtr]
    71 00000453 57                  <1>     push rdi
    72                              <1> .lp:
    73 00000454 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    74 00000458 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 0000045B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    76 00000462 75F0                <1>     jne .lp
    77 00000464 5F                  <1>     pop rdi
    78                              <1>     return
    18                              <2> %%_ret:
    19 00000465 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    81                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    82                              <1> ; second buffer in the chain in rdi
    83                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    84                              <1> ;Output: rdi = Second buffer in the chain
    85 00000466 52                  <1>     push rdx
    86 00000467 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    87 0000046A E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    88 0000046F 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    89 00000472 5A                  <1>     pop rdx
    90                              <1>     return
    18                              <2> %%_ret:
    19 00000473 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    93                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    94                              <1> ;Input: rdi = Buffer header to start searching at
    95                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    96                              <1> ;        ZF=ZE => No unreferenced buffer found
    97 00000474 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    98 00000478 750C                <1>     jnz .exit
    99 0000047A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   100 0000047D 4881FFFFFFFFFF      <1>     cmp rdi, -1
   101 00000484 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
   102                              <1> .exit:
   103                              <1>     return
    18                              <2> %%_ret:
    19 00000486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> 
   105                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   106                              <1> ;Flushes the data in a sector buffer to disk!
   107                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   108                              <1> ;Exit:  CF=NC : Success
   109                              <1> ;       CF=CY : Fail, terminate the request
   110                              <1> ;First make request to device driver
   111 00000487 50                  <1>     push rax
   112 00000488 53                  <1>     push rbx
   113 00000489 51                  <1>     push rcx
   114 0000048A 52                  <1>     push rdx
   115 0000048B 56                  <1>     push rsi
   116 0000048C 55                  <1>     push rbp
   117                              <1> ;If the buffer is freed, skip flushing to avoid issues
   118 0000048D 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   119 00000491 7454                <1>     je .fbFreeExit  ;If it is free exit
   120 00000493 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   121 00000497 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   122                              <1> .fbRequest0:
   123 00000499 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   124 0000049E F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   125 000004A2 7406                <1>     jz .fbRequest1
   126 000004A4 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   127                              <1> .fbRequest1:
   128 000004AA 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   129 000004AD B901000000          <1>     mov ecx, 1  ;One sector to copy
   130 000004B2 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   131 000004B6 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   132 000004BA 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   133 000004BE E8B45E0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   134 000004C3 E8465D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   135 000004C8 7525                <1>     jnz .fbFail
   136                              <1> ;Now check if the buffer was a FAT, to write additional copies
   137 000004CA F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   138 000004CE 7417                <1>     jz .fbFreeExit  ;If not, exit
   139 000004D0 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   140 000004D3 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   141 000004D5 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   142 000004D8 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   143 000004DC E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   144                              <1> .fbFreeExit1:
   145 000004E1 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   146 000004E4 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   147                              <1> .fbFreeExit:
   148 000004E7 F8                  <1>     clc
   149                              <1> .fbExitFail:
   150 000004E8 5D                  <1>     pop rbp
   151 000004E9 5E                  <1>     pop rsi
   152 000004EA 5A                  <1>     pop rdx
   153 000004EB 59                  <1>     pop rcx
   154 000004EC 5B                  <1>     pop rbx
   155 000004ED 58                  <1>     pop rax
   156                              <1>     return
    18                              <2> %%_ret:
    19 000004EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> .fbFail:
   158                              <1> ;Enter here only if the request failed
   159 000004EF FFCE                <1>     dec esi
   160 000004F1 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   161                              <1> ;Request failed thrice, critical error call
   162 000004F3 C605(5CC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   163 000004FA E87D560000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   164 000004FF 3C01                <1>     cmp al, critRetry
   165 00000501 7496                <1>     je .fbRequest0
   166                              <1>     ;Else we fail (Ignore=Fail here)
   167 00000503 F9                  <1>     stc ;Set error flag to indicate fail
   168 00000504 E9DFFFFFFF          <1>     jmp .fbExitFail
   169                              <1> 
   170                              <1> testDirtyBufferForDrive:    ;External linkage
   171                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   172                              <1> ;Input: al = Drive number (0 based)
   173                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   174                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   175 00000509 53                  <1>     push rbx
   176 0000050A 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .tdbfdCheckBuffer:
   178 00000511 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   179 00000514 7509                <1>     jne .tdbfdGotoNextBuffer
   180 00000516 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   181 0000051A 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   182 0000051C F9                  <1>     stc ;Else dirty buffer found, set carry flag
   183                              <1> .tdbfdExit:
   184 0000051D 5B                  <1>     pop rbx
   185                              <1>     return
    18                              <2> %%_ret:
    19 0000051E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   186                              <1> .tdbfdGotoNextBuffer:
   187 0000051F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   188 00000522 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   189 00000529 74F2                <1>     je .tdbfdExit
   190 0000052B EBE4                <1>     jmp short .tdbfdCheckBuffer
   191                              <1> 
   192                              <1> 
   193                              <1> cancelWriteThroughBuffers:  ;External linkage
   194                              <1> ; Frees all buffers for the workingDPB
   195                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   196                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   197                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   198                              <1> ; to have a drive number of -1, thus freeing it
   199                              <1> ;Given DPB is in rbp
   200 0000052D 53                  <1>     push rbx
   201 0000052E 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   202                              <1> .i0:
   203 00000535 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   204 00000539 7506                <1>     jne .i1 ;If no, skip freeing
   205 0000053B 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   206                              <1> .i1:
   207 00000541 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   208 00000544 4881FBFFFFFFFF      <1>     cmp rbx, -1
   209 0000054B 75E8                <1>     jne .i0
   210                              <1> .exit:
   211 0000054D 5B                  <1>     pop rbx
   212                              <1>     return
    18                              <2> %%_ret:
    19 0000054E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> writeThroughBuffers: ;External linkage
   215                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   216                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   217                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   218 0000054F 50                  <1>     push rax
   219 00000550 57                  <1>     push rdi
   220 00000551 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   221 00000558 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   222                              <1> .mainLp:
   223 0000055F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   224 00000566 7416                <1>     je .exit   
   225 00000568 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   226 0000056C 750B                <1>     jne .nextBuffer
   227 0000056E E814FFFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   228 00000573 7209                <1>     jc .exit  ;If something went wrong, exit
   229 00000575 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   230                              <1> .nextBuffer:
   231 00000579 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   232 0000057C EBE1                <1>     jmp short .mainLp
   233                              <1> .exit:
   234 0000057E 5F                  <1>     pop rdi
   235 0000057F 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 00000580 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> markBufferDirty:
   239 00000581 55                  <1>     push rbp
   240 00000582 9C                  <1>     pushfq
   241 00000583 488B2D(2EC70300)    <1>     mov rbp, qword [currBuff]
   242 0000058A 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   243 0000058E 9D                  <1>     popfq
   244 0000058F 5D                  <1>     pop rbp
   245                              <1>     return
    18                              <2> %%_ret:
    19 00000590 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> 
   248                              <1> getBuffer: ;Internal Linkage ONLY
   249                              <1> ;
   250                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   251                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   252                              <1> ;Flushes if not in disk change mode. 
   253                              <1> ;If in disk change mode, will check to see if the selected buffer 
   254                              <1> ; has data referring a device using the same DPB as we are changing.
   255                              <1> ; If it is, skip flushing, if not, flush first!
   256                              <1> ;
   257                              <1> ;This function will return a pointer to the desired data sector OR 
   258                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   259                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   260                              <1> ;Entry: rax = Sector to read
   261                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   262                              <1> ;       rsi = DPB to use for transaction
   263                              <1> ;Exit:  CF=NC => 
   264                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   265                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   266 00000591 51                  <1>     push rcx
   267 00000592 52                  <1>     push rdx
   268 00000593 56                  <1>     push rsi
   269 00000594 57                  <1>     push rdi
   270 00000595 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   271 00000597 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   272 0000059C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   273 000005A3 7418                <1>     je .rbReadNewSector
   274 000005A5 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   275 000005AC 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   276                              <1> .rbExit:
   277 000005B0 F8                  <1>     clc
   278                              <1> .rbExitNoFlag:
   279 000005B1 5F                  <1>     pop rdi
   280 000005B2 5E                  <1>     pop rsi
   281 000005B3 5A                  <1>     pop rdx
   282 000005B4 59                  <1>     pop rcx
   283 000005B5 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   284                              <1>     return
    18                              <2> %%_ret:
    19 000005BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .rbReadNewSector:
   286 000005BD E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   287 000005C2 803D(D8D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   288 000005C9 7506                <1>     jne .flush  ;We are not, flush buffer
   289 000005CB 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   290 000005CF 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   291                              <1> .flush:
   292 000005D1 E868FEFFFF          <1>     call flushAndFreeBuffer
   293 000005D6 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   294                              <1> .skipFlush:
   295                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   296                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   297                              <1>     ; is no longer owned by that File so we mark the owner as none
   298 000005D8 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   299 000005E0 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   300 000005E3 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   301 000005E6 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   302 000005EA 80F902              <1>     cmp cl, fatBuffer
   303 000005ED B201                <1>     mov dl, 1   ;Default values if not fat buffer
   304 000005EF 7503                <1>     jne .rbNonFATbuffer
   305 000005F1 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   306                              <1> .rbNonFATbuffer:
   307 000005F4 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   308 000005F7 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   309 000005FA 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   310 000005FD 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   311 00000601 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   312 00000605 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   313 0000060A 72A5                <1>     jc .rbExitNoFlag
   314 0000060C EBA2                <1>     jmp short .rbExit
   315                              <1> 
   316                              <1> readSectorBuffer:   ;Internal Linkage
   317                              <1> ;Reads a sector into a built sector buffer
   318                              <1> ;Entry: rdi = Pointer to buffer header
   319                              <1> ;Exit:  CF=NC : Success
   320                              <1> ;       CF=CY : Fail, terminate the request
   321                              <1> ;       rbx pointing to buffer header
   322                              <1> ;First make request to device driver
   323 0000060E 50                  <1>     push rax
   324 0000060F 53                  <1>     push rbx
   325 00000610 51                  <1>     push rcx
   326 00000611 52                  <1>     push rdx
   327 00000612 56                  <1>     push rsi
   328 00000613 55                  <1>     push rbp
   329                              <1> .rsRequest0:
   330 00000614 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   331 00000619 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   332 0000061D 7406                <1>     jz .rsRequest1
   333 0000061F 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   334                              <1> .rsRequest1:
   335 00000625 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   336 00000628 B901000000          <1>     mov ecx, 1  ;One sector to copy
   337 0000062D 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   338 00000631 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   339 00000635 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   340 00000639 E8445D0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   341 0000063E E8CB5B0000          <1>     call absDiskDriverCall    ;Make Driver Request
   342 00000643 7508                <1>     jnz .rsFail
   343                              <1> .rsExit:
   344 00000645 F8                  <1>     clc
   345                              <1> .rsExitFail:
   346 00000646 5D                  <1>     pop rbp
   347 00000647 5E                  <1>     pop rsi
   348 00000648 5A                  <1>     pop rdx
   349 00000649 59                  <1>     pop rcx
   350 0000064A 5B                  <1>     pop rbx
   351 0000064B 58                  <1>     pop rax
   352                              <1>     return
    18                              <2> %%_ret:
    19 0000064C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   353                              <1> .rsFail:
   354                              <1> ;Enter here only if the request failed
   355 0000064D FFCE                <1>     dec esi
   356 0000064F 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   357                              <1> ;Request failed thrice, critical error call
   358                              <1> ;First free the buffer if we failed to read data into it 
   359 00000651 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   360 00000655 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   361 0000065B C605(5CC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   362 00000662 E815550000          <1>     call diskDevErr
   363 00000667 3C01                <1>     cmp al, critRetry
   364 00000669 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   365 0000066B 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   366 0000066F EBA3                <1>     jmp short .rsRequest0
   367                              <1> .fail:
   368 00000671 F9                  <1>     stc ;Set error flag to indicate fail
   369 00000672 E9CFFFFFFF          <1>     jmp .rsExitFail
   370                              <1>     
   371                              <1> findLRUBuffer: ;Internal Linkage
   372                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   373                              <1> ; in rbx and the currBuff variable
   374                              <1> ;Input: Nothing
   375                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   376                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   377 00000677 52                  <1>     push rdx
   378 00000678 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   379 0000067F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   380 00000683 7436                <1>     je .flbExit 
   381 00000685 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   382 0000068C 742D                <1>     je .flbExit
   383                              <1> .flbWalk:
   384 0000068E 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   385 00000691 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   386 00000694 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   387 00000698 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   388 0000069A 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   389 000006A1 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   390 000006A3 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   391                              <1> .flbHeadLink:
   392 000006AA 488B15(63C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   393 000006B1 48893D(63C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   394 000006B8 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   395                              <1> .flbExit:
   396 000006BB 5A                  <1>     pop rdx
   397 000006BC 48893D(2EC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   398                              <1>     return
    18                              <2> %%_ret:
    19 000006C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   399                              <1> .flbFreeLink:
   400 000006C4 51                  <1>     push rcx
   401 000006C5 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   402 000006C8 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   403 000006CB 59                  <1>     pop rcx
   404 000006CC EBDC                <1>     jmp short .flbHeadLink
   405                              <1> 
   406                              <1> findSectorInBuffer:     ;Internal linkage
   407                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   408                              <1> ;If the sector is not in a buffer, returns with a -1
   409                              <1> ;Input: rax = Sector number
   410                              <1> ;       dl = Drive number
   411                              <1> ;Output: rdi = Buffer hdr pointer or -1
   412 000006CE 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   413                              <1> .fsiCheckBuffer:
   414 000006D5 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   415 000006D8 7507                <1>     jne .fsiGotoNextBuffer
   416 000006DA 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   417 000006DE 7501                <1>     jne .fsiGotoNextBuffer
   418                              <1> .fsiExit:
   419                              <1>     return
    18                              <2> %%_ret:
    19 000006E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   420                              <1> .fsiGotoNextBuffer:
   421 000006E1 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 000006E4 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   423 000006EB 74F3                <1>     je .fsiExit
   424 000006ED EBE6                <1>     jmp short .fsiCheckBuffer
   425                              <1> 
   426                              <1> ;-----------------------------------------------------------------------------
   427                              <1> ;SPECIAL BUFFER FUNCTIONS
   428                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   429                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   430                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   431                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   432                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   433                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   434                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   435                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   436                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   437                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   438                              <1> ;-----------------------------------------------------------------------------
   439                              <1> getBufForDataNoFile:
   440                              <1> ;Returns a buffer to use for disk data in rbx
   441                              <1> ;Requires a File Handle.
   442                              <1> ;Input: [workingDPB] = DPB to transact on
   443                              <1> ;       rax = Sector to transfer
   444                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   445 000006EF 51                  <1>     push rcx
   446 000006F0 B108                <1>     mov cl, dataBuffer
   447 000006F2 56                  <1>     push rsi
   448 000006F3 57                  <1>     push rdi
   449 000006F4 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   450 000006FB E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   451 00000700 725F                <1>     jc getBufCommon.exit
   452 00000702 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   453 0000070A EB55                <1>     jmp short getBufCommon.exit
   454                              <1> getBufForDirNoFile:
   455                              <1> ;Returns a buffer to use for disk dir data in rbx
   456                              <1> ;Requires a File Handle.
   457                              <1> ;Input: [workingDPB] = DPB to transact on
   458                              <1> ;       rax = Sector to transfer
   459                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   460 0000070C 51                  <1>     push rcx
   461 0000070D B104                <1>     mov cl, dirBuffer
   462 0000070F 56                  <1>     push rsi
   463 00000710 57                  <1>     push rdi
   464 00000711 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   465 00000718 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   466 0000071D 7242                <1>     jc getBufCommon.exit
   467 0000071F 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   468 00000727 EB38                <1>     jmp short getBufCommon.exit
   469                              <1> getBufForFat:
   470                              <1> ;Returns a buffer to use for fat data in rbx
   471                              <1> ;Input: [workingDPB] = DPB to transact on
   472                              <1> ;       rax = Sector to transfer
   473                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   474 00000729 51                  <1>     push rcx
   475 0000072A B102                <1>     mov cl, fatBuffer
   476 0000072C EB03                <1>     jmp short getBufCommon2
   477                              <1> getBufForDOS:
   478                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   479                              <1> ;Input: [workingDPB] = DPB to transact on
   480                              <1> ;       rax = Sector to transfer
   481                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   482 0000072E 51                  <1>     push rcx
   483 0000072F B101                <1>     mov cl, dosBuffer
   484                              <1> getBufCommon2:
   485 00000731 56                  <1>     push rsi
   486 00000732 57                  <1>     push rdi    ;Push rdi to preserve it
   487 00000733 488B35(FAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   488 0000073A EB15                <1>     jmp short getBufCommon.makeReq
   489                              <1> getBufForDir:
   490                              <1> ;Returns a buffer to use for disk directory data in rbx
   491                              <1> ;Input: [currentSFT] = File to manipulate
   492                              <1> ;       rax = Sector to transfer
   493                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   494 0000073C 51                  <1>     push rcx
   495 0000073D B104                <1>     mov cl, dirBuffer
   496 0000073F EB03                <1>     jmp short getBufCommon
   497                              <1> getBufForData:
   498                              <1> ;Returns a buffer to use for disk data in rbx
   499                              <1> ;Requires a File Handle.
   500                              <1> ;Input: [currentSFT] = File to manipulate
   501                              <1> ;       rax = Sector to transfer
   502                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   503 00000741 51                  <1>     push rcx
   504 00000742 B108                <1>     mov cl, dataBuffer
   505                              <1> getBufCommon:
   506 00000744 56                  <1>     push rsi
   507 00000745 57                  <1>     push rdi
   508 00000746 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   509 0000074D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   510                              <1> .makeReq:
   511 00000751 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   512 00000756 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   513                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   514                              <1>     ; flushed to the file!
   515                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   516                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   517                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   518 00000758 F6C103              <1>     test cl, dosBuffer | fatBuffer
   519 0000075B 7504                <1>     jnz .exit
   520 0000075D 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   521                              <1> .exit:
   522 00000761 5F                  <1>     pop rdi
   523 00000762 5E                  <1>     pop rsi
   524 00000763 59                  <1>     pop rcx
   525                              <1>     return
    18                              <2> %%_ret:
    19 00000764 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> flushFile:
   528                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   529                              <1> ; FAT/DOS buffers to flush
   530                              <1> ; We flush and free, and set to head of chain before continuing to search
   531                              <1> ;Input: rdi = is the file (sft) we wish to flush
   532                              <1> ;Output: CF=NC => All ok
   533                              <1> ;        CF=CY => A sector failed, exit. 
   534 00000765 57                  <1>     push rdi
   535 00000766 56                  <1>     push rsi
   536                              <1>     ;First check if the file has been written to?
   537 00000767 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   538 0000076D 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   539 0000076F 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   540 00000772 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   541                              <1> .ffLoop:
   542 00000779 4881FFFFFFFFFF      <1>     cmp rdi, -1
   543 00000780 741B                <1>     je .exit
   544 00000782 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   545 00000786 751E                <1>     jnz .found  ;Flush if either bit is set
   546 00000788 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   547 00000790 7414                <1>     je .found
   548 00000792 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   549 00000796 740E                <1>     je .found
   550 00000798 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   551 0000079B EBDC                <1>     jmp short .ffLoop
   552                              <1> .exit:
   553                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   554 0000079D 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   555                              <1> .exitNoFlush:
   556 000007A3 5E                  <1>     pop rsi
   557 000007A4 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 000007A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> .found:
   560                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   561                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   562 000007A6 E893FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   563 000007AB 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   564                              <1>     ;If the sector has been successfully flushed, then it
   565                              <1>     ; is no longer owned by that File so we mark the owner as none
   566 000007AD 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   567 000007B5 E8ACFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   568 000007BA EBBD                <1>     jmp short .ffLoop
    26                                  %include "./Source/Kernel/FAT/fat.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;       File System routines        :
    29                              <1> ;-----------------------------------:
    30                              <1> getFATtype:
    31                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    32                              <1> ;Entry: rbp = DPB to ascertain FAT
    33                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    34 000007BC 53                  <1>     push rbx
    35 000007BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    36 000007C0 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    37 000007C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    38 000007CB 730C                <1>     jae .exit
    39 000007CD FFC9                <1>     dec ecx     ;FAT 16 marker
    40 000007CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    41 000007D5 7302                <1>     jae .exit
    42 000007D7 FFC9                <1>     dec ecx     ;FAT 12 marker
    43                              <1> .exit:
    44 000007D9 5B                  <1>     pop rbx
    45                              <1>     return
    18                              <2> %%_ret:
    19 000007DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> clust2FATEntry:
    48                              <1> ;Converts a cluster number to a offset in the FAT
    49                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    50                              <1> ;        eax = Cluster number to look for
    51                              <1> ;Exit:   eax = Sector on disk of FAT 
    52                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    53                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    54 000007DB 53                  <1>     push rbx
    55 000007DC 55                  <1>     push rbp
    56 000007DD 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    57 000007E4 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    58 000007E7 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    59 000007ED 731E                <1>     jae .fat32
    60 000007EF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    61 000007F5 7209                <1>     jb .fat12
    62                              <1> ;FAT16
    63 000007F7 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    64 000007F9 6801000000          <1>     push qword 1
    65 000007FE EB15                <1>     jmp short .common
    66                              <1> .fat12:
    67 00000800 89C1                <1>     mov ecx, eax    ;ecx = eax
    68 00000802 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    69 00000804 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    70 00000806 6800000000          <1>     push qword 0
    71 0000080B EB08                <1>     jmp short .common
    72                              <1> .fat32:
    73 0000080D 6802000000          <1>     push qword 2
    74 00000812 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    75                              <1> .common:
    76                              <1> ;eax has the FAToffset
    77 00000815 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00000819 31D2                <1>     xor edx, edx    ;edx = 0
    79 0000081B F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    80 0000081D 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    81 00000821 01D8                <1>     add eax, ebx
    82 00000823 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    83 00000824 5D                  <1>     pop rbp
    84 00000825 5B                  <1>     pop rbx
    85                              <1>     return
    18                              <2> %%_ret:
    19 00000826 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getStartSectorOfCluster:
    88                              <1> ;Input: eax = Cluster Number
    89                              <1> ;       rbp = dpb pointer
    90                              <1> ;Output: rax = Starting Sector number for cluster
    91                              <1> ;Gives the data sector we are at in the current cluster
    92                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    93 00000827 51                  <1>     push rcx
    94 00000828 09C0                <1>     or eax, eax ;Zero upper dword
    95 0000082A 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    96                              <1> .fat32Root:
    97 0000082C 482D02000000        <1>     sub rax, 2
    98 00000832 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    99 00000835 48D3E0              <1>     shl rax, cl
   100 00000838 31C9                <1>     xor ecx, ecx
   101 0000083A 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   102 0000083D 4801C8              <1>     add rax, rcx
   103                              <1>     ;rax now has the first sector of the current cluster
   104 00000840 59                  <1>     pop rcx
   105                              <1>     return
    18                              <2> %%_ret:
    19 00000841 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   106                              <1> .rootDir:
   107 00000842 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   108 00000845 E872FFFFFF          <1>     call getFATtype
   109 0000084A 81F902000000        <1>     cmp ecx, 2
   110 00000850 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   111                              <1>     ;Else rax has the first sector of the Root Dir
   112 00000852 59                  <1>     pop rcx
   113                              <1>     return
    18                              <2> %%_ret:
    19 00000853 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> 
   116                              <1> getLastClusterInChain:
   117                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   118                              <1> ;Input: eax = Cluster to start searching at
   119                              <1> ;Output: eax = Last cluster in chain
   120                              <1> ;If input eax = 0, output eax = 0
   121 00000854 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   122                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000856 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   123 00000858 53                  <1>     push rbx
   124                              <1> .lp:
   125 00000859 89C3                <1>     mov ebx, eax
   126 0000085B E8C9010000          <1>     call readFAT
   127 00000860 7209                <1>     jc .exit
   128 00000862 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   129 00000867 75F0                <1>     jne .lp
   130 00000869 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   131                              <1> .exit: 
   132 0000086B 5B                  <1>     pop rbx
   133                              <1>     return
    18                              <2> %%_ret:
    19 0000086C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> 
   135                              <1> getNumberOfClustersInChain:
   136                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   137                              <1> ;Input: eax = Cluster to start searching at
   138                              <1> ;Output: eax = Number of clusters in the chain
   139                              <1> ;If input eax = 0, output eax = 0
   140 0000086D 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   141                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000086F 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   142 00000871 51                  <1>     push rcx
   143 00000872 31C9                <1>     xor ecx, ecx
   144                              <1> .lp:
   145 00000874 FFC1                <1>     inc ecx
   146 00000876 E8AE010000          <1>     call readFAT
   147 0000087B 7209                <1>     jc .exit
   148 0000087D 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   149 00000882 75F0                <1>     jne .lp
   150 00000884 89C8                <1>     mov eax, ecx    ;Get the count
   151                              <1> .exit: 
   152 00000886 59                  <1>     pop rcx
   153                              <1>     return
    18                              <2> %%_ret:
    19 00000887 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> getClusterInChain:
   156                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   157                              <1> ;If an EOC is encountered, then ecx will not be 
   158                              <1> ;Input: eax = Start Cluster to start searching from
   159                              <1> ;       ecx = Number of clusters to go forwards by;
   160                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   161                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   162                              <1> ;Also usual CF babble.
   163 00000888 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   164                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000088A 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 0000088C 53                  <1>     push rbx
   166 0000088D 67E30F              <1>     jecxz .exit
   167                              <1> .lp:
   168 00000890 89C3                <1>     mov ebx, eax
   169 00000892 E892010000          <1>     call readFAT
   170 00000897 7206                <1>     jc .exit
   171 00000899 FFC9                <1>     dec ecx
   172 0000089B 75F3                <1>     jnz .lp
   173 0000089D 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   174                              <1> .exit:
   175 0000089F 5B                  <1>     pop rbx
   176                              <1>     return
    18                              <2> %%_ret:
    19 000008A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> startNewChain:
   179                              <1> ;Working dpb must be set
   180                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   181                              <1> ;If CF=CY, hard error
   182 000008A1 53                  <1>     push rbx
   183 000008A2 56                  <1>     push rsi
   184 000008A3 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   185 000008A8 721A                <1>     jc .exit    ;Disk read error?
   186 000008AA 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   187 000008AF 7413                <1>     je .exit
   188 000008B1 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   189 000008B6 89C3                <1>     mov ebx, eax
   190 000008B8 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   191 000008BD 89D8                <1>     mov eax, ebx
   192 000008BF E8BC020000          <1>     call decrementFreeClusterCount
   193                              <1> .exit:
   194 000008C4 5E                  <1>     pop rsi
   195 000008C5 5B                  <1>     pop rbx
   196                              <1>     return
    18                              <2> %%_ret:
    19 000008C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> allocateClusters:
   199                              <1> ;Working dpb must be set. 
   200                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   201                              <1> ;       ebx = Cluster to link to the new cluster
   202                              <1> ;Output:    
   203                              <1> ;   CF=NC => Complete.
   204                              <1> ;   If eax = -1, then no more free clusters. 
   205                              <1> ;   CF=CY => Hard error, exit
   206                              <1> ; ecx always has number of allocated clusters
   207 000008C7 F8                  <1>     clc ;Always clear the flags before starting
   208 000008C8 53                  <1>     push rbx
   209 000008C9 56                  <1>     push rsi
   210 000008CA 51                  <1>     push rcx    ;Save tfr count on stack
   211 000008CB 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   212                              <1> .allocateLoop:
   213 000008CE E837000000          <1>     call findFreeCluster
   214 000008D3 722B                <1>     jc .exit
   215 000008D5 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   216 000008DA 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   217                              <1>     ;eax has first free cluster value to use
   218                              <1>     ;First we link the previous cluster to this cluster
   219 000008DC BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   220 000008E1 50                  <1>     push rax
   221 000008E2 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   222 000008E7 58                  <1>     pop rax
   223 000008E8 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   224 000008EA E891020000          <1>     call decrementFreeClusterCount
   225                              <1>     ;eax points to this allocated cluster
   226                              <1>     ;ebx points to the previous last cluster
   227 000008EF 89C6                <1>     mov esi, eax    ;New cluster as "value"
   228 000008F1 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   229 000008F3 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   230 000008F8 7206                <1>     jc .exit
   231 000008FA 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   232 000008FC FFC9                <1>     dec ecx ;One less cluster allocated
   233 000008FE 75CE                <1>     jnz .allocateLoop
   234                              <1> .exit:
   235 00000900 5E                  <1>     pop rsi ;Pop the tfr count into esi
   236 00000901 9C                  <1>     pushfq
   237 00000902 F7D9                <1>     neg ecx
   238 00000904 01F1                <1>     add ecx, esi
   239 00000906 9D                  <1>     popfq
   240 00000907 5E                  <1>     pop rsi
   241 00000908 5B                  <1>     pop rbx
   242                              <1>     return
    18                              <2> %%_ret:
    19 00000909 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> findFreeCluster:
   245                              <1> ;Walks the FAT to find a free cluster and returns the 
   246                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   247                              <1> ;Works on the workingDPB
   248                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   249 0000090A 53                  <1>     push rbx
   250 0000090B 52                  <1>     push rdx
   251 0000090C 55                  <1>     push rbp
   252 0000090D 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   253                              <1>     ;Use readFAT
   254                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   255                              <1>     ;If readFAT returns 0 then its a free cluster
   256 00000914 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   257                              <1> .fatLoop:
   258 00000919 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   259 0000091B E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   260 00000920 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   261 00000922 85C0                <1>     test eax, eax   ;Is this cluster free?
   262 00000924 7409                <1>     jz .exit    ;If yes, exit
   263 00000926 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   264 0000092A 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   265 0000092D 76EA                <1>     jbe .fatLoop
   266                              <1> .exit:
   267 0000092F 89D8                <1>     mov eax, ebx
   268 00000931 F8                  <1>     clc
   269                              <1> .exitFail:      ;Keep carry flag
   270 00000932 5D                  <1>     pop rbp
   271 00000933 5A                  <1>     pop rdx
   272 00000934 5B                  <1>     pop rbx
   273                              <1>     return
    18                              <2> %%_ret:
    19 00000935 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   274                              <1> 
   275                              <1> findFreeClusterData:
   276                              <1> ;Walks the FAT to find a free cluster and returns the 
   277                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   278                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   279                              <1> ; Both fields get filled in the workingDPB
   280                              <1> ;Works on the workingDPB
   281                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   282 00000936 53                  <1>     push rbx
   283 00000937 52                  <1>     push rdx
   284 00000938 55                  <1>     push rbp
   285 00000939 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   286 00000940 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   287                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   288 00000944 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   289                              <1>     ;Use readFAT
   290                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   291                              <1>     ;If readFAT returns 0 then its a free cluster
   292 0000094B B802000000          <1>     mov eax, 2  ;Start with cluster 2
   293 00000950 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   294                              <1> .fatLoop:
   295 00000953 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   296 00000955 E8CF000000          <1>     call readFAT
   297 0000095A 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   298 0000095C 85C0                <1>     test eax, eax   ;Is this cluster free?
   299 0000095E 750C                <1>     jne .fatProceed
   300 00000960 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   301 00000967 7413                <1>     je .fatFirst
   302 00000969 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   303                              <1> .fatProceed:
   304 0000096C 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   305 00000970 39D0                <1>     cmp eax, edx
   306 00000972 76DF                <1>     jbe .fatLoop
   307                              <1> .exit:
   308 00000974 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   309 00000977 F8                  <1>     clc
   310                              <1> .exitFail:      ;Keep carry flag
   311 00000978 5D                  <1>     pop rbp
   312 00000979 5A                  <1>     pop rdx
   313 0000097A 5B                  <1>     pop rbx
   314                              <1>     return
    18                              <2> %%_ret:
    19 0000097B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   315                              <1> .fatFirst:
   316                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   317 0000097C 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   318 0000097F 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   319 00000986 74E4                <1>     je .fatProceed
   320 00000988 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   321                              <1> 
   322                              <1> getNextSectorOfFile:
   323                              <1> ;This function will read the next sector for a file into a buffer.
   324                              <1> ;If the next sector to be read lives in the next cluster, it will update
   325                              <1> ; the vars appropriately
   326                              <1> ;
   327                              <1> ;Input: rbp = dpb pointer
   328                              <1> ;Output:
   329                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   330                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   331                              <1> ;       CF=CY => Critical error occurred and was FAILed
   332                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   333                              <1> ; next cluster and read first sector 
   334                              <1>     ;Check if we need to go to next cluster
   335 0000098A 8A05(4CC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   336 00000990 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   337 00000993 7416                <1>     je .gotoNextCluster
   338                              <1>     ;Goto next sector in same cluster
   339 00000995 FE05(4CC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   340 0000099B 48FF05(4DC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   341 000009A2 488B05(4DC70300)    <1>     mov rax, qword [currSectD]
   342                              <1> .exitOK:
   343 000009A9 F8                  <1>     clc
   344                              <1> .exitFail:
   345                              <1>     return
    18                              <2> %%_ret:
    19 000009AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   346                              <1> .gotoNextCluster:
   347 000009AB 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   348 000009B1 E873000000          <1>     call readFAT
   349 000009B6 72F2                <1>     jc .exitFail
   350                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   351 000009B8 3DFFFFFFFF          <1>     cmp eax, -1
   352 000009BD 74EA                <1>     je .exitOK
   353                              <1> ;Update the new cluster and sector information
   354 000009BF 8905(44C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   355 000009C5 FF05(40C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   356 000009CB E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   357 000009D0 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save it
   358 000009D7 C605(4CC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   359 000009DE EBC9                <1>     jmp short .exitOK
   360                              <1> 
   361                              <1> unlinkFAT:
   362                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   363                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   364                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   365                              <1> ; cluster must be set to EOC before this proc is called.
   366                              <1> ;Stops at first invalid cluster number.
   367                              <1> ;
   368                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   369                              <1> ;       rbp = Current DPB to use for disk
   370                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   371                              <1> 
   372 000009E0 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   373 000009E1 56                  <1>     push rsi
   374 000009E2 E813000000          <1>     call truncateFAT    ;Preserved eax
   375 000009E7 720E                <1>     jc .exit
   376 000009E9 31F6                <1>     xor esi, esi  ;Free first cluster too
   377 000009EB E8DA000000          <1>     call writeFAT
   378 000009F0 7205                <1>     jc .exit
   379 000009F2 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   380                              <1> .exit:
   381 000009F7 5E                  <1>     pop rsi
   382 000009F8 58                  <1>     pop rax
   383                              <1>     return
    18                              <2> %%_ret:
    19 000009F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> truncateFAT:
   386                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   387                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   388                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   389                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   390                              <1> ;Stops at first invalid cluster number.
   391                              <1> ;
   392                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   393                              <1> ;       rbp = Current DPB to use for disk
   394                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   395 000009FA 50                  <1>     push rax
   396 000009FB 53                  <1>     push rbx
   397 000009FC 51                  <1>     push rcx
   398 000009FD 56                  <1>     push rsi
   399 000009FE 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   400                              <1> .lp:
   401 00000A00 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   402 00000A05 721D                <1>     jc .exit    ;Error exit
   403 00000A07 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   404 00000A09 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   405 00000A0A 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   406 00000A0C E8B9000000          <1>     call writeFAT
   407 00000A11 7211                <1>     jc .exit    ;Error exit
   408 00000A13 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   409 00000A18 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   410 00000A1E 7404                <1>     je .exit
   411 00000A20 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   412 00000A22 EBDC                <1>     jmp short .lp
   413                              <1> .exit:
   414 00000A24 5E                  <1>     pop rsi
   415 00000A25 59                  <1>     pop rcx
   416 00000A26 5B                  <1>     pop rbx
   417 00000A27 58                  <1>     pop rax
   418                              <1>     return
    18                              <2> %%_ret:
    19 00000A28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> readFAT:
   420                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   421                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   422                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   423                              <1> ;       rbp = DPB
   424                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   425                              <1> ;If carry set, getBuffer failed!
   426 00000A29 53                  <1>     push rbx
   427 00000A2A 51                  <1>     push rcx
   428 00000A2B 52                  <1>     push rdx
   429 00000A2C 57                  <1>     push rdi
   430 00000A2D 55                  <1>     push rbp
   431 00000A2E 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   432 00000A30 E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   433                              <1>     ;and FAT type in ecx
   434 00000A35 E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   435 00000A3A 7237                <1>     jc .exitFail
   436                              <1>     ;Check if FAT 12, 16, 32
   437 00000A3C 85C9                <1>     test ecx, ecx
   438 00000A3E 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   439 00000A40 F7C101000000        <1>     test ecx, 1
   440 00000A46 7413                <1>     jz .goToNextClusterFat32
   441                              <1>     ;Here we handle FAT16
   442 00000A48 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   443 00000A4D 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   444 00000A52 721E                <1>     jb .exit
   445 00000A54 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   446 00000A59 EB17                <1>     jmp short .exit
   447                              <1> .goToNextClusterFat32:
   448 00000A5B 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   449 00000A5F 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   450 00000A64 7207                <1>     jb .validCluster32   
   451 00000A66 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   452 00000A6B EB05                <1>     jmp short .exit
   453                              <1> .validCluster32:
   454 00000A6D 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   455                              <1> .exit:
   456 00000A72 F8                  <1>     clc
   457                              <1> .exitFail:
   458 00000A73 5D                  <1>     pop rbp
   459 00000A74 5F                  <1>     pop rdi
   460 00000A75 5A                  <1>     pop rdx
   461 00000A76 59                  <1>     pop rcx
   462 00000A77 5B                  <1>     pop rbx
   463                              <1>     return
    18                              <2> %%_ret:
    19 00000A78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   464                              <1> .gotoNextClusterFat12:
   465                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   466                              <1> ;eax has the sector number of the FAT
   467                              <1> ;edx has byte offset into the sector
   468                              <1> ;edi has current cluster number
   469                              <1> ;rbx has ptr to buffer header
   470 00000A79 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   471 00000A7F 742E                <1>     jz .gotoNextClusterFat12Even
   472                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   473 00000A81 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   474 00000A85 29D1                <1>     sub ecx, edx
   475 00000A87 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   476 00000A89 751A                <1>     jnz .gotoNextClusterFat12NoCross
   477                              <1>     ;Boundary cross, build entry properly
   478 00000A8B 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   479 00000A90 FFC0                <1>     inc eax ;Get next FAT sector
   480 00000A92 53                  <1>     push rbx
   481 00000A93 E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   482 00000A98 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   483 00000A99 72D8                <1>     jc .exitFail
   484 00000A9B 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   485 00000A9D 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   486 00000AA0 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   487 00000AA3 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   488                              <1> .gotoNextClusterFat12NoCross:
   489 00000AA5 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   490 00000AAA C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   491 00000AAD EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   492                              <1> .gotoNextClusterFat12Even:
   493                              <1>     ;Here the cluster is even and can't cross a sector boundary
   494 00000AAF 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   495 00000AB4 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   496                              <1> .checkIfLastFAT12Cluster:
   497 00000AB9 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   498 00000ABE 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   499 00000AC0 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   500 00000AC5 E9A8FFFFFF          <1>     jmp .exit
   501                              <1> 
   502                              <1> writeFAT:
   503                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   504                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   505                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   506                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   507                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   508 00000ACA 53                  <1>     push rbx
   509 00000ACB 51                  <1>     push rcx
   510 00000ACC 52                  <1>     push rdx
   511 00000ACD 56                  <1>     push rsi
   512 00000ACE 57                  <1>     push rdi
   513 00000ACF 55                  <1>     push rbp
   514 00000AD0 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   515 00000AD2 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   516                              <1>     ;and FAT type in ecx
   517 00000AD7 E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   518 00000ADC 7223                <1>     jc .exitFail
   519                              <1>     ;Check if FAT 12, 16, 32
   520 00000ADE 85C9                <1>     test ecx, ecx
   521 00000AE0 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   522 00000AE2 F7C101000000        <1>     test ecx, 1
   523 00000AE8 7407                <1>     jz .goToNextClusterFat32
   524                              <1>     ;Here we handle FAT16
   525 00000AEA 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   526 00000AEF EB0A                <1>     jmp short .exit
   527                              <1> .goToNextClusterFat32:
   528 00000AF1 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   529 00000AF7 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   530                              <1> .exit:
   531 00000AFB E881FAFFFF          <1>     call markBufferDirty
   532 00000B00 F8                  <1>     clc
   533                              <1> .exitFail:
   534 00000B01 5D                  <1>     pop rbp
   535 00000B02 5F                  <1>     pop rdi
   536 00000B03 5E                  <1>     pop rsi
   537 00000B04 5A                  <1>     pop rdx
   538 00000B05 59                  <1>     pop rcx
   539 00000B06 5B                  <1>     pop rbx
   540                              <1>     return
    18                              <2> %%_ret:
    19 00000B07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> .gotoNextClusterFat12:
   542                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   543                              <1> ;eax has the sector number of the FAT
   544                              <1> ;edx has byte offset into the sector
   545                              <1> ;edi has current cluster number
   546                              <1> ;rbx has ptr to buffer header
   547 00000B08 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   548 00000B0E F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   549 00000B14 7445                <1>     jz .gotoNextClusterFat12Even
   550                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   551 00000B16 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   552 00000B1A 29D1                <1>     sub ecx, edx
   553 00000B1C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   554 00000B1E 752C                <1>     jnz .gotoNextClusterFat12NoCross
   555                              <1>     ;Boundary cross, build entry properly
   556                              <1>     ;Replace the high nybble of the low byte 
   557                              <1>     ;breakpoint
   558 00000B20 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   559 00000B25 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   560 00000B2B C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   561 00000B2E 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   562 00000B30 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   563 00000B33 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   564 00000B37 E845FAFFFF          <1>     call markBufferDirty
   565 00000B3C FFC0                <1>     inc eax ;Get next FAT sector
   566 00000B3E E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   567 00000B43 72BC                <1>     jc .exitFail
   568 00000B45 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   569 00000B47 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   570 00000B4A EBAF                <1>     jmp short .exit
   571                              <1> .gotoNextClusterFat12NoCross:
   572 00000B4C 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   573 00000B51 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   574 00000B56 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   575 00000B59 EB0A                <1>     jmp short .fat12common
   576                              <1> .gotoNextClusterFat12Even:
   577                              <1>     ;Here the cluster is even and can't cross a sector boundary
   578 00000B5B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   579 00000B60 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   580                              <1> .fat12common:
   581 00000B65 09F0                <1>     or eax, esi     ;Add the new entry bits
   582 00000B67 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   583 00000B6C E98AFFFFFF          <1>     jmp .exit
   584                              <1> 
   585                              <1> incrementFreeClusterCount:
   586                              <1> ;Cluster Deallocated Function
   587 00000B71 9C                  <1>     pushfq
   588 00000B72 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   589 00000B79 7403                <1>     je .exit
   590 00000B7B FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   591                              <1> .exit:
   592 00000B7E 9D                  <1>     popfq
   593                              <1>     return
    18                              <2> %%_ret:
    19 00000B7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   594                              <1> decrementFreeClusterCount:
   595                              <1> ;Cluster Allocated Function
   596 00000B80 9C                  <1>     pushfq
   597 00000B81 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   598 00000B88 7403                <1>     je .exit
   599 00000B8A FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   600                              <1> .exit:
   601 00000B8D 9D                  <1>     popfq
   602                              <1>     return
    18                              <2> %%_ret:
    19 00000B8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FAT/findfile.asm"
    28                              <1> ;Generic Find First and Find Next functions here
    29                              <1> findNextMain:
    30 00000B8F 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    31 00000B96 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    32 00000B99 7408                <1>     jz .notNet
    33 00000B9B B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    34 00000BA0 CD4F                <1>     int 4Fh
    35                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000BA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                              <1> .notNet:
    37 00000BA3 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    38 00000BA5 FEC0                <1>     inc al  ;Convert into 1 based number
    39 00000BA7 E8885D0000          <1>     call dosCrit1Enter
    40 00000BAC E84C590000          <1>     call setDrive   ;Set CDS and current drive vars
    41 00000BB1 720C                <1>     jc .critError   ;Return error if this fails
    42 00000BB3 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
    43 00000BBA E874560000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    44                              <1> .critError:
    45 00000BBF E87A5D0000          <1>     call dosCrit1Exit
    46                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000BC4 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    47 00000BC6 E801000000          <1>     call searchMoreDir
    48                              <1>     return
    18                              <2> %%_ret:
    19 00000BCB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    49                              <1> searchMoreDir:
    50                              <1> ;The three directory variables are set up from the ffblock. 
    51                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    52                              <1> ;Current DTA is also used to contain the ff block address
    53                              <1> ;All registers can be trashed
    54 00000BCC 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    55                              <1>     ;First setup dirClustA and dirSect vars
    56 00000BD3 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
    57 00000BDA 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    58 00000BDD 8805(ECC60300)      <1>     mov byte [searchAttr], al   ;And save it
    59 00000BE3 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    60 00000BE6 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    61 00000BEC 8905(70C70300)      <1>     mov dword [dirClustPar], eax
    62                              <1>     ;Get number of 32 byte entries in a sector
    63 00000BF2 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    64 00000BF5 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    65                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    66 00000BFB C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    67                              <1>     ;Now get bytes per cluster
    68 00000BFE 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    69 00000C00 813D(74C70300)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    69 00000C08 0000                <1>
    70 00000C0A 0F8496000000        <1>     je .oldFat
    71 00000C10 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    72 00000C14 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000C18 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    74 00000C1A 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    75 00000C1C 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    76 00000C1E 31D2                <1>     xor edx, edx
    77 00000C20 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    78                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    79                              <1>     ;edx has byte offset into cluster (or Root dir)
    80 00000C22 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    81                              <1>     ;Now compute sector offset into cluster
    82 00000C24 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    83 00000C28 89D0                <1>     mov eax, edx    ;Move offset into cluster
    84 00000C2A 31D2                <1>     xor edx, edx
    85 00000C2C F7F1                <1>     div ecx 
    86                              <1>     ;eax now has sector offset into cluster
    87                              <1>     ;edx has byte offset into sector 
    88 00000C2E 668905(78C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    89 00000C35 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    90                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    91 00000C3B 89D9                <1>     mov ecx, ebx
    92 00000C3D 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    93                              <1> .fatlp:
    94 00000C40 E8E4FDFFFF          <1>     call readFAT
    95 00000C45 3DFFFFFFFF          <1>     cmp eax, -1
    96 00000C4A 7477                <1>     je .errorExit
    97 00000C4C FFC9                <1>     dec ecx
    98 00000C4E 75F0                <1>     jnz .fatlp
    99 00000C50 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
   100                              <1> .skipFatWalk:
   101 00000C56 488D05AA000000      <1>     lea rax, searchDir.nextEp
   102 00000C5D 50                  <1>     push rax    ;Push the return address onto stack
   103 00000C5E 8B05(74C70300)      <1>     mov eax, dword [dirClustA]
   104 00000C64 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   105 00000C69 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   106 00000C70 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   107                              <1> .common:
   108 00000C73 E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   109 00000C78 0F8224010000        <1>     jc searchDir.hardError
   110 00000C7E E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   111 00000C83 E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
   112 00000C88 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   113 00000C8E 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
   114 00000C93 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   115 00000C95 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   116 00000C98 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   117                              <1>     ;We continue AS IF this entry was bad
   118                              <1>     ;Now setup al as upon normal entry 
   119 00000C9B 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   120 00000CA1 E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   121                              <1>     ;The return address on the stack will return to the ep's pushed
   122                              <1> .oldFat:
   123                              <1> ;Old FAT 12/16 root dirs fall thru here only
   124                              <1> ;esi = byte ptr in root dir of entry
   125 00000CA6 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
   126 00000CAD 50                  <1>     push rax    ;Push return address onto the stack
   127 00000CAE 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   128 00000CB2 31D2                <1>     xor edx, edx
   129 00000CB4 96                  <1>     xchg esi, eax
   130 00000CB5 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   131                              <1>     ;eax = Sector number 
   132                              <1>     ;edx = Byte offset within the sector
   133 00000CB7 668905(78C70300)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   134 00000CBE 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   135 00000CC1 EBB0                <1>     jmp short .common
   136                              <1> .errorExit:
   137 00000CC3 F9                  <1>     stc
   138                              <1>     return
    18                              <2> %%_ret:
    19 00000CC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> searchDir:
   140                              <1> ;Called in a level 1 critical section. 
   141                              <1> ;The directory variables are set and fcbName has the pattern to match
   142                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   143                              <1> ;All registers can be trashed
   144                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   145                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   146                              <1> 
   147                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   148                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   149 00000CC5 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   150 00000CCC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   151 00000CD2 7408                <1>     jz .notNet
   152 00000CD4 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   153 00000CD9 CD4F                <1>     int 4fh
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000CDB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .notNet:
   156 00000CDC 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   157 00000CE3 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   158 00000CE9 85C0                <1>     test eax, eax
   159 00000CEB 747E                <1>     jz .oldRoot
   160 00000CED E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   161                              <1> .sectorLoop:
   162 00000CF2 E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   163 00000CF7 0F82A5000000        <1>     jc .hardError
   164 00000CFD E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   165                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   166 00000D02 E8B2000000          <1>     call findInBuffer
   167                              <1> .nextEp:
   168                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000D07 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   169 00000D09 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   170                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   171                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   172                              <1>     ;IF however, the next cluster is -1, then we return fail
   173 00000D0F 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   174 00000D15 8905(44C70300)      <1>     mov dword [currClustD], eax
   175 00000D1B 668B05(78C70300)    <1>     mov ax, word [dirSect]
   176 00000D22 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   177 00000D28 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   178 00000D2C 488905(4DC70300)    <1>     mov qword [currSectD], rax  
   179 00000D33 C705(40C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   179 00000D3B 0000                <1>
   180 00000D3D E848FCFFFF          <1>     call getNextSectorOfFile
   181 00000D42 725E                <1>     jc .hardError
   182 00000D44 3DFFFFFFFF          <1>     cmp eax, -1
   183 00000D49 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   184 00000D4B 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector
   185 00000D52 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   186 00000D58 3B05(44C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   187 00000D5E 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   188 00000D60 66C705(78C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   188 00000D68 00                  <1>
   189 00000D69 EB87                <1>     jmp short .sectorLoop 
   190                              <1> 
   191                              <1> .oldRoot:
   192                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   193                              <1> ; one large contiguous cluster.
   194                              <1> .oldSectorLp:
   195 00000D6B 0FB705(78C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   196 00000D72 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   197 00000D75 E8B4F9FFFF          <1>     call getBufForDOS
   198 00000D7A 7226                <1>     jc .hardError
   199 00000D7C E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   200 00000D81 E833000000          <1>     call findInBuffer
   201                              <1> .oldNextEP:
   202                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00000D86 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00000D88 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   203 00000D89 7413                <1>     jz .fnfError
   204 00000D8B 66FF05(78C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   205 00000D92 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   206 00000D96 3905(7AC70300)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   207 00000D9C 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   208                              <1> .fnfError:
   209 00000D9E B012                <1>     mov al, errNoFil
   210 00000DA0 F9                  <1>     stc
   211                              <1>     return
    18                              <2> %%_ret:
    19 00000DA1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212                              <1> .hardError:
   213 00000DA2 B0FF                <1>     mov al, -1
   214                              <1>     return
    18                              <2> %%_ret:
    19 00000DA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> adjustDosDirBuffer:
   216 00000DA5 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   217 00000DA9 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   218 00000DAD 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   219 00000DB1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   220 00000DB5 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   221                              <1>     return
    18                              <2> %%_ret:
    19 00000DB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> 
   223                              <1> findInBuffer:
   224                              <1> ;Input:  rsi = Sector buffer data area
   225                              <1> ;Output: CF=CY => No entries found
   226                              <1> ;        ZF=NE => Keep searching in subsequent directories
   227                              <1> ;        ZF=ZE => End of directory reached early, stop
   228                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   229                              <1> ;        rsi = Points to start of the disk buffer directory entry
   230 00000DB9 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   231 00000DBE 8A05(ECC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   232 00000DC4 E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   233                              <1> .searchMainLp:
   234                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   235 00000DC9 8A25(F8C60300)      <1>     mov ah, byte [delChar]
   236 00000DCF 803E00              <1>     cmp byte [rsi], 00h
   237 00000DD2 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   238 00000DD4 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   239 00000DD6 750F                <1>     jne .notLookingForEmpty
   240                              <1> .emptySlot:
   241                              <1> ;Here we check if we are looking for an empty directory entry or
   242                              <1> ; we have reached the end of the file (if the first byte is 00h)
   243                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   244 00000DD8 3A25(C9C60300)      <1>     cmp ah, byte [fcbName] 
   245                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DDE 74D8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   246                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   247 00000DE0 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   248 00000DE3 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   249 00000DE5 F9                  <1>     stc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00000DE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> .notLookingForEmpty:
   252 00000DE7 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   253 00000DEA 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   254 00000DED 803D(5DC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   255 00000DF4 7434                <1>     je .exclusiveDir
   256 00000DF6 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   257 00000DF8 7437                <1>     je .volFile ;If so, go here
   258 00000DFA 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   259 00000DFD 7414                <1>     je .nextEntry
   260 00000DFF 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   261 00000E01 7710                <1>     ja .nextEntry
   262                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   263                              <1> .scanName:
   264 00000E03 56                  <1>     push rsi
   265 00000E04 488D3D(C9C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   266 00000E0B E83E000000          <1>     call .nameCompare
   267 00000E10 5E                  <1>     pop rsi
   268 00000E11 7424                <1>     je .searchEntryFound
   269                              <1> .nextEntry:
   270                              <1> ;Go to next entry
   271 00000E13 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   272 00000E1A FF05(7AC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   273 00000E20 FFC9                <1>     dec ecx
   274 00000E22 75A5                <1>     jnz .searchMainLp
   275                              <1> .badExit:
   276 00000E24 31C0                <1>     xor eax, eax
   277 00000E26 FFC0                <1>     inc eax ;Clear ZF
   278 00000E28 F9                  <1>     stc
   279                              <1>     return
    18                              <2> %%_ret:
    19 00000E29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   280                              <1> .exclusiveDir:
   281                              <1> ;Used when going down a path, dir bit simply need be set
   282 00000E2A F6C410              <1>     test ah, dirDirectory
   283 00000E2D 75D4                <1>     jnz .scanName
   284 00000E2F EBE2                <1>     jmp short .nextEntry
   285                              <1> 
   286                              <1> .volFile:
   287 00000E31 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   288 00000E33 74CE                <1>     je .scanName       ;If so, scan the name agrees
   289 00000E35 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   290                              <1> 
   291                              <1> .searchEntryFound:
   292                              <1> ;Here a good entry was found!
   293 00000E37 56                  <1>     push rsi
   294 00000E38 57                  <1>     push rdi
   295 00000E39 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   296 00000E3B 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   297 00000E42 B904000000          <1>     mov ecx, 32/8
   298 00000E47 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   299 00000E4A 5F                  <1>     pop rdi
   300 00000E4B 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   301 00000E4C F8                  <1>     clc
   302                              <1>     return
    18                              <2> %%_ret:
    19 00000E4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> 
   304                              <1> .nameCompare:
   305                              <1> ;Input: rsi = source string
   306                              <1> ;       rdi = string template to compare against
   307                              <1> ;Output: ZF=ZE => Strings are ok
   308                              <1> ;        ZF=NZ => Strings not ok
   309                              <1> ;Accepts wildcards. Trashes al
   310 00000E4E 51                  <1>     push rcx
   311 00000E4F 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   312                              <1> .ncLp:
   313 00000E51 81F90B000000        <1>     cmp ecx, 11
   314 00000E57 740B                <1>     je .ncExit
   315 00000E59 FFC1                <1>     inc ecx
   316 00000E5B A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   317 00000E5C 74F3                <1>     je .ncLp    ;If equal, keep going
   318 00000E5E 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   319 00000E62 74ED                <1>     je .ncLp
   320                              <1> .ncExit:
   321 00000E64 59                  <1>     pop rcx
   322                              <1>     return
    18                              <2> %%_ret:
    19 00000E65 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .getNumberOfEntries:
   324 00000E66 55                  <1>     push rbp
   325 00000E67 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   326 00000E6E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   327 00000E72 C1E905              <1>     shr ecx, 5  ;Divide by 32
   328 00000E75 5D                  <1>     pop rbp
   329                              <1>     return
    18                              <2> %%_ret:
    19 00000E76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   330                              <1> adjustSearchAttr:
   331                              <1> ;Converts the byte to a system only if the bit is set
   332                              <1> ;Input: eax = User selected search mask
   333                              <1> ;Output: eax = Modified search mask
   334 00000E77 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   335 00000E7C A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   336                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E81 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   337 00000E83 B808000000          <1>     mov eax, dirVolumeID
   338                              <1>     return
    18                              <2> %%_ret:
    19 00000E88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> asciiToFCB:
   341                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   342                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   343                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   344                              <1> ;Name is space padded.
   345                              <1> ;Input: rsi = ASCII string buffer
   346                              <1> ;       rdi = FCB name buffer
   347                              <1> ;Output: al = Char that terminated the source string 
   348 00000E89 53                  <1>     push rbx    
   349 00000E8A 57                  <1>     push rdi
   350 00000E8B B90B000000          <1>     mov ecx, 11
   351 00000E90 B020                <1>     mov al, " "
   352 00000E92 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   353 00000E94 5F                  <1>     pop rdi
   354 00000E95 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   355                              <1> .processName:
   356 00000E98 AC                  <1>     lodsb   ;Get the char in al
   357 00000E99 E861570000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   358 00000E9E 84C0                <1>     test al, al
   359 00000EA0 742D                <1>     jz .exit
   360 00000EA2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   361 00000EA4 740E                <1>     je .extSpace
   362 00000EA6 3C2E                <1>     cmp al, "."
   363 00000EA8 7413                <1>     je .ext
   364                              <1>     ;Test if the char is valid
   365 00000EAA E891580000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   366 00000EAF 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   367 00000EB1 AA                  <1>     stosb   ;Store the char
   368 00000EB2 EBE4                <1>     jmp short .processName
   369                              <1> .extSpace:
   370                              <1> ;Now we scan for a period in the name
   371 00000EB4 AC                  <1>     lodsb   ;Get a char and increase rsi
   372 00000EB5 84C0                <1>     test al, al
   373 00000EB7 7416                <1>     jz .exit
   374 00000EB9 3C2E                <1>     cmp al, "."     ;If al is not a period...
   375 00000EBB 75F7                <1>     jne .extSpace   ; keep searching
   376                              <1> .ext:
   377 00000EBD 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   378                              <1> .processExt:
   379 00000EC1 AC                  <1>     lodsb
   380 00000EC2 84C0                <1>     test al, al
   381 00000EC4 7409                <1>     jz .exit
   382 00000EC6 3C20                <1>     cmp al, " "
   383 00000EC8 7405                <1>     je .exit
   384 00000ECA AA                  <1>     stosb
   385 00000ECB EBF4                <1>     jmp short .processExt
   386                              <1> .exitBadChar:
   387 00000ECD 30C0                <1>     xor al, al  ;Return a null terminator
   388                              <1> .exit:
   389 00000ECF 5B                  <1>     pop rbx
   390                              <1>     return
    18                              <2> %%_ret:
    19 00000ED0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   391                              <1> 
   392                              <1> FCBToAsciiz:
   393                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   394                              <1> ;Name is space padded too
   395                              <1> ;Input: rsi = FCB name buffer
   396                              <1> ;       rdi = ASCIIZ string buffer
   397 00000ED1 B908000000          <1>     mov ecx, 8
   398 00000ED6 F3A4                <1>     rep movsb   ;Move the name over
   399                              <1> .scanNameSpace:
   400 00000ED8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   401 00000EDC 750D                <1>     jne .ext
   402 00000EDE 48FFCF              <1>     dec rdi
   403 00000EE1 FFC1                <1>     inc ecx
   404 00000EE3 81F908000000        <1>     cmp ecx, 8
   405 00000EE9 72ED                <1>     jb .scanNameSpace
   406                              <1> .ext:
   407 00000EEB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   408 00000EF0 7506                <1>     jne .validExt
   409 00000EF2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   410 00000EF6 7415                <1>     je .exit
   411                              <1> .validExt:
   412 00000EF8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   413 00000EFA AA                  <1>     stosb
   414 00000EFB B903000000          <1>     mov ecx, 3
   415 00000F00 F3A4                <1>     rep movsb   ;Move the three extension chars over
   416                              <1> .scanExtSpace:
   417 00000F02 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   418 00000F06 7505                <1>     jne .exit
   419 00000F08 48FFCF              <1>     dec rdi
   420 00000F0B EBF5                <1>     jmp short .scanExtSpace
   421                              <1> .exit:
   422 00000F0D 31C0                <1>     xor eax, eax
   423 00000F0F AA                  <1>     stosb   ;Store a null at the end
   424                              <1>     return
    18                              <2> %%_ret:
    19 00000F10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> setupFFBlock:
   427                              <1> ;Sets up the find first block for the search
   428                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   429 00000F11 50                  <1>     push rax
   430 00000F12 53                  <1>     push rbx
   431 00000F13 56                  <1>     push rsi
   432 00000F14 57                  <1>     push rdi
   433 00000F15 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   434 00000F18 8A05(ECC60300)      <1>     mov al, byte [searchAttr]
   435 00000F1E 243F                <1>     and al, 3Fh ;Clear upper two bits
   436 00000F20 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   437 00000F23 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   438 00000F2A 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   439                              <1>     ;xchg bx, bx
   440 00000F2C 488D35(C9C60300)    <1>     lea rsi, fcbName
   441 00000F33 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   442 00000F37 57                  <1>     push rdi
   443 00000F38 48B820202020202020- <1>     mov rax, "        "
   443 00000F41 20                  <1>
   444 00000F42 48AB                <1>     stosq
   445 00000F44 66AB                <1>     stosw
   446 00000F46 AA                  <1>     stosb
   447 00000F47 5F                  <1>     pop rdi
   448 00000F48 48A5                <1>     movsq   ;Move 8 chars
   449 00000F4A 66A5                <1>     movsw   ;Move 2 chars
   450 00000F4C A4                  <1>     movsb   ;Move the final char
   451                              <1> 
   452 00000F4D 8B05(7AC70300)      <1>     mov eax, dword [dirEntry]
   453 00000F53 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   454 00000F56 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
   455 00000F5C 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   456 00000F5F 8A05(59C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   457 00000F65 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   458 00000F68 8B05(64C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   459 00000F6E 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   460 00000F71 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   461 00000F77 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   462 00000F7A 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   463 00000F7E 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   464 00000F85 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   465                              <1> 
   466 00000F8A 5F                  <1>     pop rdi
   467 00000F8B 5E                  <1>     pop rsi
   468 00000F8C 5B                  <1>     pop rbx
   469 00000F8D 58                  <1>     pop rax
   470                              <1>     return
    18                              <2> %%_ret:
    19 00000F8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   471                              <1> 
   472                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   473                              <1> ;Gets the drive letter for the path in al
   474                              <1> ;Input: rsi = Buffer to process
   475                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   476                              <1> ;       ZF=ZE and al = 0 => Null path
   477                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   478                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   479                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   480 00000F8F 30C0                <1>     xor al, al
   481 00000F91 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   482                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F94 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   483 00000F96 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   484                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F9A 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   485 00000F9C 66AD                <1>     lodsw   ;Get first word, rsi += 2
   486                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   487 00000F9E 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   488 00000FA0 2C60                <1>     sub al, 60h
   489                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FA2 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   490 00000FA4 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   491                              <1>     return
    18                              <2> %%_ret:
    19 00000FA6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   492                              <1> canonicaliseFileName:
   493                              <1> ;Always trying to build and qualify a full pathname
   494                              <1> ;Does getPath without hitting the disk
   495 00000FA7 B0FF                <1>     mov al, -1
   496 00000FA9 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   497 00000FAF 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   498 00000FB5 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   499 00000FBC FEC0                <1>     inc al  ;make al = 0
   500 00000FBE 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   501 00000FC4 E854000000          <1>     call getPath.epAlt
   502                              <1>     retc    ;Return if an error
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FC9 72DB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   503 00000FCB 48FFCF              <1>     dec rdi ;Point to what should be the null char
   504 00000FCE 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   505 00000FD2 7503                <1>     jne .storeNull
   506 00000FD4 B05C                <1>     mov al, "\"
   507 00000FD6 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   508                              <1> .storeNull:
   509 00000FD7 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   510                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FDA 74CA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   511 00000FDC C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   512                              <1>     return
    18                              <2> %%_ret:
    19 00000FDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   513                              <1> getDirPathNoCanon:
   514 00000FE0 31C0                <1>     xor eax, eax
   515 00000FE2 4889FE              <1>     mov rsi, rdi
   516 00000FE5 EB1B                <1>     jmp short getPath.noCanon
   517                              <1> getFilePathNoCanon:
   518                              <1> ;Used when the path is constructed internally (as for FCB functions)
   519                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   520 00000FE7 B0FF                <1>     mov al, -1
   521 00000FE9 4889FE              <1>     mov rsi, rdi
   522 00000FEC EB14                <1>     jmp short getPath.noCanon
   523                              <1> getDirPath:
   524 00000FEE 30C0                <1>     xor al, al   ;Set to Directory
   525 00000FF0 EB02                <1>     jmp short getPath
   526                              <1> getFilePath:
   527 00000FF2 B0FF                <1>     mov al, -1  ;Set to File
   528                              <1> getPath:
   529                              <1> ;Determines whether the path is spliced or not and transfers the chars
   530                              <1> ; from the user buffer into an internal buffer, normalising them.
   531                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   532                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   533                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   534                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   535                              <1> ; we let it do its thing and return.
   536                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   537                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   538                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   539                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   540                              <1> ; (converted from using machine name by the net client program).
   541                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   542                              <1> ; was good.
   543                              <1> ;Called with:
   544                              <1> ; rdi = SDA Buffer for filename
   545                              <1> ; rsi = Potentially unqualified filename
   546                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   547 00000FF4 50                  <1>     push rax
   548 00000FF5 57                  <1>     push rdi
   549 00000FF6 E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   550 00000FFB 5F                  <1>     pop rdi
   551 00000FFC 58                  <1>     pop rax
   552 00000FFD 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   553                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001000 72DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   554                              <1> .noCanon:
   555 00001002 8805(5DC40300)      <1>     mov byte [fileDirFlag], al  
   556 00001008 B0FF                <1>     mov al, -1
   557 0000100A 8805(F1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   558 00001010 48893D(12C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   559 00001017 8805(22C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   560                              <1> .epAlt:
   561 0000101D C605(F5C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   562 00001024 C605(F4C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   563 0000102B F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   564 00001032 7428                <1>     jz .notServer
   565                              <1>     ;In this case, the client network program will have correctly
   566                              <1>     ; substituted the drive letter for the path before making the request.
   567                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   568 00001034 E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   570                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   571                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   572                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   573                              <1>     ; these requirements.
   574                              <1>     ;When a server request is made, the request can ONLY be for a file on
   575                              <1>     ; a CDS drive.
   576 00001039 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   577 0000103B 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   578 00001042 50                  <1>     push rax
   579 00001043 E8EC580000          <1>     call dosCrit1Enter
   580 00001048 E8E6510000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   581 0000104D E8EC580000          <1>     call dosCrit1Exit
   582 00001052 58                  <1>     pop rax
   583 00001053 0F8382000000        <1>     jnc .driveOk
   584                              <1> .serverExit:
   585 00001059 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   586                              <1>     return
    18                              <2> %%_ret:
    19 0000105B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   587                              <1> .notServer:
   588                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   589 0000105C 48C705(02C70300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   589 00001064 FFFFFF              <1>
   590 00001067 B823110000          <1>     mov eax, 1123h
   591 0000106C CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   592                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000106E 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   593 00001070 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   594 00001075 9C                  <1>     pushfq  ;Save the flag state on stack
   595 00001076 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   596 00001077 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   597 0000107A E874550000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   598 0000107F 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   599 00001081 E86D550000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   600 00001086 7543                <1>     jnz .notNet
   601 00001088 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   602 0000108A 753F                <1>     jne .notNet
   603 0000108C 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   604 0000108D 9D                  <1>     popfq
   605 0000108E 66AD                <1>     lodsw
   606 00001090 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   607 00001094 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   608                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   609                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   610                              <1> ; redirector Find First Without CDS
   611                              <1> 
   612 00001096 8A1D(22C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   613 0000109C C605(22C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   614 000010A3 53                  <1>     push rbx
   615                              <1> .moveNetChars:
   616 000010A4 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   617 000010A5 E855550000          <1>     call uppercaseChar  ;Make char in al uppercase
   618 000010AA 84C0                <1>     test al, al
   619 000010AC 740F                <1>     jz .netEnd
   620 000010AE E840550000          <1>     call swapPathSeparator  ;If path sep, swap it
   621 000010B3 AA                  <1>     stosb
   622 000010B4 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   623 000010B6 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   624 000010BB EBE7                <1>     jmp short .moveNetChars
   625                              <1> .netEnd:
   626 000010BD 5B                  <1>     pop rbx
   627 000010BE AA                  <1>     stosb
   628 000010BF 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   629                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010C1 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   630 000010C3 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   631 000010C8 CD4F                <1>     int 4Fh
   632                              <1>     return
    18                              <2> %%_ret:
    19 000010CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   633                              <1> .notNet:
   634                              <1> ;This is the normal case; paths can be relative, or absolute.
   635 000010CB 58                  <1>     pop rax ;Get the drive letter back
   636 000010CC 9D                  <1>     popfq   ;Get the flag state back
   637 000010CD 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   638                              <1> .pnfErr:
   639 000010CF B003                <1>     mov al, errPnf  ;Null path error
   640 000010D1 F9                  <1>     stc
   641                              <1>     return
    18                              <2> %%_ret:
    19 000010D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   642                              <1> .notNull:
   643 000010D3 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   644 000010D5 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   645 000010D7 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   646 000010D9 F9                  <1>     stc
   647                              <1>     return
    18                              <2> %%_ret:
    19 000010DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   648                              <1> .driveOk:
   649 000010DB 84C0                <1>     test al, al
   650 000010DD 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   651                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   652 000010DF 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   653 000010E2 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   654 000010E4 50                  <1>     push rax    ;Save the drive letter
   655 000010E5 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   656 000010E6 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   657 000010E9 E805550000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   658                              <1>     ;If al is a path separator, then this path is absolute.
   659 000010EE 58                  <1>     pop rax ;Get back the drive letter
   660 000010EF 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   661                              <1> .absoPath:
   662                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   663 000010F1 48FFC6              <1>     inc rsi
   664 000010F4 EB1A                <1>     jmp short .commonDir
   665                              <1> .curPath:
   666                              <1> ;This is only jumped to if we are relative the current drive
   667                              <1> ;rsi points to first char in path
   668                              <1> ;If this char is \ or /, then it is an absolute path.
   669 000010F6 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   670 000010FC FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   671 000010FE 50                  <1>     push rax    ;Save the current drive number
   672 000010FF 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   673 00001101 E8ED540000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   674 00001106 58                  <1>     pop rax ;Get back the current drive number
   675 00001107 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   676                              <1> .relMain:
   677 00001109 C605(F1C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   678                              <1> .commonDir:
   679                              <1> ;rsi points to the start of the string we will be appending
   680                              <1> ;Fall through now
   681                              <1> pathWalk:
   682                              <1> ;Input: rsi must point to source buffer for path to expand
   683                              <1> ;       rdi must point to a destination buffer
   684                              <1> ;       al must contain the drive 1 based number
   685 00001110 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   686 00001115 727C                <1>     jc .badDriveExit
   687                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   688                              <1>     ; resolution
   689                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   690 00001117 4889FB              <1>     mov rbx, rdi
   691                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   692 0000111A 803E00              <1>     cmp byte [rsi], 0
   693 0000111D 7512                <1>     jnz .mainlp
   694                              <1>     ;Setup dummy dir data
   695 0000111F 31C0                <1>     xor eax, eax
   696 00001121 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   697 00001128 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   698 0000112F EB68                <1>     jmp short .exitGood
   699                              <1> .mainlp:
   700 00001131 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   701 00001136 84C0                <1>     test al, al
   702 00001138 7507                <1>     jnz .notFile
   703 0000113A C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   704                              <1> .notFile:
   705 00001141 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   706 00001142 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   707 00001147 58                  <1>     pop rax
   708 00001148 736B                <1>     jnc .deviceFound
   709 0000114A E816020000          <1>     call searchForPathspec  ;and search the directory
   710 0000114F 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   711 00001151 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   712 00001156 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   713 00001158 84C0                <1>     test al, al ;Exit if this pathspec was a file
   714 0000115A 743D                <1>     jz .exitGood
   715                              <1>     ;Here I have to take the cluster data from the found directory entry
   716                              <1>     ; and setup the search for the next pathspec portion
   717                              <1>     ;Copy necessary data from the current directory copy
   718 0000115C 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   719 00001163 74CC                <1>     jz .mainlp
   720 00001165 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   721 0000116C C1E010              <1>     shl eax, 10h    ;Shift it high
   722 0000116F 668B05(68C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   723                              <1>     ;eax now has the cluster number of the search
   724 00001176 8905(74C70300)      <1>     mov dword [dirClustA], eax
   725 0000117C 8905(70C70300)      <1>     mov dword [dirClustPar], eax
   726 00001182 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   727 00001184 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   728 0000118A 668905(78C70300)    <1>     mov word [dirSect], ax
   729 00001191 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   730                              <1> .badDriveExit:
   731 00001193 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   732                              <1>     return
    18                              <2> %%_ret:
    19 00001198 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   733                              <1> .exitGood:
   734 00001199 C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   735                              <1> .exit:
   736                              <1>     return
    18                              <2> %%_ret:
    19 000011A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   737                              <1> .checkDev:
   738                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   739                              <1> ; we are in \DEV pseudo dir
   740 000011A1 F605(5EC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   741 000011A8 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   742                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   743 000011AA 56                  <1>     push rsi
   744 000011AB 57                  <1>     push rdi
   745 000011AC E87A020000          <1>     call checkDevPath
   746 000011B1 5F                  <1>     pop rdi
   747 000011B2 5E                  <1>     pop rsi
   748 000011B3 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   749                              <1> .deviceFound:
   750 000011B5 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   751 000011B7 C605(F5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   752 000011BE C605(F4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   753 000011C5 EBD9                <1>     jmp short .exit   
   754                              <1> .nodev:
   755 000011C7 F9                  <1>     stc
   756 000011C8 EBD6                <1>     jmp short .exit
   757                              <1> 
   758                              <1> prepareDir:
   759                              <1> ;Used to transfer the current directory if it is necessary.
   760                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   761                              <1> ; relative
   762                              <1> ;Input: al = 1-based drive letter
   763                              <1> ;Output: rdi = Pointing at where to place chars from source string
   764                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   765 000011CA 56                  <1>     push rsi
   766 000011CB E864570000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   767 000011D0 E828530000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   768 000011D5 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   769 000011D7 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] 
   770 000011DE 57                  <1>     push rdi    ;Push CDS pointer on stack...
   771 000011DF E84F500000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   772                              <1> .critExit:
   773 000011E4 E855570000          <1>     call dosCrit1Exit
   774 000011E9 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   775 000011EA 724A                <1>     jc .badDriveExit 
   776 000011EC 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   777                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   778                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   779                              <1>     ;   terminating char (\, / or Null)
   780                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   781                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   782 000011F3 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   783 000011F9 753D                <1>     jnz .prepDirJoin
   784 000011FB 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   785 00001201 7556                <1>     jnz .prepDirSubst
   786                              <1> .prepMain:
   787                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   788 00001203 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   789 0000120A 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   790                              <1>     ;Else we copy the first two chars only (X:)
   791 0000120C 66A5                <1>     movsw  
   792 0000120E B05C                <1>     mov al, "\"
   793 00001210 AA                  <1>     stosb   ;Store the path separator and increment rdi
   794 00001211 31C0                <1>     xor eax, eax    ;Get cluster 0
   795 00001213 EB1B                <1>     jmp short .prepDirExitSkip
   796                              <1> .prepLoop:
   797 00001215 AC                  <1>     lodsb
   798 00001216 84C0                <1>     test al, al ;If al was null, then we stop
   799 00001218 7403                <1>     jz .prepDirExit
   800 0000121A AA                  <1>     stosb
   801 0000121B EBF8                <1>     jmp short .prepLoop
   802                              <1> .prepDirExit:
   803 0000121D 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   804 00001221 7403                <1>     je .prepDirExitSkipPathsep
   805 00001223 B05C                <1>     mov al, "\"
   806 00001225 AA                  <1>     stosb   ;Store the path separator and increment rdi
   807                              <1> .prepDirExitSkipPathsep:
   808 00001226 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   809 0000122D 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   810                              <1> .prepDirExitSkip:
   811 00001230 E837000000          <1>     call .prepSetupDirSearchVars
   812 00001235 F8                  <1>     clc ;Clear carry before exiting
   813                              <1> .badDriveExit:
   814 00001236 5E                  <1>     pop rsi
   815                              <1>     return
    18                              <2> %%_ret:
    19 00001237 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   816                              <1> .prepDirJoin:
   817 00001238 51                  <1>     push rcx
   818 00001239 56                  <1>     push rsi
   819 0000123A 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   820 00001241 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   821                              <1> .prepDirJoin1:
   822 00001246 AC                  <1>     lodsb   ;Get the char
   823 00001247 84C0                <1>     test al, al ;Null char?
   824 00001249 740B                <1>     jz .prepDirJoin2
   825 0000124B E8A3530000          <1>     call swapPathSeparator
   826 00001250 7404                <1>     jz .prepDirJoin2
   827 00001252 FFC1                <1>     inc ecx ;Accrue length to copy
   828 00001254 EBF0                <1>     jmp short .prepDirJoin1
   829                              <1> .prepDirJoin2:
   830 00001256 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   831 00001257 EB05                <1>     jmp short .prepDirCopy1
   832                              <1> .prepDirSubst:
   833 00001259 51                  <1>     push rcx
   834 0000125A 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   835                              <1> .prepDirCopy1:
   836 0000125E F3A4                <1>     rep movsb   ;Copy the string over
   837 00001260 59                  <1>     pop rcx
   838 00001261 F605(F1C60300)FF    <1>     test byte [spliceFlag], -1
   839 00001268 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   840 0000126A EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   841                              <1> .prepSetupDirSearchVars:
   842                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   843                              <1> ;       rbp = DPB pointer for the device which will do transaction
   844 0000126C 51                  <1>     push rcx
   845 0000126D 31C9                <1>     xor ecx, ecx
   846 0000126F 66890D(78C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   847 00001276 890D(7AC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   848 0000127C E83BF5FFFF          <1>     call getFATtype ;Get type of fat
   849 00001281 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   850 00001287 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   851                              <1>     ;FAT 32 here
   852 00001289 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   853 0000128B 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   854 0000128D 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   855                              <1> .psdsvExit:
   856 00001290 8905(74C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   857 00001296 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   858 0000129C 59                  <1>     pop rcx
   859                              <1>     return 
    18                              <2> %%_ret:
    19 0000129D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   860                              <1> 
   861                              <1> copyPathspec:
   862                              <1> ;1) Copies a path portion from the source buffer to the destination
   863                              <1> ;2) Advances rsi to the next null, \ or /
   864                              <1> ;3) Expands all * to ?'s
   865                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   866                              <1> ;    next path separator and rdi pointing to the previous pathsep
   867                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   868                              <1> ;    with rsi moving to path separator
   869                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   870                              <1> ;
   871                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   872                              <1> ;           rdi = Points to where to store it
   873                              <1> ;
   874                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   875                              <1> ;           rdi = First char of next space to store next pathspec
   876                              <1> ;           al = Last char stored (either \ or NULL)
   877                              <1> ;           CF=NC = OK path
   878                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   879                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   880 0000129E 57                  <1>     push rdi    ;Save the pointer into the user buffer
   881 0000129F C605(81C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   882 000012A6 488D3D(C9C60300)    <1>     lea rdi, fcbName
   883 000012AD 57                  <1>     push rdi
   884 000012AE B903000000          <1>     mov ecx, 3
   885 000012B3 B820202020          <1>     mov eax, "    " ;Four spaces
   886 000012B8 F3AB                <1>     rep stosd   ;Store 12 spaces
   887 000012BA 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   888                              <1> 
   889 000012BB 488D1D(D4C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   890 000012C2 AC                  <1>     lodsb   ;Get first char from user path in al
   891 000012C3 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   892 000012C5 745B                <1>     je .cpsDots
   893 000012C7 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   894                              <1> ;First char is not a dot, so now check if starts with E5h? 
   895                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   896 000012CA 3CE5                <1>     cmp al, 0E5h
   897 000012CC 7506                <1>     jne .cpsMainLoop
   898 000012CE 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   899 000012D1 B005                <1>     mov al, 05h
   900 000012D3 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   901                              <1> .cpsMainLoop:
   902 000012D4 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   903 000012D5 84C0                <1>     test al, al ;Is it the null char?
   904 000012D7 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   905 000012D9 E815530000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   906 000012DE 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   907 000012E0 3C2E                <1>     cmp al, "." ;Filename extension separator
   908 000012E2 7420                <1>     je .cpsExtension
   909                              <1>     ;If we have space in the filename, we check to see if the next char is *
   910 000012E4 3C2A                <1>     cmp al, "*" ;Wildcard?
   911 000012E6 7430                <1>     je .cpsWildcard
   912 000012E8 3C3F                <1>     cmp al, "?" ;Good wildcard?
   913 000012EA 740C                <1>     je .store
   914 000012EC E80E530000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   915 000012F1 E84A540000          <1>     call checkCharValid ; and check it is a valid char
   916 000012F6 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   917                              <1> .store:
   918 000012F8 4839DF              <1>     cmp rdi, rbx
   919 000012FB 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   920 000012FD AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   921 000012FE EBD4                <1>     jmp short .cpsMainLoop
   922                              <1> .cpsInvalidChar:
   923 00001300 30C0                <1>     xor al, al
   924 00001302 EB26                <1>     jmp short .cpsProcessName
   925                              <1> .cpsExtension:
   926                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   927 00001304 B903000000          <1>     mov ecx, 3 
   928 00001309 488D3D(D1C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   929 00001310 57                  <1>     push rdi
   930 00001311 B020                <1>     mov al, " "
   931 00001313 F3AA                <1>     rep stosb
   932 00001315 5F                  <1>     pop rdi
   933 00001316 EBBC                <1>     jmp short .cpsMainLoop
   934                              <1> .cpsWildcard:
   935 00001318 B03F                <1>     mov al, "?"
   936                              <1> .cpsWildcardLp:
   937 0000131A AA                  <1>     stosb
   938 0000131B 4839DF              <1>     cmp rdi, rbx
   939 0000131E 75FA                <1>     jne .cpsWildcardLp
   940 00001320 EBB2                <1>     jmp short .cpsMainLoop
   941                              <1> 
   942                              <1> .cpsDots:
   943 00001322 AA                  <1>     stosb   ;Store the first dot
   944 00001323 8A06                <1>     mov al, byte [rsi]
   945 00001325 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   946 00001327 752B                <1>     jne .oneDotResolve
   947 00001329 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   948                              <1> 
   949                              <1> .cpsProcessName:
   950                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   951 0000132A 84C0                <1>     test al, al 
   952 0000132C 741C                <1>     jz .cpsStore
   953 0000132E E8C0520000          <1>     call swapPathSeparator
   954 00001333 7415                <1>     jz .cpsStore
   955                              <1> .cpsFindTerminator:
   956 00001335 AC                  <1>     lodsb
   957 00001336 84C0                <1>     test al, al 
   958 00001338 7410                <1>     jz .cpsStore
   959 0000133A E8B4520000          <1>     call swapPathSeparator
   960 0000133F 7409                <1>     jz .cpsStore
   961 00001341 E8FA530000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   962 00001346 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   963                              <1>     ;If we encounter a terminator, convert to 0
   964 00001348 30C0                <1>     xor al, al
   965                              <1> .cpsStore:
   966 0000134A 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   967 00001351 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   968 00001352 5F                  <1>     pop rdi
   969                              <1>     return
    18                              <2> %%_ret:
    19 00001353 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   970                              <1> .oneDotResolve:
   971 00001354 488D3D(D4C60300)    <1>     lea rdi, fcbName+11
   972 0000135B AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   973 0000135C 5F                  <1>     pop rdi ;rdi points to fresh space
   974 0000135D 48FFCF              <1>     dec rdi ;Point to the previous path separator
   975 00001360 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   976                              <1>     return
    18                              <2> %%_ret:
    19 00001361 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   977                              <1> .cpsBadChar:
   978 00001362 30C0                <1>     xor al, al  ;Convert the char to a terminator
   979                              <1>     return
    18                              <2> %%_ret:
    19 00001364 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> searchForPathspec:
   982                              <1>     ;Now search the current directory for this filename
   983                              <1>     ;Find first using SDA ffBlock
   984                              <1>     ;If al = 0, we have final file name or directory name
   985                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   986                              <1>     ;Output: CF=CY => Error occured
   987                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   988                              <1>     ;                 FF block somewhat setup
   989                              <1>     ;Preserves rax, rbx, rsi,  rdi
   990 00001365 50                  <1>     push rax
   991 00001366 53                  <1>     push rbx
   992 00001367 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   993 00001368 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   994 00001369 0FB61D(5DC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   995 00001370 53                  <1>     push rbx    ;and push it onto the stack
   996                              <1> ;Evaluate whether we are searching for a file for a directory
   997 00001371 84C0                <1>     test al, al
   998 00001373 741D                <1>     jz .sfpPNfile
   999                              <1>     ;Fall if subdir
  1000 00001375 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1001 0000137C B03F                <1>     mov al, "?" ;Search for wildcard
  1002 0000137E B90B000000          <1>     mov ecx, 11
  1003 00001383 F2AE                <1>     repne scasb
  1004 00001385 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1005 00001387 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1006 00001389 C605(5DC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1007 00001390 EB07                <1>     jmp short .sfpPNMain
  1008                              <1> .sfpPNfile:
  1009                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1010 00001392 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1011                              <1> .sfpPNMain:
  1012 00001399 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1013 000013A0 7405                <1>     je .sfpPNNoDisk
  1014 000013A2 E81EF9FFFF          <1>     call searchDir
  1015                              <1> .sfpPNNoDisk:
  1016 000013A7 5B                  <1>     pop rbx
  1017 000013A8 881D(5DC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1018 000013AE 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1019 000013AF 5E                  <1>     pop rsi
  1020 000013B0 5B                  <1>     pop rbx
  1021 000013B1 58                  <1>     pop rax
  1022                              <1>     return
    18                              <2> %%_ret:
    19 000013B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1023                              <1> .sfpPnf:
  1024 000013B3 B803000000          <1>     mov eax, errPnf
  1025                              <1> .sfpErrExit:
  1026 000013B8 F9                  <1>     stc ;Set carry
  1027 000013B9 EBEC                <1>     jmp short .sfpPNNoDisk
  1028                              <1> 
  1029                              <1> addPathspecToBuffer:
  1030                              <1> ;Input: fcbName = Qualified pathname portion
  1031                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1032                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1033                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1034                              <1> ;rbx points to the "head of the path"
  1035 000013BB F605(22C60300)FF    <1>     test byte [skipDisk], -1
  1036                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013C2 75EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1037 000013C4 803D(C9C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1038 000013CB 741F                <1>     je .aptbPNDots
  1039                              <1>     ;Copy filename over to internal buffer
  1040 000013CD 56                  <1>     push rsi    ;Save source pointer position
  1041 000013CE 488D35(C9C60300)    <1>     lea rsi, fcbName
  1042 000013D5 E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1043 000013DA 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1044 000013DD 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1045                              <1> .aptbOkExit:
  1046 000013DE 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1047 000013E1 E80D520000          <1>     call swapPathSeparator
  1048 000013E6 7402                <1>     jz .aptbPNexit
  1049 000013E8 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1050                              <1> .aptbPNexit:
  1051 000013EA AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1052                              <1>     return
    18                              <2> %%_ret:
    19 000013EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1053                              <1> .aptbPNDots:
  1054                              <1> ;For one dot, we leave rdi where it is
  1055                              <1> ;For two dots, we search backwards for the previous "\"
  1056 000013EC 803D(CAC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1057 000013F3 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1058 000013F4 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1059                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013F7 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1060                              <1>     ;Here we have two dots
  1061                              <1>     ;Walk rdi backwards until a \ is found
  1062 000013F9 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1063 000013FC 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1064 00001402 7420                <1>     je .aptbPnf
  1065 00001404 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1066 0000140A 7418                <1>     je .aptbPnf
  1067                              <1> .aptbPNDotsLp:
  1068 0000140C 48FFCF              <1>     dec rdi
  1069 0000140F 803F5C              <1>     cmp byte [rdi], "\"
  1070 00001412 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1071                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1072 00001414 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1073 0000141B 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1074 0000141D 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1075 00001420 7202                <1>     jb .aptbPnf
  1076 00001422 EBBA                <1>     jmp short .aptbOkExit
  1077                              <1> ;.aptbSearchError:
  1078                              <1> ;    mov eax, errFnf
  1079                              <1> ;    jmp short .aptbErrExit
  1080                              <1> .aptbPnf:
  1081 00001424 B803000000          <1>     mov eax, errPnf
  1082                              <1> .aptbErrExit:
  1083 00001429 F9                  <1>     stc ;Set carry
  1084                              <1>     return
    18                              <2> %%_ret:
    19 0000142A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1085                              <1> 
  1086                              <1> checkDevPath:
  1087                              <1> ;Called only if the file/directory was not found on disk.
  1088                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1089                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1090                              <1> ; and check to see if it is a char device. If it is, build a directory
  1091                              <1> ; If it is not, proceed with the request fail.
  1092                              <1> ;
  1093                              <1> ;Input: rsi = Pointer to the next path spec
  1094                              <1> ;Output: CF=NC => Char device found, directory built
  1095                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1096 0000142B 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1097                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001432 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1098 00001434 803D(D4C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1099 0000143B 7459                <1>     je .notOk                      
  1100                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1101 0000143D 50                  <1>     push rax
  1102 0000143E 48B844455620202020- <1>     mov rax, "DEV     "
  1102 00001447 20                  <1>
  1103 00001448 483905(C9C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1104 0000144F 58                  <1>     pop rax
  1105 00001450 7544                <1>     jne .notOk
  1106 00001452 813D(D1C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1106 0000145A 205C                <1>
  1107 0000145C 7538                <1>     jne .notOk
  1108                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1109                              <1>     ; looking for a device driver
  1110                              <1>     ;First append it to rdi 
  1111 0000145E B84445565C          <1>     mov eax, "DEV\" 
  1112 00001463 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1113 00001464 57                  <1>     push rdi
  1114 00001465 488D3D(C9C60300)    <1>     lea rdi, fcbName
  1115 0000146C E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1116                              <1>     ;Returns in al the terminating char of the source string
  1117 00001471 5F                  <1>     pop rdi
  1118                              <1>     ;If al is a pathsep, fail
  1119 00001472 E87C510000          <1>     call swapPathSeparator
  1120 00001477 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1121 00001479 30C0                <1>     xor al, al
  1122 0000147B 8805(D4C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1123 00001481 53                  <1>     push rbx
  1124 00001482 E844000000          <1>     call checkIfCharDevice
  1125 00001487 5B                  <1>     pop rbx ;Don't need bh yet
  1126 00001488 720C                <1>     jc .notOk
  1127 0000148A E873000000          <1>     call buildCharDir
  1128                              <1>     ;Here the device was determined to be a char device.
  1129                              <1>     ;A dummy directory entry was built for it.
  1130                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1131                              <1>     ; Do not Find Next!
  1132                              <1> .copyName:
  1133 0000148F E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1134 00001494 F8                  <1>     clc
  1135                              <1>     return
    18                              <2> %%_ret:
    19 00001495 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1136                              <1> .notOk:
  1137 00001496 B802000000          <1>     mov eax, errFnf
  1138 0000149B F9                  <1>     stc
  1139                              <1>     return
    18                              <2> %%_ret:
    19 0000149C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1140                              <1> .charDevSearch:
  1141 0000149D 53                  <1>     push rbx
  1142 0000149E E828000000          <1>     call checkIfCharDevice
  1143 000014A3 5B                  <1>     pop rbx ;Dont need bh yet
  1144 000014A4 72F0                <1>     jc .notOk
  1145 000014A6 E857000000          <1>     call buildCharDir
  1146 000014AB 803D(D4C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1147 000014B2 750C                <1>     jne .cds2
  1148 000014B4 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1149 000014B8 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1150 000014BA 48FFCF              <1>     dec rdi
  1151 000014BD B02F                <1>     mov al, "/" ;Replace \ with "/"
  1152 000014BF AA                  <1>     stosb   ;Store that and let the dir write the filename
  1153                              <1> .cds2:
  1154 000014C0 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1155 000014C7 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1156 000014C9 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1157                              <1>     return
    18                              <2> %%_ret:
    19 000014CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1158                              <1> 
  1159                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1160                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1161                              <1> ; device driver chain. 
  1162                              <1> ;Output: CF=CY if not found
  1163                              <1> ;        CF=NC if found
  1164                              <1> ;           BH = Low byte of the device attribute word
  1165 000014CB 50                  <1>     push rax
  1166 000014CC 57                  <1>     push rdi
  1167 000014CD 488B05(C9C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1168 000014D4 488D3D(80C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1169                              <1> .checkName:
  1170 000014DB 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1171 000014DF 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1172 000014E1 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1173 000014E4 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1174 000014E6 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1175 000014E9 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1176 000014EC 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1177 000014F0 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1178                              <1> .walkList:
  1179 000014F2 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1180 000014F5 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1181 000014FC 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1182 000014FE F9                  <1>     stc
  1183                              <1> .exit:
  1184 000014FF 5F                  <1>     pop rdi
  1185 00001500 58                  <1>     pop rax
  1186                              <1>     return
    18                              <2> %%_ret:
    19 00001501 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1187                              <1> 
  1188                              <1> buildCharDir:
  1189                              <1> ;Build a dummy directory entry for the char device in FCBName
  1190                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1191 00001502 803D(22C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1192                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001509 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1193 0000150B 50                  <1>     push rax
  1194 0000150C 57                  <1>     push rdi
  1195 0000150D C605(D4C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1196 00001514 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1197                              <1>     ;Zero the directory copy (32 bytes)
  1198 0000151B 50                  <1>     push rax
  1199 0000151C 51                  <1>     push rcx
  1200 0000151D 57                  <1>     push rdi
  1201 0000151E 31C0                <1>     xor eax, eax    ;Zero rax
  1202 00001520 B904000000          <1>     mov ecx, 4
  1203 00001525 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1204 00001528 5F                  <1>     pop rdi
  1205 00001529 59                  <1>     pop rcx
  1206 0000152A 58                  <1>     pop rax
  1207 0000152B 488B05(C9C60300)    <1>     mov rax, qword [fcbName]
  1208 00001532 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1209 00001535 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1210 0000153A 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1211 0000153D C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1212                              <1>     ;Get date and time and set the write time in the directory entry
  1213 00001541 E8C9110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1214 00001546 E8AF120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1215 0000154B 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1216 0000154E 31C0                <1>     xor eax, eax
  1217 00001550 5F                  <1>     pop rdi
  1218 00001551 58                  <1>     pop rax
  1219                              <1>     return
    18                              <2> %%_ret:
    19 00001552 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1220                              <1> 
  1221                              <1> checkFailingComp:
  1222                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1223                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1224                              <1> ;Returns: ZF=ZE => Last path componant
  1225                              <1> ;         ZF=NZ => Not last path componant
  1226 00001553 50                  <1>     push rax
  1227 00001554 8A05(D4C60300)      <1>     mov al, byte [fcbName + 11]
  1228 0000155A 84C0                <1>     test al, al
  1229 0000155C 58                  <1>     pop rax
  1230                              <1>     return
    18                              <2> %%_ret:
    19 0000155D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FAT/dirfun.asm"
    29                              <1> ;---------------------------------------------------:
    30                              <1> ;                   KERNEL FUNCTIONS                :
    31                              <1> ;---------------------------------------------------:
    32                              <1> makeDIR:           ;ah = 39h
    33                              <1> ;For make, the path must exist but the final componant must not exist.
    34                              <1> ;Input: rdx = Pointer to ASCIIZ string
    35 0000155E 4889D7              <1>     mov rdi, rdx
    36 00001561 E8CB500000          <1>     call strlen
    37 00001566 81F940000000        <1>     cmp ecx, 64
    38 0000156C 7607                <1>     jbe .okLength
    39                              <1> .badPath:
    40 0000156E B003                <1>     mov al, errPnf
    41 00001570 E90A540000          <1>     jmp extErrExit
    42                              <1> .okLength:
    43 00001575 4889D6              <1>     mov rsi, rdx
    44 00001578 E81E510000          <1>     call checkPathspecOK
    45 0000157D 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    46                              <1> .pathOk:
    47 0000157F E8A9510000          <1>     call scanPathWC
    48 00001584 72E8                <1>     jc .badPath ;Dont allow wildcards
    49                              <1>     ;Path is ok, now proceed
    50 00001586 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    51 0000158D E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    52                              <1>     ;If the path exists, exit error
    53 00001592 0F83E7530000        <1>     jnc extErrExit
    54                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    55 00001598 E8B6FFFFFF          <1>     call checkFailingComp
    56 0000159D 0F85DC530000        <1>     jnz extErrExit
    57                              <1>     ;So all is well, the new subdirectories name is in fcbName
    58                              <1>     ;The parent dir's directory entry is in the curDirCopy
    59 000015A3 E8C44E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    60                              <1>     ;returns in rdi the working cds ptr
    61 000015A8 7312                <1>     jnc .notNet
    62 000015AA B803110000          <1>     mov eax, 1103h
    63 000015AF CD4F                <1>     int 4fh
    64 000015B1 0F82C8530000        <1>     jc extErrExit
    65 000015B7 E9B5530000          <1>     jmp extGoodExit
    66                              <1> .notNet:
    67 000015BC E873530000          <1>     call dosCrit1Enter
    68                              <1>     ;Current dpb ptr is already set
    69                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    70                              <1>     ;First we make a dummy dir in curDirCopy
    71 000015C1 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
    72 000015C8 488D35(C9C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    73 000015CF 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
    74 000015D6 48A5                <1>     movsq   ;Copy the name over
    75 000015D8 A5                  <1>     movsd
    76 000015D9 E831110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    77 000015DE E817120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    78 000015E3 8905(5CC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    79 000015E9 8905(64C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    80 000015EF 31C0                <1>     xor eax, eax
    81 000015F1 8905(6AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    82 000015F7 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    83 000015FE 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]
    84                              <1> .searchForDirSpace:
    85 00001604 8905(74C70300)      <1>     mov dword [dirClustA], eax
    86 0000160A 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    87 0000160C 668905(78C70300)    <1>     mov word [dirSect], ax
    88 00001613 8905(7AC70300)      <1>     mov dword [dirEntry], eax
    89 00001619 E8CE040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    90 0000161E 7328                <1>     jnc .dirEntryFnd
    91 00001620 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    91 00001628 0000                <1>
    92 0000162A 0F844A010000        <1>     je .bad ;Set CF and exit
    93 00001630 E801060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    94 00001635 0F823F010000        <1>     jc .bad
    95 0000163B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    96 00001640 0F8434010000        <1>     je .bad
    97                              <1>     ;Else eax = Newly allocated cluster
    98 00001646 EBBC                <1>     jmp short .searchForDirSpace
    99                              <1> .dirEntryFnd:
   100                              <1> ;rdi points to current directory copy
   101                              <1> ;rsi now points to offset in the buffer to write the entry to
   102                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   103 00001648 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   104 0000164F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   105                              <1>      
   106 00001653 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   107 0000165A 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   108 00001661 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   109 00001664 668935(3EC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   110                              <1> ;Must now request a cluster and sanitise it
   111 0000166B E831F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   112 00001670 0F8209010000        <1>     jc .badExit
   113 00001676 E8EE050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   114 0000167B 0F82FE000000        <1>     jc .badExit
   115                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   116 00001681 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   117 00001688 C1E810              <1>     shr eax, 10h    ;Get high word low
   118 0000168B 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   119 00001692 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   120 00001699 E86EF0FFFF          <1>     call getBufForDirNoFile
   121 0000169E 0F82DB000000        <1>     jc .badExit
   122 000016A4 0FB705(3EC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   123 000016AB 488D35(4EC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   124 000016B2 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   125 000016B7 B904000000          <1>     mov ecx, 4
   126 000016BC F348A5              <1>     rep movsq   ;Copy over the buffered directory
   127 000016BF E8BDEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   128                              <1>     ;Now need to read in data sector and make two entries . and ..
   129 000016C4 57                  <1>     push rdi
   130 000016C5 51                  <1>     push rcx
   131 000016C6 B90B000000          <1>     mov ecx, 11
   132 000016CB 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   133 000016D2 B020                <1>     mov al, " "
   134 000016D4 F3AA                <1>     rep stosb
   135 000016D6 59                  <1>     pop rcx
   136 000016D7 5F                  <1>     pop rdi
   137 000016D8 48B82E000000000000- <1>     mov rax, "."
   137 000016E1 00                  <1>
   138 000016E2 8805(4EC60300)      <1>     mov byte [curDirCopy], al
   139 000016E8 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   140 000016EF 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   141 000016F6 C605(59C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   142 000016FD C1E210              <1>     shl edx, 10h
   143 00001700 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   144 00001702 E820F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   145 00001707 E800F0FFFF          <1>     call getBufForDirNoFile
   146 0000170C 7271                <1>     jc .badExit
   147                              <1>     ;rbx has buffer pointer now
   148 0000170E 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   149 00001715 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 00001719 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   151 0000171E F348A5              <1>     rep movsq
   152                              <1>     ;Now create .. entry
   153 00001721 C605(4FC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   154 00001728 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   155 0000172E E889F0FFFF          <1>     call getFATtype
   156 00001733 81F902000000        <1>     cmp ecx, 2
   157 00001739 7207                <1>     jb .notFAT32
   158 0000173B 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   159 0000173E 7502                <1>     jne .notFAT32
   160 00001740 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   161                              <1> .notFAT32:
   162 00001742 668905(68C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   163 00001749 C1E810              <1>     shr eax, 10h
   164 0000174C 668905(62C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   165 00001753 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   166 0000175A B904000000          <1>     mov ecx, 4
   167 0000175F F348A5              <1>     rep movsq
   168 00001762 E81AEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   169 00001767 E8E3EDFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   170 0000176C 7211                <1>     jc .badExit
   171                              <1> .okExit:
   172                              <1>     ;AND WE ARE DONE!
   173 0000176E E8CB510000          <1>     call dosCrit1Exit
   174 00001773 31C0                <1>     xor eax, eax
   175 00001775 E9F7510000          <1>     jmp extGoodExit
   176                              <1> .bad:
   177 0000177A B805000000          <1>     mov eax, errAccDen
   178                              <1> .badExit:
   179 0000177F E8A9EDFFFF          <1>     call cancelWriteThroughBuffers
   180 00001784 E8B5510000          <1>     call dosCrit1Exit
   181 00001789 E9F1510000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> removeDIR:         ;ah = 3Ah
   184 0000178E 4889D7              <1>     mov rdi, rdx
   185 00001791 E89B4E0000          <1>     call strlen
   186 00001796 81F940000000        <1>     cmp ecx, 64
   187 0000179C 7607                <1>     jbe .okLength
   188                              <1> .badPath:
   189 0000179E B003                <1>     mov al, errPnf
   190 000017A0 E9DA510000          <1>     jmp extErrExit
   191                              <1> .okLength:
   192 000017A5 4889D6              <1>     mov rsi, rdx
   193 000017A8 E8EE4E0000          <1>     call checkPathspecOK
   194 000017AD 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   195                              <1> .pathOk:
   196 000017AF E8794F0000          <1>     call scanPathWC
   197 000017B4 72E8                <1>     jc .badPath ;Dont allow wildcards
   198                              <1>     ;Path is ok, now proceed
   199 000017B6 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   200 000017BD E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   201 000017C2 72DA                <1>     jc .badPath    ;Path Doesn't exist
   202 000017C4 E8A34C0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   203 000017C9 7312                <1>     jnc .notNet
   204 000017CB B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   205 000017D0 CD4F                <1>     int 4fh
   206 000017D2 0F82A7510000        <1>     jc extErrExit
   207 000017D8 E994510000          <1>     jmp extGoodExit
   208                              <1> .notNet:
   209 000017DD E852510000          <1>     call dosCrit1Enter
   210 000017E2 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   211                              <1>     ;Now let use check that our directory is not the CDS currentdir
   212 000017E9 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   213 000017F0 488D3D(12C50300)    <1>     lea rdi, buffer1
   214 000017F7 E8354E0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   215 000017FC 66890D(3EC70300)    <1>     mov word [pathLen], cx
   216 00001803 E8404E0000          <1>     call strcmp ;Then compare rdi to CDS string
   217 00001808 750F                <1>     jnz .notEqual
   218 0000180A B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   219 0000180F E82A510000          <1>     call dosCrit1Exit
   220 00001814 E966510000          <1>     jmp extErrExit
   221                              <1> .notEqual:
   222 00001819 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   223                              <1>     ;If the given path length is one more than the backslash offset
   224                              <1>     ; due to the terminating null, then the user is trying to delete the 
   225                              <1>     ; root dir. Fail this.
   226 0000181C 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   227 00001820 FFC1                <1>     inc ecx
   228 00001822 663B0D(3EC70300)    <1>     cmp cx, word [pathLen]
   229 00001829 0F8423010000        <1>     je .accessDenied
   230 0000182F E8CB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   231                              <1>     ;for the entry in the sector we are hoping to delete
   232 00001834 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   233 0000183B C1E010              <1>     shl eax, 10h
   234 0000183E 0FB71D(68C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   235 00001845 09D8                <1>     or eax, ebx
   236 00001847 8905(70C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   237 0000184D E8D5EFFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   238 00001852 E8B5EEFFFF          <1>     call getBufForDirNoFile
   239 00001857 0F82FA000000        <1>     jc .exitBad
   240                              <1>     ;rbx points to buffer
   241 0000185D 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   242 00001861 48B82E202020202020- <1>     mov rax, ".       "
   242 0000186A 20                  <1>
   243 0000186B 483906              <1>     cmp qword [rsi], rax
   244 0000186E 0F85DE000000        <1>     jne .accessDenied
   245 00001874 B42E                <1>     mov ah, "." ;Screw the partial stall
   246 00001876 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   247 0000187A 0F85D2000000        <1>     jne .accessDenied
   248 00001880 4881C620000000      <1>     add rsi, fatDirEntry_size
   249 00001887 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   250 0000188E B904000000          <1>     mov ecx, 4
   251 00001893 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   252                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   253                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   254 00001896 488D3D(C9C60300)    <1>     lea rdi, fcbName
   255 0000189D B03F                <1>     mov al, "?"
   256 0000189F B90B000000          <1>     mov ecx, 11
   257 000018A4 F3AA                <1>     rep stosb   ;Store the pattern to search for
   258 000018A6 30C0                <1>     xor al, al  ;Store a terminating zero
   259 000018A8 AA                  <1>     stosb
   260 000018A9 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   261 000018AF 50                  <1>     push rax    ;Save on stack temporarily
   262 000018B0 8905(74C70300)      <1>     mov dword [dirClustA], eax
   263 000018B6 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   264 000018B8 668905(78C70300)    <1>     mov word [dirSect], ax
   265 000018BF C705(7AC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   265 000018C7 0000                <1>
   266 000018C9 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   267 000018D0 58                  <1>     pop rax
   268 000018D1 E851EFFFFF          <1>     call getStartSectorOfCluster
   269 000018D6 E853EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   270 000018DB 727A                <1>     jc .exitBad
   271 000018DD E8C3F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   272 000018E2 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   273 000018E9 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   274 000018EF C605(5DC40300)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   275 000018F6 E807F4FFFF          <1>     call searchDir.rmdirEP
   276 000018FB 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   277                              <1>     ;Else, this is a empty dir, we can remove it
   278                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   279 000018FD 488B05(36C70300)    <1>     mov rax, qword [tempSect]
   280 00001904 E825EEFFFF          <1>     call getBufForDOS
   281 00001909 724C                <1>     jc .exitBad
   282 0000190B E895F4FFFF          <1>     call adjustDosDirBuffer
   283 00001910 0FB705(3EC70300)    <1>     movzx eax, word [entry]
   284 00001917 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   285 0000191B 4801C6              <1>     add rsi, rax    
   286 0000191E 8A05(F8C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   287 00001924 8806                <1>     mov byte [rsi], al  ;Store delchar there
   288 00001926 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   289 0000192A 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   290 0000192E E84EECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   291 00001933 C1E210              <1>     shl edx, 10h
   292 00001936 09D0                <1>     or eax, edx
   293                              <1>     ;Now remove the FAT chain
   294 00001938 E8A3F0FFFF          <1>     call unlinkFAT
   295 0000193D 7218                <1>     jc .exitBad
   296 0000193F E80BECFFFF          <1>     call writeThroughBuffers
   297 00001944 7211                <1>     jc .exitBad
   298 00001946 E8F34F0000          <1>     call dosCrit1Exit
   299 0000194B 31C0                <1>     xor eax, eax
   300 0000194D E91F500000          <1>     jmp extGoodExit
   301                              <1> .accessDenied:
   302 00001952 B805000000          <1>     mov eax, errAccDen
   303                              <1> .exitBad:
   304 00001957 E8D1EBFFFF          <1>     call cancelWriteThroughBuffers
   305 0000195C F9                  <1>     stc
   306 0000195D E8DC4F0000          <1>     call dosCrit1Exit
   307 00001962 E918500000          <1>     jmp extErrExit
   308                              <1> 
   309                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   310                              <1> ;Input: rdx = Pointer to ASCIIZ string
   311 00001967 4889D7              <1>     mov rdi, rdx
   312 0000196A E8C24C0000          <1>     call strlen
   313 0000196F 81F940000000        <1>     cmp ecx, 64
   314 00001975 7607                <1>     jbe .okLength
   315                              <1> .badPath:
   316 00001977 B003                <1>     mov al, errPnf
   317 00001979 E901500000          <1>     jmp extErrExit
   318                              <1> .okLength:
   319 0000197E 4889D6              <1>     mov rsi, rdx
   320 00001981 E8154D0000          <1>     call checkPathspecOK
   321 00001986 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   322 00001988 E8F44D0000          <1>     call checkPathNet
   323 0000198D 74E8                <1>     jz .badPath ;Or Net paths
   324                              <1>     ;Path is ok, now proceed
   325 0000198F 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   326 00001996 E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   327 0000199B 0F82DE4F0000        <1>     jc extErrExit   ;Exit with error code in eax
   328                              <1>     ;The path must've been ok, so now copy the path into the CDS
   329                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   330 000019A1 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   331 000019A8 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   332 000019AE 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   333 000019B0 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   334 000019B7 B95B000000          <1>     mov ecx, cds_size
   335 000019BC F3A4                <1>     rep movsb
   336                              <1>     ;If the path is longer than 67, call it an invalid path
   337 000019BE 488D3D(12C50300)    <1>     lea rdi, buffer1
   338 000019C5 E8674C0000          <1>     call strlen ;Get the length of this path
   339 000019CA 81F943000000        <1>     cmp ecx, 67
   340 000019D0 77A5                <1>     ja .badPath
   341 000019D2 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   342 000019D5 488D3D(6EC60300)    <1>     lea rdi, tmpCDS
   343 000019DC F3A4                <1>     rep movsb   ;Copy the path over
   344                              <1>     ;Now get the start cluster from the directory copy
   345 000019DE 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   346 000019E5 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   347 000019EC C1E010              <1>     shl eax, 10h
   348 000019EF 09D0                <1>     or eax, edx ;Add low bits to eax
   349 000019F1 8905(BBC60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   350 000019F7 488D35(6EC60300)    <1>     lea rsi, tmpCDS
   351 000019FE 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   352 00001A05 B95B000000          <1>     mov ecx, cds_size
   353 00001A0A E8254F0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   354 00001A0F F3A4                <1>     rep movsb
   355 00001A11 E8284F0000          <1>     call dosCrit1Exit
   356 00001A16 31C0                <1>     xor eax, eax
   357 00001A18 E9544F0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   358                              <1> .net:
   359                              <1> ;SDA Vars are setup for this request
   360 00001A1D B805110000          <1>     mov eax, 1105h
   361 00001A22 CD4F                <1>     int 4fh
   362 00001A24 0F82554F0000        <1>     jc extErrExit
   363 00001A2A E9424F0000          <1>     jmp extGoodExit
   364                              <1> getCurrentDIR:     ;ah = 47h
   365                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   366                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   367 00001A2F E8004F0000          <1>     call dosCrit1Enter
   368 00001A34 88D0                <1>     mov al, dl  ;Move drive number into al
   369 00001A36 E8C24A0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   370 00001A3B 730F                <1>     jnc .okDrive
   371                              <1> .badExit:
   372 00001A3D E8FC4E0000          <1>     call dosCrit1Exit
   373 00001A42 B80F000000          <1>     mov eax, errBadDrv
   374 00001A47 E9334F0000          <1>     jmp extErrExit
   375                              <1> .okDrive:
   376                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   377 00001A4C 56                  <1>     push rsi
   378 00001A4D 57                  <1>     push rdi
   379 00001A4E 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   380 00001A55 E8D9470000          <1>     call getDiskDPB
   381 00001A5A 5F                  <1>     pop rdi
   382 00001A5B 5E                  <1>     pop rsi
   383 00001A5C 0F821D4F0000        <1>     jc extErrExit
   384                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   385 00001A62 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   386 00001A65 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   387 00001A6C 31C0                <1>     xor eax, eax
   388 00001A6E FFC8                <1>     dec eax
   389 00001A70 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   390 00001A73 7516                <1>     jne .writePathInBuffer
   391 00001A75 FFC0                <1>     inc eax
   392 00001A77 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   393 00001A7A 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   394 00001A80 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   395                              <1>     ;Here we now add a terminating null at wBackslashOffset
   396 00001A82 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   397 00001A86 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   398                              <1> .writePathInBuffer:
   399 00001A8B 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   400 00001A8F FFC0                <1>     inc eax ;Go past the backslash
   401 00001A91 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   402 00001A94 E8A74B0000          <1>     call strcpy
   403 00001A99 E8A04E0000          <1>     call dosCrit1Exit
   404 00001A9E B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   405 00001AA3 E9C94E0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   406                              <1> 
   407                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   408 00001AA8 50                  <1>     push rax
   409 00001AA9 B800600000          <1>     mov eax, 6000h
   410 00001AAE CD41                <1>     int 41h
   411 00001AB0 58                  <1>     pop rax
   412                              <1>     return
    18                              <2> %%_ret:
    19 00001AB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1>     
   414                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   415                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   416 00001AB2 E8E44B0000          <1>     call checkPathspecOK    ;This preserves rsi
   417 00001AB7 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   418 00001AB9 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   419                              <1> .badPath:
   420 00001ABB B803000000          <1>     mov eax, errPnf
   421 00001AC0 E9BA4E0000          <1>     jmp extErrExit
   422                              <1> .pathspecOk:
   423 00001AC5 57                  <1>     push rdi    ;Save the destination
   424 00001AC6 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   425 00001ACD E8D5F4FFFF          <1>     call canonicaliseFileName
   426 00001AD2 5F                  <1>     pop rdi
   427 00001AD3 0F82A64E0000        <1>     jc extErrExit
   428 00001AD9 488D35(12C50300)    <1>     lea rsi, buffer1
   429 00001AE0 E85B4B0000          <1>     call strcpy
   430 00001AE5 31C0                <1>     xor eax, eax
   431 00001AE7 E9854E0000          <1>     jmp extGoodExit
   432                              <1> 
   433                              <1> ;-----------------------------------
   434                              <1> ;    General Directory Routines    :
   435                              <1> ;-----------------------------------
   436                              <1> 
   437                              <1> findFreeDiskDirEntry:
   438                              <1> ;Find a space in the directory we are searching for a directory entry
   439                              <1> ;Accept first entry starting with a 0E5h or 00h
   440                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   441                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   442                              <1> ; be called for CDS's that are NOT net CDS's).
   443                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   444                              <1> ;       Directory vars must be set up for the directory we are searching in
   445                              <1> ;Output: CF=CY => Error, eax has error code
   446                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   447                              <1>     ;breakpoint
   448 00001AEC 8A05(F8C60300)      <1>     mov al, byte [delChar]
   449 00001AF2 8805(C9C60300)      <1>     mov byte [fcbName], al
   450 00001AF8 E8C8F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   451                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001AFD 72B2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   452                              <1> ;Free entry found, dir variables are set for the free entry. 
   453                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   454                              <1> getDiskDirectoryEntry:
   455                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   456                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   457                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   458                              <1> ;        qword [tempSect] = Disk sector number of directory
   459                              <1> ;        word [entry] = 32 byte offset into sector
   460                              <1> ;        CF=CY => Error, exit 
   461 00001AFF 53                  <1>     push rbx
   462 00001B00 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  
   463                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   464                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   465 00001B06 0FB71D(78C70300)    <1>     movzx ebx, word [dirSect]
   466 00001B0D 85C0                <1>     test eax, eax
   467 00001B0F 7407                <1>     jz .skipCluster
   468 00001B11 E811EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   469 00001B16 EB1B                <1>     jmp short .skipOldFat
   470                              <1> .skipCluster:
   471 00001B18 55                  <1>     push rbp
   472 00001B19 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   473 00001B20 0FB705(78C70300)    <1>     movzx eax, word [dirSect]
   474 00001B27 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   475                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   476 00001B2A 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   477 00001B2E 5D                  <1>     pop rbp
   478 00001B2F 7202                <1>     jb .skipOldFat
   479 00001B31 F9                  <1>     stc
   480                              <1>     return
    18                              <2> %%_ret:
    19 00001B32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   481                              <1> .skipOldFat:
   482 00001B33 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   483 00001B36 488905(36C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   484 00001B3D E8ECEBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   485 00001B42 5B                  <1>     pop rbx
   486                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B43 72ED                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   487 00001B45 53                  <1>     push rbx
   488 00001B46 488B1D(2EC70300)    <1>     mov rbx, qword [currBuff]
   489 00001B4D E853F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   490                              <1>     ;Above function gets data buffer ptr in rsi
   491 00001B52 0FB705(78C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   492 00001B59 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   493 00001B5D F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   494                              <1>     ; the current sector
   495 00001B5F C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   496 00001B62 8B1D(7AC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   497 00001B68 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   498 00001B6A C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   499 00001B6D 66891D(3EC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   500 00001B74 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   501 00001B77 5B                  <1>     pop rbx
   502                              <1>     return
    18                              <2> %%_ret:
    19 00001B78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> 
   505                              <1> updateDirectoryEntryForFile:    
   506                              <1> ;Updates the directory entry for disk files
   507                              <1> ;Called with:
   508                              <1> ;   [workingDPB] = DPB pointer for the disk device
   509                              <1> ;   [currentSFT] = Current SFT pointer
   510 00001B79 50                  <1>     push rax
   511 00001B7A 53                  <1>     push rbx
   512 00001B7B 57                  <1>     push rdi
   513 00001B7C 55                  <1>     push rbp
   514                              <1> 
   515 00001B7D E8B24D0000          <1>     call dosCrit1Enter
   516 00001B82 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   517 00001B89 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   518 00001B90 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   519 00001B96 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   520 00001B9C 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   521 00001BA2 751B                <1>     jnz .skipDT
   522                              <1>     ;Get date and time words and add them to the directory entry
   523 00001BA4 E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   524                              <1>     ;Build date and time words
   525 00001BA9 E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   526                              <1>     ;Update SFT fields
   527 00001BAE 66894713            <1>     mov word [rdi + sft.wTime], ax
   528 00001BB2 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   529 00001BB5 66894715            <1>     mov word [rdi + sft.wDate], ax
   530 00001BB9 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   531                              <1> .skipDT:
   532                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   533                              <1> ; we skip all of this
   534 00001BBF 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   535 00001BC5 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   536 00001BC7 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   537 00001BCB E86CEBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   538 00001BD0 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   539                              <1>     ;Now we write the changes to the sector
   540                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   541 00001BD2 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   542 00001BD6 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   543 00001BDA C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   544 00001BDD 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   545 00001BE0 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   546 00001BE3 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   547 00001BE6 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   548 00001BEA 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   549 00001BEE 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   550 00001BF2 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   551 00001BF6 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   552 00001BFA 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   553 00001BFD 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   554 00001C01 C1E810              <1>     shr eax, 10h
   555 00001C04 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   556                              <1>     ;Directory sector updated and marked to be flushed to disk!
   557 00001C08 31C0                <1>     xor eax, eax
   558 00001C0A FF15(24C10300)      <1>     call qword [updateDirShare]
   559 00001C10 F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   560 00001C11 E86BE9FFFF          <1>     call markBufferDirty
   561 00001C16 E834E9FFFF          <1>     call writeThroughBuffers
   562 00001C1B 720A                <1>     jc .exitBad
   563                              <1> .exit:
   564 00001C1D E81C4D0000          <1>     call dosCrit1Exit
   565 00001C22 5D                  <1>     pop rbp
   566 00001C23 5F                  <1>     pop rdi
   567 00001C24 5B                  <1>     pop rbx
   568 00001C25 58                  <1>     pop rax
   569                              <1>     return
    18                              <2> %%_ret:
    19 00001C26 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   570                              <1> .exitBad:
   571 00001C27 E801E9FFFF          <1>     call cancelWriteThroughBuffers
   572 00001C2C 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   573 00001C2D 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   574 00001C33 9D                  <1>     popfq
   575 00001C34 EBE7                <1>     jmp short .exit
   576                              <1>     
   577                              <1> growDirectory:
   578                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   579                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   580                              <1> ;                 eax = New Cluster number
   581                              <1> ;               TWO NON CF ERROR CASES.
   582                              <1> ;               If eax = -1 => disk full!
   583                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   584                              <1> ;        CF=CY => Something went wrong. Rip. 
   585 00001C36 53                  <1>     push rbx
   586 00001C37 51                  <1>     push rcx
   587 00001C38 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   588 00001C3E 85C0                <1>     test eax, eax
   589 00001C40 7424                <1>     jz .exit
   590 00001C42 E80DECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   591 00001C47 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   592 00001C49 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   593 00001C4E E874ECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   594 00001C53 7211                <1>     jc .exit
   595 00001C55 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   596 00001C57 E8CDEDFFFF          <1>     call readFAT
   597 00001C5C 7208                <1>     jc .exit
   598 00001C5E E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   599 00001C63 7201                <1>     jc .exit
   600 00001C65 F8                  <1>     clc
   601                              <1> .exit:
   602 00001C66 59                  <1>     pop rcx
   603 00001C67 5B                  <1>     pop rbx
   604                              <1>     return   
    18                              <2> %%_ret:
    19 00001C68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> sanitiseCluster:
   606                              <1> ;Sanitises the cluster in eax to all zeros
   607                              <1> ;Does not move file pointers
   608                              <1> ;Currently, is only called to sanitise subdirectory clusters
   609                              <1> ;Input: eax = Cluster number
   610                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   611                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   612                              <1> ;        If CF=CY => Error, exit
   613 00001C69 50                  <1>     push rax
   614 00001C6A 53                  <1>     push rbx
   615 00001C6B 51                  <1>     push rcx
   616 00001C6C 52                  <1>     push rdx
   617 00001C6D 56                  <1>     push rsi
   618 00001C6E 55                  <1>     push rbp
   619 00001C6F 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   620 00001C76 E8ACEBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   621 00001C7B 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   622 00001C7F FFC2                <1>     inc edx ;Make it a count of sectors
   623                              <1> .getSectorInCluster:
   624 00001C81 E869EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   625 00001C86 721E                <1>     jc .exitBad
   626 00001C88 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   627 00001C8C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   628 00001C90 31C0                <1>     xor eax, eax
   629 00001C92 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   630 00001C94 E8E8E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   631                              <1> 
   632 00001C99 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   633 00001C9B 740A                <1>     jz .exit    ;Jump if we done
   634 00001C9D 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   635 00001CA1 48FFC0              <1>     inc rax ;Goto next sector in cluster
   636 00001CA4 EBDB                <1>     jmp short .getSectorInCluster
   637                              <1> .exitBad:
   638 00001CA6 F9                  <1>     stc
   639                              <1> .exit:
   640 00001CA7 5D                  <1>     pop rbp
   641 00001CA8 5E                  <1>     pop rsi
   642 00001CA9 5A                  <1>     pop rdx
   643 00001CAA 59                  <1>     pop rcx
   644 00001CAB 5B                  <1>     pop rbx
   645 00001CAC 58                  <1>     pop rax
   646                              <1>     return
    18                              <2> %%_ret:
    19 00001CAD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/devio.asm"
    30                              <1> ;This file contains the primitive dev io function, which will be called 
    31                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    32                              <1> ; make requests for device IO.
    33                              <1> 
    34                              <1> mainCharIO:
    35                              <1> ;This is the main IO clearing function for Char IO.
    36                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    37                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    38                              <1> ;
    39                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    40                              <1> ;       ah = {0,..., 5}, a subfunction number
    41                              <1> ;       Function 0: Read Char (drvREAD)
    42                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    43                              <1> ;       Function 2: Write Char (drvWrite)
    44                              <1> ; In the case the below functions are called for Disk/Net files
    45                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    46                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    47                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    48                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    49                              <1> ;
    50                              <1> ; If and only if ah = 02h, al = Char to write to device
    51                              <1> ;
    52                              <1> ;
    53                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    54                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    55                              <1> ;                                           ZF = NZ => Device ready (not busy)
    56                              <1> ;                                               If ND read, AL = Next Char
    57                              <1> ; For Files/Net:
    58                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    59                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    60                              <1> ;           For Read and ND Read:
    61                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    62                              <1> ;               Read returns ^Z on EOF.
    63                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    64                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    65                              <1> ;
    66                              <1> ;All registers preserved EXCEPT for ax and flags
    67                              <1> 
    68                              <1> ;Reference Request Header
    69                              <1> ;Common Section:
    70                              <1> ;    .hdrlen resb 1  ;Length of the request header
    71                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    72                              <1> ;    .cmdcde resb 1  ;Command code
    73                              <1> ;    .status resw 1  ;Status word
    74                              <1> ;    .devptr resq 1  ;Reserved. Unused
    75                              <1> ;Below used by calls 0,1,2,5
    76                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    77                              <1> ;Below used by calls 0,2
    78                              <1> ;    .bufptr resq 1
    79                              <1> ;    .tfrlen resd 1
    80                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    81                              <1> ;    .strtsc resq 1
    82                              <1> ;    .desptr resq 1
    83                              <1> 
    84                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    85 00001CAE 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    86 00001CAF 488D1D(10C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    87 00001CB6 48891D(99C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    88 00001CBD 5B                  <1>     pop rbx
    89 00001CBE C705(A1C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    89 00001CC6 0000                <1>
    90 00001CC8 668905(10C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    91 00001CCF 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    92 00001CD5 0F85A1000000        <1>     jnz .notChar
    93 00001CDB 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    94 00001CE1 0F8495000000        <1>     jz .notChar
    95                              <1> ;Char devices only here
    96 00001CE7 E8314C0000          <1>     call dosPushRegs    ;Save context here
    97 00001CEC 488D1D4FE3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    98 00001CF3 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    99 00001CF6 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
   100 00001CF9 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
   101 00001CFC 890D(8BC40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
   102                              <1>     ;Now set up cx for status word
   103 00001D02 31C9                <1>     xor ecx, ecx
   104 00001D04 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   105 00001D07 7506                <1>     jne .skipBsySet
   106 00001D09 81C900020000        <1>     or ecx, drvBsyStatus
   107                              <1> .skipBsySet:
   108 00001D0F 66870D(8EC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   109                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   110 00001D16 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   111 00001D1D E8A5430000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   112 00001D22 668B3D(8EC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   113 00001D29 F7C700800000        <1>     test edi, drvErrStatus
   114 00001D2F 752D                <1>     jnz .error
   115                              <1> .ignoreRet:
   116 00001D31 803D(8DC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   117 00001D38 750C                <1>     jne .notNDRead
   118 00001D3A 8A05(98C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   119 00001D40 8805(10C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   120                              <1> .notNDRead:
   121 00001D46 8A25(8FC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   122 00001D4C F6D4                <1>     not ah
   123 00001D4E 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   124 00001D51 E8B04B0000          <1>     call dosPopRegs ;Get back the context
   125 00001D56 668B05(10C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   126                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001D5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> .error:
   128                              <1>     ;cl has flags
   129 00001D5E 88CC                <1>     mov ah, cl
   130 00001D60 E86A3E0000          <1>     call charDevErr
   131 00001D65 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   132 00001D67 750A                <1>     jne .errorIgnore
   133                              <1>     ;Fallthrough => Retry
   134 00001D69 E8984B0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   135 00001D6E E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   136                              <1> .errorIgnore:
   137                              <1>     ;Clear the busy bit in the status word
   138 00001D73 8025(8FC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   139 00001D7A EBB5                <1>     jmp short .ignoreRet
   140                              <1> .notChar:
   141                              <1> ;rsi -> SFT to read/write to
   142 00001D7C 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   143 00001D7E 7409                <1>     jz .makeDiskNetReadReq
   144 00001D80 FECC                <1>     dec ah
   145 00001D82 7421                <1>     jz .makeDiskNetNonDestReq
   146 00001D84 FECC                <1>     dec ah
   147 00001D86 7429                <1>     jz .makeDiskNetWriteReq
   148                              <1>     ;Else just return with ZF=NZ
   149                              <1>     return
    18                              <2> %%_ret:
    19 00001D88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .makeDiskNetReadReq:
   151 00001D89 E833000000          <1>     call .prepDiskNetIO
   152 00001D8E E8971F0000          <1>     call readBytes
   153 00001D93 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   154 00001D95 E850000000          <1>     call .cleanDiskNetIO
   155 00001D9A 8A05(10C50300)      <1>     mov al, byte [singleIObyt]
   156                              <1>     retnz
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DA0 75E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   157 00001DA2 B01A                <1>     mov al, EOF ;Else return an EOF
   158                              <1>     return
    18                              <2> %%_ret:
    19 00001DA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   159                              <1> .makeDiskNetNonDestReq:
   160                              <1>     ;Save the SFT file pointer position and read a char
   161 00001DA5 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   162 00001DA8 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   163 00001DAD 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   164                              <1>     return
    18                              <2> %%_ret:
    19 00001DB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> .makeDiskNetWriteReq:
   166 00001DB1 E80B000000          <1>     call .prepDiskNetIO
   167 00001DB6 E8A7220000          <1>     call writeBytes
   168 00001DBB E82A000000          <1>     call .cleanDiskNetIO
   169                              <1>     return
    18                              <2> %%_ret:
    19 00001DC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   170                              <1> .prepDiskNetIO:
   171                              <1> ;Set up the currentDTA to the internal buffer
   172                              <1> ;We use this here only so we can tweak it for this purpose
   173 00001DC1 8F05(DFC40300)      <1>     pop qword [altRet]
   174 00001DC7 E8514B0000          <1>     call dosPushRegs
   175 00001DCC FF35(0CC40300)      <1>     push qword [currentDTA]
   176 00001DD2 488D0D(10C50300)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   177 00001DD9 48890D(0CC40300)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   178 00001DE0 31C9                <1>     xor ecx, ecx
   179 00001DE2 FFC1                <1>     inc ecx ;IO 1 byte only
   180                              <1> .cleanDNIOReturn:
   181 00001DE4 FF25(DFC40300)      <1>     jmp qword [altRet]
   182                              <1> .cleanDiskNetIO:
   183 00001DEA 8F05(DFC40300)      <1>     pop qword [altRet]
   184 00001DF0 8F05(0CC40300)      <1>     pop qword [currentDTA]
   185 00001DF6 E80B4B0000          <1>     call dosPopRegs
   186 00001DFB EBE7                <1>     jmp short .cleanDNIOReturn
   187                              <1> 
   188                              <1> openSFT:
   189                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   190                              <1> ;Input: rdi = SFT pointer
   191 00001DFD E81B4B0000          <1>     call dosPushRegs
   192 00001E02 B00D                <1>     mov al, drvOPEN
   193 00001E04 EB07                <1>     jmp short openCloseCommon
   194                              <1> closeSFT:
   195                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   196 00001E06 E8124B0000          <1>     call dosPushRegs
   197 00001E0B B00E                <1>     mov al, drvCLOSE
   198                              <1> openCloseCommon:
   199                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   200 00001E0D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   201 00001E13 7469                <1>     jz .exit    ;Exit if so
   202 00001E15 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   203 00001E19 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   204 00001E1D 7512                <1>     jnz .charDev
   205                              <1>     ;Here a disk drive, rdi is a DPB ptr
   206 00001E1F 803D(C9C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   207 00001E26 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   208 00001E28 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   209 00001E2B 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   210 00001E2D 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   211                              <1> .charDev:
   212 00001E31 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   213 00001E37 7445                <1>     jz .exit    ;No, exit!
   214 00001E39 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   215 00001E3C 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   216 00001E43 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   217                              <1> .retryEP:
   218 00001E46 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   219 00001E49 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   220 00001E4C 50                  <1>     push rax    ;Save the dword
   221 00001E4D E879420000          <1>     call goDriver
   222 00001E52 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   223 00001E59 F7C700800000        <1>     test edi, drvErrStatus
   224 00001E5F 741C                <1>     jz .exitPop
   225                              <1>     ;Error here, check if char or block drive
   226 00001E61 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   227 00001E67 7404                <1>     jz .blockError
   228                              <1>     ;Char error here
   229 00001E69 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   230 00001E6B EB04                <1>     jmp short .errorCmn
   231                              <1> .blockError:
   232 00001E6D 88C8                <1>     mov al, cl  ;Move drive number into al
   233 00001E6F B406                <1>     mov ah, critData    ;Data on block dev error
   234                              <1> .errorCmn:
   235                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   236 00001E71 E8593D0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   237 00001E76 B001                <1>     mov al, critRetry   ;al returns user response
   238 00001E78 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   239 00001E7A 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   240 00001E7B EBC9                <1>     jmp short .retryEP  ;Reset
   241                              <1> .exitPop:
   242 00001E7D 58                  <1>     pop rax    
   243                              <1> .exit:
   244 00001E7E E8834A0000          <1>     call dosPopRegs
   245                              <1>     return
    18                              <2> %%_ret:
    19 00001E83 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    31                              <1> ;-----------------------------------------------------------------------:
    32                              <1> ;                  DOS default char functions live here                 :
    33                              <1> ;                                                                       :
    34                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    35                              <1> ;                                                                       :
    36                              <1> ;Rules for the naming of the DOS functions                              :
    37                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    38                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    39                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    40                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    41                              <1> ;                                                                       :
    42                              <1> ;-----------------------------------------------------------------------:
    43                              <1> 
    44                              <1> charIn_BE:     ;ah = 01h
    45                              <1> ;Return char that has been read and echoed in al
    46 00001E84 E87D010000          <1>     call charIn_B
    47 00001E89 50                  <1>     push rax
    48 00001E8A E804000000          <1>     call charOut_B.in    ;Output it to screen
    49 00001E8F 58                  <1>     pop rax
    50                              <1>     return
    18                              <2> %%_ret:
    19 00001E90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> charOut_B:       ;ah = 02h
    53                              <1> ;Bspace is regular cursor left, does not insert a blank
    54 00001E91 88D0                <1>     mov al, dl
    55                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    56 00001E93 3C20                <1>     cmp al, asciiCaret
    57 00001E95 0F8286000000        <1>     jb .control
    58 00001E9B 3C7F                <1>     cmp al, DEL ;DEL char?
    59 00001E9D 7406                <1>     je .skipCurs
    60 00001E9F FE05(C1C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    61                              <1> .skipCurs:
    62 00001EA5 FE05(C7C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    63 00001EAB 8025(C7C30300)03    <1>     and byte [vConErr], 3
    64 00001EB2 56                  <1>     push rsi
    65 00001EB3 7507                <1>     jnz .skipErrorCheck
    66 00001EB5 50                  <1>     push rax
    67 00001EB6 E897020000          <1>     call vConCtrlCheck
    68 00001EBB 58                  <1>     pop rax
    69                              <1> .skipErrorCheck:
    70 00001EBC E81F020000          <1>     call outputOnStdout
    71 00001EC1 5E                  <1>     pop rsi
    72 00001EC2 F605(C4C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    73                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EC9 74C5                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    74 00001ECB 53                  <1>     push rbx
    75 00001ECC 56                  <1>     push rsi
    76 00001ECD BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    77 00001ED2 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    78 00001ED7 0F82CE000000        <1>     jc auxOutCmn.exit
    79                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    80 00001EDD 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    81 00001EE1 F7C300800000        <1>     test ebx, devRedirDev
    82 00001EE7 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    83 00001EED F7C380000000        <1>     test ebx, devCharDev
    84 00001EF3 0F84B2000000        <1>     jz auxOutCmn.exit
    85 00001EF9 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    86 00001EFE E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    87 00001F03 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    88 00001F09 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    89 00001F0F 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    90 00001F15 C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91 00001F1C E98A000000          <1>     jmp auxOutCmn.netFileEP
    92                              <1> .control:
    93 00001F21 3C0D                <1>     cmp al, CR
    94 00001F23 7429                <1>     je .newline
    95 00001F25 3C08                <1>     cmp al, BSP
    96 00001F27 7431                <1>     je .back
    97 00001F29 3C09                <1>     cmp al, TAB
    98 00001F2B 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    99                              <1>     ;TAB key here
   100                              <1> .tab:
   101 00001F31 51                  <1>     push rcx
   102 00001F32 0FB60D(C1C20300)    <1>     movzx ecx, byte [vConCursPos]
   103 00001F39 80C9F8              <1>     or cl, ~7
   104 00001F3C F6D9                <1>     neg cl
   105 00001F3E 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   106                              <1> .tabloop:
   107 00001F41 B020                <1>     mov al, SPC
   108 00001F43 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
   109 00001F48 FEC9                <1>     dec cl
   110 00001F4A 75F5                <1>     jnz .tabloop
   111                              <1> .stopTab:
   112 00001F4C 59                  <1>     pop rcx
   113                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001F4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> .newline:
   115 00001F4E C605(C1C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   116 00001F55 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
   117                              <1> .back:
   118 00001F5A FE0D(C1C20300)      <1>     dec byte [vConCursPos]
   119 00001F60 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
   120                              <1> 
   121                              <1> auxIn_B:        ;ah = 03h
   122 00001F65 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   123 00001F6A BB03000000          <1>     mov ebx, 3
   124 00001F6F E8A5020000          <1>     call getCharDevSFT
   125                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F74 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   126                              <1> .auxloop:
   127 00001F76 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   128 00001F78 E831FDFFFF          <1>     call mainCharIO
   129 00001F7D 7408                <1>     jz .signalLoop
   130 00001F7F 30E4                <1>     xor ah, ah  ;Read the char in
   131 00001F81 E828FDFFFF          <1>     call mainCharIO
   132                              <1>     return
    18                              <2> %%_ret:
    19 00001F86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   133                              <1> .signalLoop:
   134 00001F87 E8A3010000          <1>     call callInt48h
   135 00001F8C EBE8                <1>     jmp short .auxloop
   136                              <1> 
   137                              <1> auxOut_B:       ;ah = 04h
   138 00001F8E 53                  <1>     push rbx
   139 00001F8F BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   140 00001F94 EB06                <1>     jmp short auxOutCmn
   141                              <1> prnOut_B:       ;ah = 05h
   142 00001F96 53                  <1>     push rbx
   143 00001F97 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   144                              <1> auxOutCmn: ;Auxilliary output device common 
   145 00001F9C 88D0                <1>     mov al, dl  ;Get the char into al
   146 00001F9E 50                  <1>     push rax
   147 00001F9F E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   148 00001FA4 58                  <1>     pop rax
   149 00001FA5 56                  <1>     push rsi
   150                              <1> .diskFileEP:
   151 00001FA6 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   152                              <1> .netFileEP:
   153                              <1> .exit:
   154 00001FAB 5E                  <1>     pop rsi
   155 00001FAC 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 00001FAD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 00001FAE 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 00001FB0 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 00001FB2 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 00001FB8 31DB                <1>     xor ebx, ebx    
   164 00001FBA E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FBF 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 00001FC1 488B2D(6FC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 00001FC8 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 00001FCA E8DFFCFFFF          <1>     call mainCharIO
   169 00001FCF E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 00001FD4 7507                <1>     jnz .readChar
   171 00001FD6 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 00001FDA 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 00001FDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 00001FDD 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 00001FE1 31DB                <1>     xor ebx, ebx
   180 00001FE3 E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FE8 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 00001FEA B401                <1>     mov ah, 01  ;ND read for char
   183 00001FEC E8BDFCFFFF          <1>     call mainCharIO
   184 00001FF1 750B                <1>     jnz .getChar
   185 00001FF3 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 00001FF5 CD4A                <1>     int 4Ah
   187 00001FF7 E833010000          <1>     call callInt48h
   188 00001FFC EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 00001FFE 30E4                <1>     xor ah, ah
   192 00002000 E8A9FCFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 00002005 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 00002006 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 00002007 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 0000200C 7543                <1>     jnz .pullChar
   201 0000200E 803D(D9D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 00002015 7507                <1>     jne .skiplookahead
   203 00002017 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 00002019 E890FCFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 0000201E B484                <1>     mov ah, 84h
   207 00002020 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 00002022 66813D(BADA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 0000202A FF                  <1>
   209 0000202B 751B                <1>     jne .skipClockRead
   210 0000202D E8EB480000          <1>     call dosPushRegs
   211 00002032 F8                  <1>     clc ;Clear CF, write primary header to backup
   212 00002033 E882000000          <1>     call swapPrimaryHeader
   213 00002038 E8D2060000          <1>     call readDateTimeRecord
   214 0000203D F9                  <1>     stc ;Set CF, write backup to primary header
   215 0000203E E877000000          <1>     call swapPrimaryHeader
   216 00002043 E8BE480000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 00002048 66FF05(BADA0300)    <1>     inc word [keybTicks]
   219 0000204F EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 00002051 30E4                <1>     xor ah, ah
   222 00002053 E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 00002058 5E                  <1>     pop rsi
   224 00002059 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 0000205B 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 0000205D C605(B9DA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 00002064 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 00002065 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 00002068 AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 00002069 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000206B 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 0000206D E821FEFFFF          <1>     call charOut_B.in
   238 00002072 EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 00002074 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 00002079 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000207B 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 0000207D FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 0000207F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 00002080 50                  <1>     push rax
   251 00002081 52                  <1>     push rdx
   252 00002082 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 00002084 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 00002089 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 0000208B B404                <1>     mov ah, 04h ;Flush input buffers
   256 0000208D E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 00002092 5A                  <1>     pop rdx
   259 00002093 58                  <1>     pop rax
   260 00002094 88C4                <1>     mov ah, al  ;Move function number into ah
   261 00002096 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 00002098 7507                <1>     jne .others
   263 0000209A 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 0000209D 7412                <1>     jz .bad ;Yes, exit
   265 0000209F EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 000020A1 3C01                <1>     cmp al, 01h
   268 000020A3 740F                <1>     je .callFunction
   269 000020A5 3C07                <1>     cmp al, 07h
   270 000020A7 740B                <1>     je .callFunction
   271 000020A9 3C08                <1>     cmp al, 08h
   272 000020AB 7407                <1>     je .callFunction
   273 000020AD 3C0A                <1>     cmp al, 0Ah
   274 000020AF 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 000020B1 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 000020B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 000020B4 FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 000020B5 E974470000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 000020BA 56                  <1>     push rsi
   291 000020BB 57                  <1>     push rdi
   292 000020BC 51                  <1>     push rcx
   293 000020BD 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 000020C6 00                  <1>
   294 000020C7 488D35(B5C40300)    <1>     lea rsi, primReqHdr
   295 000020CE 488D3D(8CDA0300)    <1>     lea rdi, bkupReqHdr
   296 000020D5 7303                <1>     jnc .read
   297 000020D7 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 000020DA F3A4                <1>     rep movsb   ;Swap
   300 000020DC 59                  <1>     pop rcx
   301 000020DD 5F                  <1>     pop rdi
   302 000020DE 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 000020DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 000020E0 53                  <1>     push rbx
   308 000020E1 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 000020E6 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 000020EB 7217                <1>     jc .exit
   311 000020ED 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 000020F3 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 000020F5 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 000020F9 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 000020FF 7405                <1>     jz .notCharDevOrFast
   316 00002101 CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 00002103 F8                  <1>     clc
   319                              <1> .exit:
   320 00002104 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 00002105 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 00002106 E809000000          <1>     call outputOnSFT
   324 0000210B 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 0000210C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 0000210D E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002112 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 00002114 50                  <1>     push rax
   336 00002115 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 00002117 E892FBFFFF          <1>     call mainCharIO
   338 0000211C 58                  <1>     pop rax
   339 0000211D 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 0000211F B402                <1>     mov ah, 02h ;Output char in al
   341 00002121 E888FBFFFF          <1>     call mainCharIO
   342 00002126 F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 00002127 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 00002128 E802000000          <1>     call callInt48h
   346 0000212D EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 0000212F 9C                  <1>     pushfq
   351 00002130 F605(89C40300)FF    <1>     test byte [int48Flag], -1
   352 00002137 7417                <1>     jz .exit    ;If zero, not safe
   353 00002139 F605(FCC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 00002140 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 00002142 FF35(89C40300)      <1>     push qword [int48Flag] 
   357 00002148 CD48                <1>     int 48h
   358 0000214A 8F05(89C40300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 00002150 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 00002151 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 00002152 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 00002157 53                  <1>     push rbx
   384 00002158 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 0000215A E8BA000000          <1>     call getCharDevSFT
   386 0000215F 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002160 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 00002162 B401                <1>     mov ah, 01  ;Non destructively read CON
   389 00002164 E845FBFFFF          <1>     call mainCharIO
   390 00002169 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 0000216B 3C13                <1>     cmp al, DC3 ;^S ?
   393 0000216D 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 0000216F 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 00002171 E838FBFFFF          <1>     call mainCharIO
   396 00002176 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 0000217B 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 0000217D 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 0000217F 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 00002181 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 00002183 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 00002184 F615(C4C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 0000218A 53                  <1>     push rbx
   407 0000218B BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 00002190 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 00002195 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002196 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 00002198 57                  <1>     push rdi
   412 00002199 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 0000219C 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 000021A2 741D                <1>     jz .notNet
   415 000021A4 50                  <1>     push rax
   416 000021A5 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 000021AA CD4F                <1>     int 4Fh
   418 000021AC 58                  <1>     pop rax
   419 000021AD 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 000021AF C605(C4C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 000021B6 50                  <1>     push rax
   423 000021B7 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 000021BC CD4F                <1>     int 4Fh
   425 000021BE 58                  <1>     pop rax
   426 000021BF EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 000021C1 803D(C4C30300)00    <1>     cmp byte [printEcho], 00
   431 000021C8 7507                <1>     jnz .echoOn
   432 000021CA E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 000021CF EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 000021D1 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 000021D6 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 000021D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 000021D8 E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 000021DD B401                <1>     mov ah, 01h ;ND read
   443 000021DF E8CAFAFFFF          <1>     call mainCharIO
   444 000021E4 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 000021E6 53                  <1>     push rbx
   447 000021E7 31DB                <1>     xor ebx, ebx
   448 000021E9 E82B000000          <1>     call getCharDevSFT
   449 000021EE 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021EF 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 000021F1 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 000021F3 E8B6FAFFFF          <1>     call mainCharIO
   453 000021F8 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 000021FA 7514                <1>     jnz .checkBreak2
   455 000021FC 803D(B9DA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 00002203 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 00002209 C605(B9DA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 00002210 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002212 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 00002214 E96F3A0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 00002219 F605(88C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 00002220 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 00002222 57                  <1>     push rdi
   473 00002223 E8DA230000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 00002228 4889FE              <1>     mov rsi, rdi
   475 0000222B 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 0000222C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 0000222D 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 00002233 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 00002235 488B35(12C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 0000223C F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 0000223D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 0000223E 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 00002240 0F834DFCFFFF        <1>     jae charOut_B.in
   494 00002246 3C09                <1>     cmp al, TAB
   495 00002248 0F8445FCFFFF        <1>     je charOut_B.in
   496 0000224E 3C15                <1>     cmp al, NAK
   497 00002250 0F843DFCFFFF        <1>     je charOut_B.in
   498 00002256 3C14                <1>     cmp al, DC4
   499 00002258 0F8435FCFFFF        <1>     je charOut_B.in
   500 0000225E 50                  <1>     push rax
   501 0000225F B05E                <1>     mov al, "^" ;Get caret in place
   502 00002261 E82DFCFFFF          <1>     call charOut_B.in
   503 00002266 58                  <1>     pop rax
   504 00002267 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 00002269 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 0000226E B00D                <1>     mov al, CR
   508 00002270 E81EFCFFFF          <1>     call charOut_B.in
   509 00002275 B00A                <1>     mov al, LF
   510 00002277 E917FCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 0000227C 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002283 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 00002285 53                  <1>     push rbx
   520 00002286 56                  <1>     push rsi
   521 00002287 488B35(59C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 0000228E C705(E1C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 00002296 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 00002298 C605(DFC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 0000229F 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   527 000022A6 E8203E0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 000022AB 66F705(E2C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 000022B3 02                  <1>
   530 000022B4 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 000022B6 30C0                <1>     xor al, al
   533 000022B8 5E                  <1>     pop rsi
   534 000022B9 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 000022BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 000022BB 8A05(ECC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 000022C1 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 000022C3 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 000022C5 C705(E1C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 000022CD 0000                <1>
   543 000022CF C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 000022D6 C705(F5C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 000022DE 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 000022E0 488D05(ECC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 000022E7 488905(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 000022EE E8D83D0000          <1>     call goDriver   ;RSI and RBX as before
   550 000022F3 E990390000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 000022F8 57                  <1>     push rdi
   555 000022F9 C605(88C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 00002300 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 00002307 48893D(12C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 0000230E 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 0000230F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 00002310 C605(88C40300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 00002317 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 00002318 4889D6              <1>     mov rsi, rdx
   583 0000231B 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 0000231D 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000231F 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 00002321 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 00002324 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 00002326 7606                <1>     jbe .avoidcheck
   589 00002328 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 0000232C 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 0000232E 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 00002330 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 00002333 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 00002335 8A05(C1C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 0000233B 8805(C2C20300)      <1>     mov byte [vConCurCnt], al
   599 00002341 56                  <1>     push rsi    ;Push user buffer address
   600 00002342 488D3D(C3C20300)    <1>     lea rdi, vConBuffer
   601 00002349 C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 00002350 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 00002355 3C0A                <1>     cmp al, LF
   605 00002357 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 00002359 E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 0000235E 3C06                <1>     cmp al, ACK
   610 00002360 74F7                <1>     je .mainLoop2   ;Get another char
   611 00002362 3A05FADCFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 00002368 0F8426010000        <1>     je .escape
   613 0000236E 3C7F                <1>     cmp al, DEL
   614 00002370 0F8489000000        <1>     je .delete
   615 00002376 3C08                <1>     cmp al, BSP
   616 00002378 0F8481000000        <1>     je .delete
   617 0000237E 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 00002380 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 00002385 3C15                <1>     cmp al, NAK
   621 00002387 9090909090          <1>     db 5 dup (90h)
   622 0000238C 3C0D                <1>     cmp al, CR
   623 0000238E 744C                <1>     je .carriageReturn
   624 00002390 3C0A                <1>     cmp al, LF
   625 00002392 7461                <1>     je .lineFeed
   626 00002394 3A05C9DCFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 0000239A 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 0000239C 38D6                <1>     cmp dh, dl
   630 0000239E 731C                <1>     jae .bufOflw
   631 000023A0 AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 000023A1 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 000023A3 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 000023A8 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 000023AF 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 000023B1 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 000023B3 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 000023B5 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 000023B8 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 000023BA EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 000023BC B007                <1>     mov al, BEL ;Sound the bell
   647 000023BE E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 000023C3 EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 000023C5 B05C                <1>     mov al, "\"
   652 000023C7 E8C7FAFFFF          <1>     call charOut_B.in
   653 000023CC 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 000023CD E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 000023D2 E85AFBFFFF          <1>     call charOut_B.tab
   658 000023D7 E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 000023DC AA                  <1>     stosb
   661 000023DD E8B1FAFFFF          <1>     call charOut_B.in
   662 000023E2 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 000023E3 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 000023E6 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 000023E8 488D35(C3C20300)    <1>     lea rsi, vConBuffer
   667 000023EF 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 000023F2 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 000023F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 000023F5 E874FEFFFF          <1>     call printCRLF
   672 000023FA E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 000023FF E805000000          <1>     call .removeChar
   675 00002404 E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 00002409 84F6                <1>     test dh, dh ;Is char count 0?
   678 0000240B 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 0000240D E868000000          <1>     call .vConErase
   680 00002412 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 00002414 3C20                <1>     cmp al, SPC
   682 00002416 7311                <1>     jae .normalChar
   683 00002418 3C09                <1>     cmp al, TAB
   684 0000241A 7420                <1>     je .eraTab
   685 0000241C 3C15                <1>     cmp al, NAK
   686 0000241E 7409                <1>     je .normalChar
   687 00002420 3C14                <1>     cmp al, DC4
   688 00002422 7405                <1>     je .normalChar
   689 00002424 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 00002429 803D(F3C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002430 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 00002432 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002434 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 00002436 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 00002439 FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 0000243B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 0000243C 57                  <1>     push rdi
   702 0000243D 48FFCF              <1>     dec rdi
   703 00002440 FD                  <1>     std ;Go backwards
   704 00002441 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 00002444 B020                <1>     mov al, SPC
   706 00002446 53                  <1>     push rbx
   707 00002447 BB07000000          <1>     mov ebx, 7
   708 0000244C 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 0000244F AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 00002450 7608                <1>     jbe .notChar    ;No, skip handling
   712 00002452 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 00002456 740A                <1>     je .tabChar
   714 00002458 FECB                <1>     dec bl
   715                              <1> .notChar:
   716 0000245A E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 0000245C 2A1D(C2C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 00002462 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 00002464 00D9                <1>     add cl, bl
   722 00002466 80E107              <1>     and cl, 7
   723 00002469 5B                  <1>     pop rbx
   724 0000246A 5F                  <1>     pop rdi
   725 0000246B FC                  <1>     cld
   726 0000246C 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 0000246E E80C000000          <1>     call .vConEraseNoDec
   730 00002473 E2F9                <1>     loop .vConDelTab
   731 00002475 E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 0000247A 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 0000247D FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 0000247F B008                <1>     mov al, BSP ;Move cursor back
   739 00002481 E80DFAFFFF          <1>     call charOut_B.in
   740 00002486 B020                <1>     mov al, SPC ;Replace with a space
   741 00002488 E806FAFFFF          <1>     call charOut_B.in
   742 0000248D B008                <1>     mov al, BSP ;Move cursor back again
   743 0000248F E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 00002494 FF25C0DBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 0000249A E846000000          <1>     call .fCommon2
   751 0000249F EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 000024A1 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 000024A4 28F9                <1>     sub cl, bh  ;Sub our current position
   755 000024A6 EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 000024A8 B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 000024AD C605(F3C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 000024B4 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 000024B6 0F849DFEFFFF        <1>     je .mainLoop2
   762 000024BC 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 000024BE 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 000024C4 AC                  <1>     lodsb
   766 000024C5 AA                  <1>     stosb
   767 000024C6 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 000024CB FEC7                <1>     inc bh
   769 000024CD FEC6                <1>     inc dh
   770 000024CF E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 000024D1 E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 000024D6 E80A000000          <1>     call .fCommon2
   774 000024DB 4801CE              <1>     add rsi, rcx
   775 000024DE 00CF                <1>     add bh, cl
   776 000024E0 E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 000024E5 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 000024EA 3A0572DBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 000024F0 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 000024F2 E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 000024F7 59                  <1>     pop rcx ;Get original return address from stack
   786 000024F8 E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 000024FD 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 00002500 28F9                <1>     sub cl, bh
   790 00002502 74F3                <1>     jz .fforceExit
   791 00002504 FFC9                <1>     dec ecx
   792 00002506 74EF                <1>     jz .fforceExit
   793 00002508 57                  <1>     push rdi
   794 00002509 4889F7              <1>     mov rdi, rsi
   795 0000250C 48FFC7              <1>     inc rdi
   796 0000250F F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 00002511 5F                  <1>     pop rdi
   798 00002512 75E3                <1>     jne .fforceExit ;If char not found, return
   799 00002514 F6D1                <1>     not cl
   800 00002516 00D9                <1>     add cl, bl
   801 00002518 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 0000251A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 0000251B B040                <1>     mov al, "@"
   805 0000251D E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 00002522 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 00002523 57                  <1>     push rdi
   808 00002524 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 00002529 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 0000252A 88F3                <1>     mov bl, dh
   811 0000252C E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 00002531 B01A                <1>     mov al, EOF
   815 00002533 E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 00002538 8A0524DBFFFF        <1>     mov al, byte [extESC]
   819 0000253E E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 00002543 F615(F3C60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 00002549 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 0000254A 38DF                <1>     cmp bh, bl
   825 0000254C 0F8407FEFFFF        <1>     je .mainLoop2
   826 00002552 FEC7                <1>     inc bh
   827 00002554 48FFC6              <1>     inc rsi
   828 00002557 E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 0000255C E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 00002561 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 00002566 57                  <1>     push rdi    ;Preserve rdi
   835 00002567 488D3DF6DAFFFF      <1>     lea rdi, extKeyTbl
   836 0000256E 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 0000256F AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 00002570 740D                <1>     je .charFound
   842 00002572 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 00002574 7414                <1>     jz .notInTable
   844 00002576 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 0000257D EBF0                <1>     jmp short .lp
   846                              <1> .charFound:
   847 0000257F 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 00002580 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 00002584 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 00002587 5F                  <1>     pop rdi
   851 00002588 FFE1                <1>     jmp rcx
   852                              <1> .notInTable:
   853 0000258A 59                  <1>     pop rcx ;Realign stack
   854 0000258B 59                  <1>     pop rcx
   855 0000258C E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    31                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    32                              <1> ;Major kernel date time functions and subroutines
    33                              <1> 
    34                              <1> getDate:           ;ah = 2Ah
    35 00002591 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    36 00002596 E83E3F0000          <1>     call getUserRegs
    37 0000259B 668B15(82C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    38                              <1> ;    mov dh, byte [monthOfYear]
    39 000025A2 0FB60D(84C40300)    <1>     movzx ecx, byte [years]
    40 000025A9 8A05(87C40300)      <1>     mov al, byte [dayOfWeek]
    41 000025AF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    42 000025B3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    43                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000025B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                              <1> setDate:           ;ah = 2Bh
    45                              <1> ;	CX = year (1980-2099)
    46                              <1> ;   DH = month (1-12)
    47                              <1> ;	DL = day (1-31)
    48 000025B8 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    49                              <1>     return
    18                              <2> %%_ret:
    19 000025BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> getTime:           ;ah = 2Ch
    51 000025BE E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    52 000025C3 E8113F0000          <1>     call getUserRegs
    53 000025C8 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    54 000025CF 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    55 000025D6 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    56 000025DA 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    57                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000025DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> setTime:           ;ah = 2Dh
    59                              <1> ;   CH = hour (0-23)
    60                              <1> ;	CL = minutes (0-59)
    61                              <1> ;	DH = seconds (0-59)
    62                              <1> ;	DL = hundredths (0-99)
    63 000025DF 80FD17              <1>     cmp ch, 23
    64 000025E2 7749                <1>     ja .exitBad
    65 000025E4 80F93B              <1>     cmp cl, 59
    66 000025E7 7744                <1>     ja .exitBad
    67 000025E9 80FE3B              <1>     cmp dh, 59
    68 000025EC 773F                <1>     ja .exitBad
    69 000025EE 80FA63              <1>     cmp dl, 99
    70 000025F1 773A                <1>     ja .exitBad
    71                              <1> ;Now we read date (updating internal count if necessary)
    72 000025F3 E817010000          <1>     call readDateTimeRecord
    73 000025F8 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    74 000025FF 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    75 00002606 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    76 00002609 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    77 0000260D 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    78 00002611 B906000000          <1>     mov ecx, 6
    79 00002616 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    80 00002619 E8593D0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    81 0000261E 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    82 00002625 E8A13A0000          <1>     call goDriver
    83 0000262A 30C0                <1>     xor al, al
    84                              <1>     return
    18                              <2> %%_ret:
    19 0000262C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> .exitBad:
    86 0000262D B0FF                <1>     mov al, -1
    87                              <1>     return
    18                              <2> %%_ret:
    19 0000262F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> ;------------------------
    89                              <1> ;   Utility functions   :
    90                              <1> ;------------------------
    91                              <1> writeDate:
    92 00002630 6681F97800          <1>     cmp cx, 120
    93 00002635 0F83D1000000        <1>     jae .exitBad
    94 0000263B 80FE0C              <1>     cmp dh, 12
    95 0000263E 0F87C8000000        <1>     ja .exitBad
    96 00002644 80FA1F              <1>     cmp dl, 31
    97 00002647 0F87BF000000        <1>     ja .exitBad
    98 0000264D 668915(82C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    99                              <1>     ;mov byte [monthOfYear], dh
   100 00002654 880D(84C40300)      <1>     mov byte [years], cl    ;Save the years count
   101 0000265A E878010000          <1>     call setDaysInFeb   ;Set days in february this year
   102 0000265F 88CD                <1>     mov ch, cl ;Get years count in ch
   103 00002661 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   104 00002664 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   105 00002667 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   106 0000266A BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   107 0000266F F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   108                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   109 00002671 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   110 00002674 67E316              <1>     jecxz .addDay    ;Skip adding years
   111 00002677 056E010000          <1>     add eax, 366    ;First add for a leap year
   112                              <1> .addYears:
   113 0000267C FFC9                <1>     dec ecx
   114 0000267E 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   115 00002681 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   116 00002686 EBF4                <1>     jmp short .addYears
   117                              <1> .addLeap:
   118 00002688 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   119                              <1> .addDay:
   120 0000268D 89C2                <1>     mov edx, eax    ;Save this number in edx
   121                              <1>     ;Now to add day offset
   122 0000268F 0FB60D(83C40300)    <1>     movzx ecx, byte [monthOfYear]
   123 00002696 488D35E8D9FFFF      <1>     lea rsi, monthsTbl
   124                              <1> .addDaysInMonth:
   125 0000269D FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   126 0000269F 67E308              <1>     jecxz .addMonthOffset
   127 000026A2 AC                  <1>     lodsb   ;Get the number of days in the month in al
   128 000026A3 0FB6C0              <1>     movzx eax, al
   129 000026A6 01C2                <1>     add edx, eax
   130 000026A8 EBF3                <1>     jmp short .addDaysInMonth
   131                              <1> .addMonthOffset:
   132 000026AA 0FB60D(82C40300)    <1>     movzx ecx, byte [dayOfMonth]
   133 000026B1 FFC9                <1>     dec ecx
   134 000026B3 01CA                <1>     add edx, ecx    ;Add month offset
   135                              <1>     ;edx has the number of days since 01/01/1980
   136 000026B5 668915(85C40300)    <1>     mov word [daysOffset], dx   ;Store!
   137                              <1> ;Now read and then write CLOCKrecrd
   138 000026BC 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 000026C3 B906000000          <1>     mov ecx, 6
   140 000026C8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141 000026CB E8B23C0000          <1>     call primReqReadSetup   ;rbx now points to request header
   142 000026D0 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   143 000026D7 E8EF390000          <1>     call goDriver
   144                              <1> ;Now we change daycount and write it back
   145 000026DC 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   146 000026E3 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   147 000026EA 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   148 000026ED B906000000          <1>     mov ecx, 6
   149 000026F2 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   150 000026F5 E87D3C0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   151 000026FA 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   152 00002701 E8C5390000          <1>     call goDriver
   153 00002706 E8AE000000          <1>     call setDayofWeek
   154                              <1>     return
    18                              <2> %%_ret:
    19 0000270B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .exitBad:
   156 0000270C B0FF                <1>     mov al, -1
   157                              <1>     return
    18                              <2> %%_ret:
    19 0000270E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> readDateTimeRecord:
   160                              <1> ;Will read the clock using the primary request header
   161                              <1> ;Preserves all regs except eax and flags
   162 0000270F 53                  <1>     push rbx
   163 00002710 51                  <1>     push rcx
   164 00002711 52                  <1>     push rdx
   165 00002712 56                  <1>     push rsi
   166 00002713 55                  <1>     push rbp
   167                              <1> 
   168 00002714 66C705(BADA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   168 0000271C 00                  <1>
   169 0000271D 488D1D(0AC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   170 00002724 B906000000          <1>     mov ecx, 6
   171 00002729 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   172                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   173                              <1> ; rbx = Data storage buffer ptr
   174                              <1> ; ecx = Number of sectors to transfer
   175                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   176 0000272C E8513C0000          <1>     call primReqReadSetup   ;rbx now points to request header
   177 00002731 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   178 00002738 E88E390000          <1>     call goDriver
   179 0000273D 0FB705(0AC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   180                              <1> ;Here we have:  ax = Days since 1/1/1980
   181                              <1> ;Updates the internal date fields
   182                              <1> ;Internal time fields are in the clock record
   183                              <1> ;So now we check if the number of days since 1980 are the same.
   184                              <1> ;If so, we can skip updating.
   185 00002744 663B05(85C40300)    <1>     cmp ax, word [daysOffset]
   186 0000274B 7466                <1>     je .exit    ;Return if equal
   187 0000274D 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   188 00002752 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   189 00002754 668905(85C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   190                              <1>     ;Now want to update years, month and day fields
   191                              <1>     ;ax has the number of days since 01/01/1980
   192                              <1>     ;Get days in a 4 year period
   193 0000275B BBB5050000          <1>     mov ebx, 365*4 + 1
   194 00002760 31D2                <1>     xor edx, edx
   195 00002762 89D1                <1>     mov ecx, edx  ;Zero ecx
   196 00002764 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   197                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   198                              <1>     ;edx has offset into current 4 year bunch
   199 00002766 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   200 0000276B 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   201 0000276D 7210                <1>     jb .foundBunch
   202 0000276F 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   203 00002771 FFC1                <1>     inc ecx
   204 00002773 FFCB                <1>     dec ebx ;Number of days in a normal year
   205                              <1> .findBunch:
   206 00002775 39DA                <1>     cmp edx, ebx
   207 00002777 7206                <1>     jb .foundBunch
   208 00002779 29DA                <1>     sub edx, ebx
   209 0000277B FFC1                <1>     inc ecx
   210 0000277D EBF6                <1>     jmp short .findBunch
   211                              <1> .foundBunch:
   212                              <1>     ;If ecx = 0, february has 29 days!
   213                              <1>     ;eax has number of four year bunches elapsed since 1980
   214 0000277F C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   215 00002782 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   216                              <1>     ;ecx now has the number of years since 1980
   217 00002784 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   218                              <1> ;edx has number of days into the year we are in
   219                              <1> ;eax has number of days in Feb for this year
   220 00002789 488D35F5D8FFFF      <1>     lea rsi, monthsTbl
   221 00002790 31C9                <1>     xor ecx, ecx    ;Use as month counter
   222                              <1> .monthSearch:
   223 00002792 FFC1                <1>     inc ecx ;Start from 1
   224 00002794 AC                  <1>     lodsb   ;Get value in al and inc rsi
   225 00002795 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   226 00002798 39C2                <1>     cmp edx, eax
   227 0000279A 7204                <1>     jb .monthFound
   228 0000279C 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   229 0000279E EBF2                <1>     jmp short .monthSearch
   230                              <1> .monthFound:
   231                              <1>     ;cl has the month (01h-0Ch)
   232                              <1>     ;dl has the day of the month - 1
   233 000027A0 FFC2                <1>     inc edx
   234 000027A2 880D(83C40300)      <1>     mov byte [monthOfYear], cl
   235 000027A8 8815(82C40300)      <1>     mov byte [dayOfMonth], dl
   236 000027AE E806000000          <1>     call setDayofWeek
   237                              <1> .exit:
   238 000027B3 5D                  <1>     pop rbp
   239 000027B4 5E                  <1>     pop rsi
   240 000027B5 5A                  <1>     pop rdx
   241 000027B6 59                  <1>     pop rcx
   242 000027B7 5B                  <1>     pop rbx
   243                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000027B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> setDayofWeek:
   246                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   247 000027B9 0FB705(85C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   248 000027C0 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   249                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   250 000027C5 31D2                <1>     xor edx, edx
   251 000027C7 B907000000          <1>     mov ecx, 7   
   252 000027CC F7F1                <1>     div ecx  ;Get remainder in dl
   253 000027CE 8815(87C40300)      <1>     mov byte [dayOfWeek], dl
   254                              <1> ;Set ZF to indicate all ok
   255 000027D4 31C0                <1>     xor eax, eax
   256                              <1>     return
    18                              <2> %%_ret:
    19 000027D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   259                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   260                              <1> ;Input: cl = Year - 1980
   261                              <1> ;Output: al = Number of days in February
   262 000027D7 880D(84C40300)      <1>     mov byte [years], cl    ;Save this figure
   263 000027DD F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   264 000027E0 51                  <1>     push rcx
   265 000027E1 57                  <1>     push rdi
   266 000027E2 B81C000000          <1>     mov eax, 28  ;Usual days in february
   267 000027E7 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   268 000027EC 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   269 000027EF 488D3D90D8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   270 000027F6 AA                  <1>     stosb   ;Store the word in rdi
   271 000027F7 5F                  <1>     pop rdi
   272 000027F8 59                  <1>     pop rcx
   273                              <1>     return
    18                              <2> %%_ret:
    19 000027F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   274                              <1> 
   275                              <1> getDirDTwords:
   276                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   277                              <1> ; High word of eax = Date
   278                              <1> ; Low word of eax = Time
   279                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   280                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   281                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   282                              <1> 
   283                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   284                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   285                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   286                              <1> ;Preserves all registers except eax
   287 000027FA 53                  <1>     push rbx
   288 000027FB 0FB61D(0FC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   289 00002802 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   290 00002804 89D8                <1>     mov eax, ebx
   291 00002806 0FB61D(0CC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   292 0000280D C1E305              <1>     shl ebx, 5
   293 00002810 09D8                <1>     or eax, ebx
   294 00002812 0FB61D(0DC50300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   295 00002819 C1E30B              <1>     shl ebx, 11
   296 0000281C 09D8                <1>     or eax, ebx
   297 0000281E 0FB61D(82C40300)    <1>     movzx ebx, byte [dayOfMonth]
   298 00002825 C1E310              <1>     shl ebx, 16
   299 00002828 09D8                <1>     or eax, ebx
   300 0000282A 0FB61D(83C40300)    <1>     movzx ebx, byte [monthOfYear]
   301 00002831 C1E315              <1>     shl ebx, 21
   302 00002834 09D8                <1>     or eax, ebx
   303 00002836 0FB61D(84C40300)    <1>     movzx ebx, byte [years]
   304 0000283D C1E319              <1>     shl ebx, 25
   305 00002840 09D8                <1>     or eax, ebx
   306 00002842 5B                  <1>     pop rbx
   307                              <1>     return
    18                              <2> %%_ret:
    19 00002843 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   309                              <1> ;Returns edx = time
   310                              <1> ;        eax = date
   311                              <1> ; Formally ax and dx but we clear the upper words
   312 00002844 E8C6FEFFFF          <1>     call readDateTimeRecord
   313 00002849 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   314 0000284E 31D2                <1>     xor edx, edx
   315 00002850 6689C2              <1>     mov dx, ax  ;Save time
   316 00002853 C1E810              <1>     shr eax, 10h    ;Get date into rax
   317                              <1>     return
    18                              <2> %%_ret:
    19 00002856 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    33                              <1> ;FCB functions.
    34                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
    35                              <1> ;On FAT 32 volumes things are a bit more restricted.
    36                              <1> 
    37                              <1> ;The following functions ARE currently supported for general FAT 32 files:
    38                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
    39                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
    40                              <1> ;   parseFilename       (I mean, this function is useful anyway)
    41                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    42                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    43                              <1> ;   findNextFileFCB     (ditto the above)
    44                              <1> 
    45                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    46                              <1> ;   openFCB
    47                              <1> ;   closeFCB
    48                              <1> ;   createFCB
    49                              <1> ;   randomReadFCB
    50                              <1> ;   randomWriteFCB
    51                              <1> ;   randBlockReadFCB
    52                              <1> ;   randBlockWriteFCB
    53                              <1> ;   sequentialReadFCB
    54                              <1> ;   sequentialWriteFCB
    55                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    56                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    57                              <1> 
    58                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    59                              <1> ;Reading and Writing to the Volume label will silently return ok.
    60                              <1> ;Volume labels will be editable by being created/opened/closed.
    61                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    62                              <1> ; root directory always.
    63                              <1> 
    64                              <1> findFirstFileFCB:  ;ah = 11h
    65                              <1> ;Input: rdx -> FCB
    66 00002857 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    67 0000285E 4889D6              <1>     mov rsi, rdx
    68 00002861 803EFF              <1>     cmp byte [rsi], -1
    69 00002864 7407                <1>     je .notExt1
    70 00002866 4881C607000000      <1>     add rsi, exFcb.driveNum
    71                              <1> .notExt1:
    72 0000286D 0FB606              <1>     movzx eax, byte [rsi]
    73 00002870 50                  <1>     push rax    ;Push on stack the drive number
    74 00002871 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    75 00002878 E804030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    76 0000287D 7306                <1>     jnc .fcbOk
    77 0000287F 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    78 00002880 E9DA400000          <1>     jmp fcbErrExit
    79                              <1> .fcbOk:
    80 00002885 488D3D(12C50300)    <1>     lea rdi, buffer1
    81 0000288C E856E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    82 00002891 7306                <1>     jnc .fileFound
    83 00002893 5B                  <1>     pop rbx
    84 00002894 E9C6400000          <1>     jmp fcbErrExit
    85                              <1> .fileFound:
    86                              <1> ;Now we build an FFBlock internally
    87 00002899 488D3D(23C60300)    <1>     lea rdi, dosffblock
    88 000028A0 57                  <1>     push rdi
    89 000028A1 E86BE6FFFF          <1>     call setupFFBlock
    90 000028A6 5E                  <1>     pop rsi
    91                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    92 000028A7 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB]
    93 000028AE F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
    94 000028B5 7407                <1>     jz .notExt2
    95 000028B7 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    96                              <1> .notExt2:
    97 000028BE 5B                  <1>     pop rbx ;Get back the drive number in bl
    98 000028BF 85DB                <1>     test ebx, ebx
    99 000028C1 7509                <1>     jnz .notCurrentDrive
   100 000028C3 0FB61D(26C40300)    <1>     movzx ebx, byte [currentDrv]
   101 000028CA FFC3                <1>     inc ebx ;Turn into a 1 based drive number
   102                              <1> .notCurrentDrive:
   103 000028CC AC                  <1>     lodsb   ;Get search drive from FFBlock in al
   104 000028CD 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
   105 000028D0 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
   106 000028D5 A5                  <1>     movsd
   107 000028D6 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
   108 000028D7 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
   109 000028DE 488D35(4EC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
   110 000028E5 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   111 000028EC 7412                <1>     jz .notExt3
   112 000028EE B8FFFFFFFF          <1>     mov eax, -1
   113 000028F3 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
   114 000028F4 FFC0                <1>     inc eax ;Make it zero
   115 000028F6 AB                  <1>     stosd
   116 000028F7 AA                  <1>     stosb   ;Store 5 bytes of zero
   117 000028F8 0FB605(ECC60300)    <1>     movzx eax, byte [searchAttr]
   118 000028FF AA                  <1>     stosb   ;Store the search attributes
   119                              <1> .notExt3:
   120 00002900 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
   121 00002902 AA                  <1>     stosb
   122 00002903 B904000000          <1>     mov ecx, fatDirEntry_size/8
   123 00002908 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
   124 0000290B E94C400000          <1>     jmp fcbGoodExit
   125                              <1>     
   126                              <1> findNextFileFCB:   ;ah = 12h
   127 00002910 488915(0AC70300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
   128 00002917 C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
   129 0000291E C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
   130 00002925 4889D6              <1>     mov rsi, rdx
   131                              <1> 
   132 00002928 803EFF              <1>     cmp byte [rsi], -1
   133 0000292B 7514                <1>     jne .notExt
   134 0000292D FE0D(EBC60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   135 00002933 4881C606000000      <1>     add rsi, exFcb.attribute
   136 0000293A AC                  <1>     lodsb   ;Get search attr in al
   137 0000293B 8805(ECC60300)      <1>     mov byte [searchAttr], al
   138                              <1> .notExt:
   139                              <1>     ;rsi points to drive letter
   140 00002941 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   141 00002948 31C0                <1>     xor eax, eax
   142 0000294A AC                  <1>     lodsb   ;Get the FCB drive letter
   143 0000294B 50                  <1>     push rax    ;Push drive letter on the stack
   144 0000294C 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   145 0000294F AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   146 00002950 B905000000          <1>     mov ecx, 5
   147 00002955 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   148 00002957 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save original currentDTA
   149 0000295D 488D3D(23C60300)    <1>     lea rdi, dosffblock
   150 00002964 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   151 00002965 8F05(0CC40300)      <1>     pop qword [currentDTA]
   152 0000296B E81FE2FFFF          <1>     call findNextMain
   153 00002970 8F05(0CC40300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   154 00002976 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   155 0000297C 488B3D(0AC70300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   156 00002983 F607FF              <1>     test byte [rdi], -1
   157 00002986 7407                <1>     jz .notExt2
   158 00002988 4881C707000000      <1>     add rdi, exFcb.driveNum
   159                              <1> .notExt2:
   160 0000298F 5B                  <1>     pop rbx ;Get the drive letter back into bl
   161 00002990 881F                <1>     mov byte [rdi], bl
   162 00002992 E9C83F0000          <1>     jmp fcbErrExit  ;And exit bad
   163                              <1> 
   164                              <1> deleteFileFCB:     ;ah = 13h
   165 00002997 488D3D(12C50300)    <1>     lea rdi, buffer1
   166 0000299E 57                  <1>     push rdi
   167 0000299F E8DD010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   168 000029A4 5F                  <1>     pop rdi ;Point rdi to the canonised path
   169 000029A5 0F82B43F0000        <1>     jc fcbErrExit
   170 000029AB E837E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   171 000029B0 0F82A93F0000        <1>     jc fcbErrExit
   172 000029B6 E8680E0000          <1>     call outerDeleteMain
   173 000029BB 0F829E3F0000        <1>     jc fcbErrExit
   174 000029C1 E9963F0000          <1>     jmp fcbGoodExit
   175                              <1> 
   176                              <1> renameFileFCB:     ;ah = 17h
   177                              <1> ;Input: rdx -> User FCB
   178 000029C6 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   179                              <1>     ;First we get the drive letter 
   180 000029CD 4889D6              <1>     mov rsi, rdx
   181 000029D0 803EFF              <1>     cmp byte [rsi], -1
   182 000029D3 7507                <1>     jne .notExt
   183 000029D5 4881C607000000      <1>     add rsi, exFcb.driveNum
   184                              <1> .notExt:
   185 000029DC 31C0                <1>     xor eax, eax
   186 000029DE AC                  <1>     lodsb
   187 000029DF 50                  <1>     push rax    ;Push the drive letter on the stack for now
   188 000029E0 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   189 000029E7 E895010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   190 000029EC 723D                <1>     jc .badPop
   191 000029EE FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   192 000029F4 8F05(1AC60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   193 000029FA 58                  <1>     pop rax ;Get drive letter back
   194 000029FB 488D3D(92C50300)    <1>     lea rdi, buffer2
   195 00002A02 E84E010000          <1>     call fcbInitName2
   196 00002A07 7223                <1>     jc short .bad
   197 00002A09 488B05(1AC60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   198 00002A10 488705(12C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   199 00002A17 488905(1AC60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   200 00002A1E E8030A0000          <1>     call renameMain
   201 00002A23 0F83333F0000        <1>     jnc fcbGoodExit
   202 00002A29 EB01                <1>     jmp short .bad
   203                              <1> .badPop:
   204 00002A2B 5B                  <1>     pop rbx ;Pop drive number off stack
   205                              <1> .bad:
   206 00002A2C E92E3F0000          <1>     jmp fcbErrExit
   207                              <1> 
   208                              <1> getFileSizeFCB:    ;ah = 23h
   209                              <1> ;This function which can be used to test existance of file without opening it 
   210                              <1> ;Input: rdx -> FCB
   211 00002A31 488915(0AC70300)    <1>     mov qword [workingFCB], rdx
   212 00002A38 488D3D(12C50300)    <1>     lea rdi, buffer1
   213 00002A3F 57                  <1>     push rdi
   214 00002A40 E83C010000          <1>     call fcbInitRoutine
   215 00002A45 5F                  <1>     pop rdi
   216 00002A46 0F82133F0000        <1>     jc fcbErrExit
   217 00002A4C E896E5FFFF          <1>     call getFilePathNoCanon
   218 00002A51 0F82083F0000        <1>     jc fcbErrExit
   219 00002A57 8B05(6AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   220                              <1>     ;Now we gotta set up FCB randRecrd Field
   221 00002A5D 488B35(0AC70300)    <1>     mov rsi, qword [workingFCB]
   222 00002A64 803EFF              <1>     cmp byte [rsi], -1
   223 00002A67 7507                <1>     jne .notExtended
   224 00002A69 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   225                              <1> .notExtended:
   226                              <1> ;rsi points to the drive number now
   227 00002A70 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   228 00002A74 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   229 00002A76 85D2                <1>     test edx, edx
   230 00002A78 7402                <1>     jz .noRemainder
   231 00002A7A FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   232                              <1> .noRemainder:
   233 00002A7C 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   234 00002A7F E9D83E0000          <1>     jmp fcbGoodExit
   235                              <1> 
   236                              <1> setDTA:            ;ah = 1Ah, Always can be used
   237                              <1> ;Called with:
   238                              <1> ;   rdx = Pointer to the new default DTA
   239 00002A84 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   240 00002A8B 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   241 00002A8F 488915(0CC40300)    <1>     mov qword [currentDTA], rdx
   242 00002A96 C3                  <1>     ret
   243                              <1> 
   244                              <1> getDTA:            ;ah = 2Fh, Always can be used
   245 00002A97 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   246 00002A9E 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   247 00002AA5 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   248                              <1>     return
    18                              <2> %%_ret:
    19 00002AA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   249                              <1>     
   250                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   251                              <1> ;Input:
   252                              <1> ;rsi points to a command line to parse
   253                              <1> ;rdi points to a future unopened FCB
   254                              <1> ;al = parsing control bits. 
   255                              <1> ; al[0] = If set, leading filename separators are scanned off
   256                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   257                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   258                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   259                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   260                              <1> ;        al = 1 => Wildcards found
   261                              <1> ;        al = -1 => Drive specifier invalid
   262                              <1> ;rsi -> to the first char past the parsed filename
   263                              <1> ;rdi -> First byte of the FCB 
   264                              <1> 
   265 00002AAA E872010000          <1>     call parseNameToFCB
   266 00002AAF 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   267 00002AB0 E8243A0000          <1>     call getUserRegs
   268 00002AB5 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   269                              <1>     return  ;al now contains dl, the signature, special unique return type
    18                              <2> %%_ret:
    19 00002AB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> ;=================================================================
   272                              <1> ;=================================================================
   273                              <1> ;These functions CHECK the Volume type and fail if the volume is 
   274                              <1> ; not compatible.
   275                              <1> ;=================================================================
   276                              <1> ;=================================================================
   277                              <1> openFileFCB:       ;ah = 0Fh
   278 00002AB9 B805000000          <1>     mov eax, errAccDen
   279 00002ABE E99C3E0000          <1>     jmp fcbErrExit
   280                              <1> closeFileFCB:      ;ah = 10h
   281 00002AC3 B805000000          <1>     mov eax, errAccDen
   282 00002AC8 E9923E0000          <1>     jmp fcbErrExit
   283                              <1> sequentialReadFCB: ;ah = 14h
   284 00002ACD B805000000          <1>     mov eax, errAccDen
   285 00002AD2 E9883E0000          <1>     jmp fcbErrExit
   286                              <1> sequentialWriteFCB:;ah = 15h
   287 00002AD7 B805000000          <1>     mov eax, errAccDen
   288 00002ADC E97E3E0000          <1>     jmp fcbErrExit
   289                              <1> createFileFCB:     ;ah = 16h
   290 00002AE1 B805000000          <1>     mov eax, errAccDen
   291 00002AE6 E9743E0000          <1>     jmp fcbErrExit
   292                              <1> randomReadFCB:     ;ah = 21h
   293 00002AEB B805000000          <1>     mov eax, errAccDen
   294 00002AF0 E96A3E0000          <1>     jmp fcbErrExit
   295                              <1> randomWriteFCB:    ;ah = 22h
   296 00002AF5 B805000000          <1>     mov eax, errAccDen
   297 00002AFA E9603E0000          <1>     jmp fcbErrExit
   298                              <1> setRelRecordFCB:   ;ah = 24h
   299 00002AFF B805000000          <1>     mov eax, errAccDen
   300 00002B04 E9563E0000          <1>     jmp fcbErrExit
   301                              <1> randBlockReadFCB:  ;ah = 27h
   302 00002B09 B805000000          <1>     mov eax, errAccDen
   303 00002B0E E94C3E0000          <1>     jmp fcbErrExit
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 00002B13 B805000000          <1>     mov eax, errAccDen
   306 00002B18 E9423E0000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 00002B1D C605(E9C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 00002B24 51                  <1>     push rcx
   321 00002B25 57                  <1>     push rdi
   322 00002B26 55                  <1>     push rbp
   323 00002B27 9C                  <1>     pushfq
   324 00002B28 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 00002B2F 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 00002B31 E836390000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 00002B36 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 00002B38 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 00002B3C E87BDCFFFF          <1>     call getFATtype
   331 00002B41 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 00002B47 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 00002B49 C605(E9C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 00002B50 9D                  <1>     popfq
   337 00002B51 5D                  <1>     pop rbp
   338 00002B52 5F                  <1>     pop rdi
   339 00002B53 59                  <1>     pop rcx
   340                              <1>     return
    18                              <2> %%_ret:
    19 00002B54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 00002B55 55                  <1>     push rbp
   347 00002B56 4889E5              <1>     mov rbp, rsp
   348 00002B59 4881EC0F000000      <1>     sub rsp, 15
   349 00002B60 57                  <1>     push rdi
   350 00002B61 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 00002B65 4889D6              <1>     mov rsi, rdx
   352 00002B68 F605(EBC60300)FF    <1>     test byte [extFCBFlag], -1
   353 00002B6F 7407                <1>     jz .notExtended
   354 00002B71 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 00002B78 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 00002B7F EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 00002B81 55                  <1>     push rbp
   364 00002B82 4889E5              <1>     mov rbp, rsp
   365 00002B85 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 00002B8C 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 00002B8D 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 00002B91 C605(EBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 00002B98 C605(ECC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 00002B9F E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 00002BA4 7410                <1>     jz .notExtended
   373 00002BA6 C605(EBC60300)FF    <1>     mov byte [extFCBFlag], -1
   374 00002BAD 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 00002BB0 8805(ECC60300)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 00002BB6 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379 00002BB7 E8AA390000          <1>     call getCDS ;Get the CDS (preserves rdi)
   380 00002BBC 723F                <1>     jc .badDisk
   381 00002BBE E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   382 00002BC3 488D1D87D6FFFF      <1>     lea rbx, asciiCharProperties
   383 00002BCA B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   384 00002BCF 56                  <1>     push rsi    ;rsi -> fcb.filename
   385                              <1> .nameCharCheck:
   386 00002BD0 AC                  <1>     lodsb   ;Get the char in al
   387 00002BD1 D7                  <1>     xlatb   ;Get the char signature in al
   388 00002BD2 A808                <1>     test al, 8
   389 00002BD4 7427                <1>     jz .badDisk
   390 00002BD6 FFC9                <1>     dec ecx
   391 00002BD8 75F6                <1>     jnz .nameCharCheck
   392 00002BDA 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   393 00002BDB 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   394 00002BDE E8EEE2FFFF          <1>     call FCBToAsciiz
   395 00002BE3 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   396 00002BE4 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   397 00002BE7 7414                <1>     je .badDisk
   398 00002BE9 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   399 00002BED 55                  <1>     push rbp
   400 00002BEE E8B4E3FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   401 00002BF3 5D                  <1>     pop rbp
   402 00002BF4 7207                <1>     jc .badDisk
   403 00002BF6 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   404 00002BFB EB03                <1>     jmp short .jiggleStack  ;Skip the error
   405                              <1> .badDisk:
   406 00002BFD B003                <1>     mov al, errPnf  ;DOS does this... so will I
   407 00002BFF F9                  <1>     stc
   408                              <1> .jiggleStack:
   409 00002C00 4889EC              <1>     mov rsp, rbp
   410 00002C03 5D                  <1>     pop rbp
   411                              <1> .exit:
   412                              <1>     return
    18                              <2> %%_ret:
    19 00002C04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> storeZeroBasedDriveNumber:
   415                              <1> ;Input: al => 0 based drive letter
   416                              <1> ;       rdi -> Points to buffer to store the X: in
   417 00002C05 FEC0                <1>     inc al
   418                              <1> storeOneBasedDriveNumber:
   419                              <1> ;Input: al => 1 based drive letter
   420                              <1> ;       rdi -> Points to buffer to store the X: in
   421 00002C07 0440                <1>     add al, "@"
   422 00002C09 B43A                <1>     mov ah, ":"
   423 00002C0B 66AB                <1>     stosw
   424                              <1>     return
    18                              <2> %%_ret:
    19 00002C0D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> isFCBExtended:
   427                              <1> ;Input: rdx = FCB ptr
   428                              <1> ;Output: rsi -> Drive letter of FCB
   429                              <1> ;        rdx -> FCB first byte
   430                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   431 00002C0E 4889D6              <1>     mov rsi, rdx
   432 00002C11 803EFF              <1>     cmp byte [rsi], -1
   433 00002C14 7507                <1>     jne .notExtended
   434 00002C16 4881C607000000      <1>     add rsi, exFcb.driveNum
   435                              <1> .notExtended:
   436 00002C1D 4839F2              <1>     cmp rdx, rsi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00002C20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> parseNameToFCB:
   440                              <1> ;rsi points to a command line to parse
   441                              <1> ;rdi points to a future unopened FCB
   442                              <1> ;al = parsing control bits. 
   443                              <1> ; al[0] = If set, leading filename separators are scanned off
   444                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   445                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   446                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   447                              <1> ;
   448                              <1> ;Separators include : . ; , = + TAB SPACE
   449                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   450                              <1> 
   451 00002C21 C605(81C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00002C28 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 00002C2A A802                <1>     test al, 2  ;Set drive letter>
   454 00002C2C 7402                <1>     jz .skipDriveLetter
   455 00002C2E 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 00002C30 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 00002C33 B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 00002C38 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 00002C3A 93                  <1>     xchg eax, ebx
   461 00002C3B B020                <1>     mov al, " " ;Clear the field
   462 00002C3D 7405                <1>     jz .clearFilenameField
   463 00002C3F 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 00002C42 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 00002C44 F3AA                <1>     rep stosb
   467 00002C46 B903000000          <1>     mov ecx, 3
   468 00002C4B F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 00002C4E 7405                <1>     jz .clearExtensionField
   470 00002C50 4801CF              <1>     add rdi, rcx
   471 00002C53 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 00002C55 F3AA                <1>     rep stosb
   474 00002C57 91                  <1>     xchg eax, ecx
   475 00002C58 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 00002C59 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 00002C60 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 00002C63 740F                <1>     jz .dontScanOff
   479 00002C65 E8E93A0000          <1>     call skipSpacesAndTabs
   480 00002C6A E8F03A0000          <1>     call isCharDelimType
   481 00002C6F 7508                <1>     jnz .skipIfDelim
   482 00002C71 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOff:
   484 00002C74 E8DA3A0000          <1>     call skipSpacesAndTabs  ;Skip a char
   485                              <1> .skipIfDelim:
   486 00002C79 E880390000          <1>     call uppercaseCharAtPtr 
   487 00002C7E 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 00002C80 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 00002C83 7519                <1>     jne .skipSettingDriveLetter
   490 00002C85 48FFC6              <1>     inc rsi ;Goto next char
   491 00002C88 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 00002C8A 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 00002C8C 50                  <1>     push rax    ;Save the 1 based drive letter
   494 00002C8D E86B380000          <1>     call setDrive   ;Verifies if this drive letter is valid
   495 00002C92 58                  <1>     pop rax
   496 00002C93 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 00002C95 B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 00002C97 AA                  <1>     stosb
   501 00002C98 48FFC6              <1>     inc rsi ;Align pointers...
   502 00002C9B 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 00002C9E 48FFCE              <1>     dec rsi
   505 00002CA1 48FFC7              <1>     inc rdi
   506                              <1>     
   507                              <1> getFCBFilename:
   508                              <1> ;Input: rsi points to first char of filename
   509                              <1> ;       rdi points to storage buffer for filename
   510                              <1> ;       dl contains the signature if drive invalid
   511                              <1> ;Output:
   512                              <1> ;       Fields filled
   513                              <1> ;       al = Return signature
   514 00002CA4 B908000000          <1>     mov ecx, 8
   515 00002CA9 E815000000          <1>     call getFCBNameField
   516 00002CAE 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   517 00002CB1 750D                <1>     jne .noExt
   518 00002CB3 B903000000          <1>     mov ecx, 3
   519 00002CB8 48FFC6              <1>     inc rsi ;Skip this char
   520 00002CBB E814000000          <1>     call forceFCBNameField
   521                              <1> .noExt:
   522 00002CC0 88D0                <1>     mov al, dl  ;Store the return signature
   523                              <1>     return
    18                              <2> %%_ret:
    19 00002CC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> getFCBNameField:
   526                              <1> ;Checks if the field is appropriate before copying it
   527 00002CC3 E836390000          <1>     call uppercaseCharAtPtr
   528 00002CC8 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   529 00002CCA 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   530 00002CCD 48FFCE              <1>     dec rsi ;Point to previous char
   531                              <1>     return
    18                              <2> %%_ret:
    19 00002CD0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> .okName:
   533 00002CD1 48FFCE              <1>     dec rsi ;Go back now a char
   534                              <1> forceFCBNameField:
   535                              <1> ;Forcefully copies the name from rsi to rdi
   536 00002CD4 E825390000          <1>     call uppercaseCharAtPtr
   537 00002CD9 7226                <1>     jc .terminatingSpace
   538 00002CDB 750D                <1>     jnz .notSep
   539 00002CDD F605(81C40300)FF    <1>     test byte [fcbSpaceOk], -1
   540 00002CE4 741B                <1>     jz .terminatingSpace
   541 00002CE6 3C20                <1>     cmp al, " "
   542 00002CE8 7517                <1>     jne .terminatingSpace
   543                              <1> .notSep:
   544 00002CEA 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   545 00002CED FFC9                <1>     dec ecx
   546 00002CEF 3C2A                <1>     cmp al, "*" ;Big wildcard?
   547 00002CF1 7504                <1>     jne .notBigWildcard
   548 00002CF3 B03F                <1>     mov al, "?"
   549 00002CF5 F3AA                <1>     rep stosb
   550                              <1> .notBigWildcard:
   551 00002CF7 AA                  <1>     stosb   ;Stores the uppercased char
   552 00002CF8 3C3F                <1>     cmp al, "?"
   553 00002CFA 75D8                <1>     jne forceFCBNameField
   554 00002CFC 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   555 00002CFF EBD3                <1>     jmp short forceFCBNameField
   556                              <1> .terminatingSpace:
   557 00002D01 B020                <1>     mov al, " "
   558 00002D03 AA                  <1>     stosb
   559 00002D04 48FFCE              <1>     dec rsi ;Point to this trailing space
   560                              <1>     return
    18                              <2> %%_ret:
    19 00002D07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    34                              <1> ;-----------------------------------:
    35                              <1> ;    File Handle Kernel routines    :
    36                              <1> ;-----------------------------------:
    37                              <1> 
    38                              <1> createFileHdl:     ;ah = 3Ch, handle function
    39                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    40                              <1> ;       rdx = Ptr to ASCIZ filename to create
    41                              <1> ;Output: CF=CY => ax = File handle
    42                              <1> ;        CF=NC => al = Error code
    43 00002D08 51                  <1>     push rcx    ;Save file attributes on stack
    44 00002D09 488D0DD20C0000      <1>     lea rcx, createMain
    45 00002D10 C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    46 00002D17 EB1D                <1>     jmp short openFileHdl.openCommon
    47                              <1> openFileHdl:       ;ah = 3Dh, handle function
    48                              <1> ;Input: al = Open mode, to open file with
    49                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    50                              <1> ;If called from 5D00h, cl = File attributes too
    51                              <1> ;Output: CF=CY => ax = File handle
    52                              <1> ;        CF=NC => al = Error code
    53 00002D19 BB16000000          <1>     mov ebx, dirInclusive
    54 00002D1E F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
    55 00002D25 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    56 00002D28 880D(ECC60300)      <1>     mov byte [searchAttr], cl
    57 00002D2E 488D0DB30B0000      <1>     lea rcx, openMain  
    58 00002D35 50                  <1>     push rax    ;Save open mode on stack
    59                              <1> .openCommon:
    60 00002D36 4889D6              <1>     mov rsi, rdx
    61 00002D39 E85D390000          <1>     call checkPathspecOK
    62 00002D3E 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    63                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    64 00002D40 58                  <1>     pop rax
    65 00002D41 B803000000          <1>     mov eax, errPnf
    66 00002D46 E9343C0000          <1>     jmp extErrExit
    67                              <1> .pathOk:
    68 00002D4B E8E43B0000          <1>     call dosCrit1Enter
    69 00002D50 E8CB170000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    70 00002D55 E8E43B0000          <1>     call dosCrit1Exit
    71 00002D5A 0F82AF000000        <1>     jc .exitBad
    72                              <1>     ;Now save variables
    73 00002D60 E8F3160000          <1>     call setCurrentSFT
    74 00002D65 66891D(2AC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    75 00002D6C E861180000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    76 00002D71 0F8298000000        <1>     jc .exitBad
    77 00002D77 66891D(2CC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    78 00002D7E 48893D(1AC70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    79 00002D85 0FB71D(2AC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    80 00002D8C 881F                <1>     mov byte [rdi], bl  ;And open the file
    81                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    82 00002D8E 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    83 00002D91 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    84 00002D98 51                  <1>     push rcx    ;Save the procedure to call on stack
    85 00002D99 E854E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    86 00002D9E 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    87 00002D9F 488D05420B0000      <1>     lea rax, openMain   ;Get EA for open procedure
    88 00002DA6 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    89 00002DAD 7319                <1>     jnc .proceedCall
    90                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    91                              <1> ;                              For Create New, Bad but handled later.
    92                              <1> ;If CF=CY => Path doesnt all exist:
    93                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    94                              <1> ;Now we check if we are creating or opening.
    95 00002DAF 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    96 00002DB2 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    97 00002DB4 F605(F5C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    98 00002DBB 750B                <1>     jnz .proceedCall    ;If so, proceed.
    99                              <1> .badPathspec:
   100 00002DBD 58                  <1>     pop rax
   101 00002DBE B802000000          <1>     mov eax, errFnf
   102 00002DC3 E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   103                              <1> .proceedCall:
   104                              <1> ;If the pathspec exists, recall that for create, we truncate.
   105 00002DC8 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   106 00002DCA 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   107 00002DCD 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   108 00002DCE 750B                <1>     jne .callProc   ;Jump if we are creating
   109                              <1>     ;al means openmode here
   110 00002DD0 A880                <1>     test al, 80h    ;No Inherit bit set?
   111 00002DD2 7407                <1>     jz .callProc
   112 00002DD4 247F                <1>     and al, 7Fh     ;Clear this bit
   113 00002DD6 B900100000          <1>     mov ecx, devNoInherit
   114                              <1> .callProc:
   115 00002DDB 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   116 00002DE1 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   117 00002DE7 51                  <1>     push rcx    ;Save the device word 
   118 00002DE8 FFD3                <1>     call rbx    ;Enter with open mode in 
   119 00002DEA 59                  <1>     pop rcx
   120 00002DEB 488B35(22C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   121 00002DF2 722B                <1>     jc .exitBad2
   122 00002DF4 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   123 00002DF9 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   124 00002DFD 0FB705(2CC70300)    <1>     movzx eax, word [currentHdl]
   125 00002E04 FF15(14C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   126 00002E0A E9623B0000          <1>     jmp extGoodExit ;Save ax and return OK
   127                              <1> .exitBad:
   128 00002E0F FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   129 00002E10 5B                  <1>     pop rbx ;Pop the word from the stack
   130 00002E11 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   130 00002E19 FF                  <1>
   131 00002E1A E9603B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   132                              <1> .exitBad2:
   133                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   134 00002E1F 488B35(1AC70300)    <1>     mov rsi, qword [curHdlPtr]
   135 00002E26 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   136 00002E29 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
   137 00002E30 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   138 00002E35 66C705(2AC70300)FF- <1>     mov word [currentNdx], -1
   138 00002E3D FF                  <1>
   139 00002E3E E93C3B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   140                              <1> 
   141                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   142                              <1> ;Input: bx = file handle to close
   143 00002E43 E8A0170000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   144 00002E48 0F82313B0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   145 00002E4E E805160000          <1>     call setCurrentSFT  ;Set this as the current SFT
   146                              <1>     ;Check count to see if we need to check share mode
   147 00002E53 31C0                <1>     xor eax, eax    ;Preset ax to 0
   148 00002E55 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   149 00002E5A 7406                <1>     je .skipShareCheck
   150                              <1>     ;Now check sharing mode
   151 00002E5C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   152 00002E60 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   153                              <1> .skipShareCheck:
   154 00002E62 50                  <1>     push rax    ;Save the share mode on stack
   155 00002E63 E8450E0000          <1>     call closeMain  ;Call close main!
   156 00002E68 58                  <1>     pop rax 
   157 00002E69 0F82103B0000        <1>     jc extErrExit   ;If an error, exit through error exit
   158 00002E6F 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   159 00002E71 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   160 00002E73 E83C170000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   161 00002E78 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   162                              <1> .exitOk:
   163 00002E7B 31C0                <1>     xor eax, eax    ;Return value
   164 00002E7D E9EF3A0000          <1>     jmp extGoodExit
   165                              <1> 
   166                              <1> readFileHdl:       ;ah = 3Fh, handle function
   167 00002E82 488D35A10E0000      <1>     lea rsi, readBytes
   168                              <1> .common:
   169 00002E89 E85A170000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   170 00002E8E 0F82EB3A0000        <1>     jc extErrExit   ;Error code in al and exit
   171 00002E94 E8BF150000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   172 00002E99 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   173 00002E9B FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   174 00002EA1 488915(0CC40300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   175 00002EA8 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   176 00002EAA 8F05(0CC40300)      <1>     pop qword [currentDTA]
   177 00002EB0 0F82C93A0000        <1>     jc extErrExit   ;Error code in al and exit
   178 00002EB6 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   179 00002EB8 E9AB3A0000          <1>     jmp extGoodExit2    ;and exit!
   180                              <1> 
   181                              <1> writeFileHdl:      ;ah = 40h, handle function
   182 00002EBD 488D359E110000      <1>     lea rsi, writeBytes
   183 00002EC4 E9C0FFFFFF          <1>     jmp readFileHdl.common
   184                              <1> 
   185                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   186                              <1> ;Here don't allow malformed chars unless it is a network CDS
   187 00002EC9 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   188 00002ECE F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   189 00002ED5 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   190 00002ED8 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   191 00002EDE 4889D6              <1>     mov rsi, rdx
   192 00002EE1 E8B5370000          <1>     call checkPathspecOK
   193 00002EE6 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   194 00002EE8 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   195                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   196 00002EEA F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   197 00002EF1 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   198                              <1> .badPath:
   199 00002EF3 B803000000          <1>     mov eax, errPnf
   200 00002EF8 E9823A0000          <1>     jmp extErrExit
   201                              <1> .pathOk:
   202 00002EFD 488D3D(12C50300)    <1>     lea rdi, buffer1
   203 00002F04 52                  <1>     push rdx
   204 00002F05 E8E8E0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   205 00002F0A 5A                  <1>     pop rdx
   206 00002F0B 0F826E3A0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   207                              <1>     ;In the case of a wildcard, recall this will return the first file
   208 00002F11 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   209 00002F18 0F85613A0000        <1>     jnz extErrExit
   210 00002F1E E800090000          <1>     call outerDeleteMain
   211 00002F23 0F82563A0000        <1>     jc extErrExit
   212 00002F29 E9433A0000          <1>     jmp extGoodExit
   213                              <1> 
   214                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   215                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   216 00002F2E E8B5160000          <1>     call getSFTPtr
   217 00002F33 0F82463A0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   218 00002F39 3C03                <1>     cmp al, 3
   219 00002F3B 720A                <1>     jb .validFunction
   220 00002F3D B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   221 00002F42 E9383A0000          <1>     jmp extErrExit
   222                              <1> .validFunction:
   223 00002F47 3C01                <1>     cmp al, 1
   224 00002F49 7718                <1>     ja .seekend
   225 00002F4B 7203                <1>     jb .seekset
   226                              <1> ;Here we are at seekcur, seek from current (signed)
   227 00002F4D 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   228                              <1> .seekset:
   229                              <1> ;Seek from the start (unsigned)
   230 00002F50 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   231 00002F53 E881350000          <1>     call getUserRegs    ;Get user regs in rsi
   232 00002F58 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   233                              <1> .seekExit:
   234 00002F5B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   235 00002F5E E9053A0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   236                              <1> .seekend:
   237                              <1> ;Here we are at seekend, seek from end (signed)
   238 00002F63 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   239 00002F69 7505                <1>     jnz .netCheck
   240                              <1> .proceedDisk:
   241 00002F6B 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   242 00002F6E EBE0                <1>     jmp short .seekset
   243                              <1> .netCheck:
   244 00002F70 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   245 00002F76 75F3                <1>     jnz .proceedDisk
   246 00002F78 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   247                              <1>     ;Check it's share mode
   248 00002F7C 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   249 00002F81 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   250 00002F86 7407                <1>     je .netSeek
   251 00002F88 3D30000000          <1>     cmp eax, denyReadShare
   252 00002F8D 75DC                <1>     jne .proceedDisk
   253                              <1> .netSeek:
   254 00002F8F B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   255 00002F94 CD4F                <1>     int 4Fh
   256 00002F96 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   257 00002F98 E9E2390000          <1>     jmp extErrExit
   258                              <1> 
   259                              <1> 
   260                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   261 00002F9D 3C01                <1>     cmp al, 1
   262 00002F9F 761F                <1>     jbe .subFuncOk
   263 00002FA1 B801000000          <1>     mov eax, errInvFnc
   264                              <1> .chmodError:
   265                              <1> ;Call with ax = errorcode
   266 00002FA6 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   267 00002FAD C605(03C40300)07    <1>     mov byte [errorClass], eClsAppFlt
   268 00002FB4 C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
   269 00002FBB E9BF390000          <1>     jmp extErrExit
   270                              <1> .subFuncOk:
   271 00002FC0 4889D6              <1>     mov rsi, rdx
   272 00002FC3 89C3                <1>     mov ebx, eax    ;Store function code in bl
   273 00002FC5 53                  <1>     push rbx
   274 00002FC6 51                  <1>     push rcx
   275 00002FC7 E8CF360000          <1>     call checkPathspecOK
   276 00002FCC 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   277                              <1> .badPath:
   278 00002FCE 59                  <1>     pop rcx
   279 00002FCF 5B                  <1>     pop rbx
   280 00002FD0 B803000000          <1>     mov eax, errPnf
   281 00002FD5 EBCF                <1>     jmp short .chmodError
   282                              <1> .pathOk:
   283 00002FD7 E8A5370000          <1>     call checkPathNet 
   284 00002FDC 74F0                <1>     jz .badPath ;Or Net paths
   285 00002FDE E84A370000          <1>     call scanPathWC
   286 00002FE3 72E9                <1>     jc .badPath ;Dont allow wildcards
   287 00002FE5 488D3D(12C50300)    <1>     lea rdi, buffer1
   288 00002FEC 52                  <1>     push rdx
   289 00002FED C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   290 00002FF4 E8F9DFFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   291 00002FF9 5A                  <1>     pop rdx
   292 00002FFA 59                  <1>     pop rcx
   293 00002FFB 5B                  <1>     pop rbx
   294 00002FFC 0F827D390000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   295                              <1>     ;In the case of a wildcard, recall this will return the first file
   296 00003002 803D(F4C60300)FF    <1>     cmp byte [fileExist], -1
   297 00003009 759B                <1>     jnz .chmodError
   298                              <1> 
   299 0000300B E85C340000          <1>     call testCDSNet
   300 00003010 730C                <1>     jnc .notNet
   301 00003012 750A                <1>     jnz .notNet ;This type of net ok
   302 00003014 B805000000          <1>     mov eax, errAccDen
   303 00003019 E961390000          <1>     jmp extErrExit
   304                              <1> .notNet:
   305 0000301E 84DB                <1>     test bl, bl
   306 00003020 7526                <1>     jnz .setAttribs
   307                              <1>     ;Get attribs here
   308 00003022 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   309 00003028 7412                <1>     jz .getDiskAttribs
   310 0000302A B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   311 0000302F CD4F                <1>     int 4Fh
   312 00003031 0F8248390000        <1>     jc extErrExit
   313 00003037 E935390000          <1>     jmp extGoodExit
   314                              <1> .getDiskAttribs:
   315 0000303C 0FB605(59C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   316 00003043 E929390000          <1>     jmp extGoodExit
   317                              <1> 
   318                              <1> .setAttribs:
   319                              <1>     ;Set attribs here
   320 00003048 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   321 0000304E 7417                <1>     jz .setDiskAttribs
   322 00003050 0FB7C9              <1>     movzx ecx, cx
   323 00003053 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   324 00003054 B80E110000          <1>     mov eax, 110Eh
   325 00003059 CD4F                <1>     int 4Fh
   326 0000305B 59                  <1>     pop rcx
   327 0000305C 0F821D390000        <1>     jc extErrExit
   328 00003062 E90A390000          <1>     jmp extGoodExit
   329                              <1> .setDiskAttribs:
   330 00003067 E843070000          <1>     call checkNoOpenHandlesForShareAction
   331 0000306C 730A                <1>     jnc .okToSet
   332 0000306E B820000000          <1>     mov eax, errShrVio
   333 00003073 E907390000          <1>     jmp extErrExit
   334                              <1> .okToSet:
   335 00003078 E882EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   336 0000307D 0F82FC380000        <1>     jc extErrExit
   337 00003083 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   338 00003086 740A                <1>     jz .set
   339 00003088 B805000000          <1>     mov eax, errAccDen
   340 0000308D E9ED380000          <1>     jmp extErrExit
   341                              <1> .set:
   342 00003092 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   343 00003095 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   344 00003098 08E9                <1>     or cl, ch
   345 0000309A 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   346 0000309D E8ADD4FFFF          <1>     call writeThroughBuffers
   347 000030A2 7207                <1>     jc .setError
   348 000030A4 31C0                <1>     xor eax, eax
   349 000030A6 E9C6380000          <1>     jmp extGoodExit
   350                              <1> .setError:
   351 000030AB E87DD4FFFF          <1>     call cancelWriteThroughBuffers
   352 000030B0 E9CA380000          <1>     jmp extErrExit
   353                              <1> 
   354                              <1> duplicateHandle:   ;ah = 45h, handle function
   355                              <1> ;Input: bx = Handle to duplicate
   356                              <1> ;Output: If ok then ax = New handle
   357 000030B5 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   358 000030B8 E815150000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   359                              <1> .duplicateCommon:
   360 000030BD 0F82BC380000        <1>     jc extErrExit   ;Exit if no space
   361 000030C3 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   362 000030C6 93                  <1>     xchg eax, ebx
   363 000030C7 E81C150000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   364 000030CC 0F82AD380000        <1>     jc extErrExit
   365 000030D2 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   366 000030D5 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   367 000030DB 7505                <1>     jnz .netFile
   368 000030DD E898080000          <1>     call openDriverMux
   369                              <1> .netFile:
   370 000030E2 E8CD140000          <1>     call getJFTPtr
   371 000030E7 8A1F                <1>     mov bl, byte [rdi]
   372 000030E9 881E                <1>     mov byte [rsi], bl
   373 000030EB E981380000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   374                              <1> 
   375                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   376                              <1> ;Input: bx = Handle to duplicate
   377                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   378                              <1>     ;First we close cx if it exists
   379 000030F0 0FB7C9              <1>     movzx ecx, cx
   380 000030F3 53                  <1>     push rbx
   381 000030F4 51                  <1>     push rcx
   382 000030F5 89CB                <1>     mov ebx, ecx
   383 000030F7 E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   384 000030FC 5B                  <1>     pop rbx
   385 000030FD 58                  <1>     pop rax
   386 000030FE E8B1140000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   387 00003103 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   388                              <1> 
   389                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   390                              <1> ;Input: cx = Search Attributes, cl only used
   391                              <1> ;       rdx = Ptr to path to file to look for
   392                              <1> ;       al = Document as needing to be 0 for now
   393                              <1> ;Return:
   394                              <1> ;Data in the DTA or error through AX with CF=CY
   395                              <1> ;CAVEATS!
   396                              <1> ;DTA:attribFnd = 40h => Char dev
   397                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   398 00003105 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   399 0000310B 4889D6              <1>     mov rsi, rdx
   400 0000310E E888350000          <1>     call checkPathspecOK
   401 00003113 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   402 00003115 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   403                              <1> .badPath:
   404 00003117 B803000000          <1>     mov eax, errPnf
   405 0000311C E95E380000          <1>     jmp extErrExit
   406                              <1> .pathspecOk:
   407 00003121 FF35(0CC40300)      <1>     push qword [currentDTA]
   408 00003127 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   409 0000312E 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   410 00003135 488D3D(12C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   411 0000313C E8B1DEFFFF          <1>     call getFilePath
   412                              <1> .findfileExit:
   413 00003141 8F05(0CC40300)      <1>     pop qword [currentDTA]
   414 00003147 0F8232380000        <1>     jc extErrExit
   415 0000314D 488D3D(23C60300)    <1>     lea rdi, dosffblock
   416 00003154 57                  <1>     push rdi
   417 00003155 E8B7DDFFFF          <1>     call setupFFBlock
   418 0000315A 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   419 0000315B 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
   420 00003162 B92B000000          <1>     mov ecx, ffBlock_size
   421 00003167 F3A4                <1>     rep movsb   ;Copy the whole block. 
   422                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   423 00003169 31C0                <1>     xor eax, eax    ;Return value
   424 0000316B E901380000          <1>     jmp extGoodExit ;Exit well
   425                              <1> 
   426                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   427                              <1> ;Input: DTA has the find first block from the previous search
   428 00003170 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
   429 00003177 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   430 0000317E B92B000000          <1>     mov ecx, ffBlock_size
   431 00003183 F3A4                <1>     rep movsb
   432 00003185 FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
   433 0000318B 488D3D(23C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   434 00003192 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi
   435 00003199 E8F1D9FFFF          <1>     call findNextMain
   436 0000319E EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   437                              <1> 
   438                              <1> renameFile:        ;ah = 56h
   439                              <1> ;Input: rdx -> Filespec to rename
   440                              <1> ;       rdi -> New filespec
   441                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   442 000031A0 4889D6              <1>     mov rsi, rdx
   443 000031A3 BB16000000          <1>     mov ebx, dirInclusive
   444 000031A8 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   445 000031AF 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   446 000031B2 880D(ECC60300)      <1>     mov byte [searchAttr], cl
   447                              <1>     ;Step 0, verify both paths provided are valid
   448 000031B8 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   449 000031BD 7249                <1>     jc .pnfError
   450 000031BF 56                  <1>     push rsi
   451 000031C0 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   452 000031C3 E84A000000          <1>     call .renamePathCheck
   453 000031C8 5E                  <1>     pop rsi
   454 000031C9 723D                <1>     jc .pnfError
   455                              <1>     ;Now we canonicalise the filenames to make life easy
   456 000031CB 56                  <1>     push rsi
   457 000031CC 4889FE              <1>     mov rsi, rdi
   458 000031CF 488D3D(92C50300)    <1>     lea rdi, buffer2
   459 000031D6 E8CCDDFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   460 000031DB 5E                  <1>     pop rsi
   461 000031DC 722A                <1>     jc .pnfError
   462                              <1>     ;Now test if first file exists.
   463 000031DE FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   464 000031E4 8F05(1AC60300)      <1>     pop qword [fname2Ptr]
   465 000031EA 488D3D(12C50300)    <1>     lea rdi, buffer1
   466 000031F1 E8B1DDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   467 000031F6 7210                <1>     jc .pnfError  
   468 000031F8 E829020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   469 000031FD 0F827C370000        <1>     jc extErrExit
   470 00003203 E969370000          <1>     jmp extGoodExit
   471                              <1> .pnfError:
   472 00003208 B803000000          <1>     mov eax, errPnf
   473 0000320D E96D370000          <1>     jmp extErrExit
   474                              <1> .renamePathCheck:
   475                              <1> ;Checks if the pathspec in rsi is OK
   476 00003212 56                  <1>     push rsi
   477 00003213 57                  <1>     push rdi
   478 00003214 E882340000          <1>     call checkPathspecOK
   479 00003219 5F                  <1>     pop rdi
   480 0000321A 5E                  <1>     pop rsi
   481 0000321B 730D                <1>     jnc .pathOk     ;Path ok 
   482 0000321D 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   483                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   484 0000321F F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   485 00003226 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   486                              <1> .badPath:
   487 00003228 F9                  <1>     stc
   488                              <1>     return
    18                              <2> %%_ret:
    19 00003229 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   489                              <1> .pathOk:
   490 0000322A F8                  <1>     clc
   491                              <1>     return
    18                              <2> %%_ret:
    19 0000322B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getSetFileDateTime:;ah = 57h
   494 0000322C 3C01                <1>     cmp al, 1
   495 0000322E 760A                <1>     jbe .oksubfun
   496 00003230 B801000000          <1>     mov eax, errInvFnc
   497 00003235 E945370000          <1>     jmp extErrExit
   498                              <1> .oksubfun:
   499 0000323A E8A9130000          <1>     call getSFTPtr  ;Preserves al unless error returned
   500 0000323F 0F823A370000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   501 00003245 3C01                <1>     cmp al, 1
   502 00003247 741C                <1>     je .setTimeDate
   503                              <1>     ;Here we get the Time/Date
   504 00003249 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   505 0000324D 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   506 00003251 E883320000          <1>     call getUserRegs
   507 00003256 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   508 0000325A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   509 0000325E 31C0                <1>     xor eax, eax
   510 00003260 E90C370000          <1>     jmp extGoodExit
   511                              <1> .setTimeDate:
   512                              <1>     ;Here we set the Time/Date
   513 00003265 66894F13            <1>     mov word [rdi + sft.wTime], cx
   514 00003269 66895715            <1>     mov word [rdi + sft.wDate], dx
   515 0000326D 31C0                <1>     xor eax, eax
   516 0000326F E9FD360000          <1>     jmp extGoodExit
   517                              <1> 
   518                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   519                              <1> ;Uses the clock to do it's bidding
   520                              <1> ;cx = file attribute 
   521                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   522                              <1> ;       filename
   523 00003274 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   524 00003279 740A                <1>     jz .validAttribs
   525 0000327B B805000000          <1>     mov eax, errAccDen
   526 00003280 E9FA360000          <1>     jmp extErrExit
   527                              <1> .validAttribs:
   528 00003285 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   529 00003289 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   530 0000328C B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   531 00003291 31C0                <1>     xor eax, eax
   532 00003293 4889D7              <1>     mov rdi, rdx
   533 00003296 F3AE                <1>     rep scasb
   534 00003298 85C9                <1>     test ecx, ecx
   535 0000329A 750A                <1>     jnz .nullFnd
   536                              <1>     ;Bad path
   537 0000329C B803000000          <1>     mov eax, errPnf
   538 000032A1 E9D9360000          <1>     jmp extErrExit
   539                              <1> .nullFnd:
   540 000032A6 48FFCF              <1>     dec rdi
   541 000032A9 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   542 000032AD E841330000          <1>     call swapPathSeparator
   543 000032B2 7403                <1>     jz .pathsepFnd
   544                              <1>     ;If no pathsep found, force one at rdi
   545 000032B4 B05C                <1>     mov al, "\"
   546 000032B6 AA                  <1>     stosb
   547                              <1> .pathsepFnd:
   548 000032B7 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   549                              <1> .fileCreateLoop:
   550 000032BA 55                  <1>     push rbp
   551 000032BB E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   552 000032C0 5D                  <1>     pop rbp
   553 000032C1 0FB7C1              <1>     movzx eax, cx
   554 000032C4 0FB7D2              <1>     movzx edx, dx
   555 000032C7 C1E010              <1>     shl eax, 10h
   556 000032CA 09D0                <1>     or eax, edx  ;Add the bits of dx too
   557 000032CC E831000000          <1>     call .writeNybbles
   558 000032D1 31C0                <1>     xor eax, eax
   559 000032D3 AA                  <1>     stosb   ;Store terminating null
   560 000032D4 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   561 000032D7 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   562 000032DA 55                  <1>     push rbp
   563 000032DB E85C000000          <1>     call createNewFile
   564 000032E0 5D                  <1>     pop rbp
   565 000032E1 0F838A360000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   566 000032E7 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   567 000032EE 3D05000000          <1>     cmp eax, errAccDen
   568 000032F3 74C5                <1>     je .fileCreateLoop
   569 000032F5 3D50000000          <1>     cmp eax, errFilExist
   570 000032FA 74BE                <1>     je .fileCreateLoop
   571 000032FC F9                  <1>     stc
   572 000032FD E97D360000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   573                              <1> .writeNybbles:
   574                              <1> ;Write the nybbles of eax at rdi
   575 00003302 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   576                              <1> .wnLp:
   577 00003307 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   578 0000330A 50                  <1>     push rax
   579 0000330B 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   580 00003310 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   581 00003315 3D39000000          <1>     cmp eax, '9'
   582 0000331A 7605                <1>     jbe .notExtDigit
   583 0000331C 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   584                              <1> .notExtDigit:
   585 00003321 AA                  <1>     stosb   ;Store the digit
   586 00003322 58                  <1>     pop rax
   587 00003323 FFC9                <1>     dec ecx
   588 00003325 75E0                <1>     jnz .wnLp
   589                              <1>     return
    18                              <2> %%_ret:
    19 00003327 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> .uniqueTimeGet:
   592 00003328 E8E2F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   593 0000332D 668B0D(0CC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   594 00003334 668B15(0EC50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   595                              <1>     return
    18                              <2> %%_ret:
    19 0000333B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> createNewFile:     ;ah = 5Bh
   598 0000333C 51                  <1>     push rcx    ;Save file attributes on stack
   599 0000333D 488D0D8B060000      <1>     lea rcx, createNewMain
   600 00003344 C605(ECC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   601 0000334B E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   602                              <1> 
   603                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   604                              <1>     ;Input: bx = File to flush
   605 00003350 E893120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   606 00003355 0F8224360000        <1>     jc extErrExit
   607 0000335B E8F8100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   608                              <1>     ;Now we check if the device is a char, disk or net file and commit
   609 00003360 E882000000          <1>     call commitMain
   610 00003365 0F8214360000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   611                              <1> .exitOk:
   612 0000336B 30C0                <1>     xor al, al
   613 0000336D E867310000          <1>     call getUserRegs
   614 00003372 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   615                              <1>     return
    18                              <2> %%_ret:
    19 00003375 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> lockUnlockFile:    ;ah = 5Ch
   618                              <1> ;ah = 5Ch
   619                              <1> ;al = subfunction
   620                              <1> ;       00h lock region of file
   621                              <1> ;       01h unlock region of file
   622                              <1> ;ebx = file handle
   623                              <1> ;ecx = start offset of region within file
   624                              <1> ;edi = length of region in bytes
   625 00003376 3C01                <1>     cmp al, 1
   626 00003378 7757                <1>     ja .badFunction
   627 0000337A 57                  <1>     push rdi
   628 0000337B E882120000          <1>     call derefSFTPtr
   629 00003380 730B                <1>     jnc .validHdl
   630 00003382 58                  <1>     pop rax ;Discard the qword on the stack
   631 00003383 B806000000          <1>     mov eax, errBadHdl
   632 00003388 E9F2350000          <1>     jmp extErrExit
   633                              <1> .validHdl:
   634 0000338D 84C0                <1>     test al, al ;Check if al = 0
   635 0000338F 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   636 00003390 7424                <1>     jz .lockFileRegion
   637 00003392 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   638 00003398 740B                <1>     jz .unlockShare ;Jump if a local file only
   639 0000339A 50                  <1>     push rax
   640 0000339B B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   641 000033A0 CD4F                <1>     int 4Fh
   642 000033A2 5B                  <1>     pop rbx
   643 000033A3 EB06                <1>     jmp short .exitSelect
   644                              <1> .unlockShare:
   645 000033A5 FF15(ECC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   646                              <1> .exitSelect:
   647 000033AB 0F82CE350000        <1>     jc extErrExit
   648 000033B1 E9BB350000          <1>     jmp extGoodExit
   649                              <1> .lockFileRegion:
   650 000033B6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   651 000033BC 740B                <1>     jz .lockShare   ;Jump if a local file only
   652 000033BE 50                  <1>     push rax
   653 000033BF B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   654 000033C4 CD4F                <1>     int 4Fh
   655 000033C6 5B                  <1>     pop rbx
   656 000033C7 EBE2                <1>     jmp short .exitSelect
   657                              <1> .lockShare:
   658 000033C9 FF15(E4C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   659 000033CF EBDA                <1>     jmp short .exitSelect
   660                              <1> .badFunction:
   661 000033D1 B801000000          <1>     mov eax, errInvFnc
   662 000033D6 668905(00C40300)    <1>     mov word [errorExCde], ax
   663 000033DD E99D350000          <1>     jmp extErrExit
   664                              <1> ;STUB FUNCTIONS
   665                              <1> setHandleCount:    ;ah = 67h
   666 000033E2 E998350000          <1>     jmp extErrExit
   667                              <1> 
   668                              <1> ;-----------------------------------:
   669                              <1> ;       Main File IO Routines       :
   670                              <1> ;-----------------------------------:
   671                              <1> commitMain:
   672                              <1> ;Commits the current SFT 
   673 000033E7 E874100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   674 000033EC 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   675 000033F0 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   676                              <1>     retnz   ;Return if nothing has been written or a char dev
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000033F5 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000033F7 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   677 000033F8 66A90080            <1>     test ax, devRedirDev
   678 000033FC 7508                <1>     jnz .notNet
   679                              <1>     ;Commit file net redir call and exit
   680 000033FE B807110000          <1>     mov eax, 1107h
   681 00003403 CD4F                <1>     int 4Fh
   682                              <1>     return  ;Propagate CF and AL if needed due to error
    18                              <2> %%_ret:
    19 00003405 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   683                              <1> .notNet:
   684 00003406 E829350000          <1>     call dosCrit1Enter
   685 0000340B 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   686 0000340F E850300000          <1>     call setWorkingDPB
   687 00003414 E860E7FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   688 00003419 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   689 0000341B E845D3FFFF          <1>     call flushFile  ;Now the file gets flushed
   690                              <1> .exit:
   691                              <1> ;Propagate CF and AL if needed due to error
   692 00003420 E819350000          <1>     call dosCrit1Exit
   693                              <1>     return
    18                              <2> %%_ret:
    19 00003425 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   694                              <1> renameMain:
   695                              <1> ;Now, creates a special find first block for the source file
   696                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   697                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   698                              <1> ; block. 
   699                              <1> ;Then we search for that file name specifically (again), replacing 
   700                              <1> ; the filename portion of the destination buffer. If it exists or the 
   701                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   702                              <1> ; the new directory entry and delete the original file. 
   703                              <1> ;Input:
   704                              <1> ; filenamePtr1 -> Source path + filename pattern
   705                              <1> ; filenamePtr2 -> New path + filename pattern
   706                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   707 00003426 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   708 0000342D E83A300000          <1>     call testCDSNet ;CF=NC => Not net
   709 00003432 7308                <1>     jnc .notNet
   710 00003434 B811110000          <1>     mov eax, 1111h
   711 00003439 CD4F                <1>     int 4Fh
   712                              <1>     return
    18                              <2> %%_ret:
    19 0000343B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   713                              <1> .notNet:
   714                              <1> ;First check if both drives are on the same disk
   715 0000343C 8A05(12C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   716 00003442 8A25(92C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   717 00003448 38E0                <1>     cmp al, ah
   718 0000344A 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   719 0000344C B811000000          <1>     mov eax, errDevUnk
   720 00003451 F9                  <1>     stc
   721                              <1>     return
    18                              <2> %%_ret:
    19 00003452 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   722                              <1> .sameDrive:
   723                              <1> ;Now we check if either pathsepc is simply X:\,0
   724                              <1> ; If they are, return fail as we cannot rename the root dir
   725 00003453 E8DC340000          <1>     call dosCrit1Enter
   726 00003458 8B05(12C50300)      <1>     mov eax, dword [buffer1]
   727 0000345E 30C0                <1>     xor al, al
   728 00003460 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   729 00003465 750B                <1>     jne .checkpath2
   730                              <1> .accDen:
   731 00003467 B805000000          <1>     mov eax, errAccDen
   732                              <1> .errorExit:
   733 0000346C F9                  <1>     stc
   734 0000346D E9ED020000          <1>     jmp .exit2
   735                              <1> .checkpath2:
   736 00003472 8B05(92C50300)      <1>     mov eax, dword [buffer2]
   737 00003478 30C0                <1>     xor al, al
   738 0000347A 3D003A5C00          <1>     cmp eax, 005C3A00h
   739 0000347F 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   740                              <1> ;Now we find first the source file
   741 00003481 488B35(12C60300)    <1>     mov rsi, qword [fname1Ptr]
   742 00003488 4889F7              <1>     mov rdi, rsi
   743 0000348B C605(ECC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   744 00003492 E850DBFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   745 00003497 0F82C2020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   746 0000349D 488D35(4EC60300)    <1>     lea rsi, curDirCopy
   747 000034A4 488D3D(B2C70300)    <1>     lea rdi, renameDir
   748 000034AB B904000000          <1>     mov ecx, fatDirEntry_size/8
   749 000034B0 F348A5              <1>     rep movsq   ;Copy directory over
   750 000034B3 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   751 000034BA E852DAFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   752                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   753                              <1>     ; dir for any CDS.
   754 000034BF F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   755 000034C6 7543                <1>     jnz .notDirCheck
   756 000034C8 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   757 000034CF 57                  <1>     push rdi
   758 000034D0 E85C310000          <1>     call strlen ;Get asciiz length in ecx
   759 000034D5 5B                  <1>     pop rbx
   760 000034D6 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   761 000034D8 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr]
   762 000034DF 0FB615(7EC00300)    <1>     movzx edx, byte [lastdrvNum]
   763                              <1> .dirCheck:
   764 000034E6 4889DF              <1>     mov rdi, rbx
   765 000034E9 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   766 000034EA F3A6                <1>     repe cmpsb  ;Compare while they are equal
   767 000034EC AC                  <1>     lodsb   ;Get the last char to check in al
   768 000034ED 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   769 000034EE 7510                <1>     jne .neqDir
   770 000034F0 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   771 000034F2 0F846FFFFFFF        <1>     je .accDen
   772 000034F8 84C0                <1>     test al, al
   773 000034FA 0F8467FFFFFF        <1>     je .accDen
   774                              <1> .neqDir:
   775 00003500 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   776 00003507 FFCA                <1>     dec edx
   777 00003509 75DB                <1>     jnz .dirCheck
   778                              <1> .notDirCheck:
   779                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   780 0000350B B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   781 00003510 31C0                <1>     xor eax, eax
   782 00003512 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]
   783 00003519 F2AE                <1>     repne scasb   ;Search for terminating null
   784 0000351B FD                  <1>     std ;Go backwards now, to find the path sep
   785 0000351C B05C                <1>     mov al, "\"
   786 0000351E F2AE                <1>     repne scasb   ;Now rsi points one before
   787 00003520 FC                  <1>     cld ;Go normal ways now
   788 00003521 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   789 00003528 57                  <1>     push rdi
   790 00003529 4889FE              <1>     mov rsi, rdi
   791 0000352C 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   792 00003533 E851D9FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   793 00003538 5F                  <1>     pop rdi
   794 00003539 57                  <1>     push rdi    ;Save rdi on stack again
   795 0000353A 488D35(A5C70300)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   796                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   797 00003541 48A5                <1>     movsq
   798 00003543 A5                  <1>     movsd
   799 00003544 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   800 00003545 5F                  <1>     pop rdi ;rdi points to first char position
   801 00003546 E864020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   802 0000354B 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   803                              <1>     ;Else return the pattern back to its original position
   804 00003551 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   805 00003558 E874D9FFFF          <1>     call FCBToAsciiz
   806                              <1>     ;Delete the original directory entry
   807 0000355D 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   808 00003561 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   809 00003563 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   810 00003567 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   811 00003569 8B0D(94C70300)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   812 0000356F C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   813 00003572 91                  <1>     xchg ecx, eax
   814 00003573 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   815 00003575 89C3                <1>     mov ebx, eax
   816 00003577 8B05(74C70300)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   817 0000357D E8A5D2FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   818 00003582 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   819 00003585 E882D1FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   820 0000358A 0F82DA010000        <1>     jc .badExit
   821 00003590 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   822                              <1>     ;rsi points to the file entry
   823 00003595 8A05(F8C60300)      <1>     mov al, byte [delChar]
   824 0000359B 8806                <1>     mov byte [rsi], al
   825 0000359D E8DFCFFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   826                              <1> 
   827                              <1>     ;Now we use the destination filename pattern to build the new filename
   828 000035A2 488B3D(1AC60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   829 000035A9 31C0                <1>     xor eax, eax
   830 000035AB B943000000          <1>     mov ecx, 67
   831 000035B0 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   832                              <1> .findPattern:
   833 000035B2 48FFCF              <1>     dec rdi
   834 000035B5 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   835 000035B8 75F8                <1>     jne .findPattern
   836                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   837 000035BA C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   838 000035C1 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   839 000035C5 750D                <1>     jne .notRoot
   840                              <1>     ;The root dir always exists on a volume so can skip the check.
   841 000035C7 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   842 000035CA 57                  <1>     push rdi
   843 000035CB 800D(EEC60300)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   844 000035D2 EB29                <1>     jmp short .skipCheck
   845                              <1> .notRoot:
   846 000035D4 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   847 000035D5 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   848                              <1>     ;Now check if the parent directory exists for the destination
   849 000035D6 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   850 000035D7 FF35(12C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   851 000035DD 488D35(92C50300)    <1>     lea rsi, buffer2
   852 000035E4 4889F7              <1>     mov rdi, rsi
   853 000035E7 E8F4D9FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   854 000035EC 8F05(12C60300)      <1>     pop qword [fname1Ptr]
   855 000035F2 5F                  <1>     pop rdi
   856 000035F3 0F8271010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   857 000035F9 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   858                              <1> .skipCheck:
   859                              <1>     ;rdi now points to the first char of the pattern
   860 000035FD 4889FE              <1>     mov rsi, rdi
   861 00003600 488D3D(D5C60300)    <1>     lea rdi, wcdFcbName
   862 00003607 E87DD8FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   863                              <1>     ;Ensure the destination pattern is not all question marks
   864 0000360C 813D(D5C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   864 00003614 3F3F                <1>
   865 00003616 7524                <1>     jne .validRenPattern
   866 00003618 813D(D9C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   866 00003620 3F3F                <1>
   867 00003622 7518                <1>     jne .validRenPattern
   868 00003624 66813D(DDC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   868 0000362C 3F                  <1>
   869 0000362D 750D                <1>     jne .validRenPattern
   870 0000362F 803D(DFC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   871 00003636 0F8429010000        <1>     je .bad ;Access denied buddy ol' pal
   872                              <1> .validRenPattern:
   873                              <1>     ;curDirCopy has information for the destination directory file we will 
   874                              <1>     ; write to. The cluster points to the directory file itself to search in
   875                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   876                              <1>     ;Make new fname in fcbName from asciizname in renameDir
   877 0000363C 488D35(B2C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   878 00003643 488D3D(C9C60300)    <1>     lea rdi, fcbName
   879 0000364A 57                  <1>     push rdi    ;Preserve this as the destination for copy
   880 0000364B B90B000000          <1>     mov ecx, 11
   881 00003650 F3A4                <1>     rep movsb
   882 00003652 5F                  <1>     pop rdi
   883 00003653 488D35(D5C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   884                              <1> .mnnLp:
   885 0000365A AC                  <1>     lodsb
   886 0000365B 3C3F                <1>     cmp al, "?" ;Is it a wc?
   887 0000365D 7404                <1>     je .mnnWC   ;Skip overriding this char
   888 0000365F AA                  <1>     stosb   ;Store new char and go forwards by one
   889 00003660 48FFCF              <1>     dec rdi ;Now go back by one
   890                              <1> .mnnWC:
   891 00003663 48FFC7              <1>     inc rdi ;Goto next letter
   892 00003666 FFC1                <1>     inc ecx
   893 00003668 81F90B000000        <1>     cmp ecx, 11
   894 0000366E 75EA                <1>     jne .mnnLp
   895 00003670 488D35(C9C60300)    <1>     lea rsi, fcbName
   896 00003677 488D3D(B2C70300)    <1>     lea rdi, renameDir
   897 0000367E B90B000000          <1>     mov ecx, 11
   898 00003683 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   899 00003685 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   900 00003686 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   901 00003687 488D35(C9C60300)    <1>     lea rsi, fcbName
   902 0000368E E83ED8FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   903 00003693 488B35(1AC60300)    <1>     mov rsi, qword [fname2Ptr]
   904 0000369A 4889F7              <1>     mov rdi, rsi
   905 0000369D E845D9FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
   906 000036A2 0F83C2000000        <1>     jnc .badExit   ;If the file exists, then error
   907 000036A8 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   908 000036AD 0F85B7000000        <1>     jne .badExit
   909                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   910                              <1>     ;If the parent is root, deal with special case
   911 000036B3 488D1D(4EC60300)    <1>     lea rbx, curDirCopy
   912 000036BA F605(EEC60300)02    <1>     test byte [fileFDflg], 2
   913 000036C1 C605(EEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
   914 000036C8 7416                <1>     jz .notRoot2
   915 000036CA 488D35(C9C60300)    <1>     lea rsi, fcbName
   916 000036D1 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
   917 000036D8 48A5                <1>     movsq
   918 000036DA A5                  <1>     movsd
   919 000036DB A4                  <1>     movsb
   920 000036DC 31C0                <1>     xor eax, eax    ;Dir to search
   921 000036DE EB13                <1>     jmp short .getSpace
   922                              <1> .notRoot2:
   923 000036E0 0FB715(62C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   924 000036E7 0FB705(68C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   925 000036EE C1E210              <1>     shl edx, 10h
   926 000036F1 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   927                              <1> .getSpace:
   928 000036F3 E87B000000          <1>     call .searchForDirSpace
   929 000036F8 726B                <1>     jc .bad
   930                              <1> ;dir Entry found, rsi points to space in buffer
   931 000036FA 4889F7              <1>     mov rdi, rsi
   932 000036FD 488D35(B2C70300)    <1>     lea rsi, renameDir
   933 00003704 B904000000          <1>     mov ecx, fatDirEntry_size/8
   934 00003709 F348A5              <1>     rep movsq   ;Copy dir over
   935 0000370C E870CEFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   936                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   937                              <1>     ;If it does, we find next. If not, we exit
   938 00003711 B03F                <1>     mov al, "?"
   939 00003713 488B3D(12C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   940 0000371A E8122F0000          <1>     call strlen ;Get in rcx to get the length of the string
   941 0000371F F2AE                <1>     repne scasb
   942 00003721 7534                <1>     jne .exit  ;If source name has no wildcards, exit
   943 00003723 B90B000000          <1>     mov ecx, 11
   944 00003728 8D3D(D5C60300)      <1>     lea edi, wcdFcbName
   945 0000372E F2AE                <1>     repne scasb
   946 00003730 7525                <1>     jne .exit
   947                              <1>     ;Here we gotta do a find next now!
   948 00003732 FF35(0CC40300)      <1>     push qword [currentDTA]
   949 00003738 488D3D(87C70300)    <1>     lea rdi, renameFFBlk
   950 0000373F 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   951 00003746 E844D4FFFF          <1>     call findNextMain
   952 0000374B 8F05(0CC40300)      <1>     pop qword [currentDTA]
   953 00003751 0F83E5FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   954                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   955                              <1> .exit:
   956 00003757 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   957 00003758 E8F2CDFFFF          <1>     call writeThroughBuffers
   958 0000375D 720B                <1>     jc .badExit
   959                              <1> .exit2: ;Bad exit before we push qword on stack 
   960 0000375F E8DA310000          <1>     call dosCrit1Exit
   961                              <1>     return
    18                              <2> %%_ret:
    19 00003764 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   962                              <1> .bad:
   963 00003765 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   964                              <1> .badExit:
   965 0000376A E8BECDFFFF          <1>     call cancelWriteThroughBuffers
   966 0000376F F9                  <1>     stc
   967 00003770 5F                  <1>     pop rdi
   968 00003771 EBEC                <1>     jmp short .exit2
   969                              <1> 
   970                              <1> .searchForDirSpace:
   971                              <1> ;Input: eax = First directory to search 
   972 00003773 8905(74C70300)      <1>     mov dword [dirClustA], eax
   973 00003779 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   974 0000377B 668905(78C70300)    <1>     mov word [dirSect], ax
   975 00003782 8905(7AC70300)      <1>     mov dword [dirEntry], eax
   976 00003788 E85FE3FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   977 0000378D 731C                <1>     jnc .dirEntryFnd
   978 0000378F 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   978 00003797 0000                <1>
   979 00003799 7412                <1>     je .searchBad ;Set CF and exit
   980 0000379B E896E4FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   981 000037A0 720B                <1>     jc .searchBad
   982 000037A2 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   983 000037A7 7404                <1>     je .searchBad
   984                              <1>     ;Else eax = Newly allocated cluster
   985 000037A9 EBC8                <1>     jmp short .searchForDirSpace
   986                              <1> .dirEntryFnd:
   987 000037AB F8                  <1>     clc
   988                              <1>     return
    18                              <2> %%_ret:
    19 000037AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   989                              <1> .searchBad:
   990 000037AD F9                  <1>     stc
   991                              <1>     return
    18                              <2> %%_ret:
    19 000037AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   992                              <1> 
   993                              <1> 
   994                              <1> checkNoOpenHandlesForShareAction:
   995                              <1> ;We check that we can proceed. This function will fail IF there are handles
   996                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
   997                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
   998                              <1> ; do, then we should get a Share error and thus it would prevent us from 
   999                              <1> ; proceeding.
  1000                              <1> ;
  1001                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1002                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1003                              <1> ;       currDirCopy = Directory entry for the file
  1004 000037AF E869310000          <1>     call dosPushRegs    ;Save the context completely
  1005 000037B4 803D(B4C00300)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1006 000037BB 740C                <1>     jz .noOpenFileCheckHandler
  1007 000037BD FF15(B4C00300)      <1>     call qword [openFileCheck]
  1008 000037C3 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1009 000037C5 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1010 000037C7 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1011                              <1> .noOpenFileCheckHandler:
  1012                              <1>     ;The following closes most recent shared handles referencing it
  1013                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1014                              <1>     ; mode and if there is precisely 1  
  1015 000037C9 FF15(1CC10300)      <1>     call qword [closeNewHdlShare]    
  1016                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1017 000037CF 488D3D(08CD0300)    <1>     lea rdi, scratchSFT
  1018 000037D6 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  1019 000037DD B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1020 000037E2 C605(F7C60300)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1021                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1022 000037E9 57                  <1>     push rdi
  1023 000037EA E882020000          <1>     call buildSFTEntry
  1024 000037EF 5F                  <1>     pop rdi
  1025 000037F0 7225                <1>     jc .errorMain
  1026 000037F2 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1027 000037F7 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1028 000037FD 57                  <1>     push rdi
  1029 000037FE E892380000          <1>     call shareFile
  1030 00003803 5F                  <1>     pop rdi
  1031 00003804 7211                <1>     jc .errorMain
  1032 00003806 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1033 0000380B E81C380000          <1>     call closeShareCallWrapper
  1034                              <1> .exit:
  1035 00003810 E8F1300000          <1>     call dosPopRegs
  1036 00003815 F8                  <1>     clc
  1037                              <1>     return
    18                              <2> %%_ret:
    19 00003816 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1038                              <1> .errorMain:
  1039 00003817 E8EA300000          <1>     call dosPopRegs
  1040 0000381C B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1041 00003821 F9                  <1>     stc
  1042                              <1>     return
    18                              <2> %%_ret:
    19 00003822 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1043                              <1> 
  1044                              <1> outerDeleteMain:
  1045                              <1> ;Internal current dir must be populated with dir entry
  1046                              <1> ; and internal DOS directory variables now point to this entry.
  1047                              <1> ;Checks if the file is a char device or read only.
  1048                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1049                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1050                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1051                              <1> ;         CF=NC => File deleted
  1052 00003823 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
  1053 0000382A E83D2C0000          <1>     call testCDSNet ;CF=NC => Not net
  1054 0000382F 7308                <1>     jnc .notNet
  1055 00003831 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1056 00003836 CD4F                <1>     int 4Fh
  1057                              <1>     return
    18                              <2> %%_ret:
    19 00003838 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1058                              <1> .notNet:
  1059 00003839 B805000000          <1>     mov eax, errAccDen  
  1060 0000383E F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1061 00003845 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1062 00003847 F605(59C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1063 0000384E 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1064 00003850 E843000000          <1>     call deleteMain
  1065 00003855 723F                <1>     jc .exitBad
  1066                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1067 00003857 B03F                <1>     mov al, "?"
  1068 00003859 488D3D(C9C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1069 00003860 B90B000000          <1>     mov ecx, 11
  1070 00003865 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1071 00003867 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1072 00003869 F8                  <1>     clc
  1073                              <1>     return  ;Return ok!
    18                              <2> %%_ret:
    19 0000386A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1074                              <1> .serverWCloop:
  1075 0000386B FF35(0CC40300)      <1>     push qword [currentDTA] ;Save the current DTA address
  1076 00003871 488D3D(23C60300)    <1>     lea rdi, dosffblock
  1077 00003878 57                  <1>     push rdi    ;Push this address onto the stack
  1078 00003879 E893D6FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1079 0000387E 8F05(0CC40300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1080 00003884 E806D3FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1081 00003889 8F05(0CC40300)      <1>     pop qword [currentDTA]
  1082 0000388F E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1083 00003894 73D5                <1>     jnc .serverWCloop     
  1084                              <1> ;Stop as soon as an error occurs
  1085                              <1> .exitBad:
  1086 00003896 F9                  <1>     stc
  1087                              <1>     return
    18                              <2> %%_ret:
    19 00003897 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1088                              <1> 
  1089                              <1> deleteMain:
  1090                              <1> ;Now unlink FAT chain and then clear directory entry
  1091                              <1> ;Get the start cluster of this file
  1092                              <1> ;Input:
  1093                              <1> ; The file must have NOT be read-only.
  1094                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1095                              <1> ;     - curDirCopy must be filled with the file directory information
  1096                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1097                              <1> ;Output: CF=NC => Success, 
  1098                              <1> ; If not net CDS:
  1099                              <1> ;   rsi keeps pointing to directory entry.
  1100                              <1> ;   al = First char of the file that was deleted.
  1101                              <1> ;        CF=CY => Error
  1102                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1103 00003898 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1104                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000389D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1105 0000389F 52                  <1>     push rdx
  1106 000038A0 0FB715(68C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1107 000038A7 0FB705(62C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1108 000038AE C1E010              <1>     shl eax, 10h
  1109 000038B1 09D0                <1>     or eax, edx ;Add low bits to eax
  1110 000038B3 5A                  <1>     pop rdx
  1111 000038B4 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1112 000038B6 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1113 000038B8 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1114 000038BF E81CD1FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1115 000038C4 721B                <1>     jc .exitBad
  1116                              <1> .skipUnlink:
  1117                              <1>     ;Now replace the first char of the directory to 0E5h
  1118                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1119 000038C6 E834E2FFFF          <1>     call getDiskDirectoryEntry
  1120 000038CB 7214                <1>     jc .exitBad
  1121 000038CD 8A05(F8C60300)      <1>     mov al, byte [delChar]
  1122 000038D3 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1123 000038D5 E8A7CCFFFF          <1>     call markBufferDirty
  1124                              <1>     ;CF must be clear
  1125 000038DA E870CCFFFF          <1>     call writeThroughBuffers
  1126                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000038DF 73B6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1127                              <1> .exitBad:
  1128 000038E1 E847CCFFFF          <1>     call cancelWriteThroughBuffers
  1129 000038E6 F9                  <1>     stc
  1130                              <1>     return
    18                              <2> %%_ret:
    19 000038E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1131                              <1> 
  1132                              <1> openMain:
  1133                              <1> ;Input: ax (formally al) = Open mode
  1134                              <1> ;       [currentSFT] = SFT we are building
  1135                              <1> ;       [workingCDS] = CDS of drive to access
  1136                              <1> ;       [workingDPB] = DPB of drive to access
  1137                              <1> ;Ouput: CF=CY => Error, eax has error code
  1138 000038E8 E8AE000000          <1>     call setOpenMode
  1139                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000038ED 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1140 000038EF 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1141 000038F6 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1142 000038FD 30E4                <1>     xor ah, ah  ;al has the access mode
  1143 000038FF 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1144 00003903 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1145 0000390A 750A                <1>     jne .notNet
  1146                              <1> .redirOpen:
  1147 0000390C 50                  <1>     push rax    ;Push open mode onto stack
  1148 0000390D B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1149 00003912 CD4F                <1>     int 4Fh
  1150 00003914 58                  <1>     pop rax
  1151                              <1>     return
    18                              <2> %%_ret:
    19 00003915 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1152                              <1> .notNet:
  1153 00003916 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1154 0000391C 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1155 0000391E E811300000          <1>     call dosCrit1Enter
  1156 00003923 C605(F7C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1157 0000392A C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1158 00003931 E83B010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1159 00003936 7227                <1>     jc .errorExit
  1160                              <1> .openShareLoop:
  1161                              <1> ;Now we attempt to register the file with SHARE
  1162 00003938 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount]    
  1163                              <1> .openShareTryAgain: 
  1164 0000393F 51                  <1>     push rcx
  1165 00003940 E8E0360000          <1>     call openShareCallWrapper
  1166 00003945 59                  <1>     pop rcx
  1167 00003946 731D                <1>     jnc .fileSharedOk
  1168 00003948 E802370000          <1>     call shareRetryCountdown
  1169 0000394D FFC9                <1>     dec ecx
  1170 0000394F 75EE                <1>     jnz .openShareTryAgain
  1171 00003951 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1172 00003958 E815370000          <1>     call shareCheckOpenViolation
  1173 0000395D 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1174                              <1> .errorExit:
  1175 0000395F E8DA2F0000          <1>     call dosCrit1Exit   ;Else we error out
  1176                              <1>     return
    18                              <2> %%_ret:
    19 00003964 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1177                              <1> .fileSharedOk:
  1178 00003965 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1179 0000396A E8F10A0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1180 0000396F FF15(24C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1181 00003975 E8C42F0000          <1>     call dosCrit1Exit
  1182                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1183 0000397A 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1184 00003981 E877E4FFFF          <1>     call openSFT
  1185 00003986 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1186 0000398C 7501                <1>     jnz .netOpen
  1187                              <1>     return
    18                              <2> %%_ret:
    19 0000398E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1188                              <1> .netOpen:
  1189 0000398F 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1190 00003996 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1191                              <1>     return
    18                              <2> %%_ret:
    19 0000399A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1192                              <1> 
  1193                              <1> setOpenMode:
  1194                              <1> ;Input: al = Open mode for the file open
  1195 0000399B 8805(EDC60300)      <1>     mov byte [fileOpenMd], al
  1196 000039A1 53                  <1>     push rbx
  1197 000039A2 88C3                <1>     mov bl, al
  1198 000039A4 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1199 000039A7 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1200 000039AE 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1201 000039B0 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1202 000039B3 7405                <1>     je .s2
  1203                              <1> .s1:
  1204 000039B5 80FB40              <1>     cmp bl, denyNoneShare
  1205 000039B8 770D                <1>     ja .somBad
  1206                              <1> .s2:
  1207 000039BA 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1208 000039BC 80E30F              <1>     and bl, 0Fh
  1209 000039BF 80FB02              <1>     cmp bl, RWAccess
  1210 000039C2 7703                <1>     ja .somBad
  1211 000039C4 5B                  <1>     pop rbx
  1212 000039C5 F8                  <1>     clc
  1213                              <1>     return
    18                              <2> %%_ret:
    19 000039C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1214                              <1> .somBad:
  1215 000039C7 5B                  <1>     pop rbx
  1216 000039C8 B80C000000          <1>     mov eax, errAccCde
  1217 000039CD F9                  <1>     stc
  1218                              <1>     return
    18                              <2> %%_ret:
    19 000039CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1219                              <1> 
  1220                              <1> createNewMain:
  1221                              <1> ;Input: ax (formally al) = File attributes
  1222                              <1> ;       [currentSFT] = SFT we are building
  1223                              <1> ;       [workingCDS] = CDS of drive to access
  1224                              <1> ;       [workingDPB] = DPB of drive to access
  1225 000039CF 0FB6C0              <1>     movzx eax, al
  1226 000039D2 F605(F4C60300)FF    <1>     test byte [fileExist], -1
  1227 000039D9 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1228 000039DB B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1229 000039E0 F9                  <1>     stc
  1230                              <1>     return
    18                              <2> %%_ret:
    19 000039E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1231                              <1> createMain:
  1232                              <1> ;Input: ax (formally al) = File attributes
  1233                              <1> ;       [currentSFT] = SFT we are building
  1234                              <1> ;       [workingCDS] = CDS of drive to access
  1235                              <1> ;       [workingDPB] = DPB of drive to access
  1236 000039E2 0FB6C0              <1>     movzx eax, al
  1237                              <1> .createNewEP:
  1238 000039E5 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1239 000039E7 750A                <1>     jnz .invalidAttrib
  1240 000039E9 A808                <1>     test al, dirVolumeID
  1241 000039EB 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1242 000039ED 0C20                <1>     or al, dirArchive   ;Set archive bit
  1243 000039EF A810                <1>     test al, dirDirectory   
  1244 000039F1 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1245                              <1> .invalidAttrib:
  1246 000039F3 B805000000          <1>     mov eax, errAccDen
  1247 000039F8 F9                  <1>     stc
  1248                              <1>     return
    18                              <2> %%_ret:
    19 000039F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1249                              <1> .validAttr:
  1250 000039FA 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1251 00003A01 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
  1252 00003A08 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1253 00003A0F 750A                <1>     jne .diskFile
  1254 00003A11 50                  <1>     push rax    ;Save the new attributes
  1255 00003A12 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1256 00003A17 CD4F                <1>     int 4Fh
  1257 00003A19 5B                  <1>     pop rbx
  1258                              <1>     return
    18                              <2> %%_ret:
    19 00003A1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1259                              <1> .diskFile:
  1260 00003A1B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1261 00003A21 740A                <1>     jz .hardFile
  1262 00003A23 50                  <1>     push rax    ;Save the new attributes
  1263 00003A24 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1264 00003A29 CD4F                <1>     int 4Fh
  1265 00003A2B 5B                  <1>     pop rbx
  1266                              <1>     return
    18                              <2> %%_ret:
    19 00003A2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1267                              <1> .hardFile:
  1268 00003A2D 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1269 00003A33 C605(F7C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1270 00003A3A C605(F8C60300)E5    <1>     mov byte [delChar], 0E5h
  1271 00003A41 E8EE2E0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1272 00003A46 57                  <1>     push rdi
  1273 00003A47 50                  <1>     push rax    ;Save the file attributes on stack
  1274 00003A48 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1275 00003A4D E81F000000          <1>     call buildSFTEntry
  1276 00003A52 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1277 00003A53 5F                  <1>     pop rdi
  1278 00003A54 7215                <1>     jc .errorExit
  1279 00003A56 B802000000          <1>     mov eax, 2
  1280 00003A5B FF15(24C10300)      <1>     call qword [updateDirShare]
  1281 00003A61 E8D82E0000          <1>     call dosCrit1Exit
  1282 00003A66 E90FFFFFFF          <1>     jmp openDriverMux
  1283                              <1> .errorExit:
  1284 00003A6B E8CE2E0000          <1>     call dosCrit1Exit
  1285                              <1>     return
    18                              <2> %%_ret:
    19 00003A70 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1286                              <1> buildSFTEntry:
  1287                              <1> ;Called in a critical section.
  1288                              <1> ;Input: al = Open mode
  1289                              <1> ;       STACK: File attributes if creating a file
  1290                              <1> ;       [currentSFT] = SFT we are building
  1291                              <1> ;       [workingCDS] = CDS of drive to access
  1292                              <1> ;       [workingDPB] = DPB of drive to access
  1293                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1294                              <1> ;
  1295                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1296                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1297                              <1> ;        If CF=CY: - Return fail
  1298                              <1> ;
  1299                              <1> ;
  1300                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1301                              <1> ;   If not, create disk entry.
  1302                              <1> ;Check if the device was a char device by checking curDirCopy.
  1303                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1304                              <1> 
  1305                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1306                              <1> ; to start of file fields of the SFT
  1307 00003A71 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1308 00003A72 4889E5              <1>     mov rbp, rsp
  1309 00003A75 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1310                              <1> ;Set the open mode
  1311 00003A7C 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1312                              <1> ;Get current time
  1313 00003A80 E88AECFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1314 00003A85 E870EDFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1315 00003A8A 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1316                              <1> ;Set current Owner
  1317 00003A8D 488B05(14C40300)    <1>     mov rax, qword [currentPSP]
  1318 00003A94 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1319                              <1> ;Set file pointer to first byte
  1320 00003A98 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1321                              <1> ;Common fields set
  1322 00003A9F F605(F7C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1323 00003AA6 0F849D010000        <1>     jz .openProc
  1324                              <1>     ;Here if Creating a file.
  1325 00003AAC F605(F4C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1326 00003AB3 0F84D9000000        <1>     jz .createFile
  1327 00003AB9 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1328 00003AC0 0F858C010000        <1>     jnz .charDev
  1329                              <1>     ;Here disk file exists, so recreating the file.
  1330                              <1>     ;If recreating, check we are not overwriting a Dir
  1331 00003AC6 F605(59C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1332 00003ACD 0F85CD010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1333 00003AD3 55                  <1>     push rbp
  1334 00003AD4 FF35(22C70300)      <1>     push qword [currentSFT]
  1335 00003ADA E8B9FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1336 00003ADF 8F05(22C70300)      <1>     pop qword [currentSFT]
  1337 00003AE5 5D                  <1>     pop rbp
  1338 00003AE6 0F82B4010000        <1>     jc .bad
  1339                              <1>     ;al has the char for the filename
  1340                              <1>     ;Sets vars for the sector/offset into the sector
  1341 00003AEC 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1342 00003AF3 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1343 00003AF5 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1344                              <1>     ;al has file attributes.
  1345 00003AF9 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1346 00003AFB 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1347 00003AFE 31C0                <1>     xor eax, eax
  1348                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1349 00003B00 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1350 00003B04 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1351 00003B08 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1352 00003B0B 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1353 00003B0E 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1354 00003B11 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1355 00003B14 57                  <1>     push rdi    ;Save SFT pointer
  1356 00003B15 488D3D(4EC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1357 00003B1C B920000000          <1>     mov ecx, fatDirEntry_size
  1358 00003B21 F3A4                <1>     rep movsb
  1359 00003B23 E859CAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1360 00003B28 5F                  <1>     pop rdi
  1361                              <1> .createCommon:  ;rdi must point to the current SFT 
  1362                              <1>     ;Now populate the remaining SFT fields 
  1363 00003B29 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1364 00003B30 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1365 00003B33 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1366 00003B36 488B05(36C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1367 00003B3D 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1368 00003B41 0FB705(3EC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1369 00003B48 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1370 00003B4B 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1371 00003B4E 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1372 00003B51 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1373 00003B54 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1374 00003B58 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1375 00003B5C C1E210              <1>     shl edx, 10h
  1376 00003B5F 09D0                <1>     or eax, edx
  1377 00003B61 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1378                              <1> 
  1379 00003B64 31C0                <1>     xor eax, eax
  1380                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1381 00003B66 8A05(F9C60300)      <1>     mov al, byte [workingDrv]
  1382 00003B6C 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1383 00003B6E 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1384 00003B72 488B05(FAC60300)    <1>     mov rax, qword [workingDPB]
  1385 00003B79 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1386                              <1>     ;Last thing, copy the filename over
  1387                              <1>     ;Now save the name
  1388                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1389 00003B7D 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1390 00003B81 488D35(4EC60300)    <1>     lea rsi, curDirCopy
  1391 00003B88 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1392 00003B8A 66A5                <1>     movsw
  1393 00003B8C A4                  <1>     movsb
  1394                              <1>     ;SFT filled
  1395 00003B8D E905010000          <1>     jmp .exit
  1396                              <1> .createFile:
  1397                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1398                              <1>     ;rsi points to current sda entry
  1399 00003B92 488D3D(4EC60300)    <1>     lea rdi, curDirCopy
  1400                              <1>     ;Clear out the dir entry
  1401 00003B99 57                  <1>     push rdi
  1402 00003B9A B904000000          <1>     mov ecx, 4
  1403 00003B9F 31C0                <1>     xor eax, eax
  1404 00003BA1 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1405 00003BA4 5F                  <1>     pop rdi
  1406                              <1>     ;Copy the FCB name over    
  1407 00003BA5 56                  <1>     push rsi
  1408 00003BA6 57                  <1>     push rdi
  1409 00003BA7 B90B000000          <1>     mov ecx, 11
  1410 00003BAC 488D35(C9C60300)    <1>     lea rsi, fcbName
  1411 00003BB3 F3A4                <1>     rep movsb   ;Move over the FCB name
  1412 00003BB5 5F                  <1>     pop rdi
  1413 00003BB6 5E                  <1>     pop rsi
  1414                              <1> 
  1415 00003BB7 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1416                              <1>     ;al has file attributes.
  1417 00003BBB 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1418 00003BBD 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1419 00003BC0 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1420 00003BC3 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1421 00003BC6 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1422 00003BC9 8B05(70C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1423                              <1> .searchForDirSpace:
  1424 00003BCF 8905(74C70300)      <1>     mov dword [dirClustA], eax
  1425 00003BD5 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1426 00003BD7 668905(78C70300)    <1>     mov word [dirSect], ax
  1427 00003BDE 8905(7AC70300)      <1>     mov dword [dirEntry], eax
  1428 00003BE4 57                  <1>     push rdi
  1429 00003BE5 E802DFFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1430 00003BEA 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1431 00003BEB 7328                <1>     jnc .dirEntryFnd
  1432 00003BED 813D(70C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1432 00003BF5 0000                <1>
  1433 00003BF7 0F84A3000000        <1>     je .bad ;Set CF and exit
  1434 00003BFD E834E0FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1435 00003C02 0F828F000000        <1>     jc .exit
  1436 00003C08 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1437 00003C0D 0F848D000000        <1>     je .bad
  1438                              <1>     ;Else eax = Newly allocated cluster
  1439 00003C13 EBBA                <1>     jmp short .searchForDirSpace
  1440                              <1> .dirEntryFnd:
  1441 00003C15 4887FE              <1>     xchg rdi, rsi
  1442 00003C18 B904000000          <1>     mov ecx, 4
  1443 00003C1D F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1444 00003C20 E85CC9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1445 00003C25 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1446 00003C2C E9F8FEFFFF          <1>     jmp .createCommon
  1447                              <1> .open:
  1448                              <1> ;curdircopy has a copy of the disk file directory
  1449                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1450 00003C31 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1451 00003C38 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1452                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1453 00003C3F E8BBDEFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1454 00003C44 E9E0FEFFFF          <1>     jmp .createCommon
  1455                              <1> .openProc:
  1456                              <1>     ;Here if Opening a file.
  1457 00003C49 F605(59C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1458 00003C50 74DF                <1>     jz .open
  1459                              <1> .charDev:
  1460 00003C52 488B05(4EC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1461 00003C59 E8352B0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1462 00003C5E 7307                <1>     jnc .notBadCharDevName
  1463 00003C60 B805000000          <1>     mov eax, errAccDen
  1464 00003C65 EB30                <1>     jmp short .exit ;CF already set
  1465                              <1> .notBadCharDevName:
  1466 00003C67 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1467 00003C6E 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1468 00003C72 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1469 00003C76 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1470 00003C79 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1471 00003C7C 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1472 00003C80 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1473 00003C87 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1474 00003C8B B820202020          <1>     mov eax, "    "
  1475 00003C90 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1476 00003C94 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1477                              <1> .exit:
  1478 00003C97 E8C3090000          <1>     call writeThroughBuffersForHandle
  1479 00003C9C 7207                <1>     jc .bad2
  1480 00003C9E 5D                  <1>     pop rbp
  1481                              <1>     return
    18                              <2> %%_ret:
    19 00003C9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1482                              <1> .bad:   ;Set Access Denied
  1483 00003CA0 B805000000          <1>     mov eax, errAccDen
  1484                              <1> .bad2:  ;Error propagating error code
  1485 00003CA5 E8E5090000          <1>     call cancelWriteThroughBuffersForHandle
  1486 00003CAA F9                  <1>     stc
  1487 00003CAB 5D                  <1>     pop rbp
  1488                              <1>     return
    18                              <2> %%_ret:
    19 00003CAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1489                              <1> 
  1490                              <1> closeMain: ;Int 4Fh AX=1201h
  1491                              <1> ;Gets the directory entry for a file
  1492                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1493                              <1> ;If CF=CY on return: Error, return error with al = error code
  1494                              <1> ;Preserve all regs except eax and rdi
  1495                              <1> ; If CF=NC on return: eax = Unknown
  1496                              <1> ;                     rdi = current SFT ptr
  1497 00003CAD 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1498 00003CB4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1499 00003CBA 7408                <1>     jz .physical
  1500                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1501 00003CBC B806110000          <1>     mov eax, 1106h  ;Make request
  1502 00003CC1 CD4F                <1>     int 4Fh ;Beep!
  1503                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00003CC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1504                              <1> .physical:  
  1505                              <1> ; We make a request to the dev dir to close the device
  1506                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1507 00003CC4 E86B2C0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1508 00003CC9 53                  <1>     push rbx
  1509 00003CCA 56                  <1>     push rsi
  1510 00003CCB 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1511 00003CCF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1512 00003CD5 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1513                              <1>     ;rsi has DPB pointer here
  1514                              <1>     ;rdi has the SFT pointer
  1515 00003CD7 55                  <1>     push rbp
  1516 00003CD8 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1517 00003CDB E884270000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1518 00003CE0 E894DEFFFF          <1>     call updateDirectoryEntryForFile
  1519 00003CE5 5D                  <1>     pop rbp
  1520                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1521 00003CE6 7234                <1>     jc .exit
  1522 00003CE8 E878CAFFFF          <1>     call flushFile
  1523 00003CED 722D                <1>     jc .exit    ;If something went wrong, exit
  1524 00003CEF 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1525 00003CF3 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1526                              <1> .charClose:
  1527                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1528                              <1>     ;We now decrement handle count in SFT structure
  1529 00003CF7 E854090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1530 00003CFC 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1531 00003CFF 7503                <1>     jnz .driverClose
  1532 00003D01 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1533                              <1> .driverClose:
  1534 00003D04 50                  <1>     push rax
  1535 00003D05 51                  <1>     push rcx
  1536 00003D06 E821330000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1537 00003D0B 59                  <1>     pop rcx
  1538 00003D0C 58                  <1>     pop rax
  1539 00003D0D 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1540                              <1>     ;and if the device is a disk device, cl will have the unit number
  1541 00003D0E 9C                  <1>     pushfq
  1542 00003D0F E8F2E0FFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1543 00003D14 9D                  <1>     popfq
  1544 00003D15 E845090000          <1>     call writeThroughBuffersForHandle
  1545 00003D1A 7306                <1>     jnc short .exitOk
  1546                              <1> .exit:
  1547 00003D1C E86E090000          <1>     call cancelWriteThroughBuffersForHandle
  1548 00003D21 F9                  <1>     stc
  1549                              <1> .exitOk:
  1550 00003D22 5E                  <1>     pop rsi
  1551 00003D23 5B                  <1>     pop rbx
  1552 00003D24 E8152C0000          <1>     call dosCrit1Exit
  1553                              <1>     return
    18                              <2> %%_ret:
    19 00003D29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1554                              <1> 
  1555                              <1> readBytes:
  1556                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1557                              <1> ;Input: ecx = Number of bytes to read
  1558                              <1> ;Output: ecx = Number of bytes read
  1559                              <1> ;Number of bytes read 
  1560                              <1> ;If CF=CY, return with error code in ax
  1561 00003D2A E831070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1562 00003D2F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1563 00003D33 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1564 00003D35 3C01                <1>     cmp al, WriteAccess
  1565 00003D37 7509                <1>     jne .readable
  1566 00003D39 B805000000          <1>     mov eax, errAccDen
  1567 00003D3E 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1568 00003D40 F9                  <1>     stc
  1569                              <1>     return
    18                              <2> %%_ret:
    19 00003D41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1570                              <1> .readable:
  1571 00003D42 E85B070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1572 00003D47 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1573 00003D4A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1574 00003D50 740A                <1>     jz .notRedir
  1575 00003D52 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1576 00003D57 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1577                              <1>     return 
    18                              <2> %%_ret:
    19 00003D59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1578                              <1> .exitOk:
  1579 00003D5A F8                  <1>     clc
  1580                              <1>     return 
    18                              <2> %%_ret:
    19 00003D5B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1581                              <1> .notRedir:
  1582 00003D5C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1583 00003D62 7510                <1>     jnz readCharDev
  1584 00003D64 E8CB2B0000          <1>     call dosCrit1Enter
  1585 00003D69 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1586 00003D6E E8CB2B0000          <1>     call dosCrit1Exit
  1587                              <1>     return 
    18                              <2> %%_ret:
    19 00003D73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1588                              <1> readCharDev:
  1589                              <1> ;rdi points to sft for char dev to read
  1590                              <1> ;ecx has the number of bytes to transfer
  1591                              <1> ;Vars have been set up and DTA has the transfer address
  1592                              <1> ;Returns in ecx, the actual bytes transferred
  1593                              <1> ;If CF=CY, return with error code in ax
  1594 00003D74 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1595 00003D7B 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1596 00003D7F 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1597 00003D86 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1598 00003D89 0F84C7020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1599 00003D8F F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1600 00003D92 7407                <1>     jz .notNul
  1601                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1602                              <1>     ;NUL never transfers bytes 
  1603 00003D94 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1604 00003D96 E9BB020000          <1>     jmp readExitOk    ;Goto exit
  1605                              <1> .notNul:
  1606 00003D9B F6C320              <1>     test bl, charDevBinary
  1607 00003D9E 757F                <1>     jnz .binary
  1608                              <1>     ;Here if the device is in ASCII mode
  1609 00003DA0 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1610 00003DA3 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1611                              <1> .consoleInput:
  1612                              <1>     ;Console input here
  1613 00003DA9 E84AE5FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1614                              <1>     ;Get current offset into buffer (if one exists)
  1615 00003DAE 488B35(31C00300)    <1>     mov rsi, qword [vConHdlOff]
  1616 00003DB5 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1617 00003DB8 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1618 00003DBA 803D(43C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1619 00003DC1 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1620                              <1>     ;Else, reset the buffer
  1621 00003DC3 66C705(43C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1621 00003DCB FF                  <1>
  1622                              <1> .oldBuf:
  1623                              <1> ;Preserve the dta and number of chars to tfr
  1624 00003DCC 51                  <1>     push rcx
  1625 00003DCD 57                  <1>     push rdi
  1626 00003DCE 488D15(43C30300)    <1>     lea rdx, vConInBuf
  1627 00003DD5 E83EE5FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1628 00003DDA 5F                  <1>     pop rdi
  1629 00003DDB 59                  <1>     pop rcx
  1630 00003DDC 488D35(45C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1631 00003DE3 803E1A              <1>     cmp byte [rsi], EOF
  1632 00003DE6 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1633 00003DE8 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1634 00003DEB B00A                <1>     mov al, LF
  1635 00003DED E8A1E0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1636 00003DF2 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1637 00003DF4 EB18                <1>     jmp short .exit
  1638                              <1> .tfrBuf:
  1639 00003DF6 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1640 00003DF7 AA                  <1>     stosb
  1641 00003DF8 3C0D                <1>     cmp al, CR 
  1642 00003DFA 7503                <1>     jne .noCRLF
  1643 00003DFC C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1644                              <1> .noCRLF:
  1645 00003DFF 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1646 00003E01 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1647 00003E03 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1648                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1649 00003E05 E889E0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1650 00003E0A 31F6                <1>     xor esi, esi
  1651 00003E0C 0C01                <1>     or al, 1    ;Set ZF = NZ
  1652                              <1> .exit:
  1653 00003E0E E8FDE4FFFF          <1>     call vConRetDriver
  1654 00003E13 488935(31C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1655 00003E1A E937020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1656                              <1> 
  1657                              <1> .binary:
  1658                              <1>     ;Setup registers for transfer
  1659 00003E1F 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1660 00003E22 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1661                              <1>     ;ecx has the number of bytes to transfer directly
  1662 00003E25 E858250000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1663 00003E2A 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1664 00003E31 E895220000          <1>     call goDriver   ;Make the request
  1665 00003E36 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1666 00003E39 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1667 00003E40 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1668 00003E46 7422                <1>     jz .binNoError
  1669                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1670 00003E48 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1671 00003E4A E8801D0000          <1>     call charDevErr   ;ah = has part of the error 
  1672                              <1>     ;al now has the response
  1673 00003E4F 3C00                <1>     cmp al, critIgnore
  1674 00003E51 7417                <1>     je .binNoError ;Simply proceed as normal
  1675 00003E53 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1676 00003E56 3C03                <1>     cmp al, critFail
  1677 00003E58 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1678                              <1>     ;Fallthrough here for fail!
  1679                              <1> .failExit:
  1680 00003E5A 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  1681 00003E61 31C9                <1>     xor ecx, ecx
  1682 00003E63 B805000000          <1>     mov eax, errAccDen
  1683 00003E68 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1684                              <1>     return
    18                              <2> %%_ret:
    19 00003E69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1685                              <1> .binNoError:
  1686                              <1>     ;Get number of bytes transferred into 
  1687 00003E6A 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1688 00003E70 F7D8                <1>     neg eax ;make it into -eax
  1689 00003E72 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1690                              <1>     ;ecx now has bytes left to transfer
  1691 00003E76 50                  <1>     push rax    ;Save value on stack
  1692 00003E77 31C0                <1>     xor eax, eax ;Set ZF
  1693 00003E79 FFC0                <1>     inc eax ;Clear ZF
  1694 00003E7B 58                  <1>     pop rax ;Get back the original value
  1695 00003E7C E9D5010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1696                              <1> .generalASCII:
  1697                              <1>     ;ecx has bytes to transfer here
  1698                              <1>     ;Setup registers for transfer
  1699 00003E81 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1700 00003E84 51                  <1>     push rcx
  1701 00003E85 B901000000          <1>     mov ecx, 1  ;Get one char
  1702 00003E8A 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1703 00003E8D E8F0240000          <1>     call primReqReadSetup   ;Setup request
  1704 00003E92 59                  <1>     pop rcx
  1705                              <1>     ;rbx now has request header ptr
  1706 00003E93 488B35(FAC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1707                              <1> .asciiReadChar:
  1708 00003E9A 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1709 00003E9D E8DAE3FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1710 00003EA2 E824220000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1711 00003EA7 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1712 00003EAE F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1713 00003EB4 741E                <1>     jz .asciiNoError
  1714 00003EB6 E8141D0000          <1>     call charDevErr    ;Call Int 44h
  1715                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1716 00003EBB C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1716 00003EC3 0000                <1>
  1717 00003EC5 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1718 00003EC8 3C03                <1>     cmp al, critFail
  1719 00003ECA 748E                <1>     je .failExit
  1720 00003ECC 3C01                <1>     cmp al, critRetry
  1721 00003ECE 74CA                <1>     je .asciiReadChar
  1722                              <1>     ;Ignore here, pretend NULL CHAR was read
  1723 00003ED0 30C0                <1>     xor al, al
  1724 00003ED2 EB15                <1>     jmp short .asciiIgnoreEP
  1725                              <1> .asciiNoError:
  1726                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1727                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1728                              <1> ;Preserve RBX, RSI
  1729                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1730 00003ED4 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1731 00003ED7 813D(CBC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1731 00003EDF 0000                <1>
  1732 00003EE1 0F856F010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1733 00003EE7 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1734                              <1> .asciiIgnoreEP:
  1735 00003EE9 48FF05(C3C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1736 00003EF0 48FFC7              <1>     inc rdi ;Also advance register pointer
  1737 00003EF3 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1738 00003EF5 0F845B010000        <1>     je readExitOk
  1739 00003EFB 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1740 00003EFD E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1741                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1742 00003EFF FEC0                <1>     inc al  ;make ZF=NZ
  1743 00003F01 E950010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1744                              <1> 
  1745                              <1> readDiskFile:
  1746                              <1> ;rdi = Current SFT
  1747                              <1> ;rbp = WorkingDPB
  1748                              <1> ;ecx = Bytes to transfer
  1749 00003F06 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1750 00003F0D C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1751                              <1>     ;We have the following vars setup:
  1752                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1753                              <1>     ;currClustF
  1754                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1755                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1756 00003F14 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1757 00003F17 85D2                <1>     test edx, edx
  1758 00003F19 0F8437010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1759 00003F1F 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1760 00003F25 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1761 00003F28 8905(44C70300)      <1>     mov dword [currClustD], eax
  1762 00003F2E 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1763 00003F30 0F8420010000        <1>     jz readExitOk
  1764 00003F36 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1765 00003F3B 0F8415010000        <1>     jz readExitOk   
  1766 00003F41 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1767                              <1>     ;Check if we have opened a volume label (should never happen)
  1768 00003F47 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1769 00003F4D 7407                <1>     jz .shareCheck
  1770 00003F4F B805000000          <1>     mov eax, errAccDen
  1771 00003F54 F9                  <1>     stc
  1772                              <1>     return
    18                              <2> %%_ret:
    19 00003F55 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1773                              <1> .shareCheck:
  1774                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1775 00003F56 E8D8300000          <1>     call retryShareIODelay
  1776 00003F5B 7308                <1>     jnc .shareOk
  1777 00003F5D E8D2310000          <1>     call shareCheckReadLockViolation
  1778 00003F62 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1779                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    18                              <2> %%_ret:
    19 00003F64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1780                              <1> .shareOk:
  1781 00003F65 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1782 00003F67 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1783 00003F69 7426                <1>     jz .skipWalk
  1784                              <1> .goToCurrentCluster:
  1785 00003F6B E8B9CAFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1786 00003F70 0F82D1000000        <1>     jc .badExit   ;This can only return Fail
  1787 00003F76 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1788 00003F7B 0F84D5000000        <1>     je readExitOk ;Exit with no bytes transferred
  1789 00003F81 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1790 00003F87 FFCA                <1>     dec edx ;Decrement counter
  1791 00003F89 75E0                <1>     jnz .goToCurrentCluster
  1792                              <1> ;Now we fall out with ebx = Current cluster
  1793 00003F8B 8B05(44C70300)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1794                              <1>     ;mov eax, ebx
  1795                              <1> .skipWalk:
  1796 00003F91 E891C8FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1797                              <1>     ;Now we add the offset to this
  1798 00003F96 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1799 00003F9D 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1800 00003FA0 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1801                              <1> ;Main
  1802                              <1> .mainRead:
  1803 00003FA7 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1804 00003FAE 7407                <1>     jz .mainReadNoBreak
  1805 00003FB0 50                  <1>     push rax
  1806 00003FB1 E8C6E2FFFF          <1>     call checkBreak
  1807 00003FB6 58                  <1>     pop rax
  1808                              <1> .mainReadNoBreak:
  1809 00003FB7 E885C7FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1810 00003FBC 0F8285000000        <1>     jc .badExit
  1811 00003FC2 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1812 00003FC6 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1813 00003FCD 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1814                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1815                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1816 00003FD0 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1817 00003FD3 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1818 00003FD6 8B1D(6CC70300)      <1>     mov ebx, dword [tfrCntr]
  1819 00003FDC 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1820 00003FDE 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1821 00003FE1 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1822 00003FE5 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1823 00003FE7 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1824 00003FEA 57                  <1>     push rdi
  1825 00003FEB 488B3D(0CC40300)    <1>     mov rdi, qword [currentDTA]
  1826 00003FF2 51                  <1>     push rcx
  1827 00003FF3 F3A4                <1>     rep movsb
  1828 00003FF5 59                  <1>     pop rcx
  1829 00003FF6 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1830 00003FFC 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1831 00004002 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1832 00004009 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1833 0000400F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1834 00004013 31D2                <1>     xor edx, edx    ;Zero rdx
  1835 00004015 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1836 00004017 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1837 0000401E 5F                  <1>     pop rdi
  1838 0000401F 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1839 00004025 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1840 00004027 742D                <1>     jz readExitOk ;Exit if so!
  1841 00004029 E85CC9FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1842 0000402E 7217                <1>     jc .badExit
  1843                              <1>     ;If ZF=ZE then currClustF has last cluster
  1844 00004030 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1845                              <1>     ;Else repeat
  1846                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1847 00004032 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1847 0000403A 00                  <1>
  1848 0000403B 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1849 00004042 E960FFFFFF          <1>     jmp .mainRead
  1850                              <1> .badExit:
  1851                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1852                              <1>     ; we need to update the SFT before returning
  1853 00004047 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1854 0000404D 30C0                <1>     xor al, al  ;Set ZF flag
  1855 0000404F E802000000          <1>     call readExitOk   ;We call this
  1856 00004054 F9                  <1>     stc ;All calls which end up here return Fail!
  1857 00004055 C3                  <1>     ret
  1858                              <1> 
  1859                              <1> readExitOk:
  1860                              <1> ;Input: ecx = Number of bytes left to transfer!
  1861                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1862 00004056 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1863                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  1864                              <1>     ;jnz .skipbitClear
  1865                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  1866                              <1>     ;The disk transfer must've flushed by now. 
  1867                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  1868                              <1> .skipbitClear:  ;Or skip that entirely
  1869 0000405C E807040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1870                              <1>     return 
    18                              <2> %%_ret:
    19 00004061 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1871                              <1> 
  1872                              <1> writeBytes:
  1873                              <1> ;Writes the bytes from the user buffer
  1874                              <1> ;Input: ecx = Bytes to xfr
  1875                              <1> ;Returns number of bytes written in ecx
  1876 00004062 E8F9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1877 00004067 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1878 0000406B 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1879 0000406D 3C00                <1>     cmp al, ReadAccess
  1880 0000406F 7509                <1>     jne .writeable
  1881                              <1> .noWrite:
  1882 00004071 B805000000          <1>     mov eax, errAccDen
  1883 00004076 31C9                <1>     xor ecx, ecx
  1884 00004078 F9                  <1>     stc
  1885 00004079 C3                  <1>     ret
  1886                              <1> .writeable:
  1887 0000407A 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1888 00004080 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1889 00004082 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1890 00004086 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1891                              <1> .skipAttribCheck:
  1892 00004088 E815040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1893 0000408D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1894 00004093 7408                <1>     jz .notRedir
  1895 00004095 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1896 0000409A CD4F                <1>     int 4Fh
  1897                              <1>     return
    18                              <2> %%_ret:
    19 0000409C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1898                              <1> .notRedir:
  1899 0000409D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1900 000040A3 7510                <1>     jnz writeCharDev
  1901 000040A5 E88A280000          <1>     call dosCrit1Enter
  1902 000040AA E84C010000          <1>     call writeDiskFile
  1903 000040AF E88A280000          <1>     call dosCrit1Exit
  1904                              <1>     return
    18                              <2> %%_ret:
    19 000040B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1905                              <1> writeCharDev:
  1906 000040B5 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
  1907                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1908 000040BC 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1909 000040C2 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1910                              <1>     ;If ecx = 0, we exit
  1911 000040C6 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1912 000040C8 85C9                <1>     test ecx, ecx
  1913 000040CA 0F8478030000        <1>     jz writeExitChar
  1914 000040D0 488B1D(0CC40300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1915 000040D7 4889DF              <1>     mov rdi, rbx
  1916 000040DA 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1917 000040DC A820                <1>     test al, charDevBinary
  1918 000040DE 744A                <1>     jz .asciiDev
  1919                              <1> ;Write binary transfer here
  1920                              <1> .binaryLp:
  1921 000040E0 31C0                <1>     xor eax, eax
  1922 000040E2 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1923 000040E5 E88D220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1924 000040EA 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1925 000040F1 E8D11F0000          <1>     call goDriverChar
  1926 000040F6 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1927 000040F9 B487                <1>     mov ah, critCharDev | critData | critWrite
  1928 000040FB 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1929 00004102 F7C700800000        <1>     test edi, drvErrStatus
  1930 00004108 7415                <1>     jz .binXfrOk
  1931 0000410A E8C01A0000          <1>     call charDevErr ;Invoke Int 44h
  1932 0000410F 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1933 00004112 3C00                <1>     cmp al, critIgnore
  1934 00004114 7409                <1>     je .binXfrOk
  1935 00004116 3C01                <1>     cmp al, critRetry
  1936 00004118 74C6                <1>     je .binaryLp
  1937 0000411A E9D5000000          <1>     jmp .exitFail
  1938                              <1> .binXfrOk:
  1939 0000411F 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1940 00004125 E91E030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  1941                              <1> .asciiDev:
  1942 0000412A A802                <1>     test al, charDevConOut
  1943 0000412C 0F859E000000        <1>     jnz .conDev
  1944 00004132 A804                <1>     test al, charDevNulDev
  1945 00004134 0F858F000000        <1>     jnz .nulDev
  1946                              <1>     ;Here we transfer for a generic character device in ascii mode
  1947 0000413A 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1948 0000413C 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1949 0000413F 0F8403030000        <1>     je writeExitChar
  1950 00004145 51                  <1>     push rcx
  1951 00004146 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1952 0000414B 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1953 0000414E E824220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1954 00004153 59                  <1>     pop rcx
  1955 00004154 488B35(22C70300)    <1>     mov rsi, qword [currentSFT]
  1956 0000415B 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1957                              <1> .asciiLp:
  1958 0000415F E818E1FFFF          <1>     call checkBreak
  1959 00004164 E8621F0000          <1>     call goDriver
  1960 00004169 57                  <1>     push rdi
  1961 0000416A B487                <1>     mov ah, critCharDev | critData | critWrite
  1962 0000416C 0FB73D(B8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1963 00004173 F7C700800000        <1>     test edi, drvErrStatus
  1964 00004179 741D                <1>     jz .asciiNoError
  1965 0000417B E84F1A0000          <1>     call charDevErr ;Invoke Int 44h
  1966 00004180 5F                  <1>     pop rdi
  1967 00004181 C705(CBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1967 00004189 0000                <1>
  1968 0000418B 3C01                <1>     cmp al, critRetry
  1969 0000418D 74D0                <1>     je .asciiLp
  1970 0000418F 3C00                <1>     cmp al, critIgnore
  1971 00004191 7412                <1>     je .ignoreEp
  1972 00004193 E95C000000          <1>     jmp .exitFail
  1973                              <1> .asciiNoError:
  1974 00004198 5F                  <1>     pop rdi
  1975 00004199 813D(CBC40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1975 000041A1 0000                <1>
  1976 000041A3 741D                <1>     je .bytesXfrdOk
  1977                              <1> .ignoreEp:
  1978 000041A5 FFC2                <1>     inc edx ;One more char has been xfrd
  1979 000041A7 FF05(C3C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1980 000041AD 48FFC7              <1>     inc rdi ;And our copy... 
  1981 000041B0 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1982 000041B3 740D                <1>     je .bytesXfrdOk
  1983 000041B5 66C705(B8C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1983 000041BD 00                  <1>
  1984 000041BE FFC9                <1>     dec ecx
  1985 000041C0 759D                <1>     jnz .asciiLp
  1986                              <1> .bytesXfrdOk:
  1987 000041C2 89D0                <1>     mov eax, edx
  1988 000041C4 E97F020000          <1>     jmp writeExitChar
  1989                              <1> .nulDev:
  1990 000041C9 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1991 000041CB E978020000          <1>     jmp writeExitChar
  1992                              <1> .conDev:
  1993 000041D0 E823E1FFFF          <1>     call vConSwapDriver
  1994 000041D5 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1995 000041D8 51                  <1>     push rcx
  1996                              <1> .conDevLp:
  1997 000041D9 AC                  <1>     lodsb
  1998 000041DA 3C1A                <1>     cmp al, EOF
  1999 000041DC 7409                <1>     je .conDevExit
  2000 000041DE E8B0DCFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2001 000041E3 FFC9                <1>     dec ecx
  2002 000041E5 75F2                <1>     jnz .conDevLp
  2003                              <1> .conDevExit:
  2004 000041E7 58                  <1>     pop rax ;Get initial ecx back into eax
  2005 000041E8 29C8                <1>     sub eax, ecx
  2006 000041EA E821E1FFFF          <1>     call vConRetDriver
  2007 000041EF E954020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2008                              <1> .exitFail:
  2009 000041F4 B805000000          <1>     mov eax, errAccDen
  2010 000041F9 F9                  <1>     stc
  2011                              <1>     return
    18                              <2> %%_ret:
    19 000041FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2012                              <1> writeDiskFile:
  2013                              <1>     ;rdi has SFT ptr
  2014 000041FB 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2015 00004201 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  2016 00004208 C605(F0C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2017 0000420F 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2018 00004215 0F85E4010000        <1>     jnz .badExit
  2019 0000421B 85C9                <1>     test ecx, ecx
  2020 0000421D 7505                <1>     jnz .nonZeroWrite
  2021 0000421F B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2022                              <1> .nonZeroWrite:
  2023                              <1>     ;Now do share check here
  2024 00004224 E80A2E0000          <1>     call retryShareIODelay
  2025 00004229 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2026 0000422B E8FB2E0000          <1>     call shareCheckWriteLockViolation
  2027 00004230 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2028                              <1>     return  ;Else return with CF=CY
    18                              <2> %%_ret:
    19 00004232 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2029                              <1> .proceedWithWrite:
  2030 00004233 31DB                <1>     xor ebx, ebx
  2031 00004235 891D(64C70300)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2032 0000423B 881D(63C70300)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2033 00004241 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2034                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2035 00004244 85C0                <1>     test eax, eax
  2036 00004246 7520                <1>     jnz .notStart
  2037 00004248 E854C6FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2038 0000424D 0F8293010000        <1>     jc .exitPrepHardErr
  2039 00004253 3DFFFFFFFF          <1>     cmp eax, -1
  2040 00004258 0F84B3010000        <1>     je writeExit
  2041                              <1>     ;Now eax has the first cluster of chain
  2042 0000425E 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2043 00004261 C605(63C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2044                              <1> .notStart:
  2045                              <1> ;eax has the start cluster of the file
  2046                              <1> ;Now we go to CurntOff
  2047 00004268 8905(44C70300)      <1>     mov dword [currClustD], eax ;Store in var
  2048 0000426E 31DB                <1>     xor ebx, ebx
  2049 00004270 8B15(40C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2050 00004276 85D2                <1>     test edx, edx
  2051 00004278 7458                <1>     jz .skipWalk
  2052                              <1> .goToCurrentCluster:
  2053 0000427A E8AAC7FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2054 0000427F 0F8261010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2055 00004285 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2056 0000428A 7536                <1>     jne .stillInFile
  2057                              <1> .addCluster:
  2058                              <1>     ;Here we extend by one cluster
  2059 0000428C 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2060 00004292 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2061 00004294 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2062 00004299 E829C6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2063 0000429E 0F8242010000        <1>     jc .exitPrepHardErr
  2064 000042A4 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2065 000042A6 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2066 000042AA 010D(64C70300)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2067 000042B0 C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2068 000042B7 E86DC7FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2069 000042BC 0F8224010000        <1>     jc .exitPrepHardErr
  2070                              <1> .stillInFile:
  2071 000042C2 8905(44C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2072 000042C8 FFCA                <1>     dec edx ;Decrement counter
  2073 000042CA 75AE                <1>     jnz .goToCurrentCluster
  2074                              <1> ;Now we fall out
  2075 000042CC 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2076                              <1> .skipWalk:
  2077 000042D2 E850C5FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2078                              <1>     ;Now we add the offset to this
  2079 000042D7 0FB61D(4CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2080 000042DE 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2081 000042E1 488905(4DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2082 000042E8 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2083 000042EE 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2084 000042F0 751F                <1>     jnz .mainWrite  
  2085                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2086 000042F2 F605(63C70300)FF    <1>     test byte [fileGrowing], -1
  2087 000042F9 750B                <1>     jnz .extend
  2088                              <1> ;Here we truncate where needed
  2089 000042FB 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2090 00004301 E8F4C6FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2091                              <1> .extend:
  2092 00004306 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2093 00004309 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2094 0000430C E9F5000000          <1>     jmp .noByteExit ;Exit ok!
  2095                              <1> .mainWrite:
  2096 00004311 F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2097 00004318 7407                <1>     jz .mainWriteNoBreak
  2098 0000431A 50                  <1>     push rax
  2099 0000431B E85CDFFFFF          <1>     call checkBreak
  2100 00004320 58                  <1>     pop rax
  2101                              <1> .mainWriteNoBreak:
  2102 00004321 E81BC4FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  2103 00004326 0F82D3000000        <1>     jc .badExit
  2104 0000432C 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2105 00004330 0FB71D(55C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2106 00004337 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2107                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2108                              <1>     ; 1) Sector size, 2) Bytes left to read from Request
  2109 0000433A 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2110 0000433E 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]
  2111 00004344 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2112 00004346 0F47CB              <1>     cmova ecx, ebx
  2113 00004349 56                  <1>     push rsi
  2114 0000434A 488B35(0CC40300)    <1>     mov rsi, qword [currentDTA]
  2115 00004351 51                  <1>     push rcx
  2116 00004352 F3A4                <1>     rep movsb
  2117 00004354 59                  <1>     pop rcx
  2118 00004355 010D(57C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2119 0000435B 290D(6CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2120 00004361 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2121 00004368 5E                  <1>     pop rsi
  2122 00004369 E813C2FFFF          <1>     call markBufferDirty
  2123 0000436E E8DCC1FFFF          <1>     call writeThroughBuffers ;Write thru the disk buffers for this sector
  2124 00004373 7271                <1>     jc .exitPrepHardErr
  2125 00004375 8B05(68C70300)      <1>     mov eax, dword [tfrLen] ;Get total length
  2126 0000437B 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2127 00004381 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2128 00004383 0F8488000000        <1>     jz writeExit
  2129 00004389 E8FCC5FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2130 0000438E 7256                <1>     jc .exitPrepHardErr
  2131 00004390 3DFFFFFFFF          <1>     cmp eax, -1
  2132 00004395 753A                <1>     jne .noExtend
  2133                              <1>     ;Here we need to extend by a cluster
  2134 00004397 8B05(44C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2135 0000439D 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2136 0000439F B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2137 000043A4 E81EC5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2138 000043A9 723B                <1>     jc .exitPrepHardErr
  2139 000043AB 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2140 000043AD 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2141 000043B1 011D(64C70300)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2142 000043B7 C605(63C70300)FF    <1>     mov byte [fileGrowing], -1
  2143 000043BE E8C7C5FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2144 000043C3 7221                <1>     jc .exitPrepHardErr
  2145 000043C5 3DFFFFFFFF          <1>     cmp eax, -1
  2146 000043CA B805000000          <1>     mov eax, errAccDen
  2147 000043CF 7415                <1>     je .exitPrepHardErr
  2148                              <1> .noExtend:
  2149 000043D1 66C705(55C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2149 000043D9 00                  <1>
  2150 000043DA 488B05(4DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2151 000043E1 E92BFFFFFF          <1>     jmp .mainWrite
  2152                              <1> .exitPrepHardErr:
  2153 000043E6 50                  <1>     push rax    ;Save error code
  2154 000043E7 E825000000          <1>     call writeExit
  2155 000043EC 58                  <1>     pop rax
  2156                              <1> .badExitHard:    ;AL has error code already
  2157 000043ED E83BC1FFFF          <1>     call cancelWriteThroughBuffers
  2158 000043F2 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2159 000043F7 FF15(24C10300)      <1>     call qword [updateDirShare]
  2160 000043FD F9                  <1>     stc
  2161                              <1>     return
    18                              <2> %%_ret:
    19 000043FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2162                              <1> .badExit:
  2163                              <1> ;Might need to do some weird stuff later. Leave for now
  2164 000043FF B805000000          <1>     mov eax, errAccDen
  2165 00004404 EBE7                <1>     jmp short .badExitHard
  2166                              <1> 
  2167                              <1> .noByteExit:
  2168 00004406 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2169 0000440B FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2170                              <1> writeExit:
  2171                              <1> ;Advances the bytes on the file pointer
  2172                              <1> ;Return: ecx = Number of bytes transferred
  2173 00004411 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2174 00004418 E84B000000          <1>     call updateCurrentSFT
  2175 0000441D 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2176 0000441F 7404                <1>     jz .noFlush
  2177 00004421 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2178                              <1> .noFlush:
  2179 00004425 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2180 0000442B 750E                <1>     jnz .exit
  2181 0000442D 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2182 00004430 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2183 00004433 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2184 00004435 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2185 00004438 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2186                              <1> .exit:
  2187 0000443B B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2188 00004440 FF15(24C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2189 00004446 F8                  <1>     clc
  2190                              <1>     return
    18                              <2> %%_ret:
    19 00004447 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2191                              <1> writeExitChar:
  2192                              <1> ;Input: eax = Number of chars transferred
  2193 00004448 8B0D(68C70300)      <1>     mov ecx, dword [tfrLen]
  2194 0000444E 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2195 00004450 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx
  2196 00004456 EBB9                <1>     jmp short writeExit
  2197                              <1> ;-----------------------------------:
  2198                              <1> ;        File Handle routines       :
  2199                              <1> ;-----------------------------------:
  2200                              <1> 
  2201                              <1> setCurrentSFT:
  2202                              <1> ;Set the pointer in rdi as current SFT 
  2203 00004458 48893D(22C70300)    <1>     mov qword [currentSFT], rdi
  2204                              <1>     return 
    18                              <2> %%_ret:
    19 0000445F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2205                              <1> getCurrentSFT:
  2206                              <1> ;Get the current SFT pointer in rdi
  2207 00004460 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2208                              <1>     return 
    18                              <2> %%_ret:
    19 00004467 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2209                              <1> updateCurrentSFT:
  2210                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2211                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2212 00004468 57                  <1>     push rdi
  2213 00004469 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2214 00004470 E8A8010000          <1>     call getBytesTransferred
  2215 00004475 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2216                              <1>     ;ecx has bytes transferred
  2217 00004478 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2218 0000447E 751F                <1>     jnz .exit
  2219 00004480 50                  <1>     push rax
  2220 00004481 8B05(44C70300)      <1>     mov eax, dword [currClustD]
  2221 00004487 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2222 0000448A 8B05(40C70300)      <1>     mov eax, dword [currClustF]
  2223 00004490 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2224 00004493 58                  <1>     pop rax
  2225 00004494 51                  <1>     push rcx
  2226 00004495 8B0D(57C70300)      <1>     mov ecx, dword [currByteF]
  2227 0000449B 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2228 0000449E 59                  <1>     pop rcx
  2229                              <1> .exit:
  2230 0000449F 5F                  <1>     pop rdi
  2231 000044A0 F8                  <1>     clc
  2232                              <1>     return 
    18                              <2> %%_ret:
    19 000044A1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2233                              <1> 
  2234                              <1> setupVarsForTransfer:
  2235                              <1> ;Computes the actual bytes to be transferred and 
  2236                              <1> ; sets up internal variables for the transfer. 
  2237                              <1> ;Works for both reading and writing
  2238                              <1> ;Input: ecx = User desired Bytes to transfer
  2239                              <1> ;       rdi = SFT pointer for the file
  2240                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2241                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2242                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2243                              <1> ;
  2244                              <1> ;Note: Does not account for a FULL disk. When writing,
  2245                              <1> ; if the disk will get full as a result of the write,
  2246                              <1> ; stop at the last byte before the transfer. If the 
  2247                              <1> ; file pointer is past the last free byte, write 0
  2248 000044A2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2249 000044A6 488935(FAC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2250 000044AD 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2251 000044B0 8905(57C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2252 000044B6 890D(68C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2253 000044BC 890D(6CC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2254 000044C2 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2255 000044C8 7402                <1>     jz setupVarsForDiskTransfer
  2256 000044CA F8                  <1>     clc
  2257                              <1>     return
    18                              <2> %%_ret:
    19 000044CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2258                              <1> setupVarsForDiskTransfer:
  2259                              <1> ;Extension of the above, but for Disk files only
  2260                              <1> ;Input: ecx = User desired Bytes to transfer
  2261                              <1> ;       rdi = SFT pointer for the file
  2262                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2263                              <1> ;        CF=CY: Error exit
  2264 000044CC 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2265 000044CF 8905(57C70300)      <1>     mov dword [currByteF], eax
  2266 000044D5 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2267                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2268 000044D9 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2269 000044E0 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2270 000044E3 881D(F9C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2271 000044E9 8B05(57C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2272 000044EF 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2273 000044F3 31D2                <1>     xor edx, edx    ;Zero rdx
  2274 000044F5 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2275                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2276                              <1>     ;edx has the offset into that sector
  2277 000044F7 8905(48C70300)      <1>     mov dword [currSectF], eax
  2278 000044FD 668915(55C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2279 00004504 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2280 00004506 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2281 00004509 8805(4CC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2282 0000450F 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2283 00004511 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2284 00004514 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2285 00004516 8915(40C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2286 0000451C 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2287                              <1> .exit:
  2288 0000451E F8                  <1>     clc
  2289                              <1>     return 
    18                              <2> %%_ret:
    19 0000451F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2290                              <1> findFreeSFT:
  2291                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2292                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2293                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2294                              <1> ;        CF=CY => eax = errNhl, error exit
  2295 00004520 31DB                <1>     xor ebx, ebx
  2296                              <1> .mainLp:
  2297 00004522 53                  <1>     push rbx    ;Save the sft ndx
  2298 00004523 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2299 00004528 5B                  <1>     pop rbx
  2300 00004529 7307                <1>     jnc .sftExists
  2301 0000452B B804000000          <1>     mov eax, errNhl
  2302 00004530 F9                  <1>     stc
  2303                              <1>     return
    18                              <2> %%_ret:
    19 00004531 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2304                              <1> .sftExists:
  2305 00004532 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2306 00004537 7427                <1>     je .sftFound
  2307 00004539 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2308 0000453E 751C                <1>     jne .gotoNextNdx
  2309                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2310 00004540 53                  <1>     push rbx
  2311 00004541 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2312 00004548 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2313 0000454C 750B                <1>     jne .netGoToNextNdx
  2314 0000454E 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2315 00004555 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2316                              <1> .netGoToNextNdx:
  2317 00004559 5B                  <1>     pop rbx
  2318 0000455A 7404                <1>     je .sftFound
  2319                              <1> .gotoNextNdx:
  2320 0000455C FFC3                <1>     inc ebx
  2321 0000455E EBC2                <1>     jmp short .mainLp
  2322                              <1> .sftFound:
  2323 00004560 53                  <1>     push rbx
  2324 00004561 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2325 00004566 488B1D(30C40300)    <1>     mov rbx, qword [serverPSP]
  2326 0000456D 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2327 00004571 0FB71D(38C40300)    <1>     movzx ebx, word [machineNum]
  2328 00004578 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2329 0000457C 5B                  <1>     pop rbx
  2330 0000457D F8                  <1>     clc
  2331                              <1>     return
    18                              <2> %%_ret:
    19 0000457E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2332                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2333                              <1> ;Return a pointer to the SFT entry in rdi
  2334                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2335                              <1> ;Output: rdi = SFT pointer
  2336 0000457F 488B3D(49C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2337                              <1> .walk:
  2338 00004586 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2339 0000458A 7212                <1>     jb .thisTable
  2340 0000458C 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2341 00004590 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2342 00004593 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2343 0000459A 75EA                <1>     jne .walk
  2344 0000459C F9                  <1>     stc
  2345                              <1>     return
    18                              <2> %%_ret:
    19 0000459D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2346                              <1> .thisTable:
  2347 0000459E 50                  <1>     push rax
  2348 0000459F 52                  <1>     push rdx
  2349 000045A0 B84F000000          <1>     mov eax, sft_size
  2350 000045A5 F7E3                <1>     mul ebx
  2351 000045A7 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2352 000045AA 5A                  <1>     pop rdx
  2353 000045AB 58                  <1>     pop rax
  2354 000045AC 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2355                              <1>     return
    18                              <2> %%_ret:
    19 000045B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2356                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2357                              <1> ;Return a zero extended value in rdi for the SFT entry
  2358                              <1> ;Input: bx = JFT handle (we zero extend)
  2359                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2360                              <1> ;        CF=CY => al = Error code, Fail
  2361 000045B4 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2362 000045B7 663B1D5CBAFFFF      <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2363 000045BE 7204                <1>     jb .ok
  2364 000045C0 B006                <1>     mov al, errBadHdl
  2365 000045C2 F9                  <1>     stc
  2366                              <1>     return
    18                              <2> %%_ret:
    19 000045C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2367                              <1> .ok:
  2368 000045C4 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP]
  2369 000045CB 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2370 000045D0 F8                  <1>     clc
  2371                              <1>     return
    18                              <2> %%_ret:
    19 000045D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2372                              <1> findFreeJFTEntry:
  2373                              <1> ;Finds a free JFT entry in the currentPSP.
  2374                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2375                              <1> ;        CF=CY => al=errNhl
  2376 000045D2 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2377                              <1> .searchLp:
  2378 000045D4 E8DBFFFFFF          <1>     call getJFTPtr
  2379 000045D9 7209                <1>     jc .badExit
  2380 000045DB 803FFF              <1>     cmp byte [rdi], -1
  2381                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000045DE 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2382 000045E0 FFC3                <1>     inc ebx
  2383 000045E2 EBF0                <1>     jmp short .searchLp
  2384                              <1> .badExit:
  2385 000045E4 B004                <1>     mov al, errNhl
  2386 000045E6 F9                  <1>     stc
  2387                              <1>     return
    18                              <2> %%_ret:
    19 000045E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2388                              <1> getSFTPtr:
  2389                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2390                              <1> ;Input: bx = JFT handle
  2391                              <1> ;Output: CF=NC: rdi = SFT pointer
  2392                              <1> ;        CF=CY: Error, ax=Error code
  2393 000045E8 E815000000          <1>     call derefSFTPtr
  2394                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000045ED 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2395 000045EF 50                  <1>     push rax
  2396 000045F0 0FB705(38C40300)    <1>     movzx eax, word [machineNum]
  2397 000045F7 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2398 000045FB 58                  <1>     pop rax
  2399                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000045FC 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2400 000045FE B006                <1>     mov al, errBadHdl   ;Error code
  2401 00004600 F9                  <1>     stc         ;Reset CF
  2402                              <1>     return
    18                              <2> %%_ret:
    19 00004601 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2403                              <1> 
  2404                              <1> derefSFTPtr:
  2405                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2406                              <1> ;Input: bx = File handle (gets zero extended)
  2407                              <1> ;Output: CF=NC: rdi = SFT pointer
  2408                              <1> ;        CF=CY: Error, ax=Error code
  2409 00004602 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2410 00004607 7205                <1>     jb .fail
  2411 00004609 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2412 0000460C 7504                <1>     jne .ok
  2413                              <1> .fail:
  2414 0000460E B006                <1>     mov al, errBadHdl
  2415 00004610 F9                  <1>     stc
  2416                              <1>     return
    18                              <2> %%_ret:
    19 00004611 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2417                              <1> .ok:
  2418 00004612 53                  <1>     push rbx    ;Preserve the JFT handle
  2419 00004613 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2420 00004616 E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2421 0000461B 5B                  <1>     pop rbx 
  2422                              <1>     return
    18                              <2> %%_ret:
    19 0000461C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2423                              <1> 
  2424                              <1> getBytesTransferred:
  2425 0000461D 8B0D(6CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2426 00004623 F7D9                <1>     neg ecx ;Multiply by -1
  2427 00004625 030D(68C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2428                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 0000462B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2429                              <1> 
  2430                              <1> getSFTndxInheritable:
  2431                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2432                              <1> ;Input: ebx = SFTndx (word)
  2433                              <1> ;Output: 
  2434                              <1> ;   ZF=ZE => Inheritable
  2435                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2436 0000462C 57                  <1>     push rdi
  2437 0000462D E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2438 00004632 7208                <1>     jc .badNdx
  2439 00004634 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2440 0000463A 5F                  <1>     pop rdi
  2441                              <1>     return
    18                              <2> %%_ret:
    19 0000463B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2442                              <1> .badNdx:
  2443 0000463C 31FF                <1>     xor edi, edi
  2444 0000463E FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2445 00004640 F8                  <1>     clc
  2446 00004641 5F                  <1>     pop rdi
  2447                              <1>     return
    18                              <2> %%_ret:
    19 00004642 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2448                              <1> 
  2449                              <1> incrementOpenCount:
  2450                              <1> ;Given a SFTndx, this function will increment it's open count
  2451                              <1> ;Output:
  2452                              <1> ;   CF=NC => sftndx ok, count incremented
  2453                              <1> ;   CF=CY => Bad ndx
  2454 00004643 57                  <1>     push rdi
  2455 00004644 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx
  2456 00004649 7203                <1>     jc .exit
  2457 0000464B 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2458                              <1> .exit:
  2459 0000464E 5F                  <1>     pop rdi
  2460                              <1>     return
    18                              <2> %%_ret:
    19 0000464F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2461                              <1> 
  2462                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2463                              <1> ;Input: rdi = SFT pointer
  2464                              <1> ;Output: ax = Original wNumHandles count
  2465 00004650 9C                  <1>     pushfq
  2466 00004651 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2467 00004654 FFC8                <1>     dec eax     ;Decrement count
  2468 00004656 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2469 00004658 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2470                              <1> .exit:
  2471 0000465A 9D                  <1>     popfq
  2472 0000465B 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2473                              <1>     return
    18                              <2> %%_ret:
    19 0000465E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2474                              <1> 
  2475                              <1> ;Buffer Wrappers
  2476                              <1> writeThroughBuffersForHandle:
  2477                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2478 0000465F 57                  <1>     push rdi
  2479 00004660 55                  <1>     push rbp
  2480 00004661 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2481 00004668 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2482 0000466E 751C                <1>     jnz .exit
  2483 00004670 FF35(FAC60300)      <1>     push qword [workingDPB]
  2484 00004676 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2485 0000467A 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2486 00004681 E8C9BEFFFF          <1>     call writeThroughBuffers
  2487 00004686 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2488                              <1> .exit:
  2489 0000468C 5D                  <1>     pop rbp
  2490 0000468D 5F                  <1>     pop rdi
  2491                              <1>     return
    18                              <2> %%_ret:
    19 0000468E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2492                              <1> 
  2493                              <1> cancelWriteThroughBuffersForHandle:
  2494                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2495 0000468F 57                  <1>     push rdi
  2496 00004690 55                  <1>     push rbp
  2497 00004691 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
  2498 00004698 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2499 0000469E 751C                <1>     jnz .exit
  2500 000046A0 FF35(FAC60300)      <1>     push qword [workingDPB]
  2501 000046A6 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2502 000046AA 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
  2503 000046B1 E877BEFFFF          <1>     call cancelWriteThroughBuffers
  2504 000046B6 8F05(FAC60300)      <1>     pop qword [workingDPB]
  2505                              <1> .exit:
  2506 000046BC 5D                  <1>     pop rbp
  2507 000046BD 5F                  <1>     pop rdi
  2508                              <1>     return
    18                              <2> %%_ret:
    19 000046BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    34                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    35                              <1> ioctrl:            ;ah = 44h, handle function
    36                              <1> ;Possible subfunctions
    37                              <1> ;======================================================
    38                              <1> ;Handle Information Functions                         |
    39                              <1> ;al = 00h => Get Handle Information word in dx        x
    40                              <1> ;al = 01h => Set Handle Information word              x
    41                              <1> ;======================================================
    42                              <1> ;IO Control String Functions (optionally implemented) |
    43                              <1> ;al = 02h => Read from Char device                    x
    44                              <1> ;al = 03h => Write to Char device                     x
    45                              <1> ;al = 04h => Read from Block device                   x
    46                              <1> ;al = 05h => Write to Block device                    x
    47                              <1> ;======================================================
    48                              <1> ;IO Status Functions (optionally implemented)         |
    49                              <1> ;al = 06h => Get input status                         x
    50                              <1> ;al = 07h => Get output status                        x
    51                              <1> ;======================================================
    52                              <1> ;Device information (optionally implemented)          |  
    53                              <1> ;al = 08h => Is a block device removable?       
    54                              <1> ;al = 09h => Is a logical device local or remote?   
    55                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    56                              <1> ;======================================================
    57                              <1> ;SHARE.EXE control                                    |
    58                              <1> ;al = 0Bh => Change sharing retry count               x  
    59                              <1> ;======================================================
    60                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    61                              <1> ;======================================================
    62                              <1> ;Generic IOCTL string (optionally implemented)
    63                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    64                              <1> ;======================================================
    65                              <1> ;Disk Drive change drive (optionally implemented)
    66                              <1> ;al = 0Eh => Get logical device                 
    67                              <1> ;al = 0Fh => Set logical device  
    68                              <1> ;======================================================
    69 000046BF 3C0F                <1>     cmp al, 15
    70 000046C1 7747                <1>     ja .invalidFunction
    71 000046C3 84C0                <1>     test al, al
    72 000046C5 745B                <1>     jz .getDevWord
    73 000046C7 3C01                <1>     cmp al, 1
    74 000046C9 746E                <1>     je .setDevWord
    75 000046CB 2C02                <1>     sub al, 2
    76 000046CD 3C03                <1>     cmp al, 3
    77 000046CF 7673                <1>     jbe .ioctlStringFunctions
    78 000046D1 2C04                <1>     sub al, 4
    79 000046D3 3C01                <1>     cmp al, 1
    80 000046D5 0F8681010000        <1>     jbe .ioStatusFunctions
    81 000046DB 2C02                <1>     sub al, 2
    82 000046DD 3C02                <1>     cmp al, 2
    83 000046DF 0F8644020000        <1>     jbe .devControl
    84 000046E5 2C03                <1>     sub al, 3
    85 000046E7 0F840F030000        <1>     jz .setSharingCount
    86 000046ED FEC8                <1>     dec al
    87 000046EF 0F8425030000        <1>     jz .genericCharDevIOCTL
    88 000046F5 FEC8                <1>     dec al
    89 000046F7 0F844B030000        <1>     jz .genericBlokDevIOCTL
    90 000046FD FEC8                <1>     dec al
    91 000046FF 0F840A040000        <1>     jz .getDrvLogicalDevice
    92 00004705 E981040000          <1>     jmp .setDrvLogicalDevice
    93                              <1> .invalidFunction:
    94 0000470A B801000000          <1>     mov eax, errInvFnc
    95                              <1> .ifExit:
    96 0000470F E96B220000          <1>     jmp extErrExit
    97                              <1> .accessDeniedError:
    98 00004714 B805000000          <1>     mov eax, errAccDen
    99 00004719 EBF4                <1>     jmp short .ifExit
   100                              <1> .badHandle:
   101 0000471B B806000000          <1>     mov eax, errBadHdl
   102 00004720 EBED                <1>     jmp short .ifExit
   103                              <1> 
   104                              <1> ;...Functions...
   105                              <1> .getDevWord:
   106                              <1> ;Input: bx = File Handle
   107 00004722 E8DBFEFFFF          <1>     call derefSFTPtr
   108 00004727 72F2                <1>     jc .badHandle
   109 00004729 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
   110 0000472D 30C0                <1>     xor al, al
   111 0000472F E8A51D0000          <1>     call getUserRegs
   112 00004734 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   113                              <1>     return
    18                              <2> %%_ret:
    19 00004738 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> .setDevWord:
   115                              <1> ;Input: bx = File Handle
   116                              <1> ;       dl = Low byte of Device information word
   117 00004739 E8C4FEFFFF          <1>     call derefSFTPtr
   118 0000473E 72DB                <1>     jc .badHandle 
   119 00004740 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
   120                              <1>     return
    18                              <2> %%_ret:
    19 00004743 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   121                              <1> .ioctlStringFunctions:
   122                              <1> ;al = 0 -> ReadCharDev
   123                              <1> ;al = 1 -> WriteCharDev
   124                              <1> ;al = 2 -> ReadDiskDev
   125                              <1> ;al = 3 -> WriteDiskDev
   126                              <1> ;Input: bx = File handle/drive number
   127                              <1> ;       ecx = Bytes to transfer
   128                              <1> ;       rdx = Ptr to string to transfer
   129 00004744 0FB6F3              <1>     movzx esi, bl
   130 00004747 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   131 0000474E C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   132 00004755 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   133                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   134                              <1> ;Setup the common ioReqPkt fields and the read/write 
   135 0000475C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   136 0000475F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   137 00004762 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   138 00004766 51                  <1>     push rcx
   139 00004767 52                  <1>     push rdx
   140 00004768 B903000000          <1>     mov ecx, drvIOCTLREAD
   141 0000476D BA0C000000          <1>     mov edx, drvIOCTLWRITE
   142 00004772 A801                <1>     test al, 1  ;If set, this is a write operation
   143 00004774 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   144 00004777 7507                <1>     jnz .notWrite
   145 00004779 800D(5CC40300)01    <1>     or byte [Int44bitfld], critWrite
   146                              <1> .notWrite:
   147 00004780 5A                  <1>     pop rdx
   148 00004781 59                  <1>     pop rcx
   149 00004782 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   150 00004785 3C01                <1>     cmp al, 1
   151 00004787 772F                <1>     ja .ioctlStringBlockDevice
   152                              <1>     ;Here we are for char devices only
   153 00004789 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   154 0000478C E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   155 00004791 7288                <1>     jc .badHandle 
   156 00004793 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   157 0000479A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   158 000047A0 0F8464FFFFFF        <1>     jz .invalidFunction
   159                              <1> 
   160 000047A6 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   161 000047AA 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   162 000047B1 4887DE              <1>     xchg rbx, rsi   ;Swap back
   163 000047B4 31C0                <1>     xor eax, eax
   164 000047B6 EB38                <1>     jmp short .ioctlStringCommon
   165                              <1> .ioctlStringBlockDevice:
   166                              <1>     ;Here we are for block devices only
   167                              <1>     ;esi has the drive number
   168 000047B8 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   169 000047BF 89F0                <1>     mov eax, esi
   170 000047C1 53                  <1>     push rbx
   171 000047C2 E89F1D0000          <1>     call getCDS ;Returns in al the unit number of the drive
   172 000047C7 5B                  <1>     pop rbx
   173 000047C8 730A                <1>     jnc .okDrive
   174 000047CA B80F000000          <1>     mov eax, errBadDrv
   175 000047CF E9AB210000          <1>     jmp extErrExit
   176                              <1> .okDrive:
   177 000047D4 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   178 000047DB 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   179 000047DF 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   180 000047E2 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   181 000047E5 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   182 000047E9 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   183 000047EC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   184                              <1> .ioctlStringCommon:
   185                              <1>     ;rsi -> Device Driver header
   186                              <1>     ;rbx -> Request Header
   187                              <1>     ;al = Media descriptor
   188 000047F0 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   189 000047F3 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   190 000047F9 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   191                              <1>     ;Make request now
   192                              <1> .ioctlStringCommonRetry:
   193 000047FF 51                  <1>     push rcx    ;Push xfrctr
   194 00004800 52                  <1>     push rdx    ;Buffer Ptr
   195 00004801 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   196 00004807 E8BF180000          <1>     call goDriver
   197 0000480C 5A                  <1>     pop rdx
   198 0000480D 59                  <1>     pop rcx
   199                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   200 0000480E 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   201 00004814 0F8457210000        <1>     jz extGoodExit
   202 0000481A 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   203 00004821 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   204 00004824 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   205 0000482A 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   206 00004831 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   207 00004836 E8AA130000          <1>     call criticalDOSError
   208 0000483B 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   209 00004842 3C00                <1>     cmp al, critIgnore
   210 00004844 0F8427210000        <1>     je extGoodExit 
   211 0000484A 3C01                <1>     cmp al, critRetry
   212 0000484C 74B1                <1>     je .ioctlStringCommonRetry
   213 0000484E 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   214 00004852 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   215 00004857 E923210000          <1>     jmp extErrExit
   216                              <1> 
   217                              <1> 
   218                              <1> .ioStatusFunctions:
   219                              <1> ;al = 0 -> Get input status 
   220                              <1> ;al = 1 -> Get output status
   221 0000485C E8A1FDFFFF          <1>     call derefSFTPtr
   222 00004861 0F82B4FEFFFF        <1>     jc .badHandle 
   223 00004867 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   224 0000486E C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   225 00004871 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   226 00004878 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   227 0000487E 0F8586FEFFFF        <1>     jnz .invalidFunction
   228 00004884 C605(5CC40300)00    <1>     mov byte [Int44bitfld], 0
   229 0000488B B906000000          <1>     mov ecx, drvINSTATUS
   230 00004890 BA0A000000          <1>     mov edx, drvOUTSTATUS
   231 00004895 84C0                <1>     test al, al
   232 00004897 0F45CA              <1>     cmovnz ecx, edx
   233 0000489A 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   234 0000489D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   235 000048A3 7416                <1>     jz .ioStatDisk
   236 000048A5 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   237 000048AC 800D(5CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   238 000048B3 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   239 000048B7 30C0                <1>     xor al, al
   240 000048B9 EB15                <1>     jmp short .ioStatCommon
   241                              <1> .ioStatDisk:
   242 000048BB C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   243 000048C2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   244 000048C6 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   245 000048C9 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   246 000048CC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   247                              <1> .ioStatCommon:
   248 000048D0 E8F6170000          <1>     call goDriver
   249 000048D5 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   250 000048DB 743E                <1>     jz .ioStatOk
   251                              <1>     ;Error handling here
   252                              <1> 
   253 000048DD 800D(5CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   254 000048E4 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   255 000048E7 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]
   256 000048ED 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi
   257 000048F4 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   258 000048F9 E8E7120000          <1>     call criticalDOSError
   259 000048FE 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   260 00004905 3C00                <1>     cmp al, critIgnore
   261 00004907 7412                <1>     je .ioStatOk 
   262 00004909 3C01                <1>     cmp al, critRetry
   263 0000490B 74C3                <1>     je .ioStatCommon
   264 0000490D 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   265 00004911 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   266 00004916 E964200000          <1>     jmp extErrExit
   267                              <1> 
   268                              <1> .ioStatOk:
   269 0000491B 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   270 00004921 7403                <1>     jz .notBusyExit
   271 00004923 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   272                              <1>     return 
    18                              <2> %%_ret:
    19 00004925 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   273                              <1> .notBusyExit:
   274                              <1> ;Device ready/NotEOF
   275 00004926 31C0                <1>     xor eax, eax
   276                              <1>     return
    18                              <2> %%_ret:
    19 00004928 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> 
   278                              <1> .devControl:
   279                              <1> ;al = 0 -> Is media removable?
   280                              <1> ;al = 1 -> Is device local or remote?
   281                              <1> ;al = 2 -> Is handle local or remote?
   282 00004929 84C0                <1>     test al, al
   283 0000492B 746D                <1>     jz .remTest
   284 0000492D A801                <1>     test al, 1
   285 0000492F 751B                <1>     jnz .deviceTest
   286                              <1> ;Handle Local or Remote
   287 00004931 E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   288 00004936 0F82DFFDFFFF        <1>     jc .badHandle 
   289 0000493C 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   290                              <1> .devControlExit:
   291 00004940 E8941B0000          <1>     call getUserRegs
   292 00004945 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   293 00004949 31C0                <1>     xor eax, eax
   294                              <1>     return 
    18                              <2> %%_ret:
    19 0000494B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> .deviceTest:
   296                              <1> ;Drive Local or Remote
   297                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   298                              <1> ;Else, just get the CDS word and swap subst and net
   299 0000494C 88D8                <1>     mov al, bl
   300 0000494E E8131C0000          <1>     call getCDS
   301 00004953 730A                <1>     jnc .devTestOkDrive
   302 00004955 B80F000000          <1>     mov eax, errBadDrv
   303 0000495A E920200000          <1>     jmp extErrExit
   304                              <1> .devTestOkDrive:
   305 0000495F 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   306 00004966 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   307 0000496A 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   308 0000496F 7513                <1>     jnz .remoteDrive
   309 00004971 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   310 00004975 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   311 00004979 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   312 0000497D 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   313 00004982 EBBC                <1>     jmp short .devControlExit
   314                              <1> .remoteDrive:
   315 00004984 6689D3              <1>     mov bx, dx
   316 00004987 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   317 0000498C 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   318 00004991 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   319 00004993 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   320 00004998 EBA6                <1>     jmp short .devControlExit   ;Store it
   321                              <1> 
   322                              <1> .remTest:
   323                              <1> ;Drive letter in bl
   324 0000499A 88D8                <1>     mov al, bl
   325 0000499C E8C51B0000          <1>     call getCDS
   326 000049A1 730A                <1>     jnc .remTestOkDrive
   327                              <1> .remTestBadDrv:
   328 000049A3 B80F000000          <1>     mov eax, errBadDrv
   329 000049A8 E9D21F0000          <1>     jmp extErrExit
   330                              <1> .remTestOkDrive:
   331 000049AD 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   332 000049B4 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   333 000049BA 75E7                <1>     jnz .remTestBadDrv
   334 000049BC 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   335 000049C3 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   336 000049C7 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   337 000049CA 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   338 000049CE 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   339 000049D4 0F8430FDFFFF        <1>     jz .invalidFunction
   340 000049DA C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   341 000049DD C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   342 000049E1 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   343 000049E7 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   344 000049EA E8DC160000          <1>     call goDriver
   345 000049EF 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   346 000049F3 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   347 000049F8 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   348                              <1>     return
    18                              <2> %%_ret:
    19 000049FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> .setSharingCount:
   351                              <1> ;Input: cx = Share Count
   352                              <1> ;       dx = Share Retry
   353 000049FC 66890D(25C00300)    <1>     mov word [shareCount], cx
   354 00004A03 6685D2              <1>     test dx, dx
   355 00004A06 0F84FEFCFFFF        <1>     jz .invalidFunction
   356 00004A0C 668915(27C00300)    <1>     mov word [shareDelay], dx
   357 00004A13 31C0                <1>     xor eax, eax
   358 00004A15 E9571F0000          <1>     jmp extGoodExit
   359                              <1> 
   360                              <1> .genericCharDevIOCTL:
   361 00004A1A E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   362 00004A1F 7311                <1>     jnc .okHandle
   363                              <1> .ioctrlBadHandle:
   364 00004A21 C605(FFC30300)04    <1>     mov byte [errorLocus], eLocChr
   365 00004A28 B806000000          <1>     mov eax, errBadHdl
   366 00004A2D E94D1F0000          <1>     jmp extErrExit
   367                              <1> .okHandle:
   368 00004A32 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   369 00004A38 75E7                <1>     jnz .ioctrlBadHandle
   370 00004A3A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   371 00004A40 74DF                <1>     jz .ioctrlBadHandle
   372 00004A42 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   373 00004A46 EB49                <1>     jmp short .ioctlReqMake
   374                              <1> .genericBlokDevIOCTL:
   375 00004A48 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   376 00004A4A 51                  <1>     push rcx
   377 00004A4B 52                  <1>     push rdx
   378 00004A4C E8151B0000          <1>     call getCDS ;Sets the current CDS
   379 00004A51 5A                  <1>     pop rdx
   380 00004A52 59                  <1>     pop rcx
   381 00004A53 7217                <1>     jc .badDrv
   382                              <1>     ;Check the CDS not net, subst or join
   383 00004A55 488B35(02C70300)    <1>     mov rsi, qword [workingCDS]
   384 00004A5C 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   385 00004A60 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   386 00004A64 7406                <1>     jz .badDrv
   387 00004A66 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   388 00004A6A 7411                <1>     jz .goodDrive
   389                              <1> .badDrv:
   390 00004A6C C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   391 00004A73 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   392 00004A78 E9021F0000          <1>     jmp extErrExit
   393                              <1> .goodDrive:
   394                              <1>     ;CDS is good,now get the DPB
   395 00004A7D 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   396 00004A81 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   397 00004A85 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   398 00004A88 8805(B6C40300)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   399 00004A8E 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   400                              <1> .ioctlReqMake:
   401                              <1> ;rsi must point to the driver header here
   402 00004A91 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   403 00004A97 7511                <1>     jnz .supportsIOCTL
   404                              <1> .badFunction:
   405 00004A99 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   406 00004AA0 B801000000          <1>     mov eax, errInvFnc
   407 00004AA5 E9D51E0000          <1>     jmp extErrExit
   408                              <1> .supportsIOCTL:
   409                              <1>     ;Setup the request header
   410 00004AAA 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   411 00004AB1 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   412 00004AB4 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   413 00004AB8 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   414 00004ABE 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   415 00004AC2 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   416 00004AC6 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   417 00004AC9 E80B1A0000          <1>     call getUserRegs
   418 00004ACE 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   419 00004AD2 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   420 00004AD6 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   421 00004ADA 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   422 00004ADE 4889FE              <1>     mov rsi, rdi
   423 00004AE1 E8E5150000          <1>     call goDriver
   424 00004AE6 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   425 00004AEC 0F847F1E0000        <1>     jz extGoodExit
   426 00004AF2 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   427 00004AF6 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   428 00004AFC 89F8                <1>     mov eax, edi
   429 00004AFE E856100000          <1>     call xlatHardError
   430 00004B03 0FB705(00C40300)    <1>     movzx eax, word [errorExCde] 
   431 00004B0A E9701E0000          <1>     jmp extErrExit
   432                              <1> 
   433                              <1> .getDrvLogicalDevice:
   434 00004B0F 88D8                <1>     mov al, bl
   435 00004B11 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   436 00004B18 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   437 00004B1C C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   438 00004B1F 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   439 00004B25 53                  <1>     push rbx
   440 00004B26 E83B1A0000          <1>     call getCDS
   441 00004B2B 8805(F9C60300)      <1>     mov byte [workingDrv], al
   442 00004B31 5B                  <1>     pop rbx
   443 00004B32 0F826BFEFFFF        <1>     jc .remTestBadDrv
   444 00004B38 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   445 00004B3F 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004B43 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004B47 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004B4A 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   449                              <1> 
   450 00004B4D 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   451 00004B53 0F84B1FBFFFF        <1>     jz .invalidFunction
   452 00004B59 E86D150000          <1>     call goDriver
   453 00004B5E 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454 00004B64 7421                <1>     jz .getDrvOk
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004B66 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   457 00004B6D 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004B70 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004B74 E86C100000          <1>     call criticalDOSError
   460 00004B79 3C00                <1>     cmp al, critIgnore
   461 00004B7B 740A                <1>     je .getDrvOk
   462 00004B7D B801000000          <1>     mov eax, errInvFnc
   463 00004B82 E9F81D0000          <1>     jmp extErrExit
   464                              <1> .getDrvOk:
   465 00004B87 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   466                              <1>     return
    18                              <2> %%_ret:
    19 00004B8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .setDrvLogicalDevice:
   468 00004B8B 88D8                <1>     mov al, bl
   469 00004B8D 488D1D(B5C40300)    <1>     lea rbx, primReqHdr
   470 00004B94 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   471 00004B98 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   472 00004B9B 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   473 00004BA1 53                  <1>     push rbx
   474 00004BA2 E8BF190000          <1>     call getCDS
   475 00004BA7 8805(F9C60300)      <1>     mov byte [workingDrv], al
   476 00004BAD 5B                  <1>     pop rbx
   477 00004BAE 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   478 00004BB4 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
   479 00004BBB 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   480 00004BBF 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   481 00004BC3 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   482 00004BC6 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   483 00004BC9 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   484 00004BCF 0F8435FBFFFF        <1>     jz .invalidFunction
   485 00004BD5 E8F1140000          <1>     call goDriver
   486 00004BDA 30C0                <1>     xor al, al
   487 00004BDC 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   488                              <1>     retz    ;Return if OK
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004BE2 74A6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   489                              <1>     ;Can only Fail, Ignore and Abort.
   490 00004BE4 0FB605(F9C60300)    <1>     movzx eax, byte [workingDrv]  
   491 00004BEB 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   492 00004BEE 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   493 00004BF2 E8EE0F0000          <1>     call criticalDOSError
   494 00004BF7 3C00                <1>     cmp al, critIgnore
   495                              <1>     rete    ;Return if Ignore
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004BF9 748F                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   496 00004BFB B801000000          <1>     mov eax, errInvFnc
   497 00004C00 E97A1D0000          <1>     jmp extErrExit
   498                              <1> 
    35                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    36                              <1> ;Memory related functions
    37                              <1> 
    38                              <1> ;-----------------------------------:
    39                              <1> ;  Memory related Kernel routines   :
    40                              <1> ;-----------------------------------:
    41                              <1> allocateMemory:    ;ah = 48h
    42                              <1> ;Input: ebx = Number of paragraphs requested
    43                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    44                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    45 00004C05 E82A1D0000          <1>     call dosCrit1Enter
    46 00004C0A 31D2                <1>     xor edx, edx
    47                              <1>     ;Clear the pointers
    48 00004C0C 488915(3AC40300)    <1>     mov qword [firstMCB], rdx
    49 00004C13 488915(42C40300)    <1>     mov qword [bestMCB], rdx
    50 00004C1A 488915(4AC40300)    <1>     mov qword [lastMCB], rdx
    51 00004C21 31ED                <1>     xor ebp, ebp    
    52 00004C23 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    53 00004C25 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    54                              <1> .walk:
    55 00004C2C 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    56 00004C2F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    57 00004C32 7409                <1>     je .walk1
    58 00004C34 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    59 00004C37 0F850B050000        <1>     jne badMCBChain
    60                              <1> .walk1:
    61                              <1>     ;Here if valid but not the last block
    62 00004C3D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    63 00004C45 0F8582000000        <1>     jne .walk2
    64                              <1>     ;Here we consolidate adjacent free blocks if there are any
    65                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    66                              <1>     ;End consolidation at first non free block or at last block in chain
    67 00004C4B 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    68 00004C4E 744A                <1>     je .det0    ;Determine if this block is useful
    69 00004C50 31C9                <1>     xor ecx, ecx
    70 00004C52 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    71 00004C55 4881C610000000      <1>     add rsi, mcb.program
    72                              <1> .cons0:
    73 00004C5C 48C1E104            <1>     shl rcx, 4
    74 00004C60 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    75 00004C63 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    76 00004C66 7409                <1>     je .cons1
    77 00004C68 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    78 00004C6B 0F85D7040000        <1>     jne badMCBChain 
    79                              <1> .cons1:
    80 00004C71 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    81 00004C79 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    82                              <1>     ;Here rsi, points to a free block, add it to rdi
    83 00004C7B 31C9                <1>     xor ecx, ecx
    84 00004C7D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    85 00004C80 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    86 00004C86 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    87 00004C89 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    88 00004C8B 31D2                <1>     xor edx, edx
    89 00004C8D 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    90 00004C90 48895608            <1>     mov qword [rsi + 8], rdx
    91 00004C94 3C5A                <1>     cmp al, mcbMarkEnd
    92 00004C96 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    93                              <1>     ;Here we deal with if the block was the last one 
    94 00004C98 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    95                              <1> .det0:  ;Now determine if pointer in rdi is useful
    96 00004C9A 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    97                              <1> ;ebx must be less than the arena size for the arena to be useful!
    98 00004C9D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    99 00004CA0 39D9                <1>     cmp ecx, ebx
   100 00004CA2 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
   101 00004CA4 488935(4AC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
   102 00004CAB 488B05(3AC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   103 00004CB2 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   104 00004CB5 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   105 00004CB7 488935(3AC40300)    <1>     mov qword [firstMCB], rsi
   106                              <1> .det1:
   107                              <1>     ;Now test for best fit.
   108 00004CBE 29D9                <1>     sub ecx, ebx    ;Block - ebx
   109 00004CC0 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   110 00004CC2 7209                <1>     jb .walk2
   111 00004CC4 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   112 00004CC6 488935(42C40300)    <1>     mov qword [bestMCB], rsi
   113                              <1> .walk2:
   114 00004CCD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   115 00004CD0 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   116 00004CD2 31C9                <1>     xor ecx, ecx
   117 00004CD4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   118 00004CD7 48C1E104            <1>     shl rcx, 4
   119 00004CDB 4881C610000000      <1>     add rsi, mcb.program
   120 00004CE2 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   121 00004CE5 E942FFFFFF          <1>     jmp .walk
   122                              <1> .allocate:
   123                              <1>     ;Allocation fails IF the pointer is the null pointer
   124 00004CEA 803D(C8C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   125 00004CF1 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   126                              <1>     ;Fall thru if last fit
   127 00004CF3 488B35(4AC40300)    <1>     mov rsi, qword [lastMCB]
   128 00004CFA 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   129 00004CFD 0F84D8000000        <1>     jz .allocFail
   130 00004D03 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   131 00004D05 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   132 00004D08 31C9                <1>     xor ecx, ecx
   133 00004D0A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   134 00004D0D 29D9                <1>     sub ecx, ebx
   135 00004D0F 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   136 00004D15 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   137 00004D18 48C1E104            <1>     shl rcx, 4
   138 00004D1C 4881C610000000      <1>     add rsi, mcb.program
   139 00004D23 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   140 00004D26 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   141 00004D28 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   142 00004D2B 488B15(14C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   143 00004D32 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   144 00004D36 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   145 00004D3D 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   146 00004D44 4889F0              <1>     mov rax, rsi
   147 00004D47 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   148 00004D4A 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   149 00004D4E E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   150 00004D53 E8E61B0000          <1>     call dosCrit1Exit
   151                              <1>     return
    18                              <2> %%_ret:
    19 00004D58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .bfCommon:
   153 00004D59 488B35(3AC40300)    <1>     mov rsi, qword [firstMCB]
   154 00004D60 803D(C8C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   155 00004D67 480F4435(42C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   156 00004D6F 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   157 00004D72 7467                <1>     jz .allocFail
   158 00004D74 8A06                <1>     mov al, byte [rsi + mcb.marker]
   159 00004D76 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   160 00004D79 31C9                <1>     xor ecx, ecx
   161 00004D7B 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   162 00004D7E 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   163 00004D80 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   164 00004D86 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   165 00004D89 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   166 00004D90 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   167 00004D94 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   168 00004D97 4881C610000000      <1>     add rsi, mcb.program
   169 00004D9E 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   170 00004DA4 48C1E304            <1>     shl rbx, 4
   171 00004DA8 4801DE              <1>     add rsi, rbx
   172 00004DAB 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   173 00004DAD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   174 00004DB5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   175 00004DB8 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   176 00004DBF 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   177 00004DC6 4889F8              <1>     mov rax, rdi
   178 00004DC9 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   179 00004DCC 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   180 00004DD0 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   181 00004DD5 E8641B0000          <1>     call dosCrit1Exit
   182                              <1>     return
    18                              <2> %%_ret:
    19 00004DDA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .allocFail:
   184                              <1>     ;Walk the MCB chain to determine the biggest block size
   185 00004DDB 488B35(39C00300)    <1>     mov rsi, [mcbChainPtr]
   186 00004DE2 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   187                              <1> .af0:
   188 00004DE4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   189 00004DE7 7409                <1>     je .af1
   190 00004DE9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   191 00004DEC 0F8556030000        <1>     jne badMCBChain
   192                              <1> .af1:
   193 00004DF2 31C9                <1>     xor ecx, ecx
   194 00004DF4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   195 00004DF7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   196 00004DFF 7505                <1>     jne .af2
   197 00004E01 39D9                <1>     cmp ecx, ebx
   198 00004E03 0F47D9              <1>     cmova ebx, ecx
   199                              <1> .af2:
   200 00004E06 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   201 00004E09 7410                <1>     je .afExit
   202 00004E0B 48C1E104            <1>     shl rcx, 4
   203 00004E0F 4881C610000000      <1>     add rsi, mcb.program
   204 00004E16 4801CE              <1>     add rsi, rcx
   205 00004E19 EBD7                <1>     jmp short .af1
   206                              <1> .afExit:
   207 00004E1B B808000000          <1>     mov eax, errNoMem
   208 00004E20 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   209 00004E27 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   210 00004E2A E91B030000          <1>     jmp mcbErrHdlr
   211                              <1> freeMemory:        ;ah = 49h
   212                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   213                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   214                              <1> ;Always skip the first block as this is the anchor for DOS
   215 00004E2F E8001B0000          <1>     call dosCrit1Enter
   216 00004E34 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   217 00004E3B 31C9                <1>     xor ecx, ecx
   218 00004E3D 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   219 00004E44 4889F7              <1>     mov rdi, rsi
   220 00004E47 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   221 00004E4A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   222 00004E4E 4881C610000000      <1>     add rsi, mcb.program
   223 00004E55 4801CE              <1>     add rsi, rcx    ;Go to next block
   224                              <1> .mainLoop:
   225 00004E58 31C9                <1>     xor ecx, ecx
   226 00004E5A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   227 00004E5D 7409                <1>     je .valid
   228 00004E5F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   229 00004E62 0F85E0020000        <1>     jne badMCBChain
   230                              <1> .valid:
   231 00004E68 4939F0              <1>     cmp r8, rsi
   232 00004E6B 741C                <1>     je .blockFound
   233                              <1>     ;Not valid, check if last block in chain
   234 00004E6D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   235 00004E70 0F84A5000000        <1>     je .blockError
   236 00004E76 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   237 00004E79 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   238 00004E7D 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   239 00004E84 4801CE              <1>     add rsi, rcx    ;Go to next block
   240 00004E87 EBCF                <1>     jmp short .mainLoop
   241                              <1> .blockFound:
   242                              <1>     ;If hole, error.
   243                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   244 00004E89 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   245 00004E91 0F8484000000        <1>     je .blockError
   246 00004E97 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   247 00004E9F 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   248 00004EA7 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   249                              <1>     ;It is, let it absorb this space
   250 00004EA9 31C9                <1>     xor ecx, ecx
   251 00004EAB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   252 00004EAE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   253 00004EB4 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   254                              <1>     ;Replace block marker
   255 00004EB7 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   256 00004EB9 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   257 00004EBB 31C9                <1>     xor ecx, ecx
   258 00004EBD 48890E              <1>     mov qword [rsi], rcx
   259 00004EC0 48894E08            <1>     mov qword [rsi + 8], rcx
   260 00004EC4 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   261                              <1> .blockFoundCheckFollowing:
   262                              <1>     ;First check if we are the last block in chain
   263 00004EC7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   264 00004ECA 7439                <1>     je .blockFoundExit  ;If yes, exit!
   265 00004ECC 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   266 00004ECF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   267 00004ED2 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   268 00004ED6 4881C110000000      <1>     add rcx, mcb.program
   269 00004EDD 4801CE              <1>     add rsi, rcx    ;Go to next block
   270 00004EE0 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   271 00004EE8 751B                <1>     jne .blockFoundExit ;If not free, exit
   272                              <1>     ;If free, absorb into block pointed to by rdi
   273 00004EEA 31C9                <1>     xor ecx, ecx
   274 00004EEC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   275 00004EEF 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   276 00004EF5 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   277                              <1>     ;Replace block marker
   278 00004EF8 8A06                <1>     mov al, byte [rsi + mcb.marker]
   279 00004EFA 8807                <1>     mov byte [rdi + mcb.marker], al
   280 00004EFC 31C9                <1>     xor ecx, ecx
   281 00004EFE 48890E              <1>     mov qword [rsi], rcx
   282 00004F01 48894E08            <1>     mov qword [rsi + 8], rcx
   283                              <1> .blockFoundExit:
   284 00004F05 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   285 00004F0A E82F1A0000          <1>     call dosCrit1Exit
   286 00004F0F 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   287 00004F16 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   288                              <1>     return
    18                              <2> %%_ret:
    19 00004F1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   289                              <1> .blockError:
   290 00004F1B C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   291 00004F22 B809000000          <1>     mov eax, errMemAddr
   292 00004F27 E8531A0000          <1>     call extErrExit ;Error thru the unified error handler
   293 00004F2C E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   294 00004F31 E8081A0000          <1>     call dosCrit1Exit
   295                              <1>     return
    18                              <2> %%_ret:
    19 00004F36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   296                              <1> reallocMemory:     ;ah = 4Ah
   297                              <1> ;Input: r8 = address of the block to be realloc'ed
   298                              <1> ;       ebx = How many paras this block should contain after realloc. 
   299                              <1> ;               If ebx = 0, jump to free memory
   300 00004F37 E8F8190000          <1>     call dosCrit1Enter
   301 00004F3C 85DB                <1>     test ebx, ebx
   302 00004F3E 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   303 00004F44 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   304 00004F4B 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   305 00004F4E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   306 00004F51 7409                <1>     je .ctn
   307 00004F53 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   308 00004F56 0F856F010000        <1>     jne .badAddrGiven
   309                              <1> .ctn:
   310                              <1>     ;Provided block is valid and not a hole
   311                              <1>     ;Check if Growth or Shrink
   312 00004F5C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   313 00004F64 74B5                <1>     je freeMemory.blockError
   314 00004F66 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   315 00004F69 31C9                <1>     xor ecx, ecx
   316 00004F6B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   317 00004F6E 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   318 00004F70 0F8791000000        <1>     ja .growth
   319 00004F76 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   320                              <1> ;We can always shrink
   321 00004F7C 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   322 00004F7E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   323 00004F84 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   324 00004F87 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   325 00004F8D 48C1E304            <1>     shl rbx, 4
   326 00004F91 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   327 00004F98 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   328 00004F9B 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   329 00004F9D C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   330 00004FA0 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   331 00004FA2 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   332 00004FAA 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   333 00004FAD 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   334 00004FAF 0F84E6000000        <1>     je .exit
   335                              <1> ;Else, now see if the block following is also free and absorb it
   336 00004FB5 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   337 00004FB8 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   338 00004FBC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   339 00004FC3 4801CE              <1>     add rsi, rcx    ;Goto next arena
   340 00004FC6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   341 00004FC9 7409                <1>     je .shrinkAbsorb
   342 00004FCB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   343 00004FCE 0F8574010000        <1>     jne badMCBChain
   344                              <1> .shrinkAbsorb:
   345 00004FD4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   346 00004FDC 0F85B9000000        <1>     jne .exit
   347                              <1>     ;It is free, absorb it
   348 00004FE2 8A06                <1>     mov al, byte [rsi + mcb.marker]
   349 00004FE4 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   350 00004FE6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   351 00004FE9 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   352 00004FEC 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   353 00004FEF 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   354 00004FF2 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   355 00004FF6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   356 00004FF9 31C9                <1>     xor ecx, ecx
   357                              <1>     ;Clear absorbed MCB
   358 00004FFB 48890E              <1>     mov qword [rsi], rcx
   359 00004FFE 48894E08            <1>     mov qword [rsi + 8], rcx
   360 00005002 E994000000          <1>     jmp .exit
   361                              <1> .growth:
   362                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   363 00005007 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   364 0000500A 0F84A5000000        <1>     je .notEnuffMem
   365                              <1> ;Now check the following space is free. If not, not enuff mem err
   366 00005010 31C9                <1>     xor ecx, ecx
   367 00005012 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   368 00005015 48C1E104            <1>     shl rcx, 4
   369 00005019 4889F7              <1>     mov rdi, rsi    
   370 0000501C 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   371 00005023 4801CE              <1>     add rsi, rcx
   372 00005026 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   373 00005029 7409                <1>     je .growthOK
   374 0000502B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   375 0000502E 0F8514010000        <1>     jne badMCBChain
   376                              <1> .growthOK:
   377                              <1>     ;rdi points to block we are growing
   378 00005034 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   379 0000503C 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   380                              <1>     ;rsi must own all memory up to the next owned arena
   381 0000503E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   382 00005040 31C9                <1>     xor ecx, ecx
   383 00005042 31D2                <1>     xor edx, edx
   384 00005044 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   385 00005047 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   386 0000504D 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   387 00005050 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   388 00005052 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   389 00005054 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   390 00005057 775E                <1>     ja .notEnuffMem1
   391 00005059 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   392 0000505B 81FA01000000        <1>     cmp edx, 1
   393 00005061 744E                <1>     je .notEnuffMem2
   394 00005063 31C9                <1>     xor ecx, ecx
   395 00005065 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   396 00005068 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   397 0000506C 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   398 0000506F 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   399 00005072 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   400 00005079 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   401 0000507D 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   402 00005080 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   403 00005084 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   404                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   405                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   406 00005086 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   407 00005088 7411                <1>     jz .exit
   408 0000508A 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   409 00005090 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   410 00005093 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   411                              <1> .exit:
   412 0000509B E87B000000          <1>     call verifyIntegrityOfMCBChain
   413 000050A0 E899180000          <1>     call dosCrit1Exit
   414 000050A5 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   415 000050AC 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   416                              <1>     return
    18                              <2> %%_ret:
    19 000050B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   417                              <1> .notEnuffMem2:
   418 000050B1 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   419 000050B3 EB02                <1>     jmp short .notEnuffMem1
   420                              <1> .notEnuffMem:
   421 000050B5 31DB                <1>     xor ebx, ebx    ;No space to grow
   422                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   423 000050B7 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   424 000050BC 488B15(6FC40300)    <1>     mov rdx, qword [oldRSP]
   425 000050C3 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   426 000050C6 E97F000000          <1>     jmp mcbErrHdlr
   427                              <1> .badAddrGiven:
   428 000050CB B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   429 000050D0 E975000000          <1>     jmp mcbErrHdlr
   430                              <1> getsetMallocStrat: ;ah = 58h
   431 000050D5 84C0                <1>     test al, al
   432 000050D7 741F                <1>     jz .get
   433 000050D9 3C02                <1>     cmp al, 2
   434 000050DB 7337                <1>     jae .bad
   435                              <1> ;Set here
   436 000050DD 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   437 000050E4 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   438 000050E8 8805(C8C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   439 000050EE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 000050F2 E824000000          <1>     call verifyIntegrityOfMCBChain
   441                              <1>     return
    18                              <2> %%_ret:
    19 000050F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   442                              <1> .get:
   443 000050F8 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   444 000050FF 31C0                <1>     xor eax, eax
   445 00005101 8A05(C8C30300)      <1>     mov al, byte [allocStrat]
   446 00005107 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   447 0000510A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   448 0000510E E808000000          <1>     call verifyIntegrityOfMCBChain
   449                              <1>     return
    18                              <2> %%_ret:
    19 00005113 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> .bad:
   451 00005114 B801000000          <1>     mov eax, errInvFnc
   452 00005119 EB2F                <1>     jmp short mcbErrHdlr
   453                              <1> ;-----------------------------------:
   454                              <1> ;      Memory related routines      :
   455                              <1> ;-----------------------------------:
   456                              <1> verifyIntegrityOfMCBChain:
   457 0000511B 50                  <1>     push rax
   458 0000511C 53                  <1>     push rbx
   459 0000511D 488B1D(39C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   460                              <1> .ok:
   461 00005124 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   462 00005127 7408                <1>     je .ok1
   463 00005129 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   464 0000512C 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   465                              <1> .exit:
   466 0000512E 5B                  <1>     pop rbx
   467 0000512F 58                  <1>     pop rax
   468                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00005130 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   469                              <1> .ok1:
   470 00005131 31C0                <1>     xor eax, eax
   471 00005133 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   472 00005136 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   473 0000513A 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   474 00005141 4801C3              <1>     add rbx, rax
   475 00005144 EBDE                <1>     jmp short .ok
   476                              <1> .bmcbPrep:
   477 00005146 5B                  <1>     pop rbx ;Pop off the stack first!
   478 00005147 58                  <1>     pop rax
   479                              <1> badMCBChain:
   480 00005148 B007                <1>     mov al, errMCBbad   ;Yikes!
   481                              <1> mcbErrHdlr:
   482                              <1>     ;Jumped to with eax = error code
   483 0000514A C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   484 00005151 E829180000          <1>     call extErrExit ;Error thru the unified error handler
   485 00005156 3C07                <1>     cmp al, errMCBbad
   486                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005158 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   487 0000515A EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    36                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    37                              <1> ;EXEC and all default terminates are here
    38                              <1> 
    39                              <1> ;========================
    40                              <1> ;   Interrupt handlers
    41                              <1> ;========================
    42                              <1> terminateProcess:   ;Int 40h
    43 0000515C 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    44 0000515E E94B160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    45                              <1> terminateRes:       ;Int 47h
    46                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    47 00005163 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    48 00005169 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    49 0000516C B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    50 00005171 E938160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    51                              <1> ;========================
    52                              <1> ;    Int 21h functions
    53                              <1> ;========================
    54                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    55                              <1> ;Input:
    56                              <1> ;rdx = Pointer to new PSP in memory.
    57                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    58                              <1> ;   Officially document that this MUST be paragraph aligned.
    59                              <1> ;rsi = alloc size for new psp block
    60 00005176 C605(09C50300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    61 0000517D 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    62 00005184 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    63 00005186 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    64 00005187 EB0C                <1>     jmp short copyPSP.pspCommon
    65                              <1> copyPSP:      ;ah = 26h
    66                              <1> ;Input:
    67                              <1> ;rdx = Pointer to new PSP in memory.
    68                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    69                              <1> ;   Officially document that this MUST be paragraph aligned.
    70 00005189 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]
    71 00005190 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    72 00005194 53                  <1>     push rbx    ;Save this value for PSP allocsize
    73                              <1> .pspCommon:
    74 00005195 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    75 0000519C 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    76 000051A0 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    77                              <1> ;r8 is current PSP, now copy psp to rdx
    78                              <1> ;Preserve rdx and r8 until the end
    79 000051A4 4C89C6              <1>     mov rsi, r8
    80 000051A7 4889D7              <1>     mov rdi, rdx
    81 000051AA B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    82 000051AF F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    83 000051B2 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    84 000051BA F605(09C50300)FF    <1>     test byte [pspCopyFlg], -1
    85 000051C1 7449                <1>     jz .copy
    86                              <1>     ;Now reset the parent psp data
    87 000051C3 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    88 000051CB 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    89                              <1>     ;Now reset the copied jobFileTable
    90 000051CF 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    91 000051D3 0FB70D40AEFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    92 000051DA B0FF                <1>     mov al, -1
    93 000051DC F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    94                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    95 000051DE 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    96 000051E2 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    97 000051E6 0FB70D2DAEFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    98                              <1> .xfrJFT:
    99 000051ED 67E31C              <1>     jecxz .copy
   100 000051F0 FFC9                <1>     dec ecx
   101 000051F2 AC                  <1>     lodsb   ;Get the SFTndx in al
   102 000051F3 0FB6D8              <1>     movzx ebx, al
   103 000051F6 53                  <1>     push rbx
   104 000051F7 E830F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   105 000051FC 58                  <1>     pop rax
   106 000051FD 7508                <1>     jnz .badJFT
   107 000051FF AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   108 00005200 E83EF4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   109 00005205 EBE6                <1>     jmp short .xfrJFT
   110                              <1> .badJFT:
   111 00005207 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   112 0000520A EBE1                <1>     jmp short .xfrJFT 
   113                              <1> .copy:
   114 0000520C C605(09C50300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   115 00005213 58                  <1>     pop rax ;Pop the allocsize back into rax
   116 00005214 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   117                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   118 00005217 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   119 0000521B B042                <1>     mov al, 42h
   120 0000521D E8A9120000          <1>     call muxGetIntVector    ;Get vector in rbx
   121 00005222 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   122 00005225 48AB                <1>     stosq   ;Move rdi to next entry and store
   123 00005227 B043                <1>     mov al, 43h
   124 00005229 E89D120000          <1>     call muxGetIntVector    ;Get vector in rbx
   125 0000522E 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   126 00005231 48AB                <1>     stosq   ;Move rdi to next entry and store
   127 00005233 B044                <1>     mov al, 44h
   128 00005235 E891120000          <1>     call muxGetIntVector    ;Get vector in rbx
   129 0000523A 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   130 0000523D 48AB                <1>     stosq   ;Move rdi to next entry and store
   131                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   132 0000523F 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   133 00005244 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   134 0000524A C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   135                              <1>     return
    18                              <2> %%_ret:
    19 0000524E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> 
   137                              <1> terminateStayRes:  ;ah = 31h
   138                              <1> ;Input: al  = Error code
   139                              <1> ;       edx = Number of paragraphs to keep resident
   140 0000524F C605(F6C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   141                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   142 00005256 81FA06000000        <1>     cmp edx, 6
   143 0000525C 7305                <1>     jae .aboveMinimum
   144 0000525E BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   145                              <1> .aboveMinimum:
   146                              <1> ;Now we setup a call to Realloc 
   147                              <1> ;Setup regs with: 
   148                              <1> ;   r8 = address of the block to be realloc'ed
   149                              <1> ;   ebx = How many paras this block should contain after realloc.
   150 00005263 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   151 0000526A 89D3                <1>     mov ebx, edx
   152 0000526C 50                  <1>     push rax    ;Preserve errorlevel across call
   153 0000526D 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   154 0000526E E8C4FCFFFF          <1>     call reallocMemory
   155 00005273 5B                  <1>     pop rbx
   156 00005274 58                  <1>     pop rax
   157 00005275 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   158 00005277 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   159                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   160 0000527B EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   161                              <1> 
   162                              <1> simpleTerminate:   ;ah = 00h
   163 0000527D 31C0                <1>     xor eax, eax    ;Just fall through as normal
   164                              <1> terminateClean:    ;ah = 4Ch, EXIT
   165                              <1> ;Here we must:
   166                              <1> ;0) Build errorlevel and adjust variables accordingly
   167                              <1> ;1) Call Network Termination hook.
   168                              <1> ;2) Check if the program is it's own parent. If so, return.
   169                              <1> ;3) Swap the console back to the original driver if it is swapped.
   170                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   171                              <1> ;4) Free all file handles associated to the current process.
   172                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   173                              <1> ;5) Free all memory blocks that have the signature of current PSP
   174                              <1> ;6) Set current PSP to parent PSP
   175                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   176                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   177                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   178                              <1> ;10) Exit all critical sections.
   179                              <1> ;
   180                              <1> ; Step 0
   181                              <1> ;For now, just adjust error level in var
   182 0000527F 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   183 00005281 8625(F6C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   184 00005287 F605(80C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   185 0000528E 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   186 00005290 C605(F6C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   187                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   188 00005297 8A25(F6C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   189                              <1> .storeELvl:
   190 0000529D 668905(24C40300)    <1>     mov word [errorLevel], ax   ;Store word
   191                              <1>     
   192                              <1> ; Step 1 Tell network a process is terminating
   193 000052A4 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   194 000052A9 4C8B05(14C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   195 000052B0 CD4F                <1>     int 4Fh
   196                              <1> 
   197                              <1> ; Step 2
   198                              <1> .step1:
   199 000052B2 488B3D(14C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   200 000052B9 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   201 000052BC 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   202 000052C0 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   203                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   204 000052C3 0F84DD000000        <1>     je .exit
   205                              <1> ; Step 3
   206 000052C9 E842D0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   207                              <1> ; Step 3.5
   208 000052CE 803D(F6C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   209 000052D5 0F849D000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   210                              <1> ; Step 4
   211 000052DB 803D(F6C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   212 000052E2 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   213 000052E4 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   214 000052E9 CD4F                <1>     int 4Fh
   215                              <1> .skipAbortNetClose:
   216 000052EB FF15(D4C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   217 000052F1 FF15(ACC00300)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   218 000052F7 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   219 000052FE 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   220 00005301 0FB70D12ADFFFF      <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   221                              <1> .s4lp:
   222 00005308 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   223 00005309 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   224 0000530B 7429                <1>     je .step5
   225 0000530D 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   226                              <1>     ;Replace with a call to close the handle eventually
   227 00005310 57                  <1>     push rdi
   228 00005311 E8ECF2FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   229 00005316 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   230 00005318 FF35(22C70300)      <1>     push qword [currentSFT]
   231 0000531E E835F1FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   232 00005323 E885E9FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   233                              <1>     ;closeMain also flushes all sectors associated to the file
   234                              <1>     ;Ignore errors, simply keep closing files
   235 00005328 8F05(22C70300)      <1>     pop qword [currentSFT]
   236                              <1> .badHdl:
   237 0000532E 5F                  <1>     pop rdi
   238 0000532F B0FF                <1>     mov al, -1
   239 00005331 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   240 00005332 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   241 00005334 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   242                              <1> ;Step 5
   243                              <1> .step5:
   244 00005336 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   245                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   246                              <1>     ; with the currentPSP signature and free them.
   247 0000533D 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   248                              <1> .s5lp:  ;And walk the chain
   249                              <1> ;First verify the address in rsi is a valid mcb
   250 00005344 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   251 00005346 80F94D              <1>     cmp cl, mcbMarkCtn
   252 00005349 7405                <1>     je .checkToFree
   253 0000534B 80F95A              <1>     cmp cl, mcbMarkEnd
   254 0000534E 7528                <1>     jne .step6  ;Something wrong so stop freeing
   255                              <1> .checkToFree:
   256 00005350 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   257 00005354 750F                <1>     jne .noFree
   258 00005356 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   259 0000535A 53                  <1>     push rbx
   260 0000535B 51                  <1>     push rcx
   261 0000535C 56                  <1>     push rsi
   262 0000535D E8CDFAFFFF          <1>     call freeMemory ;Free this memory block
   263 00005362 5E                  <1>     pop rsi
   264 00005363 59                  <1>     pop rcx
   265 00005364 5B                  <1>     pop rbx
   266                              <1>     ;If an error occured, the internal vars will be set.
   267                              <1> .noFree:
   268 00005365 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   269 00005368 740E                <1>     je .step6   ;Skip if we are
   270 0000536A 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   271 0000536D 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   272 00005371 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   273 00005376 EBCC                <1>     jmp short .s5lp
   274                              <1> ;Step 6
   275                              <1> .step6:
   276                              <1> 
   277 00005378 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   278 0000537C 488905(14C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   279                              <1> ;Step 7
   280                              <1>     ;rbx points to current PSP, the old parent task
   281                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   282 00005383 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   283 00005387 B044                <1>     mov al, 44h
   284 00005389 E89E170000          <1>     call setIntVector
   285 0000538E 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   286 00005392 B043                <1>     mov al, 43h
   287 00005394 E893170000          <1>     call setIntVector
   288 00005399 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   289 0000539D B042                <1>     mov al, 42h
   290 0000539F 52                  <1>     push rdx
   291 000053A0 E887170000          <1>     call setIntVector
   292 000053A5 5A                  <1>     pop rdx
   293                              <1> ;Step 8
   294                              <1> .exit:
   295 000053A6 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   296 000053A8 CD4A                <1>     int 4ah
   297                              <1> 
   298 000053AA FA                  <1>     cli
   299 000053AB 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   300 000053B2 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   301                              <1>     ;Make the parent register frame the current one
   302                              <1>     ;Make RSP point to user stack from parent entry to exec
   303 000053B6 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   304                              <1> 
   305 000053BA 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   306 000053BF 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   307                              <1> 
   308 000053C8 C605(8AC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   309 000053CF C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   310 000053D6 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   311 000053DD E824150000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   312 000053E2 48CF                <1>     iretq   ;and return to address that was in rdx
    37                                  %include "./Source/Kernel/MemExec/exec.asm"
    38                              <1> 
    39                              <1> 
    40                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    41                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    42                              <1> ;       rbx = Ptr to the parameter block used for loading
    43                              <1> ;       al = Subfunction:
    44                              <1> ;            00h = Load Program and transfer control to it
    45                              <1> ;            01h = Load Program but do not transfer ctrl to it
    46                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    47                              <1> ;      Reserved for future expansion:
    48                              <1> ;            04h = Load in background execution mode (PE only)
    49                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    50                              <1> ;               function but in 16-bit mode. 
    51                              <1> ;
    52                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    53                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    54                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    55                              <1> 
    56                              <1> ;If AL = 0 :
    57                              <1> ;            Load Child Program and Xfr control to it
    58                              <1> ; rbx ------>   |-------------------------------|
    59                              <1> ;               |   Ptr to Environment Block    |
    60                              <1> ;               |                               |
    61                              <1> ;               | Can be 0 => Get pointer to    |
    62                              <1> ;               | parent Environment Block      |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to Command Line to be   |
    65                              <1> ;               |   placed at PSP + 80h         |
    66                              <1> ;               |-------------------------------|
    67                              <1> ;               |   Ptr to first default FCB    |
    68                              <1> ;               |      to copy to PSP.fcb1      |
    69                              <1> ;               |                               |
    70                              <1> ;               | Should be used to parse the   |
    71                              <1> ;               |  first two command line args  |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;               |   Ptr to second default FCB   |
    74                              <1> ;               |      to copy to PSP.fcb2      |
    75                              <1> ;               |-------------------------------|
    76                              <1> ;
    77                              <1> ;If AL = 1 :
    78                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    79                              <1> ; rbx ------>   |-------------------------------|
    80                              <1> ;               |         AS IN AL=00H          |
    81                              <1> ;               |-------------------------------|
    82                              <1> ;               |     Initial Value of RSP      |
    83                              <1> ;               |       on program launch       |
    84                              <1> ;               |                               |
    85                              <1> ;               |     This is returned to the   |
    86                              <1> ;               |         caller by DOS         |
    87                              <1> ;               |-------------------------------|
    88                              <1> ;               |     Initial Value of RIP      |
    89                              <1> ;               |       on program launch       |
    90                              <1> ;               |                               |
    91                              <1> ;               |     This is returned to the   |
    92                              <1> ;               |         caller by DOS         |
    93                              <1> ;               |-------------------------------|
    94                              <1> ;
    95                              <1> ;                      !!Important Note!!
    96                              <1> ;   The block pointed to by rbx must reserve the space for 
    97                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    98                              <1> ;
    99                              <1> ;If AL = 3 :
   100                              <1> ;                      Load program overlay
   101                              <1> ; rbx ------>   |-------------------------------|
   102                              <1> ;               |  Pointer to the byte in the   |
   103                              <1> ;               |  prog space to start writing  |
   104                              <1> ;               |        the overlay at         |
   105                              <1> ;               |-------------------------------|
   106                              <1> ;               | DWORD offset from the base of |
   107                              <1> ;               |  the program to the location  |
   108                              <1> ;               |  the overlay is being loaded  |
   109                              <1> ;               |              in               |
   110                              <1> ;               |  (Called a Relocation Factor) |
   111                              <1> ;               |     Only FOR EXE Overlays     |
   112                              <1> ;               |        for CODE fixups        |
   113                              <1> ;               |  For COM, Current PSP + 100h  |
   114                              <1> ;               |      assumed to suffice       |
   115                              <1> ;               |-------------------------------|
   116                              <1> ;
   117                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   118                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   119                              <1> ;
   120                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   121 000053E4 55                  <1>     push rbp
   122 000053E5 4889E5              <1>     mov rbp, rsp
   123 000053E8 4881EC78000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   124                              <1>     ;Clear up the pointers on the stack frame
   125 000053EF 31C0                <1>     xor eax, eax
   126 000053F1 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   127 000053F5 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   128 000053F9 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   129 000053FD 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   130 00005401 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   131                              <1> 
   132                              <1> 
   133 00005405 3C03                <1>     cmp al, execOverlay
   134 00005407 7615                <1>     jbe .validSubfunction
   135                              <1> .badSubFunction:
   136 00005409 B801000000          <1>     mov eax, errInvFnc
   137 0000540E C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   138                              <1> .badExit:
   139 00005415 4889EC              <1>     mov rsp, rbp
   140 00005418 5D                  <1>     pop rbp
   141 00005419 E961150000          <1>     jmp extErrExit
   142                              <1> 
   143                              <1> .validSubfunction:
   144 0000541E 3C02                <1>     cmp al, execInvld
   145 00005420 74E7                <1>     je .badSubFunction
   146                              <1>     ;Save registers for each function call
   147 00005422 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   148 00005426 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   149 0000542A 0FB6C0              <1>     movzx eax, al
   150 0000542D 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   151 00005431 4889D7              <1>     mov rdi, rdx
   152 00005434 E8F8110000          <1>     call strlen ;Get string length in cx
   153 00005439 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   154                              <1>     ;Now open the file we wanna yeet to
   155 0000543D 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   156 0000543F 55                  <1>     push rbp    ;Preserve local frame ptr
   157 00005440 E8D4D8FFFF          <1>     call openFileHdl
   158 00005445 5D                  <1>     pop rbp
   159 00005446 72CD                <1>     jc .badExit ;Exit preserving error code in al
   160                              <1>     ;Now ax has the file handle
   161 00005448 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   162 0000544C 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   163 0000544F E8AEF1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   164 00005454 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   165 00005458 F7C280000000        <1>     test edx, devCharDev
   166 0000545E 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   167 00005460 B002                <1>     mov al, errFnf
   168 00005462 E914060000          <1>     jmp .cleanAndFail
   169                              <1> .validDiskFile:
   170 00005467 31C0                <1>     xor eax, eax
   171 00005469 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   172 0000546D 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   173 00005471 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   174 00005475 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   175 0000547B 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   176 0000547F 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   177 00005482 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   178 00005485 7514                <1>     jnz .copyEnvironmentBlock
   179 00005487 488B35(14C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   180 0000548E 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   181 00005492 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   182 00005496 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   183 00005499 746D                <1>     jz .loadProgram
   184                              <1> .copyEnvironmentBlock:
   185 0000549B 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   186                              <1>     ;Get the length of the environment
   187 0000549E B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   188 000054A3 31C0                <1>     xor eax, eax
   189 000054A5 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   190                              <1> .envVerifyLp:
   191 000054A8 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   192 000054AA 7531                <1>     jnz .invalidEnvironmentError
   193 000054AC 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   194 000054AF FFC9                <1>     dec ecx
   195 000054B1 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   196 000054B2 75F4                <1>     jnz .envVerifyLp
   197                              <1> 
   198 000054B4 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   199 000054B7 57                  <1>     push rdi     ;Save the length of the environment block
   200 000054B8 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   201 000054BE 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   202 000054C2 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   203 000054C4 89FB                <1>     mov ebx, edi
   204 000054C6 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   205 000054C9 55                  <1>     push rbp
   206 000054CA E836F7FFFF          <1>     call allocateMemory
   207 000054CF 5D                  <1>     pop rbp
   208 000054D0 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   209 000054D1 7314                <1>     jnc .copyEnvironment
   210                              <1>     ;Fall thru if not enuff memory
   211                              <1> .insufficientMemory:
   212 000054D3 B808000000          <1>     mov eax, errNoMem
   213 000054D8 E99E050000          <1>     jmp .cleanAndFail
   214                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   215 000054DD B80A000000          <1>     mov eax, errBadEnv
   216 000054E2 E994050000          <1>     jmp .cleanAndFail
   217                              <1> 
   218                              <1> .copyEnvironment:
   219                              <1>     ;rax has the ptr to allocated memory block
   220                              <1>     ;rcx has the number of chars to copy from the source env block
   221 000054E7 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   222 000054EA 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   223 000054EE 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   224 000054F2 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   225 000054F5 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   226 000054F7 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   227 000054FC 66AB                <1>     stosw       ;Away you go!
   228 000054FE 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   229 00005502 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   230 00005506 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   231                              <1> ;Done with the environment... more or less
   232                              <1> .loadProgram:
   233 00005508 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   234 0000550D 488D15(DAD90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   235 00005514 E87E050000          <1>     call .readDataFromHdl
   236 00005519 0F8257050000        <1>     jc .badFmtErr
   237 0000551F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   238 00005521 0F844F050000        <1>     jz .badFmtErr
   239 00005527 3D40000000          <1>     cmp eax, imageDosHdr_size
   240 0000552C 0F8294030000        <1>     jb .loadCom
   241                              <1> 
   242 00005532 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   243 00005537 740B                <1>     je .proceedEXE
   244 00005539 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   245 0000553E 0F8582030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   246                              <1> .proceedEXE:
   247                              <1>     ;Now we need to read e_lfanew
   248 00005544 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   249 00005545 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   250 00005548 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   251 0000554B 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   252 0000554D 30C0                <1>     xor al, al  ;Set file pointer from start of file
   253 0000554F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   254 00005553 E8D6D9FFFF          <1>     call lseekHdl   ;Move to that position in the file
   255 00005558 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   256 00005559 B918000000          <1>     mov ecx, imageFileHeader_size
   257 0000555E E834050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   258 00005563 85C0                <1>     test eax, eax   ;Were zero bytes read?
   259 00005565 0F840B050000        <1>     jz .badFmtErr
   260 0000556B 3D18000000          <1>     cmp eax, imageFileHeader_size
   261 00005570 0F8200050000        <1>     jb .badFmtErr
   262                              <1>     ;So now rdx points to the imageFileHeader
   263 00005576 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   264 0000557C 0F85F4040000        <1>     jne .badFmtErr
   265 00005582 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   266 00005588 0F85E8040000        <1>     jne .badFmtErr
   267                              <1>     ;Check the binary is executable
   268 0000558E 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   269 00005592 66A90200            <1>     test ax, imageFileExecutable
   270 00005596 0F84DA040000        <1>     jz .badFmtErr
   271 0000559C 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   272                              <1> 
   273 000055A0 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   274 000055A6 0F82CA040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   275                              <1>     ;Now save the number of sections in the the file
   276 000055AC 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   277 000055B0 85C0                <1>     test eax, eax   ;If this is 0, what?
   278 000055B2 0F84BE040000        <1>     jz .badFmtErr
   279 000055B8 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   280                              <1>     ;Now load Optional header, file ptr points to it so all good!
   281 000055BC B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   282                              <1>     ;rdx points to exeHdrSpace
   283 000055C1 E8D1040000          <1>     call .readDataFromHdl
   284 000055C6 85C0                <1>     test eax, eax   ;Were zero bytes read?
   285 000055C8 0F84A8040000        <1>     jz .badFmtErr
   286 000055CE 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   287 000055D3 0F829D040000        <1>     jb .badFmtErr
   288                              <1>     ;Now File Ptr points to data dirs, not an issue
   289 000055D9 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   290                              <1>     ;We load the program in, one section at a time, reading section headers in
   291                              <1>     ; one at a time to the section header internal buffer.
   292 000055E0 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   293 000055E4 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   294 000055E6 8B1D(12DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   295 000055EC 488B05(22DA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   296 000055F3 4885C0              <1>     test rax, rax
   297 000055F6 750A                <1>     jnz .notDefaultStackAlloc
   298 000055F8 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   298 00005601 00                  <1>
   299                              <1> .notDefaultStackAlloc:
   300 00005602 01C3                <1>     add ebx, eax    ;Add stack allocation
   301 00005604 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   302                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   303                              <1>     ; section aligned and so we will need to align before reading, to 
   304                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   305 0000560A 031D(FAD90300)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   306 00005610 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   307 00005613 81C311000000        <1>     add ebx, 11h
   308 00005619 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   309 0000561C 55                  <1>     push rbp
   310 0000561D E8E3F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   311 00005622 5D                  <1>     pop rbp
   312 00005623 0F82AAFEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   313 00005629 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   314 0000562D 480500010000        <1>     add rax, psp_size
   315 00005633 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   316                              <1>     ;Finally, just check that we have some code to execute. 
   317                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   318 00005637 813D(DED90300)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   318 0000563F 0000                <1>
   319 00005641 0F842F040000        <1>     je .badFmtErr   ;If no bytes, exit error
   320 00005647 EB0F                <1>     jmp short .exeProceed1
   321                              <1> .exeOvlySkipAlloc:
   322 00005649 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   323 0000564D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   324 00005650 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   325 00005654 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax   ;Pretend this is the case
   326                              <1> .exeProceed1:
   327                              <1>     ;Now we align the progBase to full header size aligned to the next page
   328 00005658 8B1D(16DA0300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   329 0000565E 4801D8              <1>     add rax, rbx    ;Add this offset where the header should go in future
   330                              <1>     ;Now we section pad
   331 00005661 50                  <1>     push rax
   332 00005662 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   333 00005668 FFC9                <1>     dec ecx ;Turn into a mask
   334 0000566A 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   335 0000566D FFC1                <1>     inc ecx
   336 0000566F 4829C1              <1>     sub rcx, rax
   337 00005672 5F                  <1>     pop rdi
   338 00005673 31C0                <1>     xor eax, eax
   339 00005675 F3AA                <1>     rep stosb
   340 00005677 48897DB8            <1>     mov qword [rbp - execFrame.pProgBase], rdi
   341                              <1>     ;So now copy one section at a time, read section header in
   342                              <1>     ;File pointer points to the directory table, so skip that
   343 0000567B 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   344                              <1>     ;Load however many directories we have into place
   345                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   346 00005681 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   347 00005684 31C9                <1>     xor ecx, ecx
   348 00005686 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   349 0000568A B001                <1>     mov al, 1   ;Move handle forwards from current position
   350 0000568C E89DD8FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   351                              <1>     ;eax has pointer location after adjustment
   352 00005691 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   353                              <1>     ;File now points to start of Section headers. Read first header in.
   354                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   355 00005694 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   356 00005698 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   357                              <1> .loadLp:
   358 0000569C 51                  <1>     push rcx    ;Save # of segments left on stack
   359 0000569D 57                  <1>     push rdi    ;Save the current buffer ptr here
   360 0000569E B928000000          <1>     mov ecx, imageSectionHdr_size
   361 000056A3 488D15(4ADA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   362 000056AA E8E8030000          <1>     call .readDataFromHdl
   363 000056AF 5F                  <1>     pop rdi
   364 000056B0 59                  <1>     pop rcx
   365 000056B1 85C0                <1>     test eax, eax
   366 000056B3 0F84BD030000        <1>     jz .badFmtErr
   367 000056B9 3D28000000          <1>     cmp eax, imageSectionHdr_size
   368 000056BE 0F85B2030000        <1>     jne .badFmtErr
   369                              <1>     ;File ptr moved forwards to next section header
   370 000056C4 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   371                              <1>     ;Section header read, now we load section into memory
   372                              <1>     ;Move file ptr to data location
   373 000056CB 8B15(5EDA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   374 000056D1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   375 000056D5 31C0                <1>     xor eax, eax    ;Seek from start of file
   376 000056D7 51                  <1>     push rcx
   377 000056D8 57                  <1>     push rdi
   378 000056D9 E850D8FFFF          <1>     call lseekHdl
   379 000056DE 5F                  <1>     pop rdi
   380 000056DF 59                  <1>     pop rcx
   381                              <1> 
   382 000056E0 51                  <1>     push rcx
   383 000056E1 57                  <1>     push rdi    ;Save current buffer offset
   384 000056E2 31FF                <1>     xor edi, edi
   385 000056E4 8B3D(56DA0300)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   386 000056EA 48037DB8            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   387                              <1>     ;If a section has a virtual address outside of the allocation arena
   388                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   389                              <1>     ; next section.
   390 000056EE 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   391 000056F2 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   392 000056F9 31C9                <1>     xor ecx, ecx
   393 000056FB 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   394 000056FE 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   395 00005702 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   396 00005709 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   397 0000570C 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   398 0000570F 7714                <1>     ja .okToLoad
   399                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   400 00005711 F705(6EDA0300)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   400 00005719 0000                <1>
   401 0000571B 0F8555030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   402                              <1>     ;Else, just skip this section, goto next section
   403 00005721 5F                  <1>     pop rdi
   404 00005722 59                  <1>     pop rcx
   405 00005723 EB62                <1>     jmp short .gotoNextSection
   406                              <1> .okToLoad:
   407 00005725 8B0D(5ADA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   408 0000572B 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   409 0000572E E864030000          <1>     call .readDataFromHdl
   410 00005733 5F                  <1>     pop rdi
   411 00005734 59                  <1>     pop rcx
   412 00005735 0F823B030000        <1>     jc .badFmtErr
   413 0000573B 85C0                <1>     test eax, eax
   414 0000573D 0F8433030000        <1>     jz .badFmtErr
   415 00005743 3B05(5ADA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   416 00005749 0F8527030000        <1>     jne .badFmtErr
   417                              <1>     ;Data read ok, now fill in any zeros needed
   418 0000574F 8B05(5ADA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   419 00005755 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   420 00005758 3B05(52DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   421 0000575E 730E                <1>     jae .skipInnerPadding
   422 00005760 51                  <1>     push rcx
   423 00005761 8B0D(52DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   424 00005767 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   425                              <1>     ;rdi points to pad space
   426 00005769 31C0                <1>     xor eax, eax
   427 0000576B F3AA                <1>     rep stosb   ;Pad that many zeros
   428 0000576D 59                  <1>     pop rcx
   429                              <1> .skipInnerPadding:
   430 0000576E 51                  <1>     push rcx
   431                              <1>     ;Here do section padding
   432 0000576F 4889F8              <1>     mov rax, rdi    ;Get the current address
   433 00005772 8B0D(FAD90300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   434 00005778 FFC9                <1>     dec ecx ;Turn into a mask
   435 0000577A 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   436 0000577D FFC1                <1>     inc ecx
   437 0000577F 4829C1              <1>     sub rcx, rax
   438                              <1>     ;mov rcx, rax    ;Thats the number of bytes to pad by
   439 00005782 31C0                <1>     xor eax, eax
   440 00005784 F3AA                <1>     rep stosb
   441 00005786 59                  <1>     pop rcx
   442                              <1> .gotoNextSection:
   443 00005787 FFC9                <1>     dec ecx ;Decrement our section counter
   444 00005789 7419                <1>     jz .doExeFixups
   445                              <1>     ;Read next section header in here
   446 0000578B 51                  <1>     push rcx
   447 0000578C 57                  <1>     push rdi
   448 0000578D 30C0                <1>     xor al, al  ;Move rel start of file
   449 0000578F 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   450 00005792 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   451 00005796 31C9                <1>     xor ecx, ecx
   452 00005798 E891D7FFFF          <1>     call lseekHdl
   453 0000579D 5F                  <1>     pop rdi
   454 0000579E 59                  <1>     pop rcx
   455 0000579F E9F8FEFFFF          <1>     jmp .loadLp
   456                              <1> .doExeFixups:
   457                              <1> ;Here we fixup addresses if needed
   458                              <1> ;If the program is loaded at its desired location never need to relocate.
   459                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   460                              <1> ;   If the program has had it's .reloc section stripped by the linker
   461                              <1> ;       or has no .reloc directory, we fail
   462                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   463                              <1> ;       relocations anyway.
   464                              <1> 
   465                              <1> ;If program base = desired load, skip relocs
   466 000057A4 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   467 000057A8 483B15(F2D90300)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   468 000057AF 0F84B7000000        <1>     je .exeComplete
   469                              <1> ;If program has had relocs stripped, fail
   470 000057B5 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   471 000057B9 66A90100            <1>     test ax, imageFileRelocsStripped
   472 000057BD 0F85B3020000        <1>     jnz .badFmtErr
   473                              <1> ;If program has no .reloc section, fail
   474 000057C3 8B15(46DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   475 000057C9 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   476 000057CF 0F82A1020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   477                              <1> ;Now we get the reloc section
   478 000057D5 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   479 000057D8 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   480                              <1>     ;eax now points to position in file of directory entry for reloc
   481 000057DE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   482 000057E2 31C0                <1>     xor eax, eax
   483 000057E4 E845D7FFFF          <1>     call lseekHdl   ;Move handle there in file
   484 000057E9 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   485 000057EC B908000000          <1>     mov ecx, imageDataDirectory_size
   486                              <1>     ;Read 8 bytes into sectHdr space
   487 000057F1 488D15(4ADA0300)    <1>     lea rdx, sectHdr
   488 000057F8 E89A020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   489 000057FD 85C0                <1>     test eax, eax
   490 000057FF 0F8471020000        <1>     jz .badFmtErr
   491 00005805 39C8                <1>     cmp eax, ecx
   492 00005807 0F8569020000        <1>     jne .badFmtErr
   493                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   494                              <1>     ;cmp byte [rbp - execFrame.bSubFunc], execOverlay    ;If overlay, skip this
   495                              <1>     ;jz .exeComplete
   496 0000580D 8B35(4ADA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   497 00005813 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   498 00005815 7455                <1>     jz .exeComplete   ;... including if overlay
   499 00005817 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   500                              <1>     ;Now rsi points to where in memory the relocation data table is
   501                              <1>     ;Now compute the relocation factor 
   502 0000581B 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   503 0000581F 482B05(F2D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   504                              <1>     ;The value in rax gives how much to subtract by
   505 00005826 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   506 0000582A 7507                <1>     jne .notOverlayReloc
   507 0000582C 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   508 00005830 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   509                              <1> .notOverlayReloc:
   510 00005833 48894588            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   511 00005837 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   512                              <1>     ;rsi points to relocation data table in memory
   513 0000583A 8B0D(4EDA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   514 00005840 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   515 00005842 7428                <1>     jz .exeComplete
   516                              <1>     ;rsi points to the first base relocation block. The relocations begin
   517                              <1>     ; after the first block
   518                              <1>     ;ecx has the number of base relocation blocks to process.
   519                              <1> .nextBlock:
   520 00005844 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   521 00005845 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   522 00005847 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   523 0000584B 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   524 0000584E 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   525 00005851 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   526 00005853 67E311              <1>     jecxz .blockDone
   527                              <1> .blockNotDone:
   528 00005856 66AD                <1>     lodsw   ;Get the next page offset word
   529 00005858 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   530 0000585D 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   531                              <1>     ;rdi points to qword to rebase
   532 00005860 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   533 00005863 FFC9                <1>     dec ecx
   534 00005865 75EF                <1>     jnz .blockNotDone
   535                              <1> .blockDone:
   536 00005867 59                  <1>     pop rcx
   537 00005868 FFC9                <1>     dec ecx
   538 0000586A 75D8                <1>     jnz .nextBlock
   539                              <1> .exeComplete:
   540 0000586C 8B05(EAD90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   541 00005872 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   542 00005876 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   543                              <1>     ;Now we copy the header into the memory space to pspPtr+psp_size
   544 0000587A 31C9                <1>     xor ecx, ecx
   545 0000587C 31D2                <1>     xor edx, edx
   546 0000587E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]    ;Get the handle
   547 00005882 31C0                <1>     xor eax, eax
   548 00005884 E8A5D6FFFF          <1>     call lseekHdl
   549 00005889 8B0D(16DA0300)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   550 0000588F 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase] 
   551 00005893 4881C200010000      <1>     add rdx, psp_size
   552 0000589A E8F8010000          <1>     call .readDataFromHdl
   553 0000589F 0F82D1010000        <1>     jc .badFmtErr
   554 000058A5 85C0                <1>     test eax, eax
   555 000058A7 0F84C9010000        <1>     jz .badFmtErr
   556 000058AD 39C1                <1>     cmp ecx, eax
   557 000058AF 0F85C1010000        <1>     jnz .badFmtErr
   558 000058B5 FF15(A4C00300)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   559 000058BB 0F82B5010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   560 000058C1 E9A1000000          <1>     jmp .buildChildPSP
   561                              <1> .loadCom:
   562                              <1>     ;File is open here, so just read the file into memory. 
   563                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   564                              <1>     ;Allocate 64Kb of memory, or as much as we can
   565 000058C6 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   566 000058CA 7450                <1>     je .comOverlay
   567 000058CC BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   568 000058D1 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   569 000058D4 55                  <1>     push rbp
   570 000058D5 E82BF3FFFF          <1>     call allocateMemory
   571 000058DA 5D                  <1>     pop rbp
   572 000058DB 734C                <1>     jnc .comallocOk
   573 000058DD 3C08                <1>     cmp al, errNoMem
   574 000058DF 0F8596010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   575                              <1>     ;rbx should have the amount available
   576                              <1>     ;We check if this value is psp_size more than filesize
   577 000058E5 53                  <1>     push rbx    ;Save new minimum size
   578 000058E6 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   579 000058EB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   580 000058EF 31D2                <1>     xor edx, edx    ;Go to end of file
   581 000058F1 E838D6FFFF          <1>     call lseekHdl
   582                              <1>     ;eax has file size
   583 000058F6 5B                  <1>     pop rbx ;Get back max alloc size
   584 000058F7 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   585 000058F9 29C2                <1>     sub edx, eax
   586 000058FB 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   587 00005901 0F82CCFBFFFF        <1>     jb .insufficientMemory   ;Fail
   588 00005907 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   589 0000590A 55                  <1>     push rbp
   590 0000590B E8F5F2FFFF          <1>     call allocateMemory
   591 00005910 5D                  <1>     pop rbp
   592 00005911 0F8264010000        <1>     jc .cleanAndFail
   593 00005917 E90D000000          <1>     jmp .comallocOk
   594                              <1> .comOverlay:
   595                              <1>     ;Here we simply read the file into the buffer provided
   596 0000591C 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   597 00005920 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   598 00005923 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   599 00005927 EB0A                <1>     jmp short .comRead
   600                              <1> .comallocOk:
   601                              <1>     ;rax should point to the first byte
   602 00005929 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   603 0000592D 480500010000        <1>     add rax, psp_size
   604                              <1> .comRead:
   605 00005933 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   606                              <1> 
   607 00005937 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   608 0000593C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   609 00005940 31D2                <1>     xor edx, edx    ;Go to end of file
   610 00005942 E8E7D5FFFF          <1>     call lseekHdl
   611                              <1>     ;eax has filesize now
   612 00005947 50                  <1>     push rax    ;Save filesize
   613 00005948 31C0                <1>     xor eax, eax    ;Reposition to start of file
   614 0000594A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   615 0000594E 31D2                <1>     xor edx, edx    ;Go to start of file
   616 00005950 E8D9D5FFFF          <1>     call lseekHdl
   617 00005955 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   618 00005956 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   619 0000595A E838010000          <1>     call .readDataFromHdl   ;Read from the file handle
   620 0000595F 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   621 00005963 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   622                              <1> .buildChildPSP:
   623                              <1>     ;We can close handle now
   624 00005967 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   625 0000596B 55                  <1>     push rbp
   626 0000596C E8D2D4FFFF          <1>     call closeFileHdl   ;Close the file
   627 00005971 5D                  <1>     pop rbp
   628                              <1> 
   629                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   630 00005972 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   631 00005976 0F84D8000000        <1>     je .overlayExit
   632                              <1>     ;Now build the PSP
   633 0000597C 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   634 0000597F 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   635 00005983 52                  <1>     push rdx
   636 00005984 55                  <1>     push rbp
   637 00005985 E8ECF7FFFF          <1>     call createPSP
   638 0000598A 5D                  <1>     pop rbp
   639 0000598B 5A                  <1>     pop rdx
   640                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   641 0000598C 488915(14C40300)    <1>     mov qword [currentPSP], rdx
   642 00005993 E89C0F0000          <1>     call dosCrit1Enter
   643 00005998 E821010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   644                              <1> 
   645 0000599D 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   646 000059A4 48893D(0CC40300)    <1>     mov qword [currentDTA], rdi ;and set it!
   647                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   648                              <1>     ; and set FS to point to the PSP
   649 000059AB 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   650                              <1> 
   651 000059AF 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   652 000059B3 B925000000          <1>     mov ecx, fcb_size
   653 000059B8 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   654 000059BC 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   655 000059BE F3A4                <1>     rep movsb   ;Copy fcb 1 over
   656 000059C0 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   657 000059C4 B925000000          <1>     mov ecx, fcb_size
   658 000059C9 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   659 000059CD 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   660 000059CF F3A4                <1>     rep movsb   ;Copy fcb 2 over
   661 000059D1 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   662 000059D5 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   663 000059DC B980000000          <1>     mov ecx, 80h
   664 000059E1 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   665                              <1> 
   666 000059E3 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   667 000059E5 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   668                              <1> 
   669                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   670 000059E8 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   671 000059ED 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   672 000059EF 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   673 000059F3 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   674                              <1> 
   675 000059F5 E8DF0A0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   676 000059FA 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   677 000059FE 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   678 00005A02 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   679 00005A05 B042                <1>     mov al, 42h
   680 00005A07 E820110000          <1>     call setIntVector   ;bx preserved by this call
   681                              <1> 
   682                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   683 00005A0C 88D8                <1>     mov al, bl
   684 00005A0E 30DB                <1>     xor bl, bl
   685 00005A10 E8E80A0000          <1>     call setDrive
   686 00005A15 7302                <1>     jnc .drive1Ok
   687 00005A17 B3FF                <1>     mov bl, -1
   688                              <1> .drive1Ok:
   689 00005A19 88F8                <1>     mov al, bh
   690 00005A1B 30FF                <1>     xor bh, bh
   691 00005A1D E8DB0A0000          <1>     call setDrive
   692 00005A22 7302                <1>     jnc .drive2Ok
   693 00005A24 B7FF                <1>     mov bh, -1
   694                              <1> .drive2Ok:
   695                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   696                              <1>     ;rdi has pointer to psp
   697 00005A26 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   698                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   699 00005A29 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   700 00005A2E 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   700 00005A37 FF                  <1>
   701 00005A38 4821C6              <1>     and rsi, rax    ;To align downwards
   702 00005A3B 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   703 00005A3F 741C                <1>     je .xfrProgram
   704 00005A41 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   705 00005A45 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   706 00005A49 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   707 00005A4D 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   708 00005A51 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   709                              <1> .overlayExit:
   710 00005A54 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   711 00005A57 5D                  <1>     pop rbp ;Point rsp to the return address
   712 00005A58 E9140F0000          <1>     jmp extGoodExit ;And return!
   713                              <1> .xfrProgram:
   714 00005A5D FA                  <1>     cli
   715 00005A5E 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   716 00005A61 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   717 00005A68 FB                  <1>     sti
   718 00005A69 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   719 00005A6C 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   720 00005A6F 4989F9              <1>     mov r9, rdi
   721 00005A72 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   722                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00005A75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   723                              <1> ;r8 is guaranteed to have a copy of the PSP.
   724                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   725                              <1> ;Everything else is optional and potentially changable at a later stage
   726                              <1> 
   727                              <1> .badFmtErr:
   728 00005A76 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   729                              <1> .cleanAndFail:
   730                              <1> ;Close the open file and any open resources and fail
   731 00005A7B E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   732 00005A80 E8B90E0000          <1>     call dosCrit1Exit
   733 00005A85 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   734 00005A89 50                  <1>     push rax    ;Save error code
   735 00005A8A 55                  <1>     push rbp
   736 00005A8B E8B3D3FFFF          <1>     call closeFileHdl
   737 00005A90 5D                  <1>     pop rbp
   738 00005A91 58                  <1>     pop rax
   739 00005A92 E97EF9FFFF          <1>     jmp .badExit
   740                              <1> 
   741                              <1> .readDataFromHdl:
   742                              <1> ;Input: ecx = Number of bytes to transfer
   743                              <1> ;       rdx = Ptr to the buffer to use
   744 00005A97 52                  <1>     push rdx
   745 00005A98 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   746 00005A9D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   747 00005AA1 55                  <1>     push rbp
   748 00005AA2 E8DBD3FFFF          <1>     call readFileHdl
   749 00005AA7 5D                  <1>     pop rbp
   750 00005AA8 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   751 00005AAD 5A                  <1>     pop rdx
   752                              <1>     return
    18                              <2> %%_ret:
    19 00005AAE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   753                              <1> .clearArenaOwner:
   754 00005AAF 53                  <1>     push rbx
   755 00005AB0 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   756 00005AB2 E87D0E0000          <1>     call dosCrit1Enter
   757 00005AB7 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   758 00005ABC 5B                  <1>     pop rbx
   759                              <1>     return
    18                              <2> %%_ret:
    19 00005ABD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   760                              <1> .setPSPArenaOwner:
   761                              <1> ;Sets the current PSP as the arena owner
   762 00005ABE 53                  <1>     push rbx
   763 00005ABF 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP]
   764 00005AC6 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   765 00005ACB E86E0E0000          <1>     call dosCrit1Exit
   766 00005AD0 5B                  <1>     pop rbx
   767                              <1>     return
    18                              <2> %%_ret:
    19 00005AD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   768                              <1> .setProgOrEnvArenaOwnerToRBX:
   769                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   770 00005AD2 9C                  <1>     pushfq
   771 00005AD3 50                  <1>     push rax
   772                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   773                              <1>     ;This is because they are set up at separate points in the routine!
   774 00005AD4 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   775 00005AD8 E80C000000          <1>     call .writeArenaHeaderOwner
   776 00005ADD 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   777 00005AE1 E803000000          <1>     call .writeArenaHeaderOwner
   778 00005AE6 58                  <1>     pop rax
   779 00005AE7 9D                  <1>     popfq
   780                              <1>     return
    18                              <2> %%_ret:
    19 00005AE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   781                              <1> .writeArenaHeaderOwner:
   782                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   783                              <1> ;       rbx = Owner ID
   784 00005AE9 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   785                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005AEC 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   786 00005AEE 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   787 00005AF4 48895801            <1>     mov qword [rax + 1], rbx
   788                              <1>     return
    18                              <2> %%_ret:
    19 00005AF8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Local/local.asm"
    39                              <1> ;Localisation based functions live here
    40                              <1> 
    41                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    42                              <1> ;al = 0 => Get the switch char
    43                              <1> ;al = 1 => Set the switch char to whats in DL
    44                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    45                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    46                              <1> ;       Always returns -1 => /DEV/ optional
    47                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    48                              <1> ;       Input value is ignored
    49 00005AF9 3C01                <1>     cmp al, 01
    50 00005AFB 740B                <1>     je .setSC
    51 00005AFD 7210                <1>     jb .getSC
    52 00005AFF 3C03                <1>     cmp al, 03
    53 00005B01 7214                <1>     jb .getDev
    54 00005B03 741C                <1>     je .setDev
    55 00005B05 B0FF                <1>     mov al, -1
    56                              <1>     return
    18                              <2> %%_ret:
    19 00005B07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .setSC:
    58 00005B08 8815(C6C30300)      <1>     mov byte [switchChar], dl
    59                              <1>     return
    18                              <2> %%_ret:
    19 00005B0E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> .getSC:
    61 00005B0F 8A15(C6C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    62 00005B15 EB02                <1>     jmp short .getRet
    63                              <1> .getDev:
    64 00005B17 B2FF                <1>     mov dl, -1
    65                              <1> .getRet:
    66 00005B19 E8BB090000          <1>     call getUserRegs
    67 00005B1E 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    68                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    69                              <1>     return
    18                              <2> %%_ret:
    19 00005B21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> 
    72                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    73                              <1> ;Currently only accept subfunction al = 0, current country
    74                              <1> ;AL > 0 => errInvFnc, Subfunction error
    75                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    76 00005B22 84C0                <1>     test al, al
    77 00005B24 740A                <1>     jz .currentCountry
    78                              <1> .invalidFunction:
    79 00005B26 B801000000          <1>     mov eax, errInvFnc
    80 00005B2B E94F0E0000          <1>     jmp extErrExit
    81                              <1> .currentCountry:
    82 00005B30 4881FAFFFFFFFF      <1>     cmp rdx, -1
    83 00005B37 74ED                <1>     je .invalidFunction
    84 00005B39 488D35DCA4FFFF      <1>     lea rsi, ctryTbl
    85 00005B40 4889D7              <1>     mov rdi, rdx
    86 00005B43 B926000000          <1>     mov ecx, countryStruc_size
    87 00005B48 F3A4                <1>     rep movsb
    88 00005B4A 31C0                <1>     xor eax, eax
    89 00005B4C E9200E0000          <1>     jmp extGoodExit
    90                              <1> 
    91                              <1> 
    92                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    93                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    94 00005B51 C3                  <1>     ret
    39                                  %include "./Source/Kernel/ctrlc.asm"
    40                              <1> 
    41                              <1> fullcriticalErrorInvoke:
    42 00005B52 B803000000          <1>     mov eax, 03 ;Always fail for now
    43 00005B57 F9                  <1>     stc
    44                              <1>     return
    18                              <2> %%_ret:
    19 00005B58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> xlatHardError:
    46                              <1> ;Translates a hard error code to a generic DOS error
    47                              <1> ;Input: edi = eax = Hard Error Code
    48 00005B59 50                  <1>     push rax
    49 00005B5A 3D13000000          <1>     cmp eax, drvErrShft
    50 00005B5F 7205                <1>     jb .skipXlat
    51 00005B61 0513000000          <1>     add eax, drvErrShft
    52                              <1> .skipXlat:
    53 00005B66 880565A7FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    54 00005B6C 58                  <1>     pop rax
    55 00005B6D 56                  <1>     push rsi
    56 00005B6E 488D35B8A5FFFF      <1>     lea rsi, extErrTbl
    57 00005B75 E85E0E0000          <1>     call setErrorVars
    58 00005B7A 5E                  <1>     pop rsi
    59                              <1>     return
    18                              <2> %%_ret:
    19 00005B7B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> diskDevErr:
    62                              <1> ;Called, NOT Jumped to. 
    63                              <1> ;Input: rdi = Disk Buffer pointer
    64                              <1> ;       eax = Status word (Zero Extended)
    65                              <1> ;       rbp = Disk DPB pointer
    66                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    67                              <1> ;Output: al = Int 44h response (0-3)
    68                              <1> ; All other registers preserved
    69 00005B7C 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    70 00005B83 89C7                <1>     mov edi, eax    ;Store status word in rdi
    71 00005B85 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    72 00005B88 8A25(5CC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    73 00005B8E 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    74                              <1>     ;Test for correct buffer data type
    75 00005B91 53                  <1>     push rbx    ;Save rbx temporarily
    76 00005B92 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    77 00005B95 F6C301              <1>     test bl, dosBuffer
    78 00005B98 7505                <1>     jnz .df0
    79 00005B9A 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    80 00005B9D EB17                <1>     jmp short .df3
    81                              <1> .df0:
    82 00005B9F F6C302              <1>     test bl, fatBuffer
    83 00005BA2 7505                <1>     jnz .df1
    84 00005BA4 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    85 00005BA7 EB0D                <1>     jmp short .df3
    86                              <1> .df1:
    87 00005BA9 F6C304              <1>     test bl, dirBuffer
    88 00005BAC 7505                <1>     jnz .df2
    89 00005BAE 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    90 00005BB1 EB03                <1>     jmp short .df3
    91                              <1> .df2:
    92 00005BB3 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    93                              <1> .df3:
    94 00005BB6 5B                  <1>     pop rbx
    95 00005BB7 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    96 00005BBB E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    97 00005BC0 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    98 00005BC7 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    99                              <1>     return
    18                              <2> %%_ret:
    19 00005BCE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> charDevErr:
   102                              <1> ;Called with ah with additional bits
   103 00005BCF 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
   104                              <1> criticalErrorSetup:
   105 00005BD2 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
   106 00005BD8 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
   107 00005BDF 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
   108                              <1>     ;For now, fall through, but need much work to change it later! 
   109                              <1> 
   110                              <1> 
   111                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
   112                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
   113                              <1> ; to the critical error handler.
   114                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
   115                              <1> ; and with Int44Bitfield set
   116                              <1> ;               AH = Critical Error Bitfield
   117                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   118                              <1> ;               Bit 6 - Reserved
   119                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   120                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   121                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   122                              <1> ;               Bits [2-1] = Affected Disk Error
   123                              <1> ;                     0 0   DOS area
   124                              <1> ;                     0 1   FAT area
   125                              <1> ;                     1 0   Directory area
   126                              <1> ;                     1 1   Data area
   127                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   128                              <1> ;               AL  = Failing drive number if AH[7] = 0
   129                              <1> ;               DIL = Error code for errorMsg
   130                              <1> ;               RSI = EA of Device Header for which device the error occured
   131                              <1> ;Return:
   132                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   133                              <1> ;                  = 1 - Retry the Operation    (Retry)
   134                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   135                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   136                              <1> ; Return response from int 44h in al
   137                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   138                              <1> ; This function will terminate the program if an abort was requested!
   139                              <1> ; This function also destroys RBP
   140 00005BE5 803D(FCC30300)01    <1>     cmp byte [critErrFlag], 1
   141 00005BEC 7204                <1>     jb .noIntError  ;If not 0, enter
   142 00005BEE B003                <1>     mov al, critFail    ;Else, return Fail always
   143 00005BF0 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   144                              <1> .noIntError:
   145 00005BF2 FA                  <1>     cli ;Disable Interrupts
   146 00005BF3 FE05(FCC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   147 00005BF9 FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   148 00005BFF 488925(54C40300)    <1>     mov qword [xInt44hRSP], rsp
   149 00005C06 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   150 00005C0D 31ED                <1>     xor ebp, ebp    ;Always zeroed
   151 00005C0F CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   152 00005C11 488B25(54C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   153 00005C18 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   154 00005C1F FE05(FDC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   155 00005C25 FB                  <1>     sti ;Reenable Interrupts
   156                              <1>     ;Now we check that the response given was allowed, and translate if needed
   157                              <1> .checkResponse:
   158 00005C26 3C00                <1>     cmp al, critIgnore
   159 00005C28 7421                <1>     je .checkIgnore
   160 00005C2A 3C01                <1>     cmp al, critRetry
   161 00005C2C 7428                <1>     je .checkRetry
   162 00005C2E 3C03                <1>     cmp al, critFail
   163 00005C30 752F                <1>     jne .abort   ;Must be abort
   164                              <1> .setFail:   ;Here is for fail
   165 00005C32 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   166 00005C34 FE05(5EC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   167 00005C3A F605(5CC40300)08    <1>     test byte [Int44bitfld], critFailOK
   168 00005C41 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   169                              <1> .exit:
   170 00005C43 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   171                              <1>     return
    18                              <2> %%_ret:
    19 00005C4A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .checkIgnore:
   173 00005C4B F605(5CC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   174 00005C52 75EF                <1>     jnz .exit
   175 00005C54 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   176                              <1> .checkRetry:
   177 00005C56 F605(5CC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   178 00005C5D 75E4                <1>     jnz .exit   
   179 00005C5F EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   180                              <1> .abort:
   181                              <1> ;Prepare to abort. We abort from within!
   182                              <1> ;If a network request requests abort, translate to fail
   183 00005C61 803D(F2C60300)FF    <1>     cmp byte [dosInvoke], -1
   184 00005C68 7509                <1>     jne .kill   ;If this is zero, local invokation
   185 00005C6A C605(8AC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   186 00005C71 EBD0                <1>     jmp short .exit
   187                              <1> .kill:
   188 00005C73 66893D(00C40300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   189 00005C7A 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   190 00005C7C C605(F6C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   191 00005C83 E90FF6FFFF          <1>     jmp terminateClean.altEP
   192                              <1> 
   193                              <1> ctrlBreakHdlr:
   194 00005C88 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   195 00005C8A E8AFC5FFFF          <1>     call printCaretASCII
   196 00005C8F E8DAC5FFFF          <1>     call printCRLF
   197                              <1>     ;Reset the console back to 0
   198 00005C94 C605(88C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   199                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   200                              <1> .exceptEP:
   201                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   202                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   203                              <1> ;   interrupted DOS call is restarted
   204 00005C9B FA                  <1> 	cli
   205 00005C9C 488B25(6FC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   206 00005CA3 E85E0C0000          <1> 	call dosPopRegs ;Get user state back
   207 00005CA8 C605(FDC30300)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   208 00005CAF C605(FCC30300)00    <1>     mov byte [critErrFlag], 0
   209 00005CB6 488925(1CC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   210 00005CBD F8                  <1>     clc
   211 00005CBE CD43                <1>     int 43h ;Call critical error handler
   212 00005CC0 FA                  <1>     cli ;Clear interrupts again
   213 00005CC1 488905(28C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   214 00005CC8 9C                  <1>     pushfq  ;Get flags in rax
   215 00005CC9 58                  <1>     pop rax 
   216 00005CCA 483B25(1CC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   217 00005CD1 750C                <1>     jne .checkCF
   218                              <1> .returnToDOS:
   219 00005CD3 488B05(28C40300)    <1>     mov rax, qword [oldRAX]
   220 00005CDA E9CF0A0000          <1>     jmp functionDispatch    ;Goto int 41h
   221                              <1> .checkCF:
   222 00005CDF 488B25(1CC40300)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   223 00005CE6 A801                <1>     test al, 1  ;CF set?
   224 00005CE8 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   225 00005CEA B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   226 00005CEF C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   227 00005CF6 E9B30A0000          <1>     jmp functionDispatch
   228                              <1> 
   229                              <1> ;CPU Exception handlers
   230                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   231                              <1> ; CTRL+C exit.
   232                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   233                              <1> ; system.
   234                              <1> ; Also halt if the application is it's own parent.
   235                              <1> ;An application should hook these interupts if they wish to not 
   236                              <1> ; CTRL+C exit, and instead return to DOS.
   237                              <1> i0:
   238 00005CFB 31C0                <1>     xor eax, eax
   239 00005CFD E9AB000000          <1>     jmp cpu_2args
   240                              <1> i1:
   241 00005D02 B801000000          <1>     mov eax, 1
   242 00005D07 E9A1000000          <1>     jmp cpu_2args
   243                              <1> i2:
   244 00005D0C B802000000          <1>     mov eax, 2
   245 00005D11 E997000000          <1>     jmp cpu_2args
   246                              <1> i3:
   247 00005D16 B803000000          <1>     mov eax, 3
   248 00005D1B E98D000000          <1>     jmp cpu_2args
   249                              <1> i4:
   250 00005D20 B804000000          <1>     mov eax, 4
   251 00005D25 E983000000          <1>     jmp cpu_2args
   252                              <1> i5:
   253 00005D2A B805000000          <1>     mov eax, 5
   254 00005D2F EB7C                <1>     jmp short cpu_2args
   255                              <1> i6:
   256 00005D31 B806000000          <1>     mov eax, 6
   257 00005D36 EB75                <1>     jmp short cpu_2args
   258                              <1> i7:
   259 00005D38 B807000000          <1>     mov eax, 7
   260 00005D3D EB6E                <1>     jmp short cpu_2args
   261                              <1> i8:
   262 00005D3F B808000000          <1>     mov eax, 8
   263 00005D44 EB60                <1>     jmp short cpu_3args
   264                              <1> i9:
   265 00005D46 B809000000          <1>     mov eax, 9
   266 00005D4B EB60                <1>     jmp short cpu_2args
   267                              <1> i10:
   268 00005D4D B80A000000          <1>     mov eax, 0Ah
   269 00005D52 EB52                <1>     jmp short cpu_3args
   270                              <1> i11:
   271 00005D54 B80B000000          <1>     mov eax, 0Bh
   272 00005D59 EB4B                <1>     jmp short cpu_3args
   273                              <1> i12:
   274 00005D5B B80C000000          <1>     mov eax, 0Ch
   275 00005D60 EB44                <1>     jmp short cpu_3args
   276                              <1> i13:
   277 00005D62 B80D000000          <1>     mov eax, 0Dh
   278 00005D67 EB3D                <1>     jmp short cpu_3args
   279                              <1> i14:
   280 00005D69 B80E000000          <1>     mov eax, 0Eh
   281 00005D6E EB2F                <1>     jmp short cpu_4args
   282                              <1> i15:
   283 00005D70 B80F000000          <1>     mov eax, 0Fh
   284 00005D75 EB36                <1>     jmp short cpu_2args
   285                              <1> i16:
   286 00005D77 B810000000          <1>     mov eax, 10h
   287 00005D7C EB2F                <1>     jmp short cpu_2args
   288                              <1> i17:
   289 00005D7E B811000000          <1>     mov eax, 11h
   290 00005D83 EB21                <1>     jmp short cpu_3args
   291                              <1> i18:
   292 00005D85 B812000000          <1>     mov eax, 12h
   293 00005D8A EB21                <1>     jmp short cpu_2args
   294                              <1> i19:
   295 00005D8C B813000000          <1>     mov eax, 13h
   296 00005D91 EB1A                <1>     jmp short cpu_2args
   297                              <1> i20:
   298 00005D93 B814000000          <1>     mov eax, 14h
   299 00005D98 EB13                <1>     jmp short cpu_2args
   300                              <1> i21:
   301 00005D9A B815000000          <1>     mov eax, 15h
   302                              <1> cpu_4args:
   303 00005D9F B903000000          <1>     mov ecx, 3
   304 00005DA4 EB0C                <1>     jmp short cpu_exception
   305                              <1> cpu_3args:
   306 00005DA6 B902000000          <1>     mov ecx, 2
   307 00005DAB EB05                <1>     jmp short cpu_exception
   308                              <1> cpu_2args:
   309 00005DAD B901000000          <1>     mov ecx, 1
   310                              <1> cpu_exception:
   311                              <1> ;Enter with:
   312                              <1> ; eax = Exception number in binary
   313                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   314 00005DB2 488D3501020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   315 00005DB9 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   316 00005DBE E8AF010000          <1>     call .writeExceptionMessage
   317                              <1> 
   318 00005DC3 803D(FDC30300)01    <1>     cmp byte [inDOS], 1
   319 00005DCA 7327                <1>     jae .introStop
   320 00005DCC 3D02000000          <1>     cmp eax, 2
   321 00005DD1 7420                <1>     je .introStop
   322                              <1> 
   323 00005DD3 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   324 00005DDA 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   325 00005DDE 7413                <1>     je .introStop
   326                              <1> 
   327 00005DE0 488D35FC010000      <1>     lea rsi, .fatal1
   328 00005DE7 BBC1000000          <1>     mov ebx, fatal1L
   329 00005DEC E881010000          <1>     call .writeExceptionMessage
   330 00005DF1 EB18                <1>     jmp short .introEnd
   331                              <1> .introStop:
   332 00005DF3 C605(82DA0300)FF    <1>     mov byte [haltDOS], -1
   333 00005DFA 488D35A6020000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   334 00005E01 BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   335 00005E06 E867010000          <1>     call .writeExceptionMessage
   336                              <1> .introEnd:
   337 00005E0B 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   338 00005E12 E829010000          <1>     call .printbyte ;Store the error code in the byte buffer
   339 00005E17 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   340 00005E1E BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   341 00005E23 E84A010000          <1>     call .writeExceptionMessage
   342                              <1> 
   343 00005E28 488D3575020000      <1>     lea rsi, .fatal2
   344 00005E2F BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   345 00005E34 E839010000          <1>     call .writeExceptionMessage
   346                              <1> 
   347 00005E39 80F901              <1>     cmp cl, 1
   348 00005E3C 7768                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   349                              <1> .cpurollprint:
   350 00005E3E 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   351 00005E45 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   352                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   353 00005E49 B108                <1>     mov cl, 8    ;8 bytes
   354                              <1> .cpurollprint1:
   355 00005E4B 48C1C208            <1>     rol rdx, 8
   356 00005E4F 88D0                <1>     mov al, dl
   357 00005E51 52                  <1>     push rdx
   358 00005E52 E8E9000000          <1>     call .printbyte
   359 00005E57 5A                  <1>     pop rdx
   360 00005E58 FEC9                <1>     dec cl
   361 00005E5A 75EF                <1>     jnz .cpurollprint1
   362                              <1> 
   363 00005E5C BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   364 00005E61 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   365 00005E68 E805010000          <1>     call .writeExceptionMessage
   366                              <1> 
   367 00005E6D BB03000000          <1>     mov ebx, crlfL
   368 00005E72 488D3547020000      <1>     lea rsi, .crlf
   369 00005E79 E8F4000000          <1>     call .writeExceptionMessage    
   370                              <1> 
   371 00005E7E F605(82DA0300)FF    <1>     test byte [haltDOS], -1
   372 00005E85 7516                <1>     jnz .fatalStop
   373 00005E87 E8D1000000          <1>     call .readInputChar
   374 00005E8C B8004C0000          <1>     mov eax, 4c00h
   375 00005E91 C605(80C40300)FF    <1>     mov byte [ctrlCExit], -1
   376 00005E98 E911090000          <1>     jmp functionDispatch    ;Call Int 41h politely
   377                              <1> .fatalStop:
   378                              <1> ;This is called if inDOS > 1 or NMI occured
   379                              <1> ;Permanently locks up the system by turning off interrupts and infinite looping.
   380 00005E9D E8A60A0000          <1>     call dosCrit2Enter  ;Suspend multitasking now
   381                              <1> .fatalLp:
   382 00005EA2 FA                  <1>     cli
   383 00005EA3 F4                  <1>     hlt
   384 00005EA4 EBFC                <1>     jmp short .fatalLp
   385                              <1> 
   386                              <1> .cpuextendederror:
   387 00005EA6 5A                  <1>     pop rdx
   388 00005EA7 48FFC9              <1>     dec rcx
   389 00005EAA 51                  <1>     push rcx
   390 00005EAB 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   391 00005EB2 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   392 00005EB4 86D6                <1>     xchg dl, dh   
   393                              <1> .pr1:
   394 00005EB6 88D0                <1>     mov al, dl
   395 00005EB8 52                  <1>     push rdx
   396 00005EB9 E882000000          <1>     call .printbyte
   397 00005EBE 5A                  <1>     pop rdx
   398 00005EBF C1CA08              <1>     ror edx, 8    ;Print just dx for now
   399 00005EC2 FEC9                <1>     dec cl
   400 00005EC4 75F0                <1>     jnz .pr1
   401                              <1> 
   402 00005EC6 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   403 00005ECD BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   404 00005ED2 E89B000000          <1>     call .writeExceptionMessage
   405                              <1> 
   406 00005ED7 488D35C6010000      <1>     lea rsi, .fatal2
   407 00005EDE BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   408 00005EE3 E88A000000          <1>     call .writeExceptionMessage
   409                              <1> 
   410 00005EE8 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   411 00005EE9 48FFC9              <1>     dec rcx
   412 00005EEC 0F844CFFFFFF        <1>     jz .cpurollprint
   413                              <1> 
   414 00005EF2 B108                <1>     mov cl, 8   ;16 nybbles
   415 00005EF4 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   416 00005EF7 488D3D(72DA0300)    <1>     lea rdi, byteBuffer
   417                              <1> .pr2:
   418 00005EFE 48C1C208            <1>     rol rdx, 8    ;Print rdx
   419 00005F02 88D0                <1>     mov al, dl
   420 00005F04 52                  <1>     push rdx
   421 00005F05 E836000000          <1>     call .printbyte
   422 00005F0A 5A                  <1>     pop rdx
   423 00005F0B FEC9                <1>     dec cl
   424 00005F0D 75EF                <1>     jnz .pr2
   425                              <1> 
   426 00005F0F 488D35(72DA0300)    <1>     lea rsi, byteBuffer
   427 00005F16 BB10000000          <1>     mov ebx, 16
   428 00005F1B E852000000          <1>     call .writeExceptionMessage
   429                              <1> 
   430 00005F20 488D357D010000      <1>     lea rsi, .fatal2
   431 00005F27 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   432 00005F2C E841000000          <1>     call .writeExceptionMessage
   433                              <1> 
   434 00005F31 E908FFFFFF          <1>     jmp .cpurollprint
   435                              <1> 
   436                              <1> 
   437                              <1> .char:    ;Print a single character
   438 00005F36 488D1D6D000000      <1>     lea rbx, .ascii
   439 00005F3D D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   440 00005F3E AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   441 00005F3F C3                  <1>     ret
   442                              <1> .printbyte:
   443 00005F40 88C2                <1>     mov dl, al            ;save byte in dl
   444 00005F42 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   445 00005F46 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   446 00005F4B 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   447 00005F4F E8E2FFFFFF          <1>     call .char
   448 00005F54 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   449 00005F57 E8DAFFFFFF          <1>     call .char
   450 00005F5C C3                  <1>     ret        
   451                              <1> 
   452                              <1> 
   453                              <1> .readInputChar:
   454 00005F5D C605(E1C40300)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   455 00005F64 488D35(10C50300)    <1>     lea rsi, singleIObyt
   456 00005F6B BB01000000          <1>     mov ebx, 1  ;Read one char
   457 00005F70 EB07                <1>     jmp short .ioException
   458                              <1> .writeExceptionMessage:
   459                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   460 00005F72 C605(E1C40300)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   461                              <1> .ioException:
   462 00005F79 C605(DFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   463 00005F80 66C705(E2C40300)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   463 00005F88 00                  <1>
   464 00005F89 891D(F5C40300)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   465 00005F8F 488D1D(DFC40300)    <1>     lea rbx, critReqHdr
   466 00005F96 488935(EDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   467 00005F9D 488B35(59C00300)    <1>     mov rsi, qword [vConPtr]
   468 00005FA4 E822010000          <1>     call goDriver
   469                              <1>     return
    18                              <2> %%_ret:
    19 00005FA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> 
   472                              <1> ;Error messages
   473 00005FAA 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   473 00005FB3 39414243444546      <1>
   474 00005FBA 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   474 00005FC3 20205343502F444F53- <1>
   474 00005FCC 20455843455054494F- <1>
   474 00005FD5 4E2044455445435445- <1>
   474 00005FDE 44210D0A0A          <1>
   475                              <1> fatalt0L   equ $ - .fatalt0
   476                              <1> 
   477                              <1> .fatal1:   
   478 00005FE3 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   478 00005FEC 656E7469616C6C7920- <1>
   478 00005FF5 666174616C20657272- <1>
   478 00005FFE 6F7220686173206265- <1>
   478 00006007 656E20646574656374- <1>
   478 00006010 65640D0A            <1>
   479 00006014 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   479 0000601D 68652063757272656E- <1>
   479 00006026 74206170706C696361- <1>
   479 0000602F 74696F6E206D757374- <1>
   479 00006038 206265207465726D69- <1>
   479 00006041 6E617465642E0D0A0A  <1>
   480 0000604A 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   480 00006053 20616E79206B657920- <1>
   480 0000605C 746F20636F6E74696E- <1>
   480 00006065 7565206F7220435452- <1>
   480 0000606E 4C2B414C542B44454C- <1>
   480 00006077 20746F207265737461- <1>
   480 00006080 727420746865206D61- <1>
   480 00006089 6368696E652E        <1>
   481 0000608F 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   481 00006098 5354454D204552524F- <1>
   481 000060A1 523A20              <1>
   482                              <1> fatal1L equ $ - .fatal1
   483                              <1> 
   484 000060A4 203A20              <1> .fatal2:   db " : "
   485                              <1> fatal2L    equ $ - .fatal2
   486                              <1> 
   487                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   488 000060A7 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   488 000060B0 4F532053595354454D- <1>
   488 000060B9 2053544F503A20      <1>
   489                              <1> fatalHaltL equ $ - .fatalHalt
   490 000060C0 0D0A0A              <1> .crlf:  db CR,LF,LF
   491                              <1> crlfL  equ $ - .crlf
    40                                  %include "./Source/Kernel/dosPrim.asm"
    41                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    42                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    43                              <1> 
    44                              <1> dosDefCritErrHdlr:
    45                              <1> ;The DOS default critical error handler always returns FAIL
    46 000060C3 B003                <1>     mov al, critFail
    47 000060C5 48CF                <1>     iretq
    48                              <1> goDriverChar:
    49                              <1> ;Shortcut for Char requests, make a driver request
    50                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    51 000060C7 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    52                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    53                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    54                              <1> ;       rbx = Ptr to the request header for the driver call!
    55 000060CB E878080000          <1>     call dosCrit2Enter
    56 000060D0 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    57 000060D3 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    58 000060D6 E877080000          <1>     call dosCrit2Exit
    59                              <1>     return
    18                              <2> %%_ret:
    19 000060DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> setupPhysicalDiskRequest:
    62                              <1> ;Ensure that al has valid disk number
    63                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    64                              <1> ;If CF=NC, rbp = DPB ptr.
    65                              <1> ;If CF=CY, exit error
    66 000060DC 84C0                <1>     test al, al
    67 000060DE 723F                <1>     jc .diskError
    68 000060E0 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
    69 000060E6 7337                <1>     jae .diskError
    70 000060E8 50                  <1>     push rax
    71 000060E9 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    72 000060EB E876040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    73 000060F0 58                  <1>     pop rax
    74 000060F1 7235                <1>     jc .error
    75 000060F3 8805(F9C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    76 000060F9 488B2D(02C70300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    77 00006100 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    78 00006108 750A                <1>     jnz .netError
    79 0000610A 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    80 0000610E E851030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    81                              <1>     return
    18                              <2> %%_ret:
    19 00006113 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .netError:
    83 00006114 66C705(00C40300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    83 0000611C 00                  <1>
    84 0000611D EB09                <1>     jmp short .error
    85                              <1> .diskError:
    86 0000611F 66C705(00C40300)0F- <1>     mov word [errorExCde], errBadDrv
    86 00006127 00                  <1>
    87                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    88 00006128 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    89 0000612F C605(02C40300)07    <1>     mov byte [errorAction], eActRetUsr
    90 00006136 C605(03C40300)09    <1>     mov byte [errorClass], eClsBadFmt
    91 0000613D F9                  <1>     stc
    92                              <1>     return
    18                              <2> %%_ret:
    19 0000613E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> setupAbsDiskEntry:
    95                              <1> ;Prepares to sets up the CDS and DPB for the request
    96 0000613F FE05(FDC30300)      <1>     inc byte [inDOS]
    97 00006145 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    98 00006146 FC                  <1>     cld ;Set string ops in the right direction
    99 00006147 E890FFFFFF          <1>     call setupPhysicalDiskRequest
   100 0000614C 7223                <1>     jc .exit    ;Error exit
   101 0000614E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
   102 00006155 56                  <1>     push rsi
   103 00006156 50                  <1>     push rax
   104 00006157 488D35(12C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   105 0000615E 8806                <1>     mov byte [rsi], al  ;Construct a path
   106 00006160 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   107 00006163 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   108 00006167 F8                  <1>     clc
   109                              <1> ;++++++++++++++++++++++++++++
   110                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   111                              <1> ;Entered with path in rsi (ah=03h)
   112 00006168 B800030000          <1>     mov eax, 0300h  
   113 0000616D CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   114                              <1> ;++++++++++++++++++++++++++++
   115 0000616F 58                  <1>     pop rax
   116 00006170 5E                  <1>     pop rsi
   117                              <1> .exit:
   118 00006171 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   119                              <1>     return
    18                              <2> %%_ret:
    19 00006173 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> absDiskWrite:       ;Int 46h
   122                              <1> ;al = Drive number
   123                              <1> ;rbx = Memory Buffer address to read from
   124                              <1> ;ecx = Number of sectors to write
   125                              <1> ;rdx = Start LBA to write to
   126 00006174 FA                  <1>     cli
   127 00006175 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   128 0000617C 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
   129 00006183 55                  <1>     push rbp
   130 00006184 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   131 00006185 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   132 0000618A 7252                <1>     jc absDiskExit
   133 0000618C E8E6010000          <1>     call primReqWriteSetup
   134 00006191 EB1D                <1>     jmp short absDiskReadWriteCommon
   135                              <1> absDiskRead:        ;Int 45h
   136                              <1> ;al = Drive number
   137                              <1> ;rbx = Memory Buffer address to write to
   138                              <1> ;ecx = Number of sectors to read
   139                              <1> ;rdx = Start LBA to read from
   140 00006193 FA                  <1>     cli 
   141 00006194 488925(6FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   142 0000619B 488D25(D0D90300)    <1>     lea rsp, DiskStakTop
   143 000061A2 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   144 000061A3 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   145 000061A4 E896FFFFFF          <1>     call setupAbsDiskEntry
   146 000061A9 7233                <1>     jc absDiskExit
   147 000061AB E8D2010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   148                              <1> absDiskReadWriteCommon:
   149                              <1> ;Entered with the appropriate function number in ah
   150                              <1> ; and primary request header in rbx
   151 000061B0 E859000000          <1>     call absDiskDriverCall
   152 000061B5 7427                <1>     jz absDiskExit  ;Skip error code checking
   153 000061B7 8A05(B8C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   154                              <1>     ;DOS uses the following pairs in a table
   155                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   156 000061BD B480                <1>     mov ah, 80h ;Attachment failure
   157 000061BF 3C0C                <1>     cmp al, 0Ch ;Gen error
   158 000061C1 741A                <1>     je .absExit
   159 000061C3 B440                <1>     mov ah, 40h ;Seek error
   160 000061C5 3C06                <1>     cmp al, 06h
   161 000061C7 7414                <1>     je .absExit
   162 000061C9 B408                <1>     mov ah, 08h ;Bad CRC
   163 000061CB 3C04                <1>     cmp al, 04h
   164 000061CD 740E                <1>     je .absExit
   165 000061CF B404                <1>     mov ah, 04h ;Sector not found
   166 000061D1 3C08                <1>     cmp al, 08h
   167 000061D3 7408                <1>     je .absExit
   168 000061D5 30E4                <1>     xor ah, ah  ;Write Protect Violation
   169 000061D7 84C0                <1>     test al, al
   170 000061D9 7402                <1>     je .absExit
   171 000061DB B402                <1>     mov ah, 02h ;Other Error
   172                              <1> .absExit:
   173 000061DD F9                  <1>     stc
   174                              <1> absDiskExit:
   175 000061DE 5B                  <1>     pop rbx
   176 000061DF 5D                  <1>     pop rbp
   177 000061E0 FA                  <1>     cli
   178 000061E1 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]
   179 000061E8 FB                  <1>     sti ;Reenable interrupts
   180 000061E9 488D0D0D000000      <1>     lea rcx, absStackJuggle
   181 000061F0 9C                  <1>     pushfq
   182 000061F1 5A                  <1>     pop rdx ;Get the current flags
   183 000061F2 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   184 000061F6 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   185 000061FB 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   186                              <1> absStackJuggle:
   187 000061FD FA                  <1>     cli
   188 000061FE 52                  <1>     push rdx    ;Push the flags on the stack
   189 000061FF 51                  <1>     push rcx    ;Push the return address on the stack
   190 00006200 9C                  <1>     pushfq
   191 00006201 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   192 00006203 89CA                <1>     mov edx, ecx
   193 00006205 FE0D(FDC30300)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   194 0000620B 9D                  <1>     popfq
   195 0000620C FB                  <1>     sti
   196                              <1>     return
    18                              <2> %%_ret:
    19 0000620D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> absDiskDriverCall:
   199                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   200                              <1> ;       rbx = Request header address
   201                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   202                              <1> ;       eax = Status word from request
   203                              <1> ;       ecx = Number of sectors transferred
   204 0000620E 56                  <1>     push rsi
   205                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   206 0000620F 8B0D(CBC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   207                              <1>     ;Prepare for goDriver now
   208 00006215 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   209 00006219 E8ADFEFFFF          <1>     call goDriver   ;Make request
   210 0000621E 5E                  <1>     pop rsi
   211 0000621F 8B05(CBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   212 00006225 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   213 00006227 0FB705(B8C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   214 0000622E 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   215                              <1>     return
    18                              <2> %%_ret:
    19 00006232 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> 
   217                              <1> getDiskDPB:
   218                              <1> ;Gets the disk DPB if the Disk is valid
   219                              <1> ;Otherwise will return a pointer to the drive DPB
   220                              <1> ;Called with rdi pointing to the CDS
   221                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   222 00006233 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   223 00006237 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   224 0000623A 8805(F9C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   225 00006240 E81F020000          <1>     call setWorkingDPB
   226 00006245 57                  <1>     push rdi    ;Save the CDS ptr
   227 00006246 E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   228 0000624B 5F                  <1>     pop rdi
   229 0000624C 724A                <1>     jc .exitBad ;Preserve CF
   230 0000624E 7547                <1>     jnz .exit
   231                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   232 00006250 0FB60D(7EC00300)    <1>     movzx ecx, byte [lastdrvNum]
   233 00006257 31C0                <1>     xor eax, eax
   234 00006259 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   235 0000625C 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   236 00006260 488B3D(6BC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   237                              <1> .checkCDS:
   238 00006267 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   239 0000626D 751D                <1>     jnz .next
   240 0000626F 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   241 00006273 7517                <1>     jne .next
   242 00006275 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   243 00006279 7411                <1>     jz .next    ;IF yes, skip it
   244 0000627B 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   245                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   246                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   247 0000627E 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   248 00006284 7406                <1>     jz .next    ;If bit not set, skip this next bit
   249 00006286 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   250                              <1> .next:
   251 0000628C 4881C75B000000      <1>     add rdi, cds_size
   252 00006293 FFC9                <1>     dec ecx
   253 00006295 75D0                <1>     jnz .checkCDS
   254                              <1> .exit:
   255 00006297 F8                  <1>     clc
   256                              <1> .exitBad:
   257                              <1>     return
    18                              <2> %%_ret:
    19 00006298 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 00006299 E82D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 0000629E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 000062A2 E824FEFFFF          <1>     call goDriver   ;Request!
   269 000062A7 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 000062AB F7C700800000        <1>     test edi, drvErrStatus
   271 000062B1 7570                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 000062B3 8A05(F9C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 000062B9 30E4                <1>     xor ah, ah
   275 000062BB 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 000062BE 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 000062C1 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 000062C3 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 000062C5 E83FA2FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 000062CA F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 000062CB 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 000062CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 000062CE C605(D8D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 000062D5 E853A2FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 000062DA 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 000062DC E84DA4FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 000062E1 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 000062E3 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   293                              <1> .repeatEP:
   294 000062E7 E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 000062EC 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 000062F0 E8D6FDFFFF          <1>     call goDriver   ;Request!
   297 000062F5 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 000062F9 A900800000          <1>     test eax, drvErrStatus
   299 000062FE 7561                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 00006300 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 00006304 53                  <1>     push rbx
   303 00006305 E836090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   304 0000630A 5B                  <1>     pop rbx
   305                              <1>     ;Adjust the buffer header information
   306 0000630B 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   307 0000630E 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   308 00006311 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   309 00006314 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   310 00006317 30E4                <1>     xor ah, ah
   311 00006319 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah
   312 0000631C 8825(D8D90300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   313                              <1>     return
    18                              <2> %%_ret:
    19 00006322 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   314                              <1> .diskDrvCritErrMedChk:
   315                              <1> ;Critical Errors fall through here
   316                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   317 00006323 48893D(04C40300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   318 0000632A 48892D(7EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   319 00006331 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   320 00006334 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   321 00006336 8825(5CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   322 0000633C E8A4F8FFFF          <1>     call criticalDOSError
   323 00006341 488B3D(04C40300)    <1>     mov rdi, qword [xInt44RDI]
   324 00006348 488B2D(7EC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   325 0000634F 3C01                <1>     cmp al, critRetry
   326 00006351 0F8442FFFFFF        <1>     je .medChk
   327 00006357 3C00                <1>     cmp al, critIgnore
   328 00006359 0F8454FFFFFF        <1>     je .medChkIgnore
   329 0000635F F9                  <1>     stc ;Set error flag to indicate fail
   330                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00006360 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .diskDrvCritErrBPB:
   333                              <1>     ;eax has status word, rbp has dpb ptr
   334                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   335 00006361 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   336 00006368 E80FF8FFFF          <1>     call diskDevErr
   337 0000636D 3C01                <1>     cmp al, critRetry
   338 0000636F 0F8472FFFFFF        <1>     je .repeatEP
   339                              <1>     ;Else we fail (Ignore=Fail here)
   340 00006375 F9                  <1>     stc ;Set error flag to indicate fail
   341                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00006376 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   343                              <1> ;           Primitive Driver Requests
   344                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   345                              <1> ;First are Disk requests, then Char device requests
   346                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   347                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   348                              <1> 
   349                              <1> primReqWriteSetup:
   350 00006377 50                  <1>     push rax
   351 00006378 B408                <1>     mov ah, drvWRITE    ;Command code
   352 0000637A 0225(C5C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   353 00006380 EB03                <1>     jmp short primReqRWCommon
   354                              <1> primReqReadSetup:
   355 00006382 50                  <1>     push rax
   356 00006383 B404                <1>     mov ah, drvREAD
   357                              <1> primReqRWCommon:
   358                              <1> ;Sets up the IO request packet with:
   359                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   360                              <1> ; rbx = Data storage buffer ptr
   361                              <1> ; ecx = Number of sectors to transfer
   362                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   363                              <1> ; ~~~~ Set by entry function ~~~~ 
   364                              <1> ; ah = Command code
   365                              <1> ; All regs preserved EXCEPT rbx.
   366                              <1> ; Return: rbx = Transfer Address
   367 00006385 48891D(C3C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   368 0000638C 890D(CBC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   369 00006392 C605(B5C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   370 00006399 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   371 0000639E 8905(B6C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   372 000063A4 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   373 000063A7 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   374                              <1>     ;Disk operations only here!
   375 000063A9 488915(CFC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   376 000063B0 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   377 000063B3 8805(C2C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   378 000063B9 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   379 000063BC 8805(B6C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   380                              <1> primReqCommonExit:
   381                              <1> ;Returns in rbx the primary request header as these functions
   382                              <1> ; setup the request in the primary request header space
   383 000063C2 58                  <1>     pop rax
   384 000063C3 488D1D(B5C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   385                              <1>     return
    18                              <2> %%_ret:
    19 000063CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   386                              <1> 
   387                              <1> primReqMedCheckSetup:
   388                              <1> ;Prepare the diskIO packet for mediacheck
   389                              <1> ;rbp has DPB pointer for device to check media on
   390 000063CB 50                  <1>     push rax
   391 000063CC C605(B5C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   392 000063D3 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   393 000063D6 8805(C2C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   394 000063DC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   395 000063DF 8805(B6C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   396 000063E5 C605(B7C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   397 000063EC 66C705(B8C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   397 000063F4 00                  <1>
   398 000063F5 EBCB                <1>     jmp short primReqCommonExit
   399                              <1> 
   400                              <1> primReqGetBPBSetup:
   401                              <1> ;rbp has DPB pointer for device
   402                              <1> ;rdi has sector buffer header pointer for transfer
   403 000063F7 50                  <1>     push rax
   404 000063F8 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   405 000063FC 48893D(C3C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   406 00006403 C605(B5C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   407 0000640A 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   408 0000640D 8805(C2C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   409 00006413 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   410 00006416 8805(B6C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   411 0000641C C605(B7C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   412 00006423 66C705(B8C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   412 0000642B 00                  <1>
   413 0000642C EB94                <1>     jmp short primReqCommonExit
   414                              <1> 
   415                              <1> primReqOpenSetup:
   416                              <1> ;al = unit number if a disk device. Undefined otherwise
   417 0000642E 50                  <1>     push rax
   418 0000642F B40D                <1>     mov ah, drvOPEN
   419 00006431 EB03                <1>     jmp short primReqOCcommon
   420                              <1> primReqCloseSetup:
   421                              <1> ;al = unit number if a disk device. Undefined otherwise
   422 00006433 50                  <1>     push rax
   423 00006434 B40E                <1>     mov ah, drvCLOSE
   424                              <1> primReqOCcommon:
   425 00006436 C605(B5C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   426 0000643D 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   427 0000643E 8905(B6C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   428                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   429 00006444 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   430                              <1> 
   431                              <1> secdReqCharIOReq:
   432                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   433                              <1> ;Input:
   434                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   435                              <1> ; ecx = Length of buffer
   436                              <1> ; rdi = Buffer pointer
   437                              <1> ;Output: 
   438                              <1> ; rbx = Transfer Address 
   439 00006449 488D1D(8BC40300)    <1>     lea rbx, secdReqHdr
   440 00006450 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   441 00006453 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   442 00006456 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   443 0000645C 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   444 00006460 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   445                              <1>     return
    18                              <2> %%_ret:
    19 00006463 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> ;If the device which will process this request is a disk device
   447                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   448                              <1> ;Then we will read the appropriate byte from that buffer to the 
   449                              <1> ; singleIOByt buffer.
   450                              <1> ;Such a request will require additional setup with the following fields:
   451                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    41                                  %include "./Source/Kernel/dosUtils.asm"
    42                              <1> ;DOS utility functions 
    43                              <1> 
    44                              <1> ;Basic Drive related Utilities
    45                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    46                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    47                              <1> ; that gets set up)
    48                              <1> 
    49                              <1> setWorkingDPB:
    50                              <1> ;Gets dpb in rbp and saves to workingDPB
    51 00006464 48892D(FAC60300)    <1>     mov qword [workingDPB], rbp
    52                              <1>     return
    18                              <2> %%_ret:
    19 0000646B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> testCDSNet:
    55                              <1> ;Checks if the workingCDS is a redirector drive
    56                              <1> ;Returns: CF=NC => Not net
    57                              <1> ;         CF=CY => Network redirector
    58                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    59                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    60                              <1> ;         rdi = workingCDS ptr
    61 0000646C 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]
    62 00006473 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    63 0000647A 7409                <1>     je .net
    64 0000647C 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    65 00006482 7501                <1>     jnz .net ;Net with CDS
    66                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00006484 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> .net:
    68 00006485 F9                  <1>     stc ;Set Net bit
    69                              <1>     return
    18                              <2> %%_ret:
    19 00006486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> getDiskData:
    72                              <1> ;This function returns:
    73                              <1> ;al = sectors per cluster
    74                              <1> ;ah = media ID byte
    75                              <1> ;ebx = total clusters
    76                              <1> ;cx = bytes per sector
    77                              <1> ;edx = number of available clusters
    78                              <1> ;
    79                              <1> ;If CF=CY on exit, al contains the error code
    80 00006487 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    81 0000648C 7308                <1>     jnc .physical
    82                              <1>     ;Beep a redir request out
    83 0000648E B80C110000          <1>     mov eax, 110Ch 
    84 00006493 CD4F                <1>     int 4Fh
    85                              <1>     return
    18                              <2> %%_ret:
    19 00006495 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> .physical:
    87                              <1> ;Now we must lock the structures
    88 00006496 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    89 0000649D E892040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    90 000064A2 E88CFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    91 000064A7 721C                <1>     jc .exit
    92 000064A9 E888A4FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    93 000064AE 7215                <1>     jc .exit
    94 000064B0 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    95 000064B3 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    96 000064B5 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    97 000064B8 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    98 000064BB FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    99 000064BD 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   100 000064C1 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   101 000064C4 F8                  <1>     clc
   102                              <1> .exit:
   103 000064C5 E874040000          <1>     call dosCrit1Exit
   104                              <1>     return
    18                              <2> %%_ret:
    19 000064CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   105                              <1> 
   106                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   107                              <1> ;Input: al = Interrupt number
   108                              <1> ;Output: rbx = Interrupt Vector
   109 000064CB 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   110 000064CC 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   111 000064CD 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   112 000064CF B807F00000          <1>     mov eax, 0F007h
   113 000064D4 CD35                <1>     int 35h
   114 000064D6 5A                  <1>     pop rdx
   115 000064D7 58                  <1>     pop rax
   116                              <1>     return
    18                              <2> %%_ret:
    19 000064D8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   119                              <1> ;Returns ptr to user regs in rsi
   120 000064D9 488B35(6FC40300)    <1>     mov rsi, qword [oldRSP]
   121                              <1>     return
    18                              <2> %%_ret:
    19 000064E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> walkDPBchain:
   124                              <1> ;Called with al = 0 based drive number
   125                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   126 000064E1 488B35(49C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   127                              <1> .walk:
   128 000064E8 4881FEFFFFFFFF      <1>     cmp rsi, -1
   129 000064EF 740A                <1>     je .exitBad
   130 000064F1 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   131 000064F3 7407                <1>     je .exit    ;Drive found
   132 000064F5 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   133 000064F9 EBED                <1>     jmp short .walk
   134                              <1> .exitBad:
   135 000064FB F9                  <1>     stc
   136                              <1> .exit:
   137                              <1>     return
    18                              <2> %%_ret:
    19 000064FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   138                              <1> setDrive:   
   139                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   140                              <1> ;Input: al = 1-based drive number
   141                              <1> ;Output: al = 0-based drive number
   142                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   143                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   144                              <1> ;            set.
   145 000064FD E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   146 00006502 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   147 00006504 56                  <1>     push rsi
   148 00006505 488B35(02C70300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   149 0000650C 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   150 00006512 5E                  <1>     pop rsi
   151 00006513 7401                <1>     jz .exit
   152 00006515 F9                  <1>     stc
   153                              <1> .exit:
   154                              <1>     return
    18                              <2> %%_ret:
    19 00006516 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   157                              <1> ;Allows a redirector or subst/join to build a CDS
   158                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   159                              <1> ; volumes, that are made at system boot.
   160                              <1> ;Input: al = Drive Letter for drive
   161                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   162                              <1> ;Output: rdi = newly filled in workingCDS
   163                              <1> ;CF=NC => CDS valid and has a DPB
   164                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   165 00006517 50                  <1>     push rax
   166 00006518 2C40                <1>     sub al, "A"-1
   167 0000651A 3A05(7DC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   168 00006520 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   169 00006527 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   170 0000652D 58                  <1>     pop rax
   171 0000652E 7235                <1>     jb .exit    ;Exit with CF=CY
   172 00006530 50                  <1>     push rax
   173 00006531 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   174 00006536 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   175 00006538 58                  <1>     pop rax
   176 00006539 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   177 0000653F C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   178 00006546 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   179 0000654E 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   180                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   181 00006554 50                  <1>     push rax
   182 00006555 56                  <1>     push rsi
   183 00006556 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   184 00006558 E884FFFFFF          <1>     call walkDPBchain
   185 0000655D 7204                <1>     jb .skipSettingDPB
   186 0000655F 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   187                              <1> .skipSettingDPB:
   188 00006563 5E                  <1>     pop rsi
   189 00006564 58                  <1>     pop rax
   190                              <1> .exit:
   191                              <1>     return
    18                              <2> %%_ret:
    19 00006565 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> getCDS:     ;Int 4Fh AX=1219h
   194                              <1> ;Gets the device DPB and saves it in the DOS variable
   195                              <1> ;This can be called to get CDS for network drives too!
   196                              <1> ;Input: al = 1 based drive number
   197                              <1> ;Sets workingCDS var with the CDS for the device. 
   198                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   199 00006566 84C0                <1>     test al, al
   200 00006568 7508                <1>     jnz .skip
   201 0000656A 8A05(26C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   202 00006570 FEC0                <1>     inc al
   203                              <1> .skip:
   204 00006572 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   205 00006574 56                  <1>     push rsi
   206 00006575 C605(FFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   207 0000657C F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   208 00006583 7423                <1>     jz .physDrive
   209                              <1>     ;Invokation via 21/5D00
   210 00006585 50                  <1>     push rax
   211 00006586 57                  <1>     push rdi
   212 00006587 488D3D(6EC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   213 0000658E 48893D(02C70300)    <1>     mov qword [workingCDS], rdi ;Make it current
   214 00006595 0441                <1>     add al, "A" ;Convert to a drive letter
   215 00006597 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   216 0000659C 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   217 000065A2 5F                  <1>     pop rdi
   218 000065A3 58                  <1>     pop rax
   219 000065A4 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   220 000065A6 EB17                <1>     jmp short .exitOk   ;All oki
   221                              <1> .physDrive:
   222 000065A8 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   223 000065AD 7208                <1>     jc .exitBad
   224 000065AF 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   225 000065B5 7508                <1>     jnz .exitOk ;Exit with flag cleared
   226                              <1>     ;Else Return to unknown error locus
   227                              <1> .exitBad:
   228 000065B7 C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   229                              <1> .exitBad1:
   230 000065BE F9                  <1>     stc
   231                              <1> .exitOk:
   232 000065BF 5E                  <1>     pop rsi
   233                              <1>     return
    18                              <2> %%_ret:
    19 000065C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   236                              <1>     ;Gets the CDS for the current drive in al
   237                              <1>     ;Input: al = Drive number, 0 = A ...
   238                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   239                              <1>     ;        CF=CY => al not valid
   240 000065C1 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
   241 000065C7 7202                <1>     jb .ctn
   242 000065C9 F9                  <1>     stc 
   243                              <1>     return
    18                              <2> %%_ret:
    19 000065CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> .ctn:
   245 000065CB 50                  <1>     push rax
   246 000065CC 52                  <1>     push rdx
   247 000065CD 0FB6C0              <1>     movzx eax, al
   248 000065D0 48BE5B000000000000- <1>     mov rsi, cds_size
   248 000065D9 00                  <1>
   249 000065DA 31D2                <1>     xor edx, edx
   250 000065DC F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   251 000065DE 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   252 000065E5 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   253 000065E8 488935(02C70300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   254 000065EF 5A                  <1>     pop rdx
   255 000065F0 58                  <1>     pop rax
   256 000065F1 F8                  <1>     clc
   257                              <1>     return
    18                              <2> %%_ret:
    19 000065F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> 
   260                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   261                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   262                              <1> ;Input: AL = Char to normalise.
   263                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   264                              <1> ;If path separator, set ZF=ZE
   265 000065F3 3C5C                <1>     cmp al, "\"
   266 000065F5 7406                <1>     je .exit
   267 000065F7 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   268 000065F9 7502                <1>     jne .exit
   269 000065FB B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   270                              <1> .exit:
   271                              <1>     return
    18                              <2> %%_ret:
    19 000065FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> uppercaseCharAtPtr:
   274                              <1> ;Get the char pointed to by rsi and then fall
   275 000065FE AC                  <1>     lodsb
   276                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   277                              <1> ;Convert a lowercase char to uppercase
   278                              <1> ; Leave alone uppercase chars and invalid chars
   279                              <1> ;Input: al = Char to convert to uppercase
   280                              <1> ;Output: al = Processed char
   281 000065FF 53                  <1>     push rbx
   282 00006600 3C61                <1>     cmp al, "a"
   283 00006602 7214                <1>     jb .exit
   284 00006604 3C7A                <1>     cmp al, "z"
   285 00006606 7702                <1>     ja .checkExt
   286 00006608 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   287                              <1> .checkExt:
   288 0000660A 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   289 0000660C 720A                <1>     jb .exit
   290 0000660E 2C80                <1>     sub al, 80h ;Turn into table offset
   291 00006610 488B1D179AFFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   292 00006617 D7                  <1>     xlatb   ;Get converted extended byte into al
   293                              <1> .exit:
   294 00006618 50                  <1>     push rax    ;Save al temporarily
   295 00006619 488D1D319CFFFF      <1>     lea rbx, asciiCharProperties
   296 00006620 D7                  <1>     xlatb   ;Get the signature in al
   297 00006621 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   298 00006623 58                  <1>     pop rax
   299 00006624 5B                  <1>     pop rbx
   300                              <1>     return
    18                              <2> %%_ret:
    19 00006625 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   301                              <1> 
   302                              <1> strlen2:    ;Int 4Fh, AX=1212h
   303                              <1> ;Entry point for Multiplex
   304 00006626 57                  <1>     push rdi
   305 00006627 4889F7              <1>     mov rdi, rsi
   306 0000662A E802000000          <1>     call strlen
   307 0000662F 5F                  <1>     pop rdi
   308                              <1>     return
    18                              <2> %%_ret:
    19 00006630 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> strlen: 
   310                              <1> ;Gets the length of a ASCIIZ string
   311                              <1> ;Input: rdi = Source buffer
   312                              <1> ;Output: ecx = Length of string
   313 00006631 50                  <1>     push rax
   314 00006632 57                  <1>     push rdi
   315 00006633 30C0                <1>     xor al, al
   316 00006635 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   317 00006637 FFC9                <1>     dec ecx ;rcx = -1
   318 00006639 F2AE                <1>     repne scasb
   319 0000663B F7D1                <1>     not ecx
   320 0000663D 5F                  <1>     pop rdi
   321 0000663E 58                  <1>     pop rax
   322                              <1>     return
    18                              <2> %%_ret:
    19 0000663F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> strcpy:
   325                              <1> ;Copies a null terminated string from rsi to rdi
   326 00006640 AC                  <1>     lodsb
   327 00006641 AA                  <1>     stosb
   328 00006642 84C0                <1>     test al, al
   329                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006644 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330 00006646 EBF8                <1>     jmp short strcpy
   331                              <1> 
   332                              <1> strcmp:
   333                              <1> ;Compares two ASCIIZ strings for equality.
   334                              <1> ;Input: rsi = First string
   335                              <1> ;       rdi = Second string
   336                              <1> ;       ecx = Number of bytes to compare
   337                              <1> ;Output: ZF=ZE => Equal
   338                              <1> ;        ZF=NZ => Not equal
   339 00006648 56                  <1>     push rsi
   340 00006649 57                  <1>     push rdi
   341 0000664A F3A6                <1>     repe cmpsb
   342 0000664C 5F                  <1>     pop rdi
   343 0000664D 5E                  <1>     pop rsi
   344                              <1>     return
    18                              <2> %%_ret:
    19 0000664E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> 
   346                              <1> 
   347                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   348                              <1> ;Converts lowercase to uppercase and / to "\"
   349                              <1> ;Input: rsi = Source buffer
   350                              <1> ;       rdi = Buffer to place normalised path
   351 0000664F 50                  <1>     push rax
   352 00006650 56                  <1>     push rsi
   353 00006651 57                  <1>     push rdi
   354                              <1> .scan:
   355 00006652 AC                  <1>     lodsb
   356 00006653 84C0                <1>     test al, al
   357 00006655 740D                <1>     jz .exit
   358 00006657 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   359 0000665C E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   360 00006661 AA                  <1>     stosb
   361 00006662 EBEE                <1>     jmp short .scan
   362                              <1> .exit:
   363 00006664 5F                  <1>     pop rdi
   364 00006665 5E                  <1>     pop rsi
   365 00006666 58                  <1>     pop rax
   366                              <1>     return
    18                              <2> %%_ret:
    19 00006667 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   369                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   370                              <1> ;Input: rsi = One ASCIIZ pathname
   371                              <1> ;       rdi = Second ASCIIZ pathname
   372                              <1> ;Return:
   373                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   374 00006668 50                  <1>     push rax
   375 00006669 56                  <1>     push rsi
   376 0000666A 57                  <1>     push rdi
   377                              <1> .scan:
   378 0000666B 8A06                <1>     mov al, byte [rsi]
   379 0000666D 84C0                <1>     test al, al
   380 0000666F 7424                <1>     jz .endOfString
   381 00006671 8A27                <1>     mov ah, byte [rdi]
   382 00006673 E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   383 00006678 7410                <1>     jz .pathseps
   384 0000667A 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   385 0000667E 38E0                <1>     cmp al, ah
   386 00006680 7515                <1>     jnz .exit
   387                              <1> .nextChar:
   388 00006682 48FFC6              <1>     inc rsi
   389 00006685 48FFC7              <1>     inc rdi
   390 00006688 EBE1                <1>     jmp short .scan
   391                              <1> .pathseps:
   392 0000668A 86E0                <1>     xchg ah, al
   393 0000668C E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   394 00006691 7504                <1>     jnz .exit
   395 00006693 EBED                <1>     jmp short .nextChar ;Else get the next chars
   396                              <1> .endOfString:
   397 00006695 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   398                              <1> .exit:
   399 00006697 5F                  <1>     pop rdi
   400 00006698 5E                  <1>     pop rsi
   401 00006699 58                  <1>     pop rax
   402                              <1>     return
    18                              <2> %%_ret:
    19 0000669A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> checkPathspecOK:
   404                              <1> ;Input:
   405                              <1> ;rsi -> points to a path to verify if it is ok.
   406                              <1> ;Output:
   407                              <1> ;CF=NC => The path is totally clean and ok to use.
   408                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   409                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   410                              <1> ; and depending on method of invokation and caller, may be permissable.
   411                              <1> ;We accept lc and uc characters in this check function.
   412 0000669B 50                  <1>     push rax
   413 0000669C 53                  <1>     push rbx    ;Use rbx as the return flag status
   414 0000669D 56                  <1>     push rsi
   415 0000669E 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   416                              <1> 
   417                              <1>     ;Start by getting the length of the ASCIIZ string.
   418 000066A0 51                  <1>     push rcx
   419 000066A1 57                  <1>     push rdi
   420 000066A2 4889F7              <1>     mov rdi, rsi
   421 000066A5 E887FFFFFF          <1>     call strlen
   422 000066AA 81F940000000        <1>     cmp ecx, 64    ;Check
   423 000066B0 5F                  <1>     pop rdi
   424 000066B1 59                  <1>     pop rcx
   425 000066B2 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   426                              <1>     ;First we verify if our path is relative or canonical (absolute)
   427 000066B4 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   428 000066B7 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   429 000066BB 7416                <1>     je .netName
   430 000066BD 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   431 000066C1 7410                <1>     je .netName
   432 000066C3 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   433 000066C6 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   434                              <1>     ;Here if relative
   435 000066C8 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1
   436 000066CF 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   437 000066D1 EB1F                <1>     jmp short .okToScan
   438                              <1> .netName:
   439 000066D3 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   441                              <1> .diskPath:
   442 000066DA 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   443 000066E1 F605(F2C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   444 000066E8 7408                <1>     jz .okToScan
   445 000066EA AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   446 000066EB E803FFFFFF          <1>     call swapPathSeparator
   447 000066F0 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   448                              <1> .okToScan:
   449 000066F2 AC                  <1>     lodsb   
   450 000066F3 84C0                <1>     test al, al ;End of path char?
   451 000066F5 7430                <1>     jz .exit
   452 000066F7 E8F7FEFFFF          <1>     call swapPathSeparator
   453 000066FC 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   454 000066FE 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   455 00006700 7411                <1>     je .wcFound
   456 00006702 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   457 00006704 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   458                              <1>     ;Else we check that the char in al is an acceptable char
   459 00006706 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   460 00006708 74E8                <1>     je .okToScan
   461 0000670A E831000000          <1>     call checkCharValid
   462 0000670F 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   463 00006711 EBDF                <1>     jmp short .okToScan
   464                              <1> .wcFound:
   465 00006713 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   466 00006718 EBD8                <1>     jmp short .okToScan
   467                              <1> .wcCheck:
   468                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   469 0000671A F7C340000000        <1>     test ebx, 40h
   470 00006720 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   471                              <1>     ;Else fall through in error
   472                              <1> .badExit:
   473 00006722 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   474                              <1> .exit:
   475 00006727 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   476 00006728 9D                  <1>     popfq
   477 00006729 5E                  <1>     pop rsi
   478 0000672A 5B                  <1>     pop rbx
   479 0000672B 58                  <1>     pop rax
   480                              <1>     return
    18                              <2> %%_ret:
    19 0000672C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   481                              <1> 
   482                              <1> scanPathWC:
   483                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   484                              <1> ; even in the final path componant.
   485                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   486                              <1> ;Output: CF=NC => No wildcards present
   487                              <1> ;        CF=CY => Wildcards found
   488 0000672D 50                  <1>     push rax
   489 0000672E 56                  <1>     push rsi
   490                              <1> .scan:
   491 0000672F AC                  <1>     lodsb
   492 00006730 84C0                <1>     test al, al
   493 00006732 7409                <1>     jz .exit
   494 00006734 3C3F                <1>     cmp al, "?"
   495 00006736 7404                <1>     je .wcFnd
   496 00006738 3C2A                <1>     cmp al, "*"
   497 0000673A 75F3                <1>     jne .scan
   498                              <1> .wcFnd:
   499 0000673C F9                  <1>     stc
   500                              <1> .exit:
   501 0000673D 5E                  <1>     pop rsi
   502 0000673E 58                  <1>     pop rax
   503                              <1>     return
    18                              <2> %%_ret:
    19 0000673F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> checkCharValid:
   506                              <1> ;If ZF=ZE => Invalid Char
   507                              <1> ;If ZF=NZ => Valid Char
   508 00006740 51                  <1>     push rcx
   509 00006741 57                  <1>     push rdi
   510 00006742 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   511 00006747 488D3D539AFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   512 0000674E F2AE                <1>     repne scasb ;Scan. Stop when equal
   513 00006750 5F                  <1>     pop rdi
   514 00006751 59                  <1>     pop rcx
   515                              <1>     return
    18                              <2> %%_ret:
    19 00006752 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> 
   518                              <1> skipSpacesAndTabs:
   519                              <1> ;Input: rsi -> String 
   520                              <1> ;Output: rsi -> First non Space or Tab type char
   521 00006753 AC                  <1>     lodsb
   522 00006754 E815000000          <1>     call isCharSpaceType
   523 00006759 74F8                <1>     jz skipSpacesAndTabs
   524 0000675B 48FFCE              <1>     dec rsi
   525                              <1>     return
    18                              <2> %%_ret:
    19 0000675E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> isCharDelimType:
   528                              <1> ;Input: al = Char to check properties of
   529                              <1> ;Output:    ZF=NZ => Char not name delimiter
   530                              <1> ;           ZF=ZE => Char delimiter
   531 0000675F 50                  <1>     push rax
   532 00006760 53                  <1>     push rbx
   533 00006761 488D1DE99AFFFF      <1>     lea rbx, asciiCharProperties
   534 00006768 D7                  <1>     xlatb
   535 00006769 A802                <1>     test al, 2
   536 0000676B 5B                  <1>     pop rbx
   537 0000676C 58                  <1>     pop rax
   538                              <1>     return
    18                              <2> %%_ret:
    19 0000676D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> isCharSpaceType:
   541                              <1> ;Input: al = Char to check properties of
   542                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   543                              <1> ;           ZF=ZE => Char Space or Tab
   544 0000676E 50                  <1>     push rax
   545 0000676F 53                  <1>     push rbx
   546 00006770 488D1DDA9AFFFF      <1>     lea rbx, asciiCharProperties
   547 00006777 D7                  <1>     xlatb
   548 00006778 A804                <1>     test al, 4
   549 0000677A 5B                  <1>     pop rbx
   550 0000677B 58                  <1>     pop rax
   551                              <1>     return
    18                              <2> %%_ret:
    19 0000677C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   554                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   555                              <1> ;Input: rsi = One pointer
   556                              <1> ;       rdi = Second pointer
   557                              <1> ;Output: ZF=ZE if equal
   558                              <1> ;        ZF=NZ if not
   559 0000677D 4839FE              <1>     cmp rsi, rdi
   560                              <1>     return
    18                              <2> %%_ret:
    19 00006780 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> checkPathNet:
   563                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   564                              <1> ;Output: ZF=ZE => Path is a net path
   565                              <1> ;        ZF=NZ => Path is not a net path
   566 00006781 50                  <1>     push rax
   567 00006782 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   568 00006785 E869FEFFFF          <1>     call swapPathSeparator
   569 0000678A 7505                <1>     jnz .exit
   570 0000678C E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   571                              <1> .exit:
   572 00006791 58                  <1>     pop rax
   573                              <1>     return
    18                              <2> %%_ret:
    19 00006792 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> getCharDevDriverPtr:
   576                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   577                              <1> ;Input: rax = Device Driver name (space padded)
   578                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   579 00006793 488D3D(80C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   580                              <1> .lp:
   581 0000679A 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   582                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000679E 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   583 000067A0 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   584 000067A3 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   585 000067AA 75EE                <1>     jne .lp ;If not loop
   586 000067AC F9                  <1>     stc ;Else bad exit
   587                              <1>     return
    18                              <2> %%_ret:
    19 000067AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> 
    42                                  %include "./Source/Kernel/dosMain.asm"
    43                              <1> ;-----------------------------------:
    44                              <1> ;        Main Kernel dispatch       :
    45                              <1> ;            and routines           :
    46                              <1> ;-----------------------------------:
    47                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    48                              <1> ;ah = Function number, all other registers have various meanings
    49                              <1>  %if DEBUG
    50                              <1>     ;Entry function
    51                              <1>     debugEnterM
    52                              <1>     lea rbp, .l0000
    53                              <1>     call debPrintNullString
    54                              <1>     call debPrintFunctionName
    55                              <1>     jmp short .l0001
    56                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    57                              <1> .l0001:    
    58                              <1>     debugExitM
    59                              <1>     %endif
    60 000067AE FA                  <1>     cli ;Halt external interrupts
    61 000067AF FC                  <1>     cld ;Ensure all string ops occur in the right direction
    62 000067B0 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    63 000067B3 0F8349010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    64                              <1>     ;Cherry pick functions
    65 000067B9 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    66 000067BC 722C                <1>     jb .fsbegin   ;If below skip these checks
    67 000067BE 0F847A020000        <1>     je ctrlBreakCheck
    68 000067C4 80FC64              <1>     cmp ah, 64h
    69 000067C7 0F84BA020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    70 000067CD 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    71 000067CF 80FC51              <1>     cmp ah, 51h
    72 000067D2 0F849D020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    73 000067D8 80FC62              <1>     cmp ah, 62h
    74 000067DB 0F849D020000        <1>     je getPSPaddr          ;Calls the above function
    75 000067E1 80FC50              <1>     cmp ah, 50h
    76 000067E4 0F8482020000        <1>     je setCurrProcessID
    77                              <1> .fsbegin:
    78 000067EA E82E010000          <1>     call dosPushRegs ;Push the usual prologue registers
    79 000067EF 48891D(77C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    80 000067F6 66C705(38C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    80 000067FE 00                  <1>
    81 000067FF 488B05(6FC40300)    <1>     mov rax, qword [oldRSP]
    82 00006806 488905(5FC40300)    <1>     mov qword [oldoldRSP], rax
    83 0000680D FE05(FDC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    84 00006813 488925(6FC40300)    <1>     mov qword [oldRSP], rsp
    85                              <1> ;Network related variable resetting
    86 0000681A C605(F2C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    87                              <1> ;Here, we want to save oldRSP in the callers PSP
    88 00006821 488B05(14C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    89 00006828 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    90 0000682C 58                  <1>     pop rax     ;Get old rax back
    91 0000682D 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 0000682E 488D25(00CD0300)    <1>     lea rsp, critStakTop
    96 00006835 FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 00006836 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 00006838 881D(88C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 0000683E C605(89C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 00006845 881D(5EC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 0000684B 881D(7FC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 00006851 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 00006852 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 00006854 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 00006856 488D05789AFFFF      <1>     lea rax, kDispTbl
   108 0000685D 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 00006860 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 00006864 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 00006867 58                  <1>     pop rax
   112                              <1> 
   113 00006868 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 0000686A 741C                <1>     jz .fddiskOp
   115 0000686C 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 0000686F 745E                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 00006871 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 00006874 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 00006876 F605(FCC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 0000687D 7550                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 0000687F 488D25(90D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 00006886 EB47                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 00006888 488905(28C40300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 0000688F C605(FFC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 00006896 C605(FCC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 0000689D C605(80C40300)00    <1>     mov byte [ctrlCExit], 0     ;Also reset the ctrlC exit flag
   132 000068A4 C605(FEC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   133                              <1> 
   134 000068AB 50                  <1>     push rax
   135 000068AC B482                <1>     mov ah, 82h ;Cancel all critical section!
   136 000068AE CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   137 000068B0 58                  <1>     pop rax
   138                              <1> 
   139 000068B1 C605(89C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   140 000068B8 488D25(D0D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   141 000068BF F605(27C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   142 000068C6 7407                <1>     jz .fdGoToFunction
   143                              <1> ; HANDLE CTRL+BREAK HERE!
   144 000068C8 50                  <1>     push rax
   145 000068C9 E8AEB9FFFF          <1>     call checkBreak   ; Check for a ^C
   146 000068CE 58                  <1>     pop rax
   147                              <1> .fdGoToFunction:
   148 000068CF 48871D(77C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   149                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   150                              <1>     ;
   151                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   152                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   153                              <1>     ;
   154                              <1>     %if DEBUG && REGS
   155                              <1>     ;Print stack if necessary function
   156                              <1>     debugEnterM
   157                              <1>     call debPrintDOSStack
   158                              <1>     debugExitM
   159                              <1>     %endif
   160 000068D6 FF15(77C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   161                              <1>     %if DEBUG
   162                              <1>     ;Entry function
   163                              <1>     debugEnterM
   164                              <1>     lea rbp, .l0002
   165                              <1>     call debPrintNullString
   166                              <1>     jmp short .l0003
   167                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   168                              <1> .l0003:    
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1>     %if DEBUG && REGS
   172                              <1>     ;Exit function
   173                              <1>     debugEnterM
   174                              <1>     call debPrintDOSStack
   175                              <1>     debugExitM
   176                              <1>     %endif
   177                              <1> .fdExit:
   178 000068DC FA                  <1>     cli     ;Redisable interrupts
   179 000068DD FE0D(FDC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   180 000068E3 488B25(6FC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   181 000068EA 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   182 000068ED 488B05(5FC40300)    <1>     mov rax, qword [oldoldRSP]
   183 000068F4 488905(6FC40300)    <1>     mov qword [oldRSP], rax
   184 000068FB E806000000          <1>     call dosPopRegs  ;Pop the frame
   185 00006900 48CF                <1>     iretq
   186                              <1> .fdExitBad:
   187 00006902 30C0                <1>     xor al, al
   188                              <1> defaultIretq:
   189 00006904 48CF                <1>     iretq
   190                              <1> dosPopRegs:
   191 00006906 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   192 0000690C 58                  <1>     pop rax
   193 0000690D 5B                  <1>     pop rbx
   194 0000690E 59                  <1>     pop rcx
   195 0000690F 5A                  <1>     pop rdx
   196 00006910 5E                  <1>     pop rsi
   197 00006911 5F                  <1>     pop rdi
   198 00006912 5D                  <1>     pop rbp
   199 00006913 4158                <1>     pop r8
   200 00006915 4159                <1>     pop r9
   201 00006917 FF25(67C40300)      <1>     jmp qword [dosReturn]
   202                              <1> dosPushRegs:
   203 0000691D 8F05(67C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   204 00006923 4151                <1>     push r9
   205 00006925 4150                <1>     push r8
   206 00006927 55                  <1>     push rbp
   207 00006928 57                  <1>     push rdi
   208 00006929 56                  <1>     push rsi
   209 0000692A 52                  <1>     push rdx
   210 0000692B 51                  <1>     push rcx
   211 0000692C 53                  <1>     push rbx
   212 0000692D 50                  <1>     push rax
   213 0000692E FF25(67C40300)      <1>     jmp qword [dosReturn]
   214                              <1> dosCrit1Enter:
   215                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00006934 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216 00006935 B801800000          <1>     mov eax, 8001h
   217 0000693A CD4A                <1>     int 4ah
   218 0000693C 58                  <1>     pop rax
   219                              <1>     return
    18                              <2> %%_ret:
    19 0000693D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   220                              <1> dosCrit1Exit:
   221                              <1>     return
    18                              <2> %%_ret:
    19 0000693E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222 0000693F B801810000          <1>     mov eax, 8101h
   223 00006944 CD4A                <1>     int 4ah
   224 00006946 58                  <1>     pop rax
   225                              <1>     return
    18                              <2> %%_ret:
    19 00006947 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> dosCrit2Enter:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00006948 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228 00006949 B802800000          <1>     mov eax, 8002h
   229 0000694E CD4A                <1>     int 4ah
   230 00006950 58                  <1>     pop rax
   231                              <1>     return
    18                              <2> %%_ret:
    19 00006951 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> dosCrit2Exit:
   233                              <1>     return
    18                              <2> %%_ret:
    19 00006952 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234 00006953 B802810000          <1>     mov eax, 8102h
   235 00006958 CD4A                <1>     int 4ah
   236 0000695A 58                  <1>     pop rax
   237                              <1>     return
    18                              <2> %%_ret:
    19 0000695B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> ;FCB specific returns
   240                              <1> fcbGoodExit:
   241                              <1> ;Preserve the carry flag on entry to DOS
   242 0000695C 30C0                <1>     xor al, al ;Set return code al = 0
   243                              <1>     return
    18                              <2> %%_ret:
    19 0000695E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> fcbErrExit:
   245                              <1> ;Preserve the carry flag on entry to DOS
   246                              <1> ;Input: eax = Extended error code to store in SDA 
   247 0000695F E836000000          <1>     call xLatError
   248 00006964 B0FF                <1>     mov al, -1  ;Set return code al = -1
   249 00006966 F9                  <1>     stc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00006967 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> ;Handle and General DOS Returns
   253                              <1> ;All good exits destroy AT LEAST ax 
   254                              <1> extGoodExit2:
   255                              <1> ;Good exit with an extended return code in eax
   256 00006968 E86CFBFFFF          <1>     call getUserRegs
   257 0000696D 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   258 0000696F EB08                <1>     jmp short extGoodExit.extGoodCommon
   259                              <1> extGoodExit:
   260                              <1> ;Good exit
   261                              <1> ;Return code in ax
   262 00006971 E863FBFFFF          <1>     call getUserRegs
   263 00006976 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   264                              <1> .extGoodCommon:
   265 00006979 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   266 0000697D F8                  <1>     clc
   267                              <1>     return
    18                              <2> %%_ret:
    19 0000697E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> extErrExit:
   269                              <1> ;The extended error exit from DOS
   270                              <1> ;Jumped to with AL=Extended error code
   271                              <1> ;Can be called too.
   272                              <1> ;Input: al = Extended error code
   273                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   274                              <1> ;   Returns with: eax = xLat Error
   275                              <1> ;                 rsi = callerFrame
   276 0000697F 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   277 00006982 E813000000          <1>     call xLatError
   278 00006987 E891000000          <1>     call checkFail
   279 0000698C E848FBFFFF          <1>     call getUserRegs
   280 00006991 668906              <1>     mov word [rsi + callerFrame.rax], ax
   281 00006994 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   282 00006998 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   283                              <1>     return
    18                              <2> %%_ret:
    19 00006999 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   284                              <1> xLatError:
   285                              <1> ;Translates the error code given in ax and sets error code in the var
   286                              <1> ; Input: ax = Extended Error Code
   287                              <1> ; Output: ax = Potentially translated Error Code
   288                              <1> ;         [errorExCde] = Original Error Code
   289                              <1> ;Preserves all registers except ax
   290                              <1> ;AH is always returned as 0
   291 0000699A 53                  <1>     push rbx
   292 0000699B 51                  <1>     push rcx
   293 0000699C 56                  <1>     push rsi
   294 0000699D 668905(00C40300)    <1>     mov word [errorExCde], ax
   295 000069A4 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   296 000069A6 488D35E496FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   297                              <1> .readEntry:
   298 000069AD 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   299 000069AF 3CFF                <1>     cmp al, -1
   300 000069B1 741F                <1>     je .skipXlat
   301 000069B3 3A05(29C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   302 000069B9 7408                <1>     je .found
   303                              <1>     ;Here, entry not found, goto next entry
   304 000069BB 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   305 000069BE 4801C6              <1>     add rsi, rax    ;Goto next entry
   306 000069C1 EBEA                <1>     jmp short .readEntry
   307                              <1> .found:
   308                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   309 000069C3 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   310                              <1> .mainSearch:
   311 000069C6 AC                  <1>     lodsb   ;Get one byte into al
   312 000069C7 38C3                <1>     cmp bl, al  ;Check against the error code
   313 000069C9 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   314 000069CB FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   315 000069CD 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   316                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   317 000069CF 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   318                              <1> .skipXlat:
   319 000069D2 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   320 000069D4 5E                  <1>     pop rsi
   321 000069D5 59                  <1>     pop rcx
   322 000069D6 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 000069D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   325                              <1> ;Looks up the error code in the variable and sets the other error vars
   326                              <1> ;Called with the lookup table in rsi
   327                              <1> ;All regs preserved
   328 000069D8 50                  <1>     push rax
   329 000069D9 53                  <1>     push rbx
   330 000069DA 51                  <1>     push rcx
   331 000069DB 56                  <1>     push rsi
   332 000069DC 0FB71D(00C40300)    <1>     movzx ebx, word [errorExCde]
   333 000069E3 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   334                              <1> .readEntry:
   335 000069E8 AD                  <1>     lodsd   ;Read the dword table entry into eax
   336 000069E9 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   337 000069EE 7428                <1>     je .exit    
   338 000069F0 38D8                <1>     cmp al, bl  ;Compare the error codes
   339 000069F2 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   340 000069F4 D3E8                <1>     shr eax, cl
   341 000069F6 3CFF                <1>     cmp al, -1
   342 000069F8 7406                <1>     je .skipClass
   343 000069FA 8805(03C40300)      <1>     mov byte [errorClass], al
   344                              <1> .skipClass:
   345 00006A00 D3E8                <1>     shr eax, cl
   346 00006A02 3CFF                <1>     cmp al, -1
   347 00006A04 7406                <1>     je .skipAct
   348 00006A06 8805(02C40300)      <1>     mov byte [errorAction], al
   349                              <1> .skipAct:
   350 00006A0C D3E8                <1>     shr eax, cl
   351 00006A0E 3CFF                <1>     cmp al, -1
   352 00006A10 7406                <1>     je .exit
   353 00006A12 8805(FFC30300)      <1>     mov byte [errorLocus], al
   354                              <1> .exit:
   355 00006A18 5E                  <1>     pop rsi
   356 00006A19 59                  <1>     pop rcx
   357 00006A1A 5B                  <1>     pop rbx
   358 00006A1B 58                  <1>     pop rax
   359                              <1>     return
    18                              <2> %%_ret:
    19 00006A1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> checkFail:
   361                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   362                              <1> ; and swaps the var error code if so
   363 00006A1D 803D(5EC40300)00    <1>     cmp byte [Int44Fail], 0
   364 00006A24 7509                <1>     jnz .skipFail
   365 00006A26 66C705(00C40300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   365 00006A2E 00                  <1>
   366                              <1> .skipFail:
   367 00006A2F 56                  <1>     push rsi
   368 00006A30 488D35F696FFFF      <1>     lea rsi, extErrTbl
   369 00006A37 E89CFFFFFF          <1>     call setErrorVars
   370 00006A3C 5E                  <1>     pop rsi
   371                              <1>     return
    18                              <2> %%_ret:
    19 00006A3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   372                              <1> ;========================================:
   373                              <1> ;      Reentrant Kernel Functions        :
   374                              <1> ;========================================:
   375                              <1> ctrlBreakCheck:    ;ah = 33h
   376 00006A3E 84C0                <1>     test al, al
   377 00006A40 7508                <1>     jnz .cbcget  ;Get the state or other functions
   378 00006A42 8A15(27C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   379 00006A48 48CF                <1>     iretq
   380                              <1> .cbcget:
   381 00006A4A 3C02                <1>     cmp al, 02h
   382 00006A4C 771A                <1>     ja .cbcBad
   383 00006A4E 740D                <1>     jz .cbcxchg ;Function 2
   384 00006A50 52                  <1>     push rdx
   385 00006A51 80E201              <1>     and dl, 1   ;Get only the bottom bit
   386 00006A54 8815(27C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   387 00006A5A 5A                  <1>     pop rdx
   388 00006A5B 48CF                <1>     iretq
   389                              <1> .cbcxchg:
   390 00006A5D 80E201              <1>     and dl, 1
   391 00006A60 8615(27C40300)      <1>     xchg byte [breakFlag], dl
   392 00006A66 48CF                <1>     iretq
   393                              <1> .cbcBad:
   394 00006A68 B0FF                <1>     mov al, -1
   395 00006A6A 48CF                <1>     iretq
   396                              <1> 
   397                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   398 00006A6C 48891D(14C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   399 00006A73 48CF                <1>     iretq
   400                              <1> 
   401                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   402 00006A75 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   403 00006A7C 48CF                <1>     iretq
   404                              <1> 
   405                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   406 00006A7E 488B15(14C40300)    <1>     mov rdx, qword [currentPSP]
   407 00006A85 48CF                <1>     iretq
   408                              <1> 
   409                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   410 00006A87 8805(D9D90300)      <1>     mov byte [lookahead], al    
   411 00006A8D 48CF                <1>     iretq
   412                              <1> 
   413                              <1> ;========================================:
   414                              <1> ;            Kernel Functions            :
   415                              <1> ;========================================:
   416                              <1> diskReset:         ;ah = 0Dh
   417                              <1> ;Flush all dirty buffers to disk
   418 00006A8F E8A0FEFFFF          <1>     call dosCrit1Enter
   419 00006A94 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   420                              <1> .drCheckBuffer:
   421 00006A9B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   422 00006A9F 7407                <1>     jz .drGotoNextBuffer
   423                              <1> .drFlushBuffer:
   424 00006AA1 E89899FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   425 00006AA6 720C                <1>     jc .drExit
   426                              <1> .drGotoNextBuffer:
   427 00006AA8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   428 00006AAB 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   429 00006AB2 75E7                <1>     jne .drCheckBuffer
   430                              <1> .drExit:
   431 00006AB4 E885FEFFFF          <1>     call dosCrit1Exit
   432 00006AB9 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   433 00006ABE CD4F                <1>     int 4fh
   434                              <1>     return
    18                              <2> %%_ret:
    19 00006AC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> selectDisk:        ;ah = 0Eh
   437                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   438 00006AC1 88D0                <1>     mov al, dl
   439 00006AC3 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   440 00006AC5 E833FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   441 00006ACA 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   442 00006ACC 8805(26C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   443                              <1> .skipSettingCurrent:
   444 00006AD2 0FB605(7EC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   445                              <1>     return
    18                              <2> %%_ret:
    19 00006AD9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   448 00006ADA 8A05(26C40300)      <1>     mov al, byte [currentDrv]
   449                              <1>     return
    18                              <2> %%_ret:
    19 00006AE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> FATinfoDefault:    ;ah = 1Bh
   452 00006AE1 30D2                <1>     xor dl, dl
   453                              <1> FATinfoDevice:     ;ah = 1Ch
   454                              <1> ;Input: dl = 1 based drive number
   455                              <1> ;Output:
   456                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   457                              <1> ;cx = bytes per sector
   458                              <1> ;edx = total number of clusters
   459                              <1> ;rbx = Ptr to media ID byte
   460 00006AE3 88D0                <1>     mov al, dl  ;Move drive number into al
   461 00006AE5 E87CFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   462 00006AEA 7307                <1>     jnc .fidCDSFound
   463 00006AEC B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   464 00006AF1 EB2E                <1>     jmp short .error 
   465                              <1> .fidCDSFound:
   466 00006AF3 E88FF9FFFF          <1>     call getDiskData
   467 00006AF8 7227                <1>     jc .error
   468                              <1> ;Now we have that:
   469                              <1> ;al = sectors per cluster
   470                              <1> ;ah = media ID byte
   471                              <1> ;ebx = total clusters
   472                              <1> ;cx = bytes per sector
   473                              <1> ;edx = number of available clusters
   474 00006AFA E8DAF9FFFF          <1>     call getUserRegs
   475 00006AFF 8825(86C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   476 00006B05 30E4                <1>     xor ah, ah
   477 00006B07 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   478 00006B0A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   479 00006B0E 488D1D(86C70300)    <1>     lea rbx, mediaByte
   480 00006B15 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   481 00006B19 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   482                              <1> .badExit:
   483 00006B1D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   484                              <1>     return
    18                              <2> %%_ret:
    19 00006B20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> .error:
   486 00006B21 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   487 00006B26 66B8FFFF            <1>     mov ax, -1
   488 00006B2A EBF1                <1>     jmp short .badExit
   489                              <1> 
   490                              <1> setIntVector:      ;ah = 25h
   491                              <1> ;Called with:
   492                              <1> ;   rdx = Pointer to interrupt handler
   493                              <1> ;   al = Interrupt number
   494 00006B2C 50                  <1>     push rax    ;Preserve all registers in call
   495 00006B2D 53                  <1>     push rbx
   496 00006B2E 51                  <1>     push rcx
   497 00006B2F 52                  <1>     push rdx
   498 00006B30 56                  <1>     push rsi
   499 00006B31 55                  <1>     push rbp
   500 00006B32 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   501 00006B34 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   502                              <1> ;First call to get default BIOS segement selector and attribute word
   503 00006B3A 88C3                <1>     mov bl, al  ;Set interrupt number 
   504 00006B3C B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   505 00006B41 CD35                <1>     int 35h
   506 00006B43 E891F9FFFF          <1>     call getUserRegs
   507 00006B48 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   508 00006B4C 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   509 00006B4E 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   510                              <1> ;dx preserves the attribute word
   511 00006B50 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   512 00006B55 CD35                <1>     int 35h
   513 00006B57 5D                  <1>     pop rbp
   514 00006B58 5E                  <1>     pop rsi
   515 00006B59 5A                  <1>     pop rdx
   516 00006B5A 59                  <1>     pop rcx
   517 00006B5B 5B                  <1>     pop rbx
   518 00006B5C 58                  <1>     pop rax
   519                              <1>     return
    18                              <2> %%_ret:
    19 00006B5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   522 00006B5E 8805(C5C30300)      <1>     mov byte [verifyFlag], al
   523 00006B64 8025(C5C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   524                              <1>     return
    18                              <2> %%_ret:
    19 00006B6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   525                              <1> getDOSversion:     ;ah = 30h
   526 00006B6C E868F9FFFF          <1>     call getUserRegs
   527 00006B71 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   528 00006B73 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   529 00006B76 668B058394FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   530 00006B7D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   531                              <1>     return
    18                              <2> %%_ret:
    19 00006B80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   534                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   535 00006B81 30D2                <1>     xor dl, dl
   536                              <1> getDeviceDPBptr:   ;ah = 32h
   537                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   538                              <1> ;On exit: rbx = DPB pointer
   539 00006B83 88D0                <1>     mov al, dl
   540 00006B85 E8DCF9FFFF          <1>     call getCDS
   541 00006B8A 722C                <1>     jc .bad
   542 00006B8C 488B3D(02C70300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   543 00006B93 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   544 00006B99 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   545                              <1>     ;Here ONLY if accessing critical Disk data structures
   546 00006B9B E894FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   547 00006BA0 E88EF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   548 00006BA5 E894FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   549 00006BAA 720C                <1>     jc .bad
   550 00006BAC E828F9FFFF          <1>     call getUserRegs
   551 00006BB1 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   552 00006BB5 30C0                <1>     xor al, al
   553                              <1>     return
    18                              <2> %%_ret:
    19 00006BB7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   554                              <1> .bad:
   555 00006BB8 B0FF                <1>     mov al, -1
   556                              <1>     return
    18                              <2> %%_ret:
    19 00006BBA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getInDOSflagPtr:   ;ah = 34h
   559 00006BBB 488D15(FDC30300)    <1>     lea rdx, inDOS
   560 00006BC2 E812F9FFFF          <1>     call getUserRegs
   561 00006BC7 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   562                              <1>     return
    18                              <2> %%_ret:
    19 00006BCB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> getIntVector:      ;ah = 35h
   565                              <1> ;Called with:
   566                              <1> ;   al = Interrupt Number
   567                              <1> ;Returns:
   568                              <1> ;   rbx = Pointer to interrupt handler
   569 00006BCC E8FAF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   570 00006BD1 E803F9FFFF          <1>     call getUserRegs
   571 00006BD6 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   572 00006BDA 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   573                              <1>     return
    18                              <2> %%_ret:
    19 00006BDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> getDiskFreeSpace:  ;ah = 36h
   576                              <1> ;Input: Drive number in dl (0 = Current)
   577                              <1> ;Output:    ax = sectors per cluster
   578                              <1> ;           ebx = number of free clusters
   579                              <1> ;           cx = bytes per sector
   580                              <1> ;           edx = total clusters on drive
   581 00006BDD 88D0                <1>     mov al, dl
   582 00006BDF E882F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   583 00006BE4 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   584                              <1> ;Else, we at an error.
   585                              <1> ;Simply return with CY set and error code in al with extended error info
   586 00006BE6 B80F000000          <1>     mov eax, errBadDrv
   587 00006BEB E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   588                              <1>     ;extErrExit sets rsi to caller regs
   589 00006BF0 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   590                              <1>     return
    18                              <2> %%_ret:
    19 00006BF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   591                              <1> .gdfsCDSFound:
   592 00006BF6 E88CF8FFFF          <1>     call getDiskData
   593 00006BFB 7219                <1>     jc .error
   594                              <1> ;Now we have that:
   595                              <1> ;al = sectors per cluster
   596                              <1> ;ah = media ID byte
   597                              <1> ;ebx = total clusters
   598                              <1> ;cx = bytes per sector
   599                              <1> ;edx = number of available clusters
   600 00006BFD E8D7F8FFFF          <1>     call getUserRegs
   601 00006C02 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   602 00006C04 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   603 00006C07 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   604 00006C0B 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   605 00006C0E 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   606                              <1> .badExit:
   607 00006C12 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   608                              <1>     return
    18                              <2> %%_ret:
    19 00006C15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> .error:
   610 00006C16 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   611 00006C1B 66B8FFFF            <1>     mov ax, -1
   612 00006C1F EBF1                <1>     jmp short .badExit
   613                              <1> 
   614                              <1> 
   615                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   616 00006C21 31C0                <1>     xor eax, eax
   617 00006C23 668705(24C40300)    <1>     xchg ax, word [errorLevel]
   618 00006C2A E942FDFFFF          <1>     jmp extGoodExit
   619                              <1> 
   620                              <1> getSysVarsPtr:     ;ah = 52h
   621 00006C2F 488D15(41C00300)    <1>     lea rdx, sysVarsPtr
   622 00006C36 E89EF8FFFF          <1>     call getUserRegs
   623 00006C3B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   624                              <1>     return
    18                              <2> %%_ret:
    19 00006C3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   625                              <1> 
   626                              <1> 
   627                              <1> ;AH = 53h - CREATE DPB
   628                              <1> createDPB:         ;generates a DPB from a given BPB
   629                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   630                              <1> ;This is done so that the other fields of the DPB can be recycled
   631                              <1> ;Input: rsi = ptr to the BPB
   632                              <1> ;       rbp = ptr to the DPB
   633                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   634                              <1> ;bMediaDescriptor
   635 00006C40 8A4615              <1>     mov al, byte [rsi + bpb.media]
   636 00006C43 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   637                              <1> ;dFirstFreeCluster
   638 00006C46 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   639                              <1> ;dNumberOfFreeClusters
   640 00006C4D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   641                              <1> ;wBytesPerSector
   642 00006C54 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   643 00006C58 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   644                              <1> ;bMaxSectorInCluster
   645 00006C5C 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   646 00006C5F FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   647 00006C61 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   648                              <1> ;bSectorsPerClusterShift
   649 00006C64 FEC0                <1>     inc al
   650 00006C66 30C9                <1>     xor cl, cl
   651                              <1> .cd2:
   652 00006C68 D0E8                <1>     shr al, 1
   653 00006C6A 7404                <1>     jz .cd3
   654 00006C6C FEC1                <1>     inc cl
   655 00006C6E EBF8                <1>     jmp short .cd2
   656                              <1> .cd3:
   657 00006C70 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   658                              <1> ;wFAToffset, number of reserved sectors in partition
   659 00006C73 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   660 00006C77 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   661                              <1> ;bNumberOfFATs
   662 00006C7B 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   663 00006C7E 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   664                              <1> ;wNumberRootDirEntries
   665                              <1> ;Gets the number of 32 byte entries in the root directory
   666                              <1> ;Only valid for FAT 12/16
   667 00006C81 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   668 00006C85 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   669                              <1> ;dFATlength, get the FAT length
   670 00006C89 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   671 00006C8D 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   672 00006C90 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   673 00006C92 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   674 00006C95 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   675                              <1> ;Complex cases below...
   676                              <1> ;dClusterHeapOffset, start sector of the data area
   677 00006C98 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   678 00006C9C 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   679 00006C9F 85C0                <1>     test eax, eax
   680 00006CA1 0F44C3              <1>     cmovz eax, ebx
   681                              <1> ;eax = FATsz
   682 00006CA4 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   683 00006CA8 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   684 00006CAB 85DB                <1>     test ebx, ebx
   685 00006CAD 0F44D9              <1>     cmovz ebx, ecx 
   686                              <1> ;ebx = TotSec
   687 00006CB0 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   688 00006CB3 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   689                              <1> .cd4:
   690 00006CB5 01C2                <1>     add edx, eax
   691 00006CB7 FEC9                <1>     dec cl
   692 00006CB9 75FA                <1>     jnz .cd4
   693 00006CBB 89D0                <1>     mov eax, edx    ;Store product in eax
   694 00006CBD 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   695 00006CC1 01D0                <1>     add eax, edx
   696                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   697 00006CC3 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   698 00006CC7 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   699 00006CCA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   700 00006CCE 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   701 00006CCF 89D0                <1>     mov eax, edx
   702 00006CD1 31D2                <1>     xor edx, edx
   703 00006CD3 F7F1                <1>     div ecx
   704 00006CD5 89C2                <1>     mov edx, eax
   705 00006CD7 58                  <1>     pop rax
   706 00006CD8 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   707                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   708                              <1>     ;aka eax = Start sector of the data area in volume
   709 00006CDA 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   710                              <1> ;dClusterCount
   711 00006CDD 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   712 00006CDF 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   713 00006CE1 31D2                <1>     xor edx, edx
   714 00006CE3 BB01000000          <1>     mov ebx, 1
   715 00006CE8 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   716 00006CEB D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   717 00006CED F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   718 00006CEF FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   719 00006CF1 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   720                              <1> ;dFirstUnitOfRootDir
   721 00006CF4 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   722 00006CF9 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   723 00006CFC 770F                <1>     ja .cd5
   724                              <1>     ;Else, we need to find the first sector of the root directory
   725                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   726 00006CFE 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   727 00006D02 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   728                              <1> .cd51:
   729 00006D06 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   730 00006D09 FFC9                <1>     dec ecx
   731 00006D0B 75F9                <1>     jnz .cd51
   732                              <1> .cd5:
   733 00006D0D 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   734 00006D10 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   735                              <1> ;Exit epilogue
   736 00006D14 488B1D(6FC40300)    <1>     mov rbx, qword [oldRSP]
   737 00006D1B 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   738                              <1>     %if DEBUG && DPBINFO
   739                              <1>     ;Print DPB 
   740                              <1>     debugEnterM
   741                              <1>     push rbp
   742                              <1>     lea rbp, .l0000
   743                              <1>     call debPrintNullString
   744                              <1>     pop rbp
   745                              <1>     call debDPBBPBptr
   746                              <1>     call debMakeDebuggerRespond
   747                              <1>     jmp short .l0001
   748                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   749                              <1> .l0001:
   750                              <1>     debugExitM
   751                              <1>     %endif
   752                              <1>     return
    18                              <2> %%_ret:
    19 00006D1D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   753                              <1> 
   754                              <1> getVerifySetting:  ;ah = 54h
   755 00006D1E 8A05(C5C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   756                              <1>     return
    18                              <2> %%_ret:
    19 00006D24 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> getExtendedError:  ;ah = 59h
   759 00006D25 E8AFF7FFFF          <1>     call getUserRegs
   760 00006D2A 668B05(00C40300)    <1>     mov ax, word [errorExCde]
   761 00006D31 8A2D(FFC30300)      <1>     mov ch, byte [errorLocus]
   762 00006D37 8A3D(03C40300)      <1>     mov bh, byte [errorClass]
   763 00006D3D 8A1D(02C40300)      <1>     mov bl, byte [errorAction]
   764 00006D43 668906              <1>     mov word [rsi + callerFrame.rax], ax
   765 00006D46 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   766 00006D4A 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   767                              <1>     return
    18                              <2> %%_ret:
    19 00006D4D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   768                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   769                              <1> noOp:
   770                              <1>     return
    18                              <2> %%_ret:
    19 00006D4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                                  %include "./Source/Kernel/Net/server.asm"
    44                              <1> ;Network functions here
    45                              <1> 
    46                              <1> dosServer:  ;ah = 5Dh
    47                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    48                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    49                              <1> ;   rdx = Pointer to DPL
    50 00006D4F 3C07                <1>     cmp al, 07h
    51 00006D51 7204                <1>     jb .skip
    52 00006D53 3C09                <1>     cmp al, 09h
    53 00006D55 7619                <1>     jbe .skip2
    54                              <1> .skip:
    55 00006D57 4889D6              <1>     mov rsi, rdx
    56 00006D5A 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    57 00006D5E 66891D(38C40300)    <1>     mov word [machineNum], bx
    58 00006D65 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    59 00006D69 48891D(30C40300)    <1>     mov qword [serverPSP], rbx
    60                              <1> .skip2:
    61 00006D70 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    62 00006D77 53                  <1>     push rbx
    63 00006D78 488B1D(83DA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    64 00006D7F 53                  <1>     push rbx    ;Push the table ptr on the stack
    65 00006D80 50                  <1>     push rax    ;Push al onto stack as a qword
    66 00006D81 E856010000          <1>     call serverFunctionSelect
    67 00006D86 B801000000          <1>     mov eax, eLocUnk
    68 00006D8B 8805(FFC30300)      <1>     mov byte [errorLocus], al
    69 00006D91 E9E9FBFFFF          <1>     jmp extErrExit
    70                              <1> 
    71                              <1> serverDispatch: ;AX=5D00h
    72                              <1> ;Input: rsi points to the DOS parameter list
    73 00006D96 58                  <1>     pop rax ;Pop additional return ptr off the stack
    74 00006D97 56                  <1>     push rsi    ;Put dpl ptr in rdi
    75 00006D98 5F                  <1>     pop rdi
    76 00006D99 E83BF7FFFF          <1>     call getUserRegs
    77 00006D9E 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    78 00006DA1 56                  <1>     push rsi
    79 00006DA2 B906000000          <1>     mov ecx, 6
    80 00006DA7 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    81 00006DAA 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    82 00006DB1 48A5                <1>     movsq   ;Transfer r8...
    83 00006DB3 48A5                <1>     movsq   ;... and r9
    84 00006DB5 5E                  <1>     pop rsi
    85 00006DB6 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    86 00006DB9 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    87 00006DBD 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    88 00006DC1 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    89 00006DC5 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    90 00006DC9 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    91 00006DCD 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    92 00006DD1 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    93 00006DD5 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    94 00006DDC C605(F2C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    95 00006DE3 E946FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    96                              <1> 
    97                              <1> commitAllFilesForProcess:   ;AX=5D01h
    98                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    99                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
   100                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
   101                              <1> ;If so, we proceed, otherwise, fail with AccDen
   102 00006DE8 488B1D(14C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
   103 00006DEF 66813BCD40          <1>     cmp word [rbx], 40CDh
   104 00006DF4 740A                <1>     je .validTask
   105 00006DF6 B805000000          <1>     mov eax, errAccDen
   106 00006DFB E97FFBFFFF          <1>     jmp extErrExit
   107                              <1> .validTask:
   108 00006E00 31DB                <1>     xor ebx, ebx    ;Start from file 0
   109 00006E02 E82DFBFFFF          <1>     call dosCrit1Enter
   110                              <1> .mainLoop:
   111                              <1>     ;Now loop through the JFT of the current task committing the files
   112 00006E07 53                  <1>     push rbx
   113 00006E08 E8F5D7FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
   114 00006E0D 7227                <1>     jc .exit
   115 00006E0F 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
   116 00006E14 741B                <1>     je .gotoNextFile
   117 00006E16 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
   118 00006E1B 7414                <1>     je .gotoNextFile
   119 00006E1D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
   120 00006E23 750C                <1>     jnz .gotoNextFile
   121 00006E25 48893D(22C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
   122 00006E2C E8B6C5FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
   123                              <1>     ;If it succeeded, great, cool also if not, keep going!
   124                              <1> .gotoNextFile:
   125 00006E31 5B                  <1>     pop rbx
   126 00006E32 FFC3                <1>     inc ebx
   127 00006E34 EBD1                <1>     jmp short .mainLoop
   128                              <1> .exit:
   129 00006E36 E803FBFFFF          <1>     call dosCrit1Exit
   130 00006E3B 5B                  <1>     pop rbx ;Align stack
   131 00006E3C E930FBFFFF          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> closeFilesByName:           ;AX=5D02h
   134 00006E41 FF15(DCC00300)      <1>     call qword [closeNameShare]
   135                              <1> .shareExit: ;Use this symbol if we need a decision to be made
   136                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
   137 00006E47 0F8232FBFFFF        <1>     jc extErrExit
   138                              <1> .shareExitGood:
   139 00006E4D E91FFBFFFF          <1>     jmp extGoodExit
   140                              <1> 
   141                              <1> closeFilesByComputer:       ;AX=5D03h
   142 00006E52 FF15(CCC00300)      <1>     call qword [closeCompShare]
   143 00006E58 EBED                <1>     jmp short closeFilesByName.shareExit
   144                              <1> 
   145                              <1> closeFilesByProcess:        ;AX=5D04h
   146 00006E5A FF15(D4C00300)      <1>     call qword [closeTaskShare]
   147 00006E60 EBE5                <1>     jmp short closeFilesByName.shareExit
   148                              <1> 
   149                              <1> getOpenFileListEntry:       ;AX=5D05h
   150 00006E62 FF15(FCC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   151 00006E68 72DD                <1>     jc closeFilesByName.shareExitBad
   152 00006E6A E86AF6FFFF          <1>     call getUserRegs
   153 00006E6F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   154 00006E73 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   155                              <1> .shareExit:    ;rcx must be zero extended however to use this
   156 00006E77 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   157                              <1> .shareExit2:
   158 00006E7B EBD0                <1>     jmp short closeFilesByName.shareExitGood
   159                              <1> 
   160                              <1> getSDAData:                 ;AX=5D06h
   161                              <1> ;Returns:
   162                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   163                              <1> ;   (critical error flag is first byte) (see #01687)
   164                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   165                              <1> ;   rdx = size in bytes of area which must always be swapped
   166 00006E7D 488D3D(FCC30300)    <1>     lea rdi, sda
   167 00006E84 48B987160000000000- <1>     mov rcx, sdaLen
   167 00006E8D 00                  <1>
   168 00006E8E 48BA5B160000000000- <1>     mov rdx, sdaMSLen
   168 00006E97 00                  <1>
   169 00006E98 E83CF6FFFF          <1>     call getUserRegs
   170 00006E9D 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   171 00006EA1 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   172 00006EA5 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   173                              <1> 
   174                              <1> printerRedir:               ;AX=5D07/8/9h
   175 00006EA7 50                  <1>     push rax
   176 00006EA8 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   177 00006EAD CD4F                <1>     int 4Fh
   178 00006EAF 5B                  <1>     pop rbx
   179 00006EB0 7295                <1>     jc short closeFilesByName.shareExitBad
   180 00006EB2 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   181                              <1> 
   182                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   183                              <1> ;Input:
   184                              <1> ;   rsi -> DPL
   185 00006EB4 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   186 00006EB6 668905(00C40300)    <1>     mov word [errorExCde], ax
   187 00006EBD 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   188 00006EC1 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   189 00006EC8 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   190 00006ECB 668905(02C40300)    <1>     mov word [errorAction], ax  ;Store action and class together
   191 00006ED2 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   192 00006ED5 8825(FFC30300)      <1>     mov byte [errorLocus], ah
   193                              <1>     return  ;Return to the function ptr on the stack (the return function)
    18                              <2> %%_ret:
    19 00006EDB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> serverFunctionSelect:
   196                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   197                              <1> ;Second parameter is table address, (BP + 3*8)
   198 00006EDC 55                  <1>     push rbp
   199 00006EDD 4889E5              <1>     mov rbp, rsp
   200 00006EE0 53                  <1>     push rbx
   201 00006EE1 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   202 00006EE5 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   203 00006EE8 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   204 00006EEB 731E                <1>     jnb .argumentTooBig
   205 00006EED 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   206 00006EF1 C1E302              <1>     shl ebx, 2  ;Convert to word offset
   207 00006EF4 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   208 00006EF6 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   209 00006EF9 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   210 00006EFD 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   211 00006F01 5B                  <1>     pop rbx
   212 00006F02 5D                  <1>     pop rbp
   213 00006F03 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   214                              <1>     return
    18                              <2> %%_ret:
    19 00006F0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> .argumentTooBig:
   216 00006F0B 5B                  <1>     pop rbx
   217 00006F0C 5D                  <1>     pop rbp
   218 00006F0D C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   219                              <1> 
   220                              <1> netServices:   ;ah = 5Eh, do nothing
   221                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   222 00006F10 3C01                <1>     cmp al, 01
   223 00006F12 7214                <1>     jb .getName
   224 00006F14 7437                <1>     jz .setName
   225 00006F16 3C06                <1>     cmp al, 6
   226 00006F18 724C                <1>     jb .netRedir
   227 00006F1A C605(FFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   228 00006F21 B001                <1>     mov al, errInvFnc
   229                              <1> .badExit:
   230 00006F23 E957FAFFFF          <1>     jmp extErrExit
   231                              <1> .getName:
   232                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   233                              <1> ;Output: CF=NC => Success.
   234                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   235                              <1> ;        CL = NetBIOS number for the machine
   236                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   237                              <1> ;        CF=CY => Failure
   238                              <1> ;        AX = Errorcode
   239 00006F28 4889D7              <1>     mov rdi, rdx
   240 00006F2B 0FB70D(23C00300)    <1>     movzx ecx, word [validNetNam]
   241 00006F32 E8A2F5FFFF          <1>     call getUserRegs
   242 00006F37 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   243 00006F3B 488D35(CBC30300)    <1>     lea rsi, machineName
   244                              <1> .nameCmn:
   245 00006F42 31C0                <1>     xor eax, eax
   246 00006F44 48A5                <1>     movsq
   247 00006F46 A5                  <1>     movsd
   248 00006F47 66A5                <1>     movsw
   249 00006F49 A4                  <1>     movsb
   250 00006F4A AA                  <1>     stosb   ;Store terminating null
   251 00006F4B EB24                <1>     jmp short .exitGood
   252                              <1> .setName:
   253                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   254                              <1> ;       CH = 0 => Mark name as invalid
   255                              <1> ;         != 0 => Mark name as valid
   256                              <1> ;       CL = NetBIOS number for the name
   257 00006F4D 66890D(23C00300)    <1>     mov word [validNetNam], cx
   258 00006F54 4889D6              <1>     mov rsi, rdx
   259 00006F57 FE05(CAC30300)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   260 00006F5D 488D3D(CBC30300)    <1>     lea rdi, machineName
   261 00006F64 EBDC                <1>     jmp short .nameCmn
   262                              <1> 
   263                              <1> .netRedir:
   264 00006F66 50                  <1>     push rax
   265 00006F67 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   266 00006F6C CD4F                <1>     int 4Fh
   267 00006F6E 5A                  <1>     pop rdx
   268 00006F6F 72B2                <1>     jc .badExit
   269                              <1> .exitGood:
   270 00006F71 E9FBF9FFFF          <1>     jmp extGoodExit
   271                              <1> 
   272                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   273                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   274 00006F76 80FC07              <1>     cmp ah, 07h
   275 00006F79 7419                <1>     je .driveAction
   276 00006F7B 80FC08              <1>     cmp ah, 08h
   277 00006F7E 7414                <1>     je .driveAction
   278                              <1>     ;Else, use redirector to process request
   279 00006F80 50                  <1>     push rax
   280 00006F81 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   281 00006F86 CD4F                <1>     int 4Fh
   282 00006F88 5B                  <1>     pop rbx
   283                              <1> .badExit:
   284 00006F89 0F82F0F9FFFF        <1>     jc extErrExit
   285                              <1> .goodExit:
   286 00006F8F E9DDF9FFFF          <1>     jmp extGoodExit
   287                              <1> .driveAction:
   288                              <1> ;dl must have valid 0-based drive number
   289 00006F94 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   290 00006F96 E826F6FFFF          <1>     call getCDSforDrive
   291 00006F9B 72EC                <1>     jc short .badExit
   292                              <1>     ;rsi points to CDS
   293 00006F9D 80EA07              <1>     sub dl, 7
   294 00006FA0 7408                <1>     jz .enable
   295 00006FA2 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   296 00006FA8 EBE5                <1>     jmp short .goodExit
   297                              <1> .enable:
   298 00006FAA 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   299 00006FB0 EBDD                <1>     jmp short .goodExit
    44                                  %include "./Source/Kernel/Net/multiplx.asm"
    45                              <1> ;Default multiplexer. Current only installed function is ah=12h
    46                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
    47                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    48                              <1> ; stack before the interrupt is called. This word is always read from the
    49                              <1> ; stack, but the stack is not rejiggled to remove it
    50                              <1> 
    51                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    52 00006FB2 80FC12              <1>     cmp ah, 12h
    53 00006FB5 7546                <1>     jne .exitBad       ;Exit if not for us
    54 00006FB7 3C26                <1>     cmp al, mDispTblL / 2
    55 00006FB9 7342                <1>     jae .exitBad   ;If above or equal, exit
    56 00006FBB 53                  <1>     push rbx
    57 00006FBC 51                  <1>     push rcx
    58 00006FBD 488D1DE593FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    59 00006FC4 53                  <1>     push rbx
    60 00006FC5 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00006FC8 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Pick the word pushed on the stack before call 
    62 00006FCD D1E1                <1>     shl ecx, 1   ;multiply by 2
    63 00006FCF 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00006FD3 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00006FD4 4801CB              <1>     add rbx, rcx
    66 00006FD7 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    67 00006FDE 59                  <1>     pop rcx
    68 00006FDF 5B                  <1>     pop rbx
    69 00006FE0 FF15(77C40300)      <1>     call qword [oldRBX]
    70 00006FE6 48891D(77C40300)    <1>     mov qword [oldRBX], rbx
    71 00006FED 9C                  <1>     pushfq  ;Move flags on the stack
    72 00006FEE 5B                  <1>     pop rbx
    73 00006FEF 48895C2410          <1>     mov qword [rsp + 8*2], rbx  ;Replace entry flags with our own flags
    74 00006FF4 488B1D(77C40300)    <1>     mov rbx, qword [oldRBX]
    75 00006FFB 48CF                <1>     iretq
    76                              <1> .exitBad:
    77 00006FFD 804C241001          <1>     or byte [rsp + 8h*2], 1
    78 00007002 48CF                <1>     iretq
    79                              <1> multiplexTest:
    80 00007004 B0FF                <1>     mov al, -1
    81 00007006 C3                  <1>     ret
    82                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    83                              <1> ;Return: r8 = Dos Data Segment Pointer
    84 00007007 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    85                              <1>     return
    18                              <2> %%_ret:
    19 0000700E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    45                                  %include "./Source/Kernel/Net/share.asm"
    46                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
    47                              <1> 
    48                              <1> ;Generic Share Hooks and Wrappers
    49                              <1> shareBadFunction:
    50 0000700F B801000000          <1>     mov eax, errInvFnc
    51 00007014 668905(00C40300)    <1>     mov word [errorExCde], ax
    52 0000701B F9                  <1>     stc
    53                              <1>     return
    18                              <2> %%_ret:
    19 0000701C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> badDfltShareHook:
    55                              <1> ;Return CF=CY
    56 0000701D E8EDFFFFFF          <1>     call shareBadFunction
    57                              <1>     return
    18                              <2> %%_ret:
    19 00007022 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> goodDfltShareHook:
    59                              <1> ;Return CF=NC
    60 00007023 F8                  <1>     clc
    61                              <1>     return
    18                              <2> %%_ret:
    19 00007024 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> openShareCallWrapper:
    63 00007025 FF15(BCC00300)      <1>     call qword [openShare]
    64                              <1>     return
    18                              <2> %%_ret:
    19 0000702B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> closeShareCallWrapper:
    66 0000702C FF15(C4C00300)      <1>     call qword [closeShare]
    67                              <1>     return
    18                              <2> %%_ret:
    19 00007032 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> retryShareIODelay:
    70                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    71                              <1> ;Called only in readDiskFile and writeDiskFile
    72                              <1> ;Input: rdi -> SFT for current file
    73                              <1> ;       ecx = Length of region from current position in file
    74                              <1> ;Output: If CF=NC, not locked
    75                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    76 00007033 0FB71D(25C00300)    <1>     movzx ebx, word [shareCount]
    77                              <1> .mainLoop:      
    78 0000703A 53                  <1>     push rbx
    79 0000703B FF15(F4C00300)      <1>     call qword [checkFileLockShare]
    80 00007041 5B                  <1>     pop rbx
    81                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007042 73EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    82 00007044 E806000000          <1>     call shareRetryCountdown
    83 00007049 FFCB                <1>     dec ebx
    84 0000704B 75ED                <1>     jnz .mainLoop
    85 0000704D F9                  <1>     stc
    86                              <1>     return
    18                              <2> %%_ret:
    19 0000704E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> shareRetryCountdown:
    89                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    90                              <1> ;Does the retry wait IFF the request was not a server request.
    91 0000704F F605(F2C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    92                              <1>     retnz   ;Exit by default if it is a server call
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007056 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    93 00007058 51                  <1>     push rcx
    94 00007059 0FB70D(27C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    95 00007060 67E30D              <1>     jecxz .exit
    96                              <1> .loopBody:
    97 00007063 51                  <1>     push rcx
    98 00007064 31C9                <1>     xor ecx, ecx
    99                              <1> .mainLoop:
   100 00007066 66FFC9              <1>     dec cx
   101 00007069 75FB                <1>     jnz .mainLoop
   102 0000706B 59                  <1>     pop rcx
   103 0000706C FFC9                <1>     dec ecx
   104 0000706E 75F3                <1>     jnz .loopBody
   105                              <1> .exit:
   106 00007070 59                  <1>     pop rcx
   107                              <1>     return
    18                              <2> %%_ret:
    19 00007071 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> shareCheckOpenViolation:
   110                              <1> ;Input: rdi -> Locally complete SFT we are opening
   111 00007072 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   112 00007078 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   113 0000707A 50                  <1>     push rax
   114 0000707B 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   115 0000707F 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   116 00007084 58                  <1>     pop rax
   117 00007085 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   118                              <1> .fcbQuirk:
   119 00007087 E83B000000          <1>     call shareLockViolationCriticalError
   120                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000708C 73E3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   121                              <1> .notInCompatMode:
   122 0000708E B820000000          <1>     mov eax, errShrVio
   123 00007093 F9                  <1>     stc ;Set the flag for error
   124                              <1>     return
    18                              <2> %%_ret:
    19 00007094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> 
   127                              <1> 
   128                              <1> shareFile:
   129                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
   130                              <1> ; share the file, if it is possible to do so!
   131                              <1> ; This is done by calling the open wrapper
   132 00007095 51                  <1>     push rcx
   133                              <1> .reloadCounter:
   134 00007096 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
   135                              <1> .keepLooping:
   136 0000709D 488B3D(22C70300)    <1>     mov rdi, qword [currentSFT]
   137 000070A4 31C0                <1>     xor eax, eax
   138 000070A6 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
   139 000070AC 51                  <1>     push rcx
   140 000070AD E873FFFFFF          <1>     call openShareCallWrapper
   141 000070B2 59                  <1>     pop rcx
   142 000070B3 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
   143 000070B5 E895FFFFFF          <1>     call shareRetryCountdown
   144 000070BA FFC9                <1>     dec ecx
   145 000070BC 75DF                <1>     jnz .keepLooping
   146 000070BE E827000000          <1>     call shareCriticalError
   147 000070C3 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   148                              <1> .exit:
   149 000070C5 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 000070C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> shareLockViolationCriticalError:
   153                              <1> ;This does NOT force rwFlag to 0.
   154 000070C7 57                  <1>     push rdi
   155 000070C8 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   156 000070CF B821000000          <1>     mov eax, errLokVio
   157 000070D4 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   158                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   159 000070DB E872EAFFFF          <1>     call fullcriticalErrorInvoke
   160 000070E0 5F                  <1>     pop rdi
   161 000070E1 3D01000000          <1>     cmp eax, critRetry
   162                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000070E6 74DE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   163 000070E8 F9                  <1>     stc
   164                              <1>     return
    18                              <2> %%_ret:
    19 000070E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   167                              <1> ;Used for share Read/Write requests
   168 000070EA 57                  <1>     push rdi
   169 000070EB C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   170 000070F2 C605(5CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   171 000070F9 488B2D(FAC60300)    <1>     mov rbp, qword [workingDPB]
   172 00007100 BF01000000          <1>     mov edi, 1
   173                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   174 00007105 E848EAFFFF          <1>     call fullcriticalErrorInvoke
   175 0000710A 5F                  <1>     pop rdi
   176 0000710B 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   177                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000710D 74DA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   178 0000710F F9                  <1>     stc
   179                              <1>     return
    18                              <2> %%_ret:
    19 00007110 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> 
   181                              <1> shareReadWriteViolationError:
   182                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   183 00007111 3C0F                <1>     cmp al, drvBadDskChnge
   184 00007113 7510                <1>     jne .doReq
   185 00007115 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   186 00007116 488B05(D7C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   187 0000711D 488905(04C40300)    <1>     mov qword [xInt44RDI], rax
   188 00007124 58                  <1>     pop rax
   189                              <1> .doReq:
   190 00007125 E828EAFFFF          <1>     call fullcriticalErrorInvoke
   191                              <1>     return
    18                              <2> %%_ret:
    19 0000712A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> shareCheckWriteLockViolation:
   194 0000712B C605(F0C60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   195 00007132 EB07                <1>     jmp short shareCheckReadLockViolation.common
   196                              <1> shareCheckReadLockViolation:
   197 00007134 C605(F0C60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   198                              <1> .common:
   199                              <1> ;Input:
   200                              <1> ;rdi -> SFT for the file we are reading
   201 0000713B 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   202 00007141 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   203 00007143 50                  <1>     push rax
   204 00007144 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   205 00007148 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   206 0000714D 58                  <1>     pop rax
   207 0000714E 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   208                              <1> .fcbQuirk:
   209 00007150 E872FFFFFF          <1>     call shareLockViolationCriticalError
   210                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007155 73D3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   211                              <1> .notInCompatMode:
   212 00007157 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   213 00007159 B821000000          <1>     mov eax, errLokVio
   214 0000715E F9                  <1>     stc ;Set the flag for error
   215                              <1>     return
    18                              <2> %%_ret:
    19 0000715F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                                  %include "./Source/Drivers/drvData.asm"
    47                              <1> ;-----------------------------------:
    48                              <1> ;          Driver routines          :
    49                              <1> ;-----------------------------------:
    50                              <1> drivers:
    51                              <1> conHdr:
    52 00007160 [8271000000000000]  <1>     dq auxHdr
    53 00007168 1380                <1>     dw 08013h
    54 0000716A [0073000000000000]  <1>     dq commonStrat
    55 00007172 [0F73000000000000]  <1>     dq conDriver
    56 0000717A 434F4E2020202020    <1>     db "CON     "
    57                              <1> auxHdr:
    58 00007182 [A471000000000000]  <1>     dq prnHdr
    59 0000718A 0080                <1>     dw 08000h
    60 0000718C [0073000000000000]  <1>     dq commonStrat
    61 00007194 [C475000000000000]  <1>     dq com1Intr
    62 0000719C 4155582020202020    <1>     db "AUX     "
    63                              <1> prnHdr:
    64 000071A4 [C671000000000000]  <1>     dq clkHdr
    65 000071AC 40A0                <1>     dw 0A040h
    66 000071AE [0873000000000000]  <1>     dq nulStrat
    67 000071B6 [0E73000000000000]  <1>     dq nulIntr
    68 000071BE 50524E2020202020    <1>     db "PRN     "
    69                              <1> clkHdr:
    70 000071C6 [E871000000000000]  <1>     dq msdHdr
    71 000071CE 0880                <1>     dw 08008h
    72 000071D0 [0073000000000000]  <1>     dq commonStrat
    73 000071D8 [5C74000000000000]  <1>     dq clkDriver
    74 000071E0 434C4F434B242020    <1>     db "CLOCK$  "
    75                              <1> msdHdr:
    76 000071E8 [0A72000000000000]  <1>     dq com1Hdr
    77 000071F0 4008                <1>     dw 00840h   
    78 000071F2 [0073000000000000]  <1>     dq commonStrat
    79 000071FA [4877000000000000]  <1>     dq msdDriver
    80 00007202 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    81                              <1> com1Hdr:
    82 0000720A [2C72000000000000]  <1>     dq com2Hdr
    83 00007212 0080                <1>     dw 08000h
    84 00007214 [0073000000000000]  <1>     dq commonStrat
    85 0000721C [C475000000000000]  <1>     dq com1Intr
    86 00007224 434F4D3120202020    <1>     db "COM1    "
    87                              <1> com2Hdr:
    88 0000722C [4E72000000000000]  <1>     dq com3Hdr
    89 00007234 0080                <1>     dw 08000h
    90 00007236 [0073000000000000]  <1>     dq commonStrat
    91 0000723E [CD75000000000000]  <1>     dq com2Intr
    92 00007246 434F4D3220202020    <1>     db "COM2    "
    93                              <1> com3Hdr:
    94 0000724E [7072000000000000]  <1>     dq com4Hdr
    95 00007256 0080                <1>     dw 08000h
    96 00007258 [0073000000000000]  <1>     dq commonStrat
    97 00007260 [D675000000000000]  <1>     dq com3Intr
    98 00007268 434F4D3320202020    <1>     db "COM3    "
    99                              <1> com4Hdr:
   100 00007270 [9272000000000000]  <1>     dq lpt1Hdr
   101 00007278 0080                <1>     dw 08000h
   102 0000727A [0073000000000000]  <1>     dq commonStrat
   103 00007282 [DF75000000000000]  <1>     dq com4Intr
   104 0000728A 434F4D3420202020    <1>     db "COM4    "
   105                              <1> lpt1Hdr:
   106 00007292 [B472000000000000]  <1>     dq lpt2Hdr
   107 0000729A 40A0                <1>     dw 0A040h
   108 0000729C [0873000000000000]  <1>     dq nulStrat
   109 000072A4 [0E73000000000000]  <1>     dq nulIntr
   110 000072AC 4C50543120202020    <1>     db "LPT1    "
   111                              <1> lpt2Hdr:
   112 000072B4 [D672000000000000]  <1>     dq lpt3Hdr
   113 000072BC 40A0                <1>     dw 0A040h
   114 000072BE [0873000000000000]  <1>     dq nulStrat
   115 000072C6 [0E73000000000000]  <1>     dq nulIntr
   116 000072CE 4C50543220202020    <1>     db "LPT2    "
   117                              <1> lpt3Hdr:
   118 000072D6 FFFFFFFFFFFFFFFF    <1>     dq -1
   119 000072DE 40A0                <1>     dw 0A040h
   120 000072E0 [0873000000000000]  <1>     dq nulStrat
   121 000072E8 [0E73000000000000]  <1>     dq nulIntr
   122 000072F0 4C50543320202020    <1>     dq "LPT3    "
   123 000072F8 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    47                                  %include "./Source/Drivers/charDrv.asm"
    48                              <1> commonStrat:
    49                              <1> ;DOS calls this function with rbx=Ptr to request header
    50 00007300 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    51 00007307 C3                  <1>     ret
    52                              <1> nulStrat:
    53 00007308 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    54                              <1> nulIntr:
    55 0000730E C3                  <1>     ret
    56                              <1> conDriver:
    57 0000730F 50                  <1>     push rax
    58 00007310 53                  <1>     push rbx
    59 00007311 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    60 00007318 B003                <1>     mov al, 03h ;Unknown Command
    61 0000731A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    62 0000731E 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    63                              <1> 
    64 00007320 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    65 00007323 3C04                <1>     cmp al, 4
    66 00007325 7441                <1>     jz .conRead
    67 00007327 3C05                <1>     cmp al, 5
    68 00007329 0F847F000000        <1>     jz .conNondestructiveRead
    69 0000732F 3C06                <1>     cmp al, 6
    70 00007331 0F84A8000000        <1>     jz .conInputStatus
    71 00007337 3C07                <1>     cmp al, 7
    72 00007339 0F84B0000000        <1>     jz .conFlushInputBuffers
    73 0000733F 3C08                <1>     cmp al, 8
    74 00007341 0F84CA000000        <1>     jz .conWrite
    75 00007347 3C09                <1>     cmp al, 9
    76 00007349 0F84C2000000        <1>     jz .conWrite
    77 0000734F 3C0A                <1>     cmp al, 0Ah
    78 00007351 0F84E3000000        <1>     jz .conOutputStatus
    79 00007357 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    80                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    81 00007359 B480                <1>     mov ah, 80h ;Set error bit
    82 0000735B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    83                              <1> .conExit:
    84 0000735F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    85 00007365 5B                  <1>     pop rbx
    86 00007366 58                  <1>     pop rax
    87 00007367 C3                  <1>     ret
    88                              <1> .conRead:    ;Function 4
    89 00007368 B005                <1>     mov al, 05h ;Bad request structure length?
    90 0000736A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    91 0000736D 75EA                <1>     jne .conWriteErrorCode
    92                              <1> 
    93 0000736F 57                  <1>     push rdi
    94 00007370 51                  <1>     push rcx
    95 00007371 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    96 00007375 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    97                              <1> .cre1:
    98 00007377 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    99 0000737A 741C                <1>     je .cre2
   100 0000737C 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
   101 00007383 751A                <1>     jnz .cre3   ;No, get the buffer value
   102 00007385 31C0                <1>     xor eax, eax
   103 00007387 CD36                <1>     int 36h
   104                              <1> .cre11:
   105 00007389 AA                  <1>     stosb
   106 0000738A 84C0                <1>     test al, al ;Was the ascii code stored 0?
   107 0000738C 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   108 0000738E 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   109                              <1> .cre12:
   110 00007394 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   111 00007396 EBDF                <1>     jmp short .cre1
   112                              <1> .cre2:
   113 00007398 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   114 0000739B 59                  <1>     pop rcx
   115 0000739C 5F                  <1>     pop rdi
   116 0000739D EBC0                <1>     jmp short .conExit
   117                              <1> .cre3:
   118 0000739F 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   119 000073A5 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   120 000073AC EBDB                <1>     jmp short .cre11
   121                              <1> 
   122                              <1> .conNondestructiveRead:  ;Function 5
   123 000073AE B005                <1>     mov al, 05h ;Bad request structure length?
   124 000073B0 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   125 000073B3 75A4                <1>     jne .conWriteErrorCode
   126 000073B5 803D8E00000000      <1>     cmp byte [.conBuf], 0
   127 000073BC 7519                <1>     jnz .cnr2
   128 000073BE B401                <1>     mov ah, 01h     ;Get key if exists
   129 000073C0 CD36                <1>     int 36h
   130 000073C2 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   131                              <1>     ;Keystroke available
   132                              <1> .cnr0:
   133 000073C4 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   134 000073C7 E993FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr1: ;No keystroke available
   136 000073CC 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   137 000073D2 E988FFFFFF          <1>     jmp .conExit
   138                              <1> .cnr2:
   139 000073D7 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   140 000073DD EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   141                              <1> 
   142                              <1> .conInputStatus:         ;Function 6
   143 000073DF B005                <1>     mov al, 05h ;Bad request structure length?
   144 000073E1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 000073E4 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   146 000073EA E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   147                              <1> 
   148                              <1> .conFlushInputBuffers:   ;Function 7
   149 000073EF B005                <1>     mov al, 05h ;Bad request structure length?
   150 000073F1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   151 000073F4 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   152 000073FA C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   153                              <1> .cfib0:
   154 00007401 B401                <1>     mov ah, 01      ;Get buffer status
   155 00007403 CD36                <1>     int 36h
   156 00007405 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   157 0000740B 30E4                <1>     xor ah, ah
   158 0000740D CD36                <1>     int 36h ;Read key to flush from buffer
   159 0000740F EBF0                <1>     jmp short .cfib0
   160                              <1> 
   161                              <1> .conWrite:   ;Function 8 and 9
   162 00007411 B005                <1>     mov al, 05h ;Bad request structure length?
   163 00007413 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   164 00007416 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   165                              <1> 
   166 0000741C 56                  <1>     push rsi
   167 0000741D 51                  <1>     push rcx
   168 0000741E 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   169 00007422 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   170                              <1> .cw1: 
   171 00007424 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   172 00007427 7407                <1>     je .cw2
   173 00007429 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   174 0000742A CD49                <1>     int 49h ;Fast print char
   175 0000742C FFC1                <1>     inc ecx
   176 0000742E EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   177                              <1> .cw2:
   178 00007430 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   179 00007433 59                  <1>     pop rcx
   180 00007434 5E                  <1>     pop rsi
   181 00007435 E925FFFFFF          <1>     jmp .conExit
   182                              <1> .conOutputStatus:   ;Function 0Ah
   183 0000743A B005                <1>     mov al, 05h ;Bad request structure length?
   184 0000743C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   185 0000743F 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   186 00007445 E915FFFFFF          <1>     jmp .conExit
   187                              <1> 
   188 0000744A 00                  <1> .conBuf db 0    ;Single byte buffer
   189                              <1> fastOutput:         ;This CON driver supports Int 49h
   190                              <1> ;Called with char to transfer in al
   191 0000744B 50                  <1>     push rax
   192 0000744C B40E                <1>     mov ah, 0Eh
   193 0000744E CD30                <1>     int 30h
   194 00007450 58                  <1>     pop rax
   195 00007451 48CF                <1>     iretq
   196                              <1> ctrlBreak:
   197                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   198 00007453 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   199 0000745A 48CF                <1>     iretq
   200                              <1> 
   201                              <1> clkDriver:
   202 0000745C 50                  <1>     push rax
   203 0000745D 53                  <1>     push rbx
   204 0000745E 51                  <1>     push rcx
   205 0000745F 52                  <1>     push rdx
   206 00007460 56                  <1>     push rsi
   207 00007461 55                  <1>     push rbp
   208 00007462 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   209 00007469 B003                <1>     mov al, 03h ;Unknown Command
   210 0000746B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   211 0000746F 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   212                              <1> 
   213 00007471 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   214 00007474 3C04                <1>     cmp al, 04h
   215 00007476 7437                <1>     jz .clkRead
   216 00007478 3C06                <1>     cmp al, 06h
   217 0000747A 0F8494000000        <1>     jz .clkInputStatus
   218 00007480 3C07                <1>     cmp al, 07h
   219 00007482 0F8498000000        <1>     jz .clkFlushInputBuffers
   220 00007488 3C08                <1>     cmp al, 08h
   221 0000748A 0F84A0000000        <1>     jz .clkWrite
   222 00007490 3C09                <1>     cmp al, 09h
   223 00007492 0F8498000000        <1>     jz .clkWrite
   224 00007498 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   225                              <1> .clkNotFunctioning:
   226 0000749A B002                <1>     mov al, 02h ;Device not ready error
   227                              <1> .clkWriteErrorCode:
   228 0000749C B480                <1>     mov ah, 80h ;Set error bit
   229 0000749E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   230                              <1> .clkExit:
   231 000074A2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   232 000074A8 5D                  <1>     pop rbp
   233 000074A9 5E                  <1>     pop rsi
   234 000074AA 5A                  <1>     pop rdx
   235 000074AB 59                  <1>     pop rcx
   236 000074AC 5B                  <1>     pop rbx
   237 000074AD 58                  <1>     pop rax
   238 000074AE C3                  <1>     ret
   239                              <1> 
   240                              <1> .clkRead:           ;Function 4
   241 000074AF B005                <1>     mov al, 05h ;Bad request structure length?
   242 000074B1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   243 000074B4 75E6                <1>     jne .clkWriteErrorCode
   244                              <1> 
   245 000074B6 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   246 000074B9 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   247 000074BD 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   248 000074C4 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   249 000074C8 30E4                <1>     xor ah, ah
   250 000074CA CD3A                <1>     int 3Ah         ;Read the system timer
   251 000074CC 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   252 000074CE 740D                <1>     jz .clkr1       ;Nope, now just time 
   253 000074D0 30E4                <1>     xor ah, ah
   254                              <1>     ;This works as al should keep count of the # of days passed since last read
   255 000074D2 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   256 000074D6 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   257                              <1> .clkr1:
   258 000074DD 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   259 000074E0 0FB7D2              <1>     movzx edx, dx
   260 000074E3 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   261 000074E5 89D0                <1>     mov eax, edx
   262 000074E7 31D2                <1>     xor edx, edx
   263 000074E9 89D8                <1>     mov eax, ebx
   264 000074EB B944040000          <1>     mov ecx, 1092   
   265 000074F0 F7F1                <1>     div ecx
   266 000074F2 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   267 000074F5 89D0                <1>     mov eax, edx    ;Get remainder in eax
   268 000074F7 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   269 000074FB 31D2                <1>     xor edx, edx
   270 000074FD B95B000000          <1>     mov ecx, 91 ;5*18.2
   271 00007502 F7F1                <1>     div ecx
   272 00007504 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   273 00007507 89D0                <1>     mov eax, edx    ;Get remainder in eax
   274                              <1>     ;lea eax, dword [eax + 4*eax]
   275                              <1>     ;add eax, edx    ;Essentially multiply by 6
   276 00007509 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   277 0000750C 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   278 0000750F E98EFFFFFF          <1>     jmp .clkExit
   279                              <1> 
   280                              <1> .clkInputStatus:    ;Function 6
   281                              <1> ;Always return ready
   282 00007514 B005                <1>     mov al, 05h ;Bad request structure length?
   283 00007516 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   284 00007519 7581                <1>     jne .clkWriteErrorCode
   285 0000751B E982FFFFFF          <1>     jmp .clkExit
   286                              <1> .clkFlushInputBuffers:  ;Function 7
   287                              <1> ;Always return done immediately
   288 00007520 B005                <1>     mov al, 05h ;Bad request structure length?
   289 00007522 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   290 00007525 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   291 0000752B E972FFFFFF          <1>     jmp .clkExit
   292                              <1> 
   293                              <1> .clkWrite:          ;Functions 8 and 9
   294 00007530 B005                <1>     mov al, 05h ;Bad request structure length?
   295 00007532 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 00007535 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   297                              <1> 
   298 0000753B 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   299 0000753E 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   300 00007542 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   301 00007546 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   302                              <1> 
   303 0000754D 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   304 0000754F 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   305 00007553 B105                <1>     mov cl, 5
   306 00007555 F6F1                <1>     div cl          ;Divide al by 5
   307 00007557 30E4                <1>     xor ah, ah      ;Remove the remainder
   308 00007559 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   309                              <1> ;Using the decimal part of this formula for the low count
   310                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   311 0000755B 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   312 0000755E B912000000          <1>     mov ecx, 18
   313 00007563 F7E1                <1>     mul ecx  
   314 00007565 01C3                <1>     add ebx, eax
   315                              <1> 
   316 00007567 31D2                <1>     xor edx, edx
   317 00007569 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   318 0000756D B944040000          <1>     mov ecx, 1092
   319 00007572 F7E1                <1>     mul ecx
   320 00007574 01C3                <1>     add ebx, eax
   321 00007576 89DA                <1>     mov edx, ebx    ;edx now has low count
   322 00007578 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   323 0000757C B401                <1>     mov ah, 01h     ;Set the system time
   324 0000757E CD3A                <1>     int 3Ah
   325                              <1> 
   326 00007580 4889F3              <1>     mov rbx, rsi
   327 00007583 E91AFFFFFF          <1>     jmp .clkExit
   328                              <1> 
   329                              <1> .clkBCDtoHex:
   330                              <1> ;Converts a BCD value to a Hex byte
   331                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   332 00007588 51                  <1>     push rcx
   333 00007589 0FB6C0              <1>     movzx eax, al   ;Zero extend
   334 0000758C 89C1                <1>     mov ecx, eax    ;Save al in ecx
   335 0000758E 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   336 00007593 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   337 00007599 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   338                              <1> .cbth0:
   339 0000759C 050A000000          <1>     add eax, 10
   340 000075A1 E2F9                <1>     loop .cbth0
   341 000075A3 59                  <1>     pop rcx
   342 000075A4 C3                  <1>     ret
   343                              <1> 
   344                              <1> .clkHexToBCD:
   345                              <1> ;Converts a Hex byte into two BCD digits
   346                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   347 000075A5 51                  <1>     push rcx
   348 000075A6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   349 000075A9 31C9                <1>     xor ecx, ecx
   350                              <1> .chtb0:
   351 000075AB 3D0A000000          <1>     cmp eax, 10
   352 000075B0 7209                <1>     jb .chtb1
   353 000075B2 2D0A000000          <1>     sub eax, 10
   354 000075B7 FFC1                <1>     inc ecx
   355 000075B9 EBF0                <1>     jmp short .chtb0
   356                              <1> .chtb1:
   357 000075BB C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   358 000075BE 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   359 000075C0 59                  <1>     pop rcx
   360 000075C1 C3                  <1>     ret
   361 000075C2 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   362                              <1> 
   363                              <1> ;COM Driver headers and main interrupt strat
   364                              <1> com1Intr:
   365 000075C4 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   366 000075CB EB19                <1>     jmp short comIntr
   367                              <1> com2Intr:
   368 000075CD C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   369 000075D4 EB10                <1>     jmp short comIntr
   370                              <1> com3Intr:
   371 000075D6 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   372 000075DD EB07                <1>     jmp short comIntr
   373                              <1> com4Intr:
   374 000075DF C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   375                              <1> comIntr:
   376 000075E6 50                  <1>     push rax
   377 000075E7 53                  <1>     push rbx
   378 000075E8 51                  <1>     push rcx
   379 000075E9 52                  <1>     push rdx
   380 000075EA 56                  <1>     push rsi
   381 000075EB 57                  <1>     push rdi
   382 000075EC 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   383 000075F3 B003                <1>     mov al, 03h ;Unknown Command
   384 000075F5 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   385 000075F9 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   386                              <1> 
   387 000075FB 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   388 000075FE 3C04                <1>     cmp al, 4   ;Read Character(s)
   389 00007600 7464                <1>     jz .comRead
   390 00007602 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   391 00007604 0F849D000000        <1>     jz .comNondestructiveRead   
   392 0000760A 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   393 0000760C 0F8486000000        <1>     jz .comReadInputStatus
   394 00007612 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   395 00007614 0F849C000000        <1>     jz .comFlushInputBuffers
   396 0000761A 3C08                <1>     cmp al, 8
   397 0000761C 0F84BA000000        <1>     jz .comWrite
   398 00007622 3C09                <1>     cmp al, 9
   399 00007624 0F84B2000000        <1>     jz .comWrite
   400 0000762A 3C0A                <1>     cmp al, 0Ah
   401 0000762C 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   402 00007632 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   403                              <1> .comErrorNoCount:
   404 00007634 B002                <1>     mov al, 02h ;Unknown device
   405 00007636 EB1B                <1>     jmp short .comWriteErrorCode
   406                              <1> .comReadError:
   407 00007638 BA0B000000          <1>     mov edx, 0Bh
   408 0000763D EB05                <1>     jmp short .comError
   409                              <1> .comWriteError:
   410 0000763F BA0A000000          <1>     mov edx, 0Ah
   411                              <1> .comError:
   412 00007644 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   413 00007647 B902000000          <1>     mov ecx, 02h    ;Unknown device
   414 0000764C 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   415 0000764E 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   416 00007651 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   417                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   418 00007653 B480                <1>     mov ah, 80h ;Set error bit
   419 00007655 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   420                              <1> .comExit:
   421 00007659 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   422 0000765F 5F                  <1>     pop rdi
   423 00007660 5E                  <1>     pop rsi
   424 00007661 5A                  <1>     pop rdx
   425 00007662 59                  <1>     pop rcx
   426 00007663 5B                  <1>     pop rbx
   427 00007664 58                  <1>     pop rax
   428 00007665 C3                  <1>     ret
   429                              <1> 
   430                              <1> .comRead:
   431 00007666 B005                <1>     mov al, 05h ;Bad request structure length?
   432 00007668 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   433 0000766B 75E6                <1>     jne .comWriteErrorCode
   434 0000766D 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   435 00007671 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   436                              <1> .cr1:
   437 00007673 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   438 00007676 741B                <1>     je .cre2
   439                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   440 00007678 B800020000          <1>     mov eax, 0200h    ;Recieve 
   441 0000767D 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   442 00007684 F8                  <1>     clc
   443 00007685 CD34                <1>     int 34h ;Recieve Char
   444 00007687 72BB                <1>     jc .comError
   445 00007689 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   446 0000768C 74EA                <1>     je .cr11
   447 0000768E AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   448 0000768F FFC1                <1>     inc ecx
   449 00007691 EBE0                <1>     jmp short .cr1
   450                              <1> .cre2:
   451 00007693 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   452 00007696 EBC1                <1>     jmp short .comExit
   453                              <1> 
   454                              <1> .comReadInputStatus:
   455 00007698 B005                <1>     mov al, 05h ;Bad request structure length?
   456 0000769A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   457 0000769D 75B4                <1>     jne .comWriteErrorCode
   458 0000769F 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   459 000076A5 EBB2                <1>     jmp short .comExit
   460                              <1> 
   461                              <1> .comNondestructiveRead:
   462                              <1> ;The buffer is always empty for now (no keystroke available)
   463 000076A7 B005                <1>     mov al, 05h ;Bad request structure length?
   464 000076A9 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   465 000076AC 75A5                <1>     jne .comWriteErrorCode
   466 000076AE 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   467 000076B4 EBA3                <1>     jmp short .comExit
   468                              <1> 
   469                              <1> .comFlushInputBuffers:
   470 000076B6 B005                <1>     mov al, 05h ;Bad request structure length?
   471 000076B8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   472 000076BB 7596                <1>     jne .comWriteErrorCode
   473                              <1> .cfib0:
   474 000076BD 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   475 000076C4 B800020000          <1>     mov eax, 0200h    ;Recieve
   476 000076C9 F8                  <1>     clc
   477 000076CA CD34                <1>     int 34h
   478 000076CC 0F8262FFFFFF        <1>     jc .comErrorNoCount
   479 000076D2 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   480 000076D5 75E6                <1>     jne .cfib0
   481 000076D7 E97DFFFFFF          <1>     jmp .comExit
   482                              <1> 
   483                              <1> .comWrite:
   484 000076DC B005                <1>     mov al, 05h ;Bad request structure length?
   485 000076DE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   486 000076E1 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   487                              <1> 
   488 000076E7 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   489 000076EB 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   490                              <1> .cw1: 
   491 000076ED 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   492 000076F0 7417                <1>     je .cw2
   493 000076F2 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   494 000076F3 B401                <1>     mov ah, 01h ;Move function number into ah
   495 000076F5 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   496 000076FC F8                  <1>     clc
   497 000076FD CD34                <1>     int 34h ;Transmit char
   498 000076FF 0F823FFFFFFF        <1>     jc .comError
   499 00007705 FFC1                <1>     inc ecx
   500 00007707 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   501                              <1> .cw2:
   502 00007709 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   503 0000770C E948FFFFFF          <1>     jmp .comExit
   504                              <1> 
   505                              <1> .comOutputStatus:
   506                              <1> ;Read MODEM status
   507 00007711 B005                <1>     mov al, 05h ;Bad request structure length?
   508 00007713 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   509 00007716 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   510                              <1> 
   511 0000771C 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   512 00007723 B403                <1>     mov ah, 03h     ;Get status
   513 00007725 F8                  <1>     clc
   514 00007726 CD34                <1>     int 34h
   515 00007728 0F8206FFFFFF        <1>     jc .comErrorNoCount
   516 0000772E 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   517 00007733 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   518 00007736 F7D0                <1>     not eax      ;Bitwise inversion
   519 00007738 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   520 0000773D 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   521 00007742 E912FFFFFF          <1>     jmp .comExit
   522 00007747 00                  <1> .comDevice   db 0
    48                                  %include "./Source/Drivers/diskDrv.asm"
    49                              <1> msdDriver:
    50 00007748 50                  <1>     push rax
    51 00007749 53                  <1>     push rbx
    52 0000774A 51                  <1>     push rcx
    53 0000774B 52                  <1>     push rdx
    54 0000774C 56                  <1>     push rsi
    55 0000774D 57                  <1>     push rdi
    56 0000774E 55                  <1>     push rbp
    57 0000774F 4150                <1>     push r8
    58 00007751 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    59 00007758 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    60 0000775C B003                <1>     mov al, drvBadCmd
    61 0000775E 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 00007764 B001                <1>     mov al, drvBadUnit 
    63 00007766 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    64 0000776A 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    65 00007770 488D356F040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    66 00007777 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    67 0000777B C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    68 0000777E 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    69 00007782 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    70 00007786 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    71 00007788 488D0DA1000000      <1>     lea rcx, .msdTable
    72 0000778F 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    73 00007793 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    74 00007795 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    75 00007797 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    76 0000779A FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    77                              <1> .msdDriverExit:
    78 0000779C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    79 000077A2 4158                <1>     pop r8
    80 000077A4 5D                  <1>     pop rbp
    81 000077A5 5F                  <1>     pop rdi
    82 000077A6 5E                  <1>     pop rsi
    83 000077A7 5A                  <1>     pop rdx
    84 000077A8 59                  <1>     pop rcx
    85 000077A9 5B                  <1>     pop rbx
    86 000077AA 58                  <1>     pop rax
    87 000077AB C3                  <1>     ret
    88                              <1> 
    89                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    90 000077AC 4889FB              <1>     mov rbx, rdi
    91 000077AF 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    92 000077B2 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    93 000077B4 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    94                              <1> ;Now fall through to general error
    95                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    96 000077B7 488B1D3AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]
    97 000077BE B401                <1>     mov ah, 01h
    98 000077C0 CD33                <1>     int 33h ;Read status of last operation
    99 000077C2 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
   100 000077C5 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
   101 000077C7 7460                <1>     je .msdWriteErrorCode 
   102 000077C9 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   103 000077CB 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   104 000077CE 7459                <1>     je .msdWriteErrorCode 
   105 000077D0 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   106 000077D3 7454                <1>     je .msdWriteErrorCode
   107                              <1> ;Device Not Ready
   108 000077D5 B002                <1>     mov al, 02h  ;Device not ready code
   109 000077D7 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   110 000077DA 744D                <1>     je .msdWriteErrorCode
   111 000077DC 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   112 000077E0 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   113                              <1> ;Write Protected
   114 000077E4 30C0                <1>     xor al, al
   115 000077E6 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   116 000077EB 743C                <1>     je .msdWriteErrorCode
   117                              <1> ;CRC Error
   118 000077ED B004                <1>     mov al, 04h     ;CRC error code
   119 000077EF 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   120 000077F4 7433                <1>     je .msdWriteErrorCode
   121 000077F6 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   122 000077FB 742C                <1>     je .msdWriteErrorCode
   123 000077FD 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   124 00007802 7425                <1>     je .msdWriteErrorCode
   125                              <1> ;Seek Error
   126 00007804 B006                <1>     mov al, 06h     ;Seek error code
   127 00007806 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   128 00007809 741E                <1>     je .msdWriteErrorCode
   129                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   130                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   131 0000780B B007                <1>     mov al, 07h
   132 0000780D 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   133 00007810 7417                <1>     je .msdWriteErrorCode
   134                              <1> ;Sector Not Found
   135 00007812 B008                <1>     mov al, 08h     ;Sector not found code
   136 00007814 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   137 00007817 7410                <1>     je .msdWriteErrorCode
   138                              <1> ;Write faults
   139 00007819 B00A                <1>     mov al, 0Ah     ;Write fault
   140 0000781B 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   141 0000781E 7409                <1>     je .msdWriteErrorCode
   142                              <1> ;Read faults
   143 00007820 B00B                <1>     mov al, 0Bh     ;Read fault
   144 00007822 80F911              <1>     cmp cl, 11h     ;Read error
   145 00007825 7402                <1>     je .msdWriteErrorCode
   146                              <1> ;General Errors
   147 00007827 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   148                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   149 00007829 B480                <1>     mov ah, 80h ;Set error bit
   150 0000782B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   151 0000782F C3                  <1>     ret ;Return to set done bit
   152                              <1> .msdTable:
   153 00007830 0000                <1>     dw 0                            ;Function 0
   154 00007832 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   155 00007834 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   156 00007836 F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   157 00007838 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   158 0000783A 0000                <1>     dw 0                            ;Function 5
   159 0000783C 0000                <1>     dw 0                            ;Function 6
   160 0000783E 0000                <1>     dw 0                            ;Function 7
   161 00007840 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   162 00007842 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   163 00007844 0000                <1>     dw 0                            ;Function 10
   164 00007846 0000                <1>     dw 0                            ;Function 11
   165 00007848 BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   166 0000784A C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   167 0000784C E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   168 0000784E FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   169 00007850 0000                <1>     dw 0                            ;Function 16
   170 00007852 0000                <1>     dw 0                            ;Function 17
   171 00007854 0000                <1>     dw 0                            ;Function 18
   172 00007856 2602                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   173 00007858 0000                <1>     dw 0                            ;Function 20
   174 0000785A 0000                <1>     dw 0                            ;Function 21
   175 0000785C 0000                <1>     dw 0                            ;Function 22
   176 0000785E CD02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   177 00007860 E202                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   178                              <1> 
   179                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   180                              <1> .msdMedChk:          ;Function 1
   181 00007862 B005                <1>     mov al, 05h ;Bad request structure length
   182 00007864 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   183 00007867 75C0                <1>     jne .msdWriteErrorCode
   184                              <1> 
   185 00007869 E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   186 0000786E 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   187 00007870 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   188 00007875 488D0D60030000      <1>     lea rcx, .msdBIOSmap
   189 0000787C 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   190 0000787F F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   191 00007882 753F                <1>     jnz .mmcNoChange
   192                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   193 00007884 B416                <1>     mov ah, 16h 
   194 00007886 CD33                <1>     int 33h
   195 00007888 0F8229FFFFFF        <1>     jc .msdGenDiskError
   196 0000788E 80FC80              <1>     cmp ah, 80h
   197 00007891 740E                <1>     je .mmcNoChangeLine
   198 00007893 80FC86              <1>     cmp ah, 86h
   199 00007896 7409                <1>     je .mmcNoChangeLine
   200 00007898 84E4                <1>     test ah, ah ;No change?
   201 0000789A 7427                <1>     jz .mmcNoChange
   202 0000789C F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   203 0000789F 750D                <1>     jnz .mmcChange
   204                              <1> ;If nothing, fall through and test manually, should never happen though
   205                              <1> .mmcNoChangeLine:
   206                              <1> ;Now we test Media Descriptor
   207 000078A1 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   208 000078A6 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   209 000078A9 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   210 000078AC 7410                <1>     je .mmcUnsure
   211                              <1> .mmcChange:
   212 000078AE C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   213 000078B2 488D0519030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   214 000078B9 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   215                              <1>     ;Check here if there were any open handles on the device when it was changed
   216 000078BD C3                  <1>     ret
   217                              <1> .mmcUnsure:
   218 000078BE C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   219 000078C2 C3                  <1>     ret
   220                              <1> .mmcNoChange:
   221 000078C3 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   222 000078C7 C3                  <1>     ret
   223                              <1> 
   224                              <1> 
   225                              <1> .msdBuildBPB:        ;Function 2
   226 000078C8 B005                <1>     mov al, 05h ;Bad request structure length
   227 000078CA 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   228 000078CD 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   229                              <1> 
   230 000078D3 4889DE              <1>     mov rsi, rbx
   231 000078D6 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   232 000078DB 488D0DFA020000      <1>     lea rcx, .msdBIOSmap
   233 000078E2 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   234 000078E5 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   235 000078E9 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   236 000078EB 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   237 000078EE B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   238 000078F3 CD33                <1>     int 33h
   239 000078F5 0F82BCFEFFFF        <1>     jc .msdGenDiskError
   240                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   241 000078FB 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   242 000078FF 7418                <1>     je .mbbpb0
   243 00007901 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   244 00007905 7412                <1>     je .mbbpb0
   245 00007907 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   246 0000790B 740C                <1>     je .mbbpb0
   247 0000790D 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   248 00007911 B007                <1>     mov al, 07h ;Unknown media error code
   249 00007913 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   250                              <1> .mbbpb0:
   251 00007919 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   252 0000791C 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   253 0000791F B90F000000          <1>     mov ecx, bpbEx_size/8
   254 00007924 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   255 00007927 C3                  <1>     ret
   256                              <1> .msdIOCTLRead:       ;Function 3, returns done
   257 00007928 B005                <1>     mov al, drvBadDrvReq
   258 0000792A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   259 0000792D 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   260 00007933 C3                  <1>     ret
   261                              <1> .msdRead:            ;Function 4
   262                              <1> ;Will read one sector at a time.
   263 00007934 B005                <1>     mov al, 05h ;Bad request structure length
   264 00007936 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   265 00007939 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   266                              <1> 
   267 0000793F E806020000          <1>     call .msdCheckDeviceType
   268                              <1> 
   269 00007944 4889DF              <1>     mov rdi, rbx
   270 00007947 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   271                              <1> .msdr0:
   272 00007949 B682                <1>     mov dh, 82h ;LBA Read Sectors
   273 0000794B E8D7010000          <1>     call .msdBlkIOCommon
   274 00007950 0F8256FEFFFF        <1>     jc .msdIOError
   275 00007956 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   276 0000795A 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   277 0000795E 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   278 00007962 FFC6                <1>     inc esi
   279 00007964 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   280 00007967 75E0                <1>     jne .msdr0
   281 00007969 4889FB              <1>     mov rbx, rdi
   282 0000796C C3                  <1>     ret
   283                              <1> .msdWrite:           ;Function 8
   284                              <1> ;Will write one sector at a time.
   285 0000796D B005                <1>     mov al, 05h ;Bad request structure length
   286 0000796F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   287 00007972 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   288                              <1> 
   289 00007978 E8CD010000          <1>     call .msdCheckDeviceType
   290                              <1> 
   291 0000797D 4889DF              <1>     mov rdi, rbx
   292 00007980 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   293                              <1> .msdw0:
   294 00007982 B683                <1>     mov dh, 83h ;LBA Write Sectors
   295 00007984 E89E010000          <1>     call .msdBlkIOCommon
   296 00007989 0F821DFEFFFF        <1>     jc .msdIOError
   297 0000798F 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   298 00007993 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   299 00007997 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   300 0000799B FFC6                <1>     inc esi
   301 0000799D 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   302 000079A0 75E0                <1>     jne .msdw0
   303 000079A2 4889FB              <1>     mov rbx, rdi
   304 000079A5 C3                  <1>     ret
   305                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   306                              <1> ;Will write one sector at a time and then verify it.
   307 000079A6 B005                <1>     mov al, 05h ;Bad request structure length
   308 000079A8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   309 000079AB 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   310                              <1> 
   311 000079B1 E894010000          <1>     call .msdCheckDeviceType
   312                              <1> 
   313 000079B6 4889DF              <1>     mov rdi, rbx
   314 000079B9 31F6                <1>     xor esi, esi  ;Set counter to zero
   315                              <1> .msdwv0:
   316 000079BB B683                <1>     mov dh, 83h ;LBA Write Sectors
   317 000079BD E865010000          <1>     call .msdBlkIOCommon
   318 000079C2 0F82E4FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   319 000079C8 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   320 000079CA E858010000          <1>     call .msdBlkIOCommon
   321 000079CF 0F82D7FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   322 000079D5 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   323 000079D9 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   324 000079DD 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   325 000079E1 FFC6                <1>     inc esi
   326 000079E3 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   327 000079E6 75D3                <1>     jne .msdwv0
   328 000079E8 4889FB              <1>     mov rbx, rdi
   329 000079EB C3                  <1>     ret
   330                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   331 000079EC B005                <1>     mov al, drvBadDrvReq
   332 000079EE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   333 000079F1 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   334                              <1> 
   335 000079F7 C3                  <1>     ret
   336                              <1> .msdDevOpen:         ;Function 13
   337 000079F8 B005                <1>     mov al, drvBadDrvReq
   338 000079FA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   339 000079FD 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   340                              <1> 
   341 00007A03 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   342 00007A08 488D0DD2010000      <1>     lea rcx, .msdHdlCnt
   343 00007A0F FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   344 00007A12 C3                  <1>     ret
   345                              <1> .msdDevClose:        ;Function 14
   346 00007A13 B005                <1>     mov al, drvBadDrvReq
   347 00007A15 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   348 00007A18 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   349                              <1> 
   350 00007A1E 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   351 00007A23 488D0DB7010000      <1>     lea rcx, .msdHdlCnt
   352 00007A2A FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   353 00007A2D C3                  <1>     ret
   354                              <1> .msdRemovableMedia:  ;Function 15
   355 00007A2E B005                <1>     mov al, drvBadDrvReq
   356 00007A30 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   357 00007A33 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1>     
   359 00007A39 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   360 00007A3E 488D0D97010000      <1>     lea rcx, .msdBIOSmap
   361 00007A45 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   362 00007A49 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   363 00007A4E C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   364 00007A51 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   365 00007A55 C3                  <1>     ret
   366                              <1> .msdGenericIOCTL:    ;Function 19
   367 00007A56 B005                <1>     mov al, drvBadDrvReq
   368 00007A58 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   369 00007A5B 0F85C8FDFFFF        <1>     jne .msdWriteErrorCode
   370                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   371                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   372 00007A61 B003                <1>     mov al, drvBadCmd
   373 00007A63 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   374 00007A67 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   375 00007A6A 0F85B9FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   376 00007A70 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   377 00007A73 0F84B0FDFFFF        <1>     jz .msdWriteErrorCode
   378 00007A79 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   379 00007A7C 80F941              <1>     cmp cl, 41h     
   380 00007A7F 743F                <1>     je .msdGIOCTLWrite
   381 00007A81 80F942              <1>     cmp cl, 42h
   382 00007A84 7451                <1>     je .msdGIOCTLFormat
   383 00007A86 80F960              <1>     cmp cl, 60h
   384 00007A89 0F859AFDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   385                              <1>     ;Get params here
   386 00007A8F 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   387 00007A93 488D1542010000      <1>     lea rdx, .msdBIOSmap
   388 00007A9A 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   389 00007A9D B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   390 00007A9F 53                  <1>     push rbx
   391 00007AA0 CD33                <1>     int 33h
   392                              <1>     ;Returns:
   393                              <1>     ;rbx = Sector size in bytes
   394                              <1>     ;rcx = Last LBA block
   395 00007AA2 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   396 00007AA5 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   397 00007AA6 0F820BFDFFFF        <1>     jc .msdGenDiskError
   398                              <1> ;Get LBA Table:
   399                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   400                              <1> ;Offset 1:  Reserved, 7 bytes
   401                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   402                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   403 00007AAC 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   404 00007AB0 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   405 00007AB7 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   406 00007ABB 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   407                              <1>     return
    18                              <2> %%_ret:
    19 00007ABF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   408                              <1> 
   409                              <1> .msdGIOCTLWrite:
   410                              <1> ;Write Table:
   411                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   412                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   413                              <1> ;Offset 2:  Reserved, 6 bytes
   414                              <1> ;Offset 8:  Sector to start format at (QWORD)
   415                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   416 00007AC0 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   417 00007AC5 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   418 00007AC9 B483                <1>     mov ah, 83h
   419                              <1> .msdGIOCTLwfCommon:
   420 00007ACB CD33                <1>     int 33h
   421 00007ACD 0F82E4FCFFFF        <1>     jc .msdGenDiskError
   422 00007AD3 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   423                              <1>     return 
    18                              <2> %%_ret:
    19 00007AD6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   424                              <1> 
   425                              <1> .msdGIOCTLFormat:
   426                              <1> ;Format Table:
   427                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   428                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   429                              <1> ;Offset 2:  Reserved, 6 bytes
   430                              <1> ;Offset 8:  Sector to start format at (QWORD)
   431 00007AD7 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   432 00007ADC B485                <1>     mov ah, 85h
   433 00007ADE EBEB                <1>     jmp short .msdGIOCTLwfCommon
   434                              <1> 
   435                              <1> .msdGIOCTLFormatWriteSetup:
   436                              <1> ;Sets the following:
   437                              <1> ;al = Number of sectors to write/format
   438                              <1> ;rcx = Sector to begin transfer at
   439                              <1> ;dl = BIOS Drive to do transfer on
   440                              <1> ;rsi = Driver Packet (usually set to rbx)
   441                              <1> ;rdi = Write/Format packet
   442 00007AE0 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   443 00007AE4 488D15F1000000      <1>     lea rdx, .msdBIOSmap
   444 00007AEB 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   445 00007AEE 4889DE              <1>     mov rsi, rbx
   446 00007AF1 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   447 00007AF5 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   448 00007AF8 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   449                              <1>     return
    18                              <2> %%_ret:
    19 00007AFC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> .msdGetLogicalDev:   ;Function 23
   452 00007AFD B005                <1>     mov al, drvBadDrvReq
   453 00007AFF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   454 00007B02 0F8521FDFFFF        <1>     jne .msdWriteErrorCode
   455                              <1> 
   456 00007B08 8A05CD000000        <1>     mov al, byte [.msdCurDev]
   457 00007B0E 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   458 00007B11 C3                  <1>     ret
   459                              <1> .msdSetLogicalDev:   ;Function 24
   460 00007B12 B005                <1>     mov al, drvBadDrvReq
   461 00007B14 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   462 00007B17 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   463                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   464 00007B1D 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   465 00007B20 8805B5000000        <1>     mov byte [.msdCurDev], al
   466 00007B26 C3                  <1>     ret
   467                              <1> 
   468                              <1> .msdBlkIOCommon:  ;Does block IO
   469                              <1> ;Called with rdi containing old rbx value and ah with function number
   470                              <1> ;rbp points to bpb
   471                              <1> ;Error handled by caller
   472                              <1> ;Sector count handled by caller
   473                              <1> ;Called with dh = BIOS function number
   474 00007B27 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   475 00007B2C 488D0DA9000000      <1>     lea rcx, .msdBIOSmap
   476 00007B33 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   477 00007B36 31C9                <1>     xor ecx, ecx
   478 00007B38 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   479 00007B3B 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   480 00007B3F 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   481 00007B43 88F4                <1>     mov ah, dh
   482 00007B45 B001                <1>     mov al, 01h ;Do one sector at a time 
   483 00007B47 CD33                <1>     int 33h
   484                              <1>     return
    18                              <2> %%_ret:
    19 00007B49 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> .msdCheckDeviceType:
   487                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   488                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   489                              <1> ;Returns ZF=NZ if media number changed!
   490 00007B4A 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   491 00007B4E 3A0587000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   492                              <1>     rete    ;Exit if equal (ZF=ZE)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007B54 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   493                              <1> ;If not equal, check they use different BPB's before continuing
   494 00007B56 50                  <1>     push rax
   495 00007B57 0FB6057D000000      <1>     movzx eax, byte [.msdCurDev]  ;Compare current BPB ptr to previous
   496 00007B5E 488D3581000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   497 00007B65 C1E003              <1>     shl eax, 3
   498 00007B68 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   499 00007B6C 58                  <1>     pop rax
   500 00007B6D 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   501 00007B70 751F                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   502                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   503 00007B72 0441                <1>     add al, "A" ;Convert to a letter
   504 00007B74 880534000000        <1>     mov byte [.msdStrikeLetter], al
   505 00007B7A 488D351A000000      <1>     lea rsi, .msdStrike
   506 00007B81 B937000000          <1>     mov ecx, .msdStrikeL
   507                              <1> .msdCDTprintMessage:
   508 00007B86 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   509 00007B87 CD49                <1>     int 49h ;Print char in al
   510 00007B89 FFC9                <1>     dec ecx
   511 00007B8B 75F9                <1>     jnz .msdCDTprintMessage
   512 00007B8D 31C0                <1>     xor eax, eax
   513 00007B8F CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   514                              <1> .msdCDTexit:
   515 00007B91 E887FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   516 00007B96 31C0                <1>     xor eax, eax
   517 00007B98 FFC0                <1>     inc eax ;Clear ZF flag (ZF=NZ)
   518 00007B9A C3                  <1>     ret
   519                              <1> 
   520 00007B9B 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   520 00007BA4 666F72206472697665- <1>
   520 00007BAD 20                  <1>
   521 00007BAE 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   521 00007BB7 72696B650D0A616E79- <1>
   521 00007BC0 206B6579207768656E- <1>
   521 00007BC9 2072656164790D0A0A  <1>
   522                              <1> .msdStrikeL equ $ - .msdStrike
   523                              <1> 
   524 00007BD2 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   525                              <1> ;LASTDRIVE default is 5
   526                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   527                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   528 00007BDB 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   529                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   530 00007BDC 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   531 00007BE1 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   532 00007BE6 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   532 00007BEF 000000000000000000- <1>
   532 00007BF8 000000000000000000- <1>
   532 00007C01 000000000000000000- <1>
   532 00007C0A 00000000            <1>
   533 00007C0E 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   533 00007C17 000000000000000000- <1>
   533 00007C20 000000000000000000- <1>
   533 00007C29 000000000000000000- <1>
   533 00007C32 000000000000000000- <1>
   533 00007C3B 000000000000000000- <1>
   533 00007C44 000000000000000000- <1>
   533 00007C4D 000000000000000000- <1>
   533 00007C56 000000000000000000- <1>
   533 00007C5F 000000000000000000- <1>
   533 00007C68 000000000000000000- <1>
   533 00007C71 000000000000000000- <1>
   533 00007C7A 000000000000000000- <1>
   533 00007C83 000000000000000000- <1>
   533 00007C8C 000000000000000000- <1>
   533 00007C95 000000000000000000- <1>
   533 00007C9E 000000000000000000- <1>
   533 00007CA7 000000000000000000- <1>
   533 00007CB0 000000000000000000- <1>
   533 00007CB9 000000000000000000- <1>
   533 00007CC2 000000000000000000- <1>
   533 00007CCB 000000000000000000- <1>
   533 00007CD4 000000000000000000- <1>
   533 00007CDD 000000000000000000- <1>
   533 00007CE6 000000000000000000- <1>
   533 00007CEF 000000000000000000- <1>
   533 00007CF8 000000000000000000- <1>
   533 00007D01 000000000000000000- <1>
   533 00007D0A 000000000000000000- <1>
   533 00007D13 000000000000000000- <1>
   533 00007D1C 000000000000000000- <1>
   533 00007D25 000000000000000000- <1>
   533 00007D2E 000000000000000000- <1>
   533 00007D37 000000000000000000- <1>
   533 00007D40 000000000000000000- <1>
   533 00007D49 000000000000000000- <1>
   533 00007D52 000000000000000000- <1>
   533 00007D5B 000000000000000000- <1>
   533 00007D64 000000000000000000- <1>
   533 00007D6D 000000000000000000- <1>
   533 00007D76 000000000000000000- <1>
   533 00007D7F 000000000000000000- <1>
   533 00007D88 000000000000000000- <1>
   533 00007D91 000000000000000000- <1>
   533 00007D9A 000000000000000000- <1>
   533 00007DA3 000000000000000000- <1>
   533 00007DAC 000000000000000000- <1>
   533 00007DB5 000000000000000000- <1>
   533 00007DBE 000000000000000000- <1>
   533 00007DC7 000000000000000000- <1>
   533 00007DD0 000000000000000000- <1>
   533 00007DD9 000000000000000000- <1>
   533 00007DE2 000000000000000000- <1>
   533 00007DEB 000000000000000000- <1>
   533 00007DF4 000000000000000000- <1>
   533 00007DFD 000000000000000000- <1>
   533 00007E06 000000000000000000- <1>
   533 00007E0F 000000000000000000- <1>
   533 00007E18 000000000000000000- <1>
   533 00007E21 000000000000000000- <1>
   533 00007E2A 000000000000000000- <1>
   533 00007E33 000000000000000000- <1>
   533 00007E3C 000000000000000000- <1>
   533 00007E45 000000000000000000- <1>
   533 00007E4E 000000000000000000- <1>
   533 00007E57 000000000000000000- <1>
   533 00007E60 000000000000        <1>
   534                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   534                              <2> .dfltBPB :
   181 00007E66 E9                  <2>  db 0E9h
   182 00007E67 00                  <2>  db 00h
   183 00007E68 90                  <2>  db 90h
   184 00007E69 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007E71 0002                <2>  dw 0200h
   186 00007E73 01                  <2>  db 01h
   187 00007E74 0100                <2>  dw 0001h
   188 00007E76 02                  <2>  db 02h
   189 00007E77 E000                <2>  dw 00E0h
   190 00007E79 400B                <2>  dw 0B40h
   191 00007E7B F0                  <2>  db 0F0h
   192 00007E7C 0900                <2>  dw 0009h
   193 00007E7E 1200                <2>  dw 0012h
   194 00007E80 0200                <2>  dw 0002h
   195 00007E82 00000000            <2>  dd 0
   196 00007E86 00000000            <2>  dd 0
   197 00007E8A 00                  <2>  db 00h
   198 00007E8B 00                  <2>  db 00h
   199 00007E8C 29                  <2>  db 29h
   200 00007E8D 00000000            <2>  dd 0
   201 00007E91 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007E9A 2020                <2>
   202 00007E9C 4641543132202020    <2>  db 'FAT12   '
   203 00007EA4 000000000000000000- <2>  db 58 dup 0
   203 00007EAD 000000000000000000- <2>
   203 00007EB6 000000000000000000- <2>
   203 00007EBF 000000000000000000- <2>
   203 00007EC8 000000000000000000- <2>
   203 00007ED1 000000000000000000- <2>
   203 00007EDA 00000000            <2>
   535                              <1> endptr equ $
    49                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    50                                  ;Paragraph alignment
    51                                  %include "./Source/BSS/dosDynaDataArea.asm"
    52                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    53                              <1> ; the MCB chain!
    54                              <1> ddaStart:
    55 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    56                              <1> 
    57                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    58                              <1> ;Create DPB chain of first 5 available DPB slots
    59 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    60 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    61 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    62 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    63 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    64                              <1> 
    65                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    66                              <1> 
    67 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    68                              <1> 
    69 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    70 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    71                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    72                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    73                              <1> dynamicDataAreaLength equ $ - ddaStart
    73          ------------------  <1>  info: assembly required 1+16+2 passes

