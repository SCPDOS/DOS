     1                                  ;Generic MBR program
     2                                  BITS 16
     3                                  ORG 600h    ;We start at 7C00h but relocate ourselves low
     4                                  
     5                                  ep:
     6 00000000 FA                          cli ;Pause interrupts for copy low
     7 00000001 FC                          cld
     8 00000002 31C0                        xor ax, ax
     9 00000004 8ED8                        mov ds, ax
    10 00000006 8EC0                        mov es, ax
    11 00000008 8ED0                        mov ss, ax
    12 0000000A BC007C                      mov sp, 7C00h
    13 0000000D FB                          sti
    14 0000000E 89E6                        mov si, sp
    15 00000010 BF0006                      mov di, 600h
    16 00000013 B90001                      mov cx, 100h    
    17 00000016 F3A5                        rep movsw
    18 00000018 EA[1D00]0000                jmp 0:main  ;Set CS to 0 too
    19                                  main:
    20 0000001D BE[BE01]                    mov si, tbl1
    21 00000020 B90400                      mov cx, 4
    22                                  .lp:
    23 00000023 803C80                      cmp byte [si], 80h  ;Is the first byte an active partition?!
    24 00000026 7413                        je activeFound
    25 00000028 81C61000                    add si, 10h ;Goto next table entry
    26 0000002C 49                          dec cx
    27 0000002D 75F4                        jnz .lp
    28 0000002F BE[9800]                    mov si, msg1
    29                                  badExit:
    30 00000032 E85500                      call print
    31 00000035 31C0                        xor ax, ax
    32 00000037 CD16                        int 16h
    33 00000039 CD18                        int 18h
    34                                  activeFound:
    35 0000003B 31C0                        xor ax, ax
    36 0000003D B90800                      mov cx, 8
    37 00000040 F3AB                        rep stosw   ;Store 8 zero words
    38 00000042 B503                        mov ch, 03h
    39                                  .tryAgain:
    40 00000044 B103                        mov cl, 03h
    41                                  .tryAgainLp:
    42 00000046 C7041000                    mov word [si], 0010h    ;Packet size and reserved zero
    43 0000004A C744020100                  mov word [si + 2], 1   ;Number of sectors to transfer
    44 0000004F C74404007C                  mov word [si + 4], 07C00h ;Offset of buffer
    45 00000054 C744060000                  mov word [si + 6], 0      ;Segment of buffer
    46 00000059 B442                        mov ah, 42h
    47 0000005B CD13                        int 13h
    48 0000005D 7313                        jnc .readOk
    49 0000005F FEC9                        dec cl
    50 00000061 75E3                        jnz .tryAgainLp
    51 00000063 FECD                        dec ch
    52 00000065 7406                        jz .badRead
    53 00000067 30E4                        xor ah, ah
    54 00000069 CD13                        int 13h
    55 0000006B EBD7                        jmp short .tryAgain
    56                                  .badRead:
    57 0000006D BE[B100]                    mov si, msg2
    58 00000070 EBC0                        jmp short badExit
    59                                  .readOk:
    60 00000072 BE[D000]                    mov si, msg3
    61 00000075 813EFE7DAA55                cmp word [07DFEh], 055AAh
    62 0000007B 7408                        je .okOS
    63 0000007D 813EFE7D55AA                cmp word [07DFEh], 0AA55h
    64 00000083 75AD                        jne badExit
    65                                  .okOS:
    66 00000085 EA007C0000                  jmp 0:7C00h
    67                                      
    68                                  print:
    69 0000008A AC                          lodsb
    70 0000008B 84C0                        test al, al
    71 0000008D 7408                        jz .exit
    72 0000008F B40E                        mov ah, 0Eh
    73 00000091 31DB                        xor bx, bx
    74 00000093 CD10                        int 10h
    75 00000095 EBF3                        jmp short print
    76                                  .exit:
    77 00000097 C3                          ret
    78                                  
    79 00000098 496E76616C69642070-     msg1:   db "Invalid partition table.", 0
    79 000000A1 6172746974696F6E20-
    79 000000AA 7461626C652E00     
    80 000000B1 4572726F72206C6F61-     msg2:   db "Error loading operating system",0
    80 000000BA 64696E67206F706572-
    80 000000C3 6174696E6720737973-
    80 000000CC 74656D00           
    81 000000D0 4D697373696E67206F-     msg3:   db "Missing operating system",0
    81 000000D9 7065726174696E6720-
    81 000000E2 73797374656D00     
    82 000000E9 00<rep D5h>                 times (01BEh - ($-$$)) db 00h    ;Pad the partition table to the right place
    83                                  
    84 000001BE 000000000000000000-     tbl1:   db 10h dup (0)
    84 000001C7 00000000000000     
    85 000001CE 000000000000000000-     tbl2:   db 10h dup (0)
    85 000001D7 00000000000000     
    86 000001DE 000000000000000000-     tbl3:   db 10h dup (0)
    86 000001E7 00000000000000     
    87 000001EE 000000000000000000-     tbl4:   db 10h dup (0)
    87 000001F7 00000000000000     
    88                                  
    89 000001FE 55AA                            dw 0AA55h
    90                                  pktptr: ;Packet Pointer, 16 bytes in size, always past the tail
    90          ------------------       info: assembly required 1+2+2 passes

