     1                                  ;Generic MBR program
     2                                  BITS 16
     3                                  ORG 600h    ;We start at 7C00h but relocate ourselves low
     4                                  
     5                                  ep:
     6 00000000 FA                          cli ;Pause interrupts for copy low
     7 00000001 FC                          cld
     8 00000002 31C0                        xor ax, ax
     9 00000004 8ED8                        mov ds, ax
    10 00000006 8EC0                        mov es, ax
    11 00000008 8ED0                        mov ss, ax
    12 0000000A BC007C                      mov sp, 7C00h
    13 0000000D FB                          sti
    14 0000000E 89E6                        mov si, sp
    15 00000010 BF0006                      mov di, 600h
    16 00000013 B90001                      mov cx, 100h    
    17 00000016 F3A5                        rep movsw
    18 00000018 EA[1D00]0000                jmp 0:main  ;Set CS to 0 too
    19                                  main:
    20 0000001D BE[BE01]                    mov si, tbl1
    21 00000020 B90400                      mov cx, 4
    22                                  .lp:
    23 00000023 803C80                      cmp byte [si], 80h  ;Is the first byte an active partition?!
    24 00000026 7413                        je activeFound
    25 00000028 81C61000                    add si, 10h ;Goto next table entry
    26 0000002C 49                          dec cx
    27 0000002D 75F4                        jnz .lp
    28 0000002F BE[AC00]                    mov si, msg1
    29                                  badExit:
    30 00000032 E86900                      call print
    31 00000035 31C0                        xor ax, ax
    32 00000037 CD16                        int 16h
    33 00000039 CD18                        int 18h
    34                                  activeFound:
    35 0000003B 31C0                        xor ax, ax
    36 0000003D B90800                      mov cx, 8
    37 00000040 BF[0002]                    mov di, pktptr
    38 00000043 57                          push di ;Put pointer to the xfer packet on stack
    39 00000044 F3AB                        rep stosw   ;Store 8 zero words
    40 00000046 8D7C08                      lea di, [si + 8]  ;Get ptr to the lbaStart field in di 
    41 00000049 5E                          pop si  ;Pop the xfer packet into si
    42 0000004A B503                        mov ch, 03h
    43                                  .tryAgain:
    44 0000004C B103                        mov cl, 03h
    45                                  .tryAgainLp:
    46 0000004E C7041000                    mov word [si], 0010h    ;Packet size and reserved zero
    47 00000052 C744020100                  mov word [si + 2], 1   ;Number of sectors to transfer
    48 00000057 C74404007C                  mov word [si + 4], 07C00h ;Offset of buffer
    49 0000005C C744060000                  mov word [si + 6], 0      ;Segment of buffer
    50 00000061 56                          push si
    51 00000062 57                          push di
    52 00000063 87F7                        xchg si, di
    53 00000065 81C70800                    add di, 8
    54 00000069 A5                          movsw   ;Copy over the DWORD from the MBR entry
    55 0000006A A5                          movsw
    56 0000006B 5F                          pop di
    57 0000006C 5E                          pop si
    58 0000006D B442                        mov ah, 42h
    59 0000006F CD13                        int 13h
    60 00000071 7313                        jnc .readOk
    61 00000073 FEC9                        dec cl
    62 00000075 75D7                        jnz .tryAgainLp
    63 00000077 FECD                        dec ch
    64 00000079 7406                        jz .badRead
    65 0000007B 30E4                        xor ah, ah
    66 0000007D CD13                        int 13h
    67 0000007F EBCB                        jmp short .tryAgain
    68                                  .badRead:
    69 00000081 BE[C500]                    mov si, msg2
    70 00000084 EBAC                        jmp short badExit
    71                                  .readOk:
    72 00000086 BE[E400]                    mov si, msg3
    73 00000089 813EFE7DAA55                cmp word [07DFEh], 055AAh
    74 0000008F 7408                        je .okOS
    75 00000091 813EFE7D55AA                cmp word [07DFEh], 0AA55h
    76 00000097 7599                        jne badExit
    77                                  .okOS:
    78 00000099 EA007C0000                  jmp 0:7C00h
    79                                      
    80                                  print:
    81 0000009E AC                          lodsb
    82 0000009F 84C0                        test al, al
    83 000000A1 7408                        jz .exit
    84 000000A3 B40E                        mov ah, 0Eh
    85 000000A5 31DB                        xor bx, bx
    86 000000A7 CD10                        int 10h
    87 000000A9 EBF3                        jmp short print
    88                                  .exit:
    89 000000AB C3                          ret
    90                                  
    91 000000AC 496E76616C69642070-     msg1:   db "Invalid partition table.", 0
    91 000000B5 6172746974696F6E20-
    91 000000BE 7461626C652E00     
    92 000000C5 4572726F72206C6F61-     msg2:   db "Error loading operating system",0
    92 000000CE 64696E67206F706572-
    92 000000D7 6174696E6720737973-
    92 000000E0 74656D00           
    93 000000E4 4D697373696E67206F-     msg3:   db "Missing operating system",0
    93 000000ED 7065726174696E6720-
    93 000000F6 73797374656D00     
    94 000000FD 00<rep C1h>                 times (01BEh - ($-$$)) db 00h    ;Pad the partition table to the right place
    95                                  
    96 000001BE 000000000000000000-     tbl1:   db 10h dup (0)
    96 000001C7 00000000000000     
    97 000001CE 000000000000000000-     tbl2:   db 10h dup (0)
    97 000001D7 00000000000000     
    98 000001DE 000000000000000000-     tbl3:   db 10h dup (0)
    98 000001E7 00000000000000     
    99 000001EE 000000000000000000-     tbl4:   db 10h dup (0)
    99 000001F7 00000000000000     
   100                                  
   101 000001FE 55AA                            dw 0AA55h
   102                                  pktptr: ;Packet Pointer, 16 bytes in size, always past the tail
   102          ------------------       info: assembly required 1+2+2 passes

