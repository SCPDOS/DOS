     1                                  ;Generic MBR program
     2                                  BITS 16
     3                                  ORG 600h    ;We start at 7C00h but relocate ourselves low
     4                                  
     5                                  ep:
     6 00000000 FA                          cli ;Pause interrupts for copy low
     7 00000001 FC                          cld
     8 00000002 31C0                        xor ax, ax
     9 00000004 8ED8                        mov ds, ax
    10 00000006 8EC0                        mov es, ax
    11 00000008 8ED0                        mov ss, ax
    12 0000000A BC007C                      mov sp, 7C00h
    13 0000000D FB                          sti
    14 0000000E 89E6                        mov si, sp
    15 00000010 BF0006                      mov di, 600h
    16 00000013 B90001                      mov cx, 100h    
    17 00000016 F3A5                        rep movsw
    18 00000018 EA[1D00]0000                jmp 0:main  ;Set CS to 0 too
    19                                  main:
    20 0000001D BE[BE01]                    mov si, tbl1
    21 00000020 B90400                      mov cx, 4
    22                                  .lp:
    23 00000023 803C80                      cmp byte [si], 80h  ;Is the first byte an active partition?!
    24 00000026 7413                        je activeFound
    25 00000028 81C61000                    add si, 10h ;Goto next table entry
    26 0000002C 49                          dec cx
    27 0000002D 75F4                        jnz .lp
    28 0000002F BE[B000]                    mov si, msg1
    29                                  badExit:
    30 00000032 E86D00                      call print
    31 00000035 31C0                        xor ax, ax
    32 00000037 CD16                        int 16h
    33 00000039 CD18                        int 18h
    34                                  activeFound:
    35 0000003B 89F5                        mov bp, si
    36 0000003D 31C0                        xor ax, ax
    37 0000003F B90800                      mov cx, 8
    38 00000042 BF[0002]                    mov di, pktptr
    39 00000045 57                          push di ;Put pointer to the xfer packet on stack
    40 00000046 F3AB                        rep stosw   ;Store 8 zero words
    41 00000048 8D7C08                      lea di, [si + 8]  ;Get ptr to the lbaStart field in di 
    42 0000004B 5E                          pop si  ;Pop the xfer packet into si
    43 0000004C B503                        mov ch, 03h
    44                                  .tryAgain:
    45 0000004E B103                        mov cl, 03h
    46                                  .tryAgainLp:
    47 00000050 C7041000                    mov word [si], 0010h    ;Packet size and reserved zero
    48 00000054 C744020100                  mov word [si + 2], 1   ;Number of sectors to transfer
    49 00000059 C74404007C                  mov word [si + 4], 07C00h ;Offset of buffer
    50 0000005E C744060000                  mov word [si + 6], 0      ;Segment of buffer
    51 00000063 56                          push si
    52 00000064 57                          push di
    53 00000065 87F7                        xchg si, di
    54 00000067 81C70800                    add di, 8
    55 0000006B A5                          movsw   ;Copy over the DWORD from the MBR entry
    56 0000006C A5                          movsw
    57 0000006D 5F                          pop di
    58 0000006E 5E                          pop si
    59 0000006F B442                        mov ah, 42h
    60 00000071 CD13                        int 13h
    61 00000073 7313                        jnc .readOk
    62 00000075 FEC9                        dec cl
    63 00000077 75D7                        jnz .tryAgainLp
    64 00000079 FECD                        dec ch
    65 0000007B 7406                        jz .badRead
    66 0000007D 30E4                        xor ah, ah
    67 0000007F CD13                        int 13h
    68 00000081 EBCB                        jmp short .tryAgain
    69                                  .badRead:
    70 00000083 BE[C900]                    mov si, msg2
    71 00000086 EBAA                        jmp short badExit
    72                                  .readOk:
    73 00000088 BE[E800]                    mov si, msg3
    74 0000008B 813EFE7DAA55                cmp word [07DFEh], 055AAh
    75 00000091 7408                        je .okOS
    76 00000093 813EFE7D55AA                cmp word [07DFEh], 0AA55h
    77 00000099 7597                        jne badExit
    78                                  .okOS:
    79 0000009B 89EE                        mov si, bp
    80 0000009D EA007C0000                  jmp 0:7C00h
    81                                      
    82                                  print:
    83 000000A2 AC                          lodsb
    84 000000A3 84C0                        test al, al
    85 000000A5 7408                        jz .exit
    86 000000A7 B40E                        mov ah, 0Eh
    87 000000A9 31DB                        xor bx, bx
    88 000000AB CD10                        int 10h
    89 000000AD EBF3                        jmp short print
    90                                  .exit:
    91 000000AF C3                          ret
    92                                  
    93 000000B0 496E76616C69642070-     msg1:   db "Invalid partition table.", 0
    93 000000B9 6172746974696F6E20-
    93 000000C2 7461626C652E00     
    94 000000C9 4572726F72206C6F61-     msg2:   db "Error loading operating system",0
    94 000000D2 64696E67206F706572-
    94 000000DB 6174696E6720737973-
    94 000000E4 74656D00           
    95 000000E8 4D697373696E67206F-     msg3:   db "Missing operating system",0
    95 000000F1 7065726174696E6720-
    95 000000FA 73797374656D00     
    96 00000101 00<rep BDh>                 times (01BEh - ($-$$)) db 00h    ;Pad the partition table to the right place
    97                                  
    98 000001BE 000000000000000000-     tbl1:   db 10h dup (0)
    98 000001C7 00000000000000     
    99 000001CE 000000000000000000-     tbl2:   db 10h dup (0)
    99 000001D7 00000000000000     
   100 000001DE 000000000000000000-     tbl3:   db 10h dup (0)
   100 000001E7 00000000000000     
   101 000001EE 000000000000000000-     tbl4:   db 10h dup (0)
   101 000001F7 00000000000000     
   102                                  
   103 000001FE 55AA                            dw 0AA55h
   104                                  pktptr: ;Packet Pointer, 16 bytes in size, always past the tail
   104          ------------------       info: assembly required 1+2+2 passes

