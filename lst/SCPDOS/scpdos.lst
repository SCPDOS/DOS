     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volLabelFile    equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> charFile        equ 40h ;Reserved, never found in dir
   176                              <1> ;Device Info equates
   177                              <1> ;For a block device, bits [5:0] contain the drive number
   178                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   179                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   180                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   181                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   182                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   183                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   184                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   185                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   186                              <1> devCharDev      equ 80h ;If set, it is a char device!
   187                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   188                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   189                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   190                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   191                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   192                              <1>  
   193                              <1> ;------------------------------------------------------------------------;
   194                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   195                              <1> ; to an internal buffer, and then copying it to the specified location
   196                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   197                              <1> ; another request for the same sector from the same device is made, so 
   198                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   199                              <1> ; size, selected according to the largest detected sector size during 
   200                              <1> ; the initial loadup.
   201                              <1> ;
   202                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   203                              <1> ;
   204                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   205                              <1> ;------------------------------------------------------------------------;
   206                              <1> 
   207                              <1> struc bufferHdr
   208 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   209 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   210 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   211 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   212 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   213 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   214 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   215 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   216 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   217                              <1>     .dataarea:             ;Points to the start of the data area
   218                              <1> endstruc
   219                              <1> ;Buffer Flag equates
   220                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   221                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   222                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   223                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   224                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   225                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   226                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   227                              <1> ;Note! A buffer is marked as referenced only when the application 
   228                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> ; Memory control block for each memory arena
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> struc mcb
   233 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   234 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   235 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   236                              <1>     ;The following byte is reserved outside of sysinit
   237 0000000D ??                  <1>     .subSysMark resb 1  ;Marks the optional DOS subsystem of the MCB
   238 0000000E ????                <1>     .reserved   resb 2  
   239                              <1>     .program:
   240                              <1> endstruc
   241                              <1> ;MCB equates
   242                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   243                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   244                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   245                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   246                              <1> mcbMarkCtn      equ "M"
   247                              <1> mcbMarkEnd      equ "Z"
   248                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   249                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   250                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   251                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   252                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   253                              <1> mcbSubIFS       equ "I" ;Unused for now
   254                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   255                              <1> mcbSubFCBS      equ "X" ;Unused for now
   256                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   257                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   258                              <1> mcbSubStacks    equ "S" ;Unused for now
   259                              <1> 
   260                              <1> 
   261                              <1> memFirstFit     equ 0   ;First free block goes to application
   262                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   263                              <1> memLastFit      equ 2   ;Last free block goes to application
   264                              <1> 
   265                              <1> ;Owner = Para aligned address => Owning application PSP
   266                              <1> ;...To consider...
   267                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   268                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   269                              <1> ;------------------------------------------------------------------------;
   270                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   271                              <1> ; following order, thus allowing for return values to be placed in the 
   272                              <1> ; registers by accessing the caller register stack frame.
   273                              <1> ;------------------------------------------------------------------------;
   274                              <1> struc callerFrame
   275 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   276 00000008 ????????????????    <1>     .rbx    resq 1    
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .rbp    resq 1
   282 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   283 00000040 ????????????????    <1>     .r9     resq 1
   284                              <1> ;Pushed by Processor when invoked via Interrupt
   285 00000048 ????????????????    <1>     .rip    resq 1
   286 00000050 ????????????????    <1>     .cs     resq 1
   287 00000058 ????????????????    <1>     .flags  resq 1
   288                              <1> endstruc
   289                              <1> 
   290                              <1> struc dpl
   291                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   292                              <1> ; server calls
   293 00000000 ????????????????    <1>     .rax    resq 1
   294 00000008 ????????????????    <1>     .rbx    resq 1
   295 00000010 ????????????????    <1>     .rcx    resq 1
   296 00000018 ????????????????    <1>     .rdx    resq 1
   297 00000020 ????????????????    <1>     .rsi    resq 1
   298 00000028 ????????????????    <1>     .rdi    resq 1
   299 00000030 ????????????????    <1>     .r8     resq 1
   300 00000038 ????????????????    <1>     .r9     resq 1
   301 00000040 ????????????????    <1>     .align  resq 1
   302 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   303 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   304                              <1> endstruc
   305                              <1> 
   306                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   307 00000000 ????????????????    <1>     .oldRBP         resq 1  ;Ptr to DOSSEG
   308 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   309 00000010 ????????????????    <1>     .newSFTVal      resq 1
   310 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   311 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   312 00000028 ????????????????    <1>     .newLastdrive   resq 1
   313 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   314 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   315 00000040 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   316 00000048 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   317 00000050 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line buffer of line being processed
   318 00000058 ????????????????    <1>     .driverBreak    resq 1  ;Ptr to the pathname terminator 
   319 00000060 ????????????????    <1>     .breakChar      resq 1  ;Char that was replaced by null for terminator
   320                              <1> endstruc
   321                              <1> 
   322                              <1> struc filename
   323                              <1> ;8.3 File name struct
   324 00000000 ????????????????    <1>     .fName  resb 8
   325 00000008 ??????              <1>     .fExt   resb 3
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   329 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   330 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   331 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   332 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   333 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   334 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   335 00000016 ????                <1>     .fileTime   resw 1  ;File time
   336 00000018 ????                <1>     .fileDate   resw 1  ;File date
   337 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   338 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   339                              <1> endstruc
   340                              <1> 
   341                              <1> struc psp
   342 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 20h, same place as DOS
   343 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   344 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   345 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   346 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   347 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   348 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   349                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   350 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   351 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   352 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   353 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   354 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 21h CBh, same place as DOS
   355 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   356 0000005B ??                  <1>                 resb 1  ;Reserved byte
   357                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   358                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   359                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   360                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   361                              <1> ; always used and xtraHdlSz.
   362                              <1> ;Will need to add two SYSCALLS for future expansion:
   363                              <1> ;       1) Get Program Environment Pointer
   364                              <1> ;       2) Get Command Line arguments pointer
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   375                              <1> 
   376                              <1> struc clkStruc
   377 00000000 ????                <1>     .dateWord   resw 1
   378 00000002 ??                  <1>     .minutes    resb 1
   379 00000003 ??                  <1>     .hours      resb 1
   380 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   381 00000005 ??                  <1>     .seconds    resb 1
   382                              <1> endstruc
   383                              <1> 
   384                              <1> 
   385                              <1> struc extCtryStruc
   386 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   387 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   388 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   389 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   390 00000007 ????                <1>     .dtfmt      resw 1  ;Date time format (2 bytes)
   391                              <1>                         ;0 = month day year hh:mm:ss
   392                              <1>                         ;1 = day month year hh:mm:ss
   393                              <1>                         ;2 = year month day hh:mm:ss
   394 00000009 ??????????          <1>     .curr       resb 5   ;ASCIIZ Currency symbol (5 chars)
   395 0000000E ????                <1>     .thouSep    resb 2   ;ASCIIZ Thousands separator
   396 00000010 ????                <1>     .dcmlSep    resb 2   ;ASCIIZ Decimal separator
   397 00000012 ????                <1>     .dateSep    resb 2   ;ASCIIZ Date separator
   398 00000014 ????                <1>     .timeSep    resb 2   ;ASCIIZ Time separator
   399 00000016 ??                  <1>     .currFmt    resb 1   ;Currency Format
   400                              <1>                         ;0 = Symbol leads, without space
   401                              <1>                         ;1 = Symbol follows, without space
   402                              <1>                         ;2 = Symbol leads, one space
   403                              <1>                         ;3 = Symbol follows, one space
   404                              <1>                         ;4 = Symbol replace decimal separator
   405 00000017 ??                  <1>     .digtdpt    resb 1   ;Number of digits after the decimal point
   406 00000018 ??                  <1>     .timefmt    resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   407 00000019 ????????????????    <1>     .mapptr     resb 8   ;Case map address (0 is nulptr), needs fixing up
   408 00000021 ????                <1>     .dataSep    resb 2   ;Data list separator
   409 00000023 <res Ah>            <1>     .resv       resb 10  ;Reserve 10 bytes
   410                              <1> endstruc
   411                              <1> 
   412                              <1> struc countryStruc
   413 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   414                              <1>                         ;0 = month day year hh:mm:ss
   415                              <1>                         ;1 = day month year hh:mm:ss
   416                              <1>                         ;2 = year month day hh:mm:ss
   417 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   418 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   419 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   420 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   421 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   422 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   423                              <1>                         ;0 = Symbol leads, without space
   424                              <1>                         ;1 = Symbol follows, without space
   425                              <1>                         ;2 = Symbol leads, one space
   426                              <1>                         ;3 = Symbol follows, one space
   427                              <1>                         ;4 = Symbol replace decimal separator
   428 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   429 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   430 00000012 ????????????????    <1>     .mapptr    resb 8   ;Case map address (0 is nulptr), needs fixing up
   431 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   432 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   433                              <1> endstruc
   434                              <1> 
   435                              <1> ;Critical Error AH bitfield equates
   436                              <1> critRead    equ 0h
   437                              <1> critWrite   equ 1h
   438                              <1> critDOS     equ 0h
   439                              <1> critFAT     equ 2h
   440                              <1> critDir     equ 4h
   441                              <1> critData    equ 6h
   442                              <1> critFailOK  equ 8h
   443                              <1> critRetryOK equ 10h
   444                              <1> critIgnorOK equ 20h
   445                              <1> critCharDev equ 80h
   446                              <1> 
   447                              <1> critIgnore  equ 0
   448                              <1> critRetry   equ 1
   449                              <1> critAbort   equ 2
   450                              <1> critFail    equ 3
   451                              <1> 
   452                              <1> ;MISC ASCII control chars
   453                              <1> NUL equ 00h ;^@         | ASCII Null
   454                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   455                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   456                              <1> BEL equ 07h ;^G         | ASCII Bell
   457                              <1> BSP equ 08h ;^H         | ASCII Backspace
   458                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   459                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   460                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   461                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   462                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   463                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   464                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   465                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   466                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   467                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   468                              <1> SPC equ 20h ;Printable  | ASCII Space
   469                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   470                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   471                              <1> 
   472                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   473                              <1> ;Extended Ascii Codes
   474                              <1> eF1     equ 3Bh ;F1 second byte
   475                              <1> eF2     equ 3Ch ;F2 second byte
   476                              <1> eF3     equ 3Dh ;F3 second byte
   477                              <1> eF4     equ 3Eh ;F4 second byte
   478                              <1> eF5     equ 3Fh ;F5 second byte
   479                              <1> eF6     equ 40h ;F6 second byte
   480                              <1> eF7     equ 41h ;F7 second byte
   481                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   482                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   483                              <1> eIns    equ 52h ;Insert second byte
   484                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   485                              <1> 
   486                              <1> ;Default Configuration for the system
   487                              <1> 
   488                              <1> buffersDefault  equ 30
   489                              <1> filesDefault    equ 20
   490                              <1> fcbsDefault     equ 4
   491                              <1> safeFcbsDeflt   equ 0
   492                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI44     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E81D150000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F8207190000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3DBB130000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D9F130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[361B0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B994110000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3D84130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[361B0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010D6A130000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3D850F0000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax             ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E811130000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 20h-2Fh
    57                              <1> adjInts:
    58 00000297 488D3D22100000      <1>     lea rdi, intData
    59 0000029E B820000000          <1>     mov eax, 20h            ;Start with interrupt 20h
    60 000002A3 B930000000          <1>     mov ecx, 30h
    61 000002A8 E8FB120000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 22h and 24h correctly using DOS to get them low
    66 000002AD 488D1584180000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B822250000          <1>     mov eax, 2522h   ;Int 22h, set vector
    68 000002B9 CD21                <1>     int 21h
    69 000002BB 488D1576180000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B824250000          <1>     mov eax, 2524h
    71 000002C7 CD21                <1>     int 21h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012D7A100000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012D7B100000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D355D100000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B3522130000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 488905B5120000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [33000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E828150000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F82CF170000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B35A5120000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1D95120000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E851110000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F828E170000        <1>     jc OEMHALT
   146 000003AA E810100000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E8A7110000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F8276170000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E8C3100000          <1>     call ejectKernelInit
   159 000003E1 0F8251170000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;------------------------------------------------;
   174                              <1> ;     Set up general PSP areas and DOS vars      ;
   175                              <1> ;------------------------------------------------;
   176                              <1> ;Ensure to link the default DOS vCON edit key
   177                              <1> ; controller routines before proceeding
   178 000003E7 488D85[DD2A0000]    <1>     lea rax, qword [rbp + editKeys]
   179 000003EE 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   179 000003F3 [32000000]          <1>
   180                              <1> 
   181                              <1> ;Additional DOS Vars init and fixups
   182 000003F7 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   182 000003FF FF                  <1>
   183 00000400 6466C70425-         <1>     mov word fs:[currentNdx], -1    ;Has to be -1 initially
   183 00000405 [39070000]FFFF      <1>
   184 0000040B 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   184 00000413 00                  <1>
   185 00000414 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   185 0000041C 00                  <1>
   186 0000041D 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   186 00000425 2F                  <1>
   187 00000426 488DBD[34630000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   188 0000042D 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   188 00000432 [12020000]          <1>
   189 00000436 4801AD[D6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   190 0000043D 4801AD[DF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   191 00000444 4801AD[E8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   192 0000044B 4801AD[F1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   193                              <1> 
   194                              <1> ;Server Table setup
   195 00000452 488DBD[8F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   196 00000459 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   196 0000045E [931A0000]          <1>
   197                              <1> 
   198                              <1> ;Set network machine name to... nothing!
   199 00000462 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   200 00000469 B910000000          <1>     mov ecx, 10h    ;16 chars long
   201 0000046E B020                <1>     mov al, SPC ;Space char
   202 00000470 F3AA                <1>     rep stosb   ;Fill with space chars
   203                              <1> 
   204                              <1> ;Patch Data Table init
   205 00000472 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   206 00000479 488D85[DE720000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   207 00000480 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   208 00000482 488D85[E8720000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   209 00000489 48AB                <1>     stosq
   210 0000048B 488D85[F2720000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   211 00000492 48AB                <1>     stosq
   212 00000494 488D85[FC720000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   213 0000049B 48AB                <1>     stosq
   214                              <1> 
   215                              <1> ;Initial PSP pointer fields
   216 0000049D 488D1DA4110000      <1>     lea rbx, qword [tempPSP]
   217 000004A4 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   217 000004A9 [1F040000]          <1>
   218 000004AD 53                  <1>     push rbx
   219 000004AE 4881C380000000      <1>     add rbx, psp.dta
   220 000004B5 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   220 000004BA [17040000]          <1>
   221 000004BE 5B                  <1>     pop rbx
   222 000004BF 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   223 000004C3 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   224 000004C7 4889DA              <1>     mov rdx, rbx
   225 000004CA B822350000          <1>     mov eax, 3522h  ;Get pointer for Int 22h in rbx
   226 000004CF CD21                <1>     int 21h
   227 000004D1 48895A0A            <1>     mov qword [rdx + psp.oldInt22h], rbx
   228 000004D5 B823350000          <1>     mov eax, 3523h
   229 000004DA CD21                <1>     int 21h
   230 000004DC 48895A12            <1>     mov qword [rdx + psp.oldInt23h], rbx
   231 000004E0 B824350000          <1>     mov eax, 3524h
   232 000004E5 CD21                <1>     int 21h
   233 000004E7 48895A1A            <1>     mov qword [rdx + psp.oldInt24h], rbx
   234                              <1> ;------------------------------------------------;
   235                              <1> ;              Setup DOSMGR Hooks                ;
   236                              <1> ;------------------------------------------------;   
   237 000004EB 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   238 000004F2 488D85[F67A0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   239 000004F9 48AB                <1>     stosq   ;Store ptr for LaunchTask
   240 000004FB 48AB                <1>     stosq   ;Store ptr for TerminateTask
   241                              <1> ;------------------------------------------------;
   242                              <1> ;              Setup DLLMGR Hooks                ;
   243                              <1> ;------------------------------------------------;   
   244 000004FD 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   245 00000504 488D85[F67A0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   246 0000050B 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   247 0000050D 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   248                              <1> ;------------------------------------------------;
   249                              <1> ;               Setup Share Hooks                ;
   250                              <1> ;------------------------------------------------;
   251 0000050F 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   252 00000516 488D9D[F67A0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   253 0000051D 488D85[F07A0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   254 00000524 48AB                <1>     stosq   ;Store bad for openFileCheck
   255 00000526 4893                <1>     xchg rax, rbx
   256 00000528 48AB                <1>     stosq   ;Store good for open
   257 0000052A 48AB                <1>     stosq   ;Store good for close
   258 0000052C 4893                <1>     xchg rax, rbx
   259                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   260 0000052E B905000000          <1>     mov ecx, 5
   261 00000533 F348AB              <1>     rep stosq
   262 00000536 4893                <1>     xchg rax, rbx
   263 00000538 48AB                <1>     stosq   ;Store good for check file lock exists
   264 0000053A 4893                <1>     xchg rax, rbx
   265                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   266 0000053C B903000000          <1>     mov ecx, 3
   267 00000541 F348AB              <1>     rep stosq
   268 00000544 4893                <1>     xchg rax, rbx
   269 00000546 48AB                <1>     stosq   ;Store good for close dup file share
   270 00000548 4893                <1>     xchg rax, rbx
   271 0000054A 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   272 0000054C 48AB                <1>     stosq   ;Store bad for update dir information
   273                              <1> 
   274                              <1> ;Finish by setting up internal DOS vars from OEM passed arguments.
   275 0000054E 0FB605BF100000      <1>     movzx eax, byte [OEMBIOS]
   276 00000555 85C0                <1>     test eax, eax
   277 00000557 741B                <1>     jz short skipOEMName
   278 00000559 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   279 00000560 48B8494F0000000000- <1>     mov rax, "IO"
   279 00000569 00                  <1>
   280 0000056A 488906              <1>     mov qword [rsi], rax
   281 0000056D C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   282                              <1> skipOEMName:
   283 00000574 8B05AB100000        <1>     mov eax, dword [OEMVERSION]
   284 0000057A 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   285                              <1> 
   286 00000580 488B0596100000      <1>     mov rax, qword [OEMPTR]
   287 00000587 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   288                              <1> 
   289 0000058E 0FB6057D100000      <1>     movzx eax, byte [DFLTDRIVE]
   290 00000595 31DB                <1>     xor ebx, ebx
   291 00000597 3D19000000          <1>     cmp eax, 25
   292 0000059C 0F47C3              <1>     cmova eax, ebx
   293 0000059F 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   294                              <1> 
   295 000005A5 0FB60564100000      <1>     movzx eax, byte [FILES]
   296 000005AC BB14000000          <1>     mov ebx, filesDefault
   297 000005B1 3D05000000          <1>     cmp eax, 5
   298 000005B6 0F42C3              <1>     cmovb eax, ebx
   299 000005B9 3DFE000000          <1>     cmp eax, 254
   300 000005BE 0F47C3              <1>     cmova eax, ebx
   301 000005C1 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   302                              <1> 
   303 000005C7 0FB60543100000      <1>     movzx eax, byte [BUFFERS]
   304 000005CE BB1E000000          <1>     mov ebx, buffersDefault
   305 000005D3 85C0                <1>     test eax, eax
   306 000005D5 0F44C3              <1>     cmovz eax, ebx
   307 000005D8 3D63000000          <1>     cmp eax, 99
   308 000005DD 0F47C3              <1>     cmova eax, ebx
   309 000005E0 88052B100000        <1>     mov byte [BUFFERS], al
   310                              <1> 
   311 000005E6 0FB60526100000      <1>     movzx eax, byte [LASTDRIVE]
   312 000005ED BB05000000          <1>     mov ebx, lastDriveDeflt
   313 000005F2 39D8                <1>     cmp eax, ebx
   314 000005F4 0F42C3              <1>     cmovb eax, ebx
   315 000005F7 3D19000000          <1>     cmp eax, 25
   316 000005FC 0F47C3              <1>     cmova eax, ebx
   317 000005FF 88050E100000        <1>     mov byte [LASTDRIVE], al
   318 00000605 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   319                              <1> 
   320                              <1> ;------------------------------------------------;
   321                              <1> ;          Find largest sector size              ;
   322                              <1> ;------------------------------------------------;
   323                              <1> sectorSizeSearch:
   324                              <1> ;Done by reading DPB's for each drive
   325 0000060B 31C0                <1>     xor eax, eax
   326 0000060D 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   326 00000612 [3B000000]          <1>
   327                              <1>     ;Go thru each block individually
   328                              <1> .findLargest:
   329 00000616 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   330 0000061A 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   331 0000061F 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   332 00000623 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   333 0000062A 75EA                <1>     jne short .findLargest  ;If not, keep checking
   334 0000062C 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   334 00000631 [5B000000]          <1>
   335                              <1> ;------------------------------------------------;
   336                              <1> ;                CDS array inits                 ;
   337                              <1> ;------------------------------------------------;
   338 00000635 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   339 0000063C E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   340 00000641 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   341                              <1> makeCDSArray:
   342                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   343                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   344                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   345 00000646 B85F000000          <1>     mov eax, cds_size
   346 0000064B F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   347 0000064D 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   348 00000652 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   349 00000655 31DB                <1>     xor ebx, ebx
   350 00000657 89C3                <1>     mov ebx, eax
   351 00000659 B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   352 0000065E CD21                <1>     int 21h
   353                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000660 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000662 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   354 00000663 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   355 00000666 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   356 0000066C C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   357 00000670 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   358                              <1> 
   359 00000678 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   359 0000067D [65000000]          <1>
   360 00000681 57                  <1>     push rdi
   361 00000682 51                  <1>     push rcx
   362 00000683 89C8                <1>     mov eax, ecx
   363 00000685 B95F000000          <1>     mov ecx, cds_size
   364 0000068A F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   365 0000068C 89C1                <1>     mov ecx, eax
   366 0000068E 31C0                <1>     xor eax, eax
   367 00000690 F3AA                <1>     rep stosb
   368 00000692 59                  <1>     pop rcx
   369 00000693 5F                  <1>     pop rdi
   370 00000694 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   370 00000699 [3B000000]          <1>
   371 0000069D B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   372                              <1> .tempCDS:
   373 000006A2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   374 000006A4 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   375 000006A8 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   376 000006AF 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   377 000006B5 31D2                <1>     xor edx, edx    ;Use edx for flags
   378 000006B7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   379 000006BE 7409                <1>     je .skipValidCDS
   380 000006C0 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   381 000006C5 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   382                              <1> .skipValidCDS:
   383 000006C9 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   384 000006CD FFC0                <1>     inc eax ;Increment the drive letter
   385 000006CF 4881C75F000000      <1>     add rdi, cds_size   ;Goto next array entry
   386 000006D6 FFC9                <1>     dec ecx
   387 000006D8 75C8                <1>     jnz .tempCDS
   388 000006DA C3                  <1>     ret
   389                              <1> initialCDSWritten:
   390                              <1> ;------------------------------------------------;
   391                              <1> ;        Create a Default Temporary Buffer       ;
   392                              <1> ;------------------------------------------------;
   393 000006DB 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   393 000006E0 [5B000000]          <1>
   394 000006E4 81C330000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   395 000006EA 81C30F000000        <1>     add ebx, 0Fh
   396 000006F0 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   397 000006F3 B800480000          <1>     mov eax, 4800h
   398 000006F8 CD21                <1>     int 21h
   399 000006FA 0F8238140000        <1>     jc OEMHALT
   400 00000700 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   400 00000705 [5D000000]          <1>
   401 00000709 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   402 00000710 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   403 00000716 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   404 0000071C 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   405 00000724 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   406                              <1> ;------------------------------------------------;
   407                              <1> ;          Default File Handle Creation          ;
   408                              <1> ;                                                ;
   409                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   410                              <1> ;------------------------------------------------;
   411                              <1> defaultFileHandles:
   412 00000728 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   413 0000072F 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   413 00000734 [43000000]          <1>
   414 00000738 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   415 0000073F 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   416                              <1> 
   417 00000745 E8180C0000          <1>     call openStreams
   418 0000074A 0F82E8130000        <1>     jc OEMHALT
   419                              <1> ;------------------------------------------------;
   420                              <1> ;             Print Welcome Message              ;
   421                              <1> ;------------------------------------------------;
   422 00000750 488D15380A0000      <1>     lea rdx, strtmsg
   423 00000757 B409                <1>     mov ah, 09h
   424 00000759 CD21                <1>     int 21h    
   425                              <1> ;------------------------------------------------;
   426                              <1> ;               Load CONFIG.SYS                  ;
   427                              <1> ;------------------------------------------------;
   428                              <1> ;Setup stackframe, workout base 
   429                              <1> setupFrame:
   430 0000075B 55                  <1>     push rbp
   431 0000075C 4889E5              <1>     mov rbp, rsp
   432 0000075F 4881EC68000000      <1>     sub rsp, cfgFrame_size
   433 00000766 0FB605A40E0000      <1>     movzx eax, byte [BUFFERS]
   434 0000076D 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   435 00000771 0FB605980E0000      <1>     movzx eax, byte [FILES]
   436 00000778 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   437 0000077C 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   438 00000784 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   439 0000078C 0FB605800E0000      <1>     movzx eax, byte [LASTDRIVE]
   440 00000793 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   441                              <1> 
   442 00000797 0FB615740E0000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   443 0000079E B40E                <1>     mov ah, 0Eh ;Select drive
   444 000007A0 CD21                <1>     int 21h
   445 000007A2 488D152D0A0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   446 000007A9 B43D                <1>     mov ah, 3Dh ;Open file for reading
   447 000007AB B000                <1>     mov al, ReadAccess
   448 000007AD CD21                <1>     int 21h
   449 000007AF 0F8259070000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   450                              <1> ;------------------------------------------------;
   451                              <1> ;              Process CONFIG.SYS                ;
   452                              <1> ;------------------------------------------------;
   453                              <1> ;Create a stack frame with the following order.
   454                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   455                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   456                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   457                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   458                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   459                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   460                              <1> ;
   461                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   462                              <1> ;-------------------------------------------------------------------------;
   463                              <1> ; CONFIG.SYS processing pseudocode:-
   464                              <1> ;
   465                              <1> ; _START:
   466                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   467                              <1> ; If (EOF encountered)
   468                              <1> ;   Insert a terminating ^Z to the end of the line. 
   469                              <1> ;   Close handle.
   470                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   471                              <1> ;   If (CR or EOF encoutered before terminating char)
   472                              <1> ;       Bad line error msg. 
   473                              <1> ;       If (CR encountered)
   474                              <1> ;           Goto _START
   475                              <1> ;       Else
   476                              <1> ;           Goto _EXIT
   477                              <1> ;   Else 
   478                              <1> ;       If (Keyword AND not DEVICE) 
   479                              <1> ;           Store it's value on stack or change internal variable value
   480                              <1> ;       If (DEVICE)
   481                              <1> ;           Move endPtr after end of line and try load the driver.
   482                              <1> ;           If (driver doesn't exist or fails to init)
   483                              <1> ;               print bad driver error msg.
   484                              <1> ;       Else 
   485                              <1> ;           Bad line error msg
   486                              <1> ;       If (line terminated by CR)
   487                              <1> ;           Goto _START
   488                              <1> ; _EXIT:
   489                              <1> ;-------------------------------------------------------------------------;
   490                              <1> ; Note:
   491                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   492                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   493                              <1> ;   adjust the memory pointer and start loading next line.
   494                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   495                              <1> ;   data structures according to the values on the stack frame.
   496                              <1> ;-------------------------------------------------------------------------;
   497                              <1> ;Start CONFIG.SYS parsing here
   498                              <1> configParse:
   499 000007B5 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   500 000007B9 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   501 000007C1 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
   502 000007C9 B800480000          <1>     mov eax, 4800h
   503 000007CE BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
   504 000007D3 CD21                <1>     int 21h
   505 000007D5 0F8238010000        <1>     jc .stopProcessError
   506 000007DB 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
   507 000007DF 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
   508 000007E2 482D10000000        <1>     sub rax, mcb_size 
   509 000007E8 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
   510 000007F0 31C0                <1>     xor eax, eax
   511                              <1> .nextChar:
   512 000007F2 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   513 000007F6 6681FBFFFF          <1>     cmp bx, -1
   514 000007FB 0F8412010000        <1>     je .stopProcessError
   515 00000801 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   516 00000806 B901000000          <1>     mov ecx, 1  ;Read one byte
   517 0000080B CD21                <1>     int 21h
   518 0000080D 0F8200010000        <1>     jc .stopProcessError
   519 00000813 85C0                <1>     test eax, eax	;If this is zero, EOF reached
   520 00000815 0F84DD060000        <1>     jz .cfgExit
   521                              <1> .notEOF:
   522 0000081B 0FB602              <1>     movzx eax, byte [rdx]
   523 0000081E 3C0D                <1>     cmp al, CR
   524 00000820 7420                <1>     je short .endOfLine
   525 00000822 3C0A                <1>     cmp al, LF
   526 00000824 741C                <1>     je short .endOfLine
   527 00000826 3C1A                <1>     cmp al, EOF
   528 00000828 7410                <1>     je short .endOfFileChar
   529 0000082A 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   530 0000082B B813120000          <1>     mov eax, 1213h  ;Uppercase the char if it is uppercasable
   531 00000830 CD2F                <1>     int 2Fh
   532 00000832 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   533 00000834 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   534                              <1> .notChar:
   535 00000835 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   536 00000838 EBB8                <1>     jmp short .nextChar
   537                              <1> .endOfFileChar:
   538 0000083A 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
   539                              <1> .endOfLine:
   540                              <1> ;rdx points to terminating char
   541                              <1> ;First find the length of the instruction word
   542 00000842 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   543 00000846 31C9                <1>     xor ecx, ecx
   544                              <1> .cmdNameLenGet:
   545 00000848 AC                  <1>     lodsb
   546 00000849 E8B5000000          <1>     call .isCharTerminal
   547 0000084E 740A                <1>     jz short .endOfCommandFound
   548 00000850 FFC1                <1>     inc ecx
   549 00000852 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   550 00000858 72EE                <1>     jb short .cmdNameLenGet
   551                              <1> ;Else, fall through in error
   552                              <1> .endOfCommandFound:
   553                              <1> ;ecx has the length of the command
   554 0000085A 81F90A000000        <1>     cmp ecx, 10
   555 00000860 0F84AD000000        <1>     je .stopProcessError
   556 00000866 488D3D1B010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   557                              <1> .cmdSearch:
   558 0000086D 803FFF              <1>     cmp byte [rdi], -1
   559 00000870 0F849D000000        <1>     je .stopProcessError
   560 00000876 380F                <1>     cmp byte [rdi], cl
   561 00000878 7579                <1>     jne short .gotoNextCmd
   562                              <1>     ;Candidate command found, check said command is the command we want
   563 0000087A 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   564 0000087E 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   565 00000885 0F8488000000        <1>     je .stopProcessError
   566 0000088B 57                  <1>     push rdi
   567 0000088C 51                  <1>     push rcx
   568 0000088D 48FFC7              <1>     inc rdi ;Go to next char
   569 00000890 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   570 00000892 59                  <1>     pop rcx
   571 00000893 5F                  <1>     pop rdi
   572 00000894 755D                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   573                              <1>     ;Else, rdi points to the table entry from the head of the table
   574                              <1>     ;      rcx has the length of the name field
   575                              <1>     ;rdx points to the terminating char of the line 
   576 00000896 488D35EB000000      <1>     lea rsi, .keyTbl
   577 0000089D 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   578 000008A0 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   579 000008A6 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   580 000008A9 F8                  <1>     clc ;Ensure flags are happy before entering
   581 000008AA 55                  <1>     push rbp
   582 000008AB FFD6                <1>     call rsi    ;Call this function
   583 000008AD 5D                  <1>     pop rbp
   584 000008AE 7263                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   585 000008B0 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   586 000008B8 0F853A060000        <1>     jnz .cfgExit
   587 000008BE 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   588                              <1>     ;Read the next char. 
   589                              <1>     ;If EOF, exit.
   590                              <1>     ;Else if, LF, proceed to read line routine.
   591                              <1>     ;Else, advance ptr by one and proceed to process char
   592                              <1> .endCommandClear:
   593 000008C2 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   594 000008C6 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   595 000008CB B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   596 000008D0 CD21                <1>     int 21h
   597 000008D2 723F                <1>     jc .stopProcessError
   598 000008D4 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   599 000008D6 0F841C060000        <1>     jz .cfgExit
   600                              <1>     ;Do a trash check
   601 000008DC 8A02                <1>     mov al, byte [rdx]
   602 000008DE 3C1A                <1>     cmp al, EOF
   603 000008E0 0F8412060000        <1>     je .cfgExit
   604 000008E6 3C0A                <1>     cmp al, LF
   605 000008E8 0F8404FFFFFF        <1>     je .nextChar
   606 000008EE E928FFFFFF          <1>     jmp .notEOF
   607                              <1> ;CONFIG.SYS utility functions
   608                              <1> .gotoNextCmd:
   609 000008F3 0FB607              <1>     movzx eax, byte [rdi]
   610 000008F6 0503000000          <1>     add eax, 3
   611 000008FB 4801C7              <1>     add rdi, rax
   612 000008FE E96AFFFFFF          <1>     jmp .cmdSearch
   613                              <1> .isCharTerminal:
   614                              <1> ;Input: AL = Char to check
   615                              <1> ;Output: ZF=ZE -> Char terminal
   616                              <1> ;        ZF=NZ -> Char not terminal
   617 00000903 3C3D                <1>     cmp al, "="
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000905 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000907 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 00000908 3C20                <1>     cmp al, SPC
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000090A 74(07)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 0000090C 3C09                <1>     cmp al, TAB
   622                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000090E 74(07)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   623 00000910 3C3B                <1>     cmp al, ";"
   624                              <1>     return
    13                              <2> %%_ret:
    14 00000912 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   625                              <1> .stopProcessError:
   626 00000913 E836000000          <1>     call .badLineErrorMsg
   627                              <1>     ;Reset all values to OEM defaults
   628 00000918 0FB605F20C0000      <1>     movzx eax, byte [BUFFERS]
   629 0000091F 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   630 00000923 0FB605E60C0000      <1>     movzx eax, byte [FILES]
   631 0000092A 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   632 0000092E 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   633 00000936 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   634 0000093E 0FB605CE0C0000      <1>     movzx eax, byte [LASTDRIVE]
   635 00000945 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   636 00000949 E9AA050000          <1>     jmp .cfgExit
   637                              <1>     
   638                              <1> .badLineErrorMsg:
   639                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   640 0000094E 50                  <1>     push rax
   641 0000094F 52                  <1>     push rdx
   642 00000950 488D150A000000      <1>     lea rdx, .speLine
   643 00000957 B800090000          <1>     mov eax, 0900h
   644 0000095C CD21                <1>     int 21h
   645 0000095E 5A                  <1>     pop rdx
   646 0000095F 58                  <1>     pop rax
   647                              <1>     return
    13                              <2> %%_ret:
    14 00000960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648 00000961 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   648 0000096A 6E6973656420636F6D- <1>
   648 00000973 6D616E6420696E2043- <1>
   648 0000097C 4F4E4649472E535953- <1>
   648 00000985 0D0A24              <1>
   649                              <1> .keyTbl: 
   650 00000988 05425245414B        <1>     db 5, "BREAK"           ;DONE
   651 0000098E 7800                <1> 	dw .breakHandler - .keyTbl
   652 00000990 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   653 00000998 AE00                <1> 	dw .bufHandler - .keyTbl
   654 0000099A 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   655 000009A2 6F05                <1> 	dw .countryScan - .keyTbl
   656 000009A4 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   657 000009AB 2B01                <1> 	dw .drvLoader - .keyTbl
   658 000009AD 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   659 000009B2 6F05                <1> 	dw .fcbHandler - .keyTbl
   660 000009B4 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   661 000009BA 6804                <1> 	dw .sftHandler - .keyTbl
   662 000009BC 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   662 000009C5 45                  <1>
   663 000009C6 1D05                <1> 	dw .lastdriveHandler - .keyTbl
   664 000009C8 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   665 000009CE 6F05                <1> 	dw .shellHandler - .keyTbl
   666 000009D0 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   667 000009D7 6F05                <1> 	dw .stacksHandler - .keyTbl
   668 000009D9 08445249565041524D  <1>     db 8, "DRIVPARM"
   669 000009E2 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   670 000009E4 FF                  <1> 	db -1	;End of table marker
   671                              <1> .cfgSkipLeadingSpaces:
   672                              <1> ;Input: rsi -> Start of string to skip spaces of
   673                              <1> ;Output: rsi -> First non-space char in string
   674 000009E5 50                  <1>     push rax
   675 000009E6 51                  <1>     push rcx
   676 000009E7 57                  <1>     push rdi
   677 000009E8 4889F7              <1>     mov rdi, rsi
   678 000009EB B820000000          <1>     mov eax, SPC
   679 000009F0 31C9                <1>     xor ecx, ecx
   680 000009F2 FFC9                <1>     dec ecx
   681 000009F4 F3AE                <1>     repe scasb  ;
   682 000009F6 4889FE              <1>     mov rsi, rdi
   683 000009F9 5F                  <1>     pop rdi
   684 000009FA 59                  <1>     pop rcx
   685 000009FB 58                  <1>     pop rax
   686 000009FC 48FFCE              <1>     dec rsi
   687                              <1>     return
    13                              <2> %%_ret:
    14 000009FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   688                              <1> 
   689                              <1> .breakHandler:
   690 00000A00 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   691 00000A04 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
   692                              <1>     ;This must be the word ON or OFF 
   693 00000A0B E8D5FFFFFF          <1>     call .cfgSkipLeadingSpaces
   694 00000A10 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   695 00000A12 66813E4F4E          <1>     cmp word [rsi], "ON"
   696 00000A17 7413                <1>     je .breakOn
   697 00000A19 66813E4F46          <1>     cmp word [rsi], "OF"
   698 00000A1E 7506                <1>     jne .breakBad
   699 00000A20 807E0246            <1>     cmp byte [rsi + 2], "F"
   700 00000A24 7408                <1>     je .breakCommon
   701                              <1> .breakBad:
   702 00000A26 E823FFFFFF          <1>     call .badLineErrorMsg
   703                              <1>     return
    13                              <2> %%_ret:
    14 00000A2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   704                              <1> .breakOn:
   705 00000A2C FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   706                              <1> .breakCommon:
   707 00000A2E B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   708 00000A33 CD21                <1>     int 21h
   709                              <1>     return
    13                              <2> %%_ret:
    14 00000A35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> 
   711                              <1> .bufHandler:
   712 00000A36 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   713 00000A3A 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
   714                              <1>     ;This must be at most three digits, anything else is a failure
   715 00000A41 E89FFFFFFF          <1>     call .cfgSkipLeadingSpaces
   716 00000A46 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   717 00000A49 31C9                <1>     xor ecx, ecx
   718 00000A4B AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   719 00000A4C 3C30                <1>     cmp al, "0"
   720 00000A4E 724C                <1>     jb .bufHandlerErr
   721 00000A50 3C39                <1>     cmp al, "9"
   722 00000A52 7748                <1>     ja .bufHandlerErr
   723 00000A54 FFC1                <1>     inc ecx ;Increment char counter
   724 00000A56 AC                  <1>     lodsb   ;Get second char
   725 00000A57 E846000000          <1>     call .bufHandlerTermCheck
   726 00000A5C 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   727 00000A5E 3C30                <1>     cmp al, "0"
   728 00000A60 723A                <1>     jb .bufHandlerErr
   729 00000A62 3C39                <1>     cmp al, "9"
   730 00000A64 7736                <1>     ja .bufHandlerErr
   731 00000A66 AC                  <1>     lodsb   ;Check no more chars!
   732 00000A67 E836000000          <1>     call .bufHandlerTermCheck
   733 00000A6C 752E                <1>     jne .bufHandlerErr
   734                              <1> .bufHandlerProcess:
   735 00000A6E 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   736 00000A70 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   737                              <1> .bufHandlerLp:
   738 00000A73 AC                  <1>     lodsb   ;Get the digit
   739 00000A74 E819000000          <1>     call .bufHandlerMul
   740 00000A79 67E304              <1>     jecxz .bufHandlerPrepExit
   741 00000A7C FFC9                <1>     dec ecx
   742 00000A7E EBF3                <1>     jmp short .bufHandlerLp 
   743                              <1> .bufHandlerPrepExit:
   744                              <1> ;edx has the value now, so place it in stack
   745 00000A80 0FB60D8A0B0000      <1>     movzx ecx, byte [BUFFERS]
   746 00000A87 85D2                <1>     test edx, edx
   747 00000A89 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
   748 00000A8C 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
   749 00000A90 F8                  <1>     clc
   750                              <1>     return
    13                              <2> %%_ret:
    14 00000A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> .bufHandlerMul:
   752 00000A92 2C30                <1>     sub al, "0" ;Convert to a binary value
   753 00000A94 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   754 00000A96 0FB7C0              <1>     movzx eax, ax
   755 00000A99 01C2                <1>     add edx, eax
   756                              <1>     return
    13                              <2> %%_ret:
    14 00000A9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> .bufHandlerErr:
   758 00000A9C E8ADFEFFFF          <1>     call .badLineErrorMsg
   759                              <1>     return
    13                              <2> %%_ret:
    14 00000AA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   760                              <1> .bufHandlerTermCheck:
   761 00000AA2 3C20                <1>     cmp al, SPC
   762                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA4 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00000AA6 3C09                <1>     cmp al, TAB
   764                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA8 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 00000AAA 3C0D                <1>     cmp al, CR
   766                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AAC 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 00000AAE 3C0A                <1>     cmp al, LF
   768                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AB0 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769                              <1>     return
    13                              <2> %%_ret:
    14 00000AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   770                              <1> 
   771                              <1> ;===============================
   772                              <1> ;   Device Driver Loader here  :
   773                              <1> ;===============================
   774                              <1> .drvLoader:
   775                              <1> ;    mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
   776 00000AB3 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   777 00000AB7 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
   778 00000ABE 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   779 00000AC1 B820000000          <1>     mov eax, SPC
   780 00000AC6 51                  <1>     push rcx
   781 00000AC7 31C9                <1>     xor ecx, ecx
   782 00000AC9 FFC9                <1>     dec ecx
   783 00000ACB F3AE                <1>     repe scasb      ;Skip leading spaces for name (between = and first char)
   784 00000ACD 59                  <1>     pop rcx
   785                              <1> ;Now search for the first char after pathname. 
   786 00000ACE 4889FE              <1>     mov rsi, rdi
   787                              <1> .drvFindEndOfFileName:
   788 00000AD1 AC                  <1>     lodsb ;Get char from string name
   789                              <1>     ;Was the char a primitive string terminator?
   790 00000AD2 3C20                <1>     cmp al, SPC
   791 00000AD4 740C                <1>     je short .fileNameFound
   792 00000AD6 3C1A                <1>     cmp al, EOF
   793 00000AD8 7408                <1>     je short .fileNameFound
   794 00000ADA 3C0D                <1>     cmp al, CR
   795 00000ADC 7404                <1>     je short .fileNameFound
   796 00000ADE 3C0A                <1>     cmp al, LF
   797 00000AE0 75EF                <1>     jne short .drvFindEndOfFileName
   798                              <1> .fileNameFound:
   799 00000AE2 48FFCE              <1>     dec rsi ;Point rdi to the space itself
   800 00000AE5 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   801 00000AE9 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   802 00000AEC 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   803 00000AF0 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   804                              <1>     ;rdx -> Filename
   805                              <1>     ;Here open the file to attempt to see how much space to 
   806                              <1>     ; allocate to the file for loading. 
   807                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   808                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   809                              <1>     ; which would allow for opening of files independently of calling programs'
   810                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   811 00000AF3 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   812 00000AF8 CD21                <1>     int 21h
   813 00000AFA 0F82B4020000        <1>     jc .drvBad
   814 00000B00 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   815 00000B03 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   816 00000B05 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   817 00000B0A CD21                <1>     int 21h
   818 00000B0C 89C6                <1>     mov esi, eax    ;Save the file size in esi
   819 00000B0E 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   820 00000B10 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   821 00000B15 CD21                <1>     int 21h
   822 00000B17 53                  <1>     push rbx        ;Push the file handle on the stack
   823 00000B18 BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   824 00000B1D B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   825 00000B22 CD21                <1>     int 21h
   826 00000B24 5B                  <1>     pop rbx         ;Get the handle back in rbx
   827 00000B25 0F8299020000        <1>     jc .drvMemClose
   828 00000B2B 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   829 00000B2E B940000000          <1>     mov ecx, imageDosHdr_size
   830 00000B33 B8003F0000          <1>     mov eax, 3F00h  ;READ
   831 00000B38 CD21                <1>     int 21h
   832 00000B3A 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   833 00000B3D 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   834 00000B40 730C                <1>     jnc short .headerReadOK
   835                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   836                              <1>     ;r8 must point to the block to free
   837 00000B42 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   838 00000B47 CD21                <1>     int 21h
   839 00000B49 E95F020000          <1>     jmp .drvBadClose
   840                              <1> .headerReadOK:
   841                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   842 00000B4E 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   843                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   844 00000B51 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   845 00000B56 7430                <1>     je short .exeDrivers
   846 00000B58 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   847 00000B5D 7429                <1>     je short .exeDrivers
   848                              <1> ;.COM drivers come down here
   849                              <1>     ;Get File Image Allocation Size in ecx here.
   850                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   851 00000B5F 31C9                <1>     xor ecx, ecx
   852 00000B61 31D2                <1>     xor edx, edx
   853 00000B63 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   854 00000B68 CD21                <1>     int 21h
   855                              <1>     ;eax now has the filesize. 
   856 00000B6A 89C1                <1>     mov ecx, eax
   857 00000B6C 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   858 00000B72 81C101000000        <1>     add ecx, 1h     ;... and round up!
   859 00000B78 C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   860 00000B7B 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   861 00000B81 73BF                <1>     jae .drvFreeMemAndHdl
   862 00000B83 E97C000000          <1>     jmp .loadCont
   863                              <1> .exeDrivers:
   864                              <1>     ;Get the file pointer for file header
   865 00000B88 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   866 00000B8B 31C9                <1>     xor ecx, ecx
   867 00000B8D B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   868 00000B92 CD21                <1>     int 21h
   869                              <1>     ;Now read in imageFileHeader here
   870 00000B94 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   871 00000B97 B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   872 00000B9C B8003F0000          <1>     mov eax, 3F00h  ;READ
   873 00000BA1 CD21                <1>     int 21h
   874 00000BA3 729D                <1>     jc short .drvFreeMemAndHdl
   875 00000BA5 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   876 00000BAA 7296                <1>     jb short .drvFreeMemAndHdl
   877 00000BAC 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   878 00000BB2 758E                <1>     jne .drvFreeMemAndHdl
   879 00000BB4 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   880 00000BBA 7586                <1>     jne .drvFreeMemAndHdl
   881 00000BBC 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   882 00000BC2 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   883                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   884 00000BC8 B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   885 00000BCD B8003F0000          <1>     mov eax, 3F00h  ;READ
   886 00000BD2 CD21                <1>     int 21h
   887 00000BD4 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   888 00000BDA 3D38000000          <1>     cmp eax, 56
   889 00000BDF 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   890                              <1>     ;Round up size requirement.
   891                              <1>     ;If .EXE, round up to nearest section alignment
   892 00000BE5 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   893 00000BE8 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   894 00000BEB 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   895 00000BED FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   896 00000BEF F7D0                <1>     not eax         ;Flip the set and clear bits
   897 00000BF1 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   898 00000BF3 01F1                <1>     add ecx, esi    ;Now round upwards!
   899 00000BF5 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   900 00000BF8 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   901 00000BFE 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   902                              <1> .loadCont:
   903 00000C04 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   904 00000C09 CD21                <1>     int 21h ;r8 has the pointer to the block for freeing
   905                              <1>     ;Now close the file
   906 00000C0B B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   907 00000C10 CD21                <1>     int 21h
   908 00000C12 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   909 00000C14 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   910 00000C19 CD21                <1>     int 21h         ;rax gets the pointer to load the program into
   911 00000C1B 0F82A3010000        <1>     jc .drvMemClose
   912                              <1>     ;Now set the subsystem marker and the owner to DOS
   913 00000C21 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   914 00000C25 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   915                              <1>     ;Build the overlay command block
   916 00000C2D 488D1DBC050000      <1>     lea rbx, cmdBlock
   917 00000C34 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   918 00000C37 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   919 00000C3B 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   920 00000C3F 4881C207000000      <1>     add rdx, 7  ;Go past DEVICE= to the null terminated pathname
   921 00000C46 B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   922 00000C4B CD21                <1>     int 21h
   923 00000C4D 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   924                              <1> .badDriverLoad:
   925 00000C4F 4C8B059A050000      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   926 00000C56 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   927 00000C5B CD21                <1>     int 21h
   928 00000C5D 488D1508000000      <1>     lea rdx, .drvMemMsg
   929 00000C64 B800090000          <1>     mov eax, 0900h
   930 00000C69 CD21                <1>     int 21h
   931                              <1>     return
    13                              <2> %%_ret:
    14 00000C6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932 00000C6C 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   932 00000C75 756768206D656D6F72- <1>
   932 00000C7E 7920666F7220647269- <1>
   932 00000C87 7665720D0A24        <1>
   933                              <1> .loadOk:
   934                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   935 00000C8D 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   936 00000C90 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   937                              <1>     ;Reset the command line to have a space at the null terminator
   938 00000C93 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   939 00000C97 53                  <1>     push rbx
   940 00000C98 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   941 00000C9B 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   942 00000C9D 5B                  <1>     pop rbx
   943                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   944                              <1>     ;Hence, rsi points to that byte!
   945                              <1>     ;Pointers of each header need adjustment relative to their load address,
   946                              <1>     ; and linking into the main driver chain after NUL.
   947                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   948                              <1>     ;                 Else, free using kernel eject routine.
   949 00000C9E 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   950                              <1> .driverPtrAdjustment:
   951 00000C9F 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   952 00000CA3 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   953 00000CA7 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   954 00000CAE 7408                <1>     je short .driverPtrAdjustmentDone
   955 00000CB0 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   956 00000CB3 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   957 00000CB6 EBE7                <1>     jmp short .driverPtrAdjustment
   958                              <1> .driverPtrAdjustmentDone:
   959 00000CB8 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   960                              <1>     ;Prepare for initialising the drivers in the arena
   961                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   962 00000CB9 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   963 00000CBC 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   963 00000CC5 00                  <1>
   964 00000CC6 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   964 00000CCB [1F040000]          <1>
   965 00000CCF 488D1D53090000      <1>     lea rbx, initDrvBlk
   966 00000CD6 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   967 00000CDA 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   968 00000CDE 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   969                              <1> .driverInit:
   970 00000CE2 4C87E5              <1>     xchg r12, rbp
   971 00000CE5 E80B080000          <1>     call initDriver
   972 00000CEA 725E                <1>     jc short .driverBadRbpAdjust
   973 00000CEC E8CE060000          <1>     call addDriverMarkers
   974 00000CF1 4C87E5              <1>     xchg r12, rbp
   975 00000CF4 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   976 00000CFA 7507                <1>     jnz short .driverInitialised
   977 00000CFC E862080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   978 00000D01 724A                <1>     jc short .driverBad
   979                              <1> .driverInitialised:
   980 00000D03 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   981 00000D0A 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   982 00000D0E 75D2                <1>     jne short .driverInit ;If not, goto next driver
   983                              <1> ;Now we eject the init routines for the driver
   984                              <1> ;r8 points to the MCB data area already
   985 00000D10 31DB                <1>     xor ebx, ebx
   986 00000D12 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   987 00000D16 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   988 00000D1A 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   989 00000D21 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   990 00000D26 E879070000          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   991                              <1>     ;Link into main driver chain, 
   992                              <1>     ;r9 points to first driver in block
   993                              <1>     ;rsi points to last driver in block
   994 00000D2B 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   995 00000D2F 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   996 00000D36 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   997 00000D39 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   998 00000D3C 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   999                              <1> .driverExit:
  1000                              <1> ;Exit the init routine if it all works out, WOO!
  1001                              <1> ;Return values to original registers/memory locations
  1002 00000D3F 644C891C25-         <1>     mov qword fs:[currentPSP], r11
  1002 00000D44 [1F040000]          <1>
  1003 00000D48 F8                  <1>     clc
  1004                              <1>     return
    13                              <2> %%_ret:
    14 00000D49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1005                              <1> .driverBadRbpAdjust:
  1006 00000D4A 4C89E5              <1>     mov rbp, r12
  1007                              <1> .driverBad:
  1008                              <1>     ;Form the string to print
  1009 00000D4D 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
  1010 00000D54 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
  1011 00000D5A 750C                <1>     jnz short .driverCharBad    ;If not, exit
  1012                              <1>     ;MSD devices need to have something placed in there
  1013 00000D5C 48B84D534420646576- <1>     mov rax, "MSD dev "
  1013 00000D65 20                  <1>
  1014 00000D66 48AB                <1>     stosq   ;Store the 8 chars here
  1015                              <1> .driverCharBad:
  1016 00000D68 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
  1017 00000D6C 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
  1018                              <1> .driverBadPrint:
  1019 00000D6E 488D1510000000      <1>     lea rdx, .driverBad1
  1020 00000D75 B800090000          <1>     mov eax, 0900h  ;Print the string!
  1021 00000D7A CD21                <1>     int 21h
  1022 00000D7C B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
  1023 00000D81 CD21                <1>     int 21h
  1024 00000D83 EBBA                <1>     jmp short .driverExit
  1025 00000D85 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
  1025 00000D8E 6E697469616C697369- <1>
  1025 00000D97 6E6720647269766572- <1>
  1025 00000DA0 3A20                <1>
  1026 00000DA2 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
  1026 00000DAB 0A24                <1>
  1027                              <1> ;------------------
  1028                              <1> ;Bad exit cases
  1029                              <1> ;------------------
  1030                              <1> .drvBadClose:
  1031 00000DAD B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1032 00000DB2 CD21                <1>     int 21h
  1033                              <1> .drvBad:
  1034 00000DB4 488D1519000000      <1>     lea rdx, .drvBadMsg
  1035                              <1> .drvBad2:
  1036 00000DBB B800090000          <1>     mov eax, 0900h
  1037 00000DC0 CD21                <1>     int 21h
  1038 00000DC2 F8                  <1>     clc ;Never return with CF=CY
  1039                              <1>     return
    13                              <2> %%_ret:
    14 00000DC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1040                              <1> .drvMemClose:
  1041 00000DC4 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1042 00000DC9 CD21                <1>     int 21h
  1043 00000DCB 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
  1044 00000DD2 EBE7                <1>     jmp short .drvBad2
  1045                              <1> 
  1046 00000DD4 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
  1046 00000DDD 6D697373696E672066- <1>
  1046 00000DE6 696C656E616D650D0A- <1>
  1046 00000DEF 24                  <1>
  1047                              <1> 
  1048                              <1> .sftHandler:
  1049                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1050 00000DF0 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1051 00000DF4 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1052 00000DFB E8E5FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1053                              <1>     ;This must be at most three digits, anything else is a failure
  1054 00000E00 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1055 00000E03 31C9                <1>     xor ecx, ecx
  1056 00000E05 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1057 00000E06 3C30                <1>     cmp al, "0"
  1058 00000E08 0F8280000000        <1>     jb .sftHandlerErr
  1059 00000E0E 3C39                <1>     cmp al, "9"
  1060 00000E10 777C                <1>     ja .sftHandlerErr
  1061 00000E12 FFC1                <1>     inc ecx ;Increment char counter
  1062 00000E14 AC                  <1>     lodsb   ;Get second char
  1063 00000E15 E87A000000          <1>     call .sftHandlerTermCheck
  1064 00000E1A 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1065 00000E1C 3C30                <1>     cmp al, "0"
  1066 00000E1E 726E                <1>     jb .sftHandlerErr
  1067 00000E20 3C39                <1>     cmp al, "9"
  1068 00000E22 776A                <1>     ja .sftHandlerErr
  1069 00000E24 FFC1                <1>     inc ecx ;Increment char counter
  1070 00000E26 AC                  <1>     lodsb   ;Get third char
  1071 00000E27 E868000000          <1>     call .sftHandlerTermCheck
  1072 00000E2C 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1073 00000E2E 3C30                <1>     cmp al, "0"
  1074 00000E30 725C                <1>     jb .sftHandlerErr
  1075 00000E32 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1076 00000E34 7758                <1>     ja .sftHandlerErr
  1077 00000E36 AC                  <1>     lodsb   ;Check no more chars!
  1078 00000E37 E858000000          <1>     call .sftHandlerTermCheck
  1079 00000E3C 7550                <1>     jne .sftHandlerErr
  1080 00000E3E FFC1                <1>     inc ecx ;Increment char counter
  1081                              <1> .sftHandlerProcess:
  1082 00000E40 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1083 00000E42 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1084                              <1> .sftHandlerLp:
  1085 00000E45 FFC9                <1>     dec ecx
  1086 00000E47 AC                  <1>     lodsb   ;Get the digit
  1087 00000E48 E819000000          <1>     call .sftHandlerMul
  1088 00000E4D 67E302              <1>     jecxz .sftHandlerPrepExit
  1089 00000E50 EBF3                <1>     jmp short .sftHandlerLp 
  1090                              <1> .sftHandlerPrepExit:
  1091                              <1> ;edx has the value now, so place it in stack
  1092 00000E52 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1093 00000E57 81FA08000000        <1>     cmp edx, 8
  1094 00000E5D 0F42D1              <1>     cmovb edx, ecx
  1095 00000E60 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1096 00000E64 F8                  <1>     clc
  1097                              <1>     return
    13                              <2> %%_ret:
    14 00000E65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> .sftHandlerMul:
  1099                              <1> ;Input:
  1100                              <1> ;al = digit to add to result (ASCII digit)
  1101                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
  1102                              <1> ;rdx = Accumulated sum
  1103                              <1> ;Output:
  1104                              <1> ;rdx = Accumulated sum with al added
  1105                              <1> ;eax is destroyed
  1106                              <1> ;All other registers preserved
  1107 00000E66 51                  <1>     push rcx
  1108 00000E67 52                  <1>     push rdx
  1109 00000E68 0FB6C0              <1>     movzx eax, al
  1110 00000E6B 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
  1111 00000E70 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
  1112 00000E75 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
  1113 00000E77 BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
  1114 00000E7C B964000000          <1>     mov ecx, 100
  1115 00000E81 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
  1116 00000E84 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
  1117 00000E87 F7E3                <1>     mul ebx    ;Multiply the base offset to eax
  1118 00000E89 5A                  <1>     pop rdx ;Get the accumulated value back
  1119 00000E8A 01C2                <1>     add edx, eax    ;Add this result over
  1120 00000E8C 59                  <1>     pop rcx
  1121                              <1>     return
    13                              <2> %%_ret:
    14 00000E8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1122                              <1> .sftHandlerErr:
  1123 00000E8E E8BBFAFFFF          <1>     call .badLineErrorMsg
  1124                              <1>     return
    13                              <2> %%_ret:
    14 00000E93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1125                              <1> .sftHandlerTermCheck:
  1126 00000E94 3C20                <1>     cmp al, SPC
  1127                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E96 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1128 00000E98 3C09                <1>     cmp al, TAB
  1129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E9A 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1130 00000E9C 3C0D                <1>     cmp al, CR
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E9E 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132 00000EA0 3C0A                <1>     cmp al, LF
  1133                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000EA2 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1134                              <1>     return
    13                              <2> %%_ret:
    14 00000EA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> 
  1136                              <1> .lastdriveHandler:
  1137 00000EA5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1138 00000EA9 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1139 00000EB0 E830FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1140 00000EB5 AC                  <1>     lodsb   ;Get this char
  1141 00000EB6 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1142 00000EB9 50                  <1>     push rax    ;Push on stack
  1143 00000EBA B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1144 00000EBF CD2F                <1>     int 2Fh
  1145 00000EC1 5B                  <1>     pop rbx
  1146 00000EC2 3C5A                <1>     cmp al, "Z"
  1147 00000EC4 77C8                <1>     ja .sftHandlerErr
  1148 00000EC6 3C41                <1>     cmp al, "A"
  1149 00000EC8 72C4                <1>     jb .sftHandlerErr
  1150 00000ECA 803E0D              <1>     cmp byte [rsi], CR
  1151 00000ECD 740F                <1>     je .ldProceed
  1152 00000ECF 803E0A              <1>     cmp byte [rsi], LF
  1153 00000ED2 740A                <1>     je .ldProceed
  1154 00000ED4 803E09              <1>     cmp byte [rsi], TAB
  1155 00000ED7 7405                <1>     je .ldProceed
  1156 00000ED9 803E20              <1>     cmp byte [rsi], SPC
  1157 00000EDC 75B0                <1>     jne .sftHandlerErr
  1158                              <1> .ldProceed:
  1159 00000EDE 2C41                <1>     sub al, "A" ;Convert into a number
  1160 00000EE0 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1161 00000EE3 BA05000000          <1>     mov edx, lastDriveDeflt
  1162 00000EE8 3D05000000          <1>     cmp eax, lastDriveDeflt
  1163 00000EED 0F42C2              <1>     cmovb eax, edx
  1164 00000EF0 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1165 00000EF4 F8                  <1>     clc
  1166                              <1>     return
    13                              <2> %%_ret:
    14 00000EF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> .ldBad:
  1168 00000EF6 F9                  <1>     stc
  1169                              <1> .countryScan:
  1170                              <1> .fcbHandler:
  1171                              <1> .shellHandler:
  1172                              <1> .stacksHandler:
  1173                              <1> .drivParm:
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00000EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> .cfgExit:
  1177 00000EF8 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1178 00000EFC B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
  1179 00000F01 CD21                <1>     int 21h ;bx already has the handle
  1180 00000F03 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
  1181 00000F07 B800490000          <1>     mov eax, 4900h  ;FREE
  1182 00000F0C CD21                <1>     int 21h
  1183                              <1> ;------------------------------------------------;
  1184                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1185                              <1> ;                  CONFIG.SYS                    ;
  1186                              <1> ;------------------------------------------------;
  1187                              <1> ;Add additional buffers.
  1188                              <1> ;Add additional SFT entries.
  1189                              <1> ;Add additional FCBS.
  1190                              <1> ;Create a larger CDS if needed.
  1191                              <1> noCfg:
  1192                              <1> ;Start with buffers:
  1193 00000F0E 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
  1194 00000F12 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
  1195 00000F18 0F84A5000000        <1>     je .skipBuffers
  1196 00000F1E FFC9                <1>     dec ecx  ;Minus one now
  1197 00000F20 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1198                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1199 00000F28 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
  1199 00000F2D [5B000000]          <1>
  1200 00000F31 0530000000          <1>     add eax, bufferHdr_size ;eax has the size to add
  1201 00000F36 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
  1202 00000F37 F7E1                <1>     mul ecx ;Get total size to allocate in eax
  1203 00000F39 5A                  <1>     pop rdx     ;and get the total value back in rdx
  1204 00000F3A 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
  1205 00000F3C 81C30F000000        <1>     add ebx, 0Fh
  1206 00000F42 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
  1207 00000F45 B800480000          <1>     mov eax, 4800h  ;ALLOC
  1208 00000F4A CD21                <1>     int 21h
  1209 00000F4C 7275                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
  1210                              <1>     ;Each buffer has no flags, drive number must be -1
  1211 00000F4E 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
  1212 00000F51 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
  1213 00000F54 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
  1214 00000F5A 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
  1215 00000F62 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
  1216 00000F66 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
  1216 00000F6B [5D000000]          <1>
  1217 00000F6F 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
  1218 00000F72 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1219 00000F75 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1220 00000F77 FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
  1221 00000F79 67E325              <1>     jecxz .lastBuffer
  1222                              <1> .bufferLoop:
  1223 00000F7C 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1224 00000F7F 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1225 00000F82 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1226 00000F88 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1227 00000F8C 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1228 00000F8F 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1229 00000F92 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1230 00000F96 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1231 00000F9A 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1232 00000F9D FFC9                <1>     dec ecx
  1233 00000F9F 75DB                <1>     jnz .bufferLoop
  1234                              <1> .lastBuffer:
  1235 00000FA1 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1236 00000FA4 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1237 00000FAB 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1238 00000FB1 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1239 00000FB5 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1240 00000FB8 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1241 00000FBB 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1242 00000FBF 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1243                              <1> .skipBuffers:
  1244                              <1> ;Now build a new SFT header for the number of files specified by user
  1245 00000FC3 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1246 00000FC7 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1247 00000FCD 7663                <1>     jbe short .skipSFT
  1248                              <1>     ;First compute how big this new arena needs to be
  1249 00000FCF 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
  1250 00000FD5 B84F000000          <1>     mov eax, sft_size
  1251 00000FDA F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1252 00000FDC 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1253 00000FE1 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1254 00000FE3 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1255 00000FE9 C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1256 00000FEC B800480000          <1>     mov eax, 4800h
  1257 00000FF1 CD21                <1>     int 21h
  1258 00000FF3 723D                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
  1259 00000FF5 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
  1259 00000FFA [43000000]          <1>
  1260 00000FFE 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
  1261 00001001 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
  1262 00001005 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
  1263 0000100C 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1264 00001012 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1265 0000101A C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
  1266                              <1>     ;Point rdi to first sft in this arena
  1267 0000101E 488D781A            <1>     lea rdi, qword [rax + sfth_size + mcb_size]
  1268                              <1> .initExtraSFTs:
  1269 00001022 66C7070000          <1>     mov word [rdi], 0
  1270 00001027 4881C74F000000      <1>     add rdi, sft_size   ;Goto next SFT
  1271 0000102E FFC9                <1>     dec ecx
  1272 00001030 75F0                <1>     jnz .initExtraSFTs  ;Remember uop hybridisation (don't use loop)
  1273                              <1> .skipSFT:
  1274                              <1> ;FCBS now
  1275 00001032 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1276 00001036 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
  1277 00001039 B84F000000          <1>     mov eax, sft_size
  1278 0000103E F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1279 00001040 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1280 00001045 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1281 00001047 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1282 0000104D C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1283 00001050 B800480000          <1>     mov eax, 4800h
  1284 00001055 CD21                <1>     int 21h
  1285 00001057 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
  1286 00001059 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
  1286 0000105E [6D000000]          <1>
  1287 00001062 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
  1288 00001066 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
  1289 0000106D 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1290 00001073 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1291 0000107B C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
  1292                              <1> .skipFCBS:
  1293                              <1> ;And CDS now
  1294 0000107F 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1295 00001083 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
  1296 0000108B 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
  1297                              <1>     ;Else, we first free the old CDS and then reallocate
  1298 0000108D 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
  1298 00001092 [65000000]          <1>
  1299 00001096 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
  1300 0000109B CD21                <1>     int 21h
  1301 0000109D 720D                <1>     jc short .skipCDS
  1302 0000109F 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1303 000010A7 E89AF5FFFF          <1>     call makeCDSArray
  1304                              <1> .skipCDS:
  1305 000010AC 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1306 000010AF 5D                  <1>     pop rbp ;Stack frame no longer needed
  1307                              <1> ;Now we close all five default handles and open AUX, CON and PRN
  1308                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
  1309 000010B0 31DB                <1>     xor ebx, ebx
  1310                              <1> closeHandlesLoop:
  1311 000010B2 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1312 000010B7 CD21                <1>     int 21h
  1313 000010B9 FFC3                <1>     inc ebx ;Goto next handle
  1314 000010BB 81FB06000000        <1>     cmp ebx, 6
  1315 000010C1 75EF                <1>     jne closeHandlesLoop
  1316 000010C3 E89A020000          <1>     call openStreams
  1317                              <1> l1:
  1318 000010C8 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
  1319 000010CD B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
  1320 000010D2 CD21                <1>     int 21h         ;Malloc and get pointer in rbx
  1321 000010D4 0F828F000000        <1>     jc badMem
  1322 000010DA 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
  1323 000010DD 4881EB10000000      <1>     sub rbx, mcb_size
  1324 000010E4 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
  1325 000010EC 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
  1326 000010F3 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
  1327 000010FA 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
  1328                              <1>     ;Input: r8 = PSP
  1329                              <1>     ;       r9 = Memory Arena Pointer
  1330                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
  1331 000010FD E87A0A0000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
  1332 00001102 720E                <1>     jc short l2 
  1333 00001104 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
  1334 0000110B B800490000          <1>     mov eax, 4900h  ;Free the memory block
  1335 00001110 CD21                <1>     int 21h
  1336                              <1> l2:
  1337                              <1>     ;Load COMMAND.COM
  1338                              <1>     ;Get currentPSP ptr
  1339 00001112 B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
  1340 00001114 CD21                <1>     int 21h
  1341 00001116 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1342 00001118 CD21                <1>     int 21h
  1343 0000111A 0441                <1>     add al, "A"
  1344 0000111C 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1345                              <1> 
  1346 00001122 488D1DC7000000      <1>     lea rbx, cmdBlock
  1347 00001129 488D3518050000      <1>     lea rsi, tempPSP
  1348 00001130 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
  1349 00001134 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1350 00001138 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
  1351 0000113C 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1352 00001140 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
  1353 00001147 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
  1354 0000114B 488D158F000000      <1>     lea rdx, cmdLine
  1355 00001152 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1356 00001157 CD21                <1>     int 21h
  1357 00001159 488D1545000000      <1>     lea rdx, badCom
  1358 00001160 B409                <1>     mov ah, 09h ;Print message
  1359 00001162 CD21                <1>     int 21h
  1360                              <1> hltLbl:
  1361 00001164 F4                  <1>     hlt
  1362 00001165 F390                <1>     pause
  1363 00001167 EBFB                <1>     jmp short hltLbl
  1364                              <1> badMem:
  1365 00001169 488D1509000000      <1>     lea rdx, memErr
  1366 00001170 B800090000          <1>     mov eax, 0900h
  1367 00001175 CD21                <1>     int 21h
  1368 00001177 EBEB                <1>     jmp short hltLbl
  1369 00001179 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
  1369 00001182 6D6F7279204572726F- <1>
  1369 0000118B 720A0D24            <1>
  1370                              <1> ;--------------------------------
  1371                              <1> ;       DATA FOR SYSINIT        :
  1372                              <1> ;--------------------------------
  1373 0000118F 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1373 00001198 5343502F444F532E2E- <1>
  1373 000011A1 2E0A0D24            <1>
  1374 000011A5 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1374 000011AE 7373696E6720436F6D- <1>
  1374 000011B7 6D616E6420696E7465- <1>
  1374 000011C0 727072657465720A0D- <1>
  1374 000011C9 24                  <1>
  1375 000011CA 434F4E00            <1> conName db "CON",0
  1376 000011CE 41555800            <1> auxName db "AUX",0
  1377 000011D2 50524E00            <1> prnName db "PRN",0
  1378                              <1> 
  1379 000011D6 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1379 000011DF 5300                <1>
  1380 000011E1 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
  1380 000011EA 442E434F4D00        <1>
  1381                              <1> 
  1382                              <1> cmdBlock:   ;Used also for overlay block
  1383                              <1>     istruc execProg
  1384 000011F0 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
  1385 000011F8 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
  1386 00001200 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1387 00001208 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1388                              <1>     iend
  1389                              <1> exceptData:
  1390 00001210 [8565000000000000]  <1>     dq i0
  1391 00001218 [8C65000000000000]  <1>     dq i1
  1392 00001220 [9665000000000000]  <1>     dq i2
  1393 00001228 [A065000000000000]  <1>     dq i3
  1394 00001230 [AA65000000000000]  <1>     dq i4
  1395 00001238 [B465000000000000]  <1>     dq i5
  1396 00001240 [BB65000000000000]  <1>     dq i6
  1397 00001248 [C265000000000000]  <1>     dq i7
  1398 00001250 [C965000000000000]  <1>     dq i8
  1399 00001258 [D065000000000000]  <1>     dq i9
  1400 00001260 [D765000000000000]  <1>     dq i10
  1401 00001268 [DE65000000000000]  <1>     dq i11
  1402 00001270 [E565000000000000]  <1>     dq i12
  1403 00001278 [EC65000000000000]  <1>     dq i13
  1404 00001280 [F365000000000000]  <1>     dq i14
  1405 00001288 [FA65000000000000]  <1>     dq i15
  1406 00001290 [0166000000000000]  <1>     dq i16
  1407 00001298 [0866000000000000]  <1>     dq i17
  1408 000012A0 [0F66000000000000]  <1>     dq i18
  1409 000012A8 [1666000000000000]  <1>     dq i19
  1410 000012B0 [1D66000000000000]  <1>     dq i20
  1411 000012B8 [2466000000000000]  <1>     dq i21
  1412                              <1> 
  1413                              <1> intData:
  1414 000012C0 [8057000000000000]  <1>     dq terminateProcess ;Int 20h
  1415 000012C8 [5671000000000000]  <1>     dq functionDispatch ;Int 21h
  1416 000012D0 [381B000000000000]  <1>     dq OEMHALT          ;Int 22h, If sysinit terminates, halt system
  1417 000012D8 [AE72000000000000]  <1>     dq defaultIretq     ;Int 23h, ignore any CTRL+C during init
  1418 000012E0 [B969000000000000]  <1>     dq dosDefCritErrHdlr 
  1419 000012E8 [926A000000000000]  <1>     dq absDiskRead      ;Int 25h
  1420 000012F0 [736A000000000000]  <1>     dq absDiskWrite     ;Int 26h
  1421 000012F8 [8757000000000000]  <1>     dq terminateRes     ;Int 27h
  1422 00001300 [AE72000000000000]  <1>     dq defaultIretq     ;Int 28h
  1423 00001308 [AE72000000000000]  <1>     dq defaultIretq     ;Int 29h
  1424 00001310 [AE72000000000000]  <1>     dq defaultIretq     ;Int 2Ah
  1425 00001318 [AE72000000000000]  <1>     dq defaultIretq     ;Int 2Bh
  1426 00001320 [AE72000000000000]  <1>     dq defaultIretq     ;Int 2Ch
  1427 00001328 [AE72000000000000]  <1>     dq defaultIretq     ;Int 2Dh
  1428 00001330 [AE72000000000000]  <1>     dq defaultIretq     ;Int 2Eh
  1429 00001338 [FB79000000000000]  <1>     dq multiplexHdlr    ;Int 2Fh, multiplex default handler
  1430                              <1> nData:
  1431 00001340 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
  1432 00001348 0480                <1>     dw 08004h
  1433 0000134A [D269000000000000]  <1>     dq nulStrat
  1434 00001352 [D869000000000000]  <1>     dq nulIntr
  1435 0000135A 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1436                              <1> 
  1437                              <1> openStreams:
  1438                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
  1439 00001362 488D1565FEFFFF      <1>     lea rdx, auxName
  1440 00001369 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1441 0000136E CD21                <1>     int 21h
  1442                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001370 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001372 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1443 00001373 89C3                <1>     mov ebx, eax
  1444 00001375 B903000000          <1>     mov ecx, 3  ;
  1445 0000137A B800460000          <1>     mov eax, 4600h  ;DUP2
  1446 0000137F CD21                <1>     int 21h
  1447                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001381 72(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1448 00001383 B8003E0000          <1>     mov eax, 3e00h
  1449 00001388 CD21                <1>     int 21h ;Close the original handle
  1450                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000138A 72(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1451 0000138C B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1452 00001391 488D1532FEFFFF      <1>     lea rdx, conName
  1453 00001398 CD21                <1>     int 21h
  1454                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000139A 72(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1455 0000139C 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1456 0000139E B800450000          <1>     mov eax, 4500h  ;DUP
  1457 000013A3 CD21                <1>     int 21h
  1458                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013A5 72(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1459 000013A7 B800450000          <1>     mov eax, 4500h  ;DUP
  1460 000013AC CD21                <1>     int 21h
  1461                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013AE 72(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1462 000013B0 488D151BFEFFFF      <1>     lea rdx, prnName
  1463 000013B7 B8023D0000          <1>     mov eax, 3D02h
  1464 000013BC CD21                <1>     int 21h       ;Open file
  1465                              <1>     return
    13                              <2> %%_ret:
    14 000013BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1466                              <1> 
  1467                              <1> addDriverMarkers:
  1468                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
  1469                              <1> ; information and owner to each memory block. Used for drivers that allocate
  1470                              <1> ; their own memory using ALLOC.
  1471                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
  1472                              <1> ;       fs -> Dos Data Area
  1473                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
  1474                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
  1475                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
  1476 000013BF 50                  <1>     push rax
  1477 000013C0 53                  <1>     push rbx
  1478 000013C1 51                  <1>     push rcx
  1479 000013C2 56                  <1>     push rsi
  1480 000013C3 57                  <1>     push rdi
  1481 000013C4 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
  1482 000013CB 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
  1483 000013D2 B844000000          <1>     mov eax, mcbSubDriver
  1484 000013D7 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
  1485 000013DC 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
  1486 000013E3 0F44C3              <1>     cmove eax, ebx
  1487 000013E6 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
  1488                              <1> .checkSubsystem:
  1489 000013E8 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
  1490 000013EC 7512                <1>     jne short .gotoNextBlock
  1491 000013EE 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
  1492 000013F1 39D8                <1>     cmp eax, ebx
  1493 000013F3 0F45C3              <1>     cmovne eax, ebx
  1494 000013F6 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
  1495 000013FA 7504                <1>     jne short .gotoNextBlock
  1496 000013FC C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
  1497                              <1> .gotoNextBlock:
  1498 00001400 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
  1499 00001403 7415                <1>     je short .exit
  1500 00001405 31C9                <1>     xor ecx, ecx
  1501 00001407 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
  1502 0000140A 48C1E104            <1>     shl rcx, 4
  1503 0000140E 4881C610000000      <1>     add rsi, mcb.program    
  1504 00001415 4801CE              <1>     add rsi, rcx
  1505 00001418 EBCE                <1>     jmp short .checkSubsystem
  1506                              <1> .exit:
  1507 0000141A 5F                  <1>     pop rdi
  1508 0000141B 5E                  <1>     pop rsi
  1509 0000141C 59                  <1>     pop rcx
  1510 0000141D 5B                  <1>     pop rbx
  1511 0000141E 58                  <1>     pop rax
  1512                              <1>     return
    13                              <2> %%_ret:
    14 0000141F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1513                              <1> 
  1514                              <1> 
  1515                              <1> convertBPBArray:
  1516                              <1> ;rsi -> BPB array
  1517                              <1> ;rbp -> Space for cl consecutive DPB's
  1518                              <1> ;rdi -> Driver header
  1519                              <1> ;cl = Number of BPBs to process
  1520                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
  1521 00001420 E852000000          <1>     call .findLastDPB
  1522 00001425 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
  1523                              <1> .buildNext:
  1524 00001428 56                  <1>     push rsi
  1525 00001429 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
  1526 0000142C B453                <1>     mov ah, 53h ;Build DPB
  1527 0000142E CD21                <1>     int 21h
  1528 00001430 5E                  <1>     pop rsi
  1529 00001431 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
  1529 00001436 [77000000]          <1>
  1530 0000143A 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
  1531 0000143D 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
  1532 00001445 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
  1533 00001448 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
  1534 0000144C FEC5                <1>     inc ch  ;Goto next unit number
  1535 0000144E 38E9                <1>     cmp cl, ch  ;When equal, exit!
  1536 00001450 7414                <1>     jz short .exit
  1537 00001452 488D4535            <1>     lea rax, qword [rbp + dpb_size]
  1538 00001456 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1539 0000145A 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
  1540 0000145D 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
  1541 00001464 EBC2                <1>     jmp short .buildNext
  1542                              <1> .exit:
  1543                              <1>     ;Now set next DPB as -1 i.e end of chain!
  1544 00001466 31C0                <1>     xor eax, eax
  1545 00001468 48FFC8              <1>     dec rax
  1546 0000146B 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1547 0000146F 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
  1548 00001476 C3                  <1>     ret
  1549                              <1> .findLastDPB:
  1550                              <1> ;Finds the last DPB and links the next DPB to it
  1551 00001477 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1551 0000147C [3B000000]          <1>
  1552 00001480 4885C0              <1>     test rax, rax
  1553 00001483 7415                <1>     jz short .first 
  1554                              <1> .lp:
  1555 00001485 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
  1556 0000148D 7406                <1>     je short .lastFound
  1557 0000148F 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
  1558 00001493 EBF0                <1>     jmp short .lp   ;And go again
  1559                              <1> .lastFound:
  1560 00001495 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
  1561 00001499 C3                  <1>     ret
  1562                              <1> .first:
  1563                              <1> ;If this is the first DPB array, set the dpbHeadPtr
  1564 0000149A 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
  1564 0000149F [3B000000]          <1>
  1565 000014A3 C3                  <1>     ret
  1566                              <1> 
  1567                              <1> ejectKernelInit:
  1568                              <1> ;Reallocates the space allocated to the driver file after 
  1569                              <1> ; init was called.
  1570                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
  1571                              <1> ;       r8 -> Points to the mcb header for reallocation
  1572                              <1> ;Uses the sysinit init drive block. 
  1573                              <1> ;rax, rbx, rflags trashed
  1574                              <1> ;If returns CF=CY, error in reallocation.
  1575 000014A4 53                  <1>     push rbx
  1576 000014A5 488D1D7D010000      <1>     lea rbx, initDrvBlk
  1577 000014AC 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
  1578 000014B0 5B                  <1>     pop rbx
  1579                              <1>     ;If this endptr is zero or -1 ignore it. 
  1580                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
  1581 000014B1 4885C0              <1>     test rax, rax
  1582                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014B4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014B6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1583 000014B7 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
  1584                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000014BA 74(B6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1585 000014BC 48FFC8              <1>     dec rax ;Return to original value
  1586 000014BF 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
  1587 000014C5 48C1E804            <1>     shr rax, 4
  1588 000014C9 48C1E004            <1>     shl rax, 4
  1589 000014CD 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
  1590 000014D0 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
  1591 000014D2 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
  1592 000014D9 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
  1593 000014DB 4981C010000000      <1>     add r8, mcb.program ;Goto program
  1594 000014E2 C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
  1595 000014E5 29D8                <1>     sub eax, ebx
  1596 000014E7 89C3                <1>     mov ebx, eax
  1597 000014E9 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
  1598 000014EE CD21                <1>     int 21h
  1599 000014F0 4158                <1>     pop r8
  1600                              <1>     return
    13                              <2> %%_ret:
    14 000014F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1601                              <1> .exit:
  1602 000014F3 F8                  <1>     clc ;Make sure to clear the CF flag before returning
  1603                              <1>     return
    13                              <2> %%_ret:
    14 000014F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1604                              <1> 
  1605                              <1> initDriver:
  1606                              <1> ;Initialises one driver and adjusts the DOS data appropriately
  1607                              <1> ;If on return CF=CY then the driver didnt want to be loaded
  1608                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
  1609                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
  1610                              <1> ; arguments are to be passed to the driver
  1611                              <1> ;Input: rsi -> driver pointer
  1612                              <1> ;       rbx -> sysinit request pointer
  1613                              <1> ;       rbp -> DOSSEG pointer
  1614 000014F5 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1615 000014F8 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1616 000014FC 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1617 00001502 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
  1618 00001508 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1619                              <1>     ;Protect the important registers. All others trashable
  1620 0000150B 53                  <1>     push rbx
  1621 0000150C 56                  <1>     push rsi
  1622 0000150D 55                  <1>     push rbp
  1623 0000150E FF560A              <1>     call qword [rsi + drvHdr.strPtr]
  1624 00001511 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1625 00001514 5D                  <1>     pop rbp
  1626 00001515 5E                  <1>     pop rsi
  1627 00001516 5B                  <1>     pop rbx
  1628                              <1>     ;Check if a driver wants to not load.
  1629                              <1>     ;If a kernel driver wants to stop, halt boot.
  1630 00001517 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1631 0000151D 750C                <1>     jnz short .errExit
  1632 0000151F 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1633 00001523 7508                <1>     jne short .notHalt
  1634 00001525 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
  1635 00001529 7502                <1>     jne short .notHalt
  1636                              <1> .errExit:
  1637 0000152B F9                  <1>     stc
  1638 0000152C C3                  <1>     ret
  1639                              <1> .notHalt:
  1640                              <1>     ;Now check if the drivers were con/clock before exiting
  1641 0000152D 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
  1642 00001531 66250300            <1>     and ax, devDrvConIn | devDrvConOut
  1643 00001535 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
  1644 00001537 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
  1645 0000153B 7507                <1>     jne short .checkClock
  1646 0000153D 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
  1647                              <1> .checkClock:
  1648 00001544 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1649 0000154A 7407                <1>     jz short .notClock
  1650 0000154C 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
  1651                              <1> .notClock:
  1652                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
  1653 00001553 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1654                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001559 75(F4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1655                              <1>     ;Else, store the number of units as reported live by driver
  1656 0000155B 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
  1657 0000155F 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
  1658 00001562 C3                  <1>     ret
  1659                              <1> 
  1660                              <1> buildDPBs:
  1661                              <1>     ;Here we specially handle MSD drivers, building DPBs
  1662                              <1>     ;If return with CF=CY, fail. Else, all done and setup
  1663                              <1>     ;Input: rbx -> Points to sysinit request packet
  1664                              <1>     ;       rsi -> Driver header
  1665                              <1>     ;       rbp -> DOSSEG pointer
  1666                              <1>     ;Preserves those registers
  1667 00001563 53                  <1>     push rbx
  1668 00001564 55                  <1>     push rbp
  1669 00001565 56                  <1>     push rsi
  1670 00001566 57                  <1>     push rdi
  1671 00001567 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
  1672 0000156A 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
  1673 0000156E 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
  1674 00001572 B835000000          <1>     mov eax, dpb_size
  1675 00001577 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
  1676 00001579 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
  1677 0000157E C1E804              <1>     shr eax, 4      ;Convert to paragraphs
  1678 00001581 89C3                <1>     mov ebx, eax
  1679 00001583 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
  1680 00001588 CD21                <1>     int 21h
  1681 0000158A 7219                <1>     jc short .badExit
  1682 0000158C 4889C5              <1>     mov rbp, rax    
  1683 0000158F C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
  1684 00001593 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
  1685                              <1>     ;rsi -> Ptr to BPB
  1686                              <1> 	;rbp -> Ptr to buffer to hold first DPB
  1687                              <1>     ;rdi -> Ptr to the driver header
  1688 0000159B E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
  1689                              <1> .exit:
  1690 000015A0 5F                  <1>     pop rdi
  1691 000015A1 5E                  <1>     pop rsi
  1692 000015A2 5D                  <1>     pop rbp
  1693 000015A3 5B                  <1>     pop rbx
  1694                              <1>     return
    13                              <2> %%_ret:
    14 000015A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> .badExit:
  1696 000015A5 F9                  <1>     stc
  1697 000015A6 EBF8                <1>     jmp short .exit
  1698                              <1> 
  1699                              <1> setupInterruptBlock:
  1700                              <1> ;Sets up a block of interrupts with pointers provided in a table
  1701                              <1> ;Input:
  1702                              <1> ; al = Start interrupt
  1703                              <1> ; rdi -> Start of pointer table
  1704                              <1> ; cl = Last interrupt + 1
  1705                              <1> ;Assumes rbp points to DOSSEG
  1706 000015A8 0FB6C0              <1>     movzx eax, al
  1707 000015AB 0FB6C9              <1>     movzx ecx, cl
  1708                              <1> .lp:
  1709 000015AE 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
  1710 000015B1 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
  1711 000015B4 E80E000000          <1>     call writeIDTEntry
  1712 000015B9 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
  1713 000015C0 FFC0                <1>     inc eax     ;Goto next interrupt number
  1714 000015C2 39C8                <1>     cmp eax, ecx
  1715 000015C4 75E8                <1>     jne .lp
  1716                              <1>     return
    13                              <2> %%_ret:
    14 000015C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1717                              <1> 
  1718                              <1> writeIDTEntry:
  1719                              <1> ;Writes the interrupt in the right place in the table
  1720                              <1>     ;al = Interrupt number
  1721                              <1>     ;rbx -> Handler to install
  1722 000015C7 50                  <1>     push rax
  1723 000015C8 53                  <1>     push rbx
  1724 000015C9 0FB6C0              <1>     movzx eax, al
  1725 000015CC 4893                <1>     xchg rbx, rax
  1726 000015CE 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
  1727 000015D2 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
  1728 000015D9 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
  1729 000015DC 48C1E810            <1>     shr rax, 10h    ;Bring next word low
  1730 000015E0 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
  1731 000015E4 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
  1732 000015E8 894308              <1>     mov dword [rbx + 8], eax
  1733 000015EB 5B                  <1>     pop rbx
  1734 000015EC 58                  <1>     pop rax
  1735 000015ED C3                  <1>     ret
  1736                              <1> 
  1737                              <1> ; DATA AREA
  1738                              <1> localIDTpointer: ;Local IDT pointer
  1739 000015EE 0000                <1>     .Limit  dw 0
  1740 000015F0 0000000000000000    <1>     .Base   dq 0
  1741                              <1> 
  1742 000015F8 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1743 00001600 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1744 00001608 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1745                              <1> 
  1746                              <1> ;DOS Data given by OEM
  1747 00001610 00                  <1> FILES       db 0    ;Default number of FILES
  1748 00001611 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1749 00001612 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1750 00001613 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1751 00001614 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1752                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1753 00001615 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1754 0000161D 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1755 00001625 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1756                              <1> 
  1757 00001629 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1757 00001632 000000000000000000- <1>
  1757 0000163B 000000000000000000- <1>
  1757 00001644 00000000            <1>
  1758                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1759                              <1>     istruc psp
  1760 00001648 CD20                <1>     at psp.return,      db 0CDh, 20h
  1761 0000164A 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1762 00001652 0000000000000000    <1>     at psp.oldInt22h,   dq 0
  1763 0000165A 0000000000000000    <1>     at psp.oldInt23h,   dq 0
  1764 00001662 0000000000000000    <1>     at psp.oldInt24h,   dq 0
  1765 0000166A 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1766 00001672 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1766 0000167B FFFFFFFFFFFFFFFFFF- <1>
  1766 00001684 FFFF                <1>
  1767 00001686 0000000000000000    <1>     at psp.envPtr,      dq 0
  1768 0000168E 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1769 00001696 1400                <1>     at psp.jftSize,     dw 20 
  1770 00001698 CD21C3              <1>     at psp.unixEntry,   db 0CDh, 21h, 0C3h
  1771 0000169B 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1772 000016A3 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1772 000016AC 0000000000000000    <1>
  1773 000016B4 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1773 000016BD 000000000000000000- <1>
  1773 000016C6 0000                <1>
  1774 000016C8 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1774 000016D1 000000000000000000- <1>
  1774 000016DA 000000000000000000- <1>
  1774 000016E3 000000000000000000- <1>
  1774 000016EC 000000000000000000- <1>
  1774 000016F5 000000000000000000- <1>
  1774 000016FE 000000000000000000- <1>
  1774 00001707 000000000000000000- <1>
  1774 00001710 000000000000000000- <1>
  1774 00001719 000000000000000000- <1>
  1774 00001722 000000000000000000- <1>
  1774 0000172B 000000000000000000- <1>
  1774 00001734 000000000000000000- <1>
  1774 0000173D 000000000000000000- <1>
  1774 00001746 0000                <1>
  1775                              <1>     iend
    17                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 00001748 31C0                <1>     xor eax, eax    ;Drive A:
    14 0000174A BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 0000174F 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 00001753 0F45C3              <1>     cmovnz eax, ebx
    17 00001756 8805B6FEFFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 0000175C 4889351A040000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 00001763 C605A6FEFFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 0000176A C605A0FEFFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 00001771 C6059BFEFFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 00001778 C705A3FEFFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 00001781 00                  <1>
    24 00001782 48C70590FEFFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 0000178B 0000                <1>
    25 0000178D C60580FEFFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 00001794 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 00001796 49C1E818            <1>     shr r8, 3*8
    29 0000179A 4584C0              <1>     test r8b, r8b
    30 0000179D 0F8495030000        <1>     jz OEMHALT
    31 000017A3 4889F7              <1>     mov rdi, rsi
    32 000017A6 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 000017AD 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 000017B4 B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 000017B9 57                  <1>     push rdi        ;rdi points to the APT space
    42 000017BA 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 000017C3 00                  <1>
    43                              <1> pdtLoop:
    44 000017C4 48AB                <1>     stosq
    45 000017C6 480500002000        <1>     add rax, 200000h
    46 000017CC FFC9                <1>     dec ecx
    47 000017CE 75F4                <1>     jnz pdtLoop
    48 000017D0 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 000017D1 48893D20FEFFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 000017D8 57                  <1>     push rdi
    53 000017D9 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 000017DC 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 000017DF 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 000017E6 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 000017ED B93C000000          <1>     mov ecx, 60
    58 000017F2 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 000017F8 48AB                <1>     stosq
    61 000017FA 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 00001800 FFC9                <1>     dec ecx
    63 00001802 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 00001804 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 00001807 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 0000180A 48B8-               <1>     mov rax, driverChain
    71 0000180C [FB7B000000000000]  <1>
    72 00001814 5F                  <1>     pop rdi
    73 00001815 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 00001818 488905F6FDFFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75                              <1> 
    76                              <1> ;----------------------------------------------------------------
    77                              <1> ;                       PIC Remap procedure                     :
    78                              <1> ;----------------------------------------------------------------
    79                              <1> ;Remapping the IRQ lines to Interrupts 0F0h - 0FFh
    80 0000181F FA                  <1>     cli
    81 00001820 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    82 00001822 E621                <1>     out 021h, al
    83 00001824 E6A1                <1>     out 0A1h, al
    84 00001826 0F010D68030000      <1>     sidt [oemIDTptr]    ;Get the idt here
    85 0000182D 488B3563030000      <1>     mov rsi, qword [oemIDTptr.Base] ;Get the base ptr
    86 00001834 4889F7              <1>     mov rdi, rsi
    87 00001837 4881C600020000      <1>     add rsi, 020h*10h
    88 0000183E 4881C7000F0000      <1>     add rdi, 0F0h*10h
    89 00001845 B920000000          <1>     mov ecx, 2*10h    ;Copy the hardware IRQ pointers high!
    90 0000184A F348A5              <1>     rep movsq
    91                              <1> 
    92 0000184D B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    93 0000184F E620                <1>     out 020h, al
    94 00001851 E680                <1>     out 080h, al    
    95 00001853 E6A0                <1>     out 0A0h, al
    96 00001855 E680                <1>     out 080h, al    
    97 00001857 B0F0                <1>     mov al, 0F0h       ;PIC1 to take Int 0F0h - F7h
    98 00001859 E621                <1>     out 021h, al
    99 0000185B E680                <1>     out 080h, al    
   100 0000185D 0408                <1>     add al, 8        ;PIC2 to take Int  F8h - FFh
   101 0000185F E6A1                <1>     out 0A1h, al 
   102 00001861 E680                <1>     out 080h, al    
   103 00001863 B004                <1>     mov al, 4
   104 00001865 E621                <1>     out 021h, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
   105 00001867 E680                <1>     out 080h, al    
   106 00001869 FEC8                <1>     dec al
   107 0000186B FEC8                <1>     dec al
   108 0000186D E6A1                <1>     out 0A1h, al    ;Tell PIC 2 its cascade identity (00000010)
   109 0000186F E680                <1>     out 080h, al
   110 00001871 B001                <1>     mov al, 01h        ;Initialise in 8086 mode
   111 00001873 E621                <1>     out 021h, al
   112 00001875 E680                <1>     out 080h, al    
   113 00001877 E6A1                <1>     out 0A1h, al
   114 00001879 E680                <1>     out 080h, al    
   115 0000187B 0F011D13030000      <1>     lidt [oemIDTptr] 
   116 00001882 31C0                <1>     xor eax, eax    ;Unmask all interrupts 
   117 00001884 E621                <1>     out 021h, al
   118 00001886 E6A1                <1>     out 0A1h, al
   119 00001888 FB                  <1>     sti
   120                              <1> ;Ensure that interrupts are still masked
   121 00001889 C3                  <1>     ret
   122                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
   123                              <1> OEMINIT ENDP
   124                              <1> 
   125                              <1> OEMMCBINIT PROC NEAR
   126 0000188A B820E80000          <1>     mov eax, 0E820h ;Get memory map
   127 0000188F CD35                <1>     int 35h ; rsi has pointer to memory map
   128 00001891 488B05E5020000      <1>     mov rax, qword [biosUBase]
   129 00001898 E8F6000000          <1>     call .mcbFindAddress
   130 0000189D 7341                <1>     jnc .mcbi1  ;If found, proceed
   131                              <1>     ;Here, we try use E801h
   132 0000189F B801E80000          <1>     mov eax, 0E801h
   133 000018A4 CD35                <1>     int 35h
   134 000018A6 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   135 000018A9 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   136 000018AC 85C0                <1>     test eax, eax
   137 000018AE 7417                <1>     jz .worst
   138 000018B0 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   139 000018B3 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   140 000018B6 8905C9020000        <1>     mov dword [loProtMem], eax
   141 000018BC 891DC7020000        <1>     mov dword [hiProtMem], ebx
   142 000018C2 E919010000          <1>     jmp mcbBuild
   143                              <1> .worst:
   144                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   145 000018C7 B800002000          <1>     mov eax, 200000h
   146 000018CC 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   147 000018D3 29D8                <1>     sub eax, ebx
   148 000018D5 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   149 000018DB E900010000          <1>     jmp mcbBuild 
   150                              <1> .mcbi1:
   151 000018E0 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   152 000018E3 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   152 000018EC 00                  <1>
   153 000018ED 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   154 000018F1 0F85BC000000        <1>     jne .mcbFail
   155 000018F7 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   156                              <1>     ;PCI hole always exists so this value will always be a dword
   157 000018FB 890584020000        <1>     mov dword [loProtMem], eax
   158 00001901 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   159 00001904 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   160 00001907 4881FB00000001      <1>     cmp rbx, 1000000h  
   161 0000190E 773A                <1>     ja .skipISA
   162                              <1> ;Here we deal with ISA hole issues
   163 00001910 B820E80000          <1>     mov eax, 0E820h
   164 00001915 CD35                <1>     int 35h
   165 00001917 48B800000001000000- <1>     mov rax, 1000000h
   165 00001920 00                  <1>
   166 00001921 E86D000000          <1>     call .mcbFindAddress
   167 00001926 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   168 0000192C 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   168 00001935 00                  <1>
   169 00001936 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   170 0000193A 0F85A0000000        <1>     jne mcbBuild  
   171 00001940 488B5808            <1>     mov rbx, qword [rax + 8]
   172 00001944 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   173                              <1> .skipISA:
   174 0000194A B820E80000          <1>     mov eax, 0E820h
   175 0000194F CD35                <1>     int 35h
   176 00001951 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   176 0000195A 00                  <1>
   177 0000195B E833000000          <1>     call .mcbFindAddress
   178 00001960 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   179 00001962 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   179 0000196B 00                  <1>
   180 0000196C 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   181 00001970 756E                <1>     jne mcbBuild   
   182 00001972 488B5808            <1>     mov rbx, qword [rax + 8]
   183                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   184 00001976 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   184 0000197F 00                  <1>
   185 00001980 4839CB              <1>     cmp rbx, rcx
   186 00001983 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   187 00001987 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   188 0000198E E94D000000          <1>     jmp mcbBuild
   189                              <1> .mcbFindAddress:
   190                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   191                              <1> ;Entry: rax = Address of arena to search for
   192                              <1> ;       rsi = Pointer to memory map
   193                              <1> ;       ecx = Number of 24 byte entries
   194                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   195                              <1> ;       CF=CY : value in rax not found
   196 00001993 56                  <1>     push rsi
   197 00001994 51                  <1>     push rcx
   198 00001995 50                  <1>     push rax
   199                              <1> .mfa0:
   200 00001996 483B06              <1>     cmp rax, qword [rsi]
   201 00001999 7410                <1>     je .mcbAddressFound
   202 0000199B 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   203 000019A2 FFC9                <1>     dec ecx
   204 000019A4 79F0                <1>     jns .mfa0
   205                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   206 000019A6 58                  <1>     pop rax
   207 000019A7 59                  <1>     pop rcx
   208 000019A8 5E                  <1>     pop rsi
   209 000019A9 F9                  <1>     stc
   210 000019AA C3                  <1>     ret
   211                              <1> .mcbAddressFound:
   212 000019AB 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   213 000019AE 59                  <1>     pop rcx ;Pop old rax value off
   214 000019AF 59                  <1>     pop rcx
   215 000019B0 5E                  <1>     pop rsi
   216 000019B1 F8                  <1>     clc
   217 000019B2 C3                  <1>     ret
   218                              <1> .mcbFail:
   219 000019B3 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   220 000019BA B804130000          <1>     mov eax, 1304h
   221 000019BF CD30                <1>     int 30h
   222 000019C1 E972010000          <1>     jmp OEMHALT
   223 000019C6 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   223 000019CF 6C6F636174696F6E20- <1>
   223 000019D8 4572726F720A0D00    <1>
   224                              <1> 
   225                              <1> mcbBuild:
   226                              <1> ;Actually build the MCB chain here
   227                              <1> ;Start by computing the difference between userbase and DOS area
   228 000019E0 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   229 000019E7 488B351AFCFFFF      <1>     mov rsi, qword [MCBANCHOR]  
   230 000019EE 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   231 000019F1 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   232 000019F5 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   233 000019FB 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   234 000019FE 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   235 00001A01 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   236 00001A04 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   237 00001A0A 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   238 00001A10 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   238 00001A19 00                  <1>
   239 00001A1A 0F8218010000        <1>     jb OEMHALT
   240 00001A20 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   241 00001A23 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   242 00001A26 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   243 00001A29 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   244 00001A31 31F6                <1>     xor esi, esi
   245 00001A33 8B354C010000        <1>     mov esi, dword [loProtMem]
   246 00001A39 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   247 00001A3F C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   248 00001A42 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   249                              <1> 
   250                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   251 00001A45 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   251 00001A4E 00                  <1>
   252 00001A4F 746C                <1>     jz .skipISA
   253                              <1>     ;Here if an ISA hole exists, place a MCB around it
   254 00001A51 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   255                              <1>     ;Remove one MCB worth of space from alloc
   256 00001A58 31C9                <1>     xor ecx, ecx
   257 00001A5A 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   258 00001A5D 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   259 00001A63 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   260 00001A66 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   261 00001A69 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   262 00001A6C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   263 00001A6F 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   264 00001A77 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   264 00001A80 00                  <1>
   265 00001A81 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   266 00001A84 480510000000        <1>     add rax, mcb_size
   267 00001A8A 4829C1              <1>     sub rcx, rax    ;Take their difference
   268 00001A8D C1E904              <1>     shr ecx, 4
   269 00001A90 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   270 00001A93 C1E104              <1>     shl ecx, 4  ;Get bytes again
   271 00001A96 4881C310000000      <1>     add rbx, mcb_size
   272 00001A9D 4801CB              <1>     add rbx, rcx
   273                              <1>     ;RBX should now be at 16Mb
   274 00001AA0 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   275 00001AA3 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   276 00001AAB 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   277 00001AB1 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   278 00001AB4 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   279 00001ABA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   280                              <1> .skipISA:
   281                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   282                              <1>     ;rbx points to a block with "Z" marker
   283 00001ABD 813DC6000000000000- <1>     cmp dword [longMem], 0
   283 00001AC6 00                  <1>
   284 00001AC7 746E                <1>     jz .exit
   285                              <1>     ;Add PCI hole MCB
   286 00001AC9 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   287                              <1>     ;Remove one MCB worth of space from alloc
   288 00001AD0 31C9                <1>     xor ecx, ecx
   289 00001AD2 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   290 00001AD5 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   291 00001ADB C1E104              <1>     shl ecx, 4  ;Get bytes
   292 00001ADE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   293 00001AE1 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   294 00001AE4 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   295 00001AE7 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   296 00001AEF 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   296 00001AF8 00                  <1>
   297 00001AF9 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   298 00001AFC 480510000000        <1>     add rax, mcb_size
   299 00001B02 4829C1              <1>     sub rcx, rax    ;Take their difference
   300 00001B05 C1E904              <1>     shr ecx, 4
   301 00001B08 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   302 00001B0B C1E104              <1>     shl ecx, 4  ;Get bytes again
   303 00001B0E 4881C310000000      <1>     add rbx, mcb_size
   304 00001B15 4801CB              <1>     add rbx, rcx
   305                              <1>     ;RBX should now be at 4Gb
   306 00001B18 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   307 00001B1B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   308 00001B23 488B0D63000000      <1>     mov rcx, qword [longMem]
   309 00001B2A 48C1E904            <1>     shr rcx, 4
   310 00001B2E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   311 00001B34 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   312                              <1> .exit:
   313 00001B37 C3                  <1>     ret
   314                              <1> OEMMCBINIT ENDP
   315                              <1> 
   316                              <1> OEMHALT PROC    NEAR
   317                              <1> ;If a critical error occurs during sysinit, fail through here
   318                              <1> ;Int 22h, 23h and 24h point here during sysinit
   319 00001B38 488D2D0C000000      <1>     lea rbp, hltmsg
   320 00001B3F B804130000          <1>     mov eax, 1304h
   321 00001B44 CD30                <1>     int 30h
   322                              <1> .ei0:
   323 00001B46 F4                  <1>     hlt
   324 00001B47 F390                <1>     pause
   325 00001B49 EBFB                <1>     jmp short .ei0
   326 00001B4B 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   326 00001B54 7469616C6973696E67- <1>
   326 00001B5D 20534350444F532E53- <1>
   326 00001B66 59532E205379737465- <1>
   326 00001B6F 6D2068616C74696E67- <1>
   326 00001B78 2E2E2E00            <1>
   327                              <1> OEMHALT ENDP
   328                              <1> 
   329                              <1> OEMCALLBK PROC NEAR
   330 00001B7C C3                  <1>     ret
   331                              <1> OEMCALLBK ENDP
   332                              <1> 
   333                              <1> ;OEM Only variables are permitted in this file. They are not 
   334                              <1> ; visible to SYSINIT
   335 00001B7D 0000000000000000    <1> biosUBase   dq 0
   336 00001B85 00000000            <1> loProtMem   dd 0
   337 00001B89 00000000            <1> hiProtMem   dd 0
   338 00001B8D 0000000000000000    <1> longMem     dq 0
   339                              <1> oemIDTptr:      ;Local IDT pointer
   340 00001B95 0000                <1>     .Limit  dw 0
   341 00001B97 0000000000000000    <1>     .Base   dq 0
    18                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    19                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    resd 1    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     resq 1    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33 0000009C ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   resq 1  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare resq 1  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  resb sfth_size
   149 00000141 <res 4Fh>           <1>     firstSft    resb sft_size
   150 00000190 <res 4Fh>           <1>     secondSft   resb sft_size
   151 000001DF <res 4Fh>           <1>     thirdSft    resb sft_size
   152 0000022E <res 4Fh>           <1>     fourthSft   resb sft_size
   153 0000027D <res 4Fh>           <1>     fifthSft    resb sft_size
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  resb 1  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   resb 1  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 resb 1  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  resw 1  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction resb 1  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  resb 1  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  resq 1  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  resb 1  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   207 0000045F ????????????????    <1>     xInt24hRSP  resq 1  ;RSP across an Int 24h call
   208 00000467 ??                  <1>     Int24bitfld resb 1  ;Copies the bit field given to the Int 24h handler
   209 00000468 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   210 00000469 ??                  <1>     Int24Fail   resb 1  ;Set if Int 24h returned fail
   211                              <1> 
   212 0000046A ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 21h entry if called from within Int 21h
   213 00000472 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   214 0000047A ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 21h
   215 00000482 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 21 call
   216 0000048A ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   217                              <1> ;The below flag tells DOS to print ^C in the termination function
   218 0000048B ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   219 0000048C ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   220                              <1> ;Time stuff
   221                              <1> ;Read the below two as a word
   222 0000048D ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   223 0000048E ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   224 0000048F ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   225 00000490 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   226 00000492 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   227                              <1> 
   228 00000493 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   229 00000494 ??                  <1>     int28Flag   resb 1  ;If set, Int 28h should be called, if clear no
   230 00000495 ??                  <1>     Int24Trans  resb 1  ;Set to -1 if Abort translated to Fail
   231                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   232                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   233                              <1> ; without forcing to re-build the whole primary request block.
   234                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   235                              <1> ; with secondary char output going through the secondary header
   236                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   237                              <1> ; for output)
   238                              <1> ;ioReqPkt is the largest possible packet
   239 00000496 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   240 000004C0 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   241                              <1>     altRet: ;Accessed as a qword
   242 000004EA <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   243 00000514 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   244                              <1> ;Swappable Buffers
   245 00000515 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   246                              <1>     ;We add an additional byte to save ah too
   247 0000051B ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   248 0000051D <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   249 0000059D <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   250 0000061D ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   251 00000625 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   252 0000062D ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   253                              <1> ;Misc bookkeeping flags and vars
   254 0000062E <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   255 00000659 <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   256 00000679 <res 5Fh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   257 000006D8 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   258 000006E4 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   259 000006F0 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   260                              <1> ;Join state vars 
   261                              <1>     ;joinPath    resb 1  ;Set => Path being qualified is join.
   262                              <1>     ;joinDrv     resb 1  ;Drive number for join (0 based)
   263 000006F8 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   264 000006F9 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   265 000006FA ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   266 000006FB ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   267 000006FC ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   268 000006FD ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   269 000006FE ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   270 000006FF ??                  <1>     rwFlag      resb 1  ;00h=Read, 1=Write, read/write/share error reporting
   271 00000700 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   272 00000701 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   273                              <1> 
   274 00000702 ??                  <1>     vConInsert  resb 1  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   275 00000703 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   276 00000704 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   277 00000705 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   278 00000706 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   279 00000707 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   280 00000708 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   281                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   282                              <1> workingDD:  ;Create a symbol for the working device driver too
   283 00000709 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   284 00000711 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   285 00000719 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   286                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   287                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   288 00000721 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   289 00000729 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   290 00000731 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   291 00000739 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   292 0000073B ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   293 0000073D ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   294                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   295                              <1> ; and 32 byte offset into the sector for directory
   296 00000745 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   297                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   298                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   299 0000074D ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   300                              <1> ;***************************************************|
   301                              <1> ; Needs to be set up before any file access         |
   302                              <1> ; These vars keep track of file access properties   |
   303                              <1> ;   and must be used only for such purposes.        |
   304                              <1> ;***************************************************|
   305 0000074F ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   306 00000753 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   307                              <1> 
   308 00000757 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   309 0000075B ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   310 0000075C ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   311                              <1> 
   312 00000764 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   313 00000766 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   314                              <1> ;***************************************************|
   315 0000076A ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   316 0000076E ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   317 00000772 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   318 00000773 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   319 00000777 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   320 0000077B ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   321                              <1> ;Directory stuff
   322 0000077F ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   323 00000783 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   324 00000787 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   325 00000789 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   326                              <1> ;Error DPB 
   327 0000078D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   328 00000795 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   329                              <1>     
   330 00000796 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   331 000007C1 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   332                              <1> ;Stacks and scratch SFT
   333 000007E1 ??????????????      <1>     alignb  8
   334 000007E8 <res 528h>          <1>     critStack   resq 165
   335 00000D10 ????????????????    <1>     critStakTop resq 1
   336                              <1> 
   337 00000D18 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   338                              <1>     
   339 00000D67 ??                  <1>     alignb  8
   340 00000D68 <res 638h>          <1>     AuxStack    resq 199
   341 000013A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   342 000013A8 <res 638h>          <1>     DiskStack   resq 199
   343 000019E0 ????????????????    <1>     DiskStakTop resq 1
   344                              <1> 
   345 000019E8 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   346 000019E9 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   347                              <1>     ;The above is used in create and delete for volume labels only. Otherwise is -1.
   348                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   349 000019EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   350 00001A5A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   351                              <1> ;Exception handler vars in SDA now 
   352 00001A82 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   353 00001A92 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   354                              <1>     sdaLen      equ     $ - sda 
   355                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   356                              <1> 
   357                              <1> ;Additional variables NOT in the SDA
   358 00001A93 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   359 00001A9B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   360 00001A9C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   361                              <1>     ;for saving the current header when quickly doing a second request
   362                              <1> 
   363 00001AC6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   364 00001AC7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   365                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   366                              <1> inExtASCII:
   367 00001AC9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   368 00001ACA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   369                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   370                              <1>     ; copy of the date/time record
   371                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   372                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   373                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   374                              <1>     ; to the read IDT routine".
   375                              <1>     dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   376 00001ACC ????                <1>         .limit  dw ?
   377 00001ACE ????????????????    <1>         .base   dq ?
   378                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   379                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   380                              <1>     ; were allowed to write to original callers register stack. 
   381                              <1>     ; So we have this structure below that is used by these functions to 
   382                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   383                              <1>     ; through the multiplexer we never will read this structure. 
   384                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   385 00001AD6 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   386                              <1>     dSegLen     equ     $
    20                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    21                                  %define currSegVBase section.resSeg.vstart
    22                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 96 ;.96
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0060                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic.
    37 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    38 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    39 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    40                              <1> ;Extended ASCII keys with special meanings
    41 0000003C 3B                  <1> extKeyTbl   db eF1
    42 0000003D ED29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    43 0000003F 3C                  <1>             db eF2
    44 00000040 DF29                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    45 00000042 3D                  <1>             db eF3
    46 00000043 E629                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    47 00000045 3E                  <1>             db eF4
    48 00000046 1B2A                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    49 00000048 3F                  <1>             db eF5
    50 00000049 602A                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    51 0000004B 40                  <1>             db eF6
    52 0000004C 762A                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    53 0000004E 41                  <1>             db eF7
    54 0000004F 7D2A                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    55 00000051 4B                  <1>             db eCursL
    56 00000052 4429                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    57 00000054 4D                  <1>             db eCursR
    58 00000055 ED29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    59 00000057 52                  <1>             db eIns
    60 00000058 882A                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    61 0000005A 53                  <1>             db eDel
    62 0000005B 8F2A                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    63                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    64                              <1> 
    65                              <1> ;When counting the number of days, first compute the number of years since
    66                              <1> ; 1980 and your year. 
    67                              <1> ;Then, using the table below, find the number of leap years between 1980
    68                              <1> ; and (YourYear - 1). 
    69                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    70                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    71                              <1> ;
    72                              <1> ;Use the months table to get the number of days in a normal month as leap 
    73                              <1> ; years are added using the previous comment.
    74                              <1> 
    75                              <1> ;This table is the number of days in the month
    76                              <1> ;The function which updates the days in Feb writes the number to this table
    77                              <1> monthsTbl:  
    78 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    78 00000066 1F1E1F              <1>
    79                              <1> 
    80                              <1> ;Error tables
    81                              <1> hardXlatTbl:
    82                              <1> ;Hard error xlat table. Used so that it can be patched by 
    83                              <1> ; multitaskers and network tools as opposed to having a static
    84                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    85 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    86 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    87 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    88 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    89 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    90 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    91 0000006F 19                  <1>     db errSekErr    ;Seek error
    92 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    93 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    94 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    95 00000073 1D                  <1>     db errWF        ;Write fault
    96 00000074 1E                  <1>     db errRF        ;Read fault
    97 00000075 1F                  <1>     db errGF        ;General fault
    98                              <1>     ;The following two adjust for share errors
    99 00000076 1F                  <1>     db errGF        ;Sharing violations
   100 00000077 1F                  <1>     db errGF        ;File Lock violation
   101 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   102                              <1> hardXlatTblL equ $ - hardXlatTbl
   103                              <1> errXlatTbl:
   104                              <1> ;Each entry is n bytes long, defined as
   105                              <1> ; Byte 0      : DOS function number for which translation will occur
   106                              <1> ; Byte 1      : Length of the table entry - 2
   107                              <1> ; Bytes n - 3 : Acceptable Error codes
   108                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   109                              <1> ;The table is terminated with a single -1 byte
   110                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   111                              <1> ; only on entry to a disk function
   112 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   113 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   114 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   115 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   116 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   117 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   118 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   119 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   120 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   121 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   122 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   123 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   124 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   125 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   126 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   127 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   128 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   129 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   130 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   131 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   132 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   133 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   134 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   135 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   136 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   137 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   138 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   139 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   140 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   141 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   142 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   143 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   144 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   145 00000114 FF                  <1>     db -1   ;End Of Table marker
   146                              <1> 
   147                              <1> 
   148                              <1> extErrTbl:
   149                              <1> ;This table contains the default values for how to respond
   150                              <1> ; to particular errors. Fields with -1 need to be filled in before
   151                              <1> ; setting variables using this table.
   152                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   153                              <1> ; Byte 0: Extended Error Code as a byte
   154                              <1> ; Byte 1: Error Class
   155                              <1> ; Byte 2: Error Suggested Action
   156                              <1> ; Byte 3: Error Locus
   157                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   158                              <1> ;
   159                              <1> ;Error 01: Invalid function number
   160 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   161                              <1> ;Error 02: File not found
   162 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   163                              <1> ;Error 03: Path not found
   164 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   165                              <1> ;Error 04: Too many open handles, and no handles are left
   166 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   167                              <1> ;Error 05: Access being denied
   168 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   169                              <1> ;Error 06: Invalid File handle being provided
   170 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   171                              <1> ;Error 07: MCB chain destroyed
   172 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   173                              <1> ;Error 08: No Memory remaining
   174 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   175                              <1> ;Error 09: Invalid MCB block Address
   176 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   177                              <1> ;Error 0A: Bad Environment block
   178 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0B: Data provided in a bad format
   180 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   181                              <1> ;Error 0C: Access Code Invalid
   182 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 0D: Error due to Invalid Data provided
   184 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   185                              <1> ;Error 0F: Error due to a bad drive letter being provided
   186 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   187                              <1> ;Error 10: Error due to attempting to delete the CWD
   188 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   189                              <1> ;Error 11: Error due to a unknown device being used
   190 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   191                              <1> ;Error 12: No more file handles available
   192 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   193                              <1> ;Error 50: Network request not supported
   194 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   195                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   196 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   197                              <1> ;Error 21: File Locking Violation
   198 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 54: Too many levels of redirection error
   200 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   201                              <1> ;Error 56: Bad resource password provided
   202 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   203                              <1> ;Error 52: Directory already exists
   204 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   205                              <1> ;Error 32: Network request not supported by DOS
   206 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   207                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   208 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   209                              <1> ;Error 57: Bad parameter in request
   210 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   211                              <1> ;Error 53: Fail was returned from Int 24h
   212 0000017D 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   213                              <1> ;Error 24: Sharing Buffer Full
   214 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   215 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   216                              <1> 
   217                              <1> ;Nationalisation stuff
   218                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   219 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   220 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   220 0000019A 535953000000000000- <1>
   220 000001A3 000000000000000000- <1>
   220 000001AC 000000000000000000- <1>
   220 000001B5 000000000000000000- <1>
   220 000001BE 000000000000000000- <1>
   220 000001C7 000000000000000000- <1>
   220 000001D0 00                  <1>
   221 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   222 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   223                              <1> charTableArray: ;All the qwords need fixing up here
   224                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   225 000001D5 02                  <1>     db 2
   226 000001D6 [2602000000000000]  <1>     dq ucTblExt
   227                              <1> .filenameUCTable:
   228 000001DE 04                  <1>     db 4
   229 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   230                              <1> .filenameTerminatingTable:
   231 000001E7 05                  <1>     db 5
   232 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   233                              <1> .collatingTable:
   234 000001F0 06                  <1>     db 6
   235 000001F1 [5A03000000000000]  <1>     dq collTblExt
   236                              <1> ;Extended country table
   237                              <1> extCtryTbl:
   238 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   239                              <1>     ;Below: Length of structure (not including this word and above byte)
   240 000001FA 2A00                <1>     dw extCtryTblL
   241                              <1> .countryCode:
   242 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   243                              <1> .activeCP:
   244 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   245                              <1> ;Regular country table
   246                              <1> ctryTbl:
   247                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   248 00000200 0100                <1>     dw 1    ;Date format, UK style
   249 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   250 00000207 2C00                <1>     db ",",0    ;Thousand separator
   251 00000209 2E00                <1>     db ".",0    ;Decimal separator
   252 0000020B 2D00                <1>     db "-",0    ;Date separator
   253 0000020D 3A00                <1>     db ":",0    ;Time separator
   254 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   255 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   256 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   257 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   258 0000021A 2C00                <1>     db ",",0    ;Data list separator
   259 0000021C 000000000000000000- <1>     db 10 dup (0)
   259 00000225 00                  <1>
   260                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   261                              <1> 
   262                              <1> ucTblExt:   ;External pointer to the uppercase table
   263 00000226 8000                <1>     dw 80h
   264                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   265 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   266 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   267 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   268 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   269 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   270 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   271 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   272 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   273 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   274 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   275 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   276 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   277 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   278 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   279 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   280 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   281                              <1> 
   282                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   283 000002A8 8000                <1>     dw 80h
   284                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   285 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   286 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   287 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   288 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   289 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   290 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   291 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   292 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   293 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   294 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   295 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   296 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   297 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   298 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   299 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   300 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   301                              <1> 
   302                              <1> fileTermTblExt:
   303 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   304 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   305 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   306 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   307 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   308                              <1> .startBadRange:
   309 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   310                              <1> .endBadRange:
   311 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   312 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   313                              <1> fileTermTbl:
   314 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   315 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   316 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   317                              <1>     fileTermTbl_len equ $ - fileTermTbl
   318                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   319                              <1>     ;Buffer space
   320 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   320 0000034B 000000000000000000- <1>
   320 00000354 000000000000        <1>
   321                              <1> 
   322                              <1> collTblExt:  ;Collating sequence table, for sorting
   323 0000035A 0001                <1>     dw 0100h
   324                              <1> collTbl:
   325 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   326 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   327 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   328 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   329 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   330 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   331 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   332 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   333 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   334 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   335 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   336 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   337 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   338 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   339 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   340 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   341 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   342 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   343 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   344 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   345 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   346 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   347 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   348 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   349 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   350 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   351 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   352 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   353 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   354 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   355 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   356 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   357                              <1> 
   358                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   359                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   360                              <1> ;Bit[1]=Clear if the char of a terminating type.
   361                              <1> ;Bit[2]=Clear if the char is of space/tab type.
   362                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   363                              <1> ;Bit[4-7]=Unused.    
   364                              <1> 
   365 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   366 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   367 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   368 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   369 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   370 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   371 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   372 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   373 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   374 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   375 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   376 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   377 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   378 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   379 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   380 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   381 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   381 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   381 000004EE FFFFFFFFFFFFFFFFFF- <1>
   381 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   381 00000500 FFFFFFFFFFFFFFFFFF- <1>
   381 00000509 FFFFFFFFFFFFFFFFFF- <1>
   381 00000512 FFFFFFFFFFFFFFFFFF- <1>
   381 0000051B FFFFFFFFFFFFFFFFFF- <1>
   381 00000524 FFFFFFFFFFFFFFFFFF- <1>
   381 0000052D FFFFFFFFFFFFFFFFFF- <1>
   381 00000536 FFFFFFFFFFFFFFFFFF- <1>
   381 0000053F FFFFFFFFFFFFFFFFFF- <1>
   381 00000548 FFFFFFFFFFFFFFFFFF- <1>
   381 00000551 FFFFFFFFFFFFFFFFFF- <1>
   381 0000055A FFFF                <1>
    23                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 4C53                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E A91E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 B61E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 8A1F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 B31F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 BB1F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 D31F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A 0620                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C 2B20                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 8A20                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 3D23                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 9920                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 A520                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 626F                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 946F                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A E82A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C E82A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E 7C28                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 3529                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 BC29                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 E82A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 E82A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 DE2A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A EB29                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 3872                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E AD6F                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 A92A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 B46F                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 B66F                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 3872                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 3872                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 6370                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 3872                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E E82A                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 E82A                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 562A                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 E82A                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 FF6F                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 5152                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA E82A                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC E82A                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE CF2A                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 B625                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 DD25                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 E325                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 0426                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 2970                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA BC2A                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 3770                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 1E53                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 6570                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 8C6E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 9D70                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 AE70                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 BD70                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA D05B                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC F95B                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE A314                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 FD16                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 E318                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 EC2C                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 FD2C                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 242E                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA 632E                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC 9E2E                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE AA2E                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 0F2F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 7E2F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 5448                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 A130                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 DC30                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 621A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC E94C                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE ED4E                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 F54F                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 9854                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 4E53                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 0171                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 F130                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA 5C31                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC D66E                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE DF6E                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 0F71                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 2071                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 FE71                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 3E52                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 8C31                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A 1832                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 9D51                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E 0572                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 6032                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 2833                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 3C33                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 3972                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 FD73                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 6374                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C D01A                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E F96E                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 E86E                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 3872                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 F16E                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 915C                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 555D                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A A833                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C E534                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 4374                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 283D                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 FA67                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 4674                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 4969                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 E61D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 055E                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 1347                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 AA00                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 A975                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 1775                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 DE39                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 9727                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B C000                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D DA00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F E800                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 A569                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 8769                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 5569                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 E46A                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 FB00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   136 0000065B 2B46                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 1769                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 2868                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 BC68                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 FB0B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 2A27                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 9A74                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 A774                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B BE69                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 6668                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 6046                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 F419                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 546D                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 3E13                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 F474                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 7C69                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 4E74                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D 522D                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 5674                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 912D                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 6671                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 7874                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 156B                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 206B                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B 6671                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D 7A6F                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 4D71                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 9F71                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 F871                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 0972                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 1172                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 1972                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 3472                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 5E72                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 5E72                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 5E72                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 6B72                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    24                                  %if DEBUG
    25                                  %include "./src/Debug/debug.asm"
    26                                  %endif
    27                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 000006AD 7428                <1>     je .exit
    13 000006AF 56                  <1>     push rsi
    14 000006B0 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B7 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BA 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BC 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006BF EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C1 57                  <1>     push rdi
    22 000006C2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C8 5F                  <1>     pop rdi ;Get original buf back
    25 000006C9 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CC 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D3 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D6 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 000006D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 2Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 000006D8 E84C000000          <1>     call flushBuffer
    36                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000006DD 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 000006DF 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer   ;Free buffer and clear flags
    39                              <1>     return
    13                              <2> %%_ret:
    14 000006E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                              <1> 
    41                              <1> markBuffersAsUnreferencedWrapper:
    42                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    43                              <1> ; and preserves rdi
    44 000006E6 57                  <1>     push rdi
    45 000006E7 E802000000          <1>     call markBuffersAsUnreferenced
    46 000006EC 5F                  <1>     pop rdi
    47                              <1>     return
    13                              <2> %%_ret:
    14 000006ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    50                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    51                              <1> ;Output: rdi = First disk buffer
    52 000006EE 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    53 000006F5 57                  <1>     push rdi
    54                              <1> .lp:
    55 000006F6 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    56 000006FA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    57 000006FD 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    58 00000704 75F0                <1>     jne .lp
    59 00000706 5F                  <1>     pop rdi
    60                              <1>     return
    13                              <2> %%_ret:
    14 00000707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    63                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    64                              <1> ; second buffer in the chain in rdi
    65                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    66                              <1> ;Output: rdi = Second buffer in the chain
    67 00000708 52                  <1>     push rdx
    68 00000709 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    69 0000070C E895FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    70 00000711 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    71 00000714 5A                  <1>     pop rdx
    72                              <1>     return
    13                              <2> %%_ret:
    14 00000715 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    73                              <1> 
    74                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    75                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    76                              <1> ;Input: rdi = Buffer header to start searching at
    77                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    78                              <1> ;        ZF=ZE => No unreferenced buffer found
    79 00000716 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    80 0000071A 750C                <1>     jnz .exit
    81 0000071C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    82 0000071F 4881FFFFFFFFFF      <1>     cmp rdi, -1
    83 00000726 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    84                              <1> .exit:
    85                              <1>     return
    13                              <2> %%_ret:
    14 00000728 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> flushBuffer:         ;Internal Linkage Int 2Fh AX=1215h
    88                              <1> ;Flushes the data in a sector buffer to disk!
    89                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    90                              <1> ;Exit:  CF=NC : Success
    91                              <1> ;       CF=CY : Fail, terminate the request
    92                              <1> ;First make request to device driver
    93 00000729 50                  <1>     push rax
    94 0000072A 53                  <1>     push rbx
    95 0000072B 51                  <1>     push rcx
    96 0000072C 52                  <1>     push rdx
    97 0000072D 56                  <1>     push rsi
    98 0000072E 55                  <1>     push rbp
    99                              <1> ;If the buffer is freed, skip flushing to avoid issues
   100 0000072F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   101 00000733 7454                <1>     je .fbFreeExit  ;If it is free exit
   102 00000735 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   103 00000739 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   104                              <1> .fbRequest0:
   105 0000073B BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   106 00000740 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   107 00000744 7406                <1>     jz .fbRequest1
   108 00000746 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   109                              <1> .fbRequest1:
   110 0000074C 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   111 0000074F B901000000          <1>     mov ecx, 1  ;One sector to copy
   112 00000754 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   113 00000758 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   114 0000075C 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   115 00000760 E86F650000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   116 00000765 E8A3630000          <1>     call absDiskDriverCall    ;Make Driver Request
   117 0000076A 7525                <1>     jnz .fbFail
   118                              <1> ;Now check if the buffer was a FAT, to write additional copies
   119 0000076C F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   120 00000770 7417                <1>     jz .fbFreeExit  ;If not, exit
   121 00000772 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   122 00000775 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   123 00000777 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   124 0000077A 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   125 0000077E E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   126                              <1> .fbFreeExit1:
   127 00000783 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   128 00000786 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   129                              <1> .fbFreeExit:
   130 00000789 F8                  <1>     clc
   131                              <1> .fbExitFail:
   132 0000078A 5D                  <1>     pop rbp
   133 0000078B 5E                  <1>     pop rsi
   134 0000078C 5A                  <1>     pop rdx
   135 0000078D 59                  <1>     pop rcx
   136 0000078E 5B                  <1>     pop rbx
   137 0000078F 58                  <1>     pop rax
   138                              <1>     return
    13                              <2> %%_ret:
    14 00000790 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   139                              <1> .fbFail:
   140                              <1> ;Enter here only if the request failed
   141 00000791 FFCE                <1>     dec esi
   142 00000793 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   143                              <1> ;Request failed thrice, critical error call
   144                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   145 00000795 C605(67040000)01    <1>     mov byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   146 0000079C E8A55B0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   147 000007A1 3C01                <1>     cmp al, critRetry
   148 000007A3 7496                <1>     je .fbRequest0
   149                              <1>     ;Else we fail (Ignore=Fail here)
   150 000007A5 F9                  <1>     stc ;Set error flag to indicate fail
   151 000007A6 E9DFFFFFFF          <1>     jmp .fbExitFail
   152                              <1> 
   153                              <1> testDirtyBufferForDrive:    ;External linkage
   154                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   155                              <1> ;Input: al = Drive number (0 based)
   156                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   157                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   158 000007AB 53                  <1>     push rbx
   159 000007AC 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   160                              <1> .tdbfdCheckBuffer:
   161 000007B3 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   162 000007B6 7509                <1>     jne .tdbfdGotoNextBuffer
   163 000007B8 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   164 000007BC 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   165 000007BE F9                  <1>     stc ;Else dirty buffer found, set carry flag
   166                              <1> .tdbfdExit:
   167 000007BF 5B                  <1>     pop rbx
   168                              <1>     return
    13                              <2> %%_ret:
    14 000007C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   169                              <1> .tdbfdGotoNextBuffer:
   170 000007C1 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   171 000007C4 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   172 000007CB 74F2                <1>     je .tdbfdExit
   173 000007CD EBE4                <1>     jmp short .tdbfdCheckBuffer
   174                              <1> 
   175                              <1> 
   176                              <1> cancelWriteThroughBuffers:  ;External linkage
   177                              <1> ; Frees all buffers for the workingDPB
   178                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   179                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   180                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   181                              <1> ; to have a drive number of -1, thus freeing it
   182                              <1> ;Given DPB is in rbp
   183 000007CF 53                  <1>     push rbx
   184 000007D0 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   185                              <1> .i0:
   186 000007D7 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   187 000007DB 7506                <1>     jne .i1 ;If no, skip freeing
   188 000007DD 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], freeBuffer  ;Free buffer and clear flags
   189                              <1> .i1:
   190 000007E3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   191 000007E6 4881FBFFFFFFFF      <1>     cmp rbx, -1
   192 000007ED 75E8                <1>     jne .i0
   193                              <1> .exit:
   194 000007EF 5B                  <1>     pop rbx
   195                              <1>     return
    13                              <2> %%_ret:
    14 000007F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> 
   198                              <1> writeThroughBuffer:
   199                              <1> ; Input: rdi -> Buffer to flush
   200                              <1> ;Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   201                              <1> ;         CF=CY => Buffer failed to flush, left possibly dirty and/or referenced
   202 000007F1 E833FFFFFF          <1>     call flushBuffer
   203                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000007F6 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000007F8 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   205                              <1>     return
    13                              <2> %%_ret:
    14 000007FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> writeThroughBuffers:    ;External linkage
   208                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   209                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   210                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   211 000007FD 50                  <1>     push rax
   212 000007FE 57                  <1>     push rdi
   213 000007FF 488B05(09070000)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   214 00000806 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   215                              <1> .mainLp:
   216 0000080D 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   217 00000814 7412                <1>     je .exit   
   218 00000816 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   219 0000081A 7507                <1>     jne .nextBuffer
   220 0000081C E8D0FFFFFF          <1>     call writeThroughBuffer    ;Flush this buffer if it is on the DPB we want
   221 00000821 7205                <1>     jc .exit    ;Exit if something went wrong!
   222                              <1> .nextBuffer:
   223 00000823 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   224 00000826 EBE5                <1>     jmp short .mainLp
   225                              <1> .exit:
   226 00000828 5F                  <1>     pop rdi
   227 00000829 58                  <1>     pop rax
   228                              <1>     return
    13                              <2> %%_ret:
    14 0000082A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> markBufferDirty:
   231 0000082B 55                  <1>     push rbp
   232 0000082C 9C                  <1>     pushfq
   233 0000082D 488B2D(3D070000)    <1>     mov rbp, qword [currBuff]
   234 00000834 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   235 00000838 9D                  <1>     popfq
   236 00000839 5D                  <1>     pop rbp
   237                              <1>     return
    13                              <2> %%_ret:
    14 0000083A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> 
   240                              <1> getBuffer: ;Internal Linkage ONLY
   241                              <1> ;
   242                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   243                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   244                              <1> ;Flushes if not in disk change mode. 
   245                              <1> ;If in disk change mode, will check to see if the selected buffer 
   246                              <1> ; has data referring a device using the same DPB as we are changing.
   247                              <1> ; If it is, skip flushing, if not, flush first!
   248                              <1> ;
   249                              <1> ;This function will return a pointer to the desired data sector OR 
   250                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   251                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   252                              <1> ;Entry: rax = Sector to read
   253                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   254                              <1> ;       rsi = DPB to use for transaction
   255                              <1> ;Exit:  CF=NC => 
   256                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   257                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   258 0000083B 51                  <1>     push rcx
   259 0000083C 52                  <1>     push rdx
   260 0000083D 56                  <1>     push rsi
   261 0000083E 57                  <1>     push rdi
   262 0000083F 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   263 00000841 E822010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   264 00000846 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   265 0000084D 741A                <1>     je .rbReadNewSector
   266 0000084F 48893D(3D070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   267 00000856 F8                  <1>     clc
   268                              <1> .rbExit:
   269 00000857 5F                  <1>     pop rdi
   270 00000858 5E                  <1>     pop rsi
   271 00000859 5A                  <1>     pop rdx
   272 0000085A 59                  <1>     pop rcx
   273 0000085B 9C                  <1>     pushfq
   274 0000085C 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   275 00000863 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   276 00000867 9D                  <1>     popfq
   277                              <1>     return
    13                              <2> %%_ret:
    14 00000868 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   278                              <1> .rbReadNewSector:
   279 00000869 E8A3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   280 0000086E E865FEFFFF          <1>     call flushAndFreeBuffer
   281 00000873 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   282                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   283                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   284                              <1>     ; is no longer owned by that File so we mark the owner as none
   285 00000875 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   286 0000087D 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   287 00000880 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   288 00000883 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   289 00000887 80F902              <1>     cmp cl, fatBuffer
   290 0000088A B201                <1>     mov dl, 1   ;Default values if not fat buffer
   291 0000088C 7503                <1>     jne .rbNonFATbuffer
   292 0000088E 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   293                              <1> .rbNonFATbuffer:
   294 00000891 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   295 00000894 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   296 00000897 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   297 0000089A 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   298 0000089E C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   299 000008A2 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   300 000008A7 EBAE                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   301                              <1> 
   302                              <1> readSectorBuffer:   ;Internal Linkage
   303                              <1> ;Reads a sector into a built sector buffer
   304                              <1> ;Entry: rdi = Pointer to buffer header
   305                              <1> ;Exit:  CF=NC : Success
   306                              <1> ;       CF=CY : Fail, terminate the request
   307                              <1> ;       rbx pointing to buffer header
   308                              <1> ;First make request to device driver
   309 000008A9 50                  <1>     push rax
   310 000008AA 53                  <1>     push rbx
   311 000008AB 51                  <1>     push rcx
   312 000008AC 52                  <1>     push rdx
   313 000008AD 56                  <1>     push rsi
   314 000008AE 55                  <1>     push rbp
   315                              <1> .rsRequest0:
   316 000008AF BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   317 000008B4 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   318 000008B8 7406                <1>     jz .rsRequest1
   319 000008BA 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   320                              <1> .rsRequest1:
   321 000008C0 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   322 000008C3 B901000000          <1>     mov ecx, 1  ;One sector to copy
   323 000008C8 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   324 000008CC 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   325 000008D0 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   326 000008D4 E806640000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   327 000008D9 E82F620000          <1>     call absDiskDriverCall    ;Make Driver Request
   328 000008DE 7508                <1>     jnz .rsFail
   329                              <1> .rsExit:
   330 000008E0 F8                  <1>     clc
   331                              <1> .rsExitFail:
   332 000008E1 5D                  <1>     pop rbp
   333 000008E2 5E                  <1>     pop rsi
   334 000008E3 5A                  <1>     pop rdx
   335 000008E4 59                  <1>     pop rcx
   336 000008E5 5B                  <1>     pop rbx
   337 000008E6 58                  <1>     pop rax
   338                              <1>     return
    13                              <2> %%_ret:
    14 000008E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   339                              <1> .rsFail:
   340                              <1> ;Enter here only if the request failed
   341 000008E8 FFCE                <1>     dec esi
   342 000008EA 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   343                              <1> ;Request failed thrice, critical error call
   344                              <1> ;First free the buffer if we failed to read data into it. 
   345                              <1> ;We free this buffer to free the resource if the user aborts.
   346                              <1> ;This function is called in a critical section so the buffer pointer
   347                              <1> ; is under no thread of being reallocated.
   348                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   349 000008EC 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   350 000008F2 C605(67040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   351 000008F9 E8485A0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   352 000008FE 3C01                <1>     cmp al, critRetry
   353 00000900 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   354 00000902 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   355 00000906 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   356 00000909 EBA4                <1>     jmp short .rsRequest0
   357                              <1> .fail:
   358 0000090B F9                  <1>     stc ;Set error flag to indicate fail
   359 0000090C E9D0FFFFFF          <1>     jmp .rsExitFail
   360                              <1>     
   361                              <1> findLRUBuffer: ;Internal Linkage
   362                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   363                              <1> ; in rbx and the currBuff variable
   364                              <1> ;Input: Nothing
   365                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   366                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   367 00000911 52                  <1>     push rdx
   368 00000912 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   369 00000919 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   370 0000091D 7436                <1>     je .flbExit 
   371 0000091F 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   372 00000926 742D                <1>     je .flbExit
   373                              <1> .flbWalk:
   374 00000928 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   375 0000092B 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   376 0000092E 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   377 00000932 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   378 00000934 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   379 0000093B 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   380 0000093D 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   381                              <1> .flbHeadLink:
   382 00000944 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   383 0000094B 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   384 00000952 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   385                              <1> .flbExit:
   386 00000955 5A                  <1>     pop rdx
   387 00000956 48893D(3D070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   388                              <1>     return
    13                              <2> %%_ret:
    14 0000095D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .flbFreeLink:
   390 0000095E 51                  <1>     push rcx
   391 0000095F 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   392 00000962 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   393 00000965 59                  <1>     pop rcx
   394 00000966 EBDC                <1>     jmp short .flbHeadLink
   395                              <1> 
   396                              <1> findSectorInBuffer:     ;Internal linkage
   397                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   398                              <1> ;If the sector is not in a buffer, returns with a -1
   399                              <1> ;Input: rax = Sector number
   400                              <1> ;       dl = Drive number
   401                              <1> ;Output: rdi = Buffer hdr pointer or -1
   402 00000968 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .fsiCheckBuffer:
   404 0000096F 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   405 00000972 7507                <1>     jne .fsiGotoNextBuffer
   406 00000974 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   407 00000978 7501                <1>     jne .fsiGotoNextBuffer
   408                              <1> .fsiExit:
   409                              <1>     return
    13                              <2> %%_ret:
    14 0000097A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .fsiGotoNextBuffer:
   411 0000097B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 0000097E 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 00000985 74F3                <1>     je .fsiExit
   414 00000987 EBE6                <1>     jmp short .fsiCheckBuffer
   415                              <1> 
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> ;SPECIAL BUFFER FUNCTIONS
   418                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   419                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   420                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   421                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   422                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   423                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   424                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   425                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   426                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   427                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   428                              <1> ;-----------------------------------------------------------------------------
   429                              <1> getBufForDataNoFile:
   430                              <1> ;Returns a buffer to use for disk data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 00000989 51                  <1>     push rcx
   436 0000098A B108                <1>     mov cl, dataBuffer
   437 0000098C 56                  <1>     push rsi
   438 0000098D 57                  <1>     push rdi
   439 0000098E 488B35(09070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 00000995 E8A1FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 0000099A 725F                <1>     jc getBufCommon.exit
   442 0000099C 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 000009A4 EB55                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForDirNoFile:
   445                              <1> ;Returns a buffer to use for disk dir data in rbx
   446                              <1> ;Requires a File Handle.
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 000009A6 51                  <1>     push rcx
   451 000009A7 B104                <1>     mov cl, dirBuffer
   452 000009A9 56                  <1>     push rsi
   453 000009AA 57                  <1>     push rdi
   454 000009AB 488B35(09070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   455 000009B2 E884FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   456 000009B7 7242                <1>     jc getBufCommon.exit
   457 000009B9 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   458 000009C1 EB38                <1>     jmp short getBufCommon.exit
   459                              <1> getBufForFat:
   460                              <1> ;Returns a buffer to use for fat data in rbx
   461                              <1> ;Input: [workingDPB] = DPB to transact on
   462                              <1> ;       rax = Sector to transfer
   463                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   464 000009C3 51                  <1>     push rcx
   465 000009C4 B102                <1>     mov cl, fatBuffer
   466 000009C6 EB03                <1>     jmp short getBufCommon2
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 000009C8 51                  <1>     push rcx
   473 000009C9 B101                <1>     mov cl, dosBuffer
   474                              <1> getBufCommon2:
   475 000009CB 56                  <1>     push rsi
   476 000009CC 57                  <1>     push rdi    ;Push rdi to preserve it
   477 000009CD 488B35(09070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   478 000009D4 EB15                <1>     jmp short getBufCommon.makeReq
   479                              <1> getBufForDir:
   480                              <1> ;Returns a buffer to use for disk directory data in rbx
   481                              <1> ;Input: [currentSFT] = File to manipulate
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 000009D6 51                  <1>     push rcx
   485 000009D7 B104                <1>     mov cl, dirBuffer
   486 000009D9 EB03                <1>     jmp short getBufCommon
   487                              <1> getBufForData:
   488                              <1> ;Returns a buffer to use for disk data in rbx
   489                              <1> ;Requires a File Handle.
   490                              <1> ;Input: [currentSFT] = File to manipulate
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 000009DB 51                  <1>     push rcx
   494 000009DC B108                <1>     mov cl, dataBuffer
   495                              <1> getBufCommon:
   496 000009DE 56                  <1>     push rsi
   497 000009DF 57                  <1>     push rdi
   498 000009E0 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
   499 000009E7 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   500                              <1> .makeReq:
   501 000009EB E84BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   502 000009F0 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   503                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   504                              <1>     ; flushed to the file!
   505                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   506                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   507                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   508 000009F2 F6C103              <1>     test cl, dosBuffer | fatBuffer
   509 000009F5 7504                <1>     jnz .exit
   510 000009F7 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   511                              <1> .exit:
   512 000009FB 5F                  <1>     pop rdi
   513 000009FC 5E                  <1>     pop rsi
   514 000009FD 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 000009FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> flushFile:
   518                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   519                              <1> ; FAT/DOS buffers to flush
   520                              <1> ; We flush and free, and set to head of chain before continuing to search
   521                              <1> ;Input: rdi = is the file (sft) we wish to flush
   522                              <1> ;Output: CF=NC => All ok
   523                              <1> ;        CF=CY => A sector failed, exit.
   524 000009FF 57                  <1>     push rdi
   525 00000A00 56                  <1>     push rsi
   526                              <1>     ;First check if the file has been written to?
   527 00000A01 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   528 00000A07 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   529 00000A09 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   530 00000A0C 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   531                              <1> .ffLoop:
   532 00000A13 4881FFFFFFFFFF      <1>     cmp rdi, -1
   533 00000A1A 741B                <1>     je .exit
   534 00000A1C F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   535 00000A20 751E                <1>     jnz .found  ;Flush if either bit is set
   536 00000A22 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   537 00000A2A 7414                <1>     je .found
   538 00000A2C 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   539 00000A30 740E                <1>     je .found
   540 00000A32 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   541 00000A35 EBDC                <1>     jmp short .ffLoop
   542                              <1> .exit:
   543                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   544 00000A37 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   545                              <1> .exitNoFlush:
   546 00000A3D 5E                  <1>     pop rsi
   547 00000A3E 5F                  <1>     pop rdi
   548                              <1>     return
    13                              <2> %%_ret:
    14 00000A3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .found:
   550                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   551                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   552 00000A40 E8ACFDFFFF          <1>     call writeThroughBuffer ;Flush buffer and mark as not dirty
   553 00000A45 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   554                              <1>     ;If the sector has been successfully flushed, then it
   555                              <1>     ; is no longer owned by that File so we mark the owner as none
   556 00000A47 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   557 00000A4F E8B4FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   558 00000A54 EBBD                <1>     jmp short .ffLoop
    28                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A56 53                  <1>     push rbx
     9 00000A57 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 00000A5A B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A5F 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A65 730C                <1>     jae .exit
    13 00000A67 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A69 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A6F 7302                <1>     jae .exit
    16 00000A71 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A73 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A75 53                  <1>     push rbx
    29 00000A76 55                  <1>     push rbp
    30 00000A77 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A7E 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000A81 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A87 731E                <1>     jae .fat32
    34 00000A89 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A8F 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A91 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A93 6801000000          <1>     push qword 1
    39 00000A98 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A9A 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A9C D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A9E 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000AA0 6800000000          <1>     push qword 0
    45 00000AA5 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000AA7 6802000000          <1>     push qword 2
    48 00000AAC C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000AAF 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000AB3 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000AB5 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000AB7 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000ABB 01D8                <1>     add eax, ebx
    56 00000ABD 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000ABE 5D                  <1>     pop rbp
    58 00000ABF 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000AC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000AC1 51                  <1>     push rcx
    68 00000AC2 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000AC4 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000AC6 482D02000000        <1>     sub rax, 2
    72 00000ACC 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000ACF 48D3E0              <1>     shl rax, cl
    74 00000AD2 31C9                <1>     xor ecx, ecx
    75 00000AD4 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000AD7 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000ADA 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000ADB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000ADC 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000ADF E872FFFFFF          <1>     call getFATtype
    83 00000AE4 81F902000000        <1>     cmp ecx, 2
    84 00000AEA 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AEC 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AEE 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AF0 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AF2 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AF3 89C3                <1>     mov ebx, eax
   100 00000AF5 E8C9010000          <1>     call readFAT
   101 00000AFA 7209                <1>     jc .exit
   102 00000AFC 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000B01 75F0                <1>     jne .lp
   104 00000B03 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000B05 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000B06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000B07 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000B09 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000B0B 51                  <1>     push rcx
   117 00000B0C 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000B0E FFC1                <1>     inc ecx
   120 00000B10 E8AE010000          <1>     call readFAT
   121 00000B15 7209                <1>     jc .exit
   122 00000B17 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000B1C 75F0                <1>     jne .lp
   124 00000B1E 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000B20 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000B21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000B22 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000B24 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000B26 53                  <1>     push rbx
   140 00000B27 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000B2A 89C3                <1>     mov ebx, eax
   143 00000B2C E892010000          <1>     call readFAT
   144 00000B31 7206                <1>     jc .exit
   145 00000B33 FFC9                <1>     dec ecx
   146 00000B35 75F3                <1>     jnz .lp
   147 00000B37 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B39 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B3B 53                  <1>     push rbx
   157 00000B3C 56                  <1>     push rsi
   158 00000B3D E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B42 721A                <1>     jc .exit    ;Disk read error?
   160 00000B44 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B49 7413                <1>     je .exit
   162 00000B4B BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B50 89C3                <1>     mov ebx, eax
   164 00000B52 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000B57 89D8                <1>     mov eax, ebx
   166 00000B59 E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000B5E 5E                  <1>     pop rsi
   169 00000B5F 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000B61 F8                  <1>     clc ;Always clear the flags before starting
   182 00000B62 53                  <1>     push rbx
   183 00000B63 56                  <1>     push rsi
   184 00000B64 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000B65 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000B68 E837000000          <1>     call findFreeCluster
   188 00000B6D 722B                <1>     jc .exit
   189 00000B6F 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000B74 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000B76 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000B7B 50                  <1>     push rax
   195 00000B7C E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000B81 58                  <1>     pop rax
   197 00000B82 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000B84 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000B89 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000B8B 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000B8D E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000B92 7206                <1>     jc .exit
   205 00000B94 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000B96 FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000B98 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000B9A 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000B9B 9C                  <1>     pushfq
   211 00000B9C F7D9                <1>     neg ecx
   212 00000B9E 01F1                <1>     add ecx, esi
   213 00000BA0 9D                  <1>     popfq
   214 00000BA1 5E                  <1>     pop rsi
   215 00000BA2 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000BA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000BA4 53                  <1>     push rbx
   224 00000BA5 52                  <1>     push rdx
   225 00000BA6 55                  <1>     push rbp
   226 00000BA7 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000BAE B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000BB3 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000BB5 E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000BBA 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000BBC 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000BBE 7409                <1>     jz .exit    ;If yes, exit
   237 00000BC0 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000BC4 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000BC7 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000BC9 89D8                <1>     mov eax, ebx
   242 00000BCB F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000BCC 5D                  <1>     pop rbp
   245 00000BCD 5A                  <1>     pop rdx
   246 00000BCE 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000BCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000BD0 53                  <1>     push rbx
   257 00000BD1 52                  <1>     push rdx
   258 00000BD2 55                  <1>     push rbp
   259 00000BD3 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   260 00000BDA 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000BDE C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000BE5 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000BEA 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000BED 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000BEF E8CF000000          <1>     call readFAT
   271 00000BF4 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000BF6 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000BF8 750C                <1>     jne .fatProceed
   274 00000BFA 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000C01 7413                <1>     je .fatFirst
   276 00000C03 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000C06 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000C0A 39D0                <1>     cmp eax, edx
   280 00000C0C 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000C0E 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000C11 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000C12 5D                  <1>     pop rbp
   286 00000C13 5A                  <1>     pop rdx
   287 00000C14 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000C15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000C16 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000C19 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000C20 74E4                <1>     je .fatProceed
   294 00000C22 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000C24 8A05(5B070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000C2A 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000C2D 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000C2F FE05(5B070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000C35 48FF05(5C070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000C3C 488B05(5C070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000C43 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000C44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000C45 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000C4B E873000000          <1>     call readFAT
   323 00000C50 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000C52 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000C57 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000C59 8905(53070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000C5F FF05(4F070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000C65 E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000C6A 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000C71 C605(5B070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000C78 EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000C7A 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000C7B 56                  <1>     push rsi
   348 00000C7C E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000C81 720E                <1>     jc .exit
   350 00000C83 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000C85 E8DA000000          <1>     call writeFAT
   352 00000C8A 7205                <1>     jc .exit
   353 00000C8C E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000C91 5E                  <1>     pop rsi
   356 00000C92 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000C93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000C94 50                  <1>     push rax
   370 00000C95 53                  <1>     push rbx
   371 00000C96 51                  <1>     push rcx
   372 00000C97 56                  <1>     push rsi
   373 00000C98 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000C9A E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000C9F 721D                <1>     jc .exit    ;Error exit
   377 00000CA1 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000CA3 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000CA4 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000CA6 E8B9000000          <1>     call writeFAT
   381 00000CAB 7211                <1>     jc .exit    ;Error exit
   382 00000CAD E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000CB2 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000CB8 7404                <1>     je .exit
   385 00000CBA 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000CBC EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000CBE 5E                  <1>     pop rsi
   389 00000CBF 59                  <1>     pop rcx
   390 00000CC0 5B                  <1>     pop rbx
   391 00000CC1 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000CC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000CC3 53                  <1>     push rbx
   401 00000CC4 51                  <1>     push rcx
   402 00000CC5 52                  <1>     push rdx
   403 00000CC6 57                  <1>     push rdi
   404 00000CC7 55                  <1>     push rbp
   405 00000CC8 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000CCA E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000CCF E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000CD4 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000CD6 85C9                <1>     test ecx, ecx
   412 00000CD8 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000CDA F7C101000000        <1>     test ecx, 1
   414 00000CE0 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000CE2 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000CE7 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000CEC 721E                <1>     jb .exit
   419 00000CEE B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000CF3 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000CF5 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000CF9 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000CFE 7207                <1>     jb .validCluster32   
   425 00000D00 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000D05 EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000D07 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000D0C F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000D0D 5D                  <1>     pop rbp
   433 00000D0E 5F                  <1>     pop rdi
   434 00000D0F 5A                  <1>     pop rdx
   435 00000D10 59                  <1>     pop rcx
   436 00000D11 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000D12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000D13 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000D19 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000D1B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000D1F 29D1                <1>     sub ecx, edx
   449 00000D21 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000D23 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000D25 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000D2A FFC0                <1>     inc eax ;Get next FAT sector
   454 00000D2C 53                  <1>     push rbx
   455 00000D2D E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000D32 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000D33 72D8                <1>     jc .exitFail
   458 00000D35 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000D37 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000D3A C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000D3D EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000D3F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000D44 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000D47 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000D49 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000D4E 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000D53 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000D58 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000D5A B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000D5F E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000D64 53                  <1>     push rbx
   483 00000D65 51                  <1>     push rcx
   484 00000D66 52                  <1>     push rdx
   485 00000D67 56                  <1>     push rsi
   486 00000D68 57                  <1>     push rdi
   487 00000D69 55                  <1>     push rbp
   488 00000D6A 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000D6C E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000D71 E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000D76 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000D78 85C9                <1>     test ecx, ecx
   495 00000D7A 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000D7C F7C101000000        <1>     test ecx, 1
   497 00000D82 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000D84 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000D89 EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000D8B 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000D91 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000D95 E891FAFFFF          <1>     call markBufferDirty
   506 00000D9A F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000D9B 5D                  <1>     pop rbp
   509 00000D9C 5F                  <1>     pop rdi
   510 00000D9D 5E                  <1>     pop rsi
   511 00000D9E 5A                  <1>     pop rdx
   512 00000D9F 59                  <1>     pop rcx
   513 00000DA0 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000DA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000DA2 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000DA8 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000DAE 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000DB0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000DB4 29D1                <1>     sub ecx, edx
   527 00000DB6 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000DB8 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000DBA 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000DBF 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000DC5 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000DC8 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000DCA C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000DCD 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000DD1 E855FAFFFF          <1>     call markBufferDirty
   539 00000DD6 FFC0                <1>     inc eax ;Get next FAT sector
   540 00000DD8 E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000DDD 72BC                <1>     jc .exitFail
   542 00000DDF 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000DE1 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000DE4 EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000DE6 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000DEB 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000DF0 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000DF3 EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000DF5 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000DFA 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000DFF 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000E01 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000E06 E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000E0B 9C                  <1>     pushfq
   562 00000E0C 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000E13 7403                <1>     je .exit
   564 00000E15 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000E18 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000E19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000E1A 9C                  <1>     pushfq
   571 00000E1B 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000E22 7403                <1>     je .exit
   573 00000E24 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000E27 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000E28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000E29 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000E30 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000E33 7408                <1>     jz .notNet
     6 00000E35 B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00000E3A CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000E3D 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000E3F FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000E41 E898640000          <1>     call dosCrit1Enter
    13 00000E46 E89F600000          <1>     call getCDS     ;Set CDS and current drive vars
    14 00000E4B 720C                <1>     jc .critError   ;Return error if this fails
    15 00000E4D 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000E54 E8D95C0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000E59 E88A640000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E5E 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000E60 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000E65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000E66 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000E6D 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    30 00000E74 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000E77 8805(FB060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000E7D 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000E80 8905(83070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000E86 8905(7F070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000E8C 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000E8F 8905(89070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000E95 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000E98 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000E9A 813D(83070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000EA2 0000                <1>
    43 00000EA4 0F8496000000        <1>     je .oldFat
    44 00000EAA 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000EAE 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000EB2 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000EB4 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000EB6 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000EB8 31D2                <1>     xor edx, edx
    50 00000EBA F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000EBC 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000EBE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000EC2 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000EC4 31D2                <1>     xor edx, edx
    58 00000EC6 F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000EC8 668905(87070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000ECF 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000ED5 89D9                <1>     mov ecx, ebx
    65 00000ED7 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000EDA E8E4FDFFFF          <1>     call readFAT
    68 00000EDF 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000EE4 7477                <1>     je .errorExit
    70 00000EE6 FFC9                <1>     dec ecx
    71 00000EE8 75F0                <1>     jnz .fatlp
    72 00000EEA 8905(83070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000EF0 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000EF7 50                  <1>     push rax    ;Push the return address onto stack
    76 00000EF8 8B05(83070000)      <1>     mov eax, dword [dirClustA]
    77 00000EFE E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000F03 0FB71D(87070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000F0A 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000F0D E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000F12 0F8224010000        <1>     jc searchDir.hardError
    83 00000F18 E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000F1D E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000F22 8B05(89070000)      <1>     mov eax, dword [dirEntry]
    86 00000F28 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000F2D 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000F2F C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000F32 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000F35 8A05(FB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000F3B E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000F40 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000F47 50                  <1>     push rax    ;Push return address onto the stack
   100 00000F48 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000F4C 31D2                <1>     xor edx, edx
   102 00000F4E 96                  <1>     xchg esi, eax
   103 00000F4F F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000F51 668905(87070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000F58 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000F5B EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000F5D F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000F5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000F5F 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000F66 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000F6C 7408                <1>     jz .notNet
   125 00000F6E B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000F73 CD2F                <1>     int 2fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000F75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000F76 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000F7D 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000F83 85C0                <1>     test eax, eax
   132 00000F85 747E                <1>     jz .oldRoot
   133 00000F87 E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000F8C E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000F91 0F82A5000000        <1>     jc .hardError
   137 00000F97 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000F9C E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FA1 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000FA3 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000FA9 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000FAF 8905(53070000)      <1>     mov dword [currClustD], eax
   148 00000FB5 668B05(87070000)    <1>     mov ax, word [dirSect]
   149 00000FBC 8805(5B070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000FC2 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000FC6 488905(5C070000)    <1>     mov qword [currSectD], rax  
   152 00000FCD C705(4F070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000FD5 0000                <1>
   153 00000FD7 E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000FDC 725E                <1>     jc .hardError
   155 00000FDE 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000FE3 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000FE5 66FF05(87070000)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000FEC 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000FF2 3B05(53070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000FF8 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000FFA 66C705(87070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00001002 00                  <1>
   162 00001003 EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 00001005 0FB705(87070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 0000100C 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 0000100F E8B4F9FFFF          <1>     call getBufForDOS
   171 00001014 7226                <1>     jc .hardError
   172 00001016 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 0000101B E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001020 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001022 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00001023 7413                <1>     jz .fnfError
   177 00001025 66FF05(87070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 0000102C 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00001030 3905(89070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 00001036 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 00001038 B012                <1>     mov al, errNoFil
   183 0000103A F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 0000103B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 0000103C B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 0000103E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 0000103F 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00001043 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 00001047 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 0000104B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 0000104F C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00001052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00001053 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 00001058 8A05(FB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 0000105E E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00001063 8A25(07070000)      <1>     mov ah, byte [delChar]
   209 00001069 803E00              <1>     cmp byte [rsi], 00h
   210 0000106C 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 0000106E 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00001070 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00001072 3A25(D8060000)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001078 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 0000107A 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 0000107D 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 0000107F F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00001080 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00001081 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00001084 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 00001087 803D(68040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 0000108E 7434                <1>     je .exclusiveDir
   229 00001090 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00001092 7437                <1>     je .volFile ;If so, go here
   231 00001094 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 00001097 7414                <1>     je .nextEntry
   233 00001099 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 0000109B 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 0000109D 56                  <1>     push rsi
   238 0000109E 488D3D(D8060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 000010A5 E83E000000          <1>     call .nameCompare
   240 000010AA 5E                  <1>     pop rsi
   241 000010AB 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 000010AD 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 000010B4 FF05(89070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 000010BA FFC9                <1>     dec ecx
   247 000010BC 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 000010BE 31C0                <1>     xor eax, eax
   250 000010C0 FFC0                <1>     inc eax ;Clear ZF
   251 000010C2 F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 000010C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 000010C4 F6C410              <1>     test ah, dirDirectory
   256 000010C7 75D4                <1>     jnz .scanName
   257 000010C9 EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 000010CB 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 000010CD 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 000010CF EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 000010D1 56                  <1>     push rsi
   267 000010D2 57                  <1>     push rdi
   268 000010D3 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 000010D5 488D3D(59060000)    <1>     lea rdi, curDirCopy
   270 000010DC B904000000          <1>     mov ecx, 32/8
   271 000010E1 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 000010E4 5F                  <1>     pop rdi
   273 000010E5 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 000010E6 F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 000010E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 000010E8 51                  <1>     push rcx
   284 000010E9 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 000010EB 81F90B000000        <1>     cmp ecx, 11
   287 000010F1 740B                <1>     je .ncExit
   288 000010F3 FFC1                <1>     inc ecx
   289 000010F5 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 000010F6 74F3                <1>     je .ncLp    ;If equal, keep going
   291 000010F8 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 000010FC 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 000010FE 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 000010FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 00001100 55                  <1>     push rbp
   298 00001101 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   299 00001108 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 0000110C C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 0000110F 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 00001110 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00001111 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00001116 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000111B 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 0000111D B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00001122 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00001123 53                  <1>     push rbx    
   322 00001124 57                  <1>     push rdi
   323 00001125 B90B000000          <1>     mov ecx, 11
   324 0000112A B020                <1>     mov al, " "
   325 0000112C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 0000112E 5F                  <1>     pop rdi
   327 0000112F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00001132 AC                  <1>     lodsb   ;Get the char in al
   330 00001133 E84B5E0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 00001138 84C0                <1>     test al, al
   332 0000113A 742D                <1>     jz .exit
   333 0000113C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 0000113E 740E                <1>     je .extSpace
   335 00001140 3C2E                <1>     cmp al, "."
   336 00001142 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 00001144 E8765F0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 00001149 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 0000114B AA                  <1>     stosb   ;Store the char
   341 0000114C EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 0000114E AC                  <1>     lodsb   ;Get a char and increase rsi
   345 0000114F 84C0                <1>     test al, al
   346 00001151 7416                <1>     jz .exit
   347 00001153 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 00001155 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 00001157 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 0000115B AC                  <1>     lodsb
   353 0000115C 84C0                <1>     test al, al
   354 0000115E 7409                <1>     jz .exit
   355 00001160 3C20                <1>     cmp al, " "
   356 00001162 7405                <1>     je .exit
   357 00001164 AA                  <1>     stosb
   358 00001165 EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 00001167 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 00001169 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 0000116A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 0000116B B908000000          <1>     mov ecx, 8
   371 00001170 F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 00001172 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 00001176 750D                <1>     jne .ext
   375 00001178 48FFCF              <1>     dec rdi
   376 0000117B FFC1                <1>     inc ecx
   377 0000117D 81F908000000        <1>     cmp ecx, 8
   378 00001183 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 00001185 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 0000118A 7506                <1>     jne .validExt
   382 0000118C 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 00001190 7415                <1>     je .exit
   384                              <1> .validExt:
   385 00001192 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 00001194 AA                  <1>     stosb
   387 00001195 B903000000          <1>     mov ecx, 3
   388 0000119A F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 0000119C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 000011A0 7505                <1>     jne .exit
   392 000011A2 48FFCF              <1>     dec rdi
   393 000011A5 EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 000011A7 31C0                <1>     xor eax, eax
   396 000011A9 AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 000011AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 000011AB 50                  <1>     push rax
   403 000011AC 53                  <1>     push rbx
   404 000011AD 56                  <1>     push rsi
   405 000011AE 57                  <1>     push rdi
   406 000011AF 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 000011B2 8A05(FB060000)      <1>     mov al, byte [searchAttr]
   408 000011B8 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 000011BA 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 000011BD 0FB605(08070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 000011C4 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412 000011C6 488D35(D8060000)    <1>     lea rsi, fcbName
   413 000011CD 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   414 000011D1 57                  <1>     push rdi
   415 000011D2 48B820202020202020- <1>     mov rax, "        "
   415 000011DB 20                  <1>
   416 000011DC 48AB                <1>     stosq
   417 000011DE 66AB                <1>     stosw
   418 000011E0 AA                  <1>     stosb
   419 000011E1 5F                  <1>     pop rdi
   420 000011E2 48A5                <1>     movsq   ;Move 8 chars
   421 000011E4 66A5                <1>     movsw   ;Move 2 chars
   422 000011E6 A4                  <1>     movsb   ;Move the final char
   423                              <1> 
   424 000011E7 8B05(89070000)      <1>     mov eax, dword [dirEntry]
   425 000011ED 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   426 000011F0 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]
   427 000011F6 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   428 000011F9 8A05(64060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   429 000011FF 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   430 00001202 8B05(6F060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   431 00001208 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   432 0000120B 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   433 00001211 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   434 00001214 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   435 00001218 488D35(59060000)    <1>     lea rsi, curDirCopy
   436 0000121F E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   437                              <1> 
   438 00001224 5F                  <1>     pop rdi
   439 00001225 5E                  <1>     pop rsi
   440 00001226 5B                  <1>     pop rbx
   441 00001227 58                  <1>     pop rax
   442                              <1>     return
    13                              <2> %%_ret:
    14 00001228 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   445                              <1> ;Gets the drive letter for the path in al
   446                              <1> ;Input: rsi = Buffer to process
   447                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   448                              <1> ;       ZF=ZE and al = 0 => Null path
   449                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   450                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   451                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   452 00001229 30C0                <1>     xor al, al
   453 0000122B 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   454                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000122E 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455 00001230 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   456                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001234 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001236 66AD                <1>     lodsw   ;Get first word, rsi += 2
   458                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   459 00001238 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   460 0000123A 2C60                <1>     sub al, 60h
   461                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000123C 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 0000123E B0FF                <1>     mov al, -1  ;Else not a valid drive number
   463                              <1>     return
    13                              <2> %%_ret:
    14 00001240 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> getDirPath:
   466 00001241 30C0                <1>     xor al, al   ;Set to Directory
   467 00001243 EB02                <1>     jmp short getPath
   468                              <1> getFilePath:
   469 00001245 B0FF                <1>     mov al, -1  ;Set to File
   470                              <1> getPath:
   471                              <1> ;Called with:
   472                              <1> ; rdi = SDA Buffer for filename
   473                              <1> ; rsi = Potentially unqualified filename
   474                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   475 00001247 50                  <1>     push rax
   476 00001248 57                  <1>     push rdi
   477 00001249 E876000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   478 0000124E 5F                  <1>     pop rdi
   479 0000124F 58                  <1>     pop rax
   480                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001250 72EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   481                              <1>     ;Now our name is FQ, we can search the for it!
   482 00001252 48813D(11070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   482 0000125A FFFFFF              <1>
   483 0000125D 0F8490010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   484 00001263 8805(68040000)      <1>     mov byte [fileDirFlag], al 
   485 00001269 B0FF                <1>     mov al, -1
   486 0000126B 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   487 00001271 8805(2D060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   488 00001277 C605(04070000)00    <1>     mov byte [parDirExist], 0   
   489 0000127E C605(03070000)00    <1>     mov byte [fileExist], 0     
   490 00001285 8A05(08070000)      <1>     mov al, byte [workingDrv]
   491 0000128B FEC0                <1>     inc al
   492 0000128D 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   493 00001291 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   494 00001296 7424                <1>     je .net
   495 00001298 488B1D(1D060000)    <1>     mov rbx, qword [fname1Ptr]
   496 0000129F 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   497 000012A6 488D7301            <1>     lea rsi, qword [rbx + 1]
   498 000012AA FF35(11070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   499 000012B0 E88D010000          <1>     call pathWalk
   500 000012B5 8F05(11070000)      <1>     pop qword [workingCDS]
   501                              <1>     return
    13                              <2> %%_ret:
    14 000012BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> .net:
   503 000012BC 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   504 000012BF E985010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   505                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   506                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   507                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   508                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   509                              <1>     ; so the redir can do it's job.
   510                              <1> 
   511                              <1> canonicaliseFileName:
   512                              <1> ;Always trying to build and qualify a full pathname
   513                              <1> ;Does getPath without hitting the disk
   514 000012C4 B0FF                <1>     mov al, -1
   515 000012C6 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   516 000012CC 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   517 000012D2 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   518 000012D9 FEC0                <1>     inc al  ;make al = 0
   519 000012DB 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   520 000012E1 E838000000          <1>     call getPathNoCanon.epAlt
   521                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012E6 72D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   522                              <1>     ;Check the last two chars to see if we have a null terminator.
   523                              <1>     ;If neither has a null terminator, add one
   524 000012E8 31C0                <1>     xor eax, eax
   525 000012EA 3807                <1>     cmp byte [rdi], al
   526                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012EC 74CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527 000012EE 3847FF              <1>     cmp byte [rdi - 1], al 
   528                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012F1 74C8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   529 000012F3 AA                  <1>     stosb
   530                              <1>     return
    13                              <2> %%_ret:
    14 000012F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> getDirPathNoCanon:
   533                              <1> ;FCB only
   534 000012F5 31C0                <1>     xor eax, eax
   535 000012F7 4889FE              <1>     mov rsi, rdi
   536 000012FA EB07                <1>     jmp short getPathNoCanon
   537                              <1> getFilePathNoCanon:
   538                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   539                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   540 000012FC B0FF                <1>     mov al, -1
   541 000012FE 4889FE              <1>     mov rsi, rdi
   542 00001301 EB00                <1>     jmp short getPathNoCanon
   543                              <1> getPathNoCanon:
   544                              <1> ;Called with:
   545                              <1> ; rdi = SDA Buffer for filename
   546                              <1> ; rsi = Potentially unqualified filename
   547                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   548 00001303 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   549 00001309 B0FF                <1>     mov al, -1
   550 0000130B 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   551 00001311 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   552 00001318 8805(2D060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   553                              <1> .epAlt:
   554 0000131E C605(04070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   555 00001325 C605(03070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   556 0000132C F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   557 00001333 7431                <1>     jz .notServer
   558 00001335 E8EFFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   559 0000133A E8AB5B0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   560 0000133F FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   561 00001341 56                  <1>     push rsi
   562 00001342 57                  <1>     push rdi
   563 00001343 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   564 0000134A 50                  <1>     push rax
   565 0000134B E88E5F0000          <1>     call dosCrit1Enter
   566 00001350 E8DD570000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   567 00001355 E88E5F0000          <1>     call dosCrit1Exit
   568 0000135A 58                  <1>     pop rax
   569 0000135B 5F                  <1>     pop rdi
   570 0000135C 5E                  <1>     pop rsi
   571 0000135D 0F83AA000000        <1>     jnc .driveOk
   572                              <1> .serverExit:
   573 00001363 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   574                              <1>     return
    13                              <2> %%_ret:
    14 00001365 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> .notServer:
   576                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   577 00001366 48C705(11070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   577 0000136E FFFFFF              <1>
   578 00001371 B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   579 00001376 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   580                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001378 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 0000137A E8AAFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   582 0000137F 9C                  <1>     pushfq  ;Save the flag state on stack
   583 00001380 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   584 00001381 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   585 00001384 E8EE5B0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   586 00001389 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   587 0000138B E8E75B0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   588 00001390 756B                <1>     jnz .notNet
   589 00001392 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   590 00001394 7567                <1>     jne .notNet
   591 00001396 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   592 00001397 9D                  <1>     popfq
   593 00001398 66AD                <1>     lodsw
   594 0000139A 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   595 0000139E 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   596                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   597                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   598                              <1> ; redirector Find First Without CDS
   599 000013A0 8A1D(2D060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   600 000013A6 C605(2D060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   601 000013AD 53                  <1>     push rbx
   602                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   603 000013AE AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   604 000013AF E8CF5B0000          <1>     call uppercaseChar  ;Make char in al uppercase
   605 000013B4 84C0                <1>     test al, al
   606 000013B6 7435                <1>     jz .netEnd
   607 000013B8 E8BA5B0000          <1>     call swapPathSeparator  ;If path sep, swap it
   608 000013BD AA                  <1>     stosb
   609 000013BE 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   610                              <1>     ;Skip all following pathseps if there are any
   611                              <1> .moveNetSharePtr:
   612 000013C0 AC                  <1>     lodsb
   613 000013C1 E8B15B0000          <1>     call swapPathSeparator
   614 000013C6 74F8                <1>     jz .moveNetSharePtr
   615 000013C8 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   616 000013CB 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   617 000013CE 84C0                <1>     test al, al ;Was this char null?
   618 000013D0 741B                <1>     jz .netEnd  ;Skip processing if so!
   619 000013D2 4889FB              <1>     mov rbx, rdi
   620 000013D5 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   621 000013D8 E86C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   622 000013DD 721C                <1>     jc .netExitBad
   623                              <1>     ;Now if we have a trailing backslash, throw it away
   624                              <1>     ;rdi points to the null char of the path
   625 000013DF 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   626 000013E2 E8905B0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   627 000013E7 7504                <1>     jnz .netEnd
   628 000013E9 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   629                              <1> .netEnd:
   630 000013ED 5B                  <1>     pop rbx
   631 000013EE 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   632                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000013F0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000013F2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   633                              <1> .netFFnoCDS:
   634 000013F3 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   635 000013F8 CD2F                <1>     int 2Fh
   636                              <1>     return
    13                              <2> %%_ret:
    14 000013FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   637                              <1> .netExitBad:
   638 000013FB 5B                  <1>     pop rbx
   639                              <1>     return
    13                              <2> %%_ret:
    14 000013FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .notNet:
   641                              <1> ;This is the normal case; paths can be relative, or absolute.
   642 000013FD 58                  <1>     pop rax ;Get the drive letter back
   643 000013FE 9D                  <1>     popfq   ;Get the flag state back
   644 000013FF 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   645                              <1> .pnfErr:
   646 00001401 B003                <1>     mov al, errPnf  ;Null path error
   647 00001403 F9                  <1>     stc
   648                              <1>     return
    13                              <2> %%_ret:
    14 00001404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   649                              <1> .notNull:
   650 00001405 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   651 00001407 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   652 00001409 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   653 0000140B F9                  <1>     stc
   654                              <1>     return
    13                              <2> %%_ret:
    14 0000140C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> .driveOk:
   656 0000140D 84C0                <1>     test al, al
   657 0000140F 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   658                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   659 00001411 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   660 00001414 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   661 00001416 50                  <1>     push rax    ;Save the drive letter
   662 00001417 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   663 00001418 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   664 0000141B E8575B0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   665                              <1>     ;If al is a path separator, then this path is absolute.
   666 00001420 58                  <1>     pop rax ;Get back the drive letter
   667 00001421 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   668                              <1> .absoPath:
   669                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   670 00001423 48FFC6              <1>     inc rsi
   671 00001426 EB1A                <1>     jmp short .commonDir
   672                              <1> .curPath:
   673                              <1> ;This is only jumped to if we are relative the current drive
   674                              <1> ;rsi points to first char in path
   675                              <1> ;If this char is \ or /, then it is an absolute path.
   676 00001428 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   677 0000142E FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   678 00001430 50                  <1>     push rax    ;Save the current drive number
   679 00001431 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   680 00001433 E83F5B0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   681 00001438 58                  <1>     pop rax ;Get back the current drive number
   682 00001439 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   683                              <1> .relMain:
   684 0000143B C605(00070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   685                              <1> .commonDir:
   686                              <1> ;rsi points to the start of the string we will be appending
   687                              <1> ;Fall through now
   688                              <1> pathWalk:
   689                              <1> ;Input: rsi must point to source buffer for path to expand
   690                              <1> ;       rdi must point to a destination buffer
   691                              <1> ;       al must contain the drive 1 based number
   692 00001442 E8B6000000          <1>     call prepareDir    ;Prepare the start of the path
   693 00001447 727D                <1>     jc .badDriveExit 
   694                              <1> .netEp:
   695                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   696                              <1> ;For subst, resolution cannot go past backslash offset.
   697                              <1> ;For join, it is transparent.
   698 00001449 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   699 0000144C 7512                <1>     jnz .mainlp
   700                              <1>     ;Setup dummy dir data for Root directory
   701 0000144E 31C0                <1>     xor eax, eax
   702 00001450 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   703 00001457 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   704 0000145E EB6C                <1>     jmp short .exitGood
   705                              <1> .mainlp:
   706                              <1>     ;rbx must remain constant in this portion,
   707                              <1>     ; and is used to signify the first writable byte in the path
   708 00001460 53                  <1>     push rbx
   709 00001461 E85D010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   710 00001466 5B                  <1>     pop rbx
   711 00001467 726A                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   712 00001469 84C0                <1>     test al, al
   713 0000146B 7507                <1>     jnz .notFile
   714 0000146D C605(04070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   715                              <1> .notFile:
   716 00001474 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   717 00001475 E8C4040000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   718 0000147A 58                  <1>     pop rax
   719 0000147B 736B                <1>     jnc .deviceFound
   720 0000147D E827020000          <1>     call searchForPathspec  ;and search the directory
   721 00001482 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   722 00001484 E876020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   723 00001489 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   724 0000148B 84C0                <1>     test al, al ;Exit if this pathspec was a file
   725 0000148D 743D                <1>     jz .exitGood
   726                              <1>     ;Here I have to take the cluster data from the found directory entry
   727                              <1>     ; and setup the search for the next pathspec portion
   728                              <1>     ;Copy necessary data from the current directory copy
   729 0000148F 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   730 00001496 74C8                <1>     jz .mainlp
   731 00001498 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   732 0000149F C1E010              <1>     shl eax, 10h    ;Shift it high
   733 000014A2 668B05(73060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   734                              <1>     ;eax now has the cluster number of the search
   735 000014A9 8905(83070000)      <1>     mov dword [dirClustA], eax
   736 000014AF 8905(7F070000)      <1>     mov dword [dirClustPar], eax
   737 000014B5 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   738 000014B7 8905(89070000)      <1>     mov dword [dirEntry], eax
   739 000014BD 668905(87070000)    <1>     mov word [dirSect], ax
   740 000014C4 EB9A                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   741                              <1> .badDriveExit:
   742 000014C6 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   743                              <1>     return
    13                              <2> %%_ret:
    14 000014CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> .exitGood:
   745 000014CC C605(03070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   746                              <1> .exit:
   747                              <1>     return
    13                              <2> %%_ret:
    14 000014D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   748                              <1> .checkDev:
   749                              <1> ;If the return code is errNoFil AND Int24Fail = 0, then we check to see if 
   750                              <1> ; we are in \DEV pseudo dir
   751 000014D4 F605(69040000)FF    <1>     test byte [Int24Fail], -1   ;Make sure we are not returning from a FAIL
   752 000014DB 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   753                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   754 000014DD 56                  <1>     push rsi
   755 000014DE 57                  <1>     push rdi
   756 000014DF E8E8030000          <1>     call checkDevPath
   757 000014E4 5F                  <1>     pop rdi
   758 000014E5 5E                  <1>     pop rsi
   759 000014E6 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   760                              <1> .deviceFound:
   761 000014E8 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   762 000014EA C605(04070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   763 000014F1 C605(03070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   764 000014F8 EBD9                <1>     jmp short .exit   
   765                              <1> .nodev:
   766 000014FA F9                  <1>     stc
   767 000014FB EBD6                <1>     jmp short .exit
   768                              <1> 
   769                              <1> prepareDir:
   770                              <1> ;Used to transfer the current directory if it is necessary.
   771                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   772                              <1> ; a relative path is specified.
   773                              <1> ;Input: al = 1-based drive letter
   774                              <1> ;Output: rdi = Pointing at where to place chars from source string
   775                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   776                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   777 000014FD 56                  <1>     push rsi    ;Push ptr to source string
   778 000014FE E8DB5D0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   779 00001503 E872590000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   780 00001508 730C                <1>     jnc .notJoin ;Very valid disk
   781 0000150A F605(2D060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   782 00001511 7544                <1>     jnz .joinEp                 ;If not, proceed. If so, fail.    
   783 00001513 F9                  <1>     stc
   784 00001514 EB0C                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   785                              <1> .notJoin:
   786 00001516 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] 
   787 0000151D E810560000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   788                              <1>     ;rbp = DPB ptr now
   789                              <1> .critExit:
   790 00001522 E8C15D0000          <1>     call dosCrit1Exit
   791 00001527 7253                <1>     jc .badDriveExit 
   792 00001529 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   793                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   794                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   795                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   796                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   797                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   798 00001530 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   799 00001537 4889FB              <1>     mov rbx, rdi
   800 0000153A 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   801 0000153E 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   802                              <1>     ;Now check if we have a subst to handle
   803 00001541 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   804 00001547 7535                <1>     jnz .prepDirSubst
   805 00001549 F605(00070000)FF    <1>     test byte [spliceFlag], -1
   806 00001550 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   807                              <1>     ;Else we copy the first two chars only (X:)
   808 00001552 66A5                <1>     movsw  
   809 00001554 B05C                <1>     mov al, "\"
   810 00001556 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   811                              <1> .joinEp:
   812 00001557 31C0                <1>     xor eax, eax    ;Get cluster 0
   813 00001559 EB1B                <1>     jmp short .prepDirExitSkip
   814                              <1> .prepLoop:
   815 0000155B AC                  <1>     lodsb
   816 0000155C 84C0                <1>     test al, al ;If al was null, then we stop
   817 0000155E 7403                <1>     jz .prepDirExit
   818 00001560 AA                  <1>     stosb
   819 00001561 EBF8                <1>     jmp short .prepLoop
   820                              <1> .prepDirExit:
   821 00001563 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   822 00001567 7403                <1>     je .prepDirExitSkipPathsep
   823 00001569 B05C                <1>     mov al, "\"
   824 0000156B AA                  <1>     stosb   ;Store the path separator and increment rdi
   825                              <1> .prepDirExitSkipPathsep:
   826 0000156C 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   827 00001573 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   828                              <1> .prepDirExitSkip:
   829 00001576 E816000000          <1>     call .prepSetupDirSearchVars
   830 0000157B F8                  <1>     clc ;Clear carry before exiting
   831                              <1> .badDriveExit:
   832 0000157C 5E                  <1>     pop rsi
   833                              <1>     return
    13                              <2> %%_ret:
    14 0000157D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   834                              <1> .prepDirSubst:
   835 0000157E 51                  <1>     push rcx
   836 0000157F 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   837                              <1> .prepDirCopy1:
   838 00001583 F3A4                <1>     rep movsb   ;Copy the string over
   839 00001585 59                  <1>     pop rcx
   840 00001586 F605(00070000)FF    <1>     test byte [spliceFlag], -1
   841 0000158D 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   842 0000158F EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   843                              <1> .prepSetupDirSearchVars:
   844                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   845                              <1> ;       rbp -> Working DPB
   846 00001591 51                  <1>     push rcx
   847 00001592 31C9                <1>     xor ecx, ecx
   848 00001594 66890D(87070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   849 0000159B 890D(89070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   850 000015A1 E8B0F4FFFF          <1>     call getFATtype ;Get type of fat
   851 000015A6 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   852 000015AC 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   853                              <1>     ;FAT 32 here
   854 000015AE 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   855 000015B0 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   856 000015B2 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   857                              <1> .psdsvExit:
   858 000015B5 8905(83070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   859 000015BB 8905(7F070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   860 000015C1 59                  <1>     pop rcx
   861                              <1>     return 
    13                              <2> %%_ret:
    14 000015C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   862                              <1> 
   863                              <1> copyPathspec:
   864                              <1> ;1) Copies a path portion from the source buffer to the destination
   865                              <1> ;2) Advances rsi to the next null, \ or /
   866                              <1> ;3) Expands all * to ?'s
   867                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   868                              <1> ;    next path separator and rdi pointing to the previous pathsep
   869                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   870                              <1> ;    with rsi moving to path separator
   871                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   872                              <1> ;
   873                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   874                              <1> ;           rdi = Points to where to store it
   875                              <1> ;
   876                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   877                              <1> ;           rdi = First char of next space to store next pathspec
   878                              <1> ;           al = Last char stored (either \ or NULL)
   879                              <1> ;           CF=NC = OK path
   880                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   881                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   882 000015C3 57                  <1>     push rdi    ;Save the pointer into the user buffer
   883 000015C4 C605(8C040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   884 000015CB 488D3D(D8060000)    <1>     lea rdi, fcbName
   885 000015D2 57                  <1>     push rdi
   886 000015D3 B903000000          <1>     mov ecx, 3
   887 000015D8 B820202020          <1>     mov eax, "    " ;Four spaces
   888 000015DD F3AB                <1>     rep stosd   ;Store 12 spaces
   889 000015DF 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   890                              <1> 
   891 000015E0 488D1D(E3060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   892 000015E7 AC                  <1>     lodsb   ;Get first char from user path in al
   893 000015E8 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   894 000015EA 746B                <1>     je .cpsDots
   895 000015EC 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   896                              <1> ;First char is not a dot, so now check if starts with E5h? 
   897                              <1> ;If so, store 05h in its place!
   898 000015EF 3CE5                <1>     cmp al, 0E5h
   899 000015F1 7506                <1>     jne .cpsMainLoop
   900 000015F3 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   901 000015F6 B005                <1>     mov al, 05h
   902 000015F8 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   903                              <1> .cpsMainLoop:
   904 000015F9 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   905 000015FA 84C0                <1>     test al, al ;Is it the null char?
   906 000015FC 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   907 00001602 E870590000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   908 00001607 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   909 0000160D 3C2E                <1>     cmp al, "." ;Filename extension separator
   910 0000160F 7420                <1>     je .cpsExtension
   911                              <1>     ;If we have space in the filename, we check to see if the next char is *
   912 00001611 3C2A                <1>     cmp al, "*" ;Wildcard?
   913 00001613 7430                <1>     je .cpsWildcard
   914 00001615 3C3F                <1>     cmp al, "?" ;Good wildcard?
   915 00001617 740C                <1>     je .store
   916 00001619 E865590000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   917 0000161E E89C5A0000          <1>     call checkCharValid ; and check it is a valid char
   918 00001623 7472                <1>     je .cpsExitError
   919                              <1> .store:
   920 00001625 4839DF              <1>     cmp rdi, rbx
   921 00001628 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   922 0000162A AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   923 0000162B EBCC                <1>     jmp short .cpsMainLoop
   924                              <1> .cpsInvalidChar:
   925 0000162D 30C0                <1>     xor al, al
   926 0000162F EB3B                <1>     jmp short .cpsProcessName
   927                              <1> .cpsExtension:
   928                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   929 00001631 B903000000          <1>     mov ecx, 3 
   930 00001636 488D3D(E0060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   931 0000163D 57                  <1>     push rdi
   932 0000163E B020                <1>     mov al, " "
   933 00001640 F3AA                <1>     rep stosb
   934 00001642 5F                  <1>     pop rdi
   935 00001643 EBB4                <1>     jmp short .cpsMainLoop
   936                              <1> .cpsWildcard:
   937                              <1> ;Fill the entire FCB filespec with ?'s.
   938                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   939                              <1> ; *'s from crashing DOS :)
   940 00001645 AC                  <1>     lodsb   ;Get char, inc rsi
   941 00001646 3C2A                <1>     cmp al, "*"
   942 00001648 74FB                <1>     je short .cpsWildcard
   943 0000164A 48FFCE              <1>     dec rsi ;Go back to the first non-star char
   944 0000164D B03F                <1>     mov al, "?"
   945                              <1> .cpsWildcardLp:
   946 0000164F AA                  <1>     stosb
   947 00001650 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
   948 00001653 75FA                <1>     jne short .cpsWildcardLp
   949 00001655 EBA2                <1>     jmp short .cpsMainLoop
   950                              <1> 
   951                              <1> .cpsDots:
   952 00001657 AA                  <1>     stosb   ;Store the first dot
   953 00001658 8A06                <1>     mov al, byte [rsi]
   954 0000165A 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   955 0000165C 752E                <1>     jne .cpsStore
   956 0000165E A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   957 0000165F 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
   958 00001661 84C0                <1>     test al, al
   959 00001663 7407                <1>     jz .cpsProcessName
   960 00001665 E80D590000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
   961 0000166A 752B                <1>     jnz .cpsExitError
   962                              <1> .cpsProcessName:
   963                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   964 0000166C 84C0                <1>     test al, al 
   965 0000166E 741C                <1>     jz .cpsStore
   966 00001670 E802590000          <1>     call swapPathSeparator
   967 00001675 7415                <1>     jz .cpsStore
   968                              <1> .cpsFindTerminator:
   969 00001677 AC                  <1>     lodsb
   970 00001678 84C0                <1>     test al, al 
   971 0000167A 7410                <1>     jz .cpsStore
   972 0000167C E8F6580000          <1>     call swapPathSeparator
   973 00001681 7409                <1>     jz .cpsStore
   974 00001683 E8375A0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   975 00001688 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   976                              <1>     ;If we encounter a terminator, convert to 0
   977 0000168A 30C0                <1>     xor al, al
   978                              <1> .cpsStore:
   979 0000168C 488D3D(E3060000)    <1>     lea rdi, fcbName+11
   980 00001693 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   981 00001694 5F                  <1>     pop rdi
   982 00001695 F8                  <1>     clc
   983                              <1>     return
    13                              <2> %%_ret:
    14 00001696 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> .cpsExitError:
   985 00001697 5F                  <1>     pop rdi
   986 00001698 F9                  <1>     stc
   987                              <1>     return
    13                              <2> %%_ret:
    14 00001699 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   988                              <1> .cpsSkipPathseps:
   989 0000169A AC                  <1>     lodsb
   990 0000169B E8D7580000          <1>     call swapPathSeparator
   991 000016A0 74F8                <1>     jz .cpsSkipPathseps
   992 000016A2 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
   993 000016A5 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
   994 000016A7 EBE3                <1>     jmp short .cpsStore
   995                              <1> 
   996                              <1> searchForPathspec:
   997                              <1>     ;Now search the current directory for this filename
   998                              <1>     ;Find first using SDA ffBlock
   999                              <1>     ;If al = 0, we have final file name or directory name
  1000                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1001                              <1>     ;Output: CF=CY => Error occured
  1002                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1003                              <1>     ;                 FF block somewhat setup
  1004                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1005 000016A9 50                  <1>     push rax
  1006 000016AA 53                  <1>     push rbx
  1007 000016AB 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1008 000016AC 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1009 000016AD 0FB61D(68040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1010 000016B4 53                  <1>     push rbx    ;and push it onto the stack
  1011                              <1> ;Evaluate whether we are searching for a file for a directory
  1012 000016B5 84C0                <1>     test al, al
  1013 000016B7 741D                <1>     jz .sfpPNfile
  1014                              <1>     ;Fall if subdir
  1015 000016B9 488D3D(D8060000)    <1>     lea rdi, fcbName
  1016 000016C0 B03F                <1>     mov al, "?" ;Search for wildcard
  1017 000016C2 B90B000000          <1>     mov ecx, 11
  1018 000016C7 F2AE                <1>     repne scasb
  1019 000016C9 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1020 000016CB B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1021 000016CD C605(68040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1022 000016D4 EB07                <1>     jmp short .sfpPNMain
  1023                              <1> .sfpPNfile:
  1024                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1025 000016D6 0FB605(FB060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1026                              <1> .sfpPNMain:
  1027 000016DD 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1028 000016E4 7405                <1>     je .sfpPNNoDisk
  1029 000016E6 E874F8FFFF          <1>     call searchDir
  1030                              <1> .sfpPNNoDisk:
  1031 000016EB 5B                  <1>     pop rbx
  1032 000016EC 881D(68040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1033 000016F2 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1034 000016F3 5E                  <1>     pop rsi
  1035 000016F4 5B                  <1>     pop rbx
  1036 000016F5 58                  <1>     pop rax
  1037                              <1>     return
    13                              <2> %%_ret:
    14 000016F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> .sfpPnf:
  1039 000016F7 B803000000          <1>     mov eax, errPnf
  1040                              <1> .sfpErrExit:
  1041 000016FC F9                  <1>     stc ;Set carry
  1042 000016FD EBEC                <1>     jmp short .sfpPNNoDisk
  1043                              <1> 
  1044                              <1> addPathspecToBuffer:
  1045                              <1> ;Input: fcbName = Qualified pathname portion
  1046                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1047                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1048                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1049                              <1> ;rbx points to the "head of the path"
  1050                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1051 000016FF F605(2D060000)FF    <1>     test byte [skipDisk], -1
  1052                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001706 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1053 00001708 803D(D8060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1054 0000170F 7461                <1>     je .aptbDots
  1055                              <1>     ;Copy filename over to internal buffer
  1056                              <1> .aptbAddNull:
  1057 00001711 56                  <1>     push rsi    ;Save source pointer position
  1058 00001712 488D35(D8060000)    <1>     lea rsi, fcbName
  1059 00001719 E84DFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1060 0000171E 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1061 00001721 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1062 00001722 E8C4000000          <1>     call .aptbInterveneEnterJoin
  1063                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001727 72CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1064                              <1> .aptbHandleTerminator:
  1065 00001729 8A05(E3060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1066 0000172F 84C0                <1>     test al, al
  1067 00001731 741A                <1>     jz .aptbHandleNull
  1068 00001733 E83F580000          <1>     call swapPathSeparator
  1069 00001738 0F85C5000000        <1>     jnz .aptbErrorExit
  1070                              <1> ;Handle path separator here directly
  1071 0000173E 50                  <1>     push rax    ;Preserve the terminator char
  1072 0000173F 8A47FF              <1>     mov al, byte [rdi - 1]
  1073 00001742 E830580000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1074 00001747 58                  <1>     pop rax
  1075 00001748 7426                <1>     jz .aptbExitOk 
  1076 0000174A AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1077 0000174B EB23                <1>     jmp short .aptbExitOk
  1078                              <1> .aptbHandleNull:
  1079 0000174D E85B000000          <1>     call .aptbAtHeadOfPath
  1080 00001752 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1081 00001754 50                  <1>     push rax
  1082 00001755 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1083 00001758 E81A580000          <1>     call swapPathSeparator
  1084 0000175D 58                  <1>     pop rax
  1085 0000175E 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1086 00001760 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1087 00001763 EB0B                <1>     jmp short .aptbExitOk
  1088                              <1> .aptbHandleNullNoOverwritePrim:
  1089 00001765 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1090 00001769 7403                <1>     je short .aptbHandleNullNoOverwrite
  1091                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1092 0000176B 48FFCF              <1>     dec rdi
  1093                              <1> .aptbHandleNullNoOverwrite:
  1094 0000176E 8807                <1>     mov byte [rdi], al  ;Write in a null
  1095                              <1> .aptbExitOk:
  1096 00001770 F8                  <1>     clc
  1097                              <1>     return
    13                              <2> %%_ret:
    14 00001771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> .aptbDots:
  1099                              <1> ;For one dot, we pull the terminating null to rdi
  1100                              <1> ;For two dots, we search backwards for the previous "\"
  1101 00001772 803D(D9060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1102 00001779 7409                <1>     je .aptbMoreDots
  1103 0000177B C605(D8060000)20    <1>     mov byte [fcbName], " "
  1104 00001782 EB8D                <1>     jmp short .aptbAddNull
  1105                              <1> .aptbMoreDots:
  1106                              <1> ;Here we have two dots
  1107 00001784 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1108 00001789 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1109                              <1> ;Else, we are able to decrement.
  1110 0000178B 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1111                              <1> .aptbDotsLp:
  1112 00001792 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1113 00001797 7490                <1>     je .aptbHandleTerminator
  1114 00001799 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1115 0000179C 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1116 0000179E E8D4570000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1117 000017A3 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1118 000017A5 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1119 000017A8 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1120                              <1> .aptbAtHeadOfPath:
  1121                              <1> ;Returns ZF=ZE if at head of path.
  1122 000017AD 57                  <1>     push rdi
  1123 000017AE 48FFCF              <1>     dec rdi
  1124 000017B1 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1125 000017B4 5F                  <1>     pop rdi
  1126                              <1>     return
    13                              <2> %%_ret:
    14 000017B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1127                              <1> .aptbInterveneExitJoin:
  1128                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1129 000017B6 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]
  1130 000017BD 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1131 000017C3 753E                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1132                              <1>     ;Now we change the drive letter and return
  1133 000017C5 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1134 000017C8 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1135 000017CB 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1136 000017CD E8A8560000          <1>     call getCDSNotJoin
  1137                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017D2 72E1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1138 000017D4 56                  <1>     push rsi
  1139 000017D5 57                  <1>     push rdi
  1140 000017D6 53                  <1>     push rbx
  1141 000017D7 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
  1142 000017DE E84F530000          <1>     call getDiskDPB 
  1143 000017E3 5B                  <1>     pop rbx
  1144 000017E4 5F                  <1>     pop rdi
  1145 000017E5 5E                  <1>     pop rsi
  1146 000017E6 E93EFFFFFF          <1>     jmp .aptbHandleTerminator
  1147                              <1> .aptbInterveneEnterJoin:
  1148                              <1> ;Handles join paths.
  1149 000017EB F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1150                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017F2 74C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1151 000017F4 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1152 000017F5 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
  1153 000017FC E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1154 00001801 5E                  <1>     pop rsi
  1155                              <1>     return
    13                              <2> %%_ret:
    14 00001802 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1156                              <1> .aptbErrorExit:
  1157 00001803 B002                <1>     mov al, errFnf
  1158 00001805 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1159 0000180C C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1160 00001813 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1161 0000181A F9                  <1>     stc
  1162                              <1>     return
    13                              <2> %%_ret:
    14 0000181B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1163                              <1> 
  1164                              <1> handleJoin:
  1165                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1166                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1167                              <1> ;Input:
  1168                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1169                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1170                              <1> ; rax = 0
  1171                              <1> ;Output:
  1172                              <1> ;If no match, no effect.
  1173                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1174                              <1> ; join drive. rsi is advanced to the next path componant.
  1175                              <1> ;If CF=CY => Disk detection error
  1176 0000181C 51                  <1>     push rcx
  1177 0000181D 55                  <1>     push rbp
  1178 0000181E 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]
  1179 00001825 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1180 00001829 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1181 0000182F 740C                <1>     jz .okToGo
  1182 00001831 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1183 00001837 0F848C000000        <1>     jz .exitNoCrit
  1184                              <1> .okToGo:
  1185 0000183D E89C5A0000          <1>     call dosCrit1Enter
  1186 00001842 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1187 00001849 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1188                              <1> .checkCDS:
  1189 0000184B 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1190 00001851 7560                <1>     jne .gotoNextCDS
  1191                              <1> .scanCDSName:
  1192                              <1> ;Get the length of the CDS path componant to check
  1193 00001853 51                  <1>     push rcx
  1194 00001854 57                  <1>     push rdi
  1195 00001855 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1196 00001856 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1197 00001859 E857570000          <1>     call strlen     ;Get length of the path componant in ecx
  1198 0000185E FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1199 00001860 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1200 00001862 754C                <1>     jnz .notString
  1201                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1202 00001864 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1203 00001865 E80D570000          <1>     call swapPathSeparator
  1204 0000186A 7407                <1>     jz .goodString
  1205 0000186C 84C0                <1>     test al, al
  1206 0000186E 7540                <1>     jnz .notString
  1207 00001870 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1208                              <1> .goodString:
  1209                              <1>     ;Here we know we have the right string.
  1210 00001873 59                  <1>     pop rcx ;Trash original rsi
  1211 00001874 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1212 00001875 59                  <1>     pop rcx 
  1213                              <1>     ;Now store the path in the original CDS before intervening
  1214                              <1>     ; in the path
  1215 00001876 48892D(11070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1216 0000187D 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1217 0000187E 57                  <1>     push rdi
  1218 0000187F 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1219 00001882 53                  <1>     push rbx    ;Preserve the head of the path
  1220 00001883 E8AA520000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1221 00001888 5B                  <1>     pop rbx
  1222 00001889 5F                  <1>     pop rdi
  1223 0000188A 5E                  <1>     pop rsi
  1224 0000188B 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1225 0000188D 8A05(08070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1226 00001893 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1227 00001895 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1228 00001899 7403                <1>     je .notNet
  1229 0000189B F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1230 0000189C EB26                <1>     jmp short .exit
  1231                              <1> .notNet:
  1232                              <1> ; Join entry intervention occurs here.
  1233 0000189E 8843FE              <1>     mov byte [rbx - 2], al
  1234 000018A1 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1235                              <1> .pullLp:
  1236 000018A5 AC                  <1>     lodsb
  1237 000018A6 AA                  <1>     stosb
  1238 000018A7 84C0                <1>     test al, al
  1239 000018A9 75FA                <1>     jnz .pullLp
  1240 000018AB 48FFCF              <1>     dec rdi
  1241 000018AE EB14                <1>     jmp short .exit
  1242                              <1> .notString:
  1243 000018B0 5E                  <1>     pop rsi
  1244 000018B1 5F                  <1>     pop rdi
  1245 000018B2 59                  <1>     pop rcx
  1246                              <1> .gotoNextCDS:
  1247 000018B3 4881C55F000000      <1>     add rbp, cds_size
  1248 000018BA FFC1                <1>     inc ecx 
  1249 000018BC 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1250 000018C2 7587                <1>     jnz .checkCDS
  1251                              <1> .exit:
  1252 000018C4 E81F5A0000          <1>     call dosCrit1Exit
  1253                              <1> .exitNoCrit:
  1254 000018C9 5D                  <1>     pop rbp
  1255 000018CA 59                  <1>     pop rcx
  1256                              <1>     return
    13                              <2> %%_ret:
    14 000018CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1257                              <1> 
  1258                              <1> checkDevPath:
  1259                              <1> ;Called only if the file/directory was not found on disk.
  1260                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1261                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1262                              <1> ; and check to see if it is a char device. If it is, build a directory
  1263                              <1> ; If it is not, proceed with the request fail.
  1264                              <1> ;
  1265                              <1> ;Input: rsi = Pointer to the next path spec
  1266                              <1> ;Output: CF=NC => Char device found, directory built
  1267                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1268 000018CC 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1269                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018D3 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1270 000018D5 803D(E3060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1271 000018DC 7459                <1>     je .notOk                      
  1272                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1273 000018DE 50                  <1>     push rax
  1274 000018DF 48B844455620202020- <1>     mov rax, "DEV     "
  1274 000018E8 20                  <1>
  1275 000018E9 483905(D8060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1276 000018F0 58                  <1>     pop rax
  1277 000018F1 7544                <1>     jne .notOk
  1278 000018F3 813D(E0060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1278 000018FB 205C                <1>
  1279 000018FD 7538                <1>     jne .notOk
  1280                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1281                              <1>     ; looking for a device driver
  1282                              <1>     ;First append it to rdi 
  1283 000018FF B84445565C          <1>     mov eax, "DEV\" 
  1284 00001904 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1285 00001905 57                  <1>     push rdi
  1286 00001906 488D3D(D8060000)    <1>     lea rdi, fcbName
  1287 0000190D E811F8FFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1288                              <1>     ;Returns in al the terminating char of the source string
  1289 00001912 5F                  <1>     pop rdi
  1290                              <1>     ;If al is a pathsep, fail
  1291 00001913 E85F560000          <1>     call swapPathSeparator
  1292 00001918 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1293 0000191A 30C0                <1>     xor al, al
  1294 0000191C 8805(E3060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1295 00001922 53                  <1>     push rbx
  1296 00001923 E844000000          <1>     call checkIfCharDevice
  1297 00001928 5B                  <1>     pop rbx ;Don't need bh yet
  1298 00001929 720C                <1>     jc .notOk
  1299 0000192B E873000000          <1>     call buildCharDir
  1300                              <1>     ;Here the device was determined to be a char device.
  1301                              <1>     ;A dummy directory entry was built for it.
  1302                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1303                              <1>     ; Do not Find Next!
  1304                              <1> .copyName:
  1305 00001930 E836F8FFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1306 00001935 F8                  <1>     clc
  1307                              <1>     return
    13                              <2> %%_ret:
    14 00001936 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1308                              <1> .notOk:
  1309 00001937 B802000000          <1>     mov eax, errFnf
  1310 0000193C F9                  <1>     stc
  1311                              <1>     return
    13                              <2> %%_ret:
    14 0000193D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1312                              <1> .charDevSearch:
  1313 0000193E 53                  <1>     push rbx
  1314 0000193F E828000000          <1>     call checkIfCharDevice
  1315 00001944 5B                  <1>     pop rbx ;Dont need bh yet
  1316 00001945 72F0                <1>     jc .notOk
  1317 00001947 E857000000          <1>     call buildCharDir
  1318 0000194C 803D(E3060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1319 00001953 750C                <1>     jne .cds2
  1320 00001955 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1321 00001959 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1322 0000195B 48FFCF              <1>     dec rdi
  1323 0000195E B02F                <1>     mov al, "/" ;Replace \ with "/"
  1324 00001960 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1325                              <1> .cds2:
  1326 00001961 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1327 00001968 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1328 0000196A F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1329                              <1>     return
    13                              <2> %%_ret:
    14 0000196B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> 
  1331                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1332                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1333                              <1> ; device driver chain. 
  1334                              <1> ;Output: CF=CY if not found
  1335                              <1> ;        CF=NC if found
  1336                              <1> ;           BH = Low byte of the device attribute word
  1337 0000196C 50                  <1>     push rax
  1338 0000196D 57                  <1>     push rdi
  1339 0000196E 488B05(D8060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1340 00001975 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1341                              <1> .checkName:
  1342 0000197C 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1343 00001980 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1344 00001982 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1345 00001985 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1346 00001987 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1347 0000198A 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1348 0000198D 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1349 00001991 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1350                              <1> .walkList:
  1351 00001993 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1352 00001996 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1353 0000199D 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1354 0000199F F9                  <1>     stc
  1355                              <1> .exit:
  1356 000019A0 5F                  <1>     pop rdi
  1357 000019A1 58                  <1>     pop rax
  1358                              <1>     return
    13                              <2> %%_ret:
    14 000019A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1359                              <1> 
  1360                              <1> buildCharDir:
  1361                              <1> ;Build a dummy directory entry for the char device in FCBName
  1362                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1363 000019A3 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1364                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000019AA 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1365 000019AC 50                  <1>     push rax
  1366 000019AD 57                  <1>     push rdi
  1367 000019AE C605(E3060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1368 000019B5 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1369                              <1>     ;Zero the directory copy (32 bytes)
  1370 000019BC 50                  <1>     push rax
  1371 000019BD 51                  <1>     push rcx
  1372 000019BE 57                  <1>     push rdi
  1373 000019BF 31C0                <1>     xor eax, eax    ;Zero rax
  1374 000019C1 B904000000          <1>     mov ecx, 4
  1375 000019C6 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1376 000019C9 5F                  <1>     pop rdi
  1377 000019CA 59                  <1>     pop rcx
  1378 000019CB 58                  <1>     pop rax
  1379 000019CC 488B05(D8060000)    <1>     mov rax, qword [fcbName]
  1380 000019D3 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1381 000019D6 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1382 000019DB 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1383 000019DE C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1384                              <1>     ;Get date and time and set the write time in the directory entry
  1385 000019E2 E8A9120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1386 000019E7 E88F130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1387 000019EC 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1388 000019EF 31C0                <1>     xor eax, eax
  1389 000019F1 5F                  <1>     pop rdi
  1390 000019F2 58                  <1>     pop rax
  1391                              <1>     return
    13                              <2> %%_ret:
    14 000019F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> 
  1393                              <1> checkFailingComp:
  1394                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1395                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1396                              <1> ;Returns: ZF=ZE => Last path componant
  1397                              <1> ;         ZF=NZ => Not last path componant
  1398 000019F4 50                  <1>     push rax
  1399 000019F5 8A05(E3060000)      <1>     mov al, byte [fcbName + 11]
  1400 000019FB 84C0                <1>     test al, al
  1401 000019FD 58                  <1>     pop rax
  1402                              <1>     return
    13                              <2> %%_ret:
    14 000019FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 000019FF 4889D7              <1>     mov rdi, rdx
     8 00001A02 E8AE550000          <1>     call strlen
     9 00001A07 81F940000000        <1>     cmp ecx, 64
    10 00001A0D 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 00001A0F B003                <1>     mov al, errPnf
    13 00001A11 E913590000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 00001A16 4889D6              <1>     mov rsi, rdx
    16 00001A19 E8FA550000          <1>     call checkPathspecOK
    17 00001A1E 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 00001A20 E887560000          <1>     call scanPathWC
    20 00001A25 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 00001A27 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    23 00001A2E E812F8FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 00001A33 0F83F0580000        <1>     jnc extErrExit
    26                              <1>     ;-------------------------------------------
    27                              <1>     ;TEST THAT THE DRIVE IS VALID AND NOT JOIN
    28                              <1>     ;-------------------------------------------
    29 00001A39 57                  <1>     push rdi
    30 00001A3A 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
    31 00001A41 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    32 00001A47 5F                  <1>     pop rdi
    33 00001A48 0F84DB580000        <1>     jz extErrExit  ;Exit access denied
    34 00001A4E 57                  <1>     push rdi
    35 00001A4F 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
    36 00001A56 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive ;Cannot make on a live join drive
    37 00001A5C 5F                  <1>     pop rdi
    38 00001A5D 0F85C6580000        <1>     jnz extErrExit  ;Exit access denied
    39                              <1>     ;-------------------------------------------
    40                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    41 00001A63 E88CFFFFFF          <1>     call checkFailingComp
    42 00001A68 0F85BB580000        <1>     jnz extErrExit
    43                              <1>     ;So all is well, the new subdirectories name is in fcbName
    44                              <1>     ;The parent dir's directory entry is in the curDirCopy
    45 00001A6E E856530000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    46                              <1>     ;returns in rdi the working cds ptr
    47 00001A73 7312                <1>     jnc .notNet
    48 00001A75 B803110000          <1>     mov eax, 1103h
    49 00001A7A CD2F                <1>     int 2fh
    50 00001A7C 0F82A7580000        <1>     jc extErrExit
    51 00001A82 E994580000          <1>     jmp extGoodExit
    52                              <1> .notNet:
    53 00001A87 E852580000          <1>     call dosCrit1Enter
    54                              <1>     ;Current dpb ptr is already set
    55                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    56                              <1>     ;First we make a dummy dir in curDirCopy
    57 00001A8C 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    58 00001A93 488D35(D8060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    59 00001A9A 488D3D(59060000)    <1>     lea rdi, curDirCopy
    60 00001AA1 48A5                <1>     movsq   ;Copy the name over
    61 00001AA3 A5                  <1>     movsd
    62 00001AA4 E8E7110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    63 00001AA9 E8CD120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    64 00001AAE 8905(67060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    65 00001AB4 8905(6F060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    66 00001ABA 31C0                <1>     xor eax, eax
    67 00001ABC 8905(75060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    68 00001AC2 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    69 00001AC9 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]
    70                              <1> .searchForDirSpace:
    71 00001ACF 8905(83070000)      <1>     mov dword [dirClustA], eax
    72 00001AD5 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    73 00001AD7 668905(87070000)    <1>     mov word [dirSect], ax
    74 00001ADE 8905(89070000)      <1>     mov dword [dirEntry], eax
    75 00001AE4 E87D050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    76 00001AE9 7328                <1>     jnc .dirEntryFnd
    77 00001AEB 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    77 00001AF3 0000                <1>
    78 00001AF5 0F844A010000        <1>     je .bad ;Set CF and exit
    79 00001AFB E8B0060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    80 00001B00 0F823F010000        <1>     jc .bad
    81 00001B06 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    82 00001B0B 0F8434010000        <1>     je .bad
    83                              <1>     ;Else eax = Newly allocated cluster
    84 00001B11 EBBC                <1>     jmp short .searchForDirSpace
    85                              <1> .dirEntryFnd:
    86                              <1> ;rdi points to current directory copy
    87                              <1> ;rsi now points to offset in the buffer to write the entry to
    88                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    89 00001B13 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]
    90 00001B1A 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    91                              <1>      
    92 00001B1E 488905(45070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    93 00001B25 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    94 00001B2C 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    95 00001B2F 668935(4D070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    96                              <1> ;Must now request a cluster and sanitise it
    97 00001B36 E800F0FFFF          <1>     call startNewChain  ;Get cluster number in eax
    98 00001B3B 0F8209010000        <1>     jc .badExit
    99 00001B41 E89D060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   100 00001B46 0F82FE000000        <1>     jc .badExit
   101                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   102 00001B4C 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   103 00001B53 C1E810              <1>     shr eax, 10h    ;Get high word low
   104 00001B56 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   105 00001B5D 488B05(45070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   106 00001B64 E83DEEFFFF          <1>     call getBufForDirNoFile
   107 00001B69 0F82DB000000        <1>     jc .badExit
   108 00001B6F 0FB705(4D070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   109 00001B76 488D35(59060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   110 00001B7D 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   111 00001B82 B904000000          <1>     mov ecx, 4
   112 00001B87 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   113 00001B8A E89CECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   114                              <1>     ;Now need to read in data sector and make two entries . and ..
   115 00001B8F 57                  <1>     push rdi
   116 00001B90 51                  <1>     push rcx
   117 00001B91 B90B000000          <1>     mov ecx, 11
   118 00001B96 488D3D(59060000)    <1>     lea rdi, curDirCopy
   119 00001B9D B020                <1>     mov al, " "
   120 00001B9F F3AA                <1>     rep stosb
   121 00001BA1 59                  <1>     pop rcx
   122 00001BA2 5F                  <1>     pop rdi
   123 00001BA3 48B82E000000000000- <1>     mov rax, "."
   123 00001BAC 00                  <1>
   124 00001BAD 8805(59060000)      <1>     mov byte [curDirCopy], al
   125 00001BB3 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   126 00001BBA 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   127 00001BC1 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   128 00001BC8 C1E210              <1>     shl edx, 10h
   129 00001BCB 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   130 00001BCD E8EFEEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   131 00001BD2 E8CFEDFFFF          <1>     call getBufForDirNoFile
   132 00001BD7 7271                <1>     jc .badExit
   133                              <1>     ;rbx has buffer pointer now
   134 00001BD9 488D35(59060000)    <1>     lea rsi, curDirCopy
   135 00001BE0 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   136 00001BE4 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   137 00001BE9 F348A5              <1>     rep movsq
   138                              <1>     ;Now create .. entry
   139 00001BEC C605(5A060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   140 00001BF3 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   141 00001BF9 E858EEFFFF          <1>     call getFATtype
   142 00001BFE 81F902000000        <1>     cmp ecx, 2
   143 00001C04 7207                <1>     jb .notFAT32
   144 00001C06 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   145 00001C09 7502                <1>     jne .notFAT32
   146 00001C0B 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   147                              <1> .notFAT32:
   148 00001C0D 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   149 00001C14 C1E810              <1>     shr eax, 10h
   150 00001C17 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   151 00001C1E 488D35(59060000)    <1>     lea rsi, curDirCopy
   152 00001C25 B904000000          <1>     mov ecx, 4
   153 00001C2A F348A5              <1>     rep movsq
   154 00001C2D E8F9EBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   155 00001C32 E8C6EBFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   156 00001C37 7211                <1>     jc .badExit
   157                              <1> .okExit:
   158                              <1>     ;AND WE ARE DONE!
   159 00001C39 E8AA560000          <1>     call dosCrit1Exit
   160 00001C3E 31C0                <1>     xor eax, eax
   161 00001C40 E9D6560000          <1>     jmp extGoodExit
   162                              <1> .bad:
   163 00001C45 B805000000          <1>     mov eax, errAccDen
   164                              <1> .badExit:
   165 00001C4A E880EBFFFF          <1>     call cancelWriteThroughBuffers
   166 00001C4F E894560000          <1>     call dosCrit1Exit
   167 00001C54 E9D0560000          <1>     jmp extErrExit
   168                              <1> 
   169                              <1> removeDIR:         ;ah = 3Ah
   170 00001C59 4889D7              <1>     mov rdi, rdx
   171 00001C5C E854530000          <1>     call strlen
   172 00001C61 81F940000000        <1>     cmp ecx, 64
   173 00001C67 7607                <1>     jbe .okLength
   174                              <1> .badPath:
   175 00001C69 B003                <1>     mov al, errPnf
   176 00001C6B E9B9560000          <1>     jmp extErrExit
   177                              <1> .okLength:
   178 00001C70 4889D6              <1>     mov rsi, rdx
   179 00001C73 E8A0530000          <1>     call checkPathspecOK
   180 00001C78 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   181                              <1> .pathOk:
   182 00001C7A E82D540000          <1>     call scanPathWC
   183 00001C7F 72E8                <1>     jc .badPath ;Dont allow wildcards
   184                              <1>     ;Path is ok, now proceed
   185 00001C81 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   186 00001C88 E8B4F5FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   187 00001C8D 72DA                <1>     jc .badPath    ;Path Doesn't exist
   188 00001C8F E835510000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   189 00001C94 7312                <1>     jnc .notNet
   190 00001C96 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   191 00001C9B CD2F                <1>     int 2fh
   192 00001C9D 0F8286560000        <1>     jc extErrExit
   193 00001CA3 E973560000          <1>     jmp extGoodExit
   194                              <1> .notNet:
   195 00001CA8 E831560000          <1>     call dosCrit1Enter
   196 00001CAD 488D3D(1D050000)    <1>     lea rdi, buffer1
   197 00001CB4 E8FC520000          <1>     call strlen ;Get the length of the full qualified name in ecx
   198 00001CB9 66890D(4D070000)    <1>     mov word [pathLen], cx
   199                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   200 00001CC0 31C0                <1>     xor eax, eax
   201                              <1> .scanLoop:
   202 00001CC2 E87E520000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   203 00001CC7 721A                <1>     jc .notCurrent
   204 00001CC9 E81E530000          <1>     call compareFileNames
   205 00001CCE 7404                <1>     jz .cantDelCD
   206 00001CD0 FFC0                <1>     inc eax
   207 00001CD2 EBEE                <1>     jmp short .scanLoop
   208                              <1> .cantDelCD:
   209 00001CD4 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   210 00001CD9 E80A560000          <1>     call dosCrit1Exit
   211 00001CDE E946560000          <1>     jmp extErrExit
   212                              <1> .notCurrent:
   213 00001CE3 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   214                              <1>     ;Now let use check that our directory is not the CDS currentdir
   215 00001CEA 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   216 00001CF1 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   217                              <1>     ;If the given path length is one more than the backslash offset
   218                              <1>     ; due to the terminating null, then the user is trying to delete the 
   219                              <1>     ; root dir. Fail this.
   220 00001CF4 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   221 00001CF8 FFC1                <1>     inc ecx
   222 00001CFA 663B0D(4D070000)    <1>     cmp cx, word [pathLen]
   223 00001D01 0F8423010000        <1>     je .accessDenied
   224 00001D07 E86D030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   225                              <1>     ;for the entry in the sector we are hoping to delete
   226 00001D0C 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   227 00001D13 C1E010              <1>     shl eax, 10h
   228 00001D16 0FB71D(73060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   229 00001D1D 09D8                <1>     or eax, ebx
   230 00001D1F 8905(7F070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   231 00001D25 E897EDFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   232 00001D2A E877ECFFFF          <1>     call getBufForDirNoFile
   233 00001D2F 0F82FA000000        <1>     jc .exitBad
   234                              <1>     ;rbx points to buffer
   235 00001D35 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   236 00001D39 48B82E202020202020- <1>     mov rax, ".       "
   236 00001D42 20                  <1>
   237 00001D43 483906              <1>     cmp qword [rsi], rax
   238 00001D46 0F85DE000000        <1>     jne .accessDenied
   239 00001D4C B42E                <1>     mov ah, "." ;Screw the partial stall
   240 00001D4E 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   241 00001D52 0F85D2000000        <1>     jne .accessDenied
   242 00001D58 4881C620000000      <1>     add rsi, fatDirEntry_size
   243 00001D5F 488D3D(59060000)    <1>     lea rdi, curDirCopy
   244 00001D66 B904000000          <1>     mov ecx, 4
   245 00001D6B F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   246                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   247                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   248 00001D6E 488D3D(D8060000)    <1>     lea rdi, fcbName
   249 00001D75 B03F                <1>     mov al, "?"
   250 00001D77 B90B000000          <1>     mov ecx, 11
   251 00001D7C F3AA                <1>     rep stosb   ;Store the pattern to search for
   252 00001D7E 30C0                <1>     xor al, al  ;Store a terminating zero
   253 00001D80 AA                  <1>     stosb
   254 00001D81 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   255 00001D87 50                  <1>     push rax    ;Save on stack temporarily
   256 00001D88 8905(83070000)      <1>     mov dword [dirClustA], eax
   257 00001D8E 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   258 00001D90 668905(87070000)    <1>     mov word [dirSect], ax
   259 00001D97 C705(89070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   259 00001D9F 0000                <1>
   260 00001DA1 C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   261 00001DA8 58                  <1>     pop rax
   262 00001DA9 E813EDFFFF          <1>     call getStartSectorOfCluster
   263 00001DAE E815ECFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   264 00001DB3 727A                <1>     jc .exitBad
   265 00001DB5 E885F2FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   266 00001DBA 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   267 00001DC1 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   268 00001DC7 C605(68040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   269 00001DCE E8C9F1FFFF          <1>     call searchDir.rmdirEP
   270 00001DD3 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   271                              <1>     ;Else, this is a empty dir, we can remove it
   272                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   273 00001DD5 488B05(45070000)    <1>     mov rax, qword [tempSect]
   274 00001DDC E8E7EBFFFF          <1>     call getBufForDOS
   275 00001DE1 724C                <1>     jc .exitBad
   276 00001DE3 E857F2FFFF          <1>     call adjustDosDirBuffer
   277 00001DE8 0FB705(4D070000)    <1>     movzx eax, word [entry]
   278 00001DEF 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   279 00001DF3 4801C6              <1>     add rsi, rax    
   280 00001DF6 8A05(07070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   281 00001DFC 8806                <1>     mov byte [rsi], al  ;Store delchar there
   282 00001DFE 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   283 00001E02 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   284 00001E06 E820EAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   285 00001E0B C1E210              <1>     shl edx, 10h
   286 00001E0E 09D0                <1>     or eax, edx
   287                              <1>     ;Now remove the FAT chain
   288 00001E10 E865EEFFFF          <1>     call unlinkFAT
   289 00001E15 7218                <1>     jc .exitBad
   290 00001E17 E8E1E9FFFF          <1>     call writeThroughBuffers
   291 00001E1C 7211                <1>     jc .exitBad
   292 00001E1E E8C5540000          <1>     call dosCrit1Exit
   293 00001E23 31C0                <1>     xor eax, eax
   294 00001E25 E9F1540000          <1>     jmp extGoodExit
   295                              <1> .accessDenied:
   296 00001E2A B805000000          <1>     mov eax, errAccDen
   297                              <1> .exitBad:
   298 00001E2F E89BE9FFFF          <1>     call cancelWriteThroughBuffers
   299 00001E34 F9                  <1>     stc
   300 00001E35 E8AE540000          <1>     call dosCrit1Exit
   301 00001E3A E9EA540000          <1>     jmp extErrExit
   302                              <1> 
   303                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   304                              <1> ;Input: rdx = Pointer to ASCIIZ string
   305 00001E3F 4889D7              <1>     mov rdi, rdx
   306 00001E42 E86E510000          <1>     call strlen
   307 00001E47 81F940000000        <1>     cmp ecx, 64
   308 00001E4D 7618                <1>     jbe .okLength
   309                              <1> .badPath:
   310 00001E4F B003                <1>     mov al, errPnf
   311 00001E51 E9D3540000          <1>     jmp extErrExit
   312                              <1> .badPathCrit:
   313 00001E56 E88D540000          <1>     call dosCrit1Exit
   314 00001E5B EBF2                <1>     jmp short .badPath
   315                              <1> .badCrit:
   316 00001E5D E886540000          <1>     call dosCrit1Exit
   317 00001E62 E9C2540000          <1>     jmp extErrExit
   318                              <1> .okLength:
   319 00001E67 4889D6              <1>     mov rsi, rdx
   320 00001E6A E8A9510000          <1>     call checkPathspecOK
   321 00001E6F 72DE                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   322 00001E71 E8A0520000          <1>     call checkPathNet
   323 00001E76 74D7                <1>     jz .badPath ;Or Net paths
   324                              <1>     ;Path is ok, now proceed
   325 00001E78 E861540000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   326 00001E7D 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   327 00001E84 E8B8F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   328 00001E89 72D2                <1>     jc .badCrit   ;Exit with error code in eax
   329                              <1>     ;Now we check to make sure the path provided is not past the maximum
   330                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   331                              <1>     ; moved the path past the end.
   332 00001E8B 488D3D(1D050000)    <1>     lea rdi, buffer1
   333 00001E92 E81E510000          <1>     call strlen ;Get the length of this path
   334 00001E97 81F943000000        <1>     cmp ecx, 67
   335 00001E9D 77B7                <1>     ja .badPathCrit
   336                              <1>     ;The path must've been ok, so now copy the path into the CDS
   337                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   338                              <1>     ;Copy the workingCDS to the tmpCDS
   339 00001E9F 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   340 00001EA6 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   341 00001EAC 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   342 00001EB2 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   343 00001EB8 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   344                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   345 00001EBE 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   346 00001EC1 E8E4000000          <1>     call .getFatCluster
   347 00001EC6 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   348                              <1>     ;ecx has the length of the path in the buffer
   349 00001EC9 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   350 00001ECB 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   351 00001ED0 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   352 00001ED3 E8DD500000          <1>     call strlen
   353 00001ED8 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   354 00001EDA 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   355 00001EDF 0F8771FFFFFF        <1>     ja .badPathCrit
   356 00001EE5 51                  <1>     push rcx
   357 00001EE6 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   358 00001EED B95F000000          <1>     mov ecx, cds_size
   359 00001EF2 F3A4                <1>     rep movsb   
   360 00001EF4 59                  <1>     pop rcx
   361 00001EF5 FFC9                <1>     dec ecx ;Remove the trailing null from the count
   362 00001EF7 488D3D(79060000)    <1>     lea rdi, tmpCDS
   363 00001EFE 57                  <1>     push rdi
   364 00001EFF 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   365 00001F02 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   366 00001F06 F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   367 00001F08 5F                  <1>     pop rdi
   368 00001F09 4889FE              <1>     mov rsi, rdi
   369 00001F0C 31C0                <1>     xor eax, eax
   370 00001F0E 31C9                <1>     xor ecx, ecx
   371 00001F10 FFC9                <1>     dec ecx
   372 00001F12 F2AE                <1>     repne scasb   ;Search for the terminating null
   373 00001F14 4881EF02000000      <1>     sub rdi, 2
   374 00001F1B 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   375 00001F1D E855500000          <1>     call swapPathSeparator
   376 00001F22 7503                <1>     jnz .notSlash
   377 00001F24 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   378                              <1> .notSlash:
   379 00001F27 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   380 00001F2A 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   381 00001F2C E814500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   382 00001F31 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   383 00001F38 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   384 00001F3B C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   385                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   386                              <1>     ;Backslash offset must always be 2 on a join host
   387 00001F42 B943000000          <1>     mov ecx, 67
   388 00001F47 F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   389 00001F49 EB41                <1>     jmp short .exitGood
   390                              <1> .notJoin:
   391                              <1> ;rsi -> workingCDS
   392                              <1> ;Lets first copy the working CDS into tmpCDS
   393 00001F4B 488D3D(79060000)    <1>     lea rdi, tmpCDS
   394 00001F52 B95F000000          <1>     mov ecx, cds_size
   395 00001F57 F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   396 00001F59 E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   397 00001F5E 8905(C6060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   398 00001F64 488D3D(79060000)    <1>     lea rdi, tmpCDS
   399 00001F6B 488D35(1D050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   400 00001F72 E84D500000          <1>     call strcpy
   401 00001F77 488D35(79060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   402 00001F7E 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   403 00001F85 B95F000000          <1>     mov ecx, cds_size
   404 00001F8A F3A4                <1>     rep movsb
   405                              <1> .exitGood:
   406 00001F8C E857530000          <1>     call dosCrit1Exit
   407 00001F91 31C0                <1>     xor eax, eax
   408 00001F93 E983530000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   409                              <1> .net:
   410                              <1> ;SDA Vars are setup for this request
   411 00001F98 B805110000          <1>     mov eax, 1105h
   412 00001F9D CD2F                <1>     int 2fh
   413 00001F9F 0F8284530000        <1>     jc extErrExit
   414 00001FA5 E971530000          <1>     jmp extGoodExit
   415                              <1> .getFatCluster:
   416 00001FAA 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   417 00001FB1 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   418 00001FB8 C1E010              <1>     shl eax, 10h
   419 00001FBB 09D0                <1>     or eax, edx ;Add low bits to eax
   420                              <1>     return
    13                              <2> %%_ret:
    14 00001FBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> getCurrentDIR:     ;ah = 47h
   423                              <1> ;Returns the path for a drive with no X:\.
   424                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   425                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   426 00001FBE 88D0                <1>     mov al, dl  ;Move drive number into al
   427 00001FC0 E819530000          <1>     call dosCrit1Enter
   428 00001FC5 E8B04E0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   429 00001FCA 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   430                              <1> .badDrvExit:
   431 00001FCC E817530000          <1>     call dosCrit1Exit
   432 00001FD1 B80F000000          <1>     mov eax, errBadDrv
   433 00001FD6 E94E530000          <1>     jmp extErrExit
   434                              <1> .okDrive:
   435                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   436 00001FDB 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   437 00001FDC 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   438 00001FE3 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   439 00001FE4 488D3D(1D050000)    <1>     lea rdi, buffer1
   440 00001FEB E851F2FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   441 00001FF0 5E                  <1>     pop rsi ;Get back the original workingCDS
   442 00001FF1 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   443 00001FF2 72D8                <1>     jc .badDrvExit
   444                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   445                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   446                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   447 00001FF4 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   448 00001FF8 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   449 00001FFB 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   450 00001FFE 7503                <1>     jne .dontSkipChar
   451 00002000 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   452                              <1> .dontSkipChar:
   453 00002003 AC                  <1>     lodsb   ;Get char
   454 00002004 84C0                <1>     test al, al
   455 00002006 7406                <1>     jz .notSpecialChar
   456 00002008 3C05                <1>     cmp al, 05h     ;Special char case?
   457 0000200A 7502                <1>     jne .notSpecialChar
   458 0000200C B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   459                              <1> .notSpecialChar:
   460 0000200E AA                  <1>     stosb
   461 0000200F 84C0                <1>     test al, al ;Did we store a terminator char?
   462 00002011 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   463 00002013 E8D0520000          <1>     call dosCrit1Exit
   464 00002018 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   465 0000201D E9F9520000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   466                              <1> 
   467                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   468 00002022 50                  <1>     push rax
   469 00002023 B800600000          <1>     mov eax, 6000h
   470 00002028 CD21                <1>     int 21h
   471 0000202A 58                  <1>     pop rax
   472                              <1>     return
    13                              <2> %%_ret:
    14 0000202B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1>     
   474                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   475                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   476 0000202C E8E74F0000          <1>     call checkPathspecOK    ;This preserves rsi
   477 00002031 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   478 00002033 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   479                              <1> .badPath:
   480 00002035 B803000000          <1>     mov eax, errPnf
   481 0000203A E9EA520000          <1>     jmp extErrExit
   482                              <1> .pathspecOk:
   483 0000203F 57                  <1>     push rdi    ;Save the destination
   484 00002040 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   485 00002047 E878F2FFFF          <1>     call canonicaliseFileName
   486 0000204C 5F                  <1>     pop rdi
   487 0000204D 0F82D6520000        <1>     jc extErrExit
   488 00002053 488D35(1D050000)    <1>     lea rsi, buffer1
   489 0000205A E8654F0000          <1>     call strcpy
   490 0000205F 31C0                <1>     xor eax, eax
   491 00002061 E9B5520000          <1>     jmp extGoodExit
   492                              <1> 
   493                              <1> ;-----------------------------------
   494                              <1> ;    General Directory Routines    :
   495                              <1> ;-----------------------------------
   496                              <1> 
   497                              <1> 
   498                              <1> findFreeDiskDirEntry:
   499                              <1> ;Find a space in the directory we are searching for a directory entry
   500                              <1> ;Accept first entry starting with a 0E5h or 00h
   501                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   502                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   503                              <1> ; be called for CDS's that are NOT net CDS's).
   504                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   505                              <1> ;       Directory vars must be set up for the directory we are searching in
   506                              <1> ;Output: CF=CY => Error, eax has error code
   507                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   508 00002066 8A05(07070000)      <1>     mov al, byte [delChar]
   509 0000206C 8805(D8060000)      <1>     mov byte [fcbName], al
   510 00002072 E8E8EEFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   511                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002077 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   512                              <1> ;Free entry found, dir variables are set for the free entry. 
   513                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   514                              <1> getDiskDirectoryEntry:
   515                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   516                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   517                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   518                              <1> ;        qword [tempSect] = Disk sector number of directory
   519                              <1> ;        word [entry] = 32 byte offset into sector
   520                              <1> ;        CF=CY => Error, exit 
   521 00002079 53                  <1>     push rbx
   522 0000207A 8B05(83070000)      <1>     mov eax, dword [dirClustA]  
   523                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   524                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   525 00002080 0FB71D(87070000)    <1>     movzx ebx, word [dirSect]
   526 00002087 85C0                <1>     test eax, eax
   527 00002089 7407                <1>     jz .skipCluster
   528 0000208B E831EAFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   529 00002090 EB1B                <1>     jmp short .skipOldFat
   530                              <1> .skipCluster:
   531 00002092 55                  <1>     push rbp
   532 00002093 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   533 0000209A 0FB705(87070000)    <1>     movzx eax, word [dirSect]
   534 000020A1 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   535                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   536 000020A4 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   537 000020A8 5D                  <1>     pop rbp
   538 000020A9 7202                <1>     jb .skipOldFat
   539 000020AB F9                  <1>     stc
   540                              <1>     return
    13                              <2> %%_ret:
    14 000020AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> .skipOldFat:
   542 000020AD 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   543 000020B0 488905(45070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   544 000020B7 E80CE9FFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   545 000020BC 5B                  <1>     pop rbx
   546                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020BD 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   547 000020BF 53                  <1>     push rbx
   548 000020C0 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]
   549 000020C7 E873EFFFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   550                              <1>     ;Above function gets data buffer ptr in rsi
   551 000020CC 0FB705(87070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   552 000020D3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   553 000020D7 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   554                              <1>     ; the current sector
   555 000020D9 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   556 000020DC 8B1D(89070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   557 000020E2 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   558 000020E4 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   559 000020E7 66891D(4D070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   560 000020EE 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   561 000020F1 5B                  <1>     pop rbx
   562                              <1>     return
    13                              <2> %%_ret:
    14 000020F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> 
   565                              <1> updateDirectoryEntryForFile:    
   566                              <1> ;Updates the directory entry for disk files
   567                              <1> ;Called with:
   568                              <1> ;   [workingDPB] = DPB pointer for the disk device
   569                              <1> ;   [currentSFT] = Current SFT pointer
   570 000020F3 50                  <1>     push rax
   571 000020F4 53                  <1>     push rbx
   572 000020F5 57                  <1>     push rdi
   573 000020F6 55                  <1>     push rbp
   574                              <1> 
   575 000020F7 E8E2510000          <1>     call dosCrit1Enter
   576 000020FC 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
   577 00002103 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   578 0000210A 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   579 00002110 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   580 00002116 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   581 0000211C 751B                <1>     jnz .skipDT
   582                              <1>     ;Get date and time words and add them to the directory entry
   583 0000211E E86D0B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   584                              <1>     ;Build date and time words
   585 00002123 E8530C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   586                              <1>     ;Update SFT fields
   587 00002128 66894713            <1>     mov word [rdi + sft.wTime], ax
   588 0000212C C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   589 0000212F 66894715            <1>     mov word [rdi + sft.wDate], ax
   590 00002133 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   591                              <1> .skipDT:
   592                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   593                              <1> ; we skip all of this
   594 00002139 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   595 0000213F 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   596 00002141 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   597 00002145 E88CE8FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   598 0000214A 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   599                              <1>     ;Now we write the changes to the sector
   600                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   601 0000214C 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   602 00002150 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   603 00002154 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   604 00002157 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   605 0000215A 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   606 0000215D 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   607 00002160 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   608 00002164 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   609 00002168 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   610 0000216C 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   611 00002170 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   612 00002174 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   613 00002177 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   614 0000217B C1E810              <1>     shr eax, 10h
   615 0000217E 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   616                              <1>     ;Directory sector updated and marked to be flushed to disk!
   617 00002182 31C0                <1>     xor eax, eax
   618 00002184 FF15(2F010000)      <1>     call qword [updateDirShare]
   619 0000218A F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   620 0000218B E89BE6FFFF          <1>     call markBufferDirty
   621 00002190 E868E6FFFF          <1>     call writeThroughBuffers
   622 00002195 720A                <1>     jc .exitBad
   623                              <1> .exit:
   624 00002197 E84C510000          <1>     call dosCrit1Exit
   625 0000219C 5D                  <1>     pop rbp
   626 0000219D 5F                  <1>     pop rdi
   627 0000219E 5B                  <1>     pop rbx
   628 0000219F 58                  <1>     pop rax
   629                              <1>     return
    13                              <2> %%_ret:
    14 000021A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   630                              <1> .exitBad:
   631 000021A1 E829E6FFFF          <1>     call cancelWriteThroughBuffers
   632 000021A6 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   633 000021A7 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   634 000021AD 9D                  <1>     popfq
   635 000021AE EBE7                <1>     jmp short .exit
   636                              <1>     
   637                              <1> growDirectory:
   638                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   639                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   640                              <1> ;                 eax = New Cluster number
   641                              <1> ;               TWO NON CF ERROR CASES.
   642                              <1> ;               If eax = -1 => disk full!
   643                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   644                              <1> ;        CF=CY => Something went wrong. Rip. 
   645 000021B0 53                  <1>     push rbx
   646 000021B1 51                  <1>     push rcx
   647 000021B2 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   648 000021B8 85C0                <1>     test eax, eax
   649 000021BA 7424                <1>     jz .exit
   650 000021BC E82DE9FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   651 000021C1 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   652 000021C3 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   653 000021C8 E894E9FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   654 000021CD 7211                <1>     jc .exit
   655 000021CF 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   656 000021D1 E8EDEAFFFF          <1>     call readFAT
   657 000021D6 7208                <1>     jc .exit
   658 000021D8 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   659 000021DD 7201                <1>     jc .exit
   660 000021DF F8                  <1>     clc
   661                              <1> .exit:
   662 000021E0 59                  <1>     pop rcx
   663 000021E1 5B                  <1>     pop rbx
   664                              <1>     return   
    13                              <2> %%_ret:
    14 000021E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> sanitiseCluster:
   666                              <1> ;Sanitises the cluster in eax to all zeros
   667                              <1> ;Does not move file pointers
   668                              <1> ;Currently, is only called to sanitise subdirectory clusters
   669                              <1> ;Input: eax = Cluster number
   670                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   671                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   672                              <1> ;        If CF=CY => Error, exit
   673 000021E3 50                  <1>     push rax
   674 000021E4 53                  <1>     push rbx
   675 000021E5 51                  <1>     push rcx
   676 000021E6 52                  <1>     push rdx
   677 000021E7 56                  <1>     push rsi
   678 000021E8 55                  <1>     push rbp
   679 000021E9 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   680 000021F0 E8CCE8FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   681 000021F5 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   682 000021F9 FFC2                <1>     inc edx ;Make it a count of sectors
   683                              <1> .getSectorInCluster:
   684 000021FB E889E7FFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   685 00002200 721E                <1>     jc .exitBad
   686 00002202 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   687 00002206 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   688 0000220A 31C0                <1>     xor eax, eax
   689 0000220C F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   690 0000220E E818E6FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   691                              <1> 
   692 00002213 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   693 00002215 740A                <1>     jz .exit    ;Jump if we done
   694 00002217 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   695 0000221B 48FFC0              <1>     inc rax ;Goto next sector in cluster
   696 0000221E EBDB                <1>     jmp short .getSectorInCluster
   697                              <1> .exitBad:
   698 00002220 F9                  <1>     stc
   699                              <1> .exit:
   700 00002221 5D                  <1>     pop rbp
   701 00002222 5E                  <1>     pop rsi
   702 00002223 5A                  <1>     pop rdx
   703 00002224 59                  <1>     pop rcx
   704 00002225 5B                  <1>     pop rbx
   705 00002226 58                  <1>     pop rax
   706                              <1>     return
    13                              <2> %%_ret:
    14 00002227 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002228 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002229 488D1D(1B050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002230 48891D(A4040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00002237 5B                  <1>     pop rbx
    60 00002238 C705(AC040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002240 0000                <1>
    61 00002242 668905(1B050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00002249 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 0000224F 0F85A1000000        <1>     jnz .notChar
    64 00002255 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 0000225B 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00002261 E861500000          <1>     call dosPushRegs    ;Save context here
    68 00002266 488D1DADDDFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 0000226D 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002270 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00002273 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00002276 890D(96040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 0000227C 31C9                <1>     xor ecx, ecx
    75 0000227E 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002281 7506                <1>     jne .skipBsySet
    77 00002283 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002289 66870D(99040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002290 488D1D(96040000)    <1>     lea rbx, secdReqHdr
    82 00002297 E821470000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 0000229C 668B3D(99040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 000022A3 F7C700800000        <1>     test edi, drvErrStatus
    85 000022A9 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 000022AB 803D(98040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 000022B2 750C                <1>     jne .notNDRead
    89 000022B4 8A05(A3040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 000022BA 8805(1B050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 000022C0 8A25(9A040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 000022C6 F6D4                <1>     not ah
    94 000022C8 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 000022CB E8E04F0000          <1>     call dosPopRegs ;Get back the context
    96 000022D0 668B05(1B050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000022D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000022D8 88CC                <1>     mov ah, cl
   101 000022DA E8AD400000          <1>     call charDevErr
   102 000022DF 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000022E1 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000022E3 E8C84F0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000022E8 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000022ED 8025(9A040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 000022F4 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000022F6 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 000022F8 7409                <1>     jz .makeDiskNetReadReq
   115 000022FA FECC                <1>     dec ah
   116 000022FC 7421                <1>     jz .makeDiskNetNonDestReq
   117 000022FE FECC                <1>     dec ah
   118 00002300 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00002302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00002303 E833000000          <1>     call .prepDiskNetIO
   123 00002308 E8C6200000          <1>     call readBytes
   124 0000230D 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 0000230F E857000000          <1>     call .cleanDiskNetIO
   126 00002314 8A05(1B050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000231A 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 0000231C B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 0000231E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 0000231F FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00002322 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00002327 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 0000232A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 0000232B E80B000000          <1>     call .prepDiskNetIO
   138 00002330 E8DE230000          <1>     call writeBytes
   139 00002335 E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000233A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 0000233B 8F05(EA040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 00002341 E8814F0000          <1>     call dosPushRegs
   146 00002346 FF35(17040000)      <1>     push qword [currentDTA]
   147 0000234C 488D0D(1B050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00002353 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 0000235A 488935(31070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 00002361 31C9                <1>     xor ecx, ecx
   151 00002363 FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 00002365 FF25(EA040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 0000236B 8F05(EA040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 00002371 8F05(17040000)      <1>     pop qword [currentDTA]
   157 00002377 E8344F0000          <1>     call dosPopRegs
   158 0000237C EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 0000237E E8444F0000          <1>     call dosPushRegs
   164 00002383 B00D                <1>     mov al, drvOPEN
   165 00002385 EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 00002387 E83B4F0000          <1>     call dosPushRegs
   169 0000238C B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 0000238E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 00002394 7469                <1>     jz .exit    ;Exit if so
   174 00002396 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 0000239A 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 0000239E 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 000023A0 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 000023A7 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 000023A9 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 000023AC 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 000023AE 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 000023B2 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 000023B8 7445                <1>     jz .exit    ;No, exit!
   186 000023BA 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 000023BD 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   188 000023C4 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 000023C7 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 000023CA C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 000023CD 50                  <1>     push rax    ;Save the dword
   193 000023CE E8EE450000          <1>     call goDriver
   194 000023D3 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   195 000023DA F7C700800000        <1>     test edi, drvErrStatus
   196 000023E0 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 000023E2 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 000023E8 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 000023EA B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 000023EC EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 000023EE 88C8                <1>     mov al, cl  ;Move drive number into al
   205 000023F0 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 000023F2 E8953F0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 000023F7 B001                <1>     mov al, critRetry   ;al returns user response
   210 000023F9 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 000023FB 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 000023FC EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 000023FE 58                  <1>     pop rax    
   215                              <1> .exit:
   216 000023FF E8AC4E0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 00002404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00002405 E87D010000          <1>     call charIn_B
    17 0000240A 50                  <1>     push rax
    18 0000240B E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002410 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00002411 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00002412 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 00002414 3C20                <1>     cmp al, asciiCaret
    27 00002416 0F8286000000        <1>     jb .control
    28 0000241C 3C7F                <1>     cmp al, DEL ;DEL char?
    29 0000241E 7406                <1>     je .skipCurs
    30 00002420 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00002426 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 0000242C 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 00002433 56                  <1>     push rsi
    35 00002434 7507                <1>     jnz .skipErrorCheck
    36 00002436 50                  <1>     push rax
    37 00002437 E897020000          <1>     call vConCtrlCheck
    38 0000243C 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 0000243D E81F020000          <1>     call outputOnStdout
    41 00002442 5E                  <1>     pop rsi
    42 00002443 F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000244A 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 0000244C 53                  <1>     push rbx
    45 0000244D 56                  <1>     push rsi
    46 0000244E BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00002453 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00002458 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 0000245E 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00002462 F7C300800000        <1>     test ebx, devRedirDev
    52 00002468 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 0000246E F7C380000000        <1>     test ebx, devCharDev
    54 00002474 0F84B2000000        <1>     jz auxOutCmn.exit
    55 0000247A BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 0000247F E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00002484 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 0000248A 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00002490 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 00002496 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 0000249D E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 000024A2 3C0D                <1>     cmp al, CR
    64 000024A4 7429                <1>     je .newline
    65 000024A6 3C08                <1>     cmp al, BSP
    66 000024A8 7431                <1>     je .back
    67 000024AA 3C09                <1>     cmp al, TAB
    68 000024AC 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 000024B2 51                  <1>     push rcx
    72 000024B3 0FB60D(CC020000)    <1>     movzx ecx, byte [vConCursPos]
    73 000024BA 80C9F8              <1>     or cl, ~7
    74 000024BD F6D9                <1>     neg cl
    75 000024BF 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 000024C2 B020                <1>     mov al, SPC
    78 000024C4 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 000024C9 FEC9                <1>     dec cl
    80 000024CB 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 000024CD 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000024CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 000024CF C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 000024D6 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 000024DB FE0D(CC020000)      <1>     dec byte [vConCursPos]
    89 000024E1 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 000024E6 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 000024EB BB03000000          <1>     mov ebx, 3
    94 000024F0 E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024F5 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 000024F7 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 000024F9 E82AFDFFFF          <1>     call mainCharIO
    99 000024FE 7408                <1>     jz .signalLoop
   100 00002500 30E4                <1>     xor ah, ah  ;Read the char in
   101 00002502 E821FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00002507 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00002508 E8A3010000          <1>     call callInt28h
   105 0000250D EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 0000250F 53                  <1>     push rbx
   109 00002510 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00002515 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00002517 53                  <1>     push rbx
   113 00002518 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 0000251D 88D0                <1>     mov al, dl  ;Get the char into al
   116 0000251F 50                  <1>     push rax
   117 00002520 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00002525 58                  <1>     pop rax
   119 00002526 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00002527 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 0000252C 5E                  <1>     pop rsi
   125 0000252D 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 0000252E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 0000252F 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 00002531 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00002533 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00002539 31DB                <1>     xor ebx, ebx    
   134 0000253B E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002540 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00002542 488B2D(7A040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00002549 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 0000254B E8D8FCFFFF          <1>     call mainCharIO
   139 00002550 E85B010000          <1>     call callInt28h ;This preserves flags so call here!
   140 00002555 7507                <1>     jnz .readChar
   141 00002557 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 0000255B 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 0000255D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 0000255E 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 00002562 31DB                <1>     xor ebx, ebx
   150 00002564 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002569 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 0000256B B401                <1>     mov ah, 01  ;ND read for char
   153 0000256D E8B6FCFFFF          <1>     call mainCharIO
   154 00002572 750B                <1>     jnz .getChar
   155 00002574 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 00002576 CD2A                <1>     int 2Ah
   157 00002578 E833010000          <1>     call callInt28h
   158 0000257D EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 0000257F 30E4                <1>     xor ah, ah
   162 00002581 E8A2FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 00002586 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 00002587 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002588 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 0000258D 7543                <1>     jnz .pullChar
   171 0000258F 803D(E8190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 00002596 7507                <1>     jne .skiplookahead
   173 00002598 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 0000259A E889FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 0000259F B484                <1>     mov ah, 84h
   177 000025A1 CD2A                <1>     int 2ah ;Multitasking keyboard loop
   178 000025A3 66813D(CA1A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 000025AB FF                  <1>
   179 000025AC 751B                <1>     jne .skipClockRead
   180 000025AE E8144D0000          <1>     call dosPushRegs
   181 000025B3 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 000025B4 E882000000          <1>     call swapPrimaryHeader
   183 000025B9 E8D2060000          <1>     call readDateTimeRecord
   184 000025BE F9                  <1>     stc ;Set CF, write backup to primary header
   185 000025BF E877000000          <1>     call swapPrimaryHeader
   186 000025C4 E8E74C0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 000025C9 66FF05(CA1A0000)    <1>     inc word [keybTicks]
   189 000025D0 EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 000025D2 30E4                <1>     xor ah, ah
   192 000025D4 E84FFCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 000025D9 5E                  <1>     pop rsi
   194 000025DA 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 000025DC 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 000025DE C605(C91A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 000025E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 000025E6 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 000025E9 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 000025EA 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025EC 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 000025EE E821FEFFFF          <1>     call charOut_B.in
   208 000025F3 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 000025F5 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 000025FA B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025FC 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 000025FE FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002600 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 00002601 50                  <1>     push rax
   221 00002602 52                  <1>     push rdx
   222 00002603 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002605 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 0000260A 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000260C B404                <1>     mov ah, 04h ;Flush input buffers
   226 0000260E E815FCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 00002613 5A                  <1>     pop rdx
   229 00002614 58                  <1>     pop rax
   230 00002615 88C4                <1>     mov ah, al  ;Move function number into ah
   231 00002617 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 00002619 7507                <1>     jne .others
   233 0000261B 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 0000261E 7412                <1>     jz .bad ;Yes, exit
   235 00002620 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 00002622 3C01                <1>     cmp al, 01h
   238 00002624 740F                <1>     je .callFunction
   239 00002626 3C07                <1>     cmp al, 07h
   240 00002628 740B                <1>     je .callFunction
   241 0000262A 3C08                <1>     cmp al, 08h
   242 0000262C 7407                <1>     je .callFunction
   243 0000262E 3C0A                <1>     cmp al, 0Ah
   244 00002630 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 00002632 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 00002634 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 00002635 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 00002636 E9A44B0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 0000263B 56                  <1>     push rsi
   261 0000263C 57                  <1>     push rdi
   262 0000263D 51                  <1>     push rcx
   263 0000263E 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 00002647 00                  <1>
   264 00002648 488D35(C0040000)    <1>     lea rsi, primReqHdr
   265 0000264F 488D3D(9C1A0000)    <1>     lea rdi, bkupReqHdr
   266 00002656 7303                <1>     jnc .read
   267 00002658 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 0000265B F3A4                <1>     rep movsb   ;Swap
   270 0000265D 59                  <1>     pop rcx
   271 0000265E 5F                  <1>     pop rdi
   272 0000265F 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 00002660 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 00002661 53                  <1>     push rbx
   278 00002662 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 00002667 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 0000266C 7217                <1>     jc .exit
   281 0000266E 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 00002674 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 00002676 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 0000267A 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   285 00002680 7405                <1>     jz .notCharDevOrFast
   286 00002682 CD29                <1>     int 29h ;Fast output
   287                              <1> .exitOk:
   288 00002684 F8                  <1>     clc
   289                              <1> .exit:
   290 00002685 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00002686 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 00002687 E809000000          <1>     call outputOnSFT
   294 0000268C 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000268D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 0000268E E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002693 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 28h if device busy
   305 00002695 50                  <1>     push rax
   306 00002696 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002698 E88BFBFFFF          <1>     call mainCharIO
   308 0000269D 58                  <1>     pop rax
   309 0000269E 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 000026A0 B402                <1>     mov ah, 02h ;Output char in al
   311 000026A2 E881FBFFFF          <1>     call mainCharIO
   312 000026A7 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 000026A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 000026A9 E802000000          <1>     call callInt28h
   316 000026AE EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt28h:
   319                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   320 000026B0 9C                  <1>     pushfq
   321 000026B1 F605(94040000)FF    <1>     test byte [int28Flag], -1
   322 000026B8 7417                <1>     jz .exit    ;If zero, not safe
   323 000026BA F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 000026C1 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   326 000026C3 FF35(94040000)      <1>     push qword [int28Flag] 
   327 000026C9 CD28                <1>     int 28h
   328 000026CB 8F05(94040000)      <1>     pop qword [int28Flag]    ;Return original value
   329                              <1> .exit:
   330 000026D1 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 000026D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 000026D3 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 000026D8 53                  <1>     push rbx
   354 000026D9 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 000026DB E8BA000000          <1>     call getCharDevSFT
   356 000026E0 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026E1 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 000026E3 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 000026E5 E83EFBFFFF          <1>     call mainCharIO
   360 000026EA 74C4                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 000026EC 3C13                <1>     cmp al, DC3 ;^S ?
   363 000026EE 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 000026F0 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 000026F2 E831FBFFFF          <1>     call mainCharIO
   366 000026F7 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 000026FC 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 000026FE 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 00002700 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002702 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002704 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002705 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 0000270B 53                  <1>     push rbx
   377 0000270C BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 00002711 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 00002716 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002717 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00002719 57                  <1>     push rdi
   382 0000271A 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 0000271D 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 00002723 741D                <1>     jz .notNet
   385 00002725 50                  <1>     push rax
   386 00002726 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 0000272B CD2F                <1>     int 2Fh
   388 0000272D 58                  <1>     pop rax
   389 0000272E 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 00002730 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 00002737 50                  <1>     push rax
   393 00002738 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 0000273D CD2F                <1>     int 2Fh
   395 0000273F 58                  <1>     pop rax
   396 00002740 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 00002742 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   401 00002749 7507                <1>     jnz .echoOn
   402 0000274B E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 00002750 EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 00002752 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 00002757 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 00002758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   410 00002759 E852FFFFFF          <1>     call callInt28h
   411                              <1> .waitNextChar:   ;Here get next char
   412 0000275E B401                <1>     mov ah, 01h ;ND read
   413 00002760 E8C3FAFFFF          <1>     call mainCharIO
   414 00002765 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 00002767 53                  <1>     push rbx
   417 00002768 31DB                <1>     xor ebx, ebx
   418 0000276A E82B000000          <1>     call getCharDevSFT
   419 0000276F 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002770 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 00002772 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 00002774 E8AFFAFFFF          <1>     call mainCharIO
   423 00002779 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 0000277B 7514                <1>     jnz .checkBreak2
   425 0000277D 803D(C91A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 00002784 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 0000278A C605(C91A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 00002791 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002793 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 00002795 E9783D0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 0000279A F605(93040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 000027A1 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 000027A3 57                  <1>     push rdi
   443 000027A4 E84A250000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 000027A9 4889FE              <1>     mov rsi, rdi
   445 000027AC 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 000027AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 000027AE 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 000027B4 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 000027B6 488B35(21070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 000027BD F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 000027BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 000027BF 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 000027C1 0F834DFCFFFF        <1>     jae charOut_B.in
   464 000027C7 3C09                <1>     cmp al, TAB
   465 000027C9 0F8445FCFFFF        <1>     je charOut_B.in
   466 000027CF 3C15                <1>     cmp al, NAK
   467 000027D1 0F843DFCFFFF        <1>     je charOut_B.in
   468 000027D7 3C14                <1>     cmp al, DC4
   469 000027D9 0F8435FCFFFF        <1>     je charOut_B.in
   470 000027DF 50                  <1>     push rax
   471 000027E0 B05E                <1>     mov al, "^" ;Get caret in place
   472 000027E2 E82DFCFFFF          <1>     call charOut_B.in
   473 000027E7 58                  <1>     pop rax
   474 000027E8 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 000027EA E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 000027EF B00D                <1>     mov al, CR
   478 000027F1 E81EFCFFFF          <1>     call charOut_B.in
   479 000027F6 B00A                <1>     mov al, LF
   480 000027F8 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   485 000027FD 803D(08040000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002804 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002806 53                  <1>     push rbx
   490 00002807 56                  <1>     push rsi
   491 00002808 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000280F C705(EC040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 00002817 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 00002819 C605(EA040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 00002820 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   497 00002827 E895410000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 0000282C 66F705(ED040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 00002834 02                  <1>
   500 00002835 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 00002837 30C0                <1>     xor al, al
   503 00002839 5E                  <1>     pop rsi
   504 0000283A 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000283B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 0000283C 8A05(F7040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 00002842 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 00002844 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 00002846 C705(EC040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 0000284E 0000                <1>
   513 00002850 C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 00002857 C705(00050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 0000285F 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 00002861 488D05(F7040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 00002868 488905(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 0000286F E84D410000          <1>     call goDriver   ;RSI and RBX as before
   520 00002874 E9993C0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 00002879 57                  <1>     push rdi
   525 0000287A C605(93040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 00002881 488B3D(31070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002888 48893D(21070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 0000288F 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 00002891 C605(93040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002898 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002899 4889D6              <1>     mov rsi, rdx
   553 0000289C 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 0000289E 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000028A0 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 000028A2 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 000028A5 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 000028A7 7606                <1>     jbe .avoidcheck
   559 000028A9 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 000028AD 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 000028AF 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 000028B1 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 000028B4 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 000028B6 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 000028BC 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   569 000028C2 56                  <1>     push rsi    ;Push user buffer address
   570 000028C3 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   571 000028CA C605(02070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 000028D1 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   574 000028D6 3C0A                <1>     cmp al, LF
   575 000028D8 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 000028DA E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 000028DF 3C06                <1>     cmp al, ACK
   580 000028E1 74F7                <1>     je .mainLoop2   ;Get another char
   581 000028E3 3A0551D7FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 000028E9 0F8426010000        <1>     je .escape
   583 000028EF 3C7F                <1>     cmp al, DEL
   584 000028F1 0F8489000000        <1>     je .delete
   585 000028F7 3C08                <1>     cmp al, BSP
   586 000028F9 0F8481000000        <1>     je .delete
   587 000028FF 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 00002901 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002906 3C15                <1>     cmp al, NAK
   591 00002908 9090909090          <1>     db 5 dup (90h)
   592 0000290D 3C0D                <1>     cmp al, CR
   593 0000290F 744C                <1>     je .carriageReturn
   594 00002911 3C0A                <1>     cmp al, LF
   595 00002913 7461                <1>     je .lineFeed
   596 00002915 3A0520D7FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 0000291B 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 0000291D 38D6                <1>     cmp dh, dl
   600 0000291F 731C                <1>     jae .bufOflw
   601 00002921 AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 00002922 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 00002924 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 00002929 803D(02070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 00002930 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 00002932 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 00002934 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 00002936 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 00002939 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 0000293B EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 0000293D B007                <1>     mov al, BEL ;Sound the bell
   617 0000293F E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 00002944 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 00002946 B05C                <1>     mov al, "\"
   622 00002948 E8C7FAFFFF          <1>     call charOut_B.in
   623 0000294D 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 0000294E E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 00002953 E85AFBFFFF          <1>     call charOut_B.tab
   628 00002958 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 0000295D AA                  <1>     stosb
   631 0000295E E8B1FAFFFF          <1>     call charOut_B.in
   632 00002963 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 00002964 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 00002967 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 00002969 488D35(CE020000)    <1>     lea rsi, vConBuffer
   637 00002970 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 00002973 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 00002975 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 00002976 E874FEFFFF          <1>     call printCRLF
   642 0000297B E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 00002980 E805000000          <1>     call .removeChar
   645 00002985 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 0000298A 84F6                <1>     test dh, dh ;Is char count 0?
   648 0000298C 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 0000298E E868000000          <1>     call .vConErase
   650 00002993 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 00002995 3C20                <1>     cmp al, SPC
   652 00002997 7311                <1>     jae .normalChar
   653 00002999 3C09                <1>     cmp al, TAB
   654 0000299B 7420                <1>     je .eraTab
   655 0000299D 3C15                <1>     cmp al, NAK
   656 0000299F 7409                <1>     je .normalChar
   657 000029A1 3C14                <1>     cmp al, DC4
   658 000029A3 7405                <1>     je .normalChar
   659 000029A5 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 000029AA 803D(02070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029B1 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 000029B3 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029B5 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 000029B7 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 000029BA FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 000029BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 000029BD 57                  <1>     push rdi
   672 000029BE 48FFCF              <1>     dec rdi
   673 000029C1 FD                  <1>     std ;Go backwards
   674 000029C2 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 000029C5 B020                <1>     mov al, SPC
   676 000029C7 53                  <1>     push rbx
   677 000029C8 BB07000000          <1>     mov ebx, 7
   678 000029CD 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 000029D0 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 000029D1 7608                <1>     jbe .notChar    ;No, skip handling
   682 000029D3 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 000029D7 740A                <1>     je .tabChar
   684 000029D9 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 000029DB E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 000029DD 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 000029E3 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 000029E5 00D9                <1>     add cl, bl
   692 000029E7 80E107              <1>     and cl, 7
   693 000029EA 5B                  <1>     pop rbx
   694 000029EB 5F                  <1>     pop rdi
   695 000029EC FC                  <1>     cld
   696 000029ED 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 000029EF E80C000000          <1>     call .vConEraseNoDec
   700 000029F4 E2F9                <1>     loop .vConDelTab
   701 000029F6 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 000029FB 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 000029FE FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 00002A00 B008                <1>     mov al, BSP ;Move cursor back
   709 00002A02 E80DFAFFFF          <1>     call charOut_B.in
   710 00002A07 B020                <1>     mov al, SPC ;Replace with a space
   711 00002A09 E806FAFFFF          <1>     call charOut_B.in
   712 00002A0E B008                <1>     mov al, BSP ;Move cursor back again
   713 00002A10 E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 00002A15 FF2517D6FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 00002A1B E846000000          <1>     call .fCommon2
   721 00002A20 EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 00002A22 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 00002A25 28F9                <1>     sub cl, bh  ;Sub our current position
   725 00002A27 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 00002A29 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 00002A2E C605(02070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 00002A35 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 00002A37 0F849DFEFFFF        <1>     je .mainLoop2
   732 00002A3D 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 00002A3F 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 00002A45 AC                  <1>     lodsb
   736 00002A46 AA                  <1>     stosb
   737 00002A47 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 00002A4C FEC7                <1>     inc bh
   739 00002A4E FEC6                <1>     inc dh
   740 00002A50 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 00002A52 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 00002A57 E80A000000          <1>     call .fCommon2
   744 00002A5C 4801CE              <1>     add rsi, rcx
   745 00002A5F 00CF                <1>     add bh, cl
   746 00002A61 E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 00002A66 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 00002A6B 3A05C9D5FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 00002A71 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 00002A73 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 00002A78 59                  <1>     pop rcx ;Get original return address from stack
   756 00002A79 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 00002A7E 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 00002A81 28F9                <1>     sub cl, bh
   760 00002A83 74F3                <1>     jz .fforceExit
   761 00002A85 FFC9                <1>     dec ecx
   762 00002A87 74EF                <1>     jz .fforceExit
   763 00002A89 57                  <1>     push rdi
   764 00002A8A 4889F7              <1>     mov rdi, rsi
   765 00002A8D 48FFC7              <1>     inc rdi
   766 00002A90 F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 00002A92 5F                  <1>     pop rdi
   768 00002A93 75E3                <1>     jne .fforceExit ;If char not found, return
   769 00002A95 F6D1                <1>     not cl
   770 00002A97 00D9                <1>     add cl, bl
   771 00002A99 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002A9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 00002A9C B040                <1>     mov al, "@"
   775 00002A9E E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 00002AA3 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 00002AA4 57                  <1>     push rdi
   778 00002AA5 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 00002AAA 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 00002AAB 88F3                <1>     mov bl, dh
   781 00002AAD E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 00002AB2 B01A                <1>     mov al, EOF
   785 00002AB4 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002AB9 8A057BD5FFFF        <1>     mov al, byte [extESC]
   789 00002ABF E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 00002AC4 F615(02070000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002ACA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 00002ACB 38DF                <1>     cmp bh, bl
   795 00002ACD 0F8407FEFFFF        <1>     je .mainLoop2
   796 00002AD3 FEC7                <1>     inc bh
   797 00002AD5 48FFC6              <1>     inc rsi
   798 00002AD8 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 00002ADD E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 00002AE2 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002AE7 57                  <1>     push rdi    ;Preserve rdi
   805 00002AE8 488D3D4DD5FFFF      <1>     lea rdi, extKeyTbl
   806 00002AEF 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 00002AF0 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002AF1 740D                <1>     je .charFound
   812 00002AF3 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002AF5 7414                <1>     jz .notInTable
   814 00002AF7 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002AFE EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 00002B00 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002B01 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002B05 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002B08 5F                  <1>     pop rdi
   821 00002B09 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002B0B 59                  <1>     pop rcx ;Realign stack
   824 00002B0C 59                  <1>     pop rcx
   825 00002B0D E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    33                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002B12 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002B17 E83A430000          <1>     call getUserRegs
     6 00002B1C 668B15(8D040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002B23 0FB60D(8F040000)    <1>     movzx ecx, byte [years]
     9 00002B2A 8A05(92040000)      <1>     mov al, byte [dayOfWeek]
    10 00002B30 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 00002B34 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002B38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 00002B39 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 00002B3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 00002B3F E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 00002B44 E80D430000          <1>     call getUserRegs
    22 00002B49 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 00002B50 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 00002B57 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 00002B5B 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002B5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 00002B60 80FD17              <1>     cmp ch, 23
    33 00002B63 7749                <1>     ja .exitBad
    34 00002B65 80F93B              <1>     cmp cl, 59
    35 00002B68 7744                <1>     ja .exitBad
    36 00002B6A 80FE3B              <1>     cmp dh, 59
    37 00002B6D 773F                <1>     ja .exitBad
    38 00002B6F 80FA63              <1>     cmp dl, 99
    39 00002B72 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 00002B74 E817010000          <1>     call readDateTimeRecord
    42 00002B79 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 00002B80 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002B87 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002B8A 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002B8E 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002B92 B906000000          <1>     mov ecx, 6
    48 00002B97 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002B9A E835410000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 00002B9F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002BA6 E8163E0000          <1>     call goDriver
    52 00002BAB 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 00002BAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002BAE B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 00002BB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002BB1 6681F97800          <1>     cmp cx, 120
    62 00002BB6 0F83D1000000        <1>     jae .exitBad
    63 00002BBC 80FE0C              <1>     cmp dh, 12
    64 00002BBF 0F87C8000000        <1>     ja .exitBad
    65 00002BC5 80FA1F              <1>     cmp dl, 31
    66 00002BC8 0F87BF000000        <1>     ja .exitBad
    67 00002BCE 668915(8D040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002BD5 880D(8F040000)      <1>     mov byte [years], cl    ;Save the years count
    70 00002BDB E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 00002BE0 88CD                <1>     mov ch, cl ;Get years count in ch
    72 00002BE2 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002BE5 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002BE8 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 00002BEB BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 00002BF0 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 00002BF2 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002BF5 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002BF8 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 00002BFD FFC9                <1>     dec ecx
    83 00002BFF 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002C02 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002C07 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002C09 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002C0E 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 00002C10 0FB60D(8E040000)    <1>     movzx ecx, byte [monthOfYear]
    92 00002C17 488D353FD4FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 00002C1E FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 00002C20 67E308              <1>     jecxz .addMonthOffset
    96 00002C23 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 00002C24 0FB6C0              <1>     movzx eax, al
    98 00002C27 01C2                <1>     add edx, eax
    99 00002C29 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 00002C2B 0FB60D(8D040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 00002C32 FFC9                <1>     dec ecx
   103 00002C34 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 00002C36 668915(90040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 00002C3D 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 00002C44 B906000000          <1>     mov ecx, 6
   109 00002C49 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 00002C4C E88E400000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 00002C51 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 00002C58 E8643D0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 00002C5D 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 00002C64 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 00002C6B 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 00002C6E B906000000          <1>     mov ecx, 6
   118 00002C73 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002C76 E859400000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 00002C7B 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002C82 E83A3D0000          <1>     call goDriver
   122 00002C87 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002C8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002C8D B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002C8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002C90 53                  <1>     push rbx
   132 00002C91 51                  <1>     push rcx
   133 00002C92 52                  <1>     push rdx
   134 00002C93 56                  <1>     push rsi
   135 00002C94 55                  <1>     push rbp
   136                              <1> 
   137 00002C95 66C705(CA1A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002C9D 00                  <1>
   138 00002C9E 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002CA5 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002CAA 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002CAD E82D400000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002CB2 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002CB9 E8033D0000          <1>     call goDriver
   148 00002CBE 0FB705(15050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002CC5 663B05(90040000)    <1>     cmp ax, word [daysOffset]
   155 00002CCC 7466                <1>     je .exit    ;Return if equal
   156 00002CCE 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002CD3 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002CD5 668905(90040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002CDC BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002CE1 31D2                <1>     xor edx, edx
   164 00002CE3 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002CE5 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002CE7 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002CEC 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002CEE 7210                <1>     jb .foundBunch
   171 00002CF0 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002CF2 FFC1                <1>     inc ecx
   173 00002CF4 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002CF6 39DA                <1>     cmp edx, ebx
   176 00002CF8 7206                <1>     jb .foundBunch
   177 00002CFA 29DA                <1>     sub edx, ebx
   178 00002CFC FFC1                <1>     inc ecx
   179 00002CFE EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002D00 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002D03 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002D05 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002D0A 488D354CD3FFFF      <1>     lea rsi, monthsTbl
   190 00002D11 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 00002D13 FFC1                <1>     inc ecx ;Start from 1
   193 00002D15 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 00002D16 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002D19 39C2                <1>     cmp edx, eax
   196 00002D1B 7204                <1>     jb .monthFound
   197 00002D1D 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 00002D1F EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 00002D21 FFC2                <1>     inc edx
   203 00002D23 880D(8E040000)      <1>     mov byte [monthOfYear], cl
   204 00002D29 8815(8D040000)      <1>     mov byte [dayOfMonth], dl
   205 00002D2F E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 00002D34 5D                  <1>     pop rbp
   208 00002D35 5E                  <1>     pop rsi
   209 00002D36 5A                  <1>     pop rdx
   210 00002D37 59                  <1>     pop rcx
   211 00002D38 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002D39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 00002D3A 0FB705(90040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 00002D41 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 00002D46 31D2                <1>     xor edx, edx
   220 00002D48 B907000000          <1>     mov ecx, 7   
   221 00002D4D F7F1                <1>     div ecx  ;Get remainder in dl
   222 00002D4F 8815(92040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 00002D55 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002D57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 00002D58 880D(8F040000)      <1>     mov byte [years], cl    ;Save this figure
   232 00002D5E F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 00002D61 51                  <1>     push rcx
   234 00002D62 57                  <1>     push rdi
   235 00002D63 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 00002D68 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 00002D6D 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 00002D70 488D3DE7D2FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002D77 AA                  <1>     stosb   ;Store the word in rdi
   240 00002D78 5F                  <1>     pop rdi
   241 00002D79 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 00002D7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 00002D7B 53                  <1>     push rbx
   257 00002D7C 0FB61D(1A050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002D83 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002D85 89D8                <1>     mov eax, ebx
   260 00002D87 0FB61D(17050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002D8E C1E305              <1>     shl ebx, 5
   262 00002D91 09D8                <1>     or eax, ebx
   263 00002D93 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002D9A C1E30B              <1>     shl ebx, 11
   265 00002D9D 09D8                <1>     or eax, ebx
   266 00002D9F 0FB61D(8D040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002DA6 C1E310              <1>     shl ebx, 16
   268 00002DA9 09D8                <1>     or eax, ebx
   269 00002DAB 0FB61D(8E040000)    <1>     movzx ebx, byte [monthOfYear]
   270 00002DB2 C1E315              <1>     shl ebx, 21
   271 00002DB5 09D8                <1>     or eax, ebx
   272 00002DB7 0FB61D(8F040000)    <1>     movzx ebx, byte [years]
   273 00002DBE C1E319              <1>     shl ebx, 25
   274 00002DC1 09D8                <1>     or eax, ebx
   275 00002DC3 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002DC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;Int 2Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002DC5 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002DCA E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002DCF 31D2                <1>     xor edx, edx
   284 00002DD1 6689C2              <1>     mov dx, ax  ;Save time
   285 00002DD4 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002DD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002DD8 488915(19070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 00002DDF 4889D6              <1>     mov rsi, rdx
    36 00002DE2 803EFF              <1>     cmp byte [rsi], -1
    37 00002DE5 7407                <1>     je .notExt1
    38 00002DE7 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002DEE 0FB606              <1>     movzx eax, byte [rsi]
    41 00002DF1 50                  <1>     push rax    ;Push on stack the drive number
    42 00002DF2 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002DF9 E8B4020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002DFE 7306                <1>     jnc .fcbOk
    45 00002E00 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002E01 E903450000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002E06 488D3D(1D050000)    <1>     lea rdi, buffer1
    49 00002E0D E8EAE4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 00002E12 7306                <1>     jnc .fileFound
    51 00002E14 5B                  <1>     pop rbx
    52 00002E15 E9EF440000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 00002E1A 488D3D(2E060000)    <1>     lea rdi, dosffblock
    56 00002E21 57                  <1>     push rdi
    57 00002E22 E884E3FFFF          <1>     call setupFFBlock
    58 00002E27 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 00002E28 488B3D(19070000)    <1>     mov rdi, qword [workingFCB]
    61 00002E2F F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
    62 00002E36 7407                <1>     jz .notExt2
    63 00002E38 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 00002E3F 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 00002E40 85DB                <1>     test ebx, ebx
    67 00002E42 7509                <1>     jnz .notCurrentDrive
    68 00002E44 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    69 00002E4B FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 00002E4D AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 00002E4E 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 00002E51 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 00002E56 A5                  <1>     movsd
    75 00002E57 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 00002E58 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 00002E5F 488D35(59060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 00002E66 F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
    79 00002E6D 7412                <1>     jz .notExt3
    80 00002E6F B8FFFFFFFF          <1>     mov eax, -1
    81 00002E74 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002E75 FFC0                <1>     inc eax ;Make it zero
    83 00002E77 AB                  <1>     stosd
    84 00002E78 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 00002E79 0FB605(FB060000)    <1>     movzx eax, byte [searchAttr]
    86 00002E80 AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002E81 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002E83 AA                  <1>     stosb
    90 00002E84 B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002E89 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 00002E8C E975440000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002E91 488915(19070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002E98 C605(FA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 00002E9F C605(FB060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002EA6 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002EA9 803EFF              <1>     cmp byte [rsi], -1
   101 00002EAC 7514                <1>     jne .notExt
   102 00002EAE FE0D(FA060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002EB4 4881C606000000      <1>     add rsi, exFcb.attribute
   104 00002EBB AC                  <1>     lodsb   ;Get search attr in al
   105 00002EBC 8805(FB060000)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002EC2 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002EC9 31C0                <1>     xor eax, eax
   110 00002ECB AC                  <1>     lodsb   ;Get the FCB drive letter
   111 00002ECC 50                  <1>     push rax    ;Push drive letter on the stack
   112 00002ECD 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 00002ED0 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002ED1 B905000000          <1>     mov ecx, 5
   115 00002ED6 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002ED8 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002EDE 488D3D(2E060000)    <1>     lea rdi, dosffblock
   118 00002EE5 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002EE6 8F05(17040000)      <1>     pop qword [currentDTA]
   120 00002EEC E838DFFFFF          <1>     call findNextMain
   121 00002EF1 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002EF7 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 00002EFD 488B3D(19070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002F04 F607FF              <1>     test byte [rdi], -1
   125 00002F07 7407                <1>     jz .notExt2
   126 00002F09 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 00002F10 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 00002F11 881F                <1>     mov byte [rdi], bl
   130 00002F13 E9F1430000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 00002F18 488D3D(1D050000)    <1>     lea rdi, buffer1
   134 00002F1F 57                  <1>     push rdi
   135 00002F20 E88D010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 00002F25 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 00002F26 0F82DD430000        <1>     jc fcbErrExit
   138 00002F2C E8CBE3FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 00002F31 0F82D2430000        <1>     jc fcbErrExit
   140 00002F37 E8790F0000          <1>     call outerDeleteMain
   141 00002F3C 0F82C7430000        <1>     jc fcbErrExit
   142 00002F42 E9BF430000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 00002F47 488915(19070000)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 00002F4E 4889D6              <1>     mov rsi, rdx
   149 00002F51 803EFF              <1>     cmp byte [rsi], -1
   150 00002F54 7507                <1>     jne .notExt
   151 00002F56 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 00002F5D 31C0                <1>     xor eax, eax
   154 00002F5F AC                  <1>     lodsb
   155 00002F60 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 00002F61 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 00002F68 E845010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 00002F6D 723D                <1>     jc .badPop
   159 00002F6F FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002F75 8F05(25060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002F7B 58                  <1>     pop rax ;Get drive letter back
   162 00002F7C 488D3D(9D050000)    <1>     lea rdi, buffer2
   163 00002F83 E8FE000000          <1>     call fcbInitName2
   164 00002F88 7223                <1>     jc short .bad
   165 00002F8A 488B05(25060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002F91 488705(1D060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002F98 488905(25060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002F9F E8010B0000          <1>     call renameMain
   169 00002FA4 0F835C430000        <1>     jnc fcbGoodExit
   170 00002FAA EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002FAC 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002FAD E957430000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002FB2 488915(19070000)    <1>     mov qword [workingFCB], rdx
   180 00002FB9 488D3D(1D050000)    <1>     lea rdi, buffer1
   181 00002FC0 57                  <1>     push rdi
   182 00002FC1 E8EC000000          <1>     call fcbInitRoutine
   183 00002FC6 5F                  <1>     pop rdi
   184 00002FC7 0F823C430000        <1>     jc fcbErrExit
   185 00002FCD E82AE3FFFF          <1>     call getFilePathNoCanon
   186 00002FD2 0F8231430000        <1>     jc fcbErrExit
   187 00002FD8 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002FDE 488B35(19070000)    <1>     mov rsi, qword [workingFCB]
   190 00002FE5 803EFF              <1>     cmp byte [rsi], -1
   191 00002FE8 7507                <1>     jne .notExtended
   192 00002FEA 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002FF1 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002FF5 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002FF7 85D2                <1>     test edx, edx
   198 00002FF9 7402                <1>     jz .noRemainder
   199 00002FFB FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002FFD 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00003000 E901430000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00003005 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   208 0000300C 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00003010 488915(17040000)    <1>     mov qword [currentDTA], rdx
   210 00003017 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00003018 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   214 0000301F 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00003026 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000302A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 0000302B E831010000          <1>     call parseNameToFCB
   234 00003030 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00003031 E8203E0000          <1>     call getUserRegs
   236 00003036 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00003039 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;   MUST BE EXTENDED. 
   242                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243                              <1> ; Using FCB's, one can only create a volume label on a volume.
   244                              <1> ;
   245                              <1> ;Deleting a volume label can be done using delete file (fcb and hdl)
   246                              <1> ;Renaming a volume label can be done using rename file (fcb and hdl)
   247                              <1> ;Creating a volume label can be done using create file fcb only.
   248                              <1> ;
   249                              <1>     ;mov qword [workingFCB], rdx     ;Save the FCB ptr
   250                              <1>     ;cmp byte [rdx + exFcb.extSig], -1
   251                              <1>     ;jne .exitErr
   252                              <1>     ;cmp byte [rdx + exFcb.attribute], dirVolumeID
   253                              <1>     ;jne .exitErr
   254                              <1>     ;Here we search for a volume ID in the root directory.
   255                              <1>     ;If one exists, we fail the call.
   256                              <1> 
   257                              <1>     ;Here we proceed with creating a volume label
   258                              <1>     ;lea rdi, buffer1
   259                              <1>     ;push rdi
   260                              <1>     ;call fcbInitRoutine ;Build path and find file to delete
   261                              <1>     ;pop rsi ;Point rdi to the canonised path
   262                              <1>     ;jc fcbErrExit
   263                              <1>     ;mov rsi, rdi    ;Pass argument in rsi. rsi, rdi preserved
   264                              <1>     ;call checkPathspecOK    ;If the path has wildcards, fail!
   265                              <1>     ;jc .exitErr
   266                              <1>     ;call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   267                              <1>     ;lea rbx, scratchSFT ;Set the working SFT to the scratch in the SDA
   268                              <1>     ;mov qword [workingSFT], rbx
   269                              <1>     ;movzx eax, byte [searchAttr]   ;Get the search attribute in al
   270                              <1>     ;call createMain.validAttr   ;We have a "valid" attrib for our purposes.
   271                              <1>     ;jc .exitErr
   272                              <1>     ;call closeMain      ;Flush the updated disk label from the buffer to the disk
   273                              <1>     ;jnc fcbGoodExit     ;We require no copying into the FCB, so we ok!
   274                              <1> ;.exitErr:
   275 0000303A B805000000          <1>     mov eax, errAccDen
   276 0000303F E9C5420000          <1>     jmp fcbErrExit
   277                              <1> 
   278                              <1> ;=================================================================
   279                              <1> ;=================================================================
   280                              <1> ;These functions will be marked as reserved for future expansion.
   281                              <1> ; One idea will be to create a handle based record IO interface.
   282                              <1> ; We will be able to do IO on records of predefined length 
   283                              <1> ; on a file handle, thus removing the need for an FCB but still
   284                              <1> ; maintaining the usefulness of record based IO.
   285                              <1> ;=================================================================
   286                              <1> ;=================================================================
   287                              <1> openFileFCB:       ;ah = 0Fh
   288                              <1> closeFileFCB:      ;ah = 10h
   289                              <1> sequentialReadFCB: ;ah = 14h
   290                              <1> sequentialWriteFCB:;ah = 15h
   291                              <1> randomReadFCB:     ;ah = 21h
   292                              <1> randomWriteFCB:    ;ah = 22h
   293                              <1> setRelRecordFCB:   ;ah = 24h
   294                              <1> randBlockReadFCB:  ;ah = 27h
   295                              <1> randBlockWriteFCB: ;ah = 28h
   296 00003044 B805000000          <1>     mov eax, errAccDen
   297 00003049 E9BB420000          <1>     jmp fcbErrExit
   298                              <1> 
   299                              <1> 
   300                              <1> ;--------------------------------
   301                              <1> ;  Common FCB related Routines  :
   302                              <1> ;--------------------------------
   303                              <1> fcbCheckDriveType:
   304                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   305                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   306                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   307                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   308                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   309                              <1> ;If a net CDS, automatic fail (for now).
   310 0000304E C605(F8060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   311 00003055 51                  <1>     push rcx
   312 00003056 57                  <1>     push rdi
   313 00003057 55                  <1>     push rbp
   314 00003058 9C                  <1>     pushfq
   315 00003059 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   316 00003060 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   317 00003062 E8623D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   318 00003067 7218                <1>     jc .exit
   319                              <1>     ;rdi has cds ptr now
   320 00003069 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   321 0000306D E8E4D9FFFF          <1>     call getFATtype
   322 00003072 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   323 00003078 7707                <1>     ja .exit
   324                              <1> .okToGo:
   325 0000307A C605(F8060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   326                              <1> .exit:
   327 00003081 9D                  <1>     popfq
   328 00003082 5D                  <1>     pop rbp
   329 00003083 5F                  <1>     pop rdi
   330 00003084 59                  <1>     pop rcx
   331                              <1>     return
    13                              <2> %%_ret:
    14 00003085 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> fcbInitName2:
   333                              <1> ;Must be called after fcbInitRoutine has been run once
   334                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   335                              <1> ;       rdx -> UserFCB
   336                              <1> ;       eax[0] = Drive number (0 based)
   337 00003086 55                  <1>     push rbp
   338 00003087 4889E5              <1>     mov rbp, rsp
   339 0000308A 4881EC0F000000      <1>     sub rsp, 15
   340 00003091 57                  <1>     push rdi
   341 00003092 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   342 00003096 4889D6              <1>     mov rsi, rdx
   343 00003099 F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
   344 000030A0 7407                <1>     jz .notExtended
   345 000030A2 4881C607000000      <1>     add rsi, exFcb.driveNum
   346                              <1> .notExtended:
   347                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   348 000030A9 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   349 000030B0 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   350                              <1> fcbInitRoutine:
   351                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   352                              <1> ;Input: rdx -> User FCB
   353                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   354 000030B2 55                  <1>     push rbp
   355 000030B3 4889E5              <1>     mov rbp, rsp
   356 000030B6 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   357                              <1>     ;This space is used to store X:FILENAME.EXT,0
   358 000030BD 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   359 000030BE 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   360 000030C2 C605(FA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   361 000030C9 C605(FB060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   362 000030D0 E879000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   363 000030D5 7410                <1>     jz .notExtended
   364 000030D7 C605(FA060000)FF    <1>     mov byte [extFCBFlag], -1
   365 000030DE 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   366 000030E1 8805(FB060000)      <1>     mov byte [searchAttr], al
   367                              <1> .notExtended:
   368 000030E7 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   369                              <1> .rename2EP:
   370                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   371 000030E8 E88D3D0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   372 000030ED 724E                <1>     jc .badDisk
   373 000030EF E851000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   374                              <1>     ;!!!! VOL ID CHECK BELOW !!!!
   375 000030F4 803D(FB060000)08    <1>     cmp byte [searchAttr], dirVolumeID  ;Are we initialising for a volume ID?
   376 000030FB 7506                <1>     jne .notVolumeSearch
   377 000030FD C6075C              <1>     mov byte [rdi], "\" ;If so, indicate that we are working in the root dir.
   378 00003100 48FFC7              <1>     inc rdi ;Go to the next char space
   379                              <1> .notVolumeSearch:
   380 00003103 488D1D52D3FFFF      <1>     lea rbx, asciiCharProperties
   381 0000310A B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   382 0000310F 56                  <1>     push rsi    ;rsi -> fcb.filename
   383                              <1> .nameCharCheck:
   384 00003110 AC                  <1>     lodsb   ;Get the char in al
   385 00003111 D7                  <1>     xlatb   ;Get the char signature in al
   386 00003112 A808                <1>     test al, 8  ;Make sure it is a valid FCB filename char
   387 00003114 7427                <1>     jz .badDisk
   388 00003116 FFC9                <1>     dec ecx
   389 00003118 75F6                <1>     jnz .nameCharCheck
   390 0000311A 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   391 0000311B 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   392 0000311E E848E0FFFF          <1>     call FCBToAsciiz
   393 00003123 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   394 00003124 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   395 00003127 7414                <1>     je .badDisk
   396 00003129 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   397 0000312D 55                  <1>     push rbp
   398 0000312E E891E1FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   399 00003133 5D                  <1>     pop rbp
   400 00003134 7207                <1>     jc .badDisk
   401 00003136 E813FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   402 0000313B EB03                <1>     jmp short .jiggleStack  ;Skip the error
   403                              <1> .badDisk:
   404 0000313D B003                <1>     mov al, errPnf  ;DOS does this... so will I
   405 0000313F F9                  <1>     stc
   406                              <1> .jiggleStack:
   407 00003140 4889EC              <1>     mov rsp, rbp
   408 00003143 5D                  <1>     pop rbp
   409                              <1> .exit:
   410                              <1>     return
    13                              <2> %%_ret:
    14 00003144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> storeZeroBasedDriveNumber:
   413                              <1> ;Input: al => 0 based drive letter
   414                              <1> ;       rdi -> Points to buffer to store the X: in
   415 00003145 FEC0                <1>     inc al
   416                              <1> storeOneBasedDriveNumber:
   417                              <1> ;Input: al => 1 based drive letter
   418                              <1> ;       rdi -> Points to buffer to store the X: in
   419 00003147 0440                <1>     add al, "@"
   420 00003149 B43A                <1>     mov ah, ":"
   421 0000314B 66AB                <1>     stosw
   422                              <1>     return
    13                              <2> %%_ret:
    14 0000314D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> isFCBExtended:
   425                              <1> ;Input: rdx = FCB ptr
   426                              <1> ;Output: rsi -> Drive letter of FCB
   427                              <1> ;        rdx -> FCB first byte
   428                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   429 0000314E 4889D6              <1>     mov rsi, rdx
   430 00003151 803EFF              <1>     cmp byte [rsi], -1
   431 00003154 7507                <1>     jne .notExtended
   432 00003156 4881C607000000      <1>     add rsi, exFcb.driveNum
   433                              <1> .notExtended:
   434 0000315D 4839F2              <1>     cmp rdx, rsi
   435                              <1>     return
    13                              <2> %%_ret:
    14 00003160 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> parseNameToFCB:
   438                              <1> ;rsi points to a command line to parse
   439                              <1> ;rdi points to a future unopened FCB
   440                              <1> ;al = parsing control bits. 
   441                              <1> ; al[0] = If set, leading filename separators are scanned off
   442                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   443                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   444                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   445                              <1> ;
   446                              <1> ;Separators include : . ; , = + TAB SPACE
   447                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   448                              <1> 
   449 00003161 C605(8C040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   450 00003168 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   451 0000316A A802                <1>     test al, 2  ;Set drive letter>
   452 0000316C 7402                <1>     jz .skipDriveLetter
   453 0000316E 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   454                              <1> .skipDriveLetter:
   455 00003170 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   456 00003173 B908000000          <1>     mov ecx, 8  ;Copy Filename
   457 00003178 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   458 0000317A 93                  <1>     xchg eax, ebx
   459 0000317B B020                <1>     mov al, " " ;Clear the field
   460 0000317D 7405                <1>     jz .clearFilenameField
   461 0000317F 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   462 00003182 31C9                <1>     xor ecx, ecx
   463                              <1> .clearFilenameField:
   464 00003184 F3AA                <1>     rep stosb
   465 00003186 B903000000          <1>     mov ecx, 3
   466 0000318B F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   467 0000318E 7405                <1>     jz .clearExtensionField
   468 00003190 4801CF              <1>     add rdi, rcx
   469 00003193 31C9                <1>     xor ecx, ecx
   470                              <1> .clearExtensionField:
   471 00003195 F3AA                <1>     rep stosb
   472 00003197 91                  <1>     xchg eax, ecx
   473 00003198 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   474 00003199 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   475 000031A0 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   476 000031A3 740F                <1>     jz .dontScanOff
   477 000031A5 E83E3F0000          <1>     call skipSpacesAndTabs
   478 000031AA E8453F0000          <1>     call isCharDelimType
   479 000031AF 7508                <1>     jnz .skipIfDelim
   480 000031B1 48FFC6              <1>     inc rsi
   481                              <1> .dontScanOff:
   482 000031B4 E82F3F0000          <1>     call skipSpacesAndTabs  ;Skip a char
   483                              <1> .skipIfDelim:
   484 000031B9 E8C43D0000          <1>     call uppercaseCharAtPtr 
   485 000031BE 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   486 000031C0 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   487 000031C3 7519                <1>     jne .skipSettingDriveLetter
   488 000031C5 48FFC6              <1>     inc rsi ;Goto next char
   489 000031C8 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   490 000031CA 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   491 000031CC 50                  <1>     push rax    ;Save the 1 based drive letter
   492 000031CD E8A83C0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   493 000031D2 58                  <1>     pop rax
   494 000031D3 7302                <1>     jnc .validDriveLetter
   495                              <1> .invalidDriveLetter:
   496 000031D5 B2FF                <1>     mov dl, -1
   497                              <1> .validDriveLetter:
   498 000031D7 AA                  <1>     stosb
   499 000031D8 48FFC6              <1>     inc rsi ;Align pointers...
   500 000031DB 48FFCF              <1>     dec rdi 
   501                              <1> .skipSettingDriveLetter:
   502 000031DE 48FFCE              <1>     dec rsi
   503 000031E1 48FFC7              <1>     inc rdi
   504                              <1>     
   505                              <1> getFCBFilename:
   506                              <1> ;Input: rsi points to first char of filename
   507                              <1> ;       rdi points to storage buffer for filename
   508                              <1> ;       dl contains the signature if drive invalid
   509                              <1> ;Output:
   510                              <1> ;       Fields filled
   511                              <1> ;       al = Return signature
   512 000031E4 B908000000          <1>     mov ecx, 8
   513 000031E9 E815000000          <1>     call getFCBNameField
   514 000031EE 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   515 000031F1 750D                <1>     jne .noExt
   516 000031F3 B903000000          <1>     mov ecx, 3
   517 000031F8 48FFC6              <1>     inc rsi ;Skip this char
   518 000031FB E814000000          <1>     call forceFCBNameField
   519                              <1> .noExt:
   520 00003200 88D0                <1>     mov al, dl  ;Store the return signature
   521                              <1>     return
    13                              <2> %%_ret:
    14 00003202 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> getFCBNameField:
   524                              <1> ;Checks if the field is appropriate before copying it
   525 00003203 E87A3D0000          <1>     call uppercaseCharAtPtr
   526 00003208 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   527 0000320A 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   528 0000320D 48FFCE              <1>     dec rsi ;Point to previous char
   529                              <1>     return
    13                              <2> %%_ret:
    14 00003210 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> .okName:
   531 00003211 48FFCE              <1>     dec rsi ;Go back now a char
   532                              <1> forceFCBNameField:
   533                              <1> ;Forcefully copies the name from rsi to rdi
   534 00003214 E8693D0000          <1>     call uppercaseCharAtPtr
   535 00003219 7226                <1>     jc .terminatingSpace
   536 0000321B 750D                <1>     jnz .notSep
   537 0000321D F605(8C040000)FF    <1>     test byte [fcbSpaceOk], -1
   538 00003224 741B                <1>     jz .terminatingSpace
   539 00003226 3C20                <1>     cmp al, " "
   540 00003228 7517                <1>     jne .terminatingSpace
   541                              <1> .notSep:
   542 0000322A 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   543 0000322D FFC9                <1>     dec ecx
   544 0000322F 3C2A                <1>     cmp al, "*" ;Big wildcard?
   545 00003231 7504                <1>     jne .notBigWildcard
   546 00003233 B03F                <1>     mov al, "?"
   547 00003235 F3AA                <1>     rep stosb
   548                              <1> .notBigWildcard:
   549 00003237 AA                  <1>     stosb   ;Stores the uppercased char
   550 00003238 3C3F                <1>     cmp al, "?"
   551 0000323A 75D8                <1>     jne forceFCBNameField
   552 0000323C 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   553 0000323F EBD3                <1>     jmp short forceFCBNameField
   554                              <1> .terminatingSpace:
   555 00003241 B020                <1>     mov al, " "
   556 00003243 AA                  <1>     stosb
   557 00003244 48FFCE              <1>     dec rsi ;Point to this trailing space
   558                              <1>     return
    13                              <2> %%_ret:
    14 00003247 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003248 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003249 488D0D2F0E0000      <1>     lea rcx, createMain
    12 00003250 C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00003257 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003259 BB16000000          <1>     mov ebx, dirInclusive
    21 0000325E F605(01070000)FF    <1>     test byte [dosInvoke], -1
    22 00003265 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003268 880D(FB060000)      <1>     mov byte [searchAttr], cl
    24 0000326E 488D0D050D0000      <1>     lea rcx, openMain  
    25 00003275 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003276 4889D6              <1>     mov rsi, rdx
    28 00003279 E89A3D0000          <1>     call checkPathspecOK
    29 0000327E 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00003280 58                  <1>     pop rax
    32 00003281 B803000000          <1>     mov eax, errPnf
    33 00003286 E99E400000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 0000328B E84E400000          <1>     call dosCrit1Enter
    36 00003290 E865190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00003295 E84E400000          <1>     call dosCrit1Exit
    38 0000329A 0F82B8000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 000032A0 E88D180000          <1>     call setCurrentSFT
    41 000032A5 66891D(39070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 000032AC E8121A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 000032B1 0F82A1000000        <1>     jc .exitBad
    44 000032B7 66891D(3B070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 000032BE 48893D(29070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 000032C5 0FB71D(39070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 000032CC 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 000032CE 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 000032D1 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 000032D8 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 000032D9 E867DFFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 000032DE 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 000032DF 488D05940C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 000032E6 488B35(31070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 000032ED 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 000032EF 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 000032F2 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 000032F4 F605(04070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 000032FB 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 000032FD 58                  <1>     pop rax
    68 000032FE B802000000          <1>     mov eax, errFnf
    69 00003303 E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00003308 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 0000330A 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 0000330D 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 0000330E 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 00003310 A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00003312 7407                <1>     jz .callProc
    79 00003314 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00003316 B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 0000331B 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 00003321 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00003327 51                  <1>     push rcx    ;Save the device word 
    85 00003328 FFD3                <1>     call rbx    ;Enter with open mode in 
    86 0000332A 59                  <1>     pop rcx
    87 0000332B 488B35(31070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00003332 7228                <1>     jc .exitBad2
    89 00003334 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00003339 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 0000333D 0FB705(3B070000)    <1>     movzx eax, word [currentHdl]
    92 00003344 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 0000334A 66C705(39070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
    93 00003352 FF                  <1>
    94 00003353 E9C33F0000          <1>     jmp extGoodExit ;Save ax and return OK
    95                              <1> .exitBad:
    96 00003358 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    97 00003359 5B                  <1>     pop rbx ;Pop the word from the stack
    98 0000335A EB16                <1>     jmp short .exitBadCommon
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 0000335C 488B35(29070000)    <1>     mov rsi, qword [curHdlPtr]
   102 00003363 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00003366 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
   104 0000336D 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105                              <1> .exitBadCommon:
   106 00003372 66C705(39070000)FF- <1>     mov word [currentNdx], -1
   106 0000337A FF                  <1>
   107 0000337B E9A93F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   108                              <1> 
   109                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   110                              <1> ;Input: bx = file handle to close
   111 00003380 E854190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   112 00003385 0F829E3F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   113 0000338B E8A2170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   114                              <1>     ;Check count to see if we need to check share mode
   115 00003390 31C0                <1>     xor eax, eax    ;Preset ax to 0
   116 00003392 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   117 00003397 7406                <1>     je .skipShareCheck
   118                              <1>     ;Now check sharing mode
   119 00003399 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   120 0000339D 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   121                              <1> .skipShareCheck:
   122 0000339F 50                  <1>     push rax    ;Save the share mode on stack
   123 000033A0 E8B10F0000          <1>     call closeMain  ;Call close main!
   124 000033A5 58                  <1>     pop rax 
   125 000033A6 0F827D3F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   126 000033AC 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   127 000033AE 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   128 000033B0 E8D9180000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   129 000033B5 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   130                              <1> .exitOk:
   131 000033B8 31C0                <1>     xor eax, eax    ;Return value
   132 000033BA E95C3F0000          <1>     jmp extGoodExit
   133                              <1> 
   134                              <1> readFileHdl:       ;ah = 3Fh, handle function
   135 000033BF 488D350D100000      <1>     lea rsi, readBytes
   136                              <1> .common:
   137 000033C6 E80E190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   138 000033CB 0F82583F0000        <1>     jc extErrExit   ;Error code in al and exit
   139 000033D1 E85C170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   140 000033D6 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   141 000033D8 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   142 000033DE 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   143 000033E5 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   144 000033E7 8F05(17040000)      <1>     pop qword [currentDTA]
   145 000033ED 0F82363F0000        <1>     jc extErrExit   ;Error code in al and exit
   146 000033F3 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   147 000033F5 E9183F0000          <1>     jmp extGoodExit2    ;and exit!
   148                              <1> 
   149                              <1> writeFileHdl:      ;ah = 40h, handle function
   150 000033FA 488D3512130000      <1>     lea rsi, writeBytes
   151 00003401 E9C0FFFFFF          <1>     jmp readFileHdl.common
   152                              <1> 
   153                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   154                              <1> ;Here don't allow malformed chars unless it is a network CDS
   155                              <1> ;Allows deleting volume labels.
   156 00003406 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   157 0000340B F605(01070000)FF    <1>     test byte [dosInvoke], -1
   158 00003412 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   159 00003415 880D(FB060000)      <1>     mov byte [searchAttr], cl
   160 0000341B 4889D6              <1>     mov rsi, rdx
   161 0000341E E8F53B0000          <1>     call checkPathspecOK
   162 00003423 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   163 00003425 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   164                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   165 00003427 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   166 0000342E 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   167                              <1> .badPath:
   168 00003430 B803000000          <1>     mov eax, errPnf
   169 00003435 E9EF3E0000          <1>     jmp extErrExit
   170                              <1> .pathOk:
   171 0000343A 488D3D(1D050000)    <1>     lea rdi, buffer1
   172 00003441 52                  <1>     push rdx
   173 00003442 E8FEDDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   174 00003447 5A                  <1>     pop rdx
   175 00003448 0F82DB3E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   176                              <1>     ;In the case of a wildcard, recall this will return the first file
   177 0000344E 803D(03070000)FF    <1>     cmp byte [fileExist], -1
   178 00003455 0F85CE3E0000        <1>     jnz extErrExit
   179 0000345B E8550A0000          <1>     call outerDeleteMain
   180 00003460 0F82C33E0000        <1>     jc extErrExit
   181 00003466 E9B03E0000          <1>     jmp extGoodExit
   182                              <1> 
   183                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   184                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   185 0000346B E869180000          <1>     call getSFTPtr
   186 00003470 0F82B33E0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   187 00003476 3C03                <1>     cmp al, 3
   188 00003478 720A                <1>     jb .validFunction
   189 0000347A B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   190 0000347F E9A53E0000          <1>     jmp extErrExit
   191                              <1> .validFunction:
   192 00003484 3C01                <1>     cmp al, 1
   193 00003486 7718                <1>     ja .seekend
   194 00003488 7203                <1>     jb .seekset
   195                              <1> ;Here we are at seekcur, seek from current (signed)
   196 0000348A 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   197                              <1> .seekset:
   198                              <1> ;Seek from the start (unsigned)
   199 0000348D 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   200 00003490 E8C1390000          <1>     call getUserRegs    ;Get user regs in rsi
   201 00003495 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   202                              <1> .seekExit:
   203 00003498 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   204 0000349B E9723E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   205                              <1> .seekend:
   206                              <1> ;Here we are at seekend, seek from end (signed)
   207 000034A0 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   208 000034A6 7505                <1>     jnz .netCheck
   209                              <1> .proceedDisk:
   210 000034A8 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   211 000034AB EBE0                <1>     jmp short .seekset
   212                              <1> .netCheck:
   213 000034AD 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   214 000034B3 75F3                <1>     jnz .proceedDisk
   215 000034B5 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   216                              <1>     ;Check it's share mode
   217 000034B9 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   218 000034BE 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   219 000034C3 7407                <1>     je .netSeek
   220 000034C5 3D30000000          <1>     cmp eax, denyReadShare
   221 000034CA 75DC                <1>     jne .proceedDisk
   222                              <1> .netSeek:
   223 000034CC B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   224 000034D1 CD2F                <1>     int 2Fh
   225 000034D3 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   226 000034D5 E94F3E0000          <1>     jmp extErrExit
   227                              <1> 
   228                              <1> 
   229                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   230 000034DA 3C01                <1>     cmp al, 1
   231 000034DC 761F                <1>     jbe .subFuncOk
   232 000034DE B801000000          <1>     mov eax, errInvFnc
   233                              <1> .chmodError:
   234                              <1> ;Call with ax = errorcode
   235 000034E3 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   236 000034EA C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   237 000034F1 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   238 000034F8 E92C3E0000          <1>     jmp extErrExit
   239                              <1> .subFuncOk:
   240 000034FD 4889D6              <1>     mov rsi, rdx
   241 00003500 89C3                <1>     mov ebx, eax    ;Store function code in bl
   242 00003502 53                  <1>     push rbx
   243 00003503 51                  <1>     push rcx
   244 00003504 E80F3B0000          <1>     call checkPathspecOK
   245 00003509 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   246                              <1> .badPath:
   247 0000350B 59                  <1>     pop rcx
   248 0000350C 5B                  <1>     pop rbx
   249 0000350D B803000000          <1>     mov eax, errPnf
   250 00003512 EBCF                <1>     jmp short .chmodError
   251                              <1> .pathOk:
   252 00003514 E8FD3B0000          <1>     call checkPathNet 
   253 00003519 74F0                <1>     jz .badPath ;Or Net paths
   254 0000351B E88C3B0000          <1>     call scanPathWC
   255 00003520 72E9                <1>     jc .badPath ;Dont allow wildcards
   256 00003522 488D3D(1D050000)    <1>     lea rdi, buffer1
   257 00003529 52                  <1>     push rdx
   258 0000352A C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   259 00003531 E80FDDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   260 00003536 5A                  <1>     pop rdx
   261 00003537 59                  <1>     pop rcx
   262 00003538 5B                  <1>     pop rbx
   263 00003539 0F82EA3D0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   264                              <1>     ;In the case of a wildcard, recall this will return the first file
   265 0000353F 803D(03070000)FF    <1>     cmp byte [fileExist], -1
   266 00003546 759B                <1>     jnz .chmodError
   267                              <1> 
   268 00003548 E87C380000          <1>     call testCDSNet
   269 0000354D 730C                <1>     jnc .notNet
   270 0000354F 750A                <1>     jnz .notNet ;This type of net ok
   271 00003551 B805000000          <1>     mov eax, errAccDen
   272 00003556 E9CE3D0000          <1>     jmp extErrExit
   273                              <1> .notNet:
   274 0000355B 84DB                <1>     test bl, bl
   275 0000355D 7526                <1>     jnz .setAttribs
   276                              <1>     ;Get attribs here
   277 0000355F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   278 00003565 7412                <1>     jz .getDiskAttribs
   279 00003567 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   280 0000356C CD2F                <1>     int 2Fh
   281 0000356E 0F82B53D0000        <1>     jc extErrExit
   282 00003574 E9A23D0000          <1>     jmp extGoodExit
   283                              <1> .getDiskAttribs:
   284 00003579 0FB605(64060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   285 00003580 E9963D0000          <1>     jmp extGoodExit
   286                              <1> 
   287                              <1> .setAttribs:
   288                              <1>     ;Set attribs here
   289 00003585 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 0000358B 7417                <1>     jz .setDiskAttribs
   291 0000358D 0FB7C9              <1>     movzx ecx, cx
   292 00003590 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   293 00003591 B80E110000          <1>     mov eax, 110Eh
   294 00003596 CD2F                <1>     int 2Fh
   295 00003598 59                  <1>     pop rcx
   296 00003599 0F828A3D0000        <1>     jc extErrExit
   297 0000359F E9773D0000          <1>     jmp extGoodExit
   298                              <1> .setDiskAttribs:
   299 000035A4 E898080000          <1>     call checkNoOpenHandlesForShareAction
   300 000035A9 730A                <1>     jnc .okToSet
   301 000035AB B820000000          <1>     mov eax, errShrVio
   302 000035B0 E9743D0000          <1>     jmp extErrExit
   303                              <1> .okToSet:
   304 000035B5 E8243D0000          <1>     call dosCrit1Enter
   305 000035BA E8BAEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   306 000035BF 7232                <1>     jc .setErrorNoFlush
   307 000035C1 F6C118              <1>     test cl, volLabelFile | directoryFile
   308 000035C4 740A                <1>     jz .set
   309 000035C6 B805000000          <1>     mov eax, errAccDen
   310 000035CB E923000000          <1>     jmp .setErrorNoFlush
   311                              <1> .set:
   312 000035D0 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   313 000035D3 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   314 000035D6 08E9                <1>     or cl, ch
   315 000035D8 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   316 000035DB E81DD2FFFF          <1>     call writeThroughBuffers
   317 000035E0 720C                <1>     jc .setError
   318 000035E2 E8013D0000          <1>     call dosCrit1Exit
   319 000035E7 31C0                <1>     xor eax, eax
   320 000035E9 E92D3D0000          <1>     jmp extGoodExit
   321                              <1> .setError:
   322 000035EE E8DCD1FFFF          <1>     call cancelWriteThroughBuffers
   323                              <1> .setErrorNoFlush:
   324 000035F3 E8F03C0000          <1>     call dosCrit1Exit
   325 000035F8 E92C3D0000          <1>     jmp extErrExit
   326                              <1> 
   327                              <1> duplicateHandle:   ;ah = 45h, handle function
   328                              <1> ;Input: bx = Handle to duplicate
   329                              <1> ;Output: If ok then ax = New handle
   330 000035FD 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   331 00003600 E8BE160000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   332                              <1> .duplicateCommon:
   333 00003605 0F821E3D0000        <1>     jc extErrExit   ;Exit if no space
   334 0000360B 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   335 0000360E 93                  <1>     xchg eax, ebx
   336 0000360F E8C5160000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   337 00003614 0F820F3D0000        <1>     jc extErrExit
   338 0000361A 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   339 0000361D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   340 00003623 7505                <1>     jnz .netFile
   341 00003625 E8E2090000          <1>     call openDriverMux
   342                              <1> .netFile:
   343 0000362A E85F160000          <1>     call getJFTPtr
   344 0000362F 8A1F                <1>     mov bl, byte [rdi]
   345 00003631 881E                <1>     mov byte [rsi], bl
   346 00003633 E9E33C0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   347                              <1> 
   348                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   349                              <1> ;Input: bx = Handle to duplicate
   350                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   351                              <1>     ;First we close cx if it exists
   352 00003638 0FB7C9              <1>     movzx ecx, cx
   353 0000363B 53                  <1>     push rbx
   354 0000363C 51                  <1>     push rcx
   355 0000363D 89CB                <1>     mov ebx, ecx
   356 0000363F E83CFDFFFF          <1>     call closeFileHdl   ;Close handle 
   357 00003644 5B                  <1>     pop rbx
   358 00003645 58                  <1>     pop rax
   359 00003646 E843160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   360 0000364B EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   361                              <1> 
   362                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   363                              <1> ;Input: cx = Search Attributes, cl only used
   364                              <1> ;       rdx = Ptr to path to file to look for
   365                              <1> ;       al = Document as needing to be 0 for now
   366                              <1> ;Return:
   367                              <1> ;Data in the DTA or error through AX with CF=CY
   368                              <1> ;CAVEATS!
   369                              <1> ;DTA:attribFnd = 40h => Char dev
   370                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   371 0000364D 880D(FB060000)      <1>     mov byte [searchAttr], cl
   372 00003653 4889D6              <1>     mov rsi, rdx
   373 00003656 E8BD390000          <1>     call checkPathspecOK
   374 0000365B 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   375 0000365D 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   376                              <1> .badPath:
   377 0000365F B803000000          <1>     mov eax, errPnf
   378 00003664 E9C03C0000          <1>     jmp extErrExit
   379                              <1> .pathspecOk:
   380 00003669 FF35(17040000)      <1>     push qword [currentDTA]
   381 0000366F 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   382 00003676 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   383 0000367D 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   384 00003684 E8BCDBFFFF          <1>     call getFilePath
   385                              <1> .findfileExit:
   386 00003689 8F05(17040000)      <1>     pop qword [currentDTA]
   387 0000368F 0F82943C0000        <1>     jc extErrExit
   388 00003695 488D3D(2E060000)    <1>     lea rdi, dosffblock
   389 0000369C 57                  <1>     push rdi
   390 0000369D E809DBFFFF          <1>     call setupFFBlock
   391 000036A2 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   392 000036A3 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   393 000036AA B92B000000          <1>     mov ecx, ffBlock_size
   394 000036AF F3A4                <1>     rep movsb   ;Copy the whole block. 
   395                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   396 000036B1 31C0                <1>     xor eax, eax    ;Return value
   397 000036B3 E9633C0000          <1>     jmp extGoodExit ;Exit well
   398                              <1> 
   399                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   400                              <1> ;Input: DTA has the find first block from the previous search
   401 000036B8 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   402 000036BF 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   403 000036C6 B92B000000          <1>     mov ecx, ffBlock_size
   404 000036CB F3A4                <1>     rep movsb
   405 000036CD FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   406 000036D3 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   407 000036DA 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   408 000036E1 E843D7FFFF          <1>     call findNextMain
   409 000036E6 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   410                              <1> 
   411                              <1> renameFile:        ;ah = 56h
   412                              <1> ;Input: rdx -> Filespec to rename
   413                              <1> ;       rdi -> New filespec
   414                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   415 000036E8 4889D6              <1>     mov rsi, rdx
   416 000036EB BB16000000          <1>     mov ebx, dirInclusive
   417 000036F0 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   418 000036F7 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   419 000036FA 880D(FB060000)      <1>     mov byte [searchAttr], cl
   420                              <1>     ;Step 0, verify both paths provided are valid
   421 00003700 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   422 00003705 7249                <1>     jc .pnfError
   423 00003707 56                  <1>     push rsi
   424 00003708 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   425 0000370B E84A000000          <1>     call .renamePathCheck
   426 00003710 5E                  <1>     pop rsi
   427 00003711 723D                <1>     jc .pnfError
   428                              <1>     ;Now we canonicalise the filenames to make life easy
   429 00003713 56                  <1>     push rsi
   430 00003714 4889FE              <1>     mov rsi, rdi
   431 00003717 488D3D(9D050000)    <1>     lea rdi, buffer2
   432 0000371E E8A1DBFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   433 00003723 5E                  <1>     pop rsi
   434 00003724 722A                <1>     jc .pnfError
   435                              <1>     ;Now test if first file exists.
   436 00003726 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   437 0000372C 8F05(25060000)      <1>     pop qword [fname2Ptr]
   438 00003732 488D3D(1D050000)    <1>     lea rdi, buffer1
   439 00003739 E886DBFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   440 0000373E 7210                <1>     jc .pnfError 
   441 00003740 E860030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   442 00003745 0F82DE3B0000        <1>     jc extErrExit
   443 0000374B E9CB3B0000          <1>     jmp extGoodExit
   444                              <1> .pnfError:
   445 00003750 B803000000          <1>     mov eax, errPnf
   446 00003755 E9CF3B0000          <1>     jmp extErrExit
   447                              <1> .renamePathCheck:
   448                              <1> ;Checks if the pathspec in rsi is OK
   449 0000375A 56                  <1>     push rsi
   450 0000375B 57                  <1>     push rdi
   451 0000375C E8B7380000          <1>     call checkPathspecOK
   452 00003761 5F                  <1>     pop rdi
   453 00003762 5E                  <1>     pop rsi
   454 00003763 730D                <1>     jnc .pathOk     ;Path ok 
   455 00003765 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   456                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   457 00003767 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   458 0000376E 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   459                              <1> .badPath:
   460 00003770 F9                  <1>     stc
   461                              <1>     return
    13                              <2> %%_ret:
    14 00003771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> .pathOk:
   463 00003772 F8                  <1>     clc
   464                              <1>     return
    13                              <2> %%_ret:
    14 00003773 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> getSetFileDateTime:;ah = 57h
   467 00003774 3C01                <1>     cmp al, 1
   468 00003776 760A                <1>     jbe .oksubfun
   469 00003778 B801000000          <1>     mov eax, errInvFnc
   470 0000377D E9A73B0000          <1>     jmp extErrExit
   471                              <1> .oksubfun:
   472 00003782 E852150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   473 00003787 0F829C3B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   474 0000378D 3C01                <1>     cmp al, 1
   475 0000378F 741C                <1>     je .setTimeDate
   476                              <1>     ;Here we get the Time/Date
   477 00003791 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   478 00003795 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   479 00003799 E8B8360000          <1>     call getUserRegs
   480 0000379E 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   481 000037A2 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   482 000037A6 31C0                <1>     xor eax, eax
   483 000037A8 E96E3B0000          <1>     jmp extGoodExit
   484                              <1> .setTimeDate:
   485                              <1>     ;Here we set the Time/Date
   486 000037AD 66894F13            <1>     mov word [rdi + sft.wTime], cx
   487 000037B1 66895715            <1>     mov word [rdi + sft.wDate], dx
   488 000037B5 31C0                <1>     xor eax, eax
   489 000037B7 E95F3B0000          <1>     jmp extGoodExit
   490                              <1> 
   491                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   492                              <1> ;Uses the clock to do it's bidding
   493                              <1> ;cx = file attribute 
   494                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   495                              <1> ;       filename
   496 000037BC 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   497 000037C1 740A                <1>     jz .validAttribs
   498 000037C3 B805000000          <1>     mov eax, errAccDen
   499 000037C8 E95C3B0000          <1>     jmp extErrExit
   500                              <1> .validAttribs:
   501 000037CD 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   502 000037D1 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   503 000037D4 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   504 000037D9 31C0                <1>     xor eax, eax
   505 000037DB 4889D7              <1>     mov rdi, rdx
   506 000037DE F2AE                <1>     repne scasb
   507 000037E0 85C9                <1>     test ecx, ecx
   508 000037E2 750A                <1>     jnz .nullFnd
   509                              <1>     ;Bad path
   510 000037E4 B803000000          <1>     mov eax, errPnf
   511 000037E9 E93B3B0000          <1>     jmp extErrExit
   512                              <1> .nullFnd:
   513 000037EE 48FFCF              <1>     dec rdi
   514 000037F1 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   515 000037F5 E87D370000          <1>     call swapPathSeparator
   516 000037FA 7403                <1>     jz .pathsepFnd
   517                              <1>     ;If no pathsep found, force one at rdi
   518 000037FC B05C                <1>     mov al, "\"
   519 000037FE AA                  <1>     stosb
   520                              <1> .pathsepFnd:
   521 000037FF 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   522                              <1> .fileCreateLoop:
   523 00003802 55                  <1>     push rbp
   524 00003803 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   525 00003808 5D                  <1>     pop rbp
   526 00003809 0FB7C1              <1>     movzx eax, cx
   527 0000380C 0FB7D2              <1>     movzx edx, dx
   528 0000380F C1E010              <1>     shl eax, 10h
   529 00003812 09D0                <1>     or eax, edx  ;Add the bits of dx too
   530 00003814 E831000000          <1>     call .writeNybbles
   531 00003819 31C0                <1>     xor eax, eax
   532 0000381B AA                  <1>     stosb   ;Store terminating null
   533 0000381C 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   534 0000381F 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   535 00003822 55                  <1>     push rbp
   536 00003823 E85C000000          <1>     call createNewFile
   537 00003828 5D                  <1>     pop rbp
   538 00003829 0F83EC3A0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   539 0000382F 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   540 00003836 3D05000000          <1>     cmp eax, errAccDen
   541 0000383B 74C5                <1>     je .fileCreateLoop
   542 0000383D 3D50000000          <1>     cmp eax, errFilExist
   543 00003842 74BE                <1>     je .fileCreateLoop
   544 00003844 F9                  <1>     stc
   545 00003845 E9DF3A0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   546                              <1> .writeNybbles:
   547                              <1> ;Write the nybbles of eax at rdi
   548 0000384A B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   549                              <1> .wnLp:
   550 0000384F C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   551 00003852 50                  <1>     push rax
   552 00003853 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   553 00003858 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   554 0000385D 3D39000000          <1>     cmp eax, '9'
   555 00003862 7605                <1>     jbe .notExtDigit
   556 00003864 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   557                              <1> .notExtDigit:
   558 00003869 AA                  <1>     stosb   ;Store the digit
   559 0000386A 58                  <1>     pop rax
   560 0000386B FFC9                <1>     dec ecx
   561 0000386D 75E0                <1>     jnz .wnLp
   562                              <1>     return
    13                              <2> %%_ret:
    14 0000386F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> .uniqueTimeGet:
   565 00003870 E81BF4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   566 00003875 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   567 0000387C 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   568                              <1>     return
    13                              <2> %%_ret:
    14 00003883 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   569                              <1> 
   570                              <1> createNewFile:     ;ah = 5Bh
   571 00003884 51                  <1>     push rcx    ;Save file attributes on stack
   572 00003885 488D0DDE070000      <1>     lea rcx, createNewMain
   573 0000388C C605(FB060000)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   574 00003893 E9DEF9FFFF          <1>     jmp openFileHdl.openCommon
   575                              <1> 
   576                              <1> lockUnlockFile:    ;ah = 5Ch
   577                              <1> ;ah = 5Ch
   578                              <1> ;al = subfunction
   579                              <1> ;       00h lock region of file
   580                              <1> ;       01h unlock region of file
   581                              <1> ;ebx = file handle
   582                              <1> ;ecx = start offset of region within file
   583                              <1> ;edi = length of region in bytes
   584 00003898 3C01                <1>     cmp al, 1
   585 0000389A 7757                <1>     ja .badFunction
   586 0000389C 57                  <1>     push rdi
   587 0000389D E851140000          <1>     call derefSFTPtr
   588 000038A2 730B                <1>     jnc .validHdl
   589 000038A4 58                  <1>     pop rax ;Discard the qword on the stack
   590 000038A5 B806000000          <1>     mov eax, errBadHdl
   591 000038AA E97A3A0000          <1>     jmp extErrExit
   592                              <1> .validHdl:
   593 000038AF 84C0                <1>     test al, al ;Check if al = 0
   594 000038B1 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   595 000038B2 7424                <1>     jz .lockFileRegion
   596 000038B4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   597 000038BA 740B                <1>     jz .unlockShare ;Jump if a local file only
   598 000038BC 50                  <1>     push rax
   599 000038BD B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   600 000038C2 CD2F                <1>     int 2Fh
   601 000038C4 5B                  <1>     pop rbx
   602 000038C5 EB06                <1>     jmp short .exitSelect
   603                              <1> .unlockShare:
   604 000038C7 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   605                              <1> .exitSelect:
   606 000038CD 0F82563A0000        <1>     jc extErrExit
   607 000038D3 E9433A0000          <1>     jmp extGoodExit
   608                              <1> .lockFileRegion:
   609 000038D8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   610 000038DE 740B                <1>     jz .lockShare   ;Jump if a local file only
   611 000038E0 50                  <1>     push rax
   612 000038E1 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   613 000038E6 CD2F                <1>     int 2Fh
   614 000038E8 5B                  <1>     pop rbx
   615 000038E9 EBE2                <1>     jmp short .exitSelect
   616                              <1> .lockShare:
   617 000038EB FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   618 000038F1 EBDA                <1>     jmp short .exitSelect
   619                              <1> .badFunction:
   620 000038F3 B801000000          <1>     mov eax, errInvFnc
   621 000038F8 668905(0B040000)    <1>     mov word [errorExCde], ax
   622 000038FF E9253A0000          <1>     jmp extErrExit
   623                              <1> 
   624                              <1> setHandleCount:    ;ah = 67h
   625                              <1> ;Input: bx = Size of new file handle table for process
   626                              <1> ;Output: CF=NC -> Ok to make more handles
   627                              <1> ;        CF=CY -> ax = Error code
   628                              <1> ;Five cases to consider:
   629                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   630                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   631                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   632                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   633                              <1> ;   Special case below, cannot be enacted directly by caller.
   634                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   635 00003904 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   636 00003907 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   637 0000390E 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   638 00003912 7765                <1>     ja short .moreHdlsReq
   639 00003914 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   640 00003919 771A                <1>     ja short .reduceExternal
   641                              <1>     ;Here if 20 handles or less requested
   642 0000391B 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   643 00003921 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   644 00003923 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   645 00003925 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   646                              <1> .exitGood:
   647 0000392B E9EB390000          <1>     jmp extGoodExit
   648                              <1> .exitBad:
   649 00003930 E9F4390000          <1>     jmp extErrExit
   650                              <1> .reduceExternal:
   651                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   652                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   653                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   654                              <1> ; and failing that, it will free it and then allocate a new block.
   655 00003935 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   656 00003939 E8E8000000          <1>     call .checkOpenHandles
   657 0000393E 72F0                <1>     jc short .exitBad
   658                              <1>     ;Recall ebx has the numebr of handles here
   659 00003940 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   660 00003945 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   661 00003949 EBE0                <1>     jmp short .exitGood
   662                              <1> .reduceFree:
   663                              <1> ;Entered once we know that we have an external block
   664                              <1> ;Now we close all handles above JFT size
   665 0000394B 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   666 0000394F 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   667 00003952 E8CF000000          <1>     call .checkOpenHandles
   668 00003957 72D7                <1>     jc short .exitBad
   669 00003959 BB14000000          <1>     mov ebx, dfltJFTsize
   670 0000395E 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   671                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   672 00003960 E8B8000000          <1>     call .copyBlock
   673                              <1>     ;Now we can free the old block
   674 00003965 4989F0              <1>     mov r8, rsi
   675 00003968 53                  <1>     push rbx
   676 00003969 E8DB1A0000          <1>     call freeMemory
   677 0000396E 5B                  <1>     pop rbx
   678 0000396F 72BF                <1>     jc short .exitBad
   679 00003971 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   680 00003975 31C0                <1>     xor eax, eax
   681                              <1> .exitGood2:
   682 00003977 EBB2                <1>     jmp short .exitGood
   683                              <1> .moreHdlsReq:
   684 00003979 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   685 0000397F 7507                <1>     jne short .okToExpand
   686 00003981 B801000000          <1>     mov eax, errInvFnc
   687                              <1> .exitBad2:
   688 00003986 EBA8                <1>     jmp short .exitBad
   689                              <1> .okToExpand:
   690                              <1> ;Need to check if we are external and reallocating. 
   691                              <1> ;   If we are, can we realloc or do we need to free and save?
   692 00003988 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   693 0000398E 762E                <1>     jbe short .moreFromJFT
   694 00003990 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   695 00003994 E83C000000          <1>     call .reallocBlock
   696 00003999 7390                <1>     jnc short .exitGood
   697 0000399B E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   698 000039A0 728E                <1>     jc short .exitBad
   699 000039A2 4989F0              <1>     mov r8, rsi ;Free the source block
   700 000039A5 53                  <1>     push rbx
   701 000039A6 57                  <1>     push rdi    ;Save the new pointer here
   702 000039A7 55                  <1>     push rbp
   703 000039A8 E89C1A0000          <1>     call freeMemory
   704 000039AD 5D                  <1>     pop rbp
   705 000039AE 5F                  <1>     pop rdi
   706 000039AF 5B                  <1>     pop rbx
   707 000039B0 7317                <1>     jnc short .freeOk ;Free'd the original block
   708 000039B2 50                  <1>     push rax    ;Save error code on stack
   709 000039B3 4989F8              <1>     mov r8, rdi ;Free the new block
   710 000039B6 E88E1A0000          <1>     call freeMemory
   711 000039BB 58                  <1>     pop rax
   712 000039BC EBC8                <1>     jmp short .exitBad2
   713                              <1> .moreFromJFT:
   714 000039BE 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   715 000039C2 E826000000          <1>     call .getBlock
   716 000039C7 72BD                <1>     jc short .exitBad2
   717                              <1> .freeOk:
   718 000039C9 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   719 000039CD 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   720 000039D1 31C0                <1>     xor eax, eax
   721 000039D3 EBA2                <1>     jmp short .exitGood2
   722                              <1> .reallocBlock:
   723                              <1> ;Input:
   724                              <1> ;   rsi -> Source block to reallocate
   725                              <1> ;   ebx = Number of handles
   726                              <1> ;   rbp -> Current PSP
   727                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   728                              <1> ;                 ebx = Number of handles
   729                              <1> ;        CF=CY => Error, EAX has error code
   730 000039D5 56                  <1>     push rsi ;Save external pointer on stack
   731 000039D6 53                  <1>     push rbx    ;Save number of handles on stack
   732 000039D7 55                  <1>     push rbp
   733 000039D8 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   734 000039DE C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   735 000039E1 4989F0              <1>     mov r8, rsi
   736 000039E4 E8681B0000          <1>     call reallocMemory
   737 000039E9 5D                  <1>     pop rbp
   738 000039EA 5B                  <1>     pop rbx
   739 000039EB 5E                  <1>     pop rsi ;Get external pointer back in rsi
   740                              <1>     return
    13                              <2> %%_ret:
    14 000039EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   741                              <1> .getBlock:
   742                              <1> ;rsi -> Source block for copy 
   743                              <1> ;ebx = Number of new handles
   744                              <1> ;Output: rsi and ebx as before
   745                              <1> ;        rdi -> New block
   746                              <1> ;IF CF=CY, bad exit
   747 000039ED 53                  <1>     push rbx    ;bx has the number of handles we want
   748 000039EE 56                  <1>     push rsi
   749 000039EF 55                  <1>     push rbp
   750 000039F0 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   751 000039F6 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   752 000039F9 89D9                <1>     mov ecx, ebx
   753 000039FB C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   754 000039FE 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   755 000039FF E841180000          <1>     call allocateMemory ;Allocate memory 
   756 00003A04 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   757 00003A05 5D                  <1>     pop rbp ;Get the PSP pointer back
   758 00003A06 5E                  <1>     pop rsi ;Get the source pointer back
   759 00003A07 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   760                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A08 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   761 00003A0A 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   762 00003A0D 57                  <1>     push rdi
   763 00003A0E 31C0                <1>     xor eax, eax
   764 00003A10 FFC8                <1>     dec eax
   765 00003A12 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   766 00003A14 5F                  <1>     pop rdi
   767 00003A15 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   768 00003A17 E801000000          <1>     call .copyBlock ;Copy all the handles over
   769                              <1>     return
    13                              <2> %%_ret:
    14 00003A1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   770                              <1> .copyBlock:
   771                              <1> ;Input: rsi -> Source block
   772                              <1> ;       rdi -> Destination block
   773                              <1> ;       ecx = Number of handles to copy
   774 00003A1D 56                  <1>     push rsi
   775 00003A1E 57                  <1>     push rdi
   776 00003A1F 51                  <1>     push rcx
   777 00003A20 F3A4                <1>     rep movsb
   778 00003A22 59                  <1>     pop rcx
   779 00003A23 5F                  <1>     pop rdi
   780 00003A24 5E                  <1>     pop rsi
   781                              <1>     return
    13                              <2> %%_ret:
    14 00003A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   782                              <1> .checkOpenHandles:
   783                              <1> ;Checks for open handles in the range that is to be freed.
   784                              <1> ;If any found, error exit
   785                              <1> ;Input: rsi -> Where to start searching
   786 00003A26 56                  <1>     push rsi
   787 00003A27 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   788                              <1> .cohLoop:
   789 00003A2B 803EFF              <1>     cmp byte [rsi], -1
   790 00003A2E 7509                <1>     jne .checkOpenHandlesBadExit
   791 00003A30 48FFC6              <1>     inc rsi
   792 00003A33 FFC9                <1>     dec ecx
   793 00003A35 75F4                <1>     jnz .cohLoop
   794 00003A37 5E                  <1>     pop rsi
   795                              <1>     return
    13                              <2> %%_ret:
    14 00003A38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .checkOpenHandlesBadExit:
   797 00003A39 B804000000          <1>     mov eax, errNhl
   798 00003A3E F9                  <1>     stc
   799 00003A3F 5E                  <1>     pop rsi
   800                              <1>     return
    13                              <2> %%_ret:
    14 00003A40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   803                              <1>     ;Input: bx = File to flush
   804 00003A41 E893120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   805 00003A46 0F82DD380000        <1>     jc extErrExit
   806 00003A4C E8E1100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   807                              <1>     ;Now we check if the device is a char, disk or net file and commit
   808 00003A51 E811000000          <1>     call commitMain
   809 00003A56 0F82CD380000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   810                              <1> .exitOk:
   811 00003A5C 30C0                <1>     xor al, al
   812 00003A5E E8F3330000          <1>     call getUserRegs
   813 00003A63 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   814                              <1>     return
    13                              <2> %%_ret:
    14 00003A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   815                              <1> 
   816                              <1> ;-----------------------------------:
   817                              <1> ;       Main File IO Routines       :
   818                              <1> ;-----------------------------------:
   819                              <1> commitMain:
   820                              <1> ;Commits the current SFT 
   821 00003A67 E8CE100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   822 00003A6C 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   823 00003A70 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   824                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A75 75EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 00003A77 66A90080            <1>     test ax, devRedirDev
   826 00003A7B 7508                <1>     jnz .notNet
   827                              <1>     ;Commit file net redir call and exit
   828 00003A7D B807110000          <1>     mov eax, 1107h
   829 00003A82 CD2F                <1>     int 2Fh
   830                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003A84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .notNet:
   832 00003A85 E854380000          <1>     call dosCrit1Enter
   833 00003A8A 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   834 00003A8E E82E330000          <1>     call setWorkingDPB
   835 00003A93 E85BE6FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   836 00003A98 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   837 00003A9A E860CFFFFF          <1>     call flushFile  ;Now the file gets flushed
   838                              <1> .exit:
   839                              <1> ;Propagate CF and AL if needed due to error
   840 00003A9F E844380000          <1>     call dosCrit1Exit
   841                              <1>     return
    13                              <2> %%_ret:
    14 00003AA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   842                              <1> renameMain:
   843                              <1> ;Now, creates a special find first block for the source file
   844                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   845                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   846                              <1> ; block. 
   847                              <1> ;Then we search for that file name specifically (again), replacing 
   848                              <1> ; the filename portion of the destination buffer. If it exists or the 
   849                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   850                              <1> ; the new directory entry and delete the original file. 
   851                              <1> ;Input:
   852                              <1> ; filenamePtr1 -> Source path + filename pattern
   853                              <1> ; filenamePtr2 -> New path + filename pattern
   854                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   855                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   856 00003AA5 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   857 00003AAC E818330000          <1>     call testCDSNet ;CF=NC => Not net
   858 00003AB1 7308                <1>     jnc .notNet
   859 00003AB3 B811110000          <1>     mov eax, 1111h
   860 00003AB8 CD2F                <1>     int 2Fh
   861                              <1>     return
    13                              <2> %%_ret:
    14 00003ABA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   862                              <1> .notNet:
   863                              <1> ;First check if both drives are on the same disk
   864 00003ABB 8A05(1D050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   865 00003AC1 8A25(9D050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   866 00003AC7 38E0                <1>     cmp al, ah
   867 00003AC9 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   868 00003ACB B811000000          <1>     mov eax, errDevUnk
   869 00003AD0 F9                  <1>     stc
   870                              <1>     return
    13                              <2> %%_ret:
    14 00003AD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   871                              <1> .sameDrive:
   872                              <1> ;Now we check if either pathsepc is simply X:\,0
   873                              <1> ; If they are, return fail as we cannot rename the root dir
   874 00003AD2 E807380000          <1>     call dosCrit1Enter
   875 00003AD7 8B05(1D050000)      <1>     mov eax, dword [buffer1]
   876 00003ADD 30C0                <1>     xor al, al
   877 00003ADF 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   878 00003AE4 750B                <1>     jne .checkpath2
   879                              <1> .accDen:
   880 00003AE6 B805000000          <1>     mov eax, errAccDen
   881                              <1> .errorExit:
   882 00003AEB F9                  <1>     stc
   883 00003AEC E900030000          <1>     jmp .exit2
   884                              <1> .checkpath2:
   885 00003AF1 8B05(9D050000)      <1>     mov eax, dword [buffer2]
   886 00003AF7 30C0                <1>     xor al, al
   887 00003AF9 3D003A5C00          <1>     cmp eax, 005C3A00h
   888 00003AFE 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   889                              <1>     ;Now ensure hte two paths are not equal
   890 00003B00 488D35(1D050000)    <1>     lea rsi, buffer1
   891 00003B07 488D3D(9D050000)    <1>     lea rdi, buffer2
   892 00003B0E E8D9340000          <1>     call compareFileNames
   893 00003B13 74D1                <1>     jz .accDen
   894                              <1> ;Now we find first the source file
   895 00003B15 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
   896 00003B1C 4889F7              <1>     mov rdi, rsi
   897 00003B1F E8D8D7FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   898 00003B24 0F82C7020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   899 00003B2A 488D35(59060000)    <1>     lea rsi, curDirCopy
   900 00003B31 488D3D(C1070000)    <1>     lea rdi, renameDir
   901 00003B38 B904000000          <1>     mov ecx, fatDirEntry_size/8
   902 00003B3D F348A5              <1>     rep movsq   ;Copy directory over
   903 00003B40 488D3D(96070000)    <1>     lea rdi, renameFFBlk
   904 00003B47 E85FD6FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   905                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   906                              <1>     ; dir for any CDS.
   907 00003B4C F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   908 00003B53 7447                <1>     jz .notDirCheck
   909 00003B55 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   910 00003B5C 57                  <1>     push rdi
   911 00003B5D E853340000          <1>     call strlen ;Get asciiz length in ecx
   912 00003B62 5B                  <1>     pop rbx
   913 00003B63 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   914 00003B65 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   915 00003B6C 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   916                              <1> .dirCheck:
   917 00003B73 4889DF              <1>     mov rdi, rbx
   918 00003B76 51                  <1>     push rcx    ;Save the char count to check!
   919 00003B77 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   920 00003B78 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   921 00003B7A AC                  <1>     lodsb   ;Get the last char to check in al
   922 00003B7B 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   923 00003B7C 59                  <1>     pop rcx
   924 00003B7D 7512                <1>     jne .neqDir
   925                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   926 00003B7F 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   927 00003B81 7404                <1>     je .curDirChangeErr
   928 00003B83 84C0                <1>     test al, al
   929 00003B85 750A                <1>     jne .neqDir ;Proceed as normal if not null
   930                              <1> .curDirChangeErr:
   931                              <1>     ;Here we are trying to change a current directory. Fail it!
   932                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   933                              <1>     ; we initially had programmed in (with access denied error instead).
   934 00003B87 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   935 00003B8C E95AFFFFFF          <1>     jmp .errorExit
   936                              <1> .neqDir:
   937 00003B91 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   938 00003B98 FFCA                <1>     dec edx
   939 00003B9A 75D7                <1>     jnz .dirCheck
   940                              <1> .notDirCheck:
   941                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   942 00003B9C B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   943 00003BA1 31C0                <1>     xor eax, eax
   944 00003BA3 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   945 00003BAA F2AE                <1>     repne scasb   ;Search for terminating null
   946 00003BAC FD                  <1>     std ;Go backwards now, to find the path sep
   947 00003BAD B05C                <1>     mov al, "\"
   948 00003BAF F2AE                <1>     repne scasb   ;Now rsi points one before
   949 00003BB1 FC                  <1>     cld ;Go normal ways now
   950 00003BB2 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   951 00003BB9 57                  <1>     push rdi
   952 00003BBA 4889FE              <1>     mov rsi, rdi
   953 00003BBD 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
   954 00003BC4 E85AD5FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   955 00003BC9 5F                  <1>     pop rdi
   956 00003BCA 57                  <1>     push rdi    ;Save rdi on stack again
   957 00003BCB 488D35(B4070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   958                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   959 00003BD2 48A5                <1>     movsq
   960 00003BD4 A5                  <1>     movsd
   961 00003BD5 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   962 00003BD6 5F                  <1>     pop rdi ;rdi points to first char position
   963 00003BD7 E865020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   964 00003BDC 0F8209FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   965                              <1>     ;Else return the pattern back to its original position
   966 00003BE2 488D35(E4060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   967 00003BE9 E87DD5FFFF          <1>     call FCBToAsciiz
   968                              <1>     ;Delete the original directory entry
   969 00003BEE 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   970 00003BF2 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   971 00003BF4 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   972 00003BF8 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   973 00003BFA 8B0D(A3070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   974 00003C00 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   975 00003C03 91                  <1>     xchg ecx, eax
   976 00003C04 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   977 00003C06 89C3                <1>     mov ebx, eax
   978 00003C08 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   979 00003C0E E8AECEFFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   980 00003C13 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   981 00003C16 E88BCDFFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   982 00003C1B 0F82DB010000        <1>     jc .badExit
   983 00003C21 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   984                              <1>     ;rsi points to the file entry
   985 00003C26 8A05(07070000)      <1>     mov al, byte [delChar]
   986 00003C2C 8806                <1>     mov byte [rsi], al
   987 00003C2E E8F8CBFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   988                              <1> 
   989                              <1>     ;Now we use the destination filename pattern to build the new filename
   990 00003C33 488B3D(25060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   991 00003C3A 31C0                <1>     xor eax, eax
   992 00003C3C B943000000          <1>     mov ecx, 67
   993 00003C41 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   994                              <1> .findPattern:
   995 00003C43 48FFCF              <1>     dec rdi
   996 00003C46 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   997 00003C49 75F8                <1>     jne .findPattern
   998                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   999 00003C4B C605(FD060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
  1000 00003C52 807FFF3A            <1>     cmp byte [rdi - 1], ":"
  1001 00003C56 750D                <1>     jne .notRoot
  1002                              <1>     ;The root dir always exists on a volume so can skip the check.
  1003 00003C58 48FFC7              <1>     inc rdi ;Goto the first char of the filename
  1004 00003C5B 57                  <1>     push rdi
  1005 00003C5C 800D(FD060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
  1006 00003C63 EB29                <1>     jmp short .skipCheck
  1007                              <1> .notRoot:
  1008 00003C65 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1009 00003C66 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1010                              <1>     ;Now check if the parent directory exists for the destination
  1011 00003C67 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1012 00003C68 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1013 00003C6E 488D35(9D050000)    <1>     lea rsi, buffer2
  1014 00003C75 4889F7              <1>     mov rdi, rsi
  1015 00003C78 E878D6FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1016 00003C7D 8F05(1D060000)      <1>     pop qword [fname1Ptr]
  1017 00003C83 5F                  <1>     pop rdi
  1018 00003C84 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1019 00003C8A C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1020                              <1> .skipCheck:
  1021                              <1>     ;rdi now points to the first char of the pattern
  1022 00003C8E 4889FE              <1>     mov rsi, rdi
  1023 00003C91 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
  1024 00003C98 E886D4FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1025                              <1>     ;Ensure the destination pattern is not all question marks
  1026 00003C9D 813D(E4060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1026 00003CA5 3F3F                <1>
  1027 00003CA7 7524                <1>     jne .validRenPattern
  1028 00003CA9 813D(E8060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1028 00003CB1 3F3F                <1>
  1029 00003CB3 7518                <1>     jne .validRenPattern
  1030 00003CB5 66813D(EC060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1030 00003CBD 3F                  <1>
  1031 00003CBE 750D                <1>     jne .validRenPattern
  1032 00003CC0 803D(EE060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1033 00003CC7 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1034                              <1> .validRenPattern:
  1035                              <1>     ;curDirCopy has information for the destination directory file we will 
  1036                              <1>     ; write to. The cluster points to the directory file itself to search in
  1037                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1038                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1039 00003CCD 488D35(C1070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1040 00003CD4 488D3D(D8060000)    <1>     lea rdi, fcbName
  1041 00003CDB 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1042 00003CDC B90B000000          <1>     mov ecx, 11
  1043 00003CE1 F3A4                <1>     rep movsb
  1044 00003CE3 5F                  <1>     pop rdi
  1045 00003CE4 488D35(E4060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1046                              <1> .mnnLp:
  1047 00003CEB AC                  <1>     lodsb
  1048 00003CEC 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1049 00003CEE 7404                <1>     je .mnnWC   ;Skip overriding this char
  1050 00003CF0 AA                  <1>     stosb   ;Store new char and go forwards by one
  1051 00003CF1 48FFCF              <1>     dec rdi ;Now go back by one
  1052                              <1> .mnnWC:
  1053 00003CF4 48FFC7              <1>     inc rdi ;Goto next letter
  1054 00003CF7 FFC1                <1>     inc ecx
  1055 00003CF9 81F90B000000        <1>     cmp ecx, 11
  1056 00003CFF 75EA                <1>     jne .mnnLp
  1057 00003D01 488D35(D8060000)    <1>     lea rsi, fcbName
  1058 00003D08 488D3D(C1070000)    <1>     lea rdi, renameDir
  1059 00003D0F B90B000000          <1>     mov ecx, 11
  1060 00003D14 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1061 00003D16 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1062 00003D17 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1063 00003D18 488D35(D8060000)    <1>     lea rsi, fcbName
  1064 00003D1F E847D4FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1065 00003D24 488B35(25060000)    <1>     mov rsi, qword [fname2Ptr]
  1066 00003D2B 4889F7              <1>     mov rdi, rsi
  1067 00003D2E E8C9D5FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1068 00003D33 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1069 00003D39 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1070 00003D3E 0F85B8000000        <1>     jne .badExit
  1071                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1072                              <1>     ;If the parent is root, deal with special case
  1073 00003D44 488D1D(59060000)    <1>     lea rbx, curDirCopy
  1074 00003D4B F605(FD060000)02    <1>     test byte [fileFDflg], 2
  1075 00003D52 C605(FD060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1076 00003D59 7416                <1>     jz .notRoot2
  1077 00003D5B 488D35(D8060000)    <1>     lea rsi, fcbName
  1078 00003D62 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1079 00003D69 48A5                <1>     movsq
  1080 00003D6B A5                  <1>     movsd
  1081 00003D6C A4                  <1>     movsb
  1082 00003D6D 31C0                <1>     xor eax, eax    ;Dir to search
  1083 00003D6F EB13                <1>     jmp short .getSpace
  1084                              <1> .notRoot2:
  1085 00003D71 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1086 00003D78 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1087 00003D7F C1E210              <1>     shl edx, 10h
  1088 00003D82 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1089                              <1> .getSpace:
  1090 00003D84 E87C000000          <1>     call .searchForDirSpace
  1091 00003D89 726C                <1>     jc .bad
  1092                              <1> ;dir Entry found, rsi points to space in buffer
  1093 00003D8B 4889F7              <1>     mov rdi, rsi
  1094 00003D8E 488D35(C1070000)    <1>     lea rsi, renameDir
  1095 00003D95 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1096 00003D9A F348A5              <1>     rep movsq   ;Copy dir over
  1097 00003D9D E889CAFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1098                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1099                              <1>     ;If it does, we find next. If not, we exit
  1100 00003DA2 B03F                <1>     mov al, "?"
  1101 00003DA4 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1102 00003DAB E805320000          <1>     call strlen ;Get in rcx to get the length of the string
  1103 00003DB0 F2AE                <1>     repne scasb
  1104 00003DB2 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1105 00003DB4 B90B000000          <1>     mov ecx, 11
  1106 00003DB9 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
  1107 00003DC0 F2AE                <1>     repne scasb
  1108 00003DC2 7525                <1>     jne .exit
  1109                              <1>     ;Here we gotta do a find next now!
  1110 00003DC4 FF35(17040000)      <1>     push qword [currentDTA]
  1111 00003DCA 488D3D(96070000)    <1>     lea rdi, renameFFBlk
  1112 00003DD1 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1113 00003DD8 E84CD0FFFF          <1>     call findNextMain
  1114 00003DDD 8F05(17040000)      <1>     pop qword [currentDTA]
  1115 00003DE3 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1116                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1117                              <1> .exit:
  1118 00003DE9 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1119 00003DEA E80ECAFFFF          <1>     call writeThroughBuffers
  1120 00003DEF 720B                <1>     jc .badExit
  1121                              <1> .exit2: ;Bad exit before we push qword on stack 
  1122 00003DF1 E8F2340000          <1>     call dosCrit1Exit
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00003DF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> .bad:
  1125 00003DF7 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1126                              <1> .badExit:
  1127 00003DFC E8CEC9FFFF          <1>     call cancelWriteThroughBuffers
  1128 00003E01 F9                  <1>     stc
  1129 00003E02 5F                  <1>     pop rdi
  1130 00003E03 EBEC                <1>     jmp short .exit2
  1131                              <1> 
  1132                              <1> .searchForDirSpace:
  1133                              <1> ;Input: eax = First directory to search 
  1134 00003E05 8905(83070000)      <1>     mov dword [dirClustA], eax
  1135 00003E0B 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1136 00003E0D 668905(87070000)    <1>     mov word [dirSect], ax
  1137 00003E14 8905(89070000)      <1>     mov dword [dirEntry], eax
  1138 00003E1A E847E2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1139 00003E1F 731C                <1>     jnc .dirEntryFnd
  1140 00003E21 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1140 00003E29 0000                <1>
  1141 00003E2B 7412                <1>     je .searchBad ;Set CF and exit
  1142 00003E2D E87EE3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1143 00003E32 720B                <1>     jc .searchBad
  1144 00003E34 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1145 00003E39 7404                <1>     je .searchBad
  1146                              <1>     ;Else eax = Newly allocated cluster
  1147 00003E3B EBC8                <1>     jmp short .searchForDirSpace
  1148                              <1> .dirEntryFnd:
  1149 00003E3D F8                  <1>     clc
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00003E3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .searchBad:
  1152 00003E3F F9                  <1>     stc
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00003E40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> 
  1155                              <1> 
  1156                              <1> checkNoOpenHandlesForShareAction:
  1157                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1158                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1159                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1160                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1161                              <1> ; proceeding.
  1162                              <1> ;
  1163                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1164                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1165                              <1> ;       currDirCopy = Directory entry for the file
  1166 00003E41 E881340000          <1>     call dosPushRegs    ;Save the context completely
  1167 00003E46 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1168 00003E4D 740C                <1>     jz .noOpenFileCheckHandler
  1169 00003E4F FF15(BF000000)      <1>     call qword [openFileCheck]
  1170 00003E55 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1171 00003E57 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1172 00003E59 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1173                              <1> .noOpenFileCheckHandler:
  1174                              <1>     ;The following closes most recent shared handles referencing it
  1175                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1176                              <1>     ; mode and if there is precisely 1  
  1177 00003E5B FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1178                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1179 00003E61 488D3D(180D0000)    <1>     lea rdi, scratchSFT
  1180 00003E68 48893D(31070000)    <1>     mov qword [currentSFT], rdi
  1181 00003E6F B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1182 00003E74 C605(06070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1183                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1184 00003E7B 57                  <1>     push rdi
  1185 00003E7C E899020000          <1>     call buildSFTEntry
  1186 00003E81 5F                  <1>     pop rdi
  1187 00003E82 7225                <1>     jc .errorMain
  1188 00003E84 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1189 00003E89 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1190 00003E8F 57                  <1>     push rdi
  1191 00003E90 E8D33C0000          <1>     call shareFile
  1192 00003E95 5F                  <1>     pop rdi
  1193 00003E96 7211                <1>     jc .errorMain
  1194 00003E98 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1195 00003E9D E85D3C0000          <1>     call closeShareCallWrapper
  1196                              <1> .exit:
  1197 00003EA2 E809340000          <1>     call dosPopRegs
  1198 00003EA7 F8                  <1>     clc
  1199                              <1>     return
    13                              <2> %%_ret:
    14 00003EA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1200                              <1> .errorMain:
  1201 00003EA9 E802340000          <1>     call dosPopRegs
  1202 00003EAE B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1203 00003EB3 F9                  <1>     stc
  1204                              <1>     return
    13                              <2> %%_ret:
    14 00003EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1205                              <1> 
  1206                              <1> outerDeleteMain:
  1207                              <1> ;Internal current dir must be populated with dir entry
  1208                              <1> ; and internal DOS directory variables now point to this entry.
  1209                              <1> ;Checks if the file is a char device or read only.
  1210                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1211                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1212                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1213                              <1> ;         CF=NC => File deleted
  1214 00003EB5 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
  1215 00003EBC E8082F0000          <1>     call testCDSNet ;CF=NC => Not net
  1216 00003EC1 7308                <1>     jnc .notNet
  1217 00003EC3 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1218 00003EC8 CD2F                <1>     int 2Fh
  1219                              <1>     return
    13                              <2> %%_ret:
    14 00003ECA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1220                              <1> .notNet:
  1221 00003ECB B805000000          <1>     mov eax, errAccDen  
  1222 00003ED0 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1223 00003ED7 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1224 00003ED9 F605(64060000)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1225 00003EE0 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1226 00003EE2 E843000000          <1>     call deleteMain
  1227 00003EE7 723F                <1>     jc .exitBad
  1228                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1229 00003EE9 B03F                <1>     mov al, "?"
  1230 00003EEB 488D3D(D8060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1231 00003EF2 B90B000000          <1>     mov ecx, 11
  1232 00003EF7 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1233 00003EF9 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1234 00003EFB F8                  <1>     clc
  1235                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003EFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1236                              <1> .serverWCloop:
  1237 00003EFD FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1238 00003F03 488D3D(2E060000)    <1>     lea rdi, dosffblock
  1239 00003F0A 57                  <1>     push rdi    ;Push this address onto the stack
  1240 00003F0B E89BD2FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1241 00003F10 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1242 00003F16 E80ECFFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1243 00003F1B 8F05(17040000)      <1>     pop qword [currentDTA]
  1244 00003F21 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1245 00003F26 73D5                <1>     jnc .serverWCloop     
  1246                              <1> ;Stop as soon as an error occurs
  1247                              <1> .exitBad:
  1248 00003F28 F9                  <1>     stc
  1249                              <1>     return
    13                              <2> %%_ret:
    14 00003F29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1250                              <1> 
  1251                              <1> deleteMain:
  1252                              <1> ;Now unlink FAT chain and then clear directory entry
  1253                              <1> ;Get the start cluster of this file
  1254                              <1> ;Input:
  1255                              <1> ; The file must have NOT be read-only.
  1256                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1257                              <1> ;     - curDirCopy must be filled with the file directory information
  1258                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1259                              <1> ;Output: CF=NC => Success, 
  1260                              <1> ; If not net CDS:
  1261                              <1> ;   rsi keeps pointing to directory entry.
  1262                              <1> ;   al = First char of the file that was deleted.
  1263                              <1> ;        CF=CY => Error
  1264                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1265 00003F2A E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1266                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F2F 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1267 00003F31 52                  <1>     push rdx
  1268 00003F32 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1269 00003F39 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1270 00003F40 C1E010              <1>     shl eax, 10h
  1271 00003F43 09D0                <1>     or eax, edx ;Add low bits to eax
  1272 00003F45 5A                  <1>     pop rdx
  1273 00003F46 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1274 00003F48 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1275 00003F4A 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1276 00003F51 E824CDFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1277 00003F56 721B                <1>     jc .exitBad
  1278                              <1> .skipUnlink:
  1279                              <1>     ;Now replace the first char of the directory to 0E5h
  1280                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1281 00003F58 E81CE1FFFF          <1>     call getDiskDirectoryEntry
  1282 00003F5D 7214                <1>     jc .exitBad
  1283 00003F5F 8A05(07070000)      <1>     mov al, byte [delChar]
  1284 00003F65 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1285 00003F67 E8BFC8FFFF          <1>     call markBufferDirty
  1286                              <1>     ;CF must be clear
  1287 00003F6C E88CC8FFFF          <1>     call writeThroughBuffers
  1288                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F71 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1289                              <1> .exitBad:
  1290 00003F73 E857C8FFFF          <1>     call cancelWriteThroughBuffers
  1291 00003F78 F9                  <1>     stc
  1292                              <1>     return
    13                              <2> %%_ret:
    14 00003F79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1293                              <1> 
  1294                              <1> openMain:
  1295                              <1> ;Input: ax (formally al) = Open mode
  1296                              <1> ;       [currentSFT] = SFT we are building
  1297                              <1> ;       [workingCDS] = CDS of drive to access
  1298                              <1> ;       [workingDPB] = DPB of drive to access
  1299                              <1> ;Ouput: CF=CY => Error, eax has error code
  1300 00003F7A E8AE000000          <1>     call setOpenMode
  1301                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F7F 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1302 00003F81 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1303 00003F88 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
  1304 00003F8F 30E4                <1>     xor ah, ah  ;al has the access mode
  1305 00003F91 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1306 00003F95 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1307 00003F9C 750A                <1>     jne .notNet
  1308                              <1> .redirOpen:
  1309 00003F9E 50                  <1>     push rax    ;Push open mode onto stack
  1310 00003F9F B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1311 00003FA4 CD2F                <1>     int 2Fh
  1312 00003FA6 58                  <1>     pop rax
  1313                              <1>     return
    13                              <2> %%_ret:
    14 00003FA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1314                              <1> .notNet:
  1315 00003FA8 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1316 00003FAE 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1317 00003FB0 E829330000          <1>     call dosCrit1Enter
  1318 00003FB5 C605(06070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1319 00003FBC C605(07070000)E5    <1>     mov byte [delChar], 0E5h
  1320 00003FC3 E852010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1321 00003FC8 7227                <1>     jc .errorExit
  1322                              <1> .openShareLoop:
  1323                              <1> ;Now we attempt to register the file with SHARE
  1324 00003FCA 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount]    
  1325                              <1> .openShareTryAgain: 
  1326 00003FD1 51                  <1>     push rcx
  1327 00003FD2 E8213B0000          <1>     call openShareCallWrapper
  1328 00003FD7 59                  <1>     pop rcx
  1329 00003FD8 731D                <1>     jnc .fileSharedOk
  1330 00003FDA E8433B0000          <1>     call shareRetryCountdown
  1331 00003FDF FFC9                <1>     dec ecx
  1332 00003FE1 75EE                <1>     jnz .openShareTryAgain
  1333 00003FE3 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1334 00003FEA E8563B0000          <1>     call shareCheckOpenViolation
  1335 00003FEF 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1336                              <1> .errorExit:
  1337 00003FF1 E8F2320000          <1>     call dosCrit1Exit   ;Else we error out
  1338                              <1>     return
    13                              <2> %%_ret:
    14 00003FF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1339                              <1> .fileSharedOk:
  1340 00003FF7 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1341 00003FFC E8390B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1342 00004001 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1343 00004007 E8DC320000          <1>     call dosCrit1Exit
  1344                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1345 0000400C 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1346 00004013 E866E3FFFF          <1>     call openSFT
  1347 00004018 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1348 0000401E 7501                <1>     jnz .netOpen
  1349                              <1>     return
    13                              <2> %%_ret:
    14 00004020 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1350                              <1> .netOpen:
  1351 00004021 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1352 00004028 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1353                              <1>     return
    13                              <2> %%_ret:
    14 0000402C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1354                              <1> 
  1355                              <1> setOpenMode:
  1356                              <1> ;Input: al = Open mode for the file open
  1357 0000402D 8805(FC060000)      <1>     mov byte [fileOpenMd], al
  1358 00004033 53                  <1>     push rbx
  1359                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1360 00004034 F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1361 0000403B 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1362 0000403D 88C3                <1>     mov bl, al
  1363 0000403F 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1364 00004042 803D(01070000)FF    <1>     cmp byte [dosInvoke], -1    
  1365 00004049 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1366 0000404B 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1367 0000404E 7405                <1>     je .s2
  1368                              <1> .s1:
  1369 00004050 80FB40              <1>     cmp bl, denyNoneShare
  1370 00004053 770D                <1>     ja .somBad
  1371                              <1> .s2:
  1372 00004055 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1373 00004057 80E30F              <1>     and bl, 0Fh
  1374 0000405A 80FB02              <1>     cmp bl, RWAccess
  1375 0000405D 7703                <1>     ja .somBad
  1376 0000405F 5B                  <1>     pop rbx
  1377 00004060 F8                  <1>     clc
  1378                              <1>     return
    13                              <2> %%_ret:
    14 00004061 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1379                              <1> .somBad:
  1380 00004062 5B                  <1>     pop rbx
  1381 00004063 B80C000000          <1>     mov eax, errAccCde
  1382 00004068 F9                  <1>     stc
  1383                              <1>     return
    13                              <2> %%_ret:
    14 00004069 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1384                              <1> 
  1385                              <1> createNewMain:
  1386                              <1> ;Input: ax (formally al) = File attributes
  1387                              <1> ;       [currentSFT] = SFT we are building
  1388                              <1> ;       [workingCDS] = CDS of drive to access
  1389                              <1> ;       [workingDPB] = DPB of drive to access
  1390 0000406A 0FB6C0              <1>     movzx eax, al
  1391 0000406D B401                <1>     mov ah, 1    ;Tell redir to create new file
  1392 0000406F F605(03070000)FF    <1>     test byte [fileExist], -1
  1393 00004076 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1394 00004078 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1395 0000407D F9                  <1>     stc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 0000407E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> createMain:
  1398                              <1> ;Input: ax (formally al) = File attributes
  1399                              <1> ;       [currentSFT] = SFT we are building
  1400                              <1> ;       [workingCDS] = CDS of drive to access
  1401                              <1> ;       [workingDPB] = DPB of drive to access
  1402 0000407F 0FB6C0              <1>     movzx eax, al
  1403                              <1> .createNewEP:
  1404 00004082 A880                <1>     test al, 80h    ; Is this invalid bit set?
  1405 00004084 750C                <1>     jnz .invalidAttrib
  1406 00004086 A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1407 00004088 7502                <1>     jnz .notVol
  1408 0000408A B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1409                              <1> .notVol:
  1410 0000408C 0C20                <1>     or al, archiveFile   ;Set archive bit
  1411 0000408E A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1412 00004090 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1413                              <1> .invalidAttrib:
  1414 00004092 B805000000          <1>     mov eax, errAccDen
  1415 00004097 F9                  <1>     stc
  1416                              <1>     return
    13                              <2> %%_ret:
    14 00004098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1417                              <1> .validAttr:
  1418                              <1> ;Check we are not creating a directory.
  1419 00004099 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1420 000040A0 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
  1421 000040A7 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1422 000040AE 750A                <1>     jne .diskFile
  1423 000040B0 50                  <1>     push rax    ;Save the new attributes
  1424 000040B1 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1425 000040B6 CD2F                <1>     int 2Fh
  1426 000040B8 5B                  <1>     pop rbx
  1427                              <1>     return
    13                              <2> %%_ret:
    14 000040B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1428                              <1> .diskFile:
  1429 000040BA 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1430 000040C0 740A                <1>     jz .hardFile
  1431 000040C2 50                  <1>     push rax    ;Save the new attributes
  1432 000040C3 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1433 000040C8 CD2F                <1>     int 2Fh
  1434 000040CA 5B                  <1>     pop rbx
  1435                              <1>     return
    13                              <2> %%_ret:
    14 000040CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1436                              <1> .hardFile:
  1437 000040CC 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1438 000040D2 C605(06070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1439 000040D9 C605(07070000)E5    <1>     mov byte [delChar], 0E5h
  1440 000040E0 E8F9310000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1441 000040E5 57                  <1>     push rdi
  1442 000040E6 50                  <1>     push rax    ;Save the file attributes on stack
  1443 000040E7 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1444 000040EC E829000000          <1>     call buildSFTEntry
  1445 000040F1 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1446 000040F2 5F                  <1>     pop rdi
  1447 000040F3 721F                <1>     jc .errorExit
  1448 000040F5 8A05(FB060000)      <1>     mov al, byte [searchAttr]   ;Get the attr we created with.
  1449 000040FB 3C08                <1>     cmp al, volLabelFile
  1450 000040FD 7500                <1>     jne .notVolLabel    ;If not vol label, skip.
  1451                              <1>     ;Treat volume label creation case here. Free the SFT immediately
  1452                              <1>     ; and ensure the dir is flushed, and dpb updated (shouldn't make a difference).
  1453                              <1>     ;mov al, byte [workingDrv]
  1454                              <1>     ;mov byte [rebuildDrv], al
  1455                              <1>     ;mov byte [rebuildDrv], -1   ;TEMPORARY
  1456                              <1> .notVolLabel:
  1457 000040FF B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1458 00004104 FF15(2F010000)      <1>     call qword [updateDirShare]
  1459 0000410A E8D9310000          <1>     call dosCrit1Exit
  1460 0000410F E9F8FEFFFF          <1>     jmp openDriverMux
  1461                              <1> .errorExit:
  1462 00004114 E8CF310000          <1>     call dosCrit1Exit
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00004119 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> buildSFTEntry:
  1465                              <1> ;Called in a critical section.
  1466                              <1> ;Input: al = Open mode
  1467                              <1> ;       STACK: File attributes if creating a file
  1468                              <1> ;       [currentSFT] = SFT we are building
  1469                              <1> ;       [workingCDS] = CDS of drive to access
  1470                              <1> ;       [workingDPB] = DPB of drive to access
  1471                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1472                              <1> ;
  1473                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1474                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1475                              <1> ;        If CF=CY: - Return fail
  1476                              <1> ;
  1477                              <1> ;
  1478                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1479                              <1> ;   If not, create disk entry.
  1480                              <1> ;Check if the device was a char device by checking curDirCopy.
  1481                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1482                              <1> 
  1483                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1484                              <1> ; to start of file fields of the SFT
  1485 0000411A 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1486 0000411B 4889E5              <1>     mov rbp, rsp
  1487 0000411E 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  1488                              <1> ;Set the open mode
  1489 00004125 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1490                              <1> ;Get current time
  1491 00004129 E862EBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1492 0000412E E848ECFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1493 00004133 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1494                              <1> ;Set current Owner
  1495 00004136 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1496 0000413D 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1497                              <1> ;Set file pointer to first byte
  1498 00004141 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1499                              <1> ;Common fields set
  1500 00004148 F605(06070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1501 0000414F 0F849D010000        <1>     jz .openProc
  1502                              <1>     ;Here if Creating a file.
  1503 00004155 F605(03070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1504 0000415C 0F84D9000000        <1>     jz .createFile
  1505 00004162 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1506 00004169 0F858C010000        <1>     jnz .charDev
  1507 0000416F F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1508 00004176 0F85CD010000        <1>     jnz .bad    ;Make sure we are not recreating a directory as a file!
  1509                              <1>     ;Here disk file exists, so recreating the file.
  1510 0000417C 55                  <1>     push rbp
  1511 0000417D FF35(31070000)      <1>     push qword [currentSFT]
  1512 00004183 E8A2FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1513 00004188 8F05(31070000)      <1>     pop qword [currentSFT]
  1514 0000418E 5D                  <1>     pop rbp
  1515 0000418F 0F82B4010000        <1>     jc .bad
  1516                              <1>     ;al has the char for the filename
  1517                              <1>     ;Sets vars for the sector/offset into the sector
  1518 00004195 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1519 0000419C 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1520 0000419E 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1521                              <1>     ;al has file attributes.
  1522 000041A2 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1523 000041A4 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1524 000041A7 31C0                <1>     xor eax, eax
  1525                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1526 000041A9 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1527 000041AD 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1528 000041B1 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1529 000041B4 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1530 000041B7 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1531 000041BA 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1532 000041BD 57                  <1>     push rdi    ;Save SFT pointer
  1533 000041BE 488D3D(59060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1534 000041C5 B920000000          <1>     mov ecx, fatDirEntry_size
  1535 000041CA F3A4                <1>     rep movsb
  1536 000041CC E85AC6FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1537 000041D1 5F                  <1>     pop rdi
  1538                              <1> .createCommon:  ;rdi must point to the current SFT 
  1539                              <1>     ;Now populate the remaining SFT fields 
  1540 000041D2 488D35(59060000)    <1>     lea rsi, curDirCopy
  1541 000041D9 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1542 000041DC 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1543 000041DF 488B05(45070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1544 000041E6 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1545 000041EA 0FB705(4D070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1546 000041F1 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1547 000041F4 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1548 000041F7 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1549 000041FA 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1550 000041FD 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1551 00004201 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1552 00004205 C1E210              <1>     shl edx, 10h
  1553 00004208 09D0                <1>     or eax, edx
  1554 0000420A 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1555                              <1> 
  1556 0000420D 31C0                <1>     xor eax, eax
  1557                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1558 0000420F 8A05(08070000)      <1>     mov al, byte [workingDrv]
  1559 00004215 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1560 00004217 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1561 0000421B 488B05(09070000)    <1>     mov rax, qword [workingDPB]
  1562 00004222 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1563                              <1>     ;Last thing, copy the filename over
  1564                              <1>     ;Now save the name
  1565                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1566 00004226 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1567 0000422A 488D35(59060000)    <1>     lea rsi, curDirCopy
  1568 00004231 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1569 00004233 66A5                <1>     movsw
  1570 00004235 A4                  <1>     movsb
  1571                              <1>     ;SFT filled
  1572 00004236 E905010000          <1>     jmp .exit
  1573                              <1> .createFile:
  1574                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1575                              <1>     ;rsi points to current sda entry
  1576 0000423B 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1577                              <1>     ;Clear out the dir entry
  1578 00004242 57                  <1>     push rdi
  1579 00004243 B904000000          <1>     mov ecx, 4
  1580 00004248 31C0                <1>     xor eax, eax
  1581 0000424A F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1582 0000424D 5F                  <1>     pop rdi
  1583                              <1>     ;Copy the FCB name over    
  1584 0000424E 56                  <1>     push rsi
  1585 0000424F 57                  <1>     push rdi
  1586 00004250 B90B000000          <1>     mov ecx, 11
  1587 00004255 488D35(D8060000)    <1>     lea rsi, fcbName
  1588 0000425C F3A4                <1>     rep movsb   ;Move over the FCB name
  1589 0000425E 5F                  <1>     pop rdi
  1590 0000425F 5E                  <1>     pop rsi
  1591                              <1> 
  1592 00004260 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1593                              <1>     ;al has file attributes.
  1594 00004264 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1595 00004266 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1596 00004269 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1597 0000426C 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1598 0000426F 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1599 00004272 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1600                              <1> .searchForDirSpace:
  1601 00004278 8905(83070000)      <1>     mov dword [dirClustA], eax
  1602 0000427E 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1603 00004280 668905(87070000)    <1>     mov word [dirSect], ax
  1604 00004287 8905(89070000)      <1>     mov dword [dirEntry], eax
  1605 0000428D 57                  <1>     push rdi
  1606 0000428E E8D3DDFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1607 00004293 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1608 00004294 7328                <1>     jnc .dirEntryFnd
  1609 00004296 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1609 0000429E 0000                <1>
  1610 000042A0 0F84A3000000        <1>     je .bad ;Set CF and exit
  1611 000042A6 E805DFFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1612 000042AB 0F828F000000        <1>     jc .exit
  1613 000042B1 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1614 000042B6 0F848D000000        <1>     je .bad
  1615                              <1>     ;Else eax = Newly allocated cluster
  1616 000042BC EBBA                <1>     jmp short .searchForDirSpace
  1617                              <1> .dirEntryFnd:
  1618 000042BE 4887FE              <1>     xchg rdi, rsi
  1619 000042C1 B904000000          <1>     mov ecx, 4
  1620 000042C6 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1621 000042C9 E85DC5FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1622 000042CE 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1623 000042D5 E9F8FEFFFF          <1>     jmp .createCommon
  1624                              <1> .open:
  1625                              <1> ;curdircopy has a copy of the disk file directory
  1626                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1627 000042DA 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1628 000042E1 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1629                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1630 000042E8 E88CDDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1631 000042ED E9E0FEFFFF          <1>     jmp .createCommon
  1632                              <1> .openProc:
  1633                              <1>     ;Here if Opening a file. 
  1634                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1635                              <1>     ;This is taken care of by openMain.
  1636 000042F2 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1637 000042F9 74DF                <1>     jz .open
  1638                              <1> .charDev:
  1639 000042FB 488B05(59060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1640 00004302 E8212E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1641 00004307 7307                <1>     jnc .notBadCharDevName
  1642 00004309 B805000000          <1>     mov eax, errAccDen
  1643 0000430E EB30                <1>     jmp short .exit ;CF already set
  1644                              <1> .notBadCharDevName:
  1645 00004310 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  1646 00004317 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1647 0000431B 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1648 0000431F 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1649 00004322 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1650 00004325 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1651 00004329 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1652 00004330 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1653 00004334 B820202020          <1>     mov eax, "    "
  1654 00004339 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1655 0000433D 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1656                              <1> .exit:
  1657 00004340 E80B0A0000          <1>     call writeThroughBuffersForHandle
  1658 00004345 7207                <1>     jc .bad2
  1659 00004347 5D                  <1>     pop rbp
  1660                              <1>     return
    13                              <2> %%_ret:
    14 00004348 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1661                              <1> .bad:   ;Set Access Denied
  1662 00004349 B805000000          <1>     mov eax, errAccDen
  1663                              <1> .bad2:  ;Error propagating error code
  1664 0000434E E82D0A0000          <1>     call cancelWriteThroughBuffersForHandle
  1665 00004353 F9                  <1>     stc
  1666 00004354 5D                  <1>     pop rbp
  1667                              <1>     return
    13                              <2> %%_ret:
    14 00004355 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1668                              <1> 
  1669                              <1> closeMain: ;Int 2Fh AX=1201h
  1670                              <1> ;Gets the directory entry for a file
  1671                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1672                              <1> ;If CF=CY on return: Error, return error with al = error code
  1673                              <1> ;Preserve all regs except eax and rdi
  1674                              <1> ; If CF=NC on return: eax = Unknown
  1675                              <1> ;                     rdi = current SFT ptr
  1676 00004356 488B3D(31070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1677 0000435D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1678 00004363 7408                <1>     jz .physical
  1679                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1680 00004365 B806110000          <1>     mov eax, 1106h  ;Make request
  1681 0000436A CD2F                <1>     int 2Fh ;Beep!
  1682                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 0000436C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1683                              <1> .physical:  
  1684                              <1> ; We make a request to the dev dir to close the device
  1685                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1686 0000436D E86C2F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1687 00004372 53                  <1>     push rbx
  1688 00004373 56                  <1>     push rsi
  1689 00004374 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1690 00004378 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1691 0000437E 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1692                              <1>     ;rsi has DPB pointer here
  1693                              <1>     ;rdi has the SFT pointer
  1694 00004380 55                  <1>     push rbp
  1695 00004381 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1696 00004384 E8382A0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1697 00004389 E865DDFFFF          <1>     call updateDirectoryEntryForFile
  1698 0000438E 5D                  <1>     pop rbp
  1699                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1700 0000438F 7234                <1>     jc .exit
  1701 00004391 E869C6FFFF          <1>     call flushFile
  1702 00004396 722D                <1>     jc .exit    ;If something went wrong, exit
  1703 00004398 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1704 0000439C 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1705                              <1> .charClose:
  1706                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1707                              <1>     ;We now decrement handle count in SFT structure
  1708 000043A0 E89C090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1709 000043A5 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1710 000043A8 7503                <1>     jnz .driverClose
  1711 000043AA 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1712                              <1> .driverClose:
  1713 000043AD 50                  <1>     push rax
  1714 000043AE 51                  <1>     push rcx
  1715 000043AF E84B370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1716 000043B4 59                  <1>     pop rcx
  1717 000043B5 58                  <1>     pop rax
  1718 000043B6 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1719                              <1>     ;and if the device is a disk device, cl will have the unit number
  1720 000043B7 9C                  <1>     pushfq
  1721 000043B8 E8CADFFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1722 000043BD 9D                  <1>     popfq
  1723 000043BE E88D090000          <1>     call writeThroughBuffersForHandle
  1724 000043C3 7306                <1>     jnc short .exitOk
  1725                              <1> .exit:
  1726 000043C5 E8B6090000          <1>     call cancelWriteThroughBuffersForHandle
  1727 000043CA F9                  <1>     stc
  1728                              <1> .exitOk:
  1729 000043CB 5E                  <1>     pop rsi
  1730 000043CC 5B                  <1>     pop rbx
  1731 000043CD E8162F0000          <1>     call dosCrit1Exit
  1732                              <1>     return
    13                              <2> %%_ret:
    14 000043D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1733                              <1> 
  1734                              <1> readBytes:
  1735                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1736                              <1> ;Input: ecx = Number of bytes to read
  1737                              <1> ;Output: ecx = Number of bytes read
  1738                              <1> ;Number of bytes read 
  1739                              <1> ;If CF=CY, return with error code in ax
  1740 000043D3 E862070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1741 000043D8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1742 000043DC 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1743 000043DE 3C01                <1>     cmp al, WriteAccess
  1744 000043E0 7509                <1>     jne .readable
  1745 000043E2 B805000000          <1>     mov eax, errAccDen
  1746 000043E7 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1747 000043E9 F9                  <1>     stc
  1748                              <1>     return
    13                              <2> %%_ret:
    14 000043EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1749                              <1> .readable:
  1750 000043EB E88C070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1751 000043F0 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1752 000043F3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1753 000043F9 740A                <1>     jz .notRedir
  1754 000043FB B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1755 00004400 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1756                              <1>     return 
    13                              <2> %%_ret:
    14 00004402 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1757                              <1> .exitOk:
  1758 00004403 F8                  <1>     clc
  1759                              <1>     return 
    13                              <2> %%_ret:
    14 00004404 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1760                              <1> .notRedir:
  1761 00004405 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1762 0000440B 7510                <1>     jnz readCharDev
  1763 0000440D E8CC2E0000          <1>     call dosCrit1Enter
  1764 00004412 E89A010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1765 00004417 E8CC2E0000          <1>     call dosCrit1Exit
  1766                              <1>     return 
    13                              <2> %%_ret:
    14 0000441C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1767                              <1> readCharDev:
  1768                              <1> ;rdi points to sft for char dev to read
  1769                              <1> ;ecx has the number of bytes to transfer
  1770                              <1> ;Vars have been set up and DTA has the transfer address
  1771                              <1> ;Returns in ecx, the actual bytes transferred
  1772                              <1> ;If CF=CY, return with error code in ax
  1773 0000441D C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1774 00004424 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1775 00004428 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1776 0000442F F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1777 00004432 0F84CF020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1778 00004438 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1779 0000443B 7407                <1>     jz .notNul
  1780                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1781                              <1>     ;NUL never transfers bytes 
  1782 0000443D 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1783 0000443F E9C3020000          <1>     jmp readExitOk    ;Goto exit
  1784                              <1> .notNul:
  1785 00004444 F6C320              <1>     test bl, charDevBinary
  1786 00004447 757F                <1>     jnz .binary
  1787                              <1>     ;Here if the device is in ASCII mode
  1788 00004449 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1789 0000444C 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1790                              <1> .consoleInput:
  1791                              <1>     ;Console input here
  1792 00004452 E822E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1793                              <1>     ;Get current offset into buffer (if one exists)
  1794 00004457 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1795 0000445E 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1796 00004461 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1797 00004463 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1798 0000446A 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1799                              <1>     ;Else, reset the buffer
  1800 0000446C 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1800 00004474 FF                  <1>
  1801                              <1> .oldBuf:
  1802                              <1> ;Preserve the dta and number of chars to tfr
  1803 00004475 51                  <1>     push rcx
  1804 00004476 57                  <1>     push rdi
  1805 00004477 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1806 0000447E E816E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1807 00004483 5F                  <1>     pop rdi
  1808 00004484 59                  <1>     pop rcx
  1809 00004485 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1810 0000448C 803E1A              <1>     cmp byte [rsi], EOF
  1811 0000448F 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1812 00004491 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1813 00004494 B00A                <1>     mov al, LF
  1814 00004496 E879DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1815 0000449B 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1816 0000449D EB18                <1>     jmp short .exit
  1817                              <1> .tfrBuf:
  1818 0000449F AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1819 000044A0 AA                  <1>     stosb
  1820 000044A1 3C0D                <1>     cmp al, CR 
  1821 000044A3 7503                <1>     jne .noCRLF
  1822 000044A5 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1823                              <1> .noCRLF:
  1824 000044A8 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1825 000044AA E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1826 000044AC 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1827                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1828 000044AE E861DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1829 000044B3 31F6                <1>     xor esi, esi
  1830 000044B5 0C01                <1>     or al, 1    ;Set ZF = NZ
  1831                              <1> .exit:
  1832 000044B7 E8D5E3FFFF          <1>     call vConRetDriver
  1833 000044BC 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1834 000044C3 E93F020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1835                              <1> 
  1836                              <1> .binary:
  1837                              <1>     ;Setup registers for transfer
  1838 000044C8 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1839 000044CB 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1840                              <1>     ;ecx has the number of bytes to transfer directly
  1841 000044CE E80C280000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1842 000044D3 488B35(09070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1843 000044DA E8E2240000          <1>     call goDriver   ;Make the request
  1844 000044DF 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1845 000044E2 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1846 000044E9 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1847 000044EF 7422                <1>     jz .binNoError
  1848                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1849 000044F1 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1850 000044F3 E8941E0000          <1>     call charDevErr   ;ah = has part of the error 
  1851                              <1>     ;al now has the response
  1852 000044F8 3C00                <1>     cmp al, critIgnore
  1853 000044FA 7417                <1>     je .binNoError ;Simply proceed as normal
  1854 000044FC 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1855 000044FF 3C03                <1>     cmp al, critFail
  1856 00004501 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1857                              <1>     ;Fallthrough here for fail!
  1858                              <1> .failExit:
  1859 00004503 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1860 0000450A 31C9                <1>     xor ecx, ecx
  1861 0000450C B805000000          <1>     mov eax, errAccDen
  1862 00004511 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1863                              <1>     return
    13                              <2> %%_ret:
    14 00004512 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1864                              <1> .binNoError:
  1865                              <1>     ;Get number of bytes transferred into 
  1866 00004513 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1867 00004519 F7D8                <1>     neg eax ;make it into -eax
  1868 0000451B 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1869                              <1>     ;ecx now has bytes left to transfer
  1870 0000451F 50                  <1>     push rax    ;Save value on stack
  1871 00004520 31C0                <1>     xor eax, eax ;Set ZF
  1872 00004522 FFC0                <1>     inc eax ;Clear ZF
  1873 00004524 58                  <1>     pop rax ;Get back the original value
  1874 00004525 E9DD010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1875                              <1> .generalASCII:
  1876                              <1>     ;ecx has bytes to transfer here
  1877                              <1>     ;Setup registers for transfer
  1878 0000452A 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1879 0000452D 51                  <1>     push rcx
  1880 0000452E B901000000          <1>     mov ecx, 1  ;Get one char
  1881 00004533 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1882 00004536 E8A4270000          <1>     call primReqReadSetup   ;Setup request
  1883 0000453B 59                  <1>     pop rcx
  1884                              <1>     ;rbx now has request header ptr
  1885 0000453C 488B35(09070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1886                              <1> .asciiReadChar:
  1887 00004543 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1888 00004546 E8B2E2FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1889 0000454B E871240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1890 00004550 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1891 00004557 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1892 0000455D 7420                <1>     jz .asciiNoError
  1893 0000455F B486                <1>     mov ah, critCharDev | critData
  1894 00004561 E8261E0000          <1>     call charDevErr    ;Call Int 24h
  1895                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1896 00004566 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1896 0000456E 0000                <1>
  1897 00004570 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1898 00004573 3C03                <1>     cmp al, critFail
  1899 00004575 748C                <1>     je .failExit
  1900 00004577 3C01                <1>     cmp al, critRetry
  1901 00004579 74C8                <1>     je .asciiReadChar
  1902                              <1>     ;Ignore here, pretend NULL CHAR was read
  1903 0000457B 30C0                <1>     xor al, al
  1904 0000457D EB15                <1>     jmp short .asciiIgnoreEP
  1905                              <1> .asciiNoError:
  1906                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1907                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1908                              <1> ;Preserve RBX, RSI
  1909                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1910 0000457F 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1911 00004582 813D(D6040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1911 0000458A 0000                <1>
  1912 0000458C 0F8575010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1913 00004592 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1914                              <1> .asciiIgnoreEP:
  1915 00004594 48FF05(CE040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1916 0000459B 48FFC7              <1>     inc rdi ;Also advance register pointer
  1917 0000459E 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1918 000045A0 0F8461010000        <1>     je readExitOk
  1919 000045A6 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1920 000045A8 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1921                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1922 000045AA FEC0                <1>     inc al  ;make ZF=NZ
  1923 000045AC E956010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1924                              <1> 
  1925                              <1> readDiskFile:
  1926                              <1> ;rdi = Current SFT
  1927                              <1> ;rbp = WorkingDPB
  1928                              <1> ;ecx = Bytes to transfer
  1929 000045B1 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1930 000045B8 C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1931                              <1>     ;We have the following vars setup:
  1932                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1933                              <1>     ;currClustF
  1934                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1935                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1936 000045BF 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1937 000045C2 85D2                <1>     test edx, edx
  1938 000045C4 0F843D010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1939 000045CA 8B15(4F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1940 000045D0 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1941 000045D3 8905(53070000)      <1>     mov dword [currClustD], eax
  1942 000045D9 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1943 000045DB 0F8426010000        <1>     jz readExitOk
  1944 000045E1 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1945 000045E6 0F841B010000        <1>     jz readExitOk   
  1946 000045EC 8B0D(77070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1947                              <1>     ;Check if we have opened a volume label (should never happen)
  1948 000045F2 F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  1949 000045F6 7407                <1>     jz .shareCheck
  1950 000045F8 B805000000          <1>     mov eax, errAccDen
  1951 000045FD F9                  <1>     stc
  1952                              <1>     return
    13                              <2> %%_ret:
    14 000045FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1953                              <1> .shareCheck:
  1954                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1955 000045FF E802350000          <1>     call retryShareIODelay
  1956 00004604 7308                <1>     jnc .shareOk
  1957 00004606 E898350000          <1>     call shareCheckReadLockViolation
  1958 0000460B 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1959                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 0000460D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1960                              <1> .shareOk:
  1961 0000460E E8D3C0FFFF          <1>     call markBuffersAsUnreferencedWrapper
  1962 00004613 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1963 00004615 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1964 00004617 7426                <1>     jz .skipWalk
  1965                              <1> .goToCurrentCluster:
  1966 00004619 E8A5C6FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1967 0000461E 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  1968 00004624 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1969 00004629 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1970 0000462F 8905(53070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1971 00004635 FFCA                <1>     dec edx ;Decrement counter
  1972 00004637 75E0                <1>     jnz .goToCurrentCluster
  1973                              <1> ;Now we fall out with ebx = Current cluster
  1974 00004639 8B05(53070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1975                              <1>     ;mov eax, ebx
  1976                              <1> .skipWalk:
  1977 0000463F E87DC4FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1978                              <1>     ;Now we add the offset to this
  1979 00004644 0FB61D(5B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1980 0000464B 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1981 0000464E 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1982                              <1> ;Main
  1983                              <1> .mainRead:
  1984 00004655 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1985 0000465C 7407                <1>     jz .mainReadNoBreak
  1986 0000465E 50                  <1>     push rax
  1987 0000465F E899E1FFFF          <1>     call checkBreak
  1988 00004664 58                  <1>     pop rax
  1989                              <1> .mainReadNoBreak:
  1990 00004665 E871C3FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  1991 0000466A 0F8288000000        <1>     jc .badExit
  1992 00004670 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1993 00004674 0FB71D(64070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1994 0000467B 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1995                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1996                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  1997                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  1998                              <1> 
  1999 0000467E 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2000 00004681 2B0D(66070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2001 00004687 8B1D(7B070000)      <1>     mov ebx, dword [tfrCntr]
  2002 0000468D 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2003 0000468F 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2004 00004692 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2005 00004696 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2006 00004698 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2007                              <1>     
  2008 0000469B 57                  <1>     push rdi
  2009 0000469C 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2010 000046A3 51                  <1>     push rcx
  2011 000046A4 F3A4                <1>     rep movsb
  2012 000046A6 59                  <1>     pop rcx
  2013 000046A7 010D(66070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2014 000046AD 290D(7B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2015 000046B3 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2016 000046BA 8B05(66070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2017 000046C0 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2018 000046C4 31D2                <1>     xor edx, edx    ;Zero rdx
  2019 000046C6 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2020 000046C8 668915(64070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2021 000046CF 5F                  <1>     pop rdi
  2022 000046D0 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2023 000046D6 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2024 000046D8 742D                <1>     jz readExitOk ;Exit if so!
  2025 000046DA E845C5FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2026 000046DF 7217                <1>     jc .badExit
  2027                              <1>     ;If ZF=ZE then currClustF has last cluster
  2028 000046E1 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2029                              <1>     ;Else repeat
  2030                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2031 000046E3 66C705(64070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2031 000046EB 00                  <1>
  2032 000046EC 488B05(5C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2033 000046F3 E95DFFFFFF          <1>     jmp .mainRead
  2034                              <1> .badExit:
  2035                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2036                              <1>     ; we need to update the SFT before returning
  2037 000046F8 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2038 000046FE 30C0                <1>     xor al, al  ;Set ZF flag
  2039 00004700 E802000000          <1>     call readExitOk   ;We call this
  2040 00004705 F9                  <1>     stc ;All calls which end up here return Fail!
  2041 00004706 C3                  <1>     ret
  2042                              <1> 
  2043                              <1> readExitOk:
  2044                              <1> ;Input: ecx = Number of bytes left to transfer!
  2045                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2046 00004707 890D(7B070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2047                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2048                              <1>     ;jnz .skipbitClear
  2049                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2050                              <1>     ;The disk transfer must've flushed by now. 
  2051                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2052                              <1> .skipbitClear:  ;Or skip that entirely
  2053 0000470D E830040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2054                              <1>     return 
    13                              <2> %%_ret:
    14 00004712 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2055                              <1> 
  2056                              <1> writeBytes:
  2057                              <1> ;Writes the bytes from the user buffer
  2058                              <1> ;Input: ecx = Bytes to xfr
  2059                              <1> ;Returns number of bytes written in ecx if CF=NC
  2060 00004713 E822040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2061 00004718 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2062 0000471C 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2063 0000471E 3C00                <1>     cmp al, ReadAccess
  2064 00004720 7509                <1>     jne .writeable
  2065                              <1> .noWrite:
  2066 00004722 B805000000          <1>     mov eax, errAccDen
  2067 00004727 31C9                <1>     xor ecx, ecx
  2068 00004729 F9                  <1>     stc
  2069 0000472A C3                  <1>     ret
  2070                              <1> .writeable:
  2071 0000472B 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2072 00004731 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2073 00004733 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2074 00004737 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2075                              <1> .skipAttribCheck:
  2076 00004739 E83E040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2077 0000473E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2078 00004744 7408                <1>     jz .notRedir
  2079 00004746 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2080 0000474B CD2F                <1>     int 2Fh
  2081                              <1>     return
    13                              <2> %%_ret:
    14 0000474D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2082                              <1> .notRedir:
  2083 0000474E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2084 00004754 7510                <1>     jnz writeCharDev
  2085 00004756 E8832B0000          <1>     call dosCrit1Enter
  2086 0000475B E84C010000          <1>     call writeDiskFile
  2087 00004760 E8832B0000          <1>     call dosCrit1Exit
  2088                              <1>     return
    13                              <2> %%_ret:
    14 00004765 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2089                              <1> writeCharDev:
  2090 00004766 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2091                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2092 0000476D 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2093 00004773 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2094                              <1>     ;If ecx = 0, we exit
  2095 00004777 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2096 00004779 85C9                <1>     test ecx, ecx
  2097 0000477B 0F84A1030000        <1>     jz writeExitChar
  2098 00004781 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2099 00004788 4889DF              <1>     mov rdi, rbx
  2100 0000478B 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2101 0000478D A820                <1>     test al, charDevBinary
  2102 0000478F 744A                <1>     jz .asciiDev
  2103                              <1> ;Write binary transfer here
  2104                              <1> .binaryLp:
  2105 00004791 31C0                <1>     xor eax, eax
  2106 00004793 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2107 00004796 E839250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2108 0000479B 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2109 000047A2 E816220000          <1>     call goDriverChar
  2110 000047A7 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2111 000047AA B487                <1>     mov ah, critCharDev | critData | critWrite
  2112 000047AC 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2113 000047B3 F7C700800000        <1>     test edi, drvErrStatus
  2114 000047B9 7415                <1>     jz .binXfrOk
  2115 000047BB E8CC1B0000          <1>     call charDevErr ;Invoke Int 24h
  2116 000047C0 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2117 000047C3 3C00                <1>     cmp al, critIgnore
  2118 000047C5 7409                <1>     je .binXfrOk
  2119 000047C7 3C01                <1>     cmp al, critRetry
  2120 000047C9 74C6                <1>     je .binaryLp
  2121 000047CB E9D5000000          <1>     jmp .exitFail
  2122                              <1> .binXfrOk:
  2123 000047D0 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2124 000047D6 E947030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2125                              <1> .asciiDev:
  2126 000047DB A802                <1>     test al, charDevConOut
  2127 000047DD 0F859E000000        <1>     jnz .conDev
  2128 000047E3 A804                <1>     test al, charDevNulDev
  2129 000047E5 0F858F000000        <1>     jnz .nulDev
  2130                              <1>     ;Here we transfer for a generic character device in ascii mode
  2131 000047EB 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2132 000047ED 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2133 000047F0 0F842C030000        <1>     je writeExitChar
  2134 000047F6 51                  <1>     push rcx
  2135 000047F7 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2136 000047FC 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2137 000047FF E8D0240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2138 00004804 59                  <1>     pop rcx
  2139 00004805 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2140 0000480C 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2141                              <1> .asciiLp:
  2142 00004810 E8E8DFFFFF          <1>     call checkBreak
  2143 00004815 E8A7210000          <1>     call goDriver
  2144 0000481A 57                  <1>     push rdi
  2145 0000481B B487                <1>     mov ah, critCharDev | critData | critWrite
  2146 0000481D 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2147 00004824 F7C700800000        <1>     test edi, drvErrStatus
  2148 0000482A 741D                <1>     jz .asciiNoError
  2149 0000482C E85B1B0000          <1>     call charDevErr ;Invoke Int 24h
  2150 00004831 5F                  <1>     pop rdi
  2151 00004832 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2151 0000483A 0000                <1>
  2152 0000483C 3C01                <1>     cmp al, critRetry
  2153 0000483E 74D0                <1>     je .asciiLp
  2154 00004840 3C00                <1>     cmp al, critIgnore
  2155 00004842 7412                <1>     je .ignoreEp
  2156 00004844 E95C000000          <1>     jmp .exitFail
  2157                              <1> .asciiNoError:
  2158 00004849 5F                  <1>     pop rdi
  2159 0000484A 813D(D6040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2159 00004852 0000                <1>
  2160 00004854 741D                <1>     je .bytesXfrdOk
  2161                              <1> .ignoreEp:
  2162 00004856 FFC2                <1>     inc edx ;One more char has been xfrd
  2163 00004858 FF05(CE040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2164 0000485E 48FFC7              <1>     inc rdi ;And our copy... 
  2165 00004861 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2166 00004864 740D                <1>     je .bytesXfrdOk
  2167 00004866 66C705(C3040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2167 0000486E 00                  <1>
  2168 0000486F FFC9                <1>     dec ecx
  2169 00004871 759D                <1>     jnz .asciiLp
  2170                              <1> .bytesXfrdOk:
  2171 00004873 89D0                <1>     mov eax, edx
  2172 00004875 E9A8020000          <1>     jmp writeExitChar
  2173                              <1> .nulDev:
  2174 0000487A 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2175 0000487C E9A1020000          <1>     jmp writeExitChar
  2176                              <1> .conDev:
  2177 00004881 E8F3DFFFFF          <1>     call vConSwapDriver
  2178 00004886 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2179 00004889 51                  <1>     push rcx
  2180                              <1> .conDevLp:
  2181 0000488A AC                  <1>     lodsb
  2182 0000488B 3C1A                <1>     cmp al, EOF
  2183 0000488D 7409                <1>     je .conDevExit
  2184 0000488F E880DBFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2185 00004894 FFC9                <1>     dec ecx
  2186 00004896 75F2                <1>     jnz .conDevLp
  2187                              <1> .conDevExit:
  2188 00004898 58                  <1>     pop rax ;Get initial ecx back into eax
  2189 00004899 29C8                <1>     sub eax, ecx
  2190 0000489B E8F1DFFFFF          <1>     call vConRetDriver
  2191 000048A0 E97D020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2192                              <1> .exitFail:
  2193 000048A5 B805000000          <1>     mov eax, errAccDen
  2194 000048AA F9                  <1>     stc
  2195                              <1>     return
    13                              <2> %%_ret:
    14 000048AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2196                              <1> writeDiskFile:
  2197                              <1>     ;rdi has SFT ptr
  2198 000048AC 8B0D(77070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2199 000048B2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2200 000048B9 C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2201 000048C0 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2202 000048C6 0F85E5010000        <1>     jnz .badExit
  2203 000048CC 85C9                <1>     test ecx, ecx
  2204 000048CE 7505                <1>     jnz .nonZeroWrite
  2205 000048D0 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2206                              <1> .nonZeroWrite:
  2207                              <1>     ;Now do share check here
  2208 000048D5 E82C320000          <1>     call retryShareIODelay
  2209 000048DA 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2210 000048DC E8B9320000          <1>     call shareCheckWriteLockViolation
  2211 000048E1 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2212                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 000048E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2213                              <1> .proceedWithWrite:
  2214                              <1> ;Ensure that all buffers are now unreferenced
  2215 000048E4 E8FDBDFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2216 000048E9 31DB                <1>     xor ebx, ebx
  2217 000048EB 891D(73070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2218 000048F1 881D(72070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2219 000048F7 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2220                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2221 000048FA 85C0                <1>     test eax, eax
  2222 000048FC 7520                <1>     jnz .notStart
  2223 000048FE E838C2FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2224 00004903 0F82AD010000        <1>     jc .exitPrepHardErr
  2225 00004909 3DFFFFFFFF          <1>     cmp eax, -1
  2226 0000490E 0F84D7010000        <1>     je writeExit
  2227                              <1>     ;Now eax has the first cluster of chain
  2228 00004914 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2229 00004917 C605(72070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2230                              <1> .notStart:
  2231                              <1> ;eax has the start cluster of the file
  2232                              <1> ;Now we go to CurntOff
  2233 0000491E 8905(53070000)      <1>     mov dword [currClustD], eax ;Store in var
  2234 00004924 31DB                <1>     xor ebx, ebx
  2235 00004926 8B15(4F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2236 0000492C 85D2                <1>     test edx, edx
  2237 0000492E 7458                <1>     jz .skipWalk
  2238                              <1> .goToCurrentCluster:
  2239 00004930 E88EC3FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2240 00004935 0F827B010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2241 0000493B 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2242 00004940 7536                <1>     jne .stillInFile
  2243                              <1> .addCluster:
  2244                              <1>     ;Here we extend by one cluster
  2245 00004942 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2246 00004948 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2247 0000494A B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2248 0000494F E80DC2FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2249 00004954 0F825C010000        <1>     jc .exitPrepHardErr
  2250 0000495A 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2251 0000495C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2252 00004960 010D(73070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2253 00004966 C605(72070000)FF    <1>     mov byte [fileGrowing], -1
  2254 0000496D E851C3FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2255 00004972 0F823E010000        <1>     jc .exitPrepHardErr
  2256                              <1> .stillInFile:
  2257 00004978 8905(53070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2258 0000497E FFCA                <1>     dec edx ;Decrement counter
  2259 00004980 75AE                <1>     jnz .goToCurrentCluster
  2260                              <1> ;Now we fall out
  2261 00004982 8B05(53070000)      <1>     mov eax, dword [currClustD]
  2262                              <1> .skipWalk:
  2263 00004988 E834C1FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2264                              <1>     ;Now we add the offset to this
  2265 0000498D 0FB61D(5B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2266 00004994 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2267 00004997 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2268 0000499E 8B0D(77070000)      <1>     mov ecx, dword [tfrLen]
  2269 000049A4 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2270 000049A6 751F                <1>     jnz .mainWrite  
  2271                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2272 000049A8 F605(72070000)FF    <1>     test byte [fileGrowing], -1
  2273 000049AF 750B                <1>     jnz .extend
  2274                              <1> ;Here we truncate where needed
  2275 000049B1 8B05(53070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2276 000049B7 E8D8C2FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2277                              <1> .extend:
  2278 000049BC 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2279 000049BF 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2280 000049C2 E919010000          <1>     jmp .noByteExit ;Exit ok!
  2281                              <1> .mainWrite:
  2282 000049C7 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2283 000049CE 7407                <1>     jz .mainWriteNoBreak
  2284 000049D0 50                  <1>     push rax
  2285 000049D1 E827DEFFFF          <1>     call checkBreak
  2286 000049D6 58                  <1>     pop rax
  2287                              <1> .mainWriteNoBreak:
  2288                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2289 000049D7 E8FFBFFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2290 000049DC 0F82CF000000        <1>     jc .badExit
  2291 000049E2 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2292 000049E6 0FB71D(64070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2293 000049ED 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2294                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2295                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2296                              <1>     ; 3) Number of bytes left free in the sector
  2297 000049F0 31C0                <1>     xor eax, eax
  2298 000049F2 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2299 000049F6 89D8                <1>     mov eax, ebx
  2300 000049F8 662B05(64070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2301 000049FF 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]
  2302                              <1> 
  2303 00004A05 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2304 00004A07 0F47CB              <1>     cmova ecx, ebx
  2305 00004A0A 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2306 00004A0C 0F47C8              <1>     cmova ecx, eax
  2307                              <1> 
  2308 00004A0F 56                  <1>     push rsi
  2309 00004A10 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2310 00004A17 51                  <1>     push rcx
  2311 00004A18 F3A4                <1>     rep movsb
  2312 00004A1A 59                  <1>     pop rcx
  2313 00004A1B E80BBEFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2314                              <1> 
  2315 00004A20 010D(66070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2316 00004A26 290D(7B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2317 00004A2C 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2318 00004A33 5E                  <1>     pop rsi
  2319                              <1> 
  2320 00004A34 8B05(77070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2321 00004A3A 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2322 00004A40 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2323 00004A42 0F84A3000000        <1>     jz writeExit
  2324 00004A48 E8D7C1FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2325 00004A4D 7267                <1>     jc .exitPrepHardErr
  2326 00004A4F 3DFFFFFFFF          <1>     cmp eax, -1
  2327 00004A54 7535                <1>     jne .noExtend
  2328                              <1>     ;Here we need to extend by a cluster
  2329 00004A56 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2330 00004A5C 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2331 00004A5E B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2332 00004A63 E8F9C0FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2333 00004A68 724C                <1>     jc .exitPrepHardErr
  2334 00004A6A 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2335 00004A6C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2336 00004A70 011D(73070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2337 00004A76 C605(72070000)FF    <1>     mov byte [fileGrowing], -1
  2338 00004A7D E8A2C1FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2339 00004A82 7232                <1>     jc .exitPrepHardErr
  2340 00004A84 3DFFFFFFFF          <1>     cmp eax, -1
  2341 00004A89 7415                <1>     je .noMoreClusters
  2342                              <1> .noExtend:
  2343 00004A8B 66C705(64070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2343 00004A93 00                  <1>
  2344 00004A94 488B05(5C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2345 00004A9B E927FFFFFF          <1>     jmp .mainWrite
  2346                              <1> .noMoreClusters:
  2347 00004AA0 56                  <1>     push rsi
  2348 00004AA1 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2349 00004AA8 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2350 00004AAE 5E                  <1>     pop rsi
  2351 00004AAF 7400                <1>     jz .badExit
  2352                              <1>     ;Here we future proof for triggering Int 24h.
  2353                              <1> .badExit:
  2354 00004AB1 B805000000          <1>     mov eax, errAccDen
  2355                              <1> .exitPrepHardErr:
  2356                              <1> ;Here we take stock of the buffers that are dirty and referenced. All dirty 
  2357                              <1> ; buffers get freed. We do NOT update the SFT or the dir entry for this file
  2358                              <1> ; write.
  2359 00004AB6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
  2360                              <1> .badExitLp:
  2361 00004ABD 8A4F09              <1>     mov cl, byte [rdi + bufferHdr.bufferFlags]
  2362 00004AC0 80E160              <1>     and cl, refBuffer | dirtyBuffer
  2363 00004AC3 740B                <1>     jz .badExitGotoNextBuffer
  2364 00004AC5 F6C120              <1>     test cl, refBuffer  ;Don't touch dirty buffers that are not ours
  2365 00004AC8 7406                <1>     jz .badExitGotoNextBuffer
  2366                              <1>     ;Here the ref and dirty bits are set, we lose this data
  2367 00004ACA 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer   ;Free buffer and clear flags
  2368                              <1> .badExitGotoNextBuffer:
  2369 00004AD0 E833BCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Push to front of list, get next
  2370 00004AD5 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2371 00004ADC 75DF                <1>     jne .badExitLp
  2372 00004ADE F9                  <1>     stc
  2373                              <1>     return
    13                              <2> %%_ret:
    14 00004ADF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2374                              <1> .noByteExit:
  2375 00004AE0 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2376 00004AE5 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2377                              <1> writeExit:
  2378                              <1> ;Advances the bytes on the file pointer
  2379                              <1> ;Return: ecx = Number of bytes transferred
  2380 00004AEB 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2381 00004AF2 E84B000000          <1>     call updateCurrentSFT
  2382 00004AF7 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2383 00004AF9 7404                <1>     jz .noFlush
  2384 00004AFB 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2385                              <1> .noFlush:
  2386 00004AFF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2387 00004B05 750E                <1>     jnz .exit
  2388 00004B07 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2389 00004B0A 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2390 00004B0D 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2391 00004B0F 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2392 00004B12 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2393                              <1> .exit:
  2394 00004B15 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2395 00004B1A FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2396 00004B20 F8                  <1>     clc
  2397                              <1>     return
    13                              <2> %%_ret:
    14 00004B21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2398                              <1> writeExitChar:
  2399                              <1> ;Input: eax = Number of chars transferred
  2400 00004B22 8B0D(77070000)      <1>     mov ecx, dword [tfrLen]
  2401 00004B28 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2402 00004B2A 890D(7B070000)      <1>     mov dword [tfrCntr], ecx
  2403 00004B30 EBB9                <1>     jmp short writeExit
  2404                              <1> ;-----------------------------------:
  2405                              <1> ;        File Handle routines       :
  2406                              <1> ;-----------------------------------:
  2407                              <1> 
  2408                              <1> setCurrentSFT:
  2409                              <1> ;Set the pointer in rdi as current SFT 
  2410 00004B32 48893D(31070000)    <1>     mov qword [currentSFT], rdi
  2411                              <1>     return 
    13                              <2> %%_ret:
    14 00004B39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2412                              <1> getCurrentSFT:
  2413                              <1> ;Get the current SFT pointer in rdi
  2414 00004B3A 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2415                              <1>     return 
    13                              <2> %%_ret:
    14 00004B41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2416                              <1> updateCurrentSFT:
  2417                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2418                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2419 00004B42 57                  <1>     push rdi
  2420 00004B43 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2421 00004B4A E8BF010000          <1>     call getBytesTransferred
  2422 00004B4F 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2423                              <1>     ;ecx has bytes transferred
  2424 00004B52 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2425 00004B58 751F                <1>     jnz .exit
  2426 00004B5A 50                  <1>     push rax
  2427 00004B5B 8B05(53070000)      <1>     mov eax, dword [currClustD]
  2428 00004B61 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2429 00004B64 8B05(4F070000)      <1>     mov eax, dword [currClustF]
  2430 00004B6A 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2431 00004B6D 58                  <1>     pop rax
  2432 00004B6E 51                  <1>     push rcx
  2433 00004B6F 8B0D(66070000)      <1>     mov ecx, dword [currByteF]
  2434 00004B75 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2435 00004B78 59                  <1>     pop rcx
  2436                              <1> .exit:
  2437 00004B79 5F                  <1>     pop rdi
  2438 00004B7A F8                  <1>     clc
  2439                              <1>     return 
    13                              <2> %%_ret:
    14 00004B7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2440                              <1> 
  2441                              <1> setupVarsForTransfer:
  2442                              <1> ;Computes the actual bytes to be transferred and 
  2443                              <1> ; sets up internal variables for the transfer. 
  2444                              <1> ;Works for both reading and writing
  2445                              <1> ;Input: ecx = User desired Bytes to transfer
  2446                              <1> ;       rdi = SFT pointer for the file
  2447                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2448                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2449                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2450                              <1> ;
  2451                              <1> ;Note: Does not account for a FULL disk. When writing,
  2452                              <1> ; if the disk will get full as a result of the write,
  2453                              <1> ; stop at the last byte before the transfer. If the 
  2454                              <1> ; file pointer is past the last free byte, write 0
  2455 00004B7C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2456 00004B80 488935(09070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2457 00004B87 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2458 00004B8A 8905(66070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2459 00004B90 890D(77070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2460 00004B96 890D(7B070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2461 00004B9C 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2462 00004BA2 7402                <1>     jz setupVarsForDiskTransfer
  2463 00004BA4 F8                  <1>     clc
  2464                              <1>     return
    13                              <2> %%_ret:
    14 00004BA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2465                              <1> setupVarsForDiskTransfer:
  2466                              <1> ;Extension of the above, but for Disk files only
  2467                              <1> ;Input: ecx = User desired Bytes to transfer
  2468                              <1> ;       rdi = SFT pointer for the file
  2469                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2470                              <1> ;        CF=CY: Error exit
  2471 00004BA6 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2472 00004BA9 8905(66070000)      <1>     mov dword [currByteF], eax
  2473 00004BAF 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2474                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2475 00004BB3 48892D(09070000)    <1>     mov qword [workingDPB], rbp
  2476 00004BBA 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2477 00004BBD 881D(08070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2478 00004BC3 8B05(66070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2479 00004BC9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2480 00004BCD 31D2                <1>     xor edx, edx    ;Zero rdx
  2481 00004BCF F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2482                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2483                              <1>     ;edx has the offset into that sector
  2484 00004BD1 8905(57070000)      <1>     mov dword [currSectF], eax
  2485 00004BD7 668915(64070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2486 00004BDE 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2487 00004BE0 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2488 00004BE3 8805(5B070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2489 00004BE9 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2490 00004BEB 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2491 00004BEE D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2492 00004BF0 8915(4F070000)      <1>     mov dword [currClustF], edx ;Save in var
  2493 00004BF6 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2494                              <1> .exit:
  2495 00004BF8 F8                  <1>     clc
  2496                              <1>     return 
    13                              <2> %%_ret:
    14 00004BF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2497                              <1> findFreeSFT:
  2498                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2499                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2500                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2501                              <1> ;        CF=CY => eax = errNhl, error exit
  2502 00004BFA 31DB                <1>     xor ebx, ebx
  2503                              <1> .mainLp:
  2504 00004BFC 53                  <1>     push rbx    ;Save the sft ndx
  2505 00004BFD E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2506 00004C02 5B                  <1>     pop rbx
  2507 00004C03 7307                <1>     jnc .sftExists
  2508 00004C05 B804000000          <1>     mov eax, errNhl
  2509 00004C0A F9                  <1>     stc
  2510                              <1>     return
    13                              <2> %%_ret:
    14 00004C0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2511                              <1> .sftExists:
  2512 00004C0C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2513 00004C11 7427                <1>     je .sftFound
  2514 00004C13 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2515 00004C18 751C                <1>     jne .gotoNextNdx
  2516                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2517 00004C1A 53                  <1>     push rbx
  2518 00004C1B 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2519 00004C22 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2520 00004C26 750B                <1>     jne .netGoToNextNdx
  2521 00004C28 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2522 00004C2F 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2523                              <1> .netGoToNextNdx:
  2524 00004C33 5B                  <1>     pop rbx
  2525 00004C34 7404                <1>     je .sftFound
  2526                              <1> .gotoNextNdx:
  2527 00004C36 FFC3                <1>     inc ebx
  2528 00004C38 EBC2                <1>     jmp short .mainLp
  2529                              <1> .sftFound:
  2530 00004C3A 53                  <1>     push rbx
  2531 00004C3B 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2532 00004C40 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2533 00004C47 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2534 00004C4B 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2535 00004C52 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2536 00004C56 5B                  <1>     pop rbx
  2537 00004C57 F8                  <1>     clc
  2538                              <1>     return
    13                              <2> %%_ret:
    14 00004C58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2539                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2540                              <1> ;Return a pointer to the SFT entry in rdi
  2541                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2542                              <1> ;Output: rdi = SFT pointer
  2543 00004C59 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2544                              <1> .walk:
  2545 00004C60 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2546 00004C64 7212                <1>     jb .thisTable
  2547 00004C66 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2548 00004C6A 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2549 00004C6D 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2550 00004C74 75EA                <1>     jne .walk
  2551 00004C76 F9                  <1>     stc
  2552                              <1>     return
    13                              <2> %%_ret:
    14 00004C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2553                              <1> .thisTable:
  2554 00004C78 50                  <1>     push rax
  2555 00004C79 52                  <1>     push rdx
  2556 00004C7A B84F000000          <1>     mov eax, sft_size
  2557 00004C7F F7E3                <1>     mul ebx
  2558 00004C81 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2559 00004C84 5A                  <1>     pop rdx
  2560 00004C85 58                  <1>     pop rax
  2561 00004C86 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2562                              <1>     return
    13                              <2> %%_ret:
    14 00004C8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2563                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2564                              <1> ;Return a zero extended value in rdi for the SFT entry
  2565                              <1> ;Input: bx = JFT handle (we zero extend)
  2566                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2567                              <1> ;        CF=CY => al = Error code, Fail
  2568 00004C8E 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2569 00004C91 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2570 00004C98 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2571 00004C9C 7204                <1>     jb .ok
  2572 00004C9E B006                <1>     mov al, errBadHdl
  2573 00004CA0 F9                  <1>     stc
  2574                              <1>     return
    13                              <2> %%_ret:
    14 00004CA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2575                              <1> .ok:
  2576 00004CA2 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2577 00004CA8 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2578 00004CAA 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2579 00004CAC 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2580 00004CB0 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2581 00004CB4 EB0B                <1>     jmp short .pspOkExit
  2582                              <1> .pspJftBelow:
  2583 00004CB6 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2584                              <1> .pspJftOk:
  2585 00004CBC 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2586                              <1> .pspOkExit:
  2587 00004CC1 F8                  <1>     clc
  2588                              <1>     return
    13                              <2> %%_ret:
    14 00004CC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2589                              <1> findFreeJFTEntry:
  2590                              <1> ;Finds a free JFT entry in the currentPSP.
  2591                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2592                              <1> ;        CF=CY => al=errNhl
  2593 00004CC3 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2594                              <1> .searchLp:
  2595 00004CC5 E8C4FFFFFF          <1>     call getJFTPtr
  2596 00004CCA 7209                <1>     jc .badExit
  2597 00004CCC 803FFF              <1>     cmp byte [rdi], -1
  2598                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004CCF 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2599 00004CD1 FFC3                <1>     inc ebx
  2600 00004CD3 EBF0                <1>     jmp short .searchLp
  2601                              <1> .badExit:
  2602 00004CD5 B004                <1>     mov al, errNhl
  2603 00004CD7 F9                  <1>     stc
  2604                              <1>     return
    13                              <2> %%_ret:
    14 00004CD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2605                              <1> getSFTPtr:
  2606                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2607                              <1> ;Input: bx = JFT handle
  2608                              <1> ;Output: CF=NC: rdi = SFT pointer
  2609                              <1> ;        CF=CY: Error, ax=Error code
  2610 00004CD9 E815000000          <1>     call derefSFTPtr
  2611                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004CDE 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2612 00004CE0 50                  <1>     push rax
  2613 00004CE1 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2614 00004CE8 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2615 00004CEC 58                  <1>     pop rax
  2616                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004CED 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2617 00004CEF B006                <1>     mov al, errBadHdl   ;Error code
  2618 00004CF1 F9                  <1>     stc         ;Reset CF
  2619                              <1>     return
    13                              <2> %%_ret:
    14 00004CF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2620                              <1> 
  2621                              <1> derefSFTPtr:
  2622                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2623                              <1> ;Input: bx = File handle (gets zero extended)
  2624                              <1> ;Output: CF=NC: rdi = SFT pointer
  2625                              <1> ;        CF=CY: Error, ax=Error code
  2626 00004CF3 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2627 00004CF8 7205                <1>     jb .fail
  2628 00004CFA 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2629 00004CFD 7504                <1>     jne .ok
  2630                              <1> .fail:
  2631 00004CFF B006                <1>     mov al, errBadHdl
  2632 00004D01 F9                  <1>     stc
  2633                              <1>     return
    13                              <2> %%_ret:
    14 00004D02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2634                              <1> .ok:
  2635 00004D03 53                  <1>     push rbx    ;Preserve the JFT handle
  2636 00004D04 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2637 00004D07 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2638 00004D0C 5B                  <1>     pop rbx 
  2639                              <1>     return
    13                              <2> %%_ret:
    14 00004D0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2640                              <1> 
  2641                              <1> getBytesTransferred:
  2642 00004D0E 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2643 00004D14 F7D9                <1>     neg ecx ;Multiply by -1
  2644 00004D16 030D(77070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2645                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004D1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2646                              <1> 
  2647                              <1> getSFTndxInheritable:
  2648                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2649                              <1> ;Input: ebx = SFTndx (word)
  2650                              <1> ;Output: 
  2651                              <1> ;   ZF=ZE => Inheritable
  2652                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2653 00004D1D 57                  <1>     push rdi
  2654 00004D1E E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2655 00004D23 7208                <1>     jc .badNdx
  2656 00004D25 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2657 00004D2B 5F                  <1>     pop rdi
  2658                              <1>     return
    13                              <2> %%_ret:
    14 00004D2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2659                              <1> .badNdx:
  2660 00004D2D 31FF                <1>     xor edi, edi
  2661 00004D2F FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2662 00004D31 F8                  <1>     clc
  2663 00004D32 5F                  <1>     pop rdi
  2664                              <1>     return
    13                              <2> %%_ret:
    14 00004D33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> 
  2666                              <1> incrementOpenCount:
  2667                              <1> ;Given a SFTndx, this function will increment it's open count
  2668                              <1> ;Output:
  2669                              <1> ;   CF=NC => sftndx ok, count incremented
  2670                              <1> ;   CF=CY => Bad ndx
  2671 00004D34 57                  <1>     push rdi
  2672 00004D35 E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2673 00004D3A 7203                <1>     jc .exit
  2674 00004D3C 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2675                              <1> .exit:
  2676 00004D3F 5F                  <1>     pop rdi
  2677                              <1>     return
    13                              <2> %%_ret:
    14 00004D40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2678                              <1> 
  2679                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2680                              <1> ;Input: rdi = SFT pointer
  2681                              <1> ;Output: ax = Original wNumHandles count
  2682 00004D41 9C                  <1>     pushfq
  2683 00004D42 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2684 00004D45 FFC8                <1>     dec eax     ;Decrement count
  2685 00004D47 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2686 00004D49 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2687                              <1> .exit:
  2688 00004D4B 9D                  <1>     popfq
  2689 00004D4C 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2690                              <1>     return
    13                              <2> %%_ret:
    14 00004D4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2691                              <1> 
  2692                              <1> ;Buffer Wrappers
  2693                              <1> writeThroughBuffersForHandle:
  2694                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2695 00004D50 57                  <1>     push rdi
  2696 00004D51 55                  <1>     push rbp
  2697 00004D52 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2698 00004D59 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2699 00004D5F 751C                <1>     jnz .exit
  2700 00004D61 FF35(09070000)      <1>     push qword [workingDPB]
  2701 00004D67 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2702 00004D6B 48892D(09070000)    <1>     mov qword [workingDPB], rbp
  2703 00004D72 E886BAFFFF          <1>     call writeThroughBuffers
  2704 00004D77 8F05(09070000)      <1>     pop qword [workingDPB]
  2705                              <1> .exit:
  2706 00004D7D 5D                  <1>     pop rbp
  2707 00004D7E 5F                  <1>     pop rdi
  2708                              <1>     return
    13                              <2> %%_ret:
    14 00004D7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2709                              <1> 
  2710                              <1> cancelWriteThroughBuffersForHandle:
  2711                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2712 00004D80 57                  <1>     push rdi
  2713 00004D81 55                  <1>     push rbp
  2714 00004D82 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2715 00004D89 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2716 00004D8F 751C                <1>     jnz .exit
  2717 00004D91 FF35(09070000)      <1>     push qword [workingDPB]
  2718 00004D97 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2719 00004D9B 48892D(09070000)    <1>     mov qword [workingDPB], rbp
  2720 00004DA2 E828BAFFFF          <1>     call cancelWriteThroughBuffers
  2721 00004DA7 8F05(09070000)      <1>     pop qword [workingDPB]
  2722                              <1> .exit:
  2723 00004DAD 5D                  <1>     pop rbp
  2724 00004DAE 5F                  <1>     pop rdi
  2725                              <1>     return
    13                              <2> %%_ret:
    14 00004DAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004DB0 3C0F                <1>     cmp al, 15
    36 00004DB2 7747                <1>     ja .invalidFunction
    37 00004DB4 84C0                <1>     test al, al
    38 00004DB6 745B                <1>     jz .getDevWord
    39 00004DB8 3C01                <1>     cmp al, 1
    40 00004DBA 746E                <1>     je .setDevWord
    41 00004DBC 2C02                <1>     sub al, 2
    42 00004DBE 3C03                <1>     cmp al, 3
    43 00004DC0 7673                <1>     jbe .ioctlStringFunctions
    44 00004DC2 2C04                <1>     sub al, 4
    45 00004DC4 3C01                <1>     cmp al, 1
    46 00004DC6 0F8644010000        <1>     jbe .ioStatusFunctions
    47 00004DCC 2C02                <1>     sub al, 2
    48 00004DCE 3C02                <1>     cmp al, 2
    49 00004DD0 0F86CD010000        <1>     jbe .devControl
    50 00004DD6 2C03                <1>     sub al, 3
    51 00004DD8 0F8498020000        <1>     jz .setSharingCount
    52 00004DDE FEC8                <1>     dec al
    53 00004DE0 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 00004DE6 FEC8                <1>     dec al
    55 00004DE8 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 00004DEE FEC8                <1>     dec al
    57 00004DF0 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 00004DF6 E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004DFB B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004E00 E924250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004E05 B805000000          <1>     mov eax, errAccDen
    65 00004E0A EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004E0C B806000000          <1>     mov eax, errBadHdl
    68 00004E11 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004E13 E8DBFEFFFF          <1>     call derefSFTPtr
    74 00004E18 72F2                <1>     jc .badHandle
    75 00004E1A 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004E1E 30C0                <1>     xor al, al
    77 00004E20 E831200000          <1>     call getUserRegs
    78 00004E25 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004E2A E8C4FEFFFF          <1>     call derefSFTPtr
    84 00004E2F 72DB                <1>     jc .badHandle 
    85 00004E31 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004E34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004E35 0FB6F3              <1>     movzx esi, bl
    96 00004E38 488D1D(C0040000)    <1>     lea rbx, primReqHdr
    97 00004E3F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004E46 C605(67040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004E4D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00004E50 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00004E53 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004E57 51                  <1>     push rcx
   105 00004E58 52                  <1>     push rdx
   106 00004E59 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00004E5E BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00004E63 A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004E65 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004E68 7507                <1>     jnz .notWrite
   111 00004E6A 800D(67040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00004E71 5A                  <1>     pop rdx
   114 00004E72 59                  <1>     pop rcx
   115 00004E73 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004E76 3C01                <1>     cmp al, 1
   117 00004E78 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004E7A 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004E7D E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00004E82 7288                <1>     jc .badHandle 
   122 00004E84 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00004E8B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00004E91 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004E97 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004E9B 800D(67040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00004EA2 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004EA5 31C0                <1>     xor eax, eax
   130 00004EA7 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004EA9 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004EB0 89F0                <1>     mov eax, esi
   136 00004EB2 53                  <1>     push rbx
   137 00004EB3 E832200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004EB8 5B                  <1>     pop rbx
   139 00004EB9 730A                <1>     jnc .okDrive
   140 00004EBB B80F000000          <1>     mov eax, errBadDrv
   141 00004EC0 E964240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004EC5 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   144 00004ECC 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004ED0 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004ED3 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004ED6 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004EDA 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004EDD 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004EE1 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004EE4 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004EEA 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 00004EF0 51                  <1>     push rcx    ;Push xfrctr
   159 00004EF1 52                  <1>     push rdx    ;Buffer Ptr
   160 00004EF2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 00004EF8 E8C41A0000          <1>     call goDriver
   162 00004EFD 5A                  <1>     pop rdx
   163 00004EFE 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 00004EFF 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 00004F05 0F8410240000        <1>     jz extGoodExit
   167 00004F0B E91A030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00004F10 E8DEFDFFFF          <1>     call derefSFTPtr
   173 00004F15 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00004F1B 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   175 00004F22 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 00004F25 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00004F2C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00004F32 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 00004F38 C605(67040000)00    <1>     mov byte [Int24bitfld], 0
   180 00004F3F B906000000          <1>     mov ecx, drvINSTATUS
   181 00004F44 BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 00004F49 84C0                <1>     test al, al
   183 00004F4B 0F45CA              <1>     cmovnz ecx, edx
   184 00004F4E 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00004F51 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 00004F57 7416                <1>     jz .ioStatDisk
   187 00004F59 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00004F60 800D(67040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 00004F67 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00004F6B 30C0                <1>     xor al, al
   191 00004F6D EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00004F6F C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 00004F76 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00004F7A 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00004F7D 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00004F80 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 00004F84 E8381A0000          <1>     call goDriver
   200 00004F89 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00004F8F 0F8595020000        <1>     jnz failIOCTLCall
   202 00004F95 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00004F9B 7403                <1>     jz .notBusyExit
   204 00004F9D B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 00004F9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 00004FA0 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00004FA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 00004FA3 84C0                <1>     test al, al
   216 00004FA5 746D                <1>     jz .remTest
   217 00004FA7 A801                <1>     test al, 1
   218 00004FA9 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 00004FAB E843FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 00004FB0 0F8256FEFFFF        <1>     jc .badHandle 
   222 00004FB6 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 00004FBA E8971E0000          <1>     call getUserRegs
   225 00004FBF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 00004FC3 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 00004FC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 00004FC6 88D8                <1>     mov al, bl
   233 00004FC8 E81D1F0000          <1>     call getCDS
   234 00004FCD 730A                <1>     jnc .devTestOkDrive
   235 00004FCF B80F000000          <1>     mov eax, errBadDrv
   236 00004FD4 E950230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 00004FD9 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   239 00004FE0 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 00004FE4 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 00004FE9 7513                <1>     jnz .remoteDrive
   242 00004FEB 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 00004FEF 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 00004FF3 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 00004FF7 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 00004FFC EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 00004FFE 6689D3              <1>     mov bx, dx
   249 00005001 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 00005006 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 0000500B 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 0000500D 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 00005012 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 00005014 88D8                <1>     mov al, bl
   258 00005016 E8CF1E0000          <1>     call getCDS
   259 0000501B 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 0000501D B80F000000          <1>     mov eax, errBadDrv
   262 00005022 E902230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 00005027 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 0000502E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 00005034 75E7                <1>     jnz .remTestBadDrv
   267 00005036 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   268 0000503D 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005041 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 00005044 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 00005048 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 0000504E 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 00005054 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 00005057 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 0000505B 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005061 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 00005064 E858190000          <1>     call goDriver
   278 00005069 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 0000506D 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 00005072 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 00005075 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 00005076 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 0000507D 6685D2              <1>     test dx, dx
   288 00005080 0F8475FDFFFF        <1>     jz .invalidFunction
   289 00005086 668915(21000000)    <1>     mov word [shareDelay], dx
   290 0000508D 31C0                <1>     xor eax, eax
   291 0000508F E987220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 00005094 E840FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 00005099 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 0000509B C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 000050A2 B806000000          <1>     mov eax, errBadHdl
   299 000050A7 E97D220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 000050AC 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 000050B2 75E7                <1>     jnz .ioctrlBadHandle
   303 000050B4 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000050BA 74DF                <1>     jz .ioctrlBadHandle
   305 000050BC 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000050C0 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000050C2 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000050C4 51                  <1>     push rcx
   310 000050C5 52                  <1>     push rdx
   311 000050C6 E81F1E0000          <1>     call getCDS ;Sets the current CDS
   312 000050CB 5A                  <1>     pop rdx
   313 000050CC 59                  <1>     pop rcx
   314 000050CD 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000050CF 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   317 000050D6 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000050DA 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000050DE 7406                <1>     jz .badDrv
   320 000050E0 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000050E4 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000050E6 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000050ED B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000050F2 E932220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000050F7 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 000050FB 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 000050FF 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 00005102 8805(C1040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   332 00005108 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 0000510B 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005111 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 00005113 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 0000511A B801000000          <1>     mov eax, errInvFnc
   340 0000511F E905220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 00005124 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   344 0000512B C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 0000512E C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 00005132 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 00005138 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 0000513C 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005140 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 00005143 E80E1D0000          <1>     call getUserRegs
   351 00005148 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 0000514C 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005150 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 00005154 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 00005158 4889FE              <1>     mov rsi, rdi
   356 0000515B E861180000          <1>     call goDriver
   357 00005160 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 00005166 0F84AF210000        <1>     jz extGoodExit
   359 0000516C E9B9000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005171 88D8                <1>     mov al, bl
   363 00005173 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   364 0000517A C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 0000517E C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 00005181 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 00005187 53                  <1>     push rbx
   368 00005188 E85D1D0000          <1>     call getCDS
   369 0000518D 8805(08070000)      <1>     mov byte [workingDrv], al
   370 00005193 5B                  <1>     pop rbx
   371 00005194 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 0000519A 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   373 000051A1 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 000051A5 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 000051A9 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 000051AC 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 000051AF 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000051B5 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000051BB E801180000          <1>     call goDriver
   381 000051C0 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000051C6 7405                <1>     jz .getDrvOk
   383 000051C8 E95D000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000051CD 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000051D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000051D1 88D8                <1>     mov al, bl
   389 000051D3 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   390 000051DA C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000051DE C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000051E1 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000051E7 53                  <1>     push rbx
   394 000051E8 E8FD1C0000          <1>     call getCDS
   395 000051ED 8805(08070000)      <1>     mov byte [workingDrv], al
   396 000051F3 5B                  <1>     pop rbx
   397 000051F4 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 000051FA 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   399 00005201 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 00005205 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 00005209 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 0000520C 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 0000520F 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 00005215 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 0000521B E8A1170000          <1>     call goDriver
   406 00005220 30C0                <1>     xor al, al
   407 00005222 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005228 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 0000522A 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 0000522E 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 00005234 E827110000          <1>     call xlatHardError
   415 00005239 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005240 E9E4200000          <1>     jmp extErrExit
   417                              <1> 
    37                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00005245 E894200000          <1>     call dosCrit1Enter
    15 0000524A B806000000          <1>     mov eax, 6
    16 0000524F 39C3                <1>     cmp ebx, eax
    17 00005251 0F42D8              <1>     cmovb ebx, eax
    18 00005254 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00005256 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 0000525D 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 00005264 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 0000526B 31ED                <1>     xor ebp, ebp    
    24 0000526D FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 0000526F 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00005276 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005279 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 0000527C 7409                <1>     je .walk1
    30 0000527E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005281 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00005287 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 0000528F 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00005295 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005298 744A                <1>     je .det0    ;Determine if this block is useful
    41 0000529A 31C9                <1>     xor ecx, ecx
    42 0000529C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 0000529F 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 000052A6 48C1E104            <1>     shl rcx, 4
    46 000052AA 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 000052AD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 000052B0 7409                <1>     je .cons1
    49 000052B2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000052B5 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000052BB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000052C3 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000052C5 31C9                <1>     xor ecx, ecx
    56 000052C7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000052CA 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000052D0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000052D3 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000052D5 31D2                <1>     xor edx, edx
    61 000052D7 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000052DA 48895608            <1>     mov qword [rsi + 8], rdx
    63 000052DE 3C5A                <1>     cmp al, mcbMarkEnd
    64 000052E0 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000052E2 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000052E4 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000052E7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000052EA 39D9                <1>     cmp ecx, ebx
    72 000052EC 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000052EE 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000052F5 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000052FC 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000052FF 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005301 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00005308 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 0000530A 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 0000530C 7209                <1>     jb .walk2
    83 0000530E 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005310 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 00005317 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 0000531A 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 0000531C 31C9                <1>     xor ecx, ecx
    89 0000531E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005321 48C1E104            <1>     shl rcx, 4
    91 00005325 4881C610000000      <1>     add rsi, mcb.program
    92 0000532C 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 0000532F E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005334 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 0000533B 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 0000533D 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 00005344 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 00005347 0F84A8000000        <1>     jz .allocFail
   102 0000534D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 0000534F C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005352 31C9                <1>     xor ecx, ecx
   105 00005354 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00005357 29D9                <1>     sub ecx, ebx
   107 00005359 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 0000535F 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005362 48C1E104            <1>     shl rcx, 4
   110 00005366 4881C610000000      <1>     add rsi, mcb.program
   111 0000536D 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005370 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005372 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00005375 EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 00005377 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 0000537E 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00005385 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 0000538D 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005390 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005392 31C9                <1>     xor ecx, ecx
   123 00005394 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00005397 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005399 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 0000539B 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 000053A1 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 000053A4 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 000053A6 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 000053A9 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 000053AC 4881C710000000      <1>     add rdi, mcb.program
   133 000053B3 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000053B9 48C1E304            <1>     shl rbx, 4
   135 000053BD 4801DF              <1>     add rdi, rbx
   136 000053C0 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000053C2 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000053CA 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000053CD 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000053D4 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000053D8 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   144 000053DF 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000053E3 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000053E6 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000053EA E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000053EF E8F41E0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000053F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000053F5 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000053FC 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000053FE 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005401 7409                <1>     je .af1
   157 00005403 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 00005406 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 0000540C 31C9                <1>     xor ecx, ecx
   161 0000540E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005411 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005419 7505                <1>     jne .af2
   164 0000541B 39D9                <1>     cmp ecx, ebx
   165 0000541D 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005420 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005423 7410                <1>     je .afExit
   169 00005425 48C1E104            <1>     shl rcx, 4
   170 00005429 4881C610000000      <1>     add rsi, mcb.program
   171 00005430 4801CE              <1>     add rsi, rcx
   172 00005433 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00005435 B808000000          <1>     mov eax, errNoMem
   175 0000543A 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   176 00005441 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005444 E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005449 E8901E0000          <1>     call dosCrit1Enter
   183 0000544E 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00005455 31C9                <1>     xor ecx, ecx
   185 00005457 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 0000545E 4889F7              <1>     mov rdi, rsi
   187 00005461 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005464 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005468 4881C610000000      <1>     add rsi, mcb.program
   190 0000546F 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005472 31C9                <1>     xor ecx, ecx
   193 00005474 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 00005477 7409                <1>     je .valid
   195 00005479 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 0000547C 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005482 4939F0              <1>     cmp r8, rsi
   199 00005485 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 00005487 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 0000548A 0F84A5000000        <1>     je .blockError
   203 00005490 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005493 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00005497 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 0000549E 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 000054A1 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 000054A3 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 000054AB 0F8484000000        <1>     je .blockError
   213 000054B1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000054B9 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000054C1 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000054C3 31C9                <1>     xor ecx, ecx
   218 000054C5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000054C8 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000054CE 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000054D1 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000054D3 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000054D5 31C9                <1>     xor ecx, ecx
   225 000054D7 48890E              <1>     mov qword [rsi], rcx
   226 000054DA 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000054DE 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000054E1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000054E4 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000054E6 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000054E9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000054EC 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000054F0 4881C110000000      <1>     add rcx, mcb.program
   236 000054F7 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000054FA 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005502 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 00005504 31C9                <1>     xor ecx, ecx
   241 00005506 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005509 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 0000550F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005512 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005514 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005516 31C9                <1>     xor ecx, ecx
   248 00005518 48890E              <1>     mov qword [rsi], rcx
   249 0000551B 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 0000551F E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005524 E8BF1D0000          <1>     call dosCrit1Exit
   253 00005529 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   254 00005530 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005534 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005535 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 0000553C B809000000          <1>     mov eax, errMemAddr
   259 00005541 E8E31D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005546 E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 0000554B E8981D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005550 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005551 E8881D0000          <1>     call dosCrit1Enter
   268 00005556 85DB                <1>     test ebx, ebx
   269 00005558 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 0000555E B806000000          <1>     mov eax, 6
   271 00005563 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005565 0F42D8              <1>     cmovb ebx, eax
   273 00005568 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 0000556F 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005572 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005575 7409                <1>     je .ctn
   277 00005577 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 0000557A 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005580 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005588 74AB                <1>     je freeMemory.blockError
   284 0000558A 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 0000558D 31C9                <1>     xor ecx, ecx
   286 0000558F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005592 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005594 0F8791000000        <1>     ja .growth
   289 0000559A 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 000055A0 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 000055A2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 000055A8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 000055AB 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000055B1 48C1E304            <1>     shl rbx, 4
   296 000055B5 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000055BC 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000055BF 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000055C1 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000055C4 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000055C6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000055CE 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000055D1 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000055D3 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000055D9 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000055DC 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000055E0 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000055E7 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000055EA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000055ED 7409                <1>     je .shrinkAbsorb
   312 000055EF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000055F2 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000055F8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005600 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 00005606 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005608 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 0000560A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 0000560D 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005610 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005613 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005616 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 0000561A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 0000561D 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 0000561F 48890E              <1>     mov qword [rsi], rcx
   329 00005622 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005626 E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 0000562B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 0000562E 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005634 31C9                <1>     xor ecx, ecx
   337 00005636 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005639 48C1E104            <1>     shl rcx, 4
   339 0000563D 4889F7              <1>     mov rdi, rsi    
   340 00005640 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005647 4801CE              <1>     add rsi, rcx
   342 0000564A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 0000564D 7409                <1>     je .growthOK
   344 0000564F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005652 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005658 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005660 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005662 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005664 31C9                <1>     xor ecx, ecx
   353 00005666 31D2                <1>     xor edx, edx
   354 00005668 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 0000566B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005671 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005674 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005676 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005678 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 0000567B 775E                <1>     ja .notEnuffMem1
   361 0000567D 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 0000567F 81FA01000000        <1>     cmp edx, 1
   363 00005685 744E                <1>     je .notEnuffMem2
   364 00005687 31C9                <1>     xor ecx, ecx
   365 00005689 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 0000568C 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005690 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005693 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005696 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 0000569D 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 000056A1 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 000056A4 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 000056A8 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 000056AA 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 000056AC 7411                <1>     jz .exit
   378 000056AE 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000056B4 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000056B7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000056BF E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000056C4 E81F1C0000          <1>     call dosCrit1Exit
   384 000056C9 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   385 000056D0 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000056D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000056D5 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000056D7 EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 000056D9 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 000056DB B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 000056E0 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   395 000056E7 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 000056EA E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 000056EF B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 000056F4 E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 000056F9 84C0                <1>     test al, al
   402 000056FB 741F                <1>     jz .get
   403 000056FD 3C02                <1>     cmp al, 2
   404 000056FF 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005701 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   407 00005708 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 0000570C 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005712 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005716 E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 0000571B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 0000571C 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   414 00005723 31C0                <1>     xor eax, eax
   415 00005725 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 0000572B 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 0000572E 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005732 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005738 B801000000          <1>     mov eax, errInvFnc
   422 0000573D EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 0000573F 50                  <1>     push rax
   428 00005740 53                  <1>     push rbx
   429 00005741 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005748 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 0000574B 7408                <1>     je .ok1
   433 0000574D 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005750 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005752 5B                  <1>     pop rbx
   437 00005753 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005754 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005755 31C0                <1>     xor eax, eax
   441 00005757 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 0000575A 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 0000575E 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005765 4801C3              <1>     add rbx, rax
   445 00005768 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 0000576A 5B                  <1>     pop rbx ;Pop off the stack first!
   448 0000576B 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 0000576C B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 0000576E C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 00005775 E8AF1B0000          <1>     call extErrExit ;Error thru the unified error handler
   455 0000577A 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000577C 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 0000577E EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    38                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005780 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005782 E9CF190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005787 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 0000578D C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005790 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005795 E9BC190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 0000579A C605(14050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 000057A1 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 000057A8 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000057AA 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000057AB EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000057AD 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 000057B4 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000057B8 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000057B9 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000057C0 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000057C4 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000057C8 4C89C6              <1>     mov rsi, r8
    52 000057CB 4889D7              <1>     mov rdi, rdx
    53 000057CE B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000057D3 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000057D6 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000057DE F605(14050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000057E5 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000057E7 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000057EF 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000057F3 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000057F7 31C9                <1>     xor ecx, ecx
    64 000057F9 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 000057FE 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005802 B0FF                <1>     mov al, -1
    67 00005804 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005806 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005808 E881F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 0000580D 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005810 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005814 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005818 67E31C              <1>     jecxz .copy
    77 0000581B FFC9                <1>     dec ecx
    78 0000581D AC                  <1>     lodsb   ;Get the SFTndx in al
    79 0000581E 0FB6D8              <1>     movzx ebx, al
    80 00005821 53                  <1>     push rbx
    81 00005822 E8F6F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005827 58                  <1>     pop rax
    83 00005828 7508                <1>     jnz .badJFT
    84 0000582A AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 0000582B E804F5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005830 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005832 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005835 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005837 C605(14050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 0000583E 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 0000583F 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005842 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005846 B022                <1>     mov al, 22h
    97 00005848 E8DB150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 0000584D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005850 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005852 B023                <1>     mov al, 23h
   101 00005854 E8CF150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005859 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 0000585C 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 0000585E B024                <1>     mov al, 24h
   105 00005860 E8C3150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005865 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005868 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 0000586A 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 0000586F 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005875 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005879 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 0000587A C605(05070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005881 81FA06000000        <1>     cmp edx, 6
   120 00005887 7305                <1>     jae .aboveMinimum
   121 00005889 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 0000588E 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005895 89D3                <1>     mov ebx, edx
   129 00005897 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005898 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005899 E8B3FCFFFF          <1>     call reallocMemory
   132 0000589E 5B                  <1>     pop rbx
   133 0000589F 58                  <1>     pop rax
   134 000058A0 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 000058A2 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 000058A6 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 000058A8 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;Here we must:
   143                              <1> ;0) Build errorlevel and adjust variables accordingly
   144                              <1> ;1) Call Network Termination hook.
   145                              <1> ;2) Check if the program is it's own parent. If so, return.
   146                              <1> ;3) Swap the console back to the original driver if it is swapped.
   147                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   148                              <1> ;4) Free all file handles associated to the current process.
   149                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   150                              <1> ;5) Free all memory blocks that have the signature of current PSP
   151                              <1> ;6) Set current PSP to parent PSP
   152                              <1> ;7) Restore Int 22h, 23h, 24h handlers from the PSP to the IDT
   153                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   154                              <1> ;9) Set Int 22h to be the RIP value on the now oldRSP stack
   155                              <1> ;10) Exit all critical sections.
   156                              <1> ;
   157                              <1> ; Step 0
   158                              <1> ;For now, just adjust error level in var
   159 000058AA 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   160 000058AC 8625(05070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   161 000058B2 F605(8B040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   162 000058B9 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   163 000058BB 8625(8B040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   164 000058C1 C605(05070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   165                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   166 000058C8 8A25(05070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   167                              <1> .storeELvl:
   168 000058CE 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   169                              <1>     
   170                              <1> ; Step 1 Tell network a process is terminating
   171 000058D5 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   172 000058DA 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   173 000058E1 CD2F                <1>     int 2Fh
   174                              <1> ; Step 2
   175                              <1> .step1:
   176 000058E3 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   177 000058EA 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   178 000058ED 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   179 000058F1 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   180 000058F4 0F84BC000000        <1>     je .exit
   181                              <1> ; Step 3
   182 000058FA E892CFFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   183                              <1> ; Step 3.5
   184 000058FF 803D(05070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   185 00005906 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   186                              <1> ; Step 4
   187 00005908 803D(05070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   188 0000590F 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   189 00005911 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   190 00005916 CD2F                <1>     int 2Fh
   191                              <1> .skipAbortNetClose:
   192 00005918 FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   193 0000591E FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   194                              <1> 
   195 00005924 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   196 0000592B 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   197 0000592F 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   198                              <1> .s4lp:
   199 00005931 53                  <1>     push rbx
   200 00005932 51                  <1>     push rcx
   201 00005933 E848DAFFFF          <1>     call closeFileHdl
   202 00005938 59                  <1>     pop rcx
   203 00005939 5B                  <1>     pop rbx
   204 0000593A FFC3                <1>     inc ebx ;Goto next handle to close
   205 0000593C 39CB                <1>     cmp ebx, ecx
   206 0000593E 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   207                              <1> ;Step 5
   208                              <1> .step5:
   209 00005940 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   210                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   211                              <1>     ; with the currentPSP signature and free them.
   212 00005947 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   213                              <1> .s5lp:  ;And walk the chain
   214                              <1> ;First verify the address in rsi is a valid mcb
   215 0000594E 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   216 00005950 80F94D              <1>     cmp cl, mcbMarkCtn
   217 00005953 7405                <1>     je .checkToFree
   218 00005955 80F95A              <1>     cmp cl, mcbMarkEnd
   219 00005958 7528                <1>     jne .step6  ;Something wrong so stop freeing
   220                              <1> .checkToFree:
   221 0000595A 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   222 0000595E 750F                <1>     jne .noFree
   223 00005960 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   224 00005964 53                  <1>     push rbx
   225 00005965 51                  <1>     push rcx
   226 00005966 56                  <1>     push rsi
   227 00005967 E8DDFAFFFF          <1>     call freeMemory ;Free this memory block
   228 0000596C 5E                  <1>     pop rsi
   229 0000596D 59                  <1>     pop rcx
   230 0000596E 5B                  <1>     pop rbx
   231                              <1>     ;If an error occured, the internal vars will be set.
   232                              <1> .noFree:
   233 0000596F 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   234 00005972 740E                <1>     je .step6   ;Skip if we are
   235 00005974 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   236 00005977 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   237 0000597B 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   238 00005980 EBCC                <1>     jmp short .s5lp
   239                              <1> ;Step 6
   240                              <1> .step6:
   241                              <1> 
   242 00005982 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   243                              <1> 
   244 00005988 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   245 0000598C 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   246                              <1> ;Step 7
   247                              <1>     ;rbx points to current PSP, the old parent task
   248                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   249 00005993 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   250 00005997 B024                <1>     mov al, 24h
   251 00005999 E8BD1B0000          <1>     call setIntVector
   252 0000599E 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   253 000059A2 B023                <1>     mov al, 23h
   254 000059A4 E8B21B0000          <1>     call setIntVector
   255 000059A9 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   256 000059AD B022                <1>     mov al, 22h
   257 000059AF 52                  <1>     push rdx
   258 000059B0 E8A61B0000          <1>     call setIntVector
   259 000059B5 5A                  <1>     pop rdx
   260                              <1> ;Step 8
   261                              <1> .exit:
   262 000059B6 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   263 000059B8 CD2A                <1>     int 2Ah
   264                              <1> 
   265 000059BA FA                  <1>     cli
   266 000059BB 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   267 000059C2 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   268                              <1>     ;Make the parent register frame the current one
   269                              <1>     ;Make RSP point to user stack from parent entry to exec
   270 000059C6 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   271                              <1> 
   272 000059CA 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   273 000059CF 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   274                              <1> 
   275 000059D8 C605(95040000)00    <1>     mov byte [Int24Trans], 0    ;Clear this flag
   276 000059DF C605(08040000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   277 000059E6 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   278 000059ED E8BE180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   279 000059F2 48CF                <1>     iretq   ;and return to address that was in rdx
    39                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 000059F4 55                  <1>     push rbp
   100 000059F5 4889E5              <1>     mov rbp, rsp
   101 000059F8 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 000059FF 31C9                <1>     xor ecx, ecx
   104 00005A01 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 00005A05 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 00005A09 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 00005A0D B403                <1>     mov ah, execOverlay
   112 00005A0F F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 00005A16 7402                <1>     jz short .noMulti
   114 00005A18 B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 00005A1A 38E0                <1>     cmp al, ah
   117 00005A1C 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 00005A1E B801000000          <1>     mov eax, errInvFnc
   120 00005A23 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 00005A2A 4889EC              <1>     mov rsp, rbp
   123 00005A2D 5D                  <1>     pop rbp
   124 00005A2E E9F6180000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 00005A33 3C02                <1>     cmp al, execInvld
   128 00005A35 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 00005A37 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 00005A3B 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 00005A3F 0FB6C0              <1>     movzx eax, al
   133 00005A42 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 00005A46 4889D7              <1>     mov rdi, rdx
   135 00005A49 E867150000          <1>     call strlen ;Get string length in cx
   136 00005A4E 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 00005A52 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 00005A54 55                  <1>     push rbp    ;Preserve local frame ptr
   140 00005A55 E8FFD7FFFF          <1>     call openFileHdl
   141 00005A5A 5D                  <1>     pop rbp
   142 00005A5B 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005A5D 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005A61 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 00005A64 E88AF2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 00005A69 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005A6D F7C280000000        <1>     test edx, devCharDev
   149 00005A73 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 00005A75 B002                <1>     mov al, errFnf
   151 00005A77 E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005A7C 31C0                <1>     xor eax, eax
   154 00005A7E 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005A82 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 00005A86 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005A8E 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 00005A94 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 00005A98 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00005A9B 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 00005A9E 7514                <1>     jnz short .copyEnvironmentBlock
   162 00005AA0 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 00005AA7 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 00005AAB 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 00005AAF 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 00005AB2 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 00005AB4 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 00005AB7 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 00005ABC 31C0                <1>     xor eax, eax
   172 00005ABE 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 00005AC1 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 00005AC3 7531                <1>     jnz short .invalidEnvironmentError
   176 00005AC5 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 00005AC8 FFC9                <1>     dec ecx
   178 00005ACA AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 00005ACB 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 00005ACD 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 00005AD0 57                  <1>     push rdi     ;Save the length of the environment block
   183 00005AD1 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 00005AD7 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 00005ADB 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 00005ADD 89FB                <1>     mov ebx, edi
   187 00005ADF C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 00005AE2 55                  <1>     push rbp
   189 00005AE3 E85DF7FFFF          <1>     call allocateMemory
   190 00005AE8 5D                  <1>     pop rbp
   191 00005AE9 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 00005AEA 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 00005AEC B808000000          <1>     mov eax, errNoMem
   196 00005AF1 E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 00005AF6 B80A000000          <1>     mov eax, errBadEnv
   199 00005AFB E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005B00 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005B03 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 00005B07 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 00005B0B 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005B0E F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005B10 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 00005B15 66AB                <1>     stosw       ;Away you go!
   211 00005B17 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 00005B1B 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005B1F F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005B21 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 00005B26 488D15(EA190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005B2D E898050000          <1>     call .readDataFromHdl
   219 00005B32 0F8271050000        <1>     jc .badFmtErr
   220 00005B38 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 00005B3A 0F8469050000        <1>     jz .badFmtErr
   222 00005B40 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 00005B45 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 00005B4B 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005B50 740B                <1>     je .proceedEXE
   227 00005B52 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 00005B57 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005B5D 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005B5E 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005B61 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 00005B64 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 00005B66 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 00005B68 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005B6C E8FAD8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005B71 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005B72 B918000000          <1>     mov ecx, imageFileHeader_size
   240 00005B77 E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005B7C 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005B7E 0F8425050000        <1>     jz .badFmtErr
   243 00005B84 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 00005B89 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005B8F 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005B95 0F850E050000        <1>     jne .badFmtErr
   248 00005B9B 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005BA1 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 00005BA7 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 00005BAB 66A90200            <1>     test ax, imageFileExecutable
   253 00005BAF 0F84F4040000        <1>     jz .badFmtErr
   254 00005BB5 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 00005BB9 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 00005BBF 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 00005BC5 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 00005BC9 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 00005BCB 0F84D8040000        <1>     jz .badFmtErr
   262 00005BD1 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 00005BD5 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 00005BDA E8EB040000          <1>     call .readDataFromHdl
   267 00005BDF 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 00005BE1 0F84C2040000        <1>     jz .badFmtErr
   269 00005BE7 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 00005BEC 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 00005BF2 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 00005BF9 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00005C01 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00005C03 8B1D(221A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 00005C09 488B05(321A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005C10 4885C0              <1>     test rax, rax
   280 00005C13 750A                <1>     jnz .notDefaultStackAlloc
   281 00005C15 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005C1E 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005C1F 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005C21 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 00005C27 031D(0A1A0000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005C2D 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005C30 81C311000000        <1>     add ebx, 11h
   291 00005C36 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 00005C39 55                  <1>     push rbp
   293 00005C3A E806F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005C3F 5D                  <1>     pop rbp
   295 00005C40 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00005C46 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 00005C4A 480500010000        <1>     add rax, psp_size
   298 00005C50 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00005C54 813D(EE190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 00005C5C 0000                <1>
   302 00005C5E 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00005C64 EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00005C66 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 00005C6A 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005C6D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005C71 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 00005C77 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 00005C7A 31C9                <1>     xor ecx, ecx
   347 00005C7C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005C80 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005C82 E8E4D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 00005C87 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 00005C8A 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005C8E 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005C92 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 00005C94 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 00005C98 51                  <1>     push rcx    ;Save # of segments left on stack
   360 00005C99 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 00005C9A B928000000          <1>     mov ecx, imageSectionHdr_size
   362 00005C9F 488D15(5A1A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 00005CA6 E81F040000          <1>     call .readDataFromHdl
   364 00005CAB 5F                  <1>     pop rdi
   365 00005CAC 59                  <1>     pop rcx
   366 00005CAD 85C0                <1>     test eax, eax
   367 00005CAF 0F84F4030000        <1>     jz .badFmtErr
   368 00005CB5 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 00005CBA 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 00005CC0 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 00005CC7 8B15(6E1A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 00005CCD 85D2                <1>     test edx, edx
   376 00005CCF 744B                <1>     jz short .skipRawPtrMove
   377 00005CD1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 00005CD5 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 00005CD7 51                  <1>     push rcx
   380 00005CD8 57                  <1>     push rdi
   381 00005CD9 E88DD7FFFF          <1>     call lseekHdl
   382 00005CDE 5F                  <1>     pop rdi
   383 00005CDF 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 00005CE0 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 00005CE8 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 00005CEA 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 00005CEE 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 00005CF6 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 00005CF8 51                  <1>     push rcx
   396 00005CF9 57                  <1>     push rdi
   397 00005CFA 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00005CFE 8B0D(661A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 00005D04 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 00005D07 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 00005D0B 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005D0F 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005D13 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00005D16 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005D1A 5F                  <1>     pop rdi
   406 00005D1B 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005D1C 51                  <1>     push rcx
   409 00005D1D 31FF                <1>     xor edi, edi
   410 00005D1F 8B3D(661A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00005D25 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 00005D29 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005D2D 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005D30 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005D32 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 00005D39 31C9                <1>     xor ecx, ecx
   420 00005D3B 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005D3E 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005D42 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 00005D49 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005D4C 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005D4F 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005D51 F705(7E1A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 00005D59 0000                <1>
   430 00005D5B 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005D61 59                  <1>     pop rcx
   435 00005D62 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00005D64 8B0D(621A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005D6A 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005D6D 57                  <1>     push rdi    ;Save section in memory locally
   440 00005D6E E857030000          <1>     call .readDataFromHdl
   441 00005D73 5F                  <1>     pop rdi
   442 00005D74 59                  <1>     pop rcx
   443 00005D75 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005D7B 3B05(621A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005D81 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 00005D87 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005D8A 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005D8B 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005D8E 8B0D(0A1A0000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 00005D94 FFC9                <1>     dec ecx ;Turn into a mask
   455 00005D96 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 00005D99 FFC1                <1>     inc ecx
   457 00005D9B 4829C1              <1>     sub rcx, rax
   458 00005D9E 31C0                <1>     xor eax, eax
   459 00005DA0 F3AA                <1>     rep stosb
   460 00005DA2 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 00005DA3 FFC9                <1>     dec ecx ;Decrement our section counter
   463 00005DA5 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 00005DA7 51                  <1>     push rcx
   466 00005DA8 57                  <1>     push rdi
   467 00005DA9 30C0                <1>     xor al, al  ;Move rel start of file
   468 00005DAB 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 00005DAE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 00005DB2 31C9                <1>     xor ecx, ecx
   471 00005DB4 E8B2D6FFFF          <1>     call lseekHdl
   472 00005DB9 5F                  <1>     pop rdi
   473 00005DBA 59                  <1>     pop rcx
   474 00005DBB E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 00005DC0 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 00005DC4 483B15(021A0000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 00005DCB 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 00005DD1 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 00005DD5 66A90100            <1>     test ax, imageFileRelocsStripped
   491 00005DD9 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 00005DDF 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 00005DE5 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 00005DEB 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00005DF1 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00005DF4 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005DFA 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005DFE 31C0                <1>     xor eax, eax
   502 00005E00 E866D6FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00005E05 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 00005E08 B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005E0D 488D15(5A1A0000)    <1>     lea rdx, sectHdr
   507 00005E14 E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 00005E19 85C0                <1>     test eax, eax
   509 00005E1B 0F8488020000        <1>     jz .badFmtErr
   510 00005E21 39C8                <1>     cmp eax, ecx
   511 00005E23 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 00005E29 8B35(5A1A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005E2F 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005E31 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005E33 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 00005E37 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005E3B 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005E42 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005E4A 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005E4C 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005E50 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 00005E57 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005E5B 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005E5E 8B0D(5E1A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00005E64 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00005E66 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 00005E68 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 00005E69 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005E6B 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005E6F 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005E72 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00005E75 67E31E              <1>     jecxz .blockDone    
   547 00005E78 81E908000000        <1>     sub ecx, 8
   548 00005E7E 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00005E85 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 00005E87 66AD                <1>     lodsw   ;Get the next page offset word
   552 00005E89 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005E8E 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005E92 FFC9                <1>     dec ecx
   556 00005E94 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 00005E96 59                  <1>     pop rcx
   559 00005E97 FFC9                <1>     dec ecx
   560 00005E99 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 00005E9B 8B05(FA190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 00005EA1 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 00005EA5 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 00005EA9 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 00005EAF 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 00005EB5 E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 00005EBA 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 00005EC2 7450                <1>     je .comOverlay
   575 00005EC4 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 00005EC9 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 00005ECC 55                  <1>     push rbp
   578 00005ECD E873F3FFFF          <1>     call allocateMemory
   579 00005ED2 5D                  <1>     pop rbp
   580 00005ED3 734C                <1>     jnc .comallocOk
   581 00005ED5 3C08                <1>     cmp al, errNoMem
   582 00005ED7 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 00005EDD 53                  <1>     push rbx    ;Save new minimum size
   586 00005EDE B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 00005EE3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005EE7 31D2                <1>     xor edx, edx    ;Go to end of file
   589 00005EE9 E87DD5FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 00005EEE 5B                  <1>     pop rbx ;Get back max alloc size
   592 00005EEF 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 00005EF1 29C2                <1>     sub edx, eax
   594 00005EF3 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 00005EF9 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005EFF 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005F02 55                  <1>     push rbp
   598 00005F03 E83DF3FFFF          <1>     call allocateMemory
   599 00005F08 5D                  <1>     pop rbp
   600 00005F09 0F829F010000        <1>     jc .cleanAndFail
   601 00005F0F E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005F14 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005F18 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005F1B 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005F1F EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005F21 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005F25 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005F2B 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005F2F B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005F34 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005F38 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005F3A E82CD5FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005F3F 50                  <1>     push rax    ;Save filesize
   621 00005F40 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005F42 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005F46 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005F48 E81ED5FFFF          <1>     call lseekHdl
   625 00005F4D 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005F4E 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005F52 E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005F57 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005F5B 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005F5F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005F63 55                  <1>     push rbp
   634 00005F64 E817D4FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005F69 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005F6A 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005F72 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005F78 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005F7B 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005F7F 52                  <1>     push rdx
   644 00005F80 55                  <1>     push rbp
   645 00005F81 E814F8FFFF          <1>     call createPSP
   646 00005F86 5D                  <1>     pop rbp
   647 00005F87 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00005F88 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 00005F8C 4885DB              <1>     test rbx, rbx
   652 00005F8F 7404                <1>     jz short .skipEnvCopy
   653 00005F91 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00005F95 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   657 00005F9C E83D130000          <1>     call dosCrit1Enter
   658 00005FA1 E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00005FA6 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 00005FAD 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00005FB4 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00005FB8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 00005FBC B925000000          <1>     mov ecx, fcb_size
   669 00005FC1 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00005FC5 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00005FC7 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00005FC9 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 00005FCD B925000000          <1>     mov ecx, fcb_size
   674 00005FD2 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 00005FD6 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00005FD8 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 00005FDA 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 00005FDE 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 00005FE5 B980000000          <1>     mov ecx, 80h
   680 00005FEA F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 00005FEC 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 00005FEE 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 00005FF1 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 00005FF6 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00005FF8 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 00005FFC 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 00005FFE E8530E0000          <1>     call getUserRegs    ;Need to get Int 22h address from stack
   692 00006003 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00006007 4889470A            <1>     mov qword [rdi + psp.oldInt22h], rax    ;and save it in PSP
   694 0000600B 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 0000600E B022                <1>     mov al, 22h
   696 00006010 E846150000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 00006015 88D8                <1>     mov al, bl
   700 00006017 30DB                <1>     xor bl, bl
   701 00006019 E85C0E0000          <1>     call getCDSNotJoin
   702 0000601E 7302                <1>     jnc .drive1Ok
   703 00006020 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 00006022 88F8                <1>     mov al, bh
   706 00006024 30FF                <1>     xor bh, bh
   707 00006026 E84F0E0000          <1>     call getCDSNotJoin
   708 0000602B 7302                <1>     jnc .drive2Ok
   709 0000602D B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 0000602F 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 00006032 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 00006037 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 00006040 FF                  <1>
   717 00006041 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 00006044 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 00006048 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 0000604A 56                  <1>     push rsi
   728 0000604B E8060E0000          <1>     call getUserRegs
   729 00006050 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 00006054 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 00006055 FF15(9F000000)      <1>     call qword [launchTask]
   733 0000605B 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 0000605D 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 00006061 742C                <1>     je .xfrProgram
   737 00006063 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 00006067 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 00006069 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 0000606D 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 00006071 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 00006075 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 00006078 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 0000607B 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00006082 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 00006086 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 00006089 5D                  <1>     pop rbp ;Point rsp to the return address
   749 0000608A E98C120000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 0000608F FA                  <1>     cli
   752 00006090 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 00006093 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 0000609A FB                  <1>     sti
   755                              <1> 
   756 0000609B 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 0000609C FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 0000609F 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 000060A2 4989F9              <1>     mov r9, rdi
   760 000060A5 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000060A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 000060A9 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 000060AE E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 000060B3 E830120000          <1>     call dosCrit1Exit
   772 000060B8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 000060BC 50                  <1>     push rax    ;Save error code
   774 000060BD 55                  <1>     push rbp
   775 000060BE E8BDD2FFFF          <1>     call closeFileHdl
   776 000060C3 5D                  <1>     pop rbp
   777 000060C4 58                  <1>     pop rax
   778 000060C5 E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 000060CA 52                  <1>     push rdx
   784 000060CB E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 000060D0 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 000060D4 55                  <1>     push rbp
   787 000060D5 E8E5D2FFFF          <1>     call readFileHdl
   788 000060DA 5D                  <1>     pop rbp
   789 000060DB E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 000060E0 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 000060E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 000060E2 53                  <1>     push rbx
   794 000060E3 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 000060E5 E8F4110000          <1>     call dosCrit1Enter
   796 000060EA E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 000060EF 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 000060F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 000060F1 53                  <1>     push rbx
   802 000060F2 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   803 000060F9 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 000060FE E8E5110000          <1>     call dosCrit1Exit
   805 00006103 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 00006104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 00006105 9C                  <1>     pushfq
   810 00006106 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00006107 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 0000610B E80C000000          <1>     call .writeArenaHeaderOwner
   815 00006110 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 00006114 E803000000          <1>     call .writeArenaHeaderOwner
   817 00006119 58                  <1>     pop rax
   818 0000611A 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 0000611B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 0000611C 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000611F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 00006121 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 00006127 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 0000612B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 0000612C 3C01                <1>     cmp al, 01
    12 0000612E 740B                <1>     je .setSC
    13 00006130 7210                <1>     jb .getSC
    14 00006132 3C03                <1>     cmp al, 03
    15 00006134 7214                <1>     jb .getDev
    16 00006136 741C                <1>     je .setDev
    17 00006138 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 0000613A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 0000613B 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00006141 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00006142 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006148 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 0000614A B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 0000614C E8050D0000          <1>     call getUserRegs
    29 00006151 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006154 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006155 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006158 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 0000615B 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 0000615D 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006160 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00006162 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006167 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 0000616E 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006170 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006172 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006174 488D3585A0FFFF      <1>     lea rsi, ctryTbl
    65 0000617B B926000000          <1>     mov ecx, countryStruc_size
    66 00006180 F3A4                <1>     rep movsb
    67 00006182 0FB71D73A0FFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006189 E8C80C0000          <1>     call getUserRegs
    70 0000618E 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 00006192 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 00006194 E982110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 00006199 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 0000619B E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000061A0 0F8283110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000061A6 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000061A8 75E8                <1>     jnz .exitNoCountryCode 
    81 000061AA 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000061AC 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000061AE 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000061B0 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000061B2 663B1D43A0FFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000061B9 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 000061BB 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000061BD 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000061BF B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000061C4 CD2F                <1>     int 2fh
   105 000061C6 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000061C8 751F                <1>     jne .errNotInstalled
   107 000061CA 488D35B89FFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000061D1 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000061D6 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000061DB 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000061DD 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000061E0 CD2F                <1>     int 2fh
   113 000061E2 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000061E4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000061E6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 000061E7 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 000061E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 000061E9 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 000061EB EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 000061ED 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 000061F3 7250                <1>     jb .invFuncExit
   143 000061F5 488D358D9FFFFF      <1>     lea rsi, dosNLSPtr
   144 000061FC 6681FAFFFF          <1>     cmp dx, -1
   145 00006201 660F4415F39FFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006209 6681FBFFFF          <1>     cmp bx, -1
   147 0000620E 660F441DE89FFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 00006216 663B15DF9FFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 0000621D 7569                <1>     jne .nlsReq
   150 0000621F 663B1DD89FFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 00006226 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 00006228 488D35A69FFFFF      <1>     lea rsi, charTableArray
   155 0000622F 0FB72D9D9FFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 00006236 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 00006238 7515                <1>     jne .tblFound
   159 0000623A 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 00006241 FFCD                <1>     dec ebp
   161 00006243 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 00006245 B801000000          <1>     mov eax, 1
   165 0000624A E9DA100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 0000624F A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 00006250 3C01                <1>     cmp al, 1
   169 00006252 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 00006254 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 00006259 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 0000625E F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 00006260 E8F10B0000          <1>     call getUserRegs
   177 00006265 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 00006268 89D8                <1>     mov eax, ebx    
   181 0000626A E9AC100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 0000626F 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 00006275 31C0                <1>     xor eax, eax    ;Clear eax
   186 00006277 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 00006279 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 0000627B 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 0000627E 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006280 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006282 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 00006286 EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 00006288 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 0000628B B800140000          <1>     mov eax, 1400h  ;Install check!
   199 00006290 CD2F                <1>     int 2fh
   200 00006292 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 00006294 75AF                <1>     jne .invFuncExit    
   202 00006296 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 0000629B CD2F                <1>     int 2fh
   204 0000629D 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 0000629F 0F8584100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000062A5 0FB705259FFFFF      <1>     movzx eax, word [defaultCP]
   210 000062AC E96A100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000062B1 3C01                <1>     cmp al, 1
   220 000062B3 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000062B5 E89C0B0000          <1>     call getUserRegs
   223 000062BA 0FB71D3D9FFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000062C1 0FB715099FFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 000062C8 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 000062CB 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 000062CE E948100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 000062D3 B801000000          <1>     mov eax, errInvFnc
   230 000062D8 E94C100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 000062DD 3C02                <1>     cmp al, 2
   233 000062DF 75F2                <1>     jne .exitBadFunc
   234 000062E1 0FB715A99EFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 000062E8 B800140000          <1>     mov eax, 1400h
   236 000062ED CD2F                <1>     int 2Fh
   237 000062EF 3CFF                <1>     cmp al, -1
   238 000062F1 75E0                <1>     jne .exitBadFunc
   239 000062F3 488D358F9EFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 000062FA B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 000062FF CD2F                <1>     int 2Fh
   242 00006301 84C0                <1>     test al, al
   243 00006303 0F8412100000        <1>     jz extGoodExit
   244 00006309 3C41                <1>     cmp al, errNLSAcDen
   245 0000630B 0F8518100000        <1>     jne extErrExit
   246 00006311 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 00006313 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 0000631A C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 00006321 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 00006328 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 0000632F E902100000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 00006334 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00006336 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00006338 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00006339 53                  <1>     push rbx
   259 0000633A 488D1DE79EFFFF      <1>     lea rbx, ucTbl
   260 00006341 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 00006343 D7                  <1>     xlatb
   262 00006344 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 00006345 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 00006346 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006348 7510                <1>     jne .doReq
    10 0000634A 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 0000634B 488B05(E2040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006352 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006359 58                  <1>     pop rax
    15                              <1> .doReq:
    16 0000635A E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 0000635F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006360 50                  <1>     push rax    ;Wanna preserve ax
    24 00006361 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006366 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006369 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 0000636B 53                  <1>     push rbx
    28 0000636C 488D1DF69CFFFF      <1>     lea rbx, hardXlatTbl
    29 00006373 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006374 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006375 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 0000637C 58                  <1>     pop rax
    34 0000637D 56                  <1>     push rsi
    35 0000637E 488D35909DFFFF      <1>     lea rsi, extErrTbl
    36 00006385 E8F80F0000          <1>     call setErrorVars
    37 0000638A 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 0000638B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000638C 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 0000638F 8825(67040000)      <1>     mov byte [Int24bitfld], ah
    48 00006395 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 0000639C 56                  <1>     push rsi
    50 0000639D 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 000063A1 E87C000000          <1>     call hardErrorCommon
    52 000063A6 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000063A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000063A8 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000063AA 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000063AD 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000063AF 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000063B2 57                  <1>     push rdi        ;Save the buffer pointer
    68 000063B3 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000063B6 81FF00000000        <1>     cmp edi, drvWPErr
    70 000063BC 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000063BE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000063C1 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 000063C7 8A25(67040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 000063CD 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 000063D0 F6C301              <1>     test bl, dosBuffer
    79 000063D3 7505                <1>     jnz .df0
    80 000063D5 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 000063D8 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 000063DA F6C302              <1>     test bl, fatBuffer
    84 000063DD 750C                <1>     jnz .df1
    85 000063DF 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 000063E2 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Invalidate the count!
    87 000063E9 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 000063EB F6C304              <1>     test bl, dirBuffer
    90 000063EE 7505                <1>     jnz .df2
    91 000063F0 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 000063F3 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 000063F5 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 000063F8 8025(FF060000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 000063FF 0A25(FF060000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006405 0A25(67040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 0000640B E802000000          <1>     call diskDevErrBitfield
   101 00006410 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006411 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006412 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006415 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 0000641C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006420 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006422 E839FFFFFF          <1>     call xlatHardError
   117 00006427 50                  <1>     push rax
   118 00006428 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 0000642D 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 0000642F 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006432 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006433 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 0000643A 7204                <1>     jb .noIntError  ;If not 0, enter
   153 0000643C B003                <1>     mov al, critFail    ;Else, return Fail always
   154 0000643E EB6F                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 00006440 488925(5F040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 00006447 66813D(39070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 0000644F FF                  <1>
   158 00006450 740C                <1>     je .notOpeningFile
   159 00006452 57                  <1>     push rdi
   160 00006453 488B3D(29070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 0000645A C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 0000645D 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 0000645E FA                  <1>     cli ;Disable Interrupts
   165 0000645F FE05(07040000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   166 00006465 FE0D(08040000)      <1>     dec byte [inDOS]    ;Exiting DOS
   167 0000646B 488B25(7A040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   168 00006472 31ED                <1>     xor ebp, ebp    ;Always zeroed
   169 00006474 CD24                <1>     int 24h ;Call critical error handler, sets interrupts on again
   170 00006476 488B25(5F040000)    <1>     mov rsp, qword [xInt24hRSP] ;Return to the stack of the function that failed
   171 0000647D C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 00006484 FE05(08040000)      <1>     inc byte [inDOS]    ;Reenter DOS
   173 0000648A 488B2D(8D070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 00006491 FB                  <1>     sti ;Reenable Interrupts
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176                              <1> .checkResponse:
   177 00006492 3C00                <1>     cmp al, critIgnore
   178 00006494 743F                <1>     je .checkIgnore
   179 00006496 3C01                <1>     cmp al, critRetry
   180 00006498 7446                <1>     je .checkRetry
   181 0000649A 3C03                <1>     cmp al, critFail
   182 0000649C 754D                <1>     jne .abort   ;Must be abort
   183                              <1> .setFail:   ;Here is for fail
   184 0000649E B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   185 000064A0 FE05(69040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   186 000064A6 F605(67040000)08    <1>     test byte [Int24bitfld], critFailOK
   187 000064AD 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   188                              <1> .exit:
   189 000064AF C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   190 000064B6 803D(39070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   191                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000064BD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000064BF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   192                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   193 000064C0 50                  <1>     push rax
   194 000064C1 57                  <1>     push rdi
   195 000064C2 0FB705(39070000)    <1>     movzx eax, word [currentNdx]
   196 000064C9 488B3D(29070000)    <1>     mov rdi, qword [curHdlPtr]
   197 000064D0 8807                <1>     mov byte [rdi], al
   198 000064D2 5F                  <1>     pop rdi
   199 000064D3 58                  <1>     pop rax
   200                              <1>     return
    13                              <2> %%_ret:
    14 000064D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> .checkIgnore:
   202 000064D5 F605(67040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   203 000064DC 75D1                <1>     jnz .exit
   204 000064DE EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   205                              <1> .checkRetry:
   206 000064E0 F605(67040000)10    <1>     test byte [Int24bitfld], critRetryOK
   207 000064E7 75C6                <1>     jnz .exit   
   208 000064E9 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   209                              <1> .abort:
   210                              <1> ;Prepare to abort. We abort from within!
   211                              <1> ;If a network request requests abort, translate to fail
   212 000064EB 803D(01070000)FF    <1>     cmp byte [dosInvoke], -1
   213 000064F2 7509                <1>     jne .kill   ;If this is zero, local invokation
   214 000064F4 C605(95040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   215 000064FB EBB2                <1>     jmp short .exit
   216                              <1> .kill:
   217 000064FD 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   218 00006504 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   219 00006506 C605(05070000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   220 0000650D E9B6F3FFFF          <1>     jmp terminateClean.altEP
   221                              <1> 
   222                              <1> ctrlBreakHdlr:
   223 00006512 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   224 00006514 E8A6C2FFFF          <1>     call printCaretASCII
   225 00006519 E8D1C2FFFF          <1>     call printCRLF
   226                              <1>     ;Reset the console back to 0
   227 0000651E C605(93040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   228                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   229                              <1> .exceptEP:
   230                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   231                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   232                              <1> ;   interrupted DOS call is restarted
   233 00006525 FA                  <1> 	cli
   234 00006526 488B25(7A040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   235 0000652D E87E0D0000          <1> 	call dosPopRegs ;Get user state back
   236 00006532 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   237 00006539 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   238 00006540 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp
   239 00006547 F8                  <1>     clc
   240 00006548 CD23                <1>     int 23h ;Call critical error handler
   241 0000654A FA                  <1>     cli ;Clear interrupts again
   242 0000654B 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   243 00006552 9C                  <1>     pushfq  ;Get flags in rax
   244 00006553 58                  <1>     pop rax 
   245 00006554 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   246 0000655B 750C                <1>     jne .checkCF
   247                              <1> .returnToDOS:
   248 0000655D 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   249 00006564 E9ED0B0000          <1>     jmp functionDispatch    ;Goto int 21h
   250                              <1> .checkCF:
   251 00006569 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   252 00006570 A801                <1>     test al, 1  ;CF set?
   253 00006572 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   254 00006574 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   255 00006579 C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   256 00006580 E9D10B0000          <1>     jmp functionDispatch
   257                              <1> 
   258                              <1> ;CPU Exception handlers
   259                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   260                              <1> ; CTRL+C exit.
   261                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   262                              <1> ; system.
   263                              <1> ; Also halt if the application is it's own parent.
   264                              <1> ;An application should hook these interupts if they wish to not 
   265                              <1> ; CTRL+C exit, and instead return to DOS.
   266                              <1> i0:
   267 00006585 31C0                <1>     xor eax, eax
   268 00006587 E9AB000000          <1>     jmp cpu_2args
   269                              <1> i1:
   270 0000658C B801000000          <1>     mov eax, 1
   271 00006591 E9A1000000          <1>     jmp cpu_2args
   272                              <1> i2:
   273 00006596 B802000000          <1>     mov eax, 2
   274 0000659B E997000000          <1>     jmp cpu_2args
   275                              <1> i3:
   276 000065A0 B803000000          <1>     mov eax, 3
   277 000065A5 E98D000000          <1>     jmp cpu_2args
   278                              <1> i4:
   279 000065AA B804000000          <1>     mov eax, 4
   280 000065AF E983000000          <1>     jmp cpu_2args
   281                              <1> i5:
   282 000065B4 B805000000          <1>     mov eax, 5
   283 000065B9 EB7C                <1>     jmp short cpu_2args
   284                              <1> i6:
   285 000065BB B806000000          <1>     mov eax, 6
   286 000065C0 EB75                <1>     jmp short cpu_2args
   287                              <1> i7:
   288 000065C2 B807000000          <1>     mov eax, 7
   289 000065C7 EB6E                <1>     jmp short cpu_2args
   290                              <1> i8:
   291 000065C9 B808000000          <1>     mov eax, 8
   292 000065CE EB60                <1>     jmp short cpu_3args
   293                              <1> i9:
   294 000065D0 B809000000          <1>     mov eax, 9
   295 000065D5 EB60                <1>     jmp short cpu_2args
   296                              <1> i10:
   297 000065D7 B80A000000          <1>     mov eax, 0Ah
   298 000065DC EB52                <1>     jmp short cpu_3args
   299                              <1> i11:
   300 000065DE B80B000000          <1>     mov eax, 0Bh
   301 000065E3 EB4B                <1>     jmp short cpu_3args
   302                              <1> i12:
   303 000065E5 B80C000000          <1>     mov eax, 0Ch
   304 000065EA EB44                <1>     jmp short cpu_3args
   305                              <1> i13:
   306 000065EC B80D000000          <1>     mov eax, 0Dh
   307 000065F1 EB3D                <1>     jmp short cpu_3args
   308                              <1> i14:
   309 000065F3 B80E000000          <1>     mov eax, 0Eh
   310 000065F8 EB2F                <1>     jmp short cpu_4args
   311                              <1> i15:
   312 000065FA B80F000000          <1>     mov eax, 0Fh
   313 000065FF EB36                <1>     jmp short cpu_2args
   314                              <1> i16:
   315 00006601 B810000000          <1>     mov eax, 10h
   316 00006606 EB2F                <1>     jmp short cpu_2args
   317                              <1> i17:
   318 00006608 B811000000          <1>     mov eax, 11h
   319 0000660D EB21                <1>     jmp short cpu_3args
   320                              <1> i18:
   321 0000660F B812000000          <1>     mov eax, 12h
   322 00006614 EB21                <1>     jmp short cpu_2args
   323                              <1> i19:
   324 00006616 B813000000          <1>     mov eax, 13h
   325 0000661B EB1A                <1>     jmp short cpu_2args
   326                              <1> i20:
   327 0000661D B814000000          <1>     mov eax, 14h
   328 00006622 EB13                <1>     jmp short cpu_2args
   329                              <1> i21:
   330 00006624 B815000000          <1>     mov eax, 15h
   331                              <1> cpu_4args:
   332 00006629 B903000000          <1>     mov ecx, 3
   333 0000662E EB0C                <1>     jmp short cpu_exception
   334                              <1> cpu_3args:
   335 00006630 B902000000          <1>     mov ecx, 2
   336 00006635 EB05                <1>     jmp short cpu_exception
   337                              <1> cpu_2args:
   338 00006637 B901000000          <1>     mov ecx, 1
   339                              <1> cpu_exception:
   340                              <1> ;Enter with:
   341                              <1> ; eax = Exception number in binary
   342                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   343 0000663C 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   344 00006643 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   345 00006648 E81B020000          <1>     call .writeExceptionMessage
   346                              <1> 
   347 0000664D 803D(08040000)01    <1>     cmp byte [inDOS], 1
   348 00006654 7327                <1>     jae .introStop
   349 00006656 3D02000000          <1>     cmp eax, 2
   350 0000665B 7420                <1>     je .introStop
   351                              <1> 
   352 0000665D 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   353 00006664 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   354 00006668 7413                <1>     je .introStop
   355                              <1> 
   356 0000666A 488D3568020000      <1>     lea rsi, .fatal1
   357 00006671 BBC1000000          <1>     mov ebx, fatal1L
   358 00006676 E8ED010000          <1>     call .writeExceptionMessage
   359 0000667B EB18                <1>     jmp short .introEnd
   360                              <1> .introStop:
   361 0000667D C605(921A0000)FF    <1>     mov byte [haltDOS], -1
   362 00006684 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   363 0000668B BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   364 00006690 E8D3010000          <1>     call .writeExceptionMessage
   365                              <1> .introEnd:
   366 00006695 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   367 0000669C E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   368 000066A1 488D35(821A0000)    <1>     lea rsi, byteBuffer
   369 000066A8 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   370 000066AD E8B6010000          <1>     call .writeExceptionMessage
   371                              <1> 
   372 000066B2 488D35E1020000      <1>     lea rsi, .fatal2
   373 000066B9 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   374 000066BE E8A5010000          <1>     call .writeExceptionMessage
   375                              <1> 
   376 000066C3 80F901              <1>     cmp cl, 1
   377 000066C6 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   378                              <1> .cpurollprint:
   379 000066CC 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   380 000066D3 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   381                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   382 000066D7 B108                <1>     mov cl, 8    ;8 bytes
   383                              <1> .cpurollprint1:
   384 000066D9 48C1C208            <1>     rol rdx, 8
   385 000066DD 88D0                <1>     mov al, dl
   386 000066DF 52                  <1>     push rdx
   387 000066E0 E851010000          <1>     call .printbyte
   388 000066E5 5A                  <1>     pop rdx
   389 000066E6 FEC9                <1>     dec cl
   390 000066E8 75EF                <1>     jnz .cpurollprint1
   391                              <1> 
   392 000066EA BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   393 000066EF 488D35(821A0000)    <1>     lea rsi, byteBuffer
   394 000066F6 E86D010000          <1>     call .writeExceptionMessage
   395                              <1> 
   396 000066FB BB03000000          <1>     mov ebx, crlfL
   397 00006700 488D35AF020000      <1>     lea rsi, .crlf
   398 00006707 E85C010000          <1>     call .writeExceptionMessage    
   399                              <1> 
   400 0000670C F605(921A0000)FF    <1>     test byte [haltDOS], -1
   401 00006713 7534                <1>     jnz .fatalStop
   402 00006715 E839010000          <1>     call .readInputChar
   403                              <1>     ;Set error code to General Failure
   404 0000671A 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   404 00006722 00                  <1>
   405 00006723 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   406 0000672A C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   407 00006731 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   408 00006738 B8FF4C0000          <1>     mov eax, 4cFFh
   409 0000673D C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1
   410                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   411                              <1>     ; setup as above, chances are it was a CPU error
   412 00006744 E90D0A0000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   413                              <1> .fatalStop:
   414                              <1> ;This is called if inDOS > 1 or NMI occured
   415                              <1> ;Waits 1 minute then reboots
   416 00006749 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   417 0000674E CD2A                <1>     int 2Ah
   418 00006750 E8890B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   419 00006755 E8980B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   420 0000675A E866C6FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   421 0000675F 89D3                <1>     mov ebx, edx
   422 00006761 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   423                              <1> .loopForNextSecond:
   424 00006767 E820000000          <1>     call .getTimeDateCompare
   425 0000676C 74F9                <1>     je .loopForNextSecond
   426                              <1> .loopTillTimeElapsed:
   427 0000676E E819000000          <1>     call .getTimeDateCompare
   428 00006773 75F9                <1>     jne .loopTillTimeElapsed
   429                              <1>     ;Now we triple fault
   430 00006775 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   431 0000677C EB00                <1>     jmp short .toHell
   432                              <1> .toHell:
   433 0000677E CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   434 00006780 EBFC                <1>     jmp short .toHell
   435                              <1> .resetIDT:
   436 00006782 0000                <1>     dw 0
   437 00006784 0000000000000000    <1>     dq 0
   438                              <1> .getTimeDateCompare:
   439 0000678C 53                  <1>     push rbx
   440 0000678D E833C6FFFF          <1>     call getDateAndTimeOld
   441 00006792 5B                  <1>     pop rbx
   442 00006793 81E21F000000        <1>     and edx, 1Fh
   443 00006799 39DA                <1>     cmp edx, ebx
   444                              <1>     return
    13                              <2> %%_ret:
    14 0000679B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> 
   446                              <1> .cpuextendederror:
   447 0000679C 5A                  <1>     pop rdx
   448 0000679D 48FFC9              <1>     dec rcx
   449 000067A0 51                  <1>     push rcx
   450 000067A1 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   451 000067A8 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   452 000067AA 86D6                <1>     xchg dl, dh   
   453                              <1> .pr1:
   454 000067AC 88D0                <1>     mov al, dl
   455 000067AE 52                  <1>     push rdx
   456 000067AF E882000000          <1>     call .printbyte
   457 000067B4 5A                  <1>     pop rdx
   458 000067B5 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   459 000067B8 FEC9                <1>     dec cl
   460 000067BA 75F0                <1>     jnz .pr1
   461                              <1> 
   462 000067BC 488D35(821A0000)    <1>     lea rsi, byteBuffer
   463 000067C3 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   464 000067C8 E89B000000          <1>     call .writeExceptionMessage
   465                              <1> 
   466 000067CD 488D35C6010000      <1>     lea rsi, .fatal2
   467 000067D4 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   468 000067D9 E88A000000          <1>     call .writeExceptionMessage
   469                              <1> 
   470 000067DE 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   471 000067DF 48FFC9              <1>     dec rcx
   472 000067E2 0F84E4FEFFFF        <1>     jz .cpurollprint
   473                              <1> 
   474 000067E8 B108                <1>     mov cl, 8   ;16 nybbles
   475 000067EA 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   476 000067ED 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   477                              <1> .pr2:
   478 000067F4 48C1C208            <1>     rol rdx, 8    ;Print rdx
   479 000067F8 88D0                <1>     mov al, dl
   480 000067FA 52                  <1>     push rdx
   481 000067FB E836000000          <1>     call .printbyte
   482 00006800 5A                  <1>     pop rdx
   483 00006801 FEC9                <1>     dec cl
   484 00006803 75EF                <1>     jnz .pr2
   485                              <1> 
   486 00006805 488D35(821A0000)    <1>     lea rsi, byteBuffer
   487 0000680C BB10000000          <1>     mov ebx, 16
   488 00006811 E852000000          <1>     call .writeExceptionMessage
   489                              <1> 
   490 00006816 488D357D010000      <1>     lea rsi, .fatal2
   491 0000681D BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   492 00006822 E841000000          <1>     call .writeExceptionMessage
   493                              <1> 
   494 00006827 E9A0FEFFFF          <1>     jmp .cpurollprint
   495                              <1> 
   496                              <1> 
   497                              <1> .char:    ;Print a single character
   498 0000682C 488D1D6D000000      <1>     lea rbx, .ascii
   499 00006833 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   500 00006834 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   501 00006835 C3                  <1>     ret
   502                              <1> .printbyte:
   503 00006836 88C2                <1>     mov dl, al            ;save byte in dl
   504 00006838 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   505 0000683C 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   506 00006841 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   507 00006845 E8E2FFFFFF          <1>     call .char
   508 0000684A 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   509 0000684D E8DAFFFFFF          <1>     call .char
   510 00006852 C3                  <1>     ret        
   511                              <1> 
   512                              <1> 
   513                              <1> .readInputChar:
   514 00006853 C605(EC040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   515 0000685A 488D35(1B050000)    <1>     lea rsi, singleIObyt
   516 00006861 BB01000000          <1>     mov ebx, 1  ;Read one char
   517 00006866 EB07                <1>     jmp short .ioException
   518                              <1> .writeExceptionMessage:
   519                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   520 00006868 C605(EC040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   521                              <1> .ioException:
   522 0000686F C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   523 00006876 66C705(ED040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   523 0000687E 00                  <1>
   524 0000687F 891D(00050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   525 00006885 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   526 0000688C 488935(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   527 00006893 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   528 0000689A E822010000          <1>     call goDriver
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000689F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> 
   532                              <1> ;Error messages
   533 000068A0 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   533 000068A9 39414243444546      <1>
   534 000068B0 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   534 000068B9 20205343502F444F53- <1>
   534 000068C2 20455843455054494F- <1>
   534 000068CB 4E2044455445435445- <1>
   534 000068D4 44210D0A0A          <1>
   535                              <1> fatalt0L   equ $ - .fatalt0
   536                              <1> 
   537                              <1> .fatal1:   
   538 000068D9 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   538 000068E2 656E7469616C6C7920- <1>
   538 000068EB 666174616C20657272- <1>
   538 000068F4 6F7220686173206265- <1>
   538 000068FD 656E20646574656374- <1>
   538 00006906 65640D0A            <1>
   539 0000690A 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   539 00006913 68652063757272656E- <1>
   539 0000691C 74206170706C696361- <1>
   539 00006925 74696F6E206D757374- <1>
   539 0000692E 206265207465726D69- <1>
   539 00006937 6E617465642E0D0A0A  <1>
   540 00006940 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   540 00006949 20616E79206B657920- <1>
   540 00006952 746F20636F6E74696E- <1>
   540 0000695B 7565206F7220435452- <1>
   540 00006964 4C2B414C542B44454C- <1>
   540 0000696D 20746F207265737461- <1>
   540 00006976 727420746865206D61- <1>
   540 0000697F 6368696E652E        <1>
   541 00006985 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   541 0000698E 5354454D204552524F- <1>
   541 00006997 523A20              <1>
   542                              <1> fatal1L equ $ - .fatal1
   543                              <1> 
   544 0000699A 203A20              <1> .fatal2:   db " : "
   545                              <1> fatal2L    equ $ - .fatal2
   546                              <1> 
   547                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   548 0000699D 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   548 000069A6 4F532053595354454D- <1>
   548 000069AF 2053544F503A20      <1>
   549                              <1> fatalHaltL equ $ - .fatalHalt
   550 000069B6 0D0A0A              <1> .crlf:  db CR,LF,LF
   551                              <1> crlfL  equ $ - .crlf
    42                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 000069B9 B003                <1>     mov al, critFail
     7 000069BB 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 000069BD 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 000069C1 E82C090000          <1>     call dosCrit2Enter
    16 000069C6 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 000069C9 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 000069CC E82B090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 000069D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 000069D2 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 000069D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 000069D9 84C0                <1>     test al, al
    33 000069DB 723F                <1>     jc .diskError
    34 000069DD 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 000069E3 7337                <1>     jae .diskError
    36 000069E5 50                  <1>     push rax
    37 000069E6 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 000069E8 E8FD040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 000069ED 58                  <1>     pop rax
    40 000069EE 7235                <1>     jc .error
    41 000069F0 8805(08070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 000069F6 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 000069FD 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006A05 750A                <1>     jnz .netError
    45 00006A07 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006A0B E8B1030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006A10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006A11 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006A19 00                  <1>
    50 00006A1A EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006A1C 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006A24 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006A25 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006A2C C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006A33 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006A3A F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006A3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006A3C FE05(08040000)      <1>     inc byte [inDOS]
    63 00006A42 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006A43 FC                  <1>     cld ;Set string ops in the right direction
    65 00006A44 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006A49 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 00006A4B C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006A52 56                  <1>     push rsi
    69 00006A53 50                  <1>     push rax
    70 00006A54 488D35(1D050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006A5B 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006A5D 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006A60 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006A66 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006A67 B800030000          <1>     mov eax, 0300h  
    79 00006A6C CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006A6E 58                  <1>     pop rax
    82 00006A6F 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006A70 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006A72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006A73 FA                  <1>     cli
    93 00006A74 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006A7B 488D25(E0190000)    <1>     lea rsp, DiskStakTop
    95 00006A82 55                  <1>     push rbp
    96 00006A83 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006A84 E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006A89 7252                <1>     jc absDiskExit
    99 00006A8B E844020000          <1>     call primReqWriteSetup
   100 00006A90 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006A92 FA                  <1>     cli 
   107 00006A93 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006A9A 488D25(E0190000)    <1>     lea rsp, DiskStakTop
   109 00006AA1 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006AA2 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006AA3 E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006AA8 7233                <1>     jc absDiskExit
   113 00006AAA E830020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006AAF E859000000          <1>     call absDiskDriverCall
   118 00006AB4 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006AB6 8A05(C3040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006ABC B480                <1>     mov ah, 80h ;Attachment failure
   123 00006ABE 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006AC0 741A                <1>     je .absExit
   125 00006AC2 B440                <1>     mov ah, 40h ;Seek error
   126 00006AC4 3C06                <1>     cmp al, 06h
   127 00006AC6 7414                <1>     je .absExit
   128 00006AC8 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006ACA 3C04                <1>     cmp al, 04h
   130 00006ACC 740E                <1>     je .absExit
   131 00006ACE B404                <1>     mov ah, 04h ;Sector not found
   132 00006AD0 3C08                <1>     cmp al, 08h
   133 00006AD2 7408                <1>     je .absExit
   134 00006AD4 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006AD6 84C0                <1>     test al, al
   136 00006AD8 7402                <1>     je .absExit
   137 00006ADA B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006ADC F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006ADD 5B                  <1>     pop rbx
   142 00006ADE 5D                  <1>     pop rbp
   143 00006ADF FA                  <1>     cli
   144 00006AE0 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]
   145 00006AE7 FB                  <1>     sti ;Reenable interrupts
   146 00006AE8 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006AEF 9C                  <1>     pushfq
   148 00006AF0 5A                  <1>     pop rdx ;Get the current flags
   149 00006AF1 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006AF5 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006AFA 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006AFC FA                  <1>     cli
   154 00006AFD 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006AFE 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006AFF 9C                  <1>     pushfq
   157 00006B00 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006B02 89CA                <1>     mov edx, ecx
   159 00006B04 FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006B0A 9D                  <1>     popfq
   161 00006B0B FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006B0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006B0D 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006B0E 8B0D(D6040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006B14 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006B18 E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 00006B1D 5E                  <1>     pop rsi
   177 00006B1E 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006B24 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006B26 0FB705(C3040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 00006B2D 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006B31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006B32 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006B36 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006B39 8805(08070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006B3F E87D020000          <1>     call setWorkingDPB
   192 00006B44 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006B45 E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006B4A 5F                  <1>     pop rdi
   195 00006B4B 7235                <1>     jc .exitBad ;Preserve CF
   196 00006B4D 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006B4F 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006B56 31C0                <1>     xor eax, eax
   200 00006B58 FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006B5A 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006B5E 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006B65 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006B6B 7509                <1>     jnz .next
   207 00006B6D 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006B71 7503                <1>     jne .next   ;Else, goto next
   209 00006B73 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006B76 4881C75F000000      <1>     add rdi, cds_size
   212 00006B7D FFC9                <1>     dec ecx
   213 00006B7F 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006B81 F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006B82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224 00006B83 E8A0010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   225                              <1> ;Return in rbx the req hdr address
   226 00006B88 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   227 00006B8C E830FEFFFF          <1>     call goDriver   ;Request!
   228 00006B91 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   229 00006B95 F7C700800000        <1>     test edi, drvErrStatus
   230 00006B9B 0F85C4000000        <1>     jnz .diskDrvCritErr
   231 00006BA1 0FB605(08070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   232 00006BA8 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   233 00006BAB 3805(E9190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   234 00006BB1 750C                <1>     jne .notForce
   235                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   236                              <1>     ; not changed but the new volume needs to be updated. 
   237                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   238                              <1>     ; new label.  
   239 00006BB3 C605(E9190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   240 00006BBA E95E000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   241                              <1> .notForce:
   242 00006BBF 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   243 00006BC2 7854                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   244                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006BC4 75BC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   245                              <1>     ;Here we check for any dirty buffers
   246                              <1>     ;If dirty buffer found, dont get new DPB
   247 00006BC6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   248                              <1> .checkBuffer:
   249 00006BCD 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   250 00006BD0 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   251 00006BD2 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   252 00006BD6 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   253 00006BD8 F8                  <1>     clc 
   254                              <1>     return
    13                              <2> %%_ret:
    14 00006BD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .gotoNextBuffer:
   256 00006BDA 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   257 00006BDD 4881FFFFFFFFFF      <1>     cmp rdi, -1
   258 00006BE4 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   259                              <1>     ;If we get here, we found no dirty buffers for our drive
   260                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   261 00006BE6 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset number of free to unknown
   262 00006BED E8FC9AFFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   263                              <1> .dirtyLoop:
   264 00006BF2 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   265 00006BF6 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   266 00006BF9 7515                <1>     jne .skipDirtyCheck
   267 00006BFB F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   268 00006BFF 0F8490000000        <1>     je .dirtyBufferError
   269                              <1>     ;Set reference bit and drive to free
   270 00006C05 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   271 00006C0B E8F89AFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   272                              <1> .skipDirtyCheck:
   273 00006C10 E8019BFFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   274 00006C15 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   275                              <1> .exit:
   276                              <1>     return
    13                              <2> %%_ret:
    14 00006C17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   278 00006C18 E8B29BFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   279                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   280 00006C1D C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   281                              <1>     ;Get a buffer to read BPB into in rdi
   282 00006C21 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   283 00006C23 E8A09DFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   284 00006C28 723A                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   285 00006C2A 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   286                              <1> .repeatEP:
   287 00006C2E E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   288 00006C33 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   289 00006C37 E885FDFFFF          <1>     call goDriver   ;Request!
   290 00006C3C 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   291 00006C40 F7C700800000        <1>     test edi, drvErrStatus
   292 00006C46 751D                <1>     jnz .diskDrvCritErr
   293                              <1>     ;Now rebuild the dpb fields for this drive
   294 00006C48 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   295 00006C4C 53                  <1>     push rbx
   296 00006C4D E82A0A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   297 00006C52 5B                  <1>     pop rbx
   298                              <1>     ;Adjust the buffer header information
   299 00006C53 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   300 00006C56 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   301 00006C59 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   302 00006C5C 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   303 00006C5F 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   304 00006C61 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   305                              <1> .exitBad:
   306                              <1>     return
    13                              <2> %%_ret:
    14 00006C64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> .diskDrvCritErr:
   308                              <1> ;Critical Errors fall through here
   309                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   310 00006C65 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset freecluster count
   311 00006C6C 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   312 00006C73 B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   313 00006C75 8825(67040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   314 00006C7B 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   315 00006C7F E88EF7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   316 00006C84 488B2D(8D070000)    <1>     mov rbp, qword [tmpDPBPtr]
   317 00006C8B 3C01                <1>     cmp al, critRetry
   318 00006C8D 0F849FFEFFFF        <1>     je getDiskDPB
   319                              <1> .errorExitBad:
   320 00006C93 F9                  <1>     stc     ;Set error flag to indicate fail
   321                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00006C94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .dirtyBufferError:
   324 00006C95 55                  <1>     push rbp
   325 00006C96 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   326 00006C9A 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   327 00006CA0 5D                  <1>     pop rbp
   328 00006CA1 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   329                              <1>     ;rbp points to the dpb still
   330 00006CA3 57                  <1>     push rdi
   331 00006CA4 488B3D(CF040000)    <1>     mov rdi, qword [primReqHdr + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   332 00006CAB 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   333 00006CB2 5F                  <1>     pop rdi ;Get back the buffer pointer
   334 00006CB3 C605(67040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   335 00006CBA C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   336 00006CC1 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   337 00006CC6 E8DDF6FFFF          <1>     call diskDevErr
   338 00006CCB 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   339 00006CCD 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   340 00006CCF E95EFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;           Primitive Driver Requests
   343                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   344                              <1> ;First are Disk requests, then Char device requests
   345                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   346                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   347                              <1> 
   348                              <1> primReqWriteSetup:
   349 00006CD4 50                  <1>     push rax
   350 00006CD5 B408                <1>     mov ah, drvWRITE    ;Command code
   351 00006CD7 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   352 00006CDD EB03                <1>     jmp short primReqRWCommon
   353                              <1> primReqReadSetup:
   354 00006CDF 50                  <1>     push rax
   355 00006CE0 B404                <1>     mov ah, drvREAD
   356                              <1> primReqRWCommon:
   357                              <1> ;Sets up the IO request packet with:
   358                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   359                              <1> ; rbx = Data storage buffer ptr
   360                              <1> ; ecx = Number of sectors to transfer
   361                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   362                              <1> ; ~~~~ Set by entry function ~~~~ 
   363                              <1> ; ah = Command code
   364                              <1> ; All regs preserved EXCEPT rbx.
   365                              <1> ; Return: rbx = Transfer Address
   366 00006CE2 48891D(CE040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   367 00006CE9 890D(D6040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   368 00006CEF C605(C0040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   369 00006CF6 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   370 00006CFB 8905(C1040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   371 00006D01 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   372 00006D04 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   373                              <1>     ;Disk operations only here!
   374 00006D06 488915(DA040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   375 00006D0D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 00006D10 8805(CD040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   377 00006D16 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   378 00006D19 8805(C1040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   379                              <1> primReqCommonExit:
   380                              <1> ;Returns in rbx the primary request header as these functions
   381                              <1> ; setup the request in the primary request header space
   382 00006D1F 58                  <1>     pop rax
   383 00006D20 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   384                              <1>     return
    13                              <2> %%_ret:
    14 00006D27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> primReqMedCheckSetup:
   387                              <1> ;Prepare the diskIO packet for mediacheck
   388                              <1> ;rbp has DPB pointer for device to check media on
   389 00006D28 50                  <1>     push rax
   390 00006D29 C605(C0040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   391 00006D30 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   392 00006D33 8805(CD040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   393 00006D39 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   394 00006D3C 8805(C1040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   395 00006D42 C605(C2040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   396 00006D49 66C705(C3040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   396 00006D51 00                  <1>
   397 00006D52 EBCB                <1>     jmp short primReqCommonExit
   398                              <1> 
   399                              <1> primReqGetBPBSetup:
   400                              <1> ;rbp has DPB pointer for device
   401                              <1> ;rdi has sector buffer header pointer for transfer
   402 00006D54 50                  <1>     push rax
   403 00006D55 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   404 00006D59 48893D(CE040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   405 00006D60 C605(C0040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   406 00006D67 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   407 00006D6A 8805(CD040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   408 00006D70 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   409 00006D73 8805(C1040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   410 00006D79 C605(C2040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   411 00006D80 66C705(C3040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   411 00006D88 00                  <1>
   412 00006D89 EB94                <1>     jmp short primReqCommonExit
   413                              <1> 
   414                              <1> primReqOpenSetup:
   415                              <1> ;al = unit number if a disk device. Undefined otherwise
   416 00006D8B 50                  <1>     push rax
   417 00006D8C B40D                <1>     mov ah, drvOPEN
   418 00006D8E EB03                <1>     jmp short primReqOCcommon
   419                              <1> primReqCloseSetup:
   420                              <1> ;al = unit number if a disk device. Undefined otherwise
   421 00006D90 50                  <1>     push rax
   422 00006D91 B40E                <1>     mov ah, drvCLOSE
   423                              <1> primReqOCcommon:
   424 00006D93 C605(C0040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   425 00006D9A 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   426 00006D9B 8905(C1040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   427                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   428 00006DA1 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   429                              <1> 
   430                              <1> secdReqCharIOReq:
   431                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   432                              <1> ;Input:
   433                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   434                              <1> ; ecx = Length of buffer
   435                              <1> ; rdi = Buffer pointer
   436                              <1> ;Output: 
   437                              <1> ; rbx = Transfer Address 
   438 00006DA6 488D1D(96040000)    <1>     lea rbx, secdReqHdr
   439 00006DAD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   440 00006DB0 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   441 00006DB3 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   442 00006DB9 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   443 00006DBD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   444                              <1>     return
    13                              <2> %%_ret:
    14 00006DC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> ;If the device which will process this request is a disk device
   446                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   447                              <1> ;Then we will read the appropriate byte from that buffer to the 
   448                              <1> ; singleIOByt buffer.
   449                              <1> ;Such a request will require additional setup with the following fields:
   450                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    43                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006DC1 48892D(09070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006DC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006DC9 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
    21 00006DD0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006DD7 7409                <1>     je .net
    23 00006DD9 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006DDF 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006DE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006DE2 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006DE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006DE4 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006DE9 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006DEB B80C110000          <1>     mov eax, 110Ch 
    43 00006DF0 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006DF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006DF3 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006DFA E8DF040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006DFF E82EFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006E04 721C                <1>     jc .exit
    51 00006E06 E8C59DFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00006E0B 7215                <1>     jc .exit
    53 00006E0D 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00006E10 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006E12 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006E15 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006E18 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006E1A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00006E1E 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006E21 F8                  <1>     clc
    61                              <1> .exit:
    62 00006E22 E8C1040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006E27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006E28 50                  <1>     push rax    ;Preserve rax
    69 00006E29 FA                  <1>     cli ;Halt interrupts
    70 00006E2A 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006E31 0FB6C0              <1>     movzx eax, al
    72 00006E34 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006E38 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 00006E3F 31DB                <1>     xor ebx, ebx
    75 00006E41 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006E44 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006E48 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00006E4C 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 00006E50 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 00006E53 FB                  <1>     sti
    81 00006E54 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 00006E55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 00006E56 488B35(7A040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00006E5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00006E5E 488B35(43000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 00006E65 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00006E6C 740A                <1>     je .exitBad
    96 00006E6E 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 00006E70 7407                <1>     je .exit    ;Drive found
    98 00006E72 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 00006E76 EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 00006E78 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 00006E79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00006E7A E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 00006E7F 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 00006E81 56                  <1>     push rsi
   114 00006E82 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 00006E89 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 00006E8F 5E                  <1>     pop rsi
   117 00006E90 7401                <1>     jz .exit
   118 00006E92 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 00006E93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 00006E94 50                  <1>     push rax
   132 00006E95 2C40                <1>     sub al, "A"-1
   133 00006E97 3A05(77000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 00006E9D 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 00006EA4 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 00006EAA 58                  <1>     pop rax
   137 00006EAB 723C                <1>     jb .exit    ;Exit with CF=CY
   138 00006EAD 50                  <1>     push rax
   139 00006EAE 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006EB3 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006EB5 58                  <1>     pop rax
   142 00006EB6 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 00006EBC C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006EC3 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   145 00006ECB C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   146 00006ED2 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   147                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   148 00006ED8 50                  <1>     push rax
   149 00006ED9 56                  <1>     push rsi
   150 00006EDA 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   151 00006EDC E87DFFFFFF          <1>     call walkDPBchain
   152 00006EE1 7204                <1>     jb .skipSettingDPB
   153 00006EE3 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   154                              <1> .skipSettingDPB:
   155 00006EE7 5E                  <1>     pop rsi
   156 00006EE8 58                  <1>     pop rax
   157                              <1> .exit:
   158                              <1>     return
    13                              <2> %%_ret:
    14 00006EE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> getCDS:     ;Int 2Fh AX=1219h
   161                              <1> ;Gets the device DPB and saves it in the DOS variable
   162                              <1> ;This can be called to get CDS for network drives too!
   163                              <1> ;Input: al = 1 based drive number
   164                              <1> ;Sets workingCDS var with the CDS for the device. 
   165                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   166 00006EEA 84C0                <1>     test al, al
   167 00006EEC 7508                <1>     jnz .skip
   168 00006EEE 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   169 00006EF4 FEC0                <1>     inc al
   170                              <1> .skip:
   171 00006EF6 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   172 00006EF8 56                  <1>     push rsi
   173 00006EF9 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   174 00006F00 F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   175 00006F07 7423                <1>     jz .localCall
   176                              <1>     ;Invokation via 21/5D00
   177 00006F09 50                  <1>     push rax
   178 00006F0A 57                  <1>     push rdi
   179 00006F0B 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   180 00006F12 48893D(11070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   181 00006F19 0441                <1>     add al, "A" ;Convert to a drive letter
   182 00006F1B E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   183 00006F20 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   184 00006F26 5F                  <1>     pop rdi
   185 00006F27 58                  <1>     pop rax
   186 00006F28 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   187 00006F2A EB17                <1>     jmp short .exitOk   ;All oki
   188                              <1> .localCall:
   189 00006F2C E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   190 00006F31 7208                <1>     jc .exitBad
   191 00006F33 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   192 00006F39 7508                <1>     jnz .exitOk ;Exit with flag cleared
   193                              <1>     ;Else Return to unknown error locus
   194                              <1> .exitBad:
   195 00006F3B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   196                              <1> .exitBad1:
   197 00006F42 F9                  <1>     stc
   198                              <1> .exitOk:
   199 00006F43 5E                  <1>     pop rsi
   200                              <1>     return
    13                              <2> %%_ret:
    14 00006F44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   203                              <1>     ;Gets the CDS for the current drive in al
   204                              <1>     ;Input: al = Drive number, 0 = A ...
   205                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   206                              <1>     ;        CF=CY => al not valid
   207 00006F45 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   208 00006F4B 7202                <1>     jb .ctn
   209 00006F4D F9                  <1>     stc 
   210                              <1>     return
    13                              <2> %%_ret:
    14 00006F4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .ctn:
   212 00006F4F 50                  <1>     push rax
   213 00006F50 52                  <1>     push rdx
   214 00006F51 0FB6C0              <1>     movzx eax, al
   215 00006F54 48BE5F000000000000- <1>     mov rsi, cds_size
   215 00006F5D 00                  <1>
   216 00006F5E 31D2                <1>     xor edx, edx
   217 00006F60 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   218 00006F62 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   219 00006F69 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   220 00006F6C 488935(11070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   221 00006F73 5A                  <1>     pop rdx
   222 00006F74 58                  <1>     pop rax
   223 00006F75 F8                  <1>     clc
   224                              <1>     return
    13                              <2> %%_ret:
    14 00006F76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> 
   226                              <1> 
   227                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   228                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   229                              <1> ;Input: AL = Char to normalise.
   230                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   231                              <1> ;If path separator, set ZF=ZE
   232 00006F77 3C5C                <1>     cmp al, "\"
   233 00006F79 7406                <1>     je .exit
   234 00006F7B 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   235 00006F7D 7502                <1>     jne .exit
   236 00006F7F B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   237                              <1> .exit:
   238                              <1>     return
    13                              <2> %%_ret:
    14 00006F81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> uppercaseCharAtPtr:
   241                              <1> ;Get the char pointed to by rsi and then fall
   242 00006F82 AC                  <1>     lodsb
   243                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   244                              <1> ;Convert a lowercase char to uppercase
   245                              <1> ; Leave alone uppercase chars and invalid chars
   246                              <1> ;Input: al = Char to convert to uppercase
   247                              <1> ;Output: al = Processed char
   248 00006F83 53                  <1>     push rbx
   249 00006F84 3C61                <1>     cmp al, "a"
   250 00006F86 7214                <1>     jb .exit
   251 00006F88 3C7A                <1>     cmp al, "z"
   252 00006F8A 7702                <1>     ja .checkExt
   253 00006F8C 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   254                              <1> .checkExt:
   255 00006F8E 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   256 00006F90 720A                <1>     jb .exit
   257 00006F92 2C80                <1>     sub al, 80h ;Turn into table offset
   258 00006F94 488D1D0F93FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   259 00006F9B D7                  <1>     xlatb   ;Get converted extended byte into al
   260                              <1> .exit:
   261 00006F9C 50                  <1>     push rax    ;Save al temporarily
   262 00006F9D 488D1DB894FFFF      <1>     lea rbx, asciiCharProperties
   263 00006FA4 D7                  <1>     xlatb   ;Get the signature in al
   264 00006FA5 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   265 00006FA7 58                  <1>     pop rax
   266 00006FA8 5B                  <1>     pop rbx
   267                              <1>     return
    13                              <2> %%_ret:
    14 00006FA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> strlen2:    ;Int 2Fh, AX=1212h
   270                              <1> ;Entry point for Multiplex
   271 00006FAA 57                  <1>     push rdi
   272 00006FAB 4889F7              <1>     mov rdi, rsi
   273 00006FAE E802000000          <1>     call strlen
   274 00006FB3 5F                  <1>     pop rdi
   275                              <1>     return
    13                              <2> %%_ret:
    14 00006FB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> strlen: 
   277                              <1> ;Gets the length of a ASCIIZ string
   278                              <1> ;Input: rdi = Source buffer
   279                              <1> ;Output: ecx = Length of string
   280 00006FB5 50                  <1>     push rax
   281 00006FB6 57                  <1>     push rdi
   282 00006FB7 30C0                <1>     xor al, al
   283 00006FB9 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   284 00006FBB FFC9                <1>     dec ecx ;rcx = -1
   285 00006FBD F2AE                <1>     repne scasb
   286 00006FBF F7D1                <1>     not ecx
   287 00006FC1 5F                  <1>     pop rdi
   288 00006FC2 58                  <1>     pop rax
   289                              <1>     return
    13                              <2> %%_ret:
    14 00006FC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> 
   291                              <1> strcpy:
   292                              <1> ;Copies a null terminated string from rsi to rdi
   293 00006FC4 AC                  <1>     lodsb
   294 00006FC5 AA                  <1>     stosb
   295 00006FC6 84C0                <1>     test al, al
   296                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006FC8 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   297 00006FCA EBF8                <1>     jmp short strcpy
   298                              <1> 
   299                              <1> strcmp:
   300                              <1> ;Compares two ASCIIZ strings for equality.
   301                              <1> ;Input: rsi = First string
   302                              <1> ;       rdi = Second string
   303                              <1> ;       ecx = Number of bytes to compare
   304                              <1> ;Output: ZF=ZE => Equal
   305                              <1> ;        ZF=NZ => Not equal
   306 00006FCC 56                  <1>     push rsi
   307 00006FCD 57                  <1>     push rdi
   308 00006FCE F3A6                <1>     repe cmpsb
   309 00006FD0 5F                  <1>     pop rdi
   310 00006FD1 5E                  <1>     pop rsi
   311                              <1>     return
    13                              <2> %%_ret:
    14 00006FD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> 
   314                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   315                              <1> ;Converts lowercase to uppercase and / to "\"
   316                              <1> ;Input: rsi = Source buffer
   317                              <1> ;       rdi = Buffer to place normalised path
   318 00006FD3 50                  <1>     push rax
   319 00006FD4 56                  <1>     push rsi
   320 00006FD5 57                  <1>     push rdi
   321                              <1> .scan:
   322 00006FD6 AC                  <1>     lodsb
   323 00006FD7 84C0                <1>     test al, al
   324 00006FD9 740D                <1>     jz .exit
   325 00006FDB E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   326 00006FE0 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   327 00006FE5 AA                  <1>     stosb
   328 00006FE6 EBEE                <1>     jmp short .scan
   329                              <1> .exit:
   330 00006FE8 5F                  <1>     pop rdi
   331 00006FE9 5E                  <1>     pop rsi
   332 00006FEA 58                  <1>     pop rax
   333                              <1>     return
    13                              <2> %%_ret:
    14 00006FEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   334                              <1> 
   335                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   336                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   337                              <1> ;Input: rsi = One ASCIIZ pathname
   338                              <1> ;       rdi = Second ASCIIZ pathname
   339                              <1> ;Return:
   340                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   341 00006FEC 50                  <1>     push rax
   342 00006FED 56                  <1>     push rsi
   343 00006FEE 57                  <1>     push rdi
   344                              <1> .scan:
   345 00006FEF AC                  <1>     lodsb
   346 00006FF0 E818000000          <1>     call .normaliseChar
   347 00006FF5 88C4                <1>     mov ah, al  ;Save normalised char in ah
   348 00006FF7 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   349 00006FF9 48FFC7              <1>     inc rdi ;And goto next char
   350 00006FFC E80C000000          <1>     call .normaliseChar
   351 00007001 38E0                <1>     cmp al, ah  ;Are they equal?
   352 00007003 7504                <1>     jne .exit   ;If not equal, exit
   353 00007005 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   354 00007007 75E6                <1>     jnz .scan
   355                              <1> .exit:
   356 00007009 5F                  <1>     pop rdi
   357 0000700A 5E                  <1>     pop rsi
   358 0000700B 58                  <1>     pop rax
   359                              <1>     return
    13                              <2> %%_ret:
    14 0000700C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .normaliseChar:
   361 0000700D E871FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   362 00007012 E860FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   363                              <1>     return
    13                              <2> %%_ret:
    14 00007017 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> checkPathspecOK:
   365                              <1> ;Input:
   366                              <1> ;rsi -> points to a path to verify if it is ok.
   367                              <1> ;Output:
   368                              <1> ;CF=NC => The path is totally clean and ok to use.
   369                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   370                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   371                              <1> ; and depending on method of invokation and caller, may be permissable.
   372                              <1> ;We accept lc and uc characters in this check function.
   373 00007018 50                  <1>     push rax
   374 00007019 53                  <1>     push rbx    ;Use rbx as the return flag status
   375 0000701A 56                  <1>     push rsi
   376 0000701B 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   377                              <1>     ;Start by getting the length of the ASCIIZ string.
   378 0000701D 51                  <1>     push rcx
   379 0000701E 57                  <1>     push rdi
   380 0000701F 4889F7              <1>     mov rdi, rsi
   381 00007022 E88EFFFFFF          <1>     call strlen
   382 00007027 81F940000000        <1>     cmp ecx, 64    ;Check
   383 0000702D 5F                  <1>     pop rdi
   384 0000702E 59                  <1>     pop rcx
   385 0000702F 7770                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   386                              <1>     ;First we verify if our path is relative or canonical (absolute)
   387 00007031 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   388 00007034 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   389 00007038 7416                <1>     je .netName
   390 0000703A 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   391 0000703E 7410                <1>     je .netName
   392 00007040 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   393 00007043 7414                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   394                              <1>     ;Here if relative
   395 00007045 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   396 0000704C 7553                <1>     jnz .badExit    ;If this is -1, server invoke.
   397 0000704E EB21                <1>     jmp short .okToScan
   398                              <1> .netName:
   399 00007050 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   400 00007057 EB18                <1>     jmp short .okToScan
   401                              <1> .diskPath:
   402 00007059 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   403 00007060 F605(01070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   404 00007067 7408                <1>     jz .okToScan
   405 00007069 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   406 0000706A E808FFFFFF          <1>     call swapPathSeparator
   407 0000706F 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   408                              <1> .okToScan:
   409 00007071 AC                  <1>     lodsb   
   410 00007072 84C0                <1>     test al, al ;End of path char?
   411 00007074 7430                <1>     jz .exit
   412 00007076 E8FCFEFFFF          <1>     call swapPathSeparator
   413 0000707B 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   414 0000707D 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   415 0000707F 7411                <1>     je .wcFound
   416 00007081 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   417 00007083 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   418                              <1>     ;Else we check that the char in al is an acceptable char
   419 00007085 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   420 00007087 74E8                <1>     je .okToScan
   421 00007089 E831000000          <1>     call checkCharValid
   422 0000708E 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   423 00007090 EBDF                <1>     jmp short .okToScan
   424                              <1> .wcFound:
   425 00007092 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   426 00007097 EBD8                <1>     jmp short .okToScan
   427                              <1> .wcCheck:
   428                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   429 00007099 F7C340000000        <1>     test ebx, 40h
   430 0000709F 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   431                              <1>     ;Else fall through in error
   432                              <1> .badExit:
   433 000070A1 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   434                              <1> .exit:
   435 000070A6 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   436 000070A7 9D                  <1>     popfq
   437 000070A8 5E                  <1>     pop rsi
   438 000070A9 5B                  <1>     pop rbx
   439 000070AA 58                  <1>     pop rax
   440                              <1>     return
    13                              <2> %%_ret:
    14 000070AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> scanPathWC:
   443                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   444                              <1> ; even in the final path componant.
   445                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   446                              <1> ;Output: CF=NC => No wildcards present
   447                              <1> ;        CF=CY => Wildcards found
   448 000070AC 50                  <1>     push rax
   449 000070AD 56                  <1>     push rsi
   450                              <1> .scan:
   451 000070AE AC                  <1>     lodsb
   452 000070AF 84C0                <1>     test al, al
   453 000070B1 7409                <1>     jz .exit
   454 000070B3 3C3F                <1>     cmp al, "?"
   455 000070B5 7404                <1>     je .wcFnd
   456 000070B7 3C2A                <1>     cmp al, "*"
   457 000070B9 75F3                <1>     jne .scan
   458                              <1> .wcFnd:
   459 000070BB F9                  <1>     stc
   460                              <1> .exit:
   461 000070BC 5E                  <1>     pop rsi
   462 000070BD 58                  <1>     pop rax
   463                              <1>     return
    13                              <2> %%_ret:
    14 000070BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> checkCharValid:
   466                              <1> ;If ZF=ZE => Invalid Char
   467                              <1> ;If ZF=NZ => Valid Char
   468 000070BF 51                  <1>     push rcx
   469 000070C0 57                  <1>     push rdi
   470 000070C1 3A056992FFFF        <1>     cmp al, byte [fileTermTblExt.startBadRange]
   471 000070C7 721B                <1>     jb .setZeroFlag
   472 000070C9 3A056292FFFF        <1>     cmp al, byte [fileTermTblExt.endBadRange] 
   473 000070CF 7613                <1>     jbe .setZeroFlag
   474 000070D1 0FB60D5B92FFFF      <1>     movzx ecx, byte [fileTermTbl]
   475 000070D8 488D3D5592FFFF      <1>     lea rdi, fileTermTbl + 1
   476 000070DF F2AE                <1>     repne scasb
   477                              <1> .exit:
   478 000070E1 5F                  <1>     pop rdi
   479 000070E2 59                  <1>     pop rcx
   480                              <1>     return
    13                              <2> %%_ret:
    14 000070E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .setZeroFlag:
   482 000070E4 31C9                <1>     xor ecx, ecx    ;Clear CF too
   483 000070E6 EBF9                <1>     jmp short .exit
   484                              <1> 
   485                              <1> ;checkCharValid:
   486                              <1> ;If ZF=ZE => Invalid Char
   487                              <1> ;If ZF=NZ => Valid Char
   488                              <1>     ;push rcx
   489                              <1>     ;push rdi
   490                              <1>     ;mov ecx, badDirNameCharL    ;Get table length
   491                              <1>     ;lea rdi, badDirNameChar ;Point to bad char table
   492                              <1>     ;repne scasb ;Scan. Stop when equal
   493                              <1>     ;pop rdi
   494                              <1>     ;pop rcx
   495                              <1>     ;return
   496                              <1> 
   497                              <1> 
   498                              <1> skipSpacesAndTabs:
   499                              <1> ;Input: rsi -> String 
   500                              <1> ;Output: rsi -> First non Space or Tab type char
   501 000070E8 AC                  <1>     lodsb
   502 000070E9 E815000000          <1>     call isCharSpaceType
   503 000070EE 74F8                <1>     jz skipSpacesAndTabs
   504 000070F0 48FFCE              <1>     dec rsi
   505                              <1>     return
    13                              <2> %%_ret:
    14 000070F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> isCharDelimType:
   508                              <1> ;Input: al = Char to check properties of
   509                              <1> ;Output:    ZF=NZ => Char not name delimiter
   510                              <1> ;           ZF=ZE => Char delimiter
   511 000070F4 50                  <1>     push rax
   512 000070F5 53                  <1>     push rbx
   513 000070F6 488D1D5F93FFFF      <1>     lea rbx, asciiCharProperties
   514 000070FD D7                  <1>     xlatb
   515 000070FE A802                <1>     test al, 2
   516 00007100 5B                  <1>     pop rbx
   517 00007101 58                  <1>     pop rax
   518                              <1>     return
    13                              <2> %%_ret:
    14 00007102 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> isCharSpaceType:
   521                              <1> ;Input: al = Char to check properties of
   522                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   523                              <1> ;           ZF=ZE => Char Space or Tab
   524 00007103 50                  <1>     push rax
   525 00007104 53                  <1>     push rbx
   526 00007105 488D1D5093FFFF      <1>     lea rbx, asciiCharProperties
   527 0000710C D7                  <1>     xlatb
   528 0000710D A804                <1>     test al, 4
   529 0000710F 5B                  <1>     pop rbx
   530 00007110 58                  <1>     pop rax
   531                              <1>     return
    13                              <2> %%_ret:
    14 00007111 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   534                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   535                              <1> ;Input: rsi = One pointer
   536                              <1> ;       rdi = Second pointer
   537                              <1> ;Output: ZF=ZE if equal
   538                              <1> ;        ZF=NZ if not
   539 00007112 4839FE              <1>     cmp rsi, rdi
   540                              <1>     return
    13                              <2> %%_ret:
    14 00007115 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> checkPathNet:
   543                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   544                              <1> ;Output: ZF=ZE => Path is a net path
   545                              <1> ;        ZF=NZ => Path is not a net path
   546 00007116 50                  <1>     push rax
   547 00007117 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   548 0000711A E858FEFFFF          <1>     call swapPathSeparator
   549 0000711F 7505                <1>     jnz .exit
   550 00007121 E851FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   551                              <1> .exit:
   552 00007126 58                  <1>     pop rax
   553                              <1>     return
    13                              <2> %%_ret:
    14 00007127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
   555                              <1> getCharDevDriverPtr:
   556                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   557                              <1> ;Input: rax = Device Driver name (space padded)
   558                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   559 00007128 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   560                              <1> .lp:
   561 0000712F 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   562                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007133 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   563 00007135 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   564 00007138 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   565 0000713F 75EE                <1>     jne .lp ;If not loop
   566 00007141 F9                  <1>     stc ;Else bad exit
   567                              <1>     return
    13                              <2> %%_ret:
    14 00007142 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   570                              <1> ;Pointer to the first non-null device driver in the chain.
   571                              <1> ;Returns the value in rax only
   572 00007143 488D05(7A000000)    <1>     lea rax, nulDevHdr
   573 0000714A 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   574                              <1>     return
    13                              <2> %%_ret:
    14 0000714D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   577                              <1> ;Gets the extended error code in ax and returns
   578 0000714E 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   579                              <1>     return
    13                              <2> %%_ret:
    14 00007155 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 00007156 FA                  <1>     cli ;Halt external interrupts
    19 00007157 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00007158 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 0000715B 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 00007161 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00007164 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 00007166 0F847C020000        <1>     je ctrlBreakCheck
    26 0000716C 80FC64              <1>     cmp ah, 64h
    27 0000716F 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    28 00007175 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    29 00007177 80FC51              <1>     cmp ah, 51h
    30 0000717A 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 00007180 80FC62              <1>     cmp ah, 62h
    32 00007183 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    33 00007189 80FC50              <1>     cmp ah, 50h
    34 0000718C 0F84A0020000        <1>     je setCurrProcessID
    35 00007192 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 00007195 0F84BA020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 0000719B E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 000071A0 48891D(82040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 000071A7 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 000071AF 00                  <1>
    41 000071B0 488B05(7A040000)    <1>     mov rax, qword [oldRSP]
    42 000071B7 488905(6A040000)    <1>     mov qword [oldoldRSP], rax
    43 000071BE FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 000071C4 488925(7A040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 000071CB C605(01070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 000071D2 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 000071D9 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 000071DD 58                  <1>     pop rax     ;Get old rax back
    51 000071DE 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 000071DF 488D25(100D0000)    <1>     lea rsp, critStakTop
    56 000071E6 FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 000071E7 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 000071E9 881D(93040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 000071EF C605(94040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    61 000071F6 881D(69040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    62 000071FC 881D(8A040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 00007202 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 00007203 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 00007205 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 00007207 488D054E93FFFF      <1>     lea rax, kDispTbl
    68 0000720E 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00007211 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00007215 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00007218 58                  <1>     pop rax
    72                              <1> 
    73 00007219 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 0000721B 741C                <1>     jz .fddiskOp
    75 0000721D 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00007220 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 00007222 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 00007225 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00007227 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 0000722E 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00007230 488D25(A0130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00007237 EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00007239 488905(33040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00007240 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00007247 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 0000724E C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 00007255 50                  <1>     push rax
    94 00007256 B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00007258 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    96 0000725A 58                  <1>     pop rax
    97                              <1> 
    98 0000725B C605(94040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    99 00007262 488D25(E0190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 00007269 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 00007270 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 00007272 50                  <1>     push rax
   104 00007273 E885B5FFFF          <1>     call checkBreak   ; Check for a ^C
   105 00007278 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 00007279 48871D(82040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00007280 FF15(82040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00007286 FA                  <1>     cli     ;Redisable interrupts
   138 00007287 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 0000728D 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00007294 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00007297 488B05(6A040000)    <1>     mov rax, qword [oldoldRSP]
   142 0000729E 488905(7A040000)    <1>     mov qword [oldRSP], rax
   143 000072A5 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 000072AA 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 000072AC 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 000072AE 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 000072B0 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 000072B6 58                  <1>     pop rax
   152 000072B7 5B                  <1>     pop rbx
   153 000072B8 59                  <1>     pop rcx
   154 000072B9 5A                  <1>     pop rdx
   155 000072BA 5E                  <1>     pop rsi
   156 000072BB 5F                  <1>     pop rdi
   157 000072BC 5D                  <1>     pop rbp
   158 000072BD 4158                <1>     pop r8
   159 000072BF 4159                <1>     pop r9
   160 000072C1 FF25(72040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 000072C7 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 000072CD 4151                <1>     push r9
   164 000072CF 4150                <1>     push r8
   165 000072D1 55                  <1>     push rbp
   166 000072D2 57                  <1>     push rdi
   167 000072D3 56                  <1>     push rsi
   168 000072D4 52                  <1>     push rdx
   169 000072D5 51                  <1>     push rcx
   170 000072D6 53                  <1>     push rbx
   171 000072D7 50                  <1>     push rax
   172 000072D8 FF25(72040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000072DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 000072DF B801800000          <1>     mov eax, 8001h
   176 000072E4 CD2A                <1>     int 2ah
   177 000072E6 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 000072E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 000072E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 000072E9 B801810000          <1>     mov eax, 8101h
   182 000072EE CD2A                <1>     int 2ah
   183 000072F0 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 000072F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 000072F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 000072F3 B802800000          <1>     mov eax, 8002h
   188 000072F8 CD2A                <1>     int 2ah
   189 000072FA 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 000072FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 000072FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 000072FD B802810000          <1>     mov eax, 8102h
   194 00007302 CD2A                <1>     int 2ah
   195 00007304 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00007305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 00007306 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 00007308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 00007309 E836000000          <1>     call xLatError
   207 0000730E B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00007310 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 00007311 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 00007312 E83FFBFFFF          <1>     call getUserRegs
   216 00007317 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 00007319 EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 0000731B E836FBFFFF          <1>     call getUserRegs
   222 00007320 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 00007323 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 00007327 F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 00007328 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 00007329 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 0000732C E813000000          <1>     call xLatError
   237 00007331 E891000000          <1>     call checkFail
   238                              <1> .noXlat:
   239 00007336 E81BFBFFFF          <1>     call getUserRegs
   240 0000733B 668906              <1>     mov word [rsi + callerFrame.rax], ax
   241 0000733E 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   242 00007342 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   243                              <1>     return
    13                              <2> %%_ret:
    14 00007343 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> xLatError:
   245                              <1> ;Translates the error code given in ax and sets error code in the var
   246                              <1> ; Input: ax = Extended Error Code
   247                              <1> ; Output: ax = Potentially translated Error Code
   248                              <1> ;         [errorExCde] = Original Error Code
   249                              <1> ;Preserves all registers except ax
   250                              <1> ;AH is always returned as 0
   251 00007344 53                  <1>     push rbx
   252 00007345 51                  <1>     push rcx
   253 00007346 56                  <1>     push rsi
   254 00007347 668905(0B040000)    <1>     mov word [errorExCde], ax
   255 0000734E 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   256 00007350 488D35228DFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   257                              <1> .readEntry:
   258 00007357 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   259 00007359 3CFF                <1>     cmp al, -1
   260 0000735B 741F                <1>     je .skipXlat
   261 0000735D 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   262 00007363 7408                <1>     je .found
   263                              <1>     ;Here, entry not found, goto next entry
   264 00007365 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   265 00007368 4801C6              <1>     add rsi, rax    ;Goto next entry
   266 0000736B EBEA                <1>     jmp short .readEntry
   267                              <1> .found:
   268                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   269 0000736D 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   270                              <1> .mainSearch:
   271 00007370 AC                  <1>     lodsb   ;Get one byte into al
   272 00007371 38C3                <1>     cmp bl, al  ;Check against the error code
   273 00007373 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   274 00007375 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   275 00007377 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   276                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   277 00007379 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   278                              <1> .skipXlat:
   279 0000737C 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   280 0000737E 5E                  <1>     pop rsi
   281 0000737F 59                  <1>     pop rcx
   282 00007380 5B                  <1>     pop rbx
   283                              <1>     return
    13                              <2> %%_ret:
    14 00007381 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   285                              <1> ;Looks up the error code in the variable and sets the other error vars
   286                              <1> ;Called with the lookup table in rsi
   287                              <1> ;All regs preserved
   288 00007382 50                  <1>     push rax
   289 00007383 53                  <1>     push rbx
   290 00007384 51                  <1>     push rcx
   291 00007385 56                  <1>     push rsi
   292 00007386 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   293 0000738D B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   294                              <1> .readEntry:
   295 00007392 AD                  <1>     lodsd   ;Read the dword table entry into eax
   296 00007393 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   297 00007398 7428                <1>     je .exit    
   298 0000739A 38D8                <1>     cmp al, bl  ;Compare the error codes
   299 0000739C 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   300 0000739E D3E8                <1>     shr eax, cl
   301 000073A0 3CFF                <1>     cmp al, -1
   302 000073A2 7406                <1>     je .skipClass
   303 000073A4 8805(0E040000)      <1>     mov byte [errorClass], al
   304                              <1> .skipClass:
   305 000073AA D3E8                <1>     shr eax, cl
   306 000073AC 3CFF                <1>     cmp al, -1
   307 000073AE 7406                <1>     je .skipAct
   308 000073B0 8805(0D040000)      <1>     mov byte [errorAction], al
   309                              <1> .skipAct:
   310 000073B6 D3E8                <1>     shr eax, cl
   311 000073B8 3CFF                <1>     cmp al, -1
   312 000073BA 7406                <1>     je .exit
   313 000073BC 8805(0A040000)      <1>     mov byte [errorLocus], al
   314                              <1> .exit:
   315 000073C2 5E                  <1>     pop rsi
   316 000073C3 59                  <1>     pop rcx
   317 000073C4 5B                  <1>     pop rbx
   318 000073C5 58                  <1>     pop rax
   319                              <1>     return
    13                              <2> %%_ret:
    14 000073C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> checkFail:
   321                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   322                              <1> ; and swaps the var error code if so
   323 000073C7 803D(69040000)00    <1>     cmp byte [Int24Fail], 0
   324 000073CE 7509                <1>     jnz .skipFail
   325 000073D0 66C705(0B040000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 24h"
   325 000073D8 00                  <1>
   326                              <1> .skipFail:
   327 000073D9 56                  <1>     push rsi
   328 000073DA 488D35348DFFFF      <1>     lea rsi, extErrTbl
   329 000073E1 E89CFFFFFF          <1>     call setErrorVars
   330 000073E6 5E                  <1>     pop rsi
   331                              <1>     return
    13                              <2> %%_ret:
    14 000073E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> ;========================================:
   333                              <1> ;      Reentrant Kernel Functions        :
   334                              <1> ;========================================:
   335                              <1> ctrlBreakCheck:    ;ah = 33h
   336 000073E8 3C06                <1>     cmp al, 6
   337 000073EA 743C                <1>     je .trueVer
   338 000073EC 3C05                <1>     cmp al, 5
   339 000073EE 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   340 000073F0 84C0                <1>     test al, al
   341 000073F2 7508                <1>     jnz .cbcget     ;Get the state or other functions
   342 000073F4 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   343 000073FA 48CF                <1>     iretq
   344                              <1> .cbcget:
   345 000073FC 3C02                <1>     cmp al, 02h
   346 000073FE 771A                <1>     ja .cbcBad
   347 00007400 740D                <1>     jz .cbcxchg ;Function 2
   348 00007402 52                  <1>     push rdx
   349 00007403 80E201              <1>     and dl, 1   ;Get only the bottom bit
   350 00007406 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   351 0000740C 5A                  <1>     pop rdx
   352 0000740D 48CF                <1>     iretq
   353                              <1> .cbcxchg:
   354 0000740F 80E201              <1>     and dl, 1
   355 00007412 8615(32040000)      <1>     xchg byte [breakFlag], dl
   356 00007418 48CF                <1>     iretq
   357                              <1> .cbcBad:
   358 0000741A B0FF                <1>     mov al, -1
   359 0000741C 48CF                <1>     iretq
   360                              <1> .getBtDrv:
   361                              <1> ;Undocumented.
   362                              <1> ;Might be unreliable so dont document yet.
   363                              <1> ;Return 1 based boot drive in dl
   364 0000741E 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   365 00007424 FEC2                <1>     inc dl  ;Return a 1 based drive number
   366 00007426 48CF                <1>     iretq
   367                              <1> .trueVer:
   368                              <1> ;Undocumented.
   369                              <1> ;bx returns true DOS number.
   370                              <1> ;dl has "revision" number in bits 0-2. 
   371                              <1> ;dh has various flags. All reserved for future use.
   372 00007428 66BB0060            <1>     mov bx, dosVerMac
   373 0000742C 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   374 00007430 48CF                <1>     iretq
   375                              <1> 
   376                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   377 00007432 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   378 00007439 48CF                <1>     iretq
   379                              <1> 
   380                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   381 0000743B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   382 00007442 48CF                <1>     iretq
   383                              <1> 
   384                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   385 00007444 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   386 0000744B 48CF                <1>     iretq
   387                              <1> 
   388                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   389 0000744D 8805(E8190000)      <1>     mov byte [lookahead], al    
   390 00007453 48CF                <1>     iretq
   391                              <1> 
   392                              <1> systemServices: ;ah = 61h
   393                              <1> ;All pointers returned in rdx
   394                              <1> ;al = 0 -> Get Environment pointer in rdx
   395                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   396                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   397                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   398                              <1> ;                        Else, rdx -> Filename
   399 00007455 3C01                <1>     cmp al, 1
   400 00007457 7453                <1>     je short .getCmdLineArgs
   401 00007459 3C02                <1>     cmp al, 2
   402 0000745B 760C                <1>     jbe .getEnvPtr
   403 0000745D B801000000          <1>     mov eax, errInvFnc
   404                              <1> .exitBad:
   405 00007462 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   406 00007467 48CF                <1>     iretq
   407                              <1> .getEnvPtr:
   408                              <1>     ;Gets the environment pointer in rdx
   409 00007469 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   410 00007470 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   411 00007474 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   412                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   413                              <1> ; pass the ptr to the word after.
   414 00007476 FA                  <1>     cli
   415 00007477 51                  <1>     push rcx
   416 00007478 31C9                <1>     xor ecx, ecx
   417 0000747A B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   418                              <1> .gep0:
   419 0000747F 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   420 00007484 740D                <1>     je short .gep1
   421 00007486 48FFC2              <1>     inc rdx         ;Go to the next byte
   422 00007489 FFC9                <1>     dec ecx
   423 0000748B 75F2                <1>     jnz short .gep0
   424                              <1> .gep00:
   425                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   426 0000748D 59                  <1>     pop rcx
   427 0000748E FB                  <1>     sti
   428 0000748F 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   429 00007491 EBCF                <1>     jmp short .exitBad
   430                              <1> .gep1:
   431 00007493 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   432 0000749A 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   433 0000749F 75EC                <1>     jne .gep00
   434 000074A1 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   435 000074A8 59                  <1>     pop rcx
   436 000074A9 FB                  <1>     sti
   437 000074AA EB0B                <1>     jmp short .exitOk
   438                              <1> .getCmdLineArgs:
   439 000074AC 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   440 000074B3 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   441                              <1> .exitOk:
   442 000074B7 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   443 000074BC 48CF                <1>     iretq
   444                              <1> 
   445                              <1> 
   446                              <1> ;========================================:
   447                              <1> ;            Kernel Functions            :
   448                              <1> ;========================================:
   449                              <1> diskReset:         ;ah = 0Dh
   450                              <1> ;Flush all dirty buffers to disk
   451 000074BE E81BFEFFFF          <1>     call dosCrit1Enter
   452 000074C3 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   453                              <1> .drCheckBuffer:
   454 000074CA F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   455 000074CE 7407                <1>     jz .drGotoNextBuffer
   456                              <1> .drFlushBuffer:
   457 000074D0 E80392FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   458 000074D5 720C                <1>     jc .drExit
   459                              <1> .drGotoNextBuffer:
   460 000074D7 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   461 000074DA 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   462 000074E1 75E7                <1>     jne .drCheckBuffer
   463                              <1> .drExit:
   464 000074E3 E800FEFFFF          <1>     call dosCrit1Exit
   465 000074E8 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   466 000074ED CD2F                <1>     int 2fh
   467                              <1>     return
    13                              <2> %%_ret:
    14 000074EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> selectDisk:        ;ah = 0Eh
   470                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   471 000074F0 88D0                <1>     mov al, dl
   472 000074F2 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   473 000074F4 E881F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   474 000074F9 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   475 000074FB 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   476                              <1> .skipSettingCurrent:
   477 00007501 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   478                              <1>     return
    13                              <2> %%_ret:
    14 00007508 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> 
   480                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   481 00007509 8A05(31040000)      <1>     mov al, byte [currentDrv]
   482                              <1>     return
    13                              <2> %%_ret:
    14 0000750F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> FATinfoDefault:    ;ah = 1Bh
   485 00007510 30D2                <1>     xor dl, dl
   486                              <1> FATinfoDevice:     ;ah = 1Ch
   487                              <1> ;Input: dl = 1 based drive number
   488                              <1> ;Output:
   489                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   490                              <1> ;cx = bytes per sector
   491                              <1> ;edx = total number of clusters
   492                              <1> ;rbx = Ptr to media ID byte
   493 00007512 88D0                <1>     mov al, dl  ;Move drive number into al
   494 00007514 E8D1F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   495 00007519 7307                <1>     jnc .fidCDSFound
   496 0000751B B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   497 00007520 EB2E                <1>     jmp short .error 
   498                              <1> .fidCDSFound:
   499 00007522 E8BDF8FFFF          <1>     call getDiskData
   500 00007527 7227                <1>     jc .error
   501                              <1> ;Now we have that:
   502                              <1> ;al = sectors per cluster
   503                              <1> ;ah = media ID byte
   504                              <1> ;ebx = total clusters
   505                              <1> ;cx = bytes per sector
   506                              <1> ;edx = number of available clusters
   507 00007529 E828F9FFFF          <1>     call getUserRegs
   508 0000752E 8825(95070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   509 00007534 30E4                <1>     xor ah, ah
   510 00007536 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   511 00007539 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   512 0000753D 488D1D(95070000)    <1>     lea rbx, mediaByte
   513 00007544 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   514 00007548 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   515                              <1> .badExit:
   516 0000754C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   517                              <1>     return
    13                              <2> %%_ret:
    14 0000754F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> .error:
   519 00007550 E8D4FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   520 00007555 66B8FFFF            <1>     mov ax, -1
   521 00007559 EBF1                <1>     jmp short .badExit
   522                              <1> 
   523                              <1> setIntVector:      ;ah = 25h
   524                              <1> ;Called with:
   525                              <1> ;   rdx = Pointer to interrupt handler
   526                              <1> ;   al = Interrupt number
   527 0000755B FA                  <1>     cli ;Halt interrupts
   528 0000755C 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   529 00007563 0FB6C0              <1>     movzx eax, al
   530 00007566 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   531 0000756A 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   532 00007571 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   533 00007574 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   534 00007578 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   535 0000757C 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   536 00007580 895008              <1>     mov dword [rax + 8], edx
   537 00007583 FB                  <1>     sti
   538                              <1>     return
    13                              <2> %%_ret:
    14 00007584 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   539                              <1> 
   540                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   541 00007585 8805(D0030000)      <1>     mov byte [verifyFlag], al
   542 0000758B 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   543                              <1>     return
    13                              <2> %%_ret:
    14 00007592 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> getDOSversion:     ;ah = 30h
   545 00007593 E8BEF8FFFF          <1>     call getUserRegs
   546 00007598 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   547 0000759A 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   548 0000759D 668B055C8AFFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   549 000075A4 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   550                              <1>     return
    13                              <2> %%_ret:
    14 000075A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   553                              <1> ;Input: dx = Version number. Value of 0 means true value.
   554 000075A8 6685D2              <1>     test dx, dx
   555 000075AB 750A                <1>     jnz .newVal
   556 000075AD 66C7054A8AFFFF0060  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   557                              <1>     return
    13                              <2> %%_ret:
    14 000075B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> .newVal:
   559 000075B7 668915428AFFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   560                              <1>     return
    13                              <2> %%_ret:
    14 000075BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   563                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   564 000075BF 30D2                <1>     xor dl, dl
   565                              <1> getDeviceDPBptr:   ;ah = 32h
   566                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   567                              <1> ;On exit: rbx = DPB pointer
   568 000075C1 88D0                <1>     mov al, dl
   569 000075C3 E822F9FFFF          <1>     call getCDS
   570 000075C8 722C                <1>     jc .bad
   571 000075CA 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   572 000075D1 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   573 000075D7 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   574                              <1>     ;Here ONLY if accessing critical Disk data structures
   575 000075D9 E800FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   576 000075DE E84FF5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   577 000075E3 E800FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   578 000075E8 720C                <1>     jc .bad
   579 000075EA E867F8FFFF          <1>     call getUserRegs
   580 000075EF 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   581 000075F3 30C0                <1>     xor al, al
   582                              <1>     return
    13                              <2> %%_ret:
    14 000075F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .bad:
   584 000075F6 B0FF                <1>     mov al, -1
   585                              <1>     return
    13                              <2> %%_ret:
    14 000075F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> getInDOSflagPtr:   ;ah = 34h
   588 000075F9 488D15(08040000)    <1>     lea rdx, inDOS
   589 00007600 E851F8FFFF          <1>     call getUserRegs
   590 00007605 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   591                              <1>     return
    13                              <2> %%_ret:
    14 00007609 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> getIntVector:      ;ah = 35h
   594                              <1> ;Called with:
   595                              <1> ;   al = Interrupt Number
   596                              <1> ;Returns:
   597                              <1> ;   rbx = Pointer to interrupt handler
   598 0000760A E819F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   599 0000760F E842F8FFFF          <1>     call getUserRegs
   600 00007614 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   601                              <1>     return
    13                              <2> %%_ret:
    14 00007618 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> 
   603                              <1> getDiskFreeSpace:  ;ah = 36h
   604                              <1> ;Input: Drive number in dl (0 = Current)
   605                              <1> ;Output:    ax = sectors per cluster
   606                              <1> ;           ebx = number of free clusters
   607                              <1> ;           cx = bytes per sector
   608                              <1> ;           edx = total clusters on drive
   609 00007619 88D0                <1>     mov al, dl
   610 0000761B E8CAF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   611 00007620 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   612                              <1> ;Else, we at an error.
   613                              <1> ;Simply return with CY set and error code in al with extended error info
   614 00007622 B80F000000          <1>     mov eax, errBadDrv
   615 00007627 E8FDFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   616                              <1>     ;extErrExit sets rsi to caller regs
   617 0000762C 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   618                              <1>     return
    13                              <2> %%_ret:
    14 00007631 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   619                              <1> .gdfsCDSFound:
   620 00007632 E8ADF7FFFF          <1>     call getDiskData
   621 00007637 7219                <1>     jc .error
   622                              <1> ;Now we have that:
   623                              <1> ;al = sectors per cluster
   624                              <1> ;ah = media ID byte
   625                              <1> ;ebx = total clusters
   626                              <1> ;cx = bytes per sector
   627                              <1> ;edx = number of available clusters
   628 00007639 E818F8FFFF          <1>     call getUserRegs
   629 0000763E 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   630 00007640 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   631 00007643 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   632 00007647 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   633 0000764A 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   634                              <1> .badExit:
   635 0000764E 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   636                              <1>     return
    13                              <2> %%_ret:
    14 00007651 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   637                              <1> .error:
   638 00007652 E8D2FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   639 00007657 66B8FFFF            <1>     mov ax, -1
   640 0000765B EBF1                <1>     jmp short .badExit
   641                              <1> 
   642                              <1> 
   643                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   644 0000765D 31C0                <1>     xor eax, eax
   645 0000765F 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   646 00007666 E9B0FCFFFF          <1>     jmp extGoodExit
   647                              <1> 
   648                              <1> getSysVarsPtr:     ;ah = 52h
   649 0000766B 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   650 00007672 E8DFF7FFFF          <1>     call getUserRegs
   651 00007677 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   652                              <1>     return
    13                              <2> %%_ret:
    14 0000767B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> 
   655                              <1> ;AH = 53h - CREATE DPB
   656                              <1> createDPB:         ;generates a DPB from a given BPB
   657                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   658                              <1> ;This is done so that the other fields of the DPB can be recycled
   659                              <1> ;Input: rsi = ptr to the BPB
   660                              <1> ;       rbp = ptr to the DPB
   661                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   662                              <1> ;bMediaDescriptor
   663 0000767C 8A4615              <1>     mov al, byte [rsi + bpb.media]
   664 0000767F 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   665                              <1> ;dFirstFreeCluster
   666 00007682 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   667                              <1> ;dNumberOfFreeClusters
   668 00007689 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   669                              <1> ;wBytesPerSector
   670 00007690 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   671 00007694 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   672                              <1> ;bMaxSectorInCluster
   673 00007698 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   674 0000769B FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   675 0000769D 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   676                              <1> ;bSectorsPerClusterShift
   677 000076A0 FEC0                <1>     inc al
   678 000076A2 30C9                <1>     xor cl, cl
   679                              <1> .cd2:
   680 000076A4 D0E8                <1>     shr al, 1
   681 000076A6 7404                <1>     jz .cd3
   682 000076A8 FEC1                <1>     inc cl
   683 000076AA EBF8                <1>     jmp short .cd2
   684                              <1> .cd3:
   685 000076AC 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   686                              <1> ;wFAToffset, number of reserved sectors in partition
   687 000076AF 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   688 000076B3 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   689                              <1> ;bNumberOfFATs
   690 000076B7 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   691 000076BA 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   692                              <1> ;wNumberRootDirEntries
   693                              <1> ;Gets the number of 32 byte entries in the root directory
   694                              <1> ;Only valid for FAT 12/16
   695 000076BD 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   696 000076C1 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   697                              <1> ;dFATlength, get the FAT length
   698 000076C5 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   699 000076C9 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   700 000076CC 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   701 000076CE 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   702 000076D1 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   703                              <1> ;Complex cases below...
   704                              <1> ;dClusterHeapOffset, start sector of the data area
   705 000076D4 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   706 000076D8 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   707 000076DB 85C0                <1>     test eax, eax
   708 000076DD 0F44C3              <1>     cmovz eax, ebx
   709                              <1> ;eax = FATsz
   710 000076E0 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   711 000076E4 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   712 000076E7 85DB                <1>     test ebx, ebx
   713 000076E9 0F44D9              <1>     cmovz ebx, ecx 
   714                              <1> ;ebx = TotSec
   715 000076EC 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   716 000076EF 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   717                              <1> .cd4:
   718 000076F1 01C2                <1>     add edx, eax
   719 000076F3 FEC9                <1>     dec cl
   720 000076F5 75FA                <1>     jnz .cd4
   721 000076F7 89D0                <1>     mov eax, edx    ;Store product in eax
   722 000076F9 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   723 000076FD 01D0                <1>     add eax, edx
   724                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   725 000076FF 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   726 00007703 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   727 00007706 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   728 0000770A 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   729 0000770B 89D0                <1>     mov eax, edx
   730 0000770D 31D2                <1>     xor edx, edx
   731 0000770F F7F1                <1>     div ecx
   732 00007711 89C2                <1>     mov edx, eax
   733 00007713 58                  <1>     pop rax
   734 00007714 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   735                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   736                              <1>     ;aka eax = Start sector of the data area in volume
   737 00007716 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   738                              <1> ;dClusterCount
   739 00007719 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   740 0000771B 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   741 0000771D 31D2                <1>     xor edx, edx
   742 0000771F BB01000000          <1>     mov ebx, 1
   743 00007724 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   744 00007727 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   745 00007729 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   746 0000772B FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   747 0000772D 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   748                              <1> ;dFirstUnitOfRootDir
   749 00007730 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   750 00007735 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   751 00007738 770F                <1>     ja .cd5
   752                              <1>     ;Else, we need to find the first sector of the root directory
   753                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   754 0000773A 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   755 0000773E 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   756                              <1> .cd51:
   757 00007742 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   758 00007745 FFC9                <1>     dec ecx
   759 00007747 75F9                <1>     jnz .cd51
   760                              <1> .cd5:
   761 00007749 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   762 0000774C C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   763                              <1> ;Exit epilogue
   764 00007750 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   765 00007757 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   766                              <1>     %if DEBUG && DPBINFO
   767                              <1>     ;Print DPB 
   768                              <1>     debugEnterM
   769                              <1>     push rbp
   770                              <1>     lea rbp, .l0000
   771                              <1>     call debPrintNullString
   772                              <1>     pop rbp
   773                              <1>     call debDPBBPBptr
   774                              <1>     call debMakeDebuggerRespond
   775                              <1>     jmp short .l0001
   776                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   777                              <1> .l0001:
   778                              <1>     debugExitM
   779                              <1>     %endif
   780                              <1>     return
    13                              <2> %%_ret:
    14 00007759 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   781                              <1> 
   782                              <1> getVerifySetting:  ;ah = 54h
   783 0000775A 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   784                              <1>     return
    13                              <2> %%_ret:
    14 00007760 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   785                              <1> 
   786                              <1> getExtendedError:  ;ah = 59h
   787 00007761 E8F0F6FFFF          <1>     call getUserRegs
   788 00007766 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   789 0000776D 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   790 00007773 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   791 00007779 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   792 0000777F 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   793 00007786 668906              <1>     mov word [rsi + callerFrame.rax], ax
   794 00007789 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   795 0000778D 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   796 00007790 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   797                              <1> noOp:
   798                              <1>     return
    13                              <2> %%_ret:
    14 00007794 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> ;At some point we will implement the below function but that is
   800                              <1> ; a low priority as it is not a DOS 3.3 function. 
   801                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    45                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007795 3C07                <1>     cmp al, 07h
     8 00007797 7204                <1>     jb .skip
     9 00007799 3C09                <1>     cmp al, 09h
    10 0000779B 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 0000779D 4889D6              <1>     mov rsi, rdx
    13 000077A0 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 000077A4 66891D(43040000)    <1>     mov word [machineNum], bx
    15 000077AB 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 000077AF 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 000077B6 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000077BD 53                  <1>     push rbx
    20 000077BE 488B1D(931A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 000077C5 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 000077C6 50                  <1>     push rax    ;Push al onto stack as a qword
    23 000077C7 E856010000          <1>     call serverFunctionSelect
    24 000077CC B801000000          <1>     mov eax, eLocUnk
    25 000077D1 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 000077D7 E94DFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 000077DC 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 000077DD 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 000077DE 5F                  <1>     pop rdi
    33 000077DF E872F6FFFF          <1>     call getUserRegs
    34 000077E4 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 000077E7 56                  <1>     push rsi
    36 000077E8 B906000000          <1>     mov ecx, 6
    37 000077ED F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 000077F0 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 000077F7 48A5                <1>     movsq   ;Transfer r8...
    40 000077F9 48A5                <1>     movsq   ;... and r9
    41 000077FB 5E                  <1>     pop rsi
    42 000077FC 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 000077FF 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007803 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007807 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 0000780B 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 0000780F 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007813 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007817 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 0000781B 48891D(82040000)    <1>     mov qword [oldRBX], rbx
    51 00007822 C605(01070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007829 E9B1F9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 0000782E 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007835 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 0000783A 740A                <1>     je .validTask
    62 0000783C B805000000          <1>     mov eax, errAccDen
    63 00007841 E9E3FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007846 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007848 E891FAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 0000784D 53                  <1>     push rbx
    70 0000784E E8A0D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007853 7227                <1>     jc .exit
    72 00007855 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 0000785A 741B                <1>     je .gotoNextFile
    74 0000785C 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007861 7414                <1>     je .gotoNextFile
    76 00007863 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007869 750C                <1>     jnz .gotoNextFile
    78 0000786B 48893D(31070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007872 E8F0C1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007877 5B                  <1>     pop rbx
    83 00007878 FFC3                <1>     inc ebx
    84 0000787A EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 0000787C E867FAFFFF          <1>     call dosCrit1Exit
    87 00007881 5B                  <1>     pop rbx ;Align stack
    88 00007882 E994FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007887 FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 0000788D 0F8296FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007893 E983FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007898 FF15(D7000000)      <1>     call qword [closeCompShare]
   100 0000789E EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 000078A0 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 000078A6 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 000078A8 FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 000078AE 72DD                <1>     jc closeFilesByName.shareExitBad
   109 000078B0 E8A1F5FFFF          <1>     call getUserRegs
   110 000078B5 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 000078B9 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 000078BD 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 000078C1 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 000078C3 488D3D(07040000)    <1>     lea rdi, sda
   124 000078CA 48B98C160000000000- <1>     mov rcx, sdaLen
   124 000078D3 00                  <1>
   125 000078D4 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 000078DD 00                  <1>
   126 000078DE E873F5FFFF          <1>     call getUserRegs
   127 000078E3 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 000078E7 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 000078EB EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 000078ED 50                  <1>     push rax
   133 000078EE B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 000078F3 CD2F                <1>     int 2Fh
   135 000078F5 5B                  <1>     pop rbx
   136 000078F6 7295                <1>     jc short closeFilesByName.shareExitBad
   137 000078F8 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 000078FA 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 000078FC 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007903 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007907 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 0000790E 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007911 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007918 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 0000791B 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007921 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007922 55                  <1>     push rbp
   156 00007923 4889E5              <1>     mov rbp, rsp
   157 00007926 53                  <1>     push rbx
   158 00007927 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 0000792B 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 0000792E 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007931 7621                <1>     jbe short .argumentTooBig
   162 00007933 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007937 D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007939 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 0000793B 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 0000793F 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007942 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007946 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 0000794A 5B                  <1>     pop rbx
   170 0000794B 5D                  <1>     pop rbp
   171 0000794C 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007953 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007954 5B                  <1>     pop rbx
   175 00007955 5D                  <1>     pop rbp
   176 00007956 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007959 3C01                <1>     cmp al, 01
   181 0000795B 7214                <1>     jb .getName
   182 0000795D 7437                <1>     jz .setName
   183 0000795F 3C06                <1>     cmp al, 6
   184 00007961 724C                <1>     jb .netRedir
   185 00007963 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 0000796A B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 0000796C E9B8F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007971 4889D7              <1>     mov rdi, rdx
   198 00007974 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 0000797B E8D6F4FFFF          <1>     call getUserRegs
   200 00007980 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007984 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 0000798B 31C0                <1>     xor eax, eax
   204 0000798D 48A5                <1>     movsq
   205 0000798F A5                  <1>     movsd
   206 00007990 66A5                <1>     movsw
   207 00007992 A4                  <1>     movsb
   208 00007993 AA                  <1>     stosb   ;Store terminating null
   209 00007994 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007996 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 0000799D 4889D6              <1>     mov rsi, rdx
   217 000079A0 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 000079A6 488D3D(D6030000)    <1>     lea rdi, machineName
   219 000079AD EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 000079AF 50                  <1>     push rax
   223 000079B0 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 000079B5 CD2F                <1>     int 2Fh
   225 000079B7 5A                  <1>     pop rdx
   226 000079B8 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000079BA E95CF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000079BF 80FC07              <1>     cmp ah, 07h
   233 000079C2 7419                <1>     je .driveAction
   234 000079C4 80FC08              <1>     cmp ah, 08h
   235 000079C7 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 000079C9 50                  <1>     push rax
   238 000079CA B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 000079CF CD2F                <1>     int 2Fh
   240 000079D1 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 000079D2 0F8251F9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 000079D8 E93EF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 000079DD 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 000079DF E861F5FFFF          <1>     call getCDSforDrive
   249 000079E4 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 000079E6 80EA07              <1>     sub dl, 7
   252 000079E9 7408                <1>     jz .enable
   253 000079EB 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 000079F1 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 000079F3 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 000079F9 EBDD                <1>     jmp short .goodExit
    46                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 000079FB 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 000079FE 7411                <1>     je .installCheck
    23 00007A00 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007A03 740C                <1>     je .installCheck
    25 00007A05 80FC12              <1>     cmp ah, 12h
    26 00007A08 741E                <1>     je .goMplx
    27 00007A0A 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007A0D 7402                <1>     je .installCheck
    29 00007A0F 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007A11 84C0                <1>     test al, al
    38 00007A13 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007A15 B801000000          <1>     mov eax, errInvFnc
    41 00007A1A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007A21 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007A26 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007A28 3C30                <1>     cmp al, mDispTblL / 2
    48 00007A2A 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 00007A2C 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007A2D 53                  <1>     push rbx    ;Storage for DOS function
    52 00007A2E 53                  <1>     push rbx    ;Stores rbx value
    53 00007A2F 488D1D30000000      <1>     lea rbx, .retAddr
    54 00007A36 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 00007A3B 51                  <1>     push rcx
    57 00007A3C 488D1DEB8BFFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 00007A43 53                  <1>     push rbx
    59 00007A44 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 00007A47 488B442450          <1>     mov rax, qword [rsp + 10*8]  ;Pick the word pushed on the stack before call 
    61 00007A4C D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007A4E 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007A51 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00007A55 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00007A56 4801CB              <1>     add rbx, rcx
    66 00007A59 59                  <1>     pop rcx
    67 00007A5A 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007A5F 5B                  <1>     pop rbx
    69 00007A60 488B442438          <1>     mov rax, qword [rsp + 7*8]  ;Get qword that may be passed on stack
    70                              <1>     return
    13                              <2> %%_ret:
    14 00007A65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    71                              <1> 
    72                              <1> .retAddr:
    73 00007A66 53                  <1>     push rbx
    74 00007A67 9C                  <1>     pushfq
    75 00007A68 5B                  <1>     pop rbx
    76 00007A69 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    77 00007A6E 5B                  <1>     pop rbx
    78 00007A6F 48CF                <1>     iretq
    79                              <1> 
    80                              <1> multiplexTest:
    81 00007A71 B0FF                <1>     mov al, -1
    82 00007A73 C3                  <1>     ret
    83                              <1> 
    84                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    85                              <1> ;Return: r8 = Dos Data Segment Pointer
    86 00007A74 4C8D05(00000000)    <1>     lea r8, dosDataArea
    87                              <1>     return
    13                              <2> %%_ret:
    14 00007A7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    90                              <1> ;Input: cl = open mode
    91                              <1> ;       rdx -> Ptr to filename to open
    92                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    93 00007A7C 88C8                <1>     mov al, cl
    94 00007A7E E8D6B7FFFF          <1>     call openFileHdl
    95                              <1>     return
    13                              <2> %%_ret:
    14 00007A83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    98                              <1> ;Input:  
    99                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   100                              <1> ;   ebx = Handle to move (lower word only)
   101                              <1> ;   ecx = Number of bytes to move
   102                              <1> ;   edx = 0 (upper dword, reserved for now)
   103                              <1> ;Return:
   104                              <1> ;   eax = New pointer location
   105                              <1> ;   edx = 0
   106 00007A84 FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   107 00007A8A 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   108 00007A91 488905(7A040000)    <1>     mov qword [oldRSP], rax
   109 00007A98 89E8                <1>     mov eax, ebp
   110 00007A9A E8CCB9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   111 00007A9F 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   112                              <1>     return
    13                              <2> %%_ret:
    14 00007AA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   115                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   116                              <1> ; low byte of bp.
   117 00007AA6 FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   118 00007AAC 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   119 00007AB3 488905(7A040000)    <1>     mov qword [oldRSP], rax
   120 00007ABA 89E8                <1>     mov eax, ebp
   121 00007ABC E8EFD2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   122 00007AC1 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   123                              <1>     return  
    13                              <2> %%_ret:
    14 00007AC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> mpxChecksum:
   126                              <1> ;Computes the checksum of a number of bytes in memory
   127                              <1> ;Input: edx = Start value for checksum
   128                              <1> ;       ecx = number of bytes to sum
   129                              <1> ;       rsi -> Ptr to byte array to perform sum on
   130 00007AC8 31C0                <1>     xor eax, eax
   131 00007ACA 67E307              <1>     jecxz .exit
   132                              <1> .lp:
   133 00007ACD AC                  <1>     lodsb
   134 00007ACE 01C2                <1>     add edx, eax
   135 00007AD0 FFC9                <1>     dec ecx
   136 00007AD2 75F9                <1>     jnz .lp
   137                              <1> .exit:
   138                              <1>     return
    13                              <2> %%_ret:
    14 00007AD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   139                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   140                              <1> ;Sums the values in a number of bytes in memory
   141                              <1> ;Input: rsi -> Byte array to sum values of
   142                              <1> ;       edx = Value limit (for the sum)
   143                              <1> ;       ecx = 0
   144 00007AD5 31C0                <1>     xor eax, eax
   145                              <1> .lp:
   146 00007AD7 AC                  <1>     lodsb
   147 00007AD8 39C2                <1>     cmp edx, eax
   148                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007ADA 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   149 00007ADC 29C2                <1>     sub edx, eax
   150 00007ADE FFC1                <1>     inc ecx
   151 00007AE0 EBF5                <1>     jmp short .lp
    47                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007AE2 B801000000          <1>     mov eax, errInvFnc
     6 00007AE7 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007AEE F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007AF0 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007AF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007AF6 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007AF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007AF8 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007AFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007AFF FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007B05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007B06 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007B0D 53                  <1>     push rbx
    34 00007B0E FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007B14 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B15 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007B17 E806000000          <1>     call shareRetryCountdown
    38 00007B1C FFCB                <1>     dec ebx
    39 00007B1E 75ED                <1>     jnz .mainLoop
    40 00007B20 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007B21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007B22 F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B29 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007B2B 51                  <1>     push rcx
    49 00007B2C 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007B33 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007B36 51                  <1>     push rcx
    53 00007B37 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007B39 66FFC9              <1>     dec cx
    56 00007B3C 75FB                <1>     jnz .mainLoop
    57 00007B3E 59                  <1>     pop rcx
    58 00007B3F FFC9                <1>     dec ecx
    59 00007B41 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007B43 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007B44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007B45 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007B4B 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007B4D 50                  <1>     push rax
    69 00007B4E 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007B52 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007B57 58                  <1>     pop rax
    72 00007B58 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007B5A E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B5F 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 00007B61 B820000000          <1>     mov eax, errShrVio
    78 00007B66 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007B67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 00007B68 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 00007B69 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 00007B70 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
    92 00007B77 31C0                <1>     xor eax, eax
    93 00007B79 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 00007B7F 51                  <1>     push rcx
    95 00007B80 E873FFFFFF          <1>     call openShareCallWrapper
    96 00007B85 59                  <1>     pop rcx
    97 00007B86 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 00007B88 E895FFFFFF          <1>     call shareRetryCountdown
    99 00007B8D FFC9                <1>     dec ecx
   100 00007B8F 75DF                <1>     jnz .keepLooping
   101 00007B91 E841000000          <1>     call shareCriticalError
   102 00007B96 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 00007B98 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 00007B99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareCheckWriteLockViolation:
   108 00007B9A C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   109 00007BA1 EB07                <1>     jmp short shareCheckReadLockViolation.common
   110                              <1> shareCheckReadLockViolation:
   111 00007BA3 C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   112                              <1> .common:
   113                              <1> ;Input:
   114                              <1> ;rdi -> SFT for the file we are reading
   115 00007BAA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   116 00007BB0 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   117 00007BB2 50                  <1>     push rax
   118 00007BB3 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   119 00007BB7 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   120 00007BBC 58                  <1>     pop rax
   121 00007BBD 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   122                              <1> .fcbQuirk:
   123 00007BBF E80B000000          <1>     call shareLockViolationCriticalError
   124                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007BC4 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   125                              <1> .notInCompatMode:
   126 00007BC6 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   127 00007BC8 B821000000          <1>     mov eax, errLokVio
   128 00007BCD F9                  <1>     stc ;Set the flag for error
   129                              <1>     return
    13                              <2> %%_ret:
    14 00007BCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> 
   131                              <1> shareLockViolationCriticalError:
   132                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   133 00007BCF 57                  <1>     push rdi
   134 00007BD0 B821000000          <1>     mov eax, errLokVio
   135 00007BD5 EB08                <1>     jmp short shareCriticalError.common
   136                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   137                              <1> ;Used for share Read requests
   138                              <1> ;Input: eax = Error code
   139 00007BD7 57                  <1>     push rdi
   140 00007BD8 C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   141                              <1> .common:
   142 00007BDF C605(67040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   143 00007BE6 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] 
   144 00007BED 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   145 00007BEF E8B4E7FFFF          <1>     call diskDevErr
   146 00007BF4 5F                  <1>     pop rdi
   147 00007BF5 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   148                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007BF7 74D5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   149 00007BF9 F9                  <1>     stc
   150                              <1>     return
    13                              <2> %%_ret:
    14 00007BFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  ;These driver files are to be written by an OEM.
    49                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00007BFB [1D7C000000000000]  <1>     dq auxHdr
     7 00007C03 1380                <1>     dw 08013h
     8 00007C05 [9B7D000000000000]  <1>     dq commonStrat
     9 00007C0D [A37D000000000000]  <1>     dq conDriver
    10 00007C15 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007C1D [3F7C000000000000]  <1>     dq prnHdr
    13 00007C25 0080                <1>     dw 08000h
    14 00007C27 [9B7D000000000000]  <1>     dq commonStrat
    15 00007C2F [9880000000000000]  <1>     dq com1Intr
    16 00007C37 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007C3F [617C000000000000]  <1>     dq clkHdr
    19 00007C47 40A0                <1>     dw 0A040h
    20 00007C49 [D269000000000000]  <1>     dq nulStrat
    21 00007C51 [D869000000000000]  <1>     dq nulIntr
    22 00007C59 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007C61 [837C000000000000]  <1>     dq msdHdr
    25 00007C69 0880                <1>     dw 08008h
    26 00007C6B [9B7D000000000000]  <1>     dq commonStrat
    27 00007C73 [0E7F000000000000]  <1>     dq clkDriver
    28 00007C7B 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007C83 [A57C000000000000]  <1>     dq com1Hdr
    31 00007C8B 4008                <1>     dw 00840h   
    32 00007C8D [9B7D000000000000]  <1>     dq commonStrat
    33 00007C95 [2082000000000000]  <1>     dq msdDriver
    34 00007C9D 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007CA5 [C77C000000000000]  <1>     dq com2Hdr
    37 00007CAD 0080                <1>     dw 08000h
    38 00007CAF [9B7D000000000000]  <1>     dq commonStrat
    39 00007CB7 [9880000000000000]  <1>     dq com1Intr
    40 00007CBF 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007CC7 [E97C000000000000]  <1>     dq com3Hdr
    43 00007CCF 0080                <1>     dw 08000h
    44 00007CD1 [9B7D000000000000]  <1>     dq commonStrat
    45 00007CD9 [A180000000000000]  <1>     dq com2Intr
    46 00007CE1 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 00007CE9 [0B7D000000000000]  <1>     dq com4Hdr
    49 00007CF1 0080                <1>     dw 08000h
    50 00007CF3 [9B7D000000000000]  <1>     dq commonStrat
    51 00007CFB [AA80000000000000]  <1>     dq com3Intr
    52 00007D03 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007D0B [2D7D000000000000]  <1>     dq lpt1Hdr
    55 00007D13 0080                <1>     dw 08000h
    56 00007D15 [9B7D000000000000]  <1>     dq commonStrat
    57 00007D1D [B380000000000000]  <1>     dq com4Intr
    58 00007D25 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007D2D [4F7D000000000000]  <1>     dq lpt2Hdr
    61 00007D35 40A0                <1>     dw 0A040h
    62 00007D37 [D269000000000000]  <1>     dq nulStrat
    63 00007D3F [D869000000000000]  <1>     dq nulIntr
    64 00007D47 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007D4F [717D000000000000]  <1>     dq lpt3Hdr
    67 00007D57 40A0                <1>     dw 0A040h
    68 00007D59 [D269000000000000]  <1>     dq nulStrat
    69 00007D61 [D869000000000000]  <1>     dq nulIntr
    70 00007D69 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007D71 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007D79 40A0                <1>     dw 0A040h
    74 00007D7B [D269000000000000]  <1>     dq nulStrat
    75 00007D83 [D869000000000000]  <1>     dq nulIntr
    76 00007D8B 4C50543320202020    <1>     dq "LPT3    "
    77 00007D93 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    50                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007D9B 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007DA2 C3                  <1>     ret
     5                              <1> conDriver:
     6 00007DA3 50                  <1>     push rax
     7 00007DA4 53                  <1>     push rbx
     8 00007DA5 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007DAC B003                <1>     mov al, 03h ;Unknown Command
    10 00007DAE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007DB2 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007DB4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007DB7 84C0                <1>     test al, al
    15 00007DB9 7445                <1>     jz .conInit
    16 00007DBB 3C04                <1>     cmp al, 4
    17 00007DBD 745B                <1>     jz .conRead
    18 00007DBF 3C05                <1>     cmp al, 5
    19 00007DC1 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007DC7 3C06                <1>     cmp al, 6
    21 00007DC9 0F84C2000000        <1>     jz .conInputStatus
    22 00007DCF 3C07                <1>     cmp al, 7
    23 00007DD1 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007DD7 3C08                <1>     cmp al, 8
    25 00007DD9 0F84E4000000        <1>     jz .conWrite
    26 00007DDF 3C09                <1>     cmp al, 9
    27 00007DE1 0F84DC000000        <1>     jz .conWrite
    28 00007DE7 3C0A                <1>     cmp al, 0Ah
    29 00007DE9 0F84FD000000        <1>     jz .conOutputStatus
    30 00007DEF EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007DF1 B480                <1>     mov ah, 80h ;Set error bit
    33 00007DF3 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 00007DF7 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00007DFD 5B                  <1>     pop rbx
    37 00007DFE 58                  <1>     pop rax
    38 00007DFF C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00007E00 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00007E02 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 00007E09 75EC                <1>     jnz short .conExit
    43 00007E0B E8F60B0000          <1>     call conInit
    44 00007E10 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 00007E17 EBDE                <1>     jmp short .conExit
    46 00007E19 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 00007E1A B005                <1>     mov al, 05h ;Bad request structure length?
    50 00007E1C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00007E1F 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00007E21 57                  <1>     push rdi
    54 00007E22 51                  <1>     push rcx
    55 00007E23 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 00007E27 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 00007E29 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00007E2C 741C                <1>     je .cre2
    60 00007E2E 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 00007E35 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 00007E37 31C0                <1>     xor eax, eax
    63 00007E39 CD36                <1>     int 36h
    64                              <1> .cre11:
    65 00007E3B AA                  <1>     stosb
    66 00007E3C 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00007E3E 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00007E40 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 00007E46 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 00007E48 EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 00007E4A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00007E4D 59                  <1>     pop rcx
    75 00007E4E 5F                  <1>     pop rdi
    76 00007E4F EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00007E51 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 00007E57 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007E5E EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007E60 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00007E62 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00007E65 758A                <1>     jne .conWriteErrorCode
    86 00007E67 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007E6E 7519                <1>     jnz .cnr2
    88 00007E70 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00007E72 CD36                <1>     int 36h
    90 00007E74 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 00007E76 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 00007E79 E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007E7E 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00007E84 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 00007E89 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007E8F EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00007E91 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00007E93 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 00007E96 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007E9C E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00007EA1 B005                <1>     mov al, 05h ;Bad request structure length?
   110 00007EA3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 00007EA6 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007EAC C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00007EB3 B401                <1>     mov ah, 01      ;Get buffer status
   115 00007EB5 CD36                <1>     int 36h
   116 00007EB7 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007EBD 30E4                <1>     xor ah, ah
   118 00007EBF CD36                <1>     int 36h ;Read key to flush from buffer
   119 00007EC1 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00007EC3 B005                <1>     mov al, 05h ;Bad request structure length?
   123 00007EC5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 00007EC8 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007ECE 56                  <1>     push rsi
   127 00007ECF 51                  <1>     push rcx
   128 00007ED0 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00007ED4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 00007ED6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 00007ED9 7407                <1>     je .cw2
   133 00007EDB AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007EDC CD29                <1>     int 29h ;Fast print char
   135 00007EDE FFC1                <1>     inc ecx
   136 00007EE0 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00007EE2 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 00007EE5 59                  <1>     pop rcx
   140 00007EE6 5E                  <1>     pop rsi
   141 00007EE7 E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00007EEC B005                <1>     mov al, 05h ;Bad request structure length?
   144 00007EEE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00007EF1 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 00007EF7 E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00007EFC 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00007EFD 50                  <1>     push rax
   152 00007EFE B40E                <1>     mov ah, 0Eh
   153 00007F00 CD30                <1>     int 30h
   154 00007F02 58                  <1>     pop rax
   155 00007F03 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 00007F05 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00007F0C 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00007F0E 50                  <1>     push rax
   163 00007F0F 53                  <1>     push rbx
   164 00007F10 51                  <1>     push rcx
   165 00007F11 52                  <1>     push rdx
   166 00007F12 56                  <1>     push rsi
   167 00007F13 55                  <1>     push rbp
   168 00007F14 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 00007F1B B003                <1>     mov al, 03h ;Unknown Command
   170 00007F1D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00007F21 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00007F23 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 00007F26 84C0                <1>     test al, al
   175 00007F28 743B                <1>     jz .clkInit
   176 00007F2A 3C04                <1>     cmp al, 04h
   177 00007F2C 7451                <1>     jz .clkRead
   178 00007F2E 3C06                <1>     cmp al, 06h
   179 00007F30 0F84AE000000        <1>     jz .clkInputStatus
   180 00007F36 3C07                <1>     cmp al, 07h
   181 00007F38 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00007F3E 3C08                <1>     cmp al, 08h
   183 00007F40 0F84BE000000        <1>     jz .clkWrite
   184 00007F46 3C09                <1>     cmp al, 09h
   185 00007F48 0F84B6000000        <1>     jz .clkWrite
   186 00007F4E EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00007F50 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00007F52 B480                <1>     mov ah, 80h ;Set error bit
   191 00007F54 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 00007F58 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007F5E 5D                  <1>     pop rbp
   195 00007F5F 5E                  <1>     pop rsi
   196 00007F60 5A                  <1>     pop rdx
   197 00007F61 59                  <1>     pop rcx
   198 00007F62 5B                  <1>     pop rbx
   199 00007F63 58                  <1>     pop rax
   200 00007F64 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00007F65 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 00007F67 F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007F6E 75E8                <1>     jnz short .clkExit
   205 00007F70 E8F20A0000          <1>     call clockInit
   206 00007F75 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007F7C EBDA                <1>     jmp short .clkExit
   208 00007F7E 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007F7F B005                <1>     mov al, 05h ;Bad request structure length?
   212 00007F81 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00007F84 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 00007F86 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00007F89 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00007F8D 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00007F94 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00007F98 30E4                <1>     xor ah, ah
   220 00007F9A CD3A                <1>     int 3Ah         ;Read the system timer
   221 00007F9C 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00007F9E 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00007FA0 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00007FA2 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 00007FA6 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00007FAD 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00007FB0 0FB7D2              <1>     movzx edx, dx
   230 00007FB3 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 00007FB5 89D0                <1>     mov eax, edx
   232 00007FB7 31D2                <1>     xor edx, edx
   233 00007FB9 89D8                <1>     mov eax, ebx
   234 00007FBB B944040000          <1>     mov ecx, 1092   
   235 00007FC0 F7F1                <1>     div ecx
   236 00007FC2 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 00007FC5 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 00007FC7 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00007FCB 31D2                <1>     xor edx, edx
   240 00007FCD B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 00007FD2 F7F1                <1>     div ecx
   242 00007FD4 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 00007FD7 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00007FD9 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00007FDC 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00007FDF E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 00007FE4 B005                <1>     mov al, 05h ;Bad request structure length?
   253 00007FE6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 00007FE9 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 00007FEF E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 00007FF4 B005                <1>     mov al, 05h ;Bad request structure length?
   259 00007FF6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 00007FF9 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 00007FFF E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00008004 B005                <1>     mov al, 05h ;Bad request structure length?
   265 00008006 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 00008009 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 0000800F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00008012 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 00008016 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000801A 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00008021 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00008023 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 00008027 B105                <1>     mov cl, 5
   276 00008029 F6F1                <1>     div cl          ;Divide al by 5
   277 0000802B 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 0000802D 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 0000802F 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 00008032 B912000000          <1>     mov ecx, 18
   283 00008037 F7E1                <1>     mul ecx  
   284 00008039 01C3                <1>     add ebx, eax
   285                              <1> 
   286 0000803B 31D2                <1>     xor edx, edx
   287 0000803D 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 00008041 B944040000          <1>     mov ecx, 1092
   289 00008046 F7E1                <1>     mul ecx
   290 00008048 01C3                <1>     add ebx, eax
   291 0000804A 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 0000804C 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 00008050 B401                <1>     mov ah, 01h     ;Set the system time
   294 00008052 CD3A                <1>     int 3Ah
   295                              <1> 
   296 00008054 4889F3              <1>     mov rbx, rsi
   297 00008057 E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 0000805C 51                  <1>     push rcx
   303 0000805D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00008060 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00008062 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00008067 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 0000806D C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00008070 050A000000          <1>     add eax, 10
   310 00008075 E2F9                <1>     loop .cbth0
   311 00008077 59                  <1>     pop rcx
   312 00008078 C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00008079 51                  <1>     push rcx
   318 0000807A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 0000807D 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 0000807F 3D0A000000          <1>     cmp eax, 10
   322 00008084 7209                <1>     jb .chtb1
   323 00008086 2D0A000000          <1>     sub eax, 10
   324 0000808B FFC1                <1>     inc ecx
   325 0000808D EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 0000808F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00008092 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00008094 59                  <1>     pop rcx
   330 00008095 C3                  <1>     ret
   331 00008096 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 00008098 C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 0000809F EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 000080A1 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 000080A8 EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 000080AA C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 000080B1 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 000080B3 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 000080BA 50                  <1>     push rax
   347 000080BB 53                  <1>     push rbx
   348 000080BC 51                  <1>     push rcx
   349 000080BD 52                  <1>     push rdx
   350 000080BE 56                  <1>     push rsi
   351 000080BF 57                  <1>     push rdi
   352 000080C0 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 000080C7 B003                <1>     mov al, 03h ;Unknown Command
   354 000080C9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 000080CD 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 000080CF 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 000080D2 84C0                <1>     test al, al
   359 000080D4 745B                <1>     jz short .comExit
   360 000080D6 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 000080D8 7464                <1>     jz .comRead
   362 000080DA 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 000080DC 0F849D000000        <1>     jz .comNondestructiveRead   
   364 000080E2 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 000080E4 0F8486000000        <1>     jz .comReadInputStatus
   366 000080EA 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 000080EC 0F849C000000        <1>     jz .comFlushInputBuffers
   368 000080F2 3C08                <1>     cmp al, 8
   369 000080F4 0F84BA000000        <1>     jz .comWrite
   370 000080FA 3C09                <1>     cmp al, 9
   371 000080FC 0F84B2000000        <1>     jz .comWrite
   372 00008102 3C0A                <1>     cmp al, 0Ah
   373 00008104 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 0000810A EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 0000810C B002                <1>     mov al, 02h ;Unknown device
   377 0000810E EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00008110 BA0B000000          <1>     mov edx, 0Bh
   380 00008115 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 00008117 BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 0000811C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 0000811F B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00008124 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 00008126 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 00008129 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 0000812B B480                <1>     mov ah, 80h ;Set error bit
   391 0000812D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00008131 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 00008137 5F                  <1>     pop rdi
   395 00008138 5E                  <1>     pop rsi
   396 00008139 5A                  <1>     pop rdx
   397 0000813A 59                  <1>     pop rcx
   398 0000813B 5B                  <1>     pop rbx
   399 0000813C 58                  <1>     pop rax
   400 0000813D C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 0000813E B005                <1>     mov al, 05h ;Bad request structure length?
   404 00008140 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 00008143 75E6                <1>     jne .comWriteErrorCode
   406 00008145 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 00008149 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 0000814B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 0000814E 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 00008150 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 00008155 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 0000815C F8                  <1>     clc
   415 0000815D CD34                <1>     int 34h ;Recieve Char
   416 0000815F 72BB                <1>     jc .comError
   417 00008161 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00008164 74EA                <1>     je .cr11
   419 00008166 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 00008167 FFC1                <1>     inc ecx
   421 00008169 EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 0000816B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 0000816E EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00008170 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00008172 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 00008175 75B4                <1>     jne .comWriteErrorCode
   430 00008177 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 0000817D EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 0000817F B005                <1>     mov al, 05h ;Bad request structure length?
   436 00008181 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00008184 75A5                <1>     jne .comWriteErrorCode
   438 00008186 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 0000818C EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 0000818E B005                <1>     mov al, 05h ;Bad request structure length?
   443 00008190 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00008193 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00008195 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 0000819C B800020000          <1>     mov eax, 0200h    ;Recieve
   448 000081A1 F8                  <1>     clc
   449 000081A2 CD34                <1>     int 34h
   450 000081A4 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 000081AA 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 000081AD 75E6                <1>     jne .cfib0
   453 000081AF E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 000081B4 B005                <1>     mov al, 05h ;Bad request structure length?
   457 000081B6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 000081B9 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 000081BF 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 000081C3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 000081C5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 000081C8 7417                <1>     je .cw2
   465 000081CA AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 000081CB B401                <1>     mov ah, 01h ;Move function number into ah
   467 000081CD 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 000081D4 F8                  <1>     clc
   469 000081D5 CD34                <1>     int 34h ;Transmit char
   470 000081D7 0F823FFFFFFF        <1>     jc .comError
   471 000081DD FFC1                <1>     inc ecx
   472 000081DF EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 000081E1 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 000081E4 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 000081E9 B005                <1>     mov al, 05h ;Bad request structure length?
   480 000081EB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 000081EE 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 000081F4 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 000081FB B403                <1>     mov ah, 03h     ;Get status
   485 000081FD F8                  <1>     clc
   486 000081FE CD34                <1>     int 34h
   487 00008200 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 00008206 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 0000820B C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 0000820E F7D0                <1>     not eax      ;Bitwise inversion
   491 00008210 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00008215 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 0000821A E912FFFFFF          <1>     jmp .comExit
   494 0000821F 00                  <1> .comDevice   db 0
    51                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 00008220 50                  <1>     push rax
     3 00008221 53                  <1>     push rbx
     4 00008222 51                  <1>     push rcx
     5 00008223 52                  <1>     push rdx
     6 00008224 56                  <1>     push rsi
     7 00008225 57                  <1>     push rdi
     8 00008226 55                  <1>     push rbp
     9 00008227 4150                <1>     push r8
    10 00008229 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 00008230 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 00008234 B003                <1>     mov al, drvBadCmd
    13 00008236 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 0000823C B001                <1>     mov al, drvBadUnit 
    15 0000823E 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 00008242 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00008248 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 0000824F 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 00008253 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 00008256 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 0000825A 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 0000825E D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00008260 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00008267 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 0000826B 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 0000826D 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 0000826F 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00008272 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 00008274 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 0000827A 4158                <1>     pop r8
    32 0000827C 5D                  <1>     pop rbp
    33 0000827D 5F                  <1>     pop rdi
    34 0000827E 5E                  <1>     pop rsi
    35 0000827F 5A                  <1>     pop rdx
    36 00008280 59                  <1>     pop rcx
    37 00008281 5B                  <1>     pop rbx
    38 00008282 58                  <1>     pop rax
    39 00008283 C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 00008284 4889FB              <1>     mov rbx, rdi
    43 00008287 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 0000828A 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 0000828C 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 0000828F 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 00008296 B401                <1>     mov ah, 01h
    50 00008298 CD33                <1>     int 33h ;Read status of last operation
    51 0000829A 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 0000829D B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 0000829F 7460                <1>     je .msdWriteErrorCode 
    54 000082A1 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 000082A3 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 000082A6 7459                <1>     je .msdWriteErrorCode 
    57 000082A8 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 000082AB 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 000082AD B002                <1>     mov al, 02h  ;Device not ready code
    61 000082AF 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 000082B2 744D                <1>     je .msdWriteErrorCode
    63 000082B4 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 000082B8 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 000082BC 30C0                <1>     xor al, al
    67 000082BE 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 000082C3 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 000082C5 B004                <1>     mov al, 04h     ;CRC error code
    71 000082C7 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 000082CC 7433                <1>     je .msdWriteErrorCode
    73 000082CE 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 000082D3 742C                <1>     je .msdWriteErrorCode
    75 000082D5 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 000082DA 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 000082DC B006                <1>     mov al, 06h     ;Seek error code
    79 000082DE 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 000082E1 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 000082E3 B007                <1>     mov al, 07h
    84 000082E5 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 000082E8 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 000082EA B008                <1>     mov al, 08h     ;Sector not found code
    88 000082EC 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 000082EF 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 000082F1 B00A                <1>     mov al, 0Ah     ;Write fault
    92 000082F3 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 000082F6 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 000082F8 B00B                <1>     mov al, 0Bh     ;Read fault
    96 000082FA 80F911              <1>     cmp cl, 11h     ;Read error
    97 000082FD 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 000082FF B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 00008301 B480                <1>     mov ah, 80h ;Set error bit
   102 00008303 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00008307 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00008308 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 0000830A 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 0000830C AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 0000830E 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00008310 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00008312 0000                <1>     dw 0                            ;Function 5
   111 00008314 0000                <1>     dw 0                            ;Function 6
   112 00008316 0000                <1>     dw 0                            ;Function 7
   113 00008318 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 0000831A 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 0000831C 0000                <1>     dw 0                            ;Function 10
   116 0000831E 0000                <1>     dw 0                            ;Function 11
   117 00008320 D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 00008322 DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 00008324 F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 00008326 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00008328 0000                <1>     dw 0                            ;Function 16
   122 0000832A 0000                <1>     dw 0                            ;Function 17
   123 0000832C 0000                <1>     dw 0                            ;Function 18
   124 0000832E 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 00008330 0000                <1>     dw 0                            ;Function 20
   126 00008332 0000                <1>     dw 0                            ;Function 21
   127 00008334 0000                <1>     dw 0                            ;Function 22
   128 00008336 E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00008338 F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 0000833A 53                  <1>     push rbx
   132 0000833B 4157                <1>     push r15
   133 0000833D E8A3070000          <1>     call msdInit
   134 00008342 415F                <1>     pop r15
   135 00008344 5B                  <1>     pop rbx
   136 00008345 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 0000834E C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 0000834F B005                <1>     mov al, 05h ;Bad request structure length
   141 00008351 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 00008354 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 00008356 E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 0000835B 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 0000835D 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 00008362 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 00008369 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 0000836C F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 0000836F 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 00008371 B416                <1>     mov ah, 16h 
   153 00008373 CD33                <1>     int 33h
   154 00008375 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 0000837B 80FC80              <1>     cmp ah, 80h
   156 0000837E 740E                <1>     je .mmcNoChangeLine
   157 00008380 80FC86              <1>     cmp ah, 86h
   158 00008383 7409                <1>     je .mmcNoChangeLine
   159 00008385 84E4                <1>     test ah, ah ;No change?
   160 00008387 7427                <1>     jz .mmcNoChange
   161 00008389 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 0000838C 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 0000838E 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 00008393 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 00008396 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 00008399 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 0000839B C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 0000839F 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 000083A6 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 000083AA C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 000083AB C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 000083AF C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 000083B0 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 000083B4 C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 000083B5 B005                <1>     mov al, 05h ;Bad request structure length
   186 000083B7 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 000083BA 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 000083C0 4889DE              <1>     mov rsi, rbx
   190 000083C3 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 000083C8 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 000083CF 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 000083D2 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 000083D6 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 000083D8 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 000083DB B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 000083E0 CD33                <1>     int 33h
   198 000083E2 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 000083E8 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 000083EC 7418                <1>     je .mbbpb0
   202 000083EE 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 000083F2 7412                <1>     je .mbbpb0
   204 000083F4 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 000083F8 740C                <1>     je .mbbpb0
   206 000083FA 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 000083FE B007                <1>     mov al, 07h ;Unknown media error code
   208 00008400 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00008406 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 00008409 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 0000840C B90F000000          <1>     mov ecx, bpbEx_size/8
   213 00008411 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 00008414 C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00008415 B005                <1>     mov al, drvBadDrvReq
   217 00008417 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 0000841A 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 00008420 C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 00008421 B005                <1>     mov al, 05h ;Bad request structure length
   223 00008423 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 00008426 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 0000842C E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 00008431 4889DF              <1>     mov rdi, rbx
   229 00008434 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 00008436 B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 00008438 E8D7010000          <1>     call .msdBlkIOCommon
   233 0000843D 0F8241FEFFFF        <1>     jc .msdIOError
   234 00008443 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 00008447 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 0000844B 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 0000844F FFC6                <1>     inc esi
   238 00008451 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 00008454 75E0                <1>     jne .msdr0
   240 00008456 4889FB              <1>     mov rbx, rdi
   241 00008459 C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 0000845A B005                <1>     mov al, 05h ;Bad request structure length
   245 0000845C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 0000845F 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 00008465 E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 0000846A 4889DF              <1>     mov rdi, rbx
   251 0000846D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 0000846F B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 00008471 E89E010000          <1>     call .msdBlkIOCommon
   255 00008476 0F8208FEFFFF        <1>     jc .msdIOError
   256 0000847C 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 00008480 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 00008484 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 00008488 FFC6                <1>     inc esi
   260 0000848A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 0000848D 75E0                <1>     jne .msdw0
   262 0000848F 4889FB              <1>     mov rbx, rdi
   263 00008492 C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 00008493 B005                <1>     mov al, 05h ;Bad request structure length
   267 00008495 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 00008498 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 0000849E E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 000084A3 4889DF              <1>     mov rdi, rbx
   273 000084A6 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 000084A8 B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 000084AA E865010000          <1>     call .msdBlkIOCommon
   277 000084AF 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 000084B5 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 000084B7 E858010000          <1>     call .msdBlkIOCommon
   280 000084BC 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 000084C2 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 000084C6 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 000084CA 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 000084CE FFC6                <1>     inc esi
   285 000084D0 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 000084D3 75D3                <1>     jne .msdwv0
   287 000084D5 4889FB              <1>     mov rbx, rdi
   288 000084D8 C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 000084D9 B005                <1>     mov al, drvBadDrvReq
   291 000084DB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 000084DE 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 000084E4 C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 000084E5 B005                <1>     mov al, drvBadDrvReq
   297 000084E7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 000084EA 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 000084F0 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 000084F5 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 000084FC FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 000084FF C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 00008500 B005                <1>     mov al, drvBadDrvReq
   306 00008502 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00008505 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 0000850B 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 00008510 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00008517 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 0000851A C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 0000851B B005                <1>     mov al, drvBadDrvReq
   315 0000851D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 00008520 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 00008526 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 0000852B 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 00008532 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 00008536 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 0000853B C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 0000853E 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 00008542 C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 00008543 B005                <1>     mov al, drvBadDrvReq
   327 00008545 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 00008548 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 0000854E B003                <1>     mov al, drvBadCmd
   332 00008550 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 00008554 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 00008557 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 0000855D F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 00008560 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 00008566 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 00008569 80F941              <1>     cmp cl, 41h     
   339 0000856C 743F                <1>     je .msdGIOCTLWrite
   340 0000856E 80F942              <1>     cmp cl, 42h
   341 00008571 7451                <1>     je .msdGIOCTLFormat
   342 00008573 80F960              <1>     cmp cl, 60h
   343 00008576 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 0000857C 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 00008580 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 00008587 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 0000858A B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 0000858C 53                  <1>     push rbx
   350 0000858D CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 0000858F 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 00008592 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 00008593 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 00008599 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 0000859D 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 000085A4 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 000085A8 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 000085AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 000085AD E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 000085B2 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 000085B6 B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 000085B8 CD33                <1>     int 33h
   380 000085BA 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 000085C0 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 000085C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 000085C4 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 000085C9 B485                <1>     mov ah, 85h
   392 000085CB EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 000085CD 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 000085D1 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 000085D8 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 000085DB 4889DE              <1>     mov rsi, rbx
   405 000085DE 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 000085E2 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 000085E5 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 000085E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 000085EA B005                <1>     mov al, drvBadDrvReq
   412 000085EC 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 000085EF 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 000085F5 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 000085FB 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 000085FE C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 000085FF B005                <1>     mov al, drvBadDrvReq
   420 00008601 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 00008604 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 0000860A 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 0000860D 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 00008613 C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 00008614 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 00008619 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 00008620 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 00008623 31C9                <1>     xor ecx, ecx
   437 00008625 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 00008628 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 0000862C 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 00008630 88F4                <1>     mov ah, dh
   441 00008632 B001                <1>     mov al, 01h ;Do one sector at a time 
   442 00008634 CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 00008636 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 00008637 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 0000863B 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008641 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 00008643 3C02                <1>     cmp al, 2
   456 00008645 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 00008647 F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 0000864E 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 00008650 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 00008656 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 00008658 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 0000865E 0441                <1>     add al, "A" ;Convert to a letter
   464 00008660 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 00008666 488D3520000000      <1>     lea rsi, .msdStrike
   466 0000866D B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 00008672 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 00008673 CD29                <1>     int 29h ;Print char in al
   470 00008675 FFC9                <1>     dec ecx
   471 00008677 75F9                <1>     jnz .msdCDTprintMessage
   472 00008679 31C0                <1>     xor eax, eax
   473 0000867B CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 0000867D E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 00008682 FFC0                <1>     inc eax ;Clear ZF
   477 00008684 C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 00008685 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 0000868A 31C0                <1>     xor eax, eax
   481 0000868C C3                  <1>     ret
   482                              <1> 
   483 0000868D 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 00008696 666F72206472697665- <1>
   483 0000869F 20                  <1>
   484 000086A0 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 000086A9 72696B650D0A616E79- <1>
   484 000086B2 206B6579207768656E- <1>
   484 000086BB 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 000086C4 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 000086CD 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 000086CE 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 000086CF 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 000086D0 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 000086D5 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 000086DA 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 000086E3 000000000000000000- <1>
   497 000086EC 000000000000000000- <1>
   497 000086F5 000000000000000000- <1>
   497 000086FE 00000000            <1>
   498 00008702 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 0000870B 000000000000000000- <1>
   498 00008714 000000000000000000- <1>
   498 0000871D 000000000000000000- <1>
   498 00008726 000000000000000000- <1>
   498 0000872F 000000000000000000- <1>
   498 00008738 000000000000000000- <1>
   498 00008741 000000000000000000- <1>
   498 0000874A 000000000000000000- <1>
   498 00008753 000000000000000000- <1>
   498 0000875C 000000000000000000- <1>
   498 00008765 000000000000000000- <1>
   498 0000876E 000000000000000000- <1>
   498 00008777 000000000000000000- <1>
   498 00008780 000000000000000000- <1>
   498 00008789 000000000000000000- <1>
   498 00008792 000000000000000000- <1>
   498 0000879B 000000000000000000- <1>
   498 000087A4 000000000000000000- <1>
   498 000087AD 000000000000000000- <1>
   498 000087B6 000000000000000000- <1>
   498 000087BF 000000000000000000- <1>
   498 000087C8 000000000000000000- <1>
   498 000087D1 000000000000000000- <1>
   498 000087DA 000000000000000000- <1>
   498 000087E3 000000000000000000- <1>
   498 000087EC 000000000000000000- <1>
   498 000087F5 000000000000000000- <1>
   498 000087FE 000000000000000000- <1>
   498 00008807 000000000000000000- <1>
   498 00008810 000000000000000000- <1>
   498 00008819 000000000000000000- <1>
   498 00008822 000000000000000000- <1>
   498 0000882B 000000000000000000- <1>
   498 00008834 000000000000000000- <1>
   498 0000883D 000000000000000000- <1>
   498 00008846 000000000000000000- <1>
   498 0000884F 000000000000000000- <1>
   498 00008858 000000000000000000- <1>
   498 00008861 000000000000000000- <1>
   498 0000886A 000000000000000000- <1>
   498 00008873 000000000000000000- <1>
   498 0000887C 000000000000000000- <1>
   498 00008885 000000000000000000- <1>
   498 0000888E 000000000000000000- <1>
   498 00008897 000000000000000000- <1>
   498 000088A0 000000000000000000- <1>
   498 000088A9 000000000000000000- <1>
   498 000088B2 000000000000000000- <1>
   498 000088BB 000000000000000000- <1>
   498 000088C4 000000000000000000- <1>
   498 000088CD 000000000000000000- <1>
   498 000088D6 000000000000000000- <1>
   498 000088DF 000000000000000000- <1>
   498 000088E8 000000000000000000- <1>
   498 000088F1 000000000000000000- <1>
   498 000088FA 000000000000000000- <1>
   498 00008903 000000000000000000- <1>
   498 0000890C 000000000000000000- <1>
   498 00008915 000000000000000000- <1>
   498 0000891E 000000000000000000- <1>
   498 00008927 000000000000000000- <1>
   498 00008930 000000000000000000- <1>
   498 00008939 000000000000000000- <1>
   498 00008942 000000000000000000- <1>
   498 0000894B 000000000000000000- <1>
   498 00008954 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 0000895A E9                  <2>  db 0E9h
   175 0000895B 00                  <2>  db 00h
   176 0000895C 90                  <2>  db 90h
   177 0000895D 534350444F537631    <2>  db 'SCPDOSv1'
   178 00008965 0002                <2>  dw 0200h
   179 00008967 01                  <2>  db 01h
   180 00008968 0100                <2>  dw 0001h
   181 0000896A 02                  <2>  db 02h
   182 0000896B E000                <2>  dw 00E0h
   183 0000896D 400B                <2>  dw 0B40h
   184 0000896F F0                  <2>  db 0F0h
   185 00008970 0900                <2>  dw 0009h
   186 00008972 1200                <2>  dw 0012h
   187 00008974 0200                <2>  dw 0002h
   188 00008976 00000000            <2>  dd 0
   189 0000897A 00000000            <2>  dd 0
   190 0000897E 00                  <2>  db 00h
   191 0000897F 00                  <2>  db 00h
   192 00008980 29                  <2>  db 29h
   193 00008981 00000000            <2>  dd 0
   194 00008985 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 0000898E 2020                <2>
   195 00008990 4641543132202020    <2>  db 'FAT12   '
   196 00008998 000000000000000000- <2>  db 58 dup 0
   196 000089A1 000000000000000000- <2>
   196 000089AA 000000000000000000- <2>
   196 000089B3 000000000000000000- <2>
   196 000089BC 000000000000000000- <2>
   196 000089C5 000000000000000000- <2>
   196 000089CE 00000000            <2>
   500                              <1> endptr equ $
    52                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 000089D2 0F010D23000000      <1>     sidt [myIdt]
     8 000089D9 0FB6C0              <1>     movzx eax, al
     9 000089DC 4892                <1>     xchg rdx, rax
    10 000089DE 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 000089E2 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 000089E9 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 000089EC 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 000089F0 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 000089F4 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 000089F8 894208              <1>     mov dword [rdx + 8], eax
    17 000089FB C3                  <1>     ret
    18                              <1> myIdt:
    19 000089FC 0000                <1> .limit  dw 0
    20 000089FE 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00008A06 50                  <1>     push rax
    25 00008A07 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00008A08 51                  <1>     push rcx
    27 00008A09 52                  <1>     push rdx
    28 00008A0A 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00008A11 B829000000          <1>     mov eax, 29h
    30 00008A16 E8B7FFFFFF          <1>     call installInterrupt
    31 00008A1B 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00008A22 B83B000000          <1>     mov eax, 3Bh
    33 00008A27 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00008A2C B401                <1>     mov ah, 01      ;Get buffer status
    36 00008A2E CD36                <1>     int 36h
    37 00008A30 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00008A32 30E4                <1>     xor ah, ah
    39 00008A34 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00008A36 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00008A38 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00008A3D CD30                <1>     int 30h
    44 00008A3F B402                <1>     mov ah, 02h
    45 00008A41 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00008A43 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00008A45 CD30                <1>     int 30h
    48 00008A47 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00008A49 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00008A4E CD30                <1>     int 30h
    51 00008A50 5A                  <1>     pop rdx
    52 00008A51 59                  <1>     pop rcx
    53 00008A52 5B                  <1>     pop rbx
    54 00008A53 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00008A54 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00008A59 50                  <1>     push rax
    58 00008A5A 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00008A61 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00008A65 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00008A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00008A67 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00008A68 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00008A6A CD3A                <1>     int 3Ah
    70 00008A6C 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008A6E 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00008A71 E84D000000          <1>     call .bcd2Bin
    74 00008A76 88C5                <1>     mov ch, al
    75 00008A78 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00008A7B E843000000          <1>     call .bcd2Bin
    77 00008A80 88C1                <1>     mov cl, al
    78 00008A82 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008A85 E839000000          <1>     call .bcd2Bin
    80 00008A8A 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008A8C 89C2                <1>     mov edx, eax
    82 00008A8E B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008A90 CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008A92 B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008A94 CD3A                <1>     int 3Ah
    90 00008A96 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008A98 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00008A9B E823000000          <1>     call .bcd2Bin
    94 00008AA0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008AA3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 00008AA9 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008AAC E812000000          <1>     call .bcd2Bin
    98 00008AB1 88C6                <1>     mov dh, al  
    99 00008AB3 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00008AB6 E808000000          <1>     call .bcd2Bin
   101 00008ABB 88C2                <1>     mov dl, al
   102 00008ABD B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008ABF CD21                <1>     int 21h
   104 00008AC1 EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008AC3 51                  <1>     push rcx
   108 00008AC4 89C1                <1>     mov ecx, eax
   109 00008AC6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00008ACB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008AD1 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008AD4 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008AD7 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00008AD9 FFC9                <1>     dec ecx
   116 00008ADB 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008ADD 59                  <1>     pop rcx
   119 00008ADE C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008ADF 5B                  <1>     pop rbx ;Get the pointer back
   122 00008AE0 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 00008AE5 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 00008AE6 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 00008AE8 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 00008AEC 664489C0            <1>     mov ax, r8w
   139 00008AF0 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 00008AF6 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 00008AFC C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 00008B03 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 00008B0A 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 00008B11 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 00008B17 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 00008B20 00                  <1>
   147 00008B21 B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 00008B23 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 00008B2A 7467                <1>     je .remInit
   151 00008B2C 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 00008B2E E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 00008B33 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 00008B35 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 00008B3E 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 00008B40 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 00008B42 8A6302              <1>     mov ah, byte [rbx + 2]
   160 00008B45 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 00008B49 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 00008B4B 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 00008B52 B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 00008B54 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 00008B57 3C01                <1>     cmp al, 01
   169 00008B59 7421                <1>     je .primaryFound
   170 00008B5B 3C04                <1>     cmp al, 04
   171 00008B5D 741D                <1>     je .primaryFound
   172 00008B5F 3C06                <1>     cmp al, 06
   173 00008B61 7419                <1>     je .primaryFound
   174 00008B63 3C0B                <1>     cmp al, 0Bh
   175 00008B65 7415                <1>     je .primaryFound
   176 00008B67 3C0C                <1>     cmp al, 0Ch
   177 00008B69 7411                <1>     je .primaryFound
   178 00008B6B 3C0E                <1>     cmp al, 0Eh
   179 00008B6D 740D                <1>     je .primaryFound
   180 00008B6F 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 00008B76 FEC9                <1>     dec cl
   182 00008B78 740A                <1>     jz .primaryEpilog
   183 00008B7A EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 00008B7C 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008B7F E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 00008B84 FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 00008B86 88D6                <1>     mov dh, dl
   191 00008B88 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 00008B8B 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 00008B91 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 00008B93 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 00008B9A 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 00008BA1 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 00008BA4 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 00008BA8 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 00008BAB 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 00008BAD 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008BB0 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 00008BB7 7508                <1>     jnz .removables
   216 00008BB9 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008BC0 C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 00008BC1 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 00008BC3 E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 00008BC8 FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 00008BCA 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008BD0 7412                <1>     je .end
   225 00008BD2 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 00008BD9 7503                <1>     jne .re0
   227 00008BDB 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 00008BDE 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 00008BE2 72DD                <1>     jb .removables
   231                              <1> .end:
   232 00008BE4 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 00008BEB 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 00008BED 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 00008BEE 50                  <1>     push rax
   238 00008BEF 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 00008BF6 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 00008BF9 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 00008C00 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 00008C04 58                  <1>     pop rax
   243 00008C05 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 00008C0A 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 00008C11 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 00008C17 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 00008C1A 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 00008C21 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 00008C24 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 00008C28 C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 00008C2F C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 00008C36 FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 00008C3C EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 00008C3E B482                <1>     mov ah, 82h ;Read
   259 00008C40 B001                <1>     mov al, 1   ;One sector
   260 00008C42 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 00008C49 CD33                <1>     int 33h
   262 00008C4B C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 00008C4C E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00008C51 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00008C53 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 00008C54 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 00008C56 8A6302              <1>     mov ah, byte [rbx + 2]
   274 00008C59 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008C5D 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 00008C5F 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 00008C62 51                  <1>     push rcx
   279 00008C63 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 00008C68 4C89FF              <1>     mov rdi, r15
   281 00008C6B F348A5              <1>     rep movsq   ;Copy the BPB
   282 00008C6E 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 00008C6F 488D1D5AFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   285 00008C76 4C01C3              <1>     add rbx, r8
   286                              <1>     ;Add device count to rbx to point to correct entry
   287 00008C79 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   288 00008C7B 488D1D58FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   289 00008C82 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   290 00008C86 4C893B              <1>     mov qword [rbx], r15
   291 00008C89 49FFC0              <1>     inc r8  ;Goto next logical drive
   292 00008C8C FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   293 00008C92 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   294                              <1>     return
    13                              <2> %%_ret:
    14 00008C99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    54                                  Segment drvbss follows=resSeg align=1 nobits
    55                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    56 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    57                                  dosEnd: ;Used to compute the size of resident DOS
    57          ------------------       info: assembly required 1+18+2 passes

