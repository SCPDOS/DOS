     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date, not 100% supported (consider later)
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr         dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment otext align=1   
    14                                  ;OEMINIT code segment
    15                                  %include "./src/Oeminit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> ;SYSINIT doesnt care about the internal structure of the OEMINIT module.
     3                              <1> ;Thus, an OEM is free to arrange code and data within the OEMINIT module,
     4                              <1> ; as they please. OEMINIT is always the first module linked to in the DOS
     5                              <1> ; binary blob file and therefore an OEM can guarantee that the first byte 
     6                              <1> ; of the OEMINIT module will be the first byte executed by the machine.
     7                              <1> ;SYSINIT starts being invoked only once OEMINIT jumps to the symbol SYSENTRY.
     8                              <1> ;OEMINIT can even be an .EXE or .ELF executable if the firmware allows it, 
     9                              <1> ; as long as it can link with SYSINIT by EXPORTING and IMPORTING the right
    10                              <1> ; symbols, its ok! Also, the DOS linker script requires that the OEMINIT 
    11                              <1> ; module be the first thing in the executable file, with the default
    12                              <1> ; kernel drivers being the at the end, after the DOS, in the segment
    13                              <1> ; kDrvText, kDrvData and kDrvBSS.
    14                              <1> ;OEMINIT has no BSS segment, but has otext and odata where it can link 
    15                              <1> ; itself into.
    16                              <1> ;---------------------------------------------------------------------------;
    17                              <1> ;PUBLIC PROCEDURES needed to link with SYSINIT:                             ;
    18                              <1> ;---------------------------------------------------------------------------;
    19                              <1> ; OEMMCBINIT -> Does MCB chain building as SYSINIT doesn't know how to read ;
    20                              <1> ;   any memory maps. Thats on the OEM to parse and build for us.            ;
    21                              <1> ; OEMHALT -> If anything goes wrong during the initial phase of SYSINIT,    ;
    22                              <1> ;   it will use this routine to print a message and halt the machine.       ;
    23                              <1> ; OEMCALLBK -> Used to finalise any setup before xfring control to SHELL=   ;
    24                              <1> ;   At this point, DOS is ready to be used.                                 ;
    25                              <1> ;---------------------------------------------------------------------------;
    26                              <1> ;EXTERN VARS needed to link with SYSINIT:                                   ;
    27                              <1> ;---------------------------------------------------------------------------;
    28                              <1> ; These vars need to be initialised before jumping to SYSENTRY              ;
    29                              <1> ;---------------------------------------------------------------------------;
    30                              <1> ;FINALDOSPTR dq ?    ;Pointer to where dSeg should be loaded                ;
    31                              <1> ;FILES       db ?    ;Default number of FILES                               ;
    32                              <1> ;BUFFERS     db ?    ;Default number of BUFFERS                             ;
    33                              <1> ;DFLTDRIVE   db ?    ;Default drive number (0-25), this is the boot drive   ;
    34                              <1> ;LASTDRIVE   db ?    ;Default last drive number (0-25)                      ;
    35                              <1> ;OEMBIOS     db ?    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS   ;
    36                              <1> ;OEMDRVCHAIN dq ?    ;Pointer to the uninitialised device drivers           ;
    37                              <1> ;OEMPTR      dq ?    ;Pointer to store at biosPtr                           ;
    38                              <1> ;OEMVERSION  dd ?    ;BIOS number, to be used by drivers for id-ing         ;
    39                              <1> ;---------------------------------------------------------------------------;
    40                              <1> ; These vars are initialised by SYSINIT, to be used in OEMMCBINIT           ;
    41                              <1> ; These vars are undefined outside of OEMMCBINIT                            ;
    42                              <1> ;---------------------------------------------------------------------------;
    43                              <1> ;MCBANCHOR   dq ?    ;Pointer to the Anchor MCB, part of dSEg               ;
    44                              <1> ;---------------------------------------------------------------------------;
    45                              <1> ; These vars are initialised by SYSINIT, to be used in OEMCALLBK            ;
    46                              <1> ; These vars are undefined outside of OEMCALLBK                             ;
    47                              <1> ;---------------------------------------------------------------------------;
    48                              <1> ;OEMMEMPTR   dq ?    ;Var to save ptr to the 64Kb block passed to OEMCALLBK ;
    49                              <1> ;---------------------------------------------------------------------------;
    50                              <1> ;
    51                              <1> 
    52                              <1> OEMRELOC PROC NEAR  ;OEMINIT Entry point from SCP/BIOS
    53                              <1> ; We arrive here with the following values in the registers.
    54                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    55                              <1> ; dx  = Int 33h boot device number
    56                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    57                              <1> 
    58 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    59 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    60 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    61 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    62 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    63 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    64 0000001A F348A5              <1>     rep movsq   ;Copy over
    65 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    66 00000022 50                  <1>     push rax
    67 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    68                              <1> sysInitldr:
    69                              <1> ;Now the tough part, load DOS to 800
    70 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    71                              <1> .read:
    72 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    73 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    73 00000035 00                  <1>
    74 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    75 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    76 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    77 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    78 0000003F CD33                <1>     int 33h
    79 00000041 7206                <1>     jc .readFail
    80 00000043 6800080000          <1>     push qword 800h
    81 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    82                              <1> .readFail:
    83 00000049 FFCE                <1>     dec esi
    84 0000004B 75DC                <1>     jnz .read
    85 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    86 00000054 B804130000          <1>     mov eax, 1304h
    87 00000059 CD30                <1>     int 30h
    88 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    89 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    89 00000066 6F6164204572726F72- <1>
    89 0000006F 0A0D00              <1>
    90 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    90 0000007B 909090909090909090- <1>
    90 00000084 909090909090909090- <1>
    90 0000008D 909090909090909090- <1>
    90 00000096 909090909090909090- <1>
    90 0000009F 909090909090909090- <1>
    90 000000A8 909090909090909090- <1>
    90 000000B1 909090909090909090- <1>
    90 000000BA 909090909090909090- <1>
    90 000000C3 909090909090909090- <1>
    90 000000CC 909090909090909090- <1>
    90 000000D5 909090909090909090- <1>
    90 000000DE 909090909090909090- <1>
    90 000000E7 909090909090909090- <1>
    90 000000F0 909090909090909090- <1>
    90 000000F9 909090909090909090- <1>
    90 00000102 909090909090909090- <1>
    90 0000010B 909090909090909090- <1>
    90 00000114 909090909090909090- <1>
    90 0000011D 909090909090909090- <1>
    90 00000126 909090909090909090- <1>
    90 0000012F 909090909090909090- <1>
    90 00000138 909090909090909090- <1>
    90 00000141 909090909090909090- <1>
    90 0000014A 909090909090909090- <1>
    90 00000153 909090909090909090- <1>
    90 0000015C 909090909090909090- <1>
    90 00000165 909090909090909090- <1>
    90 0000016E 909090909090909090- <1>
    90 00000177 909090909090909090- <1>
    90 00000180 909090909090909090- <1>
    90 00000189 909090909090909090- <1>
    90 00000192 909090909090909090- <1>
    90 0000019B 909090909090909090- <1>
    90 000001A4 909090909090909090- <1>
    90 000001AD 909090909090909090- <1>
    90 000001B6 909090909090909090- <1>
    90 000001BF 909090909090909090- <1>
    90 000001C8 909090909090909090- <1>
    90 000001D1 909090909090909090- <1>
    90 000001DA 909090909090909090- <1>
    90 000001E3 909090909090909090- <1>
    90 000001EC 909090909090909090- <1>
    90 000001F5 909090909090909090- <1>
    90 000001FE 9090                <1>
    91                              <1> ;END OF FIRST SECTOR!!
    92                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    93                              <1> initBegin:
    94 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    95 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    96 00000206 0F32                <1>     rdmsr
    97 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    98 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    99 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
   100 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
   101 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
   102 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
   103                              <1> ;Now sets the Statistical data and adds any page tables that are needed
   104                              <1> ;------------------------------------------------;
   105                              <1> ;      Start saving basic DOS data to the        ; 
   106                              <1> ;                OEM Variables                   ;
   107                              <1> ;------------------------------------------------;
   108 00000221 31C0                <1>     xor eax, eax    ;Drive A:
   109 00000223 BB02000000          <1>     mov ebx, 2      ;Drive C:
   110 00000228 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
   111 0000022C 0F45C3              <1>     cmovnz eax, ebx
   112 0000022F 8805(CE010000)      <1>     mov byte [DFLTDRIVE], al    ;Set default drive
   113                              <1> ;Copy DOS to its final resting place
   114 00000235 48893522040000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
   115 0000023C C605(CC010000)08    <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
   116 00000243 C605(CD010000)1E    <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
   117 0000024A C605(CF010000)05    <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
   118 00000251 C705(E1010000)0000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
   118 00000259 0000                <1>
   119 0000025B 48C705(D9010000)00- <1>     mov qword [OEMPTR], 0       ;No pointer
   119 00000263 000000              <1>
   120 00000266 C605(D0010000)00    <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
   121                              <1>    ;If no detected Int 33h devices, halt 
   122 0000026D CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   123 0000026F 49C1E818            <1>     shr r8, 3*8
   124 00000273 4584C0              <1>     test r8b, r8b
   125 00000276 0F849D030000        <1>     jz OEMHALT
   126 0000027C 4889F7              <1>     mov rdi, rsi
   127 0000027F 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
   128 00000286 4881C700100000      <1>     add rdi, 1000h
   129                              <1> ;------------------------------------------------;
   130                              <1> ;      Add additional page tables before the     ;
   131                              <1> ;                   data area.                   ;
   132                              <1> ;------------------------------------------------;
   133                              <1> ;This will allow for up to 64Gb of addressible space
   134                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   135 0000028D B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
   136 00000292 57                  <1>     push rdi        ;rdi points to the APT space
   137 00000293 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   137 0000029C 00                  <1>
   138                              <1> pdtLoop:
   139 0000029D 48AB                <1>     stosq
   140 0000029F 480500002000        <1>     add rax, 200000h
   141 000002A5 FFC9                <1>     dec ecx
   142 000002A7 75F4                <1>     jnz pdtLoop
   143 000002A9 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   144                              <1> ;Now we add every 4kb page to the page directory pointer table
   145                              <1> ;15 4kb pages to consider
   146 000002AA 48893D(BC010000)    <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
   147 000002B1 57                  <1>     push rdi
   148 000002B2 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   149 000002B5 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   150 000002B8 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   151 000002BF 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   152 000002C6 B93C000000          <1>     mov ecx, 60
   153 000002CB 480D03000000        <1>     or rax, 3h      ;present and r/w
   154                              <1> pdptLoop:
   155 000002D1 48AB                <1>     stosq
   156 000002D3 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   157 000002D9 FFC9                <1>     dec ecx
   158 000002DB 75F4                <1>     jnz pdptLoop
   159                              <1> 
   160 000002DD 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
   161 000002E0 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
   162                              <1> ;------------------------------------------------;
   163                              <1> ;       Set Device Driver Chain and Exit         ;
   164                              <1> ;------------------------------------------------;  
   165                              <1> ;Before we exit, set the device driver chain
   166 000002E3 48B8-               <1>     mov rax, driverChain
   166 000002E5 [0000000000000000]  <1>
   167 000002ED 5F                  <1>     pop rdi
   168 000002EE 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
   169 000002F1 488905(D1010000)    <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
   170                              <1> 
   171                              <1> ;----------------------------------------------------------------
   172                              <1> ;                       PIC Remap procedure                     :
   173                              <1> ;----------------------------------------------------------------
   174                              <1> ;Remapping the IRQ lines to Interrupts 0F0h - 0FFh
   175 000002F8 FA                  <1>     cli
   176 000002F9 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
   177 000002FB E621                <1>     out 021h, al
   178 000002FD E6A1                <1>     out 0A1h, al
   179 000002FF 0F010D70030000      <1>     sidt [oemIDTptr]    ;Get the idt here
   180 00000306 488B356B030000      <1>     mov rsi, qword [oemIDTptr.Base] ;Get the base ptr
   181 0000030D 4889F7              <1>     mov rdi, rsi
   182 00000310 4881C600020000      <1>     add rsi, 020h*10h
   183 00000317 4881C7000F0000      <1>     add rdi, 0F0h*10h
   184 0000031E B920000000          <1>     mov ecx, 2*10h    ;Copy the hardware IRQ pointers high!
   185 00000323 F348A5              <1>     rep movsq
   186                              <1> 
   187 00000326 B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
   188 00000328 E620                <1>     out 020h, al
   189 0000032A E680                <1>     out 080h, al    
   190 0000032C E6A0                <1>     out 0A0h, al
   191 0000032E E680                <1>     out 080h, al    
   192 00000330 B0F0                <1>     mov al, 0F0h       ;PIC1 to take Int 0F0h - F7h
   193 00000332 E621                <1>     out 021h, al
   194 00000334 E680                <1>     out 080h, al    
   195 00000336 0408                <1>     add al, 8        ;PIC2 to take Int  F8h - FFh
   196 00000338 E6A1                <1>     out 0A1h, al 
   197 0000033A E680                <1>     out 080h, al    
   198 0000033C B004                <1>     mov al, 4
   199 0000033E E621                <1>     out 021h, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
   200 00000340 E680                <1>     out 080h, al    
   201 00000342 FEC8                <1>     dec al
   202 00000344 FEC8                <1>     dec al
   203 00000346 E6A1                <1>     out 0A1h, al    ;Tell PIC 2 its cascade identity (00000010)
   204 00000348 E680                <1>     out 080h, al
   205 0000034A B001                <1>     mov al, 01h        ;Initialise in 8086 mode
   206 0000034C E621                <1>     out 021h, al
   207 0000034E E680                <1>     out 080h, al    
   208 00000350 E6A1                <1>     out 0A1h, al
   209 00000352 E680                <1>     out 080h, al    
   210 00000354 0F011D1B030000      <1>     lidt [oemIDTptr] 
   211 0000035B 31C0                <1>     xor eax, eax    ;Unmask all interrupts 
   212 0000035D E621                <1>     out 021h, al
   213 0000035F E6A1                <1>     out 0A1h, al
   214 00000361 FB                  <1>     sti
   215                              <1> 
   216 00000362 E9(00000000)        <1>     jmp SYSENTRY    ;Now all vars setup, we can proceed!
   217                              <1> OEMSYSINIT ENDP
   218                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
   219                              <1> 
   220                              <1> OEMMCBINIT PROC NEAR
   221 00000367 B820E80000          <1>     mov eax, 0E820h ;Get memory map
   222 0000036C CD35                <1>     int 35h ; rsi has pointer to memory map
   223 0000036E 488B05E9020000      <1>     mov rax, qword [biosUBase]
   224 00000375 E8FA000000          <1>     call .mcbFindAddress
   225 0000037A 7341                <1>     jnc .mcbi1  ;If found, proceed
   226                              <1>     ;Here, we try use E801h
   227 0000037C B801E80000          <1>     mov eax, 0E801h
   228 00000381 CD35                <1>     int 35h
   229 00000383 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   230 00000386 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   231 00000389 85C0                <1>     test eax, eax
   232 0000038B 7417                <1>     jz .worst
   233 0000038D C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   234 00000390 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   235 00000393 8905CD020000        <1>     mov dword [loProtMem], eax
   236 00000399 891DCB020000        <1>     mov dword [hiProtMem], ebx
   237 0000039F E91D010000          <1>     jmp mcbBuild
   238                              <1> .worst:
   239                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   240 000003A4 B800002000          <1>     mov eax, 200000h
   241 000003A9 488B1DAE020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   242 000003B0 29D8                <1>     sub eax, ebx
   243 000003B2 8905AE020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   244 000003B8 E904010000          <1>     jmp mcbBuild 
   245                              <1> .mcbi1:
   246 000003BD 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   247 000003C0 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   247 000003C9 00                  <1>
   248 000003CA 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   249 000003CE 0F85C0000000        <1>     jne .mcbFail
   250 000003D4 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   251                              <1>     ;PCI hole always exists so this value will always be a dword
   252 000003D8 890588020000        <1>     mov dword [loProtMem], eax
   253 000003DE 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   254 000003E1 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   255 000003E4 4881FB00000001      <1>     cmp rbx, 1000000h  
   256 000003EB 773A                <1>     ja .skipISA
   257                              <1> ;Here we deal with ISA hole issues
   258 000003ED B820E80000          <1>     mov eax, 0E820h
   259 000003F2 CD35                <1>     int 35h
   260 000003F4 48B800000001000000- <1>     mov rax, 1000000h
   260 000003FD 00                  <1>
   261 000003FE E871000000          <1>     call .mcbFindAddress
   262 00000403 0F82B8000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   263 00000409 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   263 00000412 00                  <1>
   264 00000413 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   265 00000417 0F85A4000000        <1>     jne mcbBuild  
   266 0000041D 488B5808            <1>     mov rbx, qword [rax + 8]
   267 00000421 891D43020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   268                              <1> .skipISA:
   269 00000427 B820E80000          <1>     mov eax, 0E820h
   270 0000042C CD35                <1>     int 35h
   271 0000042E 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   271 00000437 00                  <1>
   272 00000438 E837000000          <1>     call .mcbFindAddress
   273 0000043D 0F827E000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   274 00000443 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   274 0000044C 00                  <1>
   275 0000044D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   276 00000451 756E                <1>     jne mcbBuild   
   277 00000453 488B5808            <1>     mov rbx, qword [rax + 8]
   278                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   279 00000457 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   279 00000460 00                  <1>
   280 00000461 4839CB              <1>     cmp rbx, rcx
   281 00000464 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   282 00000468 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   283 0000046F E94D000000          <1>     jmp mcbBuild
   284                              <1> .mcbFindAddress:
   285                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   286                              <1> ;Entry: rax = Address of arena to search for
   287                              <1> ;       rsi = Pointer to memory map
   288                              <1> ;       ecx = Number of 24 byte entries
   289                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   290                              <1> ;       CF=CY : value in rax not found
   291 00000474 56                  <1>     push rsi
   292 00000475 51                  <1>     push rcx
   293 00000476 50                  <1>     push rax
   294                              <1> .mfa0:
   295 00000477 483B06              <1>     cmp rax, qword [rsi]
   296 0000047A 7410                <1>     je .mcbAddressFound
   297 0000047C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   298 00000483 FFC9                <1>     dec ecx
   299 00000485 79F0                <1>     jns .mfa0
   300                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   301 00000487 58                  <1>     pop rax
   302 00000488 59                  <1>     pop rcx
   303 00000489 5E                  <1>     pop rsi
   304 0000048A F9                  <1>     stc
   305 0000048B C3                  <1>     ret
   306                              <1> .mcbAddressFound:
   307 0000048C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   308 0000048F 59                  <1>     pop rcx ;Pop old rax value off
   309 00000490 59                  <1>     pop rcx
   310 00000491 5E                  <1>     pop rsi
   311 00000492 F8                  <1>     clc
   312 00000493 C3                  <1>     ret
   313                              <1> .mcbFail:
   314 00000494 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   315 0000049B B804130000          <1>     mov eax, 1304h
   316 000004A0 CD30                <1>     int 30h
   317 000004A2 E972010000          <1>     jmp OEMHALT
   318 000004A7 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   318 000004B0 6C6F636174696F6E20- <1>
   318 000004B9 4572726F720A0D00    <1>
   319                              <1> 
   320                              <1> mcbBuild:
   321                              <1> ;Actually build the MCB chain here
   322                              <1> ;Start by computing the difference between userbase and DOS area
   323 000004C1 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   324 000004C8 488B35(C4010000)    <1>     mov rsi, qword [MCBANCHOR]  
   325 000004CF 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   326 000004D2 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   327 000004D6 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   328 000004DC 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   329 000004DF 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   330 000004E2 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   331 000004E5 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   332 000004EB 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   333 000004F1 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   333 000004FA 00                  <1>
   334 000004FB 0F8218010000        <1>     jb OEMHALT
   335 00000501 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   336 00000504 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   337 00000507 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   338 0000050A 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   339 00000512 31F6                <1>     xor esi, esi
   340 00000514 8B354C010000        <1>     mov esi, dword [loProtMem]
   341 0000051A 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   342 00000520 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   343 00000523 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   344                              <1> 
   345                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   346 00000526 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   346 0000052F 00                  <1>
   347 00000530 746C                <1>     jz .skipISA
   348                              <1>     ;Here if an ISA hole exists, place a MCB around it
   349 00000532 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   350                              <1>     ;Remove one MCB worth of space from alloc
   351 00000539 31C9                <1>     xor ecx, ecx
   352 0000053B 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   353 0000053E 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   354 00000544 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   355 00000547 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   356 0000054A 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   357 0000054D C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   358 00000550 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   359 00000558 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   359 00000561 00                  <1>
   360 00000562 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   361 00000565 480510000000        <1>     add rax, mcb_size
   362 0000056B 4829C1              <1>     sub rcx, rax    ;Take their difference
   363 0000056E C1E904              <1>     shr ecx, 4
   364 00000571 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   365 00000574 C1E104              <1>     shl ecx, 4  ;Get bytes again
   366 00000577 4881C310000000      <1>     add rbx, mcb_size
   367 0000057E 4801CB              <1>     add rbx, rcx
   368                              <1>     ;RBX should now be at 16Mb
   369 00000581 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   370 00000584 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   371 0000058C 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   372 00000592 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   373 00000595 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   374 0000059B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   375                              <1> .skipISA:
   376                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   377                              <1>     ;rbx points to a block with "Z" marker
   378 0000059E 813DC6000000000000- <1>     cmp dword [longMem], 0
   378 000005A7 00                  <1>
   379 000005A8 746E                <1>     jz .exit
   380                              <1>     ;Add PCI hole MCB
   381 000005AA 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   382                              <1>     ;Remove one MCB worth of space from alloc
   383 000005B1 31C9                <1>     xor ecx, ecx
   384 000005B3 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   385 000005B6 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   386 000005BC C1E104              <1>     shl ecx, 4  ;Get bytes
   387 000005BF C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   388 000005C2 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   389 000005C5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   390 000005C8 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   391 000005D0 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   391 000005D9 00                  <1>
   392 000005DA 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   393 000005DD 480510000000        <1>     add rax, mcb_size
   394 000005E3 4829C1              <1>     sub rcx, rax    ;Take their difference
   395 000005E6 C1E904              <1>     shr ecx, 4
   396 000005E9 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   397 000005EC C1E104              <1>     shl ecx, 4  ;Get bytes again
   398 000005EF 4881C310000000      <1>     add rbx, mcb_size
   399 000005F6 4801CB              <1>     add rbx, rcx
   400                              <1>     ;RBX should now be at 4Gb
   401 000005F9 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   402 000005FC 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   403 00000604 488B0D63000000      <1>     mov rcx, qword [longMem]
   404 0000060B 48C1E904            <1>     shr rcx, 4
   405 0000060F 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   406 00000615 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   407                              <1> .exit:
   408 00000618 C3                  <1>     ret
   409                              <1> OEMMCBINIT ENDP
   410                              <1> 
   411                              <1> OEMHALT PROC    NEAR
   412                              <1> ;If a critical error occurs during sysinit, fail through here
   413                              <1> ;Int 22h, 23h and 24h point here during sysinit
   414 00000619 488D2D0C000000      <1>     lea rbp, hltmsg
   415 00000620 B804130000          <1>     mov eax, 1304h
   416 00000625 CD30                <1>     int 30h
   417                              <1> .ei0:
   418 00000627 F4                  <1>     hlt
   419 00000628 F390                <1>     pause
   420 0000062A EBFB                <1>     jmp short .ei0
   421 0000062C 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   421 00000635 7469616C6973696E67- <1>
   421 0000063E 20534350444F532E53- <1>
   421 00000647 59532E205379737465- <1>
   421 00000650 6D2068616C74696E67- <1>
   421 00000659 2E2E2E00            <1>
   422                              <1> OEMHALT ENDP
   423                              <1> 
   424                              <1> OEMCALLBK PROC NEAR
   425 0000065D C3                  <1>     ret
   426                              <1> OEMCALLBK ENDP
   427                              <1> 
   428                              <1> ;OEM Only variables are permitted in this file. They are not 
   429                              <1> ; visible to SYSINIT
   430 0000065E 0000000000000000    <1> biosUBase   dq 0
   431 00000666 00000000            <1> loProtMem   dd 0
   432 0000066A 00000000            <1> hiProtMem   dd 0
   433 0000066E 0000000000000000    <1> longMem     dq 0
   434                              <1> oemIDTptr:      ;Local IDT pointer
   435 00000676 0000                <1>     .Limit  dw 0
   436 00000678 0000000000000000    <1>     .Base   dq 0
    16                                  Segment odata follows=otext align=1 vfollows=otext valign=1
    17                                  ;OEMINIT data segment
    18                                  Segment stext follows=odata align=1 vfollows=odata valign=1
    19                                  ;SYSINIT code segment
    20                                  %define currSegVBase section.stext.vstart
    21                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> SYSENTRY:    ;Control is passed here from OEMINIT module
     3                              <1> ;First move the load address into fs 
     4 00000000 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     5 00000005 488B3D(BC010000)    <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     6 0000000C 89F8                <1>     mov eax, edi
     7 0000000E 4889FA              <1>     mov rdx, rdi
     8 00000011 48C1EA20            <1>     shr rdx, 20h
     9 00000015 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    10 00000017 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    11                              <1> ;------------------------------------------------;
    12                              <1> ;      Copy DOS to it's final resting ground     ;
    13                              <1> ;------------------------------------------------;  
    14                              <1> dosReloc:
    15 0000001A 488D35(00000000)    <1>     lea rsi, section.dtext.start   ;Get pointer to the start of dText
    16 00000021 488B3D(BC010000)    <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    17 00000028 4881C7[811A0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of dText
    18 0000002F 4839F7              <1>     cmp rdi, rsi 
    19 00000032 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    20 00000034 B9E1110000          <1>     mov ecx, (dosLen + 7)/8
    21 00000039 F348A5              <1>     rep movsq
    22                              <1> skipDOSReloc:
    23                              <1> ;------------------------------------------------;
    24                              <1> ;           Sanitise the data area               ;
    25                              <1> ;------------------------------------------------;
    26                              <1> ; This call initialises ALL fields in the DOS    ;
    27                              <1> ; data area with 0's. Thus any fields, which     ;
    28                              <1> ; need to be initialised with a 0 value, are     ;
    29                              <1> ; initialised for free.                          ;
    30                              <1> ;------------------------------------------------;
    31 0000003C 488B3D(BC010000)    <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    32 00000043 B9[811A0000]        <1>     mov ecx, dSegLen
    33 00000048 30C0                <1>     xor al, al
    34 0000004A F3AA                <1>     rep stosb   ;and sanitise away!
    35                              <1> ;------------------------------------------------;
    36                              <1> ;          Kernel inits and adjustments          ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;Adjust Interrupt Entries Int 00h-15h
    39                              <1> ;Assumes rbp points to DOSSEG
    40 0000004C 0F010D(B2010000)    <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    41                              <1> adjExceptions:
    42 00000053 488D3D(60000000)    <1>     lea rdi, exceptData
    43 0000005A 31C0                <1>     xor eax, eax             ;Start with interrupt 0
    44 0000005C B915000000          <1>     mov ecx, 21
    45 00000061 E8DB090000          <1>     call setupInterruptBlock
    46                              <1> ;Adjust Interrupt Entries Int 20h-2Fh
    47                              <1> adjInts:
    48 00000066 488D3D(10010000)    <1>     lea rdi, intData
    49 0000006D B820000000          <1>     mov eax, 20h            ;Start with interrupt 20h
    50 00000072 B930000000          <1>     mov ecx, 30h
    51 00000077 E8C5090000          <1>     call setupInterruptBlock
    52                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    53                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    54                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    55                              <1> ;
    56                              <1> ;------------------------------------------------;
    57                              <1> ;          Driver Adjustments and inits          ;
    58                              <1> ;------------------------------------------------;
    59                              <1> ;Modify the pointers in nData before putting them in the data area
    60 0000007C 48012D(9A010000)    <1>     add qword [nData + drvHdr.strPtr], rbp
    61 00000083 48012D(A2010000)    <1>     add qword [nData + drvHdr.intPtr], rbp
    62                              <1> ;Copy the Null driver header to its location in Sysvars
    63 0000008A B922000000          <1>     mov ecx, drvHdr_size
    64 0000008F 488D35(90010000)    <1>     lea rsi, qword [nData]
    65 00000096 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    66 0000009D F3A4                <1>     rep movsb   
    67                              <1> 
    68                              <1> ;Adjust the addresses in the other driver headers 
    69 0000009F 488B35(D1010000)    <1>     mov rsi, qword [OEMDRVCHAIN]
    70 000000A6 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    71                              <1> adjDrivers:
    72                              <1> ;Input: rsi = Effective address of driver in DOS segment
    73                              <1> ;       rbp = Ptr to the start of the DOS segment
    74                              <1> ;Output: rsi = EA of next header in DOS segment
    75 000000AD 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    76 000000B1 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    77 000000B5 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    78 000000BC 7408                <1>     je short .exit
    79 000000BE 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    80 000000C1 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    81 000000C4 EBE7                <1>     jmp short adjDrivers
    82                              <1> .exit:
    83                              <1> ;------------------------------------------------;
    84                              <1> ;                   MCB inits                    ;
    85                              <1> ;------------------------------------------------;
    86                              <1> makeMCBChain:
    87                              <1> ;Fill in Anchor MCB first
    88 000000C6 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
    89 000000CD 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
    90 000000D4 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
    91 000000D7 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
    92 000000DD C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
    93 000000E0 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
    94 000000E6 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
    94 000000EE 000000              <1>
    95 000000F1 C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
    96                              <1> 
    97 000000F8 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
    98 000000FF 488905(C4010000)    <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
    99 00000106 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
    99 0000010B [33000000]          <1>
   100                              <1> 
   101 0000010F 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   102 00000110 E8(67030000)        <1>     call OEMMCBINIT ;Build MCB chain, kernel drvs can allocate... undoc :)
   103 00000115 5D                  <1>     pop rbp
   104 00000116 0F82(19060000)      <1>     jc OEMHALT
   105                              <1> ;------------------------------------------------;
   106                              <1> ;             Set Default Time/Date              ;
   107                              <1> ;------------------------------------------------;
   108 0000011C C685[8E040000]01    <1>     mov byte [rbp + dayOfMonth], 01     ;Set 1st of Jan
   109 00000123 C685[8F040000]01    <1>     mov byte [rbp + monthOfYear], 01
   110                              <1> ;------------------------------------------------;
   111                              <1> ;              Kernel Driver inits               ;
   112                              <1> ;------------------------------------------------;
   113                              <1> kernDrvInit:
   114                              <1>     ;rbp and fs point to DOSSEG
   115                              <1>     ;Set the CON pointer and the CLOCK pointers.
   116                              <1>     ;The standard defines that kernel drivers are such that the 
   117                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   118                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   119                              <1>     ;GET/SET TIME and GET/SET DATE
   120 0000012A 488B35(D1010000)    <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   121 00000131 4889F3              <1>     mov rbx, rsi
   122 00000134 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   123 0000013B 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   124 0000013E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   125 00000141 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   126 00000144 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   127 0000014B 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   128 0000014E 488D1D(E5010000)    <1>     lea rbx, initDrvBlk
   129                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   130 00000155 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   130 0000015D 000000              <1>
   131                              <1> .init:
   132 00000160 E829080000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   133 00000165 0F82(19060000)      <1>     jc OEMHALT
   134 0000016B E8E8060000          <1>     call addDriverMarkers   ;Preserves all registers
   135 00000170 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   136 00000176 750B                <1>     jnz short .notMSD
   137 00000178 E87F080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   138 0000017D 0F82(19060000)      <1>     jc OEMHALT
   139                              <1> .notMSD:
   140 00000183 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   141 00000186 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   142 0000018D 75D1                <1>     jne short .init ;If not, goto next driver
   143                              <1> ;Finally, Eject the init routine if so desired by the implementers
   144 0000018F 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   145 00000196 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   146 0000019D E89B070000          <1>     call ejectKernelInit
   147 000001A2 0F82(19060000)      <1>     jc OEMHALT
   148                              <1> ;----------------------------------------:
   149                              <1> ;           End of driver inits.         :
   150                              <1> ;----------------------------------------:
   151                              <1> ;
   152                              <1> ;----------------------------------------:
   153                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   154                              <1> ;      So called the OEM BIOS INIT       :
   155                              <1> ;----------------------------------------:
   156                              <1> ;
   157                              <1> ;----------------------------------------:
   158                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   159                              <1> ;----------------------------------------:
   160                              <1> ;
   161                              <1> ;------------------------------------------------;
   162                              <1> ;     Set up general PSP areas and DOS vars      ;
   163                              <1> ;------------------------------------------------;
   164                              <1> ;Ensure to link the default DOS vCON edit key
   165                              <1> ; controller routines before proceeding
   166 000001A8 488D85[F02B0000]    <1>     lea rax, qword [rbp + editKeys]
   167 000001AF 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   167 000001B4 [32000000]          <1>
   168                              <1> 
   169                              <1> ;Additional DOS Vars init and fixups
   170 000001B8 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   170 000001C0 FF                  <1>
   171 000001C1 6466C70425-         <1>     mov word fs:[currentNdx], -1    ;Has to be -1 initially
   171 000001C6 [3A070000]FFFF      <1>
   172 000001CC 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   172 000001D4 00                  <1>
   173 000001D5 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   173 000001DD 00                  <1>
   174 000001DE 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   174 000001E6 2F                  <1>
   175 000001E7 488DBD[44650000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   176 000001EE 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   176 000001F3 [12020000]          <1>
   177 000001F7 4801AD[D6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   178 000001FE 4801AD[DF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   179 00000205 4801AD[E8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   180 0000020C 4801AD[F1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   181                              <1> 
   182                              <1> ;Server Table setup
   183 00000213 488DBD[8F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   184 0000021A 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   184 0000021F [E2190000]          <1>
   185                              <1> 
   186                              <1> ;Set network machine name to... nothing!
   187 00000223 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   188 0000022A B910000000          <1>     mov ecx, 10h    ;16 chars long
   189 0000022F B020                <1>     mov al, SPC ;Space char
   190 00000231 F3AA                <1>     rep stosb   ;Fill with space chars
   191                              <1> 
   192                              <1> ;Patch Data Table init
   193 00000233 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   194 0000023A 488D85[D0740000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   195 00000241 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   196 00000243 488D85[DA740000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   197 0000024A 48AB                <1>     stosq
   198 0000024C 488D85[E4740000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   199 00000253 48AB                <1>     stosq
   200 00000255 488D85[EE740000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   201 0000025C 48AB                <1>     stosq
   202                              <1> 
   203                              <1> ;Initial PSP pointer fields
   204 0000025E 488D1D(24020000)    <1>     lea rbx, qword [tempPSP]
   205 00000265 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   205 0000026A [1F040000]          <1>
   206 0000026E 53                  <1>     push rbx
   207 0000026F 4881C380000000      <1>     add rbx, psp.dta
   208 00000276 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   208 0000027B [17040000]          <1>
   209 0000027F 5B                  <1>     pop rbx
   210 00000280 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   211 00000284 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   212 00000288 4889DA              <1>     mov rdx, rbx
   213 0000028B B822350000          <1>     mov eax, 3522h  ;Get pointer for Int 22h in rbx
   214 00000290 CD21                <1>     int 21h
   215 00000292 48895A0A            <1>     mov qword [rdx + psp.oldInt22h], rbx
   216 00000296 B823350000          <1>     mov eax, 3523h
   217 0000029B CD21                <1>     int 21h
   218 0000029D 48895A12            <1>     mov qword [rdx + psp.oldInt23h], rbx
   219 000002A1 B824350000          <1>     mov eax, 3524h
   220 000002A6 CD21                <1>     int 21h
   221 000002A8 48895A1A            <1>     mov qword [rdx + psp.oldInt24h], rbx
   222                              <1> ;------------------------------------------------;
   223                              <1> ;              Setup DOSMGR Hooks                ;
   224                              <1> ;------------------------------------------------;   
   225 000002AC 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   226 000002B3 488D85[E87C0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   227 000002BA 48AB                <1>     stosq   ;Store ptr for LaunchTask
   228 000002BC 48AB                <1>     stosq   ;Store ptr for TerminateTask
   229                              <1> ;------------------------------------------------;
   230                              <1> ;              Setup DLLMGR Hooks                ;
   231                              <1> ;------------------------------------------------;   
   232 000002BE 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   233 000002C5 488D85[E87C0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   234 000002CC 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   235 000002CE 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   236                              <1> ;------------------------------------------------;
   237                              <1> ;               Setup Share Hooks                ;
   238                              <1> ;------------------------------------------------;
   239 000002D0 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   240 000002D7 488D9D[E87C0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   241 000002DE 488D85[E27C0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   242 000002E5 48AB                <1>     stosq   ;Store bad for openFileCheck
   243 000002E7 4893                <1>     xchg rax, rbx
   244 000002E9 48AB                <1>     stosq   ;Store good for open
   245 000002EB 48AB                <1>     stosq   ;Store good for close
   246 000002ED 4893                <1>     xchg rax, rbx
   247                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   248 000002EF B905000000          <1>     mov ecx, 5
   249 000002F4 F348AB              <1>     rep stosq
   250 000002F7 4893                <1>     xchg rax, rbx
   251 000002F9 48AB                <1>     stosq   ;Store good for check file lock exists
   252 000002FB 4893                <1>     xchg rax, rbx
   253                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   254 000002FD B903000000          <1>     mov ecx, 3
   255 00000302 F348AB              <1>     rep stosq
   256 00000305 4893                <1>     xchg rax, rbx
   257 00000307 48AB                <1>     stosq   ;Store good for close dup file share
   258 00000309 4893                <1>     xchg rax, rbx
   259 0000030B 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   260 0000030D 48AB                <1>     stosq   ;Store bad for update dir information
   261                              <1> 
   262                              <1> ;Finish by setting up internal DOS vars from OEM passed arguments.
   263 0000030F 0FB605(D0010000)    <1>     movzx eax, byte [OEMBIOS]
   264 00000316 85C0                <1>     test eax, eax
   265 00000318 741B                <1>     jz short skipOEMName
   266 0000031A 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   267 00000321 48B8494F0000000000- <1>     mov rax, "IO"
   267 0000032A 00                  <1>
   268 0000032B 488906              <1>     mov qword [rsi], rax
   269 0000032E C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   270                              <1> skipOEMName:
   271 00000335 8B05(E1010000)      <1>     mov eax, dword [OEMVERSION]
   272 0000033B 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   273                              <1> 
   274 00000341 488B05(D9010000)    <1>     mov rax, qword [OEMPTR]
   275 00000348 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   276                              <1> 
   277 0000034F 0FB605(CE010000)    <1>     movzx eax, byte [DFLTDRIVE]
   278 00000356 31DB                <1>     xor ebx, ebx
   279 00000358 3D19000000          <1>     cmp eax, 25
   280 0000035D 0F47C3              <1>     cmova eax, ebx
   281 00000360 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   282                              <1> 
   283 00000366 0FB605(CC010000)    <1>     movzx eax, byte [FILES]
   284 0000036D BB14000000          <1>     mov ebx, filesDefault
   285 00000372 3D05000000          <1>     cmp eax, 5
   286 00000377 0F42C3              <1>     cmovb eax, ebx
   287 0000037A 3DFE000000          <1>     cmp eax, 254
   288 0000037F 0F47C3              <1>     cmova eax, ebx
   289 00000382 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   290                              <1> 
   291 00000388 0FB605(CD010000)    <1>     movzx eax, byte [BUFFERS]
   292 0000038F BB1E000000          <1>     mov ebx, buffersDefault
   293 00000394 85C0                <1>     test eax, eax
   294 00000396 0F44C3              <1>     cmovz eax, ebx
   295 00000399 3D63000000          <1>     cmp eax, 99
   296 0000039E 0F47C3              <1>     cmova eax, ebx
   297 000003A1 8805(CD010000)      <1>     mov byte [BUFFERS], al
   298                              <1> 
   299 000003A7 0FB605(CF010000)    <1>     movzx eax, byte [LASTDRIVE]
   300 000003AE BB05000000          <1>     mov ebx, lastDriveDeflt
   301 000003B3 39D8                <1>     cmp eax, ebx
   302 000003B5 0F42C3              <1>     cmovb eax, ebx
   303 000003B8 3D19000000          <1>     cmp eax, 25
   304 000003BD 0F47C3              <1>     cmova eax, ebx
   305 000003C0 8805(CF010000)      <1>     mov byte [LASTDRIVE], al
   306 000003C6 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   307                              <1> 
   308                              <1> ;------------------------------------------------;
   309                              <1> ;          Find largest sector size              ;
   310                              <1> ;------------------------------------------------;
   311                              <1> sectorSizeSearch:
   312                              <1> ;Done by reading DPB's for each drive
   313 000003CC 31C0                <1>     xor eax, eax
   314 000003CE 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   314 000003D3 [3B000000]          <1>
   315                              <1>     ;Go thru each block individually
   316                              <1> .findLargest:
   317 000003D7 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   318 000003DB 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   319 000003E0 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   320 000003E4 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   321 000003EB 75EA                <1>     jne short .findLargest  ;If not, keep checking
   322 000003ED 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   322 000003F2 [5B000000]          <1>
   323                              <1> ;------------------------------------------------;
   324                              <1> ;                CDS array inits                 ;
   325                              <1> ;------------------------------------------------;
   326 000003F6 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   327 000003FD E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   328 00000402 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   329                              <1> makeCDSArray:
   330                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   331                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   332                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   333 00000407 B85F000000          <1>     mov eax, cds_size
   334 0000040C F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   335 0000040E 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   336 00000413 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   337 00000416 31DB                <1>     xor ebx, ebx
   338 00000418 89C3                <1>     mov ebx, eax
   339 0000041A B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   340 0000041F CD21                <1>     int 21h
   341                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000421 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000423 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   342 00000424 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   343 00000427 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   344 0000042D C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   345 00000431 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   346                              <1> 
   347 00000439 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   347 0000043E [65000000]          <1>
   348 00000442 57                  <1>     push rdi
   349 00000443 51                  <1>     push rcx
   350 00000444 89C8                <1>     mov eax, ecx
   351 00000446 B95F000000          <1>     mov ecx, cds_size
   352 0000044B F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   353 0000044D 89C1                <1>     mov ecx, eax
   354 0000044F 31C0                <1>     xor eax, eax
   355 00000451 F3AA                <1>     rep stosb
   356 00000453 59                  <1>     pop rcx
   357 00000454 5F                  <1>     pop rdi
   358 00000455 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   358 0000045A [3B000000]          <1>
   359 0000045E B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   360                              <1> .tempCDS:
   361 00000463 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   362 00000465 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   363 00000469 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   364 00000470 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   365 00000476 31D2                <1>     xor edx, edx    ;Use edx for flags
   366 00000478 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   367 0000047F 7409                <1>     je .skipValidCDS
   368 00000481 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   369 00000486 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   370                              <1> .skipValidCDS:
   371 0000048A 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   372 0000048E FFC0                <1>     inc eax ;Increment the drive letter
   373 00000490 4881C75F000000      <1>     add rdi, cds_size   ;Goto next array entry
   374 00000497 FFC9                <1>     dec ecx
   375 00000499 75C8                <1>     jnz .tempCDS
   376 0000049B C3                  <1>     ret
   377                              <1> initialCDSWritten:
   378                              <1> ;------------------------------------------------;
   379                              <1> ;        Create a Default Temporary Buffer       ;
   380                              <1> ;------------------------------------------------;
   381 0000049C 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   381 000004A1 [5B000000]          <1>
   382 000004A5 81C320000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   383 000004AB 81C30F000000        <1>     add ebx, 0Fh
   384 000004B1 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   385 000004B4 B800480000          <1>     mov eax, 4800h
   386 000004B9 CD21                <1>     int 21h
   387 000004BB 0F82(19060000)      <1>     jc OEMHALT
   388 000004C1 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   388 000004C6 [5D000000]          <1>
   389 000004CA 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   390 000004D1 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   391 000004D7 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   392 000004DD 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   393 000004E5 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   394                              <1> ;------------------------------------------------;
   395                              <1> ;          Default File Handle Creation          ;
   396                              <1> ;                                                ;
   397                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   398                              <1> ;------------------------------------------------;
   399                              <1> defaultFileHandles:
   400 000004E9 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   401 000004F0 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   401 000004F5 [43000000]          <1>
   402 000004F9 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   403 00000500 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   404                              <1> ;Select default drive here so openStreams doesnt fail!
   405 00000506 0FB695[10000000]    <1>     movzx edx, byte [rbp + bootDrive]    ;Get the default drive
   406 0000050D B40E                <1>     mov ah, 0Eh ;Select drive
   407 0000050F CD21                <1>     int 21h
   408                              <1> 
   409 00000511 E8E5020000          <1>     call openStreams
   410 00000516 0F82(19060000)      <1>     jc OEMHALT
   411                              <1> ;------------------------------------------------;
   412                              <1> ;             Print Welcome Message              ;
   413                              <1> ;------------------------------------------------;
   414 0000051C 488D15(00000000)    <1>     lea rdx, strtmsg
   415 00000523 B409                <1>     mov ah, 09h
   416 00000525 CD21                <1>     int 21h    
   417                              <1> ;------------------------------------------------;
   418                              <1> ;               Load CONFIG.SYS                  ;
   419                              <1> ;------------------------------------------------;
   420                              <1> ;Setup stackframe, workout base 
   421 00000527 55                  <1>     push rbp
   422 00000528 4889E5              <1>     mov rbp, rsp
   423 0000052B 4881EC68000000      <1>     sub rsp, cfgFrame_size
   424 00000532 0FB605(CD010000)    <1>     movzx eax, byte [BUFFERS]
   425 00000539 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   426 0000053D 0FB605(CC010000)    <1>     movzx eax, byte [FILES]
   427 00000544 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   428 00000548 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   429 00000550 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   430 00000558 0FB605(CF010000)    <1>     movzx eax, byte [LASTDRIVE]
   431 0000055F 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   432                              <1> 
   433 00000563 488D15(49000000)    <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   434 0000056A B43D                <1>     mov ah, 3Dh ;Open file for reading
   435 0000056C B000                <1>     mov al, ReadAccess
   436 0000056E CD21                <1>     int 21h
   437 00000570 7212                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   438 00000572 E810050000          <1>     call configParse ;Else, parse the config file
   439                              <1> ;Config.sys mightve made changes to files. Update DOS!
   440 00000577 0FB605(CC010000)    <1>     movzx eax, byte [FILES]
   441 0000057E 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   442                              <1> ;------------------------------------------------;
   443                              <1> ;   Setup Final Data Areas With Overrides from   ;
   444                              <1> ;                  CONFIG.SYS                    ;
   445                              <1> ;------------------------------------------------;
   446                              <1> ;Add additional buffers.
   447                              <1> ;Add additional SFT entries.
   448                              <1> ;Add additional FCBS.
   449                              <1> ;Create a larger CDS if needed.
   450                              <1> noCfg:
   451                              <1> ;Start with buffers:
   452 00000584 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
   453 00000588 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
   454 0000058E 0F849D000000        <1>     je .skipBuffers
   455 00000594 FFC9                <1>     dec ecx  ;Minus one now
   456 00000596 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   457                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   458 0000059E 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
   458 000005A3 [5B000000]          <1>
   459 000005A7 0520000000          <1>     add eax, bufferHdr_size ;eax has the size to add
   460 000005AC 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
   461 000005AD F7E1                <1>     mul ecx ;Get total size to allocate in eax
   462 000005AF 5A                  <1>     pop rdx     ;and get the total value back in rdx
   463 000005B0 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
   464 000005B2 81C30F000000        <1>     add ebx, 0Fh
   465 000005B8 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
   466 000005BB B800480000          <1>     mov eax, 4800h  ;ALLOC
   467 000005C0 CD21                <1>     int 21h
   468 000005C2 726D                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
   469                              <1>     ;Each buffer has no flags, drive number must be -1
   470 000005C4 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
   471 000005C7 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
   472 000005CA 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
   473 000005D0 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   474 000005D8 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
   475 000005DC 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
   475 000005E1 [5D000000]          <1>
   476 000005E5 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
   477 000005E8 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   478 000005EB 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   479 000005ED FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
   480 000005EF 67E321              <1>     jecxz .lastBuffer
   481                              <1> .bufferLoop:
   482 000005F2 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   483 000005F5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   484 000005F8 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   485 000005FE 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   486 00000602 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   487 00000605 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   488 00000608 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   489 0000060C 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   490 0000060F FFC9                <1>     dec ecx
   491 00000611 75DF                <1>     jnz .bufferLoop
   492                              <1> .lastBuffer:
   493 00000613 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   494 00000616 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   495 0000061D 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   496 00000623 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   497 00000627 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   498 0000062A 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   499 0000062D 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   500                              <1> .skipBuffers:
   501                              <1> ;Now build a new SFT header for the number of files specified by user
   502 00000631 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
   503 00000635 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   504 0000063B 7663                <1>     jbe short .skipSFT
   505                              <1>     ;First compute how big this new arena needs to be
   506 0000063D 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
   507 00000643 B84F000000          <1>     mov eax, sft_size
   508 00000648 F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   509 0000064A 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   510 0000064F 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   511 00000651 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   512 00000657 C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   513 0000065A B800480000          <1>     mov eax, 4800h
   514 0000065F CD21                <1>     int 21h
   515 00000661 723D                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
   516 00000663 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
   516 00000668 [43000000]          <1>
   517 0000066C 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
   518 0000066F 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
   519 00000673 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
   520 0000067A 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   521 00000680 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   522 00000688 C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
   523                              <1>     ;Point rdi to first sft in this arena
   524 0000068C 488D781A            <1>     lea rdi, qword [rax + sfth_size + mcb_size]
   525                              <1> .initExtraSFTs:
   526 00000690 66C7070000          <1>     mov word [rdi], 0
   527 00000695 4881C74F000000      <1>     add rdi, sft_size   ;Goto next SFT
   528 0000069C FFC9                <1>     dec ecx
   529 0000069E 75F0                <1>     jnz .initExtraSFTs  ;Remember uop hybridisation (don't use loop)
   530                              <1> .skipSFT:
   531                              <1> ;FCBS now
   532 000006A0 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
   533 000006A4 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
   534 000006A7 B84F000000          <1>     mov eax, sft_size
   535 000006AC F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   536 000006AE 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   537 000006B3 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   538 000006B5 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   539 000006BB C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   540 000006BE B800480000          <1>     mov eax, 4800h
   541 000006C3 CD21                <1>     int 21h
   542 000006C5 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
   543 000006C7 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
   543 000006CC [6D000000]          <1>
   544 000006D0 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
   545 000006D4 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
   546 000006DB 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   547 000006E1 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   548 000006E9 C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
   549                              <1> .skipFCBS:
   550                              <1> ;And CDS now
   551 000006ED 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
   552 000006F1 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
   553 000006F9 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
   554                              <1>     ;Else, we first free the old CDS and then reallocate
   555 000006FB 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
   555 00000700 [65000000]          <1>
   556 00000704 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
   557 00000709 CD21                <1>     int 21h
   558 0000070B 720D                <1>     jc short .skipCDS
   559 0000070D 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   560 00000715 E8EDFCFFFF          <1>     call makeCDSArray
   561                              <1> .skipCDS:
   562 0000071A 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   563 0000071D 5D                  <1>     pop rbp ;Stack frame no longer needed
   564                              <1> ;Now we close all five default handles and open AUX, CON and PRN
   565                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
   566 0000071E 31DB                <1>     xor ebx, ebx
   567                              <1> closeHandlesLoop:
   568 00000720 B8003E0000          <1>     mov eax, 3e00h  ;Close
   569 00000725 CD21                <1>     int 21h
   570 00000727 FFC3                <1>     inc ebx ;Goto next handle
   571 00000729 81FB06000000        <1>     cmp ebx, 6
   572 0000072F 75EF                <1>     jne closeHandlesLoop
   573 00000731 E8C5000000          <1>     call openStreams
   574                              <1> l1:
   575 00000736 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
   576 0000073B B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
   577 00000740 CD21                <1>     int 21h         ;Malloc and get pointer in rbx
   578 00000742 0F828D000000        <1>     jc badMem
   579 00000748 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
   580 0000074B 4881EB10000000      <1>     sub rbx, mcb_size
   581 00000752 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   582 0000075A 488905(D1010000)    <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
   583 00000761 4C8D05(24020000)    <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
   584 00000768 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
   585                              <1>     ;Input: r8 = PSP
   586                              <1>     ;       r9 = Memory Arena Pointer
   587                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
   588 0000076B E8(5D060000)        <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
   589 00000770 720E                <1>     jc short l2 
   590 00000772 4C8B05(D1010000)    <1>     mov r8, qword [OEMMEMPTR]
   591 00000779 B800490000          <1>     mov eax, 4900h  ;Free the memory block
   592 0000077E CD21                <1>     int 21h
   593                              <1> l2:
   594                              <1> ;Load Shell now
   595 00000780 488D153E000000      <1>     lea rdx, initBadRet
   596 00000787 B822250000          <1>     mov eax, 2522h  ;Setup the return address if the top level process dies
   597 0000078C CD21                <1>     int 21h
   598                              <1> 
   599 0000078E 488D1D(04020000)    <1>     lea rbx, cmdBlock
   600 00000795 488D35(24020000)    <1>     lea rsi, tempPSP
   601 0000079C 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
   602 000007A0 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   603 000007A4 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
   604 000007A8 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   605 000007AC 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
   606 000007B3 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
   607 000007B7 488D15(54000000)    <1>     lea rdx, cmdSpec
   608 000007BE B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
   609 000007C3 CD21                <1>     int 21h
   610                              <1> initBadRet:
   611 000007C5 488D15(16000000)    <1>     lea rdx, badCom
   612 000007CC B409                <1>     mov ah, 09h ;Print message
   613 000007CE CD21                <1>     int 21h
   614                              <1> hltLbl:
   615 000007D0 F4                  <1>     hlt
   616 000007D1 F390                <1>     pause
   617 000007D3 EBFB                <1>     jmp short hltLbl
   618                              <1> badMem:
   619 000007D5 488D1509000000      <1>     lea rdx, memErr
   620 000007DC B800090000          <1>     mov eax, 0900h
   621 000007E1 CD21                <1>     int 21h
   622 000007E3 EBEB                <1>     jmp short hltLbl
   623 000007E5 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
   623 000007EE 6D6F7279204572726F- <1>
   623 000007F7 720A0D24            <1>
   624                              <1> 
   625                              <1> openStreams:
   626                              <1> ;If this returns with CF=CY, an error occured.
   627 000007FB 488D15(41000000)    <1>     lea rdx, auxName
   628 00000802 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
   629 00000807 CD21                <1>     int 21h
   630                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000809 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000080B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   631 0000080C 89C3                <1>     mov ebx, eax
   632 0000080E B903000000          <1>     mov ecx, 3  ;
   633 00000813 B800460000          <1>     mov eax, 4600h  ;DUP2
   634 00000818 CD21                <1>     int 21h
   635                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000081A 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   636 0000081C B8003E0000          <1>     mov eax, 3e00h
   637 00000821 CD21                <1>     int 21h ;Close the original handle
   638                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000823 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   639 00000825 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   640 0000082A 488D15(3D000000)    <1>     lea rdx, conName
   641 00000831 CD21                <1>     int 21h
   642                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000833 72D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   643 00000835 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   644 00000837 B800450000          <1>     mov eax, 4500h  ;DUP
   645 0000083C CD21                <1>     int 21h
   646                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000083E 72CB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   647 00000840 B800450000          <1>     mov eax, 4500h  ;DUP
   648 00000845 CD21                <1>     int 21h
   649                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000847 72C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   650 00000849 488D15(45000000)    <1>     lea rdx, prnName
   651 00000850 B8023D0000          <1>     mov eax, 3D02h
   652 00000855 CD21                <1>     int 21h       ;Open file
   653                              <1>     return
    13                              <2> %%_ret:
    14 00000857 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> 
   655                              <1> addDriverMarkers:
   656                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
   657                              <1> ; information and owner to each memory block. Used for drivers that allocate
   658                              <1> ; their own memory using ALLOC.
   659                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
   660                              <1> ;       fs -> Dos Data Area
   661                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
   662                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
   663                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
   664 00000858 50                  <1>     push rax
   665 00000859 53                  <1>     push rbx
   666 0000085A 51                  <1>     push rcx
   667 0000085B 56                  <1>     push rsi
   668 0000085C 57                  <1>     push rdi
   669 0000085D 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
   670 00000864 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
   671 0000086B B844000000          <1>     mov eax, mcbSubDriver
   672 00000870 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
   673 00000875 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
   674 0000087C 0F44C3              <1>     cmove eax, ebx
   675 0000087F EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
   676                              <1> .checkSubsystem:
   677 00000881 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
   678 00000885 7512                <1>     jne short .gotoNextBlock
   679 00000887 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
   680 0000088A 39D8                <1>     cmp eax, ebx
   681 0000088C 0F45C3              <1>     cmovne eax, ebx
   682 0000088F 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
   683 00000893 7504                <1>     jne short .gotoNextBlock
   684 00000895 C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
   685                              <1> .gotoNextBlock:
   686 00000899 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   687 0000089C 7415                <1>     je short .exit
   688 0000089E 31C9                <1>     xor ecx, ecx
   689 000008A0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   690 000008A3 48C1E104            <1>     shl rcx, 4
   691 000008A7 4881C610000000      <1>     add rsi, mcb.program    
   692 000008AE 4801CE              <1>     add rsi, rcx
   693 000008B1 EBCE                <1>     jmp short .checkSubsystem
   694                              <1> .exit:
   695 000008B3 5F                  <1>     pop rdi
   696 000008B4 5E                  <1>     pop rsi
   697 000008B5 59                  <1>     pop rcx
   698 000008B6 5B                  <1>     pop rbx
   699 000008B7 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 000008B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> 
   703                              <1> convertBPBArray:
   704                              <1> ;rsi -> BPB array
   705                              <1> ;rbp -> Space for cl consecutive DPB's
   706                              <1> ;rdi -> Driver header
   707                              <1> ;cl = Number of BPBs to process
   708                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
   709 000008B9 E852000000          <1>     call .findLastDPB
   710 000008BE 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
   711                              <1> .buildNext:
   712 000008C1 56                  <1>     push rsi
   713 000008C2 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
   714 000008C5 B453                <1>     mov ah, 53h ;Build DPB
   715 000008C7 CD21                <1>     int 21h
   716 000008C9 5E                  <1>     pop rsi
   717 000008CA 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
   717 000008CF [77000000]          <1>
   718 000008D3 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
   719 000008D6 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
   720 000008DE 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
   721 000008E1 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
   722 000008E5 FEC5                <1>     inc ch  ;Goto next unit number
   723 000008E7 38E9                <1>     cmp cl, ch  ;When equal, exit!
   724 000008E9 7414                <1>     jz short .exit
   725 000008EB 488D4535            <1>     lea rax, qword [rbp + dpb_size]
   726 000008EF 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   727 000008F3 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
   728 000008F6 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
   729 000008FD EBC2                <1>     jmp short .buildNext
   730                              <1> .exit:
   731                              <1>     ;Now set next DPB as -1 i.e end of chain!
   732 000008FF 31C0                <1>     xor eax, eax
   733 00000901 48FFC8              <1>     dec rax
   734 00000904 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   735 00000908 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
   736 0000090F C3                  <1>     ret
   737                              <1> .findLastDPB:
   738                              <1> ;Finds the last DPB and links the next DPB to it
   739 00000910 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   739 00000915 [3B000000]          <1>
   740 00000919 4885C0              <1>     test rax, rax
   741 0000091C 7415                <1>     jz short .first 
   742                              <1> .lp:
   743 0000091E 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
   744 00000926 7406                <1>     je short .lastFound
   745 00000928 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
   746 0000092C EBF0                <1>     jmp short .lp   ;And go again
   747                              <1> .lastFound:
   748 0000092E 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
   749 00000932 C3                  <1>     ret
   750                              <1> .first:
   751                              <1> ;If this is the first DPB array, set the dpbHeadPtr
   752 00000933 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
   752 00000938 [3B000000]          <1>
   753 0000093C C3                  <1>     ret
   754                              <1> 
   755                              <1> ejectKernelInit:
   756                              <1> ;Reallocates the space allocated to the driver file after 
   757                              <1> ; init was called.
   758                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
   759                              <1> ;       r8 -> Points to the mcb header for reallocation
   760                              <1> ;Uses the sysinit init drive block. 
   761                              <1> ;rax, rbx, rflags trashed
   762                              <1> ;If returns CF=CY, error in reallocation.
   763 0000093D 53                  <1>     push rbx
   764 0000093E 488D1D(E5010000)    <1>     lea rbx, initDrvBlk
   765 00000945 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
   766 00000949 5B                  <1>     pop rbx
   767                              <1>     ;If this endptr is zero or -1 ignore it. 
   768                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
   769 0000094A 4885C0              <1>     test rax, rax
   770                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000094D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000094F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   771 00000950 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
   772                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000953 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   773 00000955 48FFC8              <1>     dec rax ;Return to original value
   774 00000958 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
   775 0000095E 48C1E804            <1>     shr rax, 4
   776 00000962 48C1E004            <1>     shl rax, 4
   777 00000966 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
   778 00000969 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
   779 0000096B 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
   780 00000972 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
   781 00000974 4981C010000000      <1>     add r8, mcb.program ;Goto program
   782 0000097B C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
   783 0000097E 29D8                <1>     sub eax, ebx
   784 00000980 89C3                <1>     mov ebx, eax
   785 00000982 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
   786 00000987 CD21                <1>     int 21h
   787 00000989 4158                <1>     pop r8
   788                              <1>     return
    13                              <2> %%_ret:
    14 0000098B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> .exit:
   790 0000098C F8                  <1>     clc ;Make sure to clear the CF flag before returning
   791                              <1>     return
    13                              <2> %%_ret:
    14 0000098D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> initDriver:
   794                              <1> ;Initialises one driver and adjusts the DOS data appropriately
   795                              <1> ;If on return CF=CY then the driver didnt want to be loaded
   796                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
   797                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
   798                              <1> ; arguments are to be passed to the driver
   799                              <1> ;Input: rsi -> driver pointer
   800                              <1> ;       rbx -> sysinit request pointer
   801                              <1> ;       rbp -> DOSSEG pointer
   802 0000098E C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   803 00000991 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
   804 00000995 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
   805 0000099B 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
   806 000009A1 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
   807                              <1>     ;Protect the important registers. All others trashable
   808 000009A4 53                  <1>     push rbx
   809 000009A5 56                  <1>     push rsi
   810 000009A6 55                  <1>     push rbp
   811 000009A7 FF560A              <1>     call qword [rsi + drvHdr.strPtr]
   812 000009AA FF5612              <1>     call qword [rsi + drvHdr.intPtr]
   813 000009AD 5D                  <1>     pop rbp
   814 000009AE 5E                  <1>     pop rsi
   815 000009AF 5B                  <1>     pop rbx
   816                              <1>     ;Check if a driver wants to not load.
   817                              <1>     ;If a kernel driver wants to stop, halt boot.
   818 000009B0 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
   819 000009B6 750C                <1>     jnz short .errExit
   820 000009B8 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
   821 000009BC 7508                <1>     jne short .notHalt
   822 000009BE 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
   823 000009C2 7502                <1>     jne short .notHalt
   824                              <1> .errExit:
   825 000009C4 F9                  <1>     stc
   826 000009C5 C3                  <1>     ret
   827                              <1> .notHalt:
   828                              <1>     ;Now check if the drivers were con/clock before exiting
   829 000009C6 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
   830 000009CA 66250300            <1>     and ax, devDrvConIn | devDrvConOut
   831 000009CE 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
   832 000009D0 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
   833 000009D4 7507                <1>     jne short .checkClock
   834 000009D6 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
   835                              <1> .checkClock:
   836 000009DD 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
   837 000009E3 7407                <1>     jz short .notClock
   838 000009E5 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
   839                              <1> .notClock:
   840                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
   841 000009EC 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   842                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000009F2 7599                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   843                              <1>     ;Else, store the number of units as reported live by driver
   844 000009F4 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
   845 000009F8 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
   846 000009FB C3                  <1>     ret
   847                              <1> 
   848                              <1> buildDPBs:
   849                              <1>     ;Here we specially handle MSD drivers, building DPBs
   850                              <1>     ;If return with CF=CY, fail. Else, all done and setup
   851                              <1>     ;Input: rbx -> Points to sysinit request packet
   852                              <1>     ;       rsi -> Driver header
   853                              <1>     ;       rbp -> DOSSEG pointer
   854                              <1>     ;Preserves those registers
   855 000009FC 53                  <1>     push rbx
   856 000009FD 55                  <1>     push rbp
   857 000009FE 56                  <1>     push rsi
   858 000009FF 57                  <1>     push rdi
   859 00000A00 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
   860 00000A03 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
   861 00000A07 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
   862 00000A0B B835000000          <1>     mov eax, dpb_size
   863 00000A10 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
   864 00000A12 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
   865 00000A17 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   866 00000A1A 89C3                <1>     mov ebx, eax
   867 00000A1C B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
   868 00000A21 CD21                <1>     int 21h
   869 00000A23 7219                <1>     jc short .badExit
   870 00000A25 4889C5              <1>     mov rbp, rax    
   871 00000A28 C640FD50            <1>     mov byte [rax + mcb.subSysMark - mcb_size], mcbSubDrvDPB  ;Set DPB marker
   872 00000A2C 48C740F108000000    <1>     mov qword [rax + mcb.owner - mcb_size], mcbOwnerDOS    ;Set DOS owner
   873                              <1>     ;rsi -> Ptr to BPB
   874                              <1> 	;rbp -> Ptr to buffer to hold first DPB
   875                              <1>     ;rdi -> Ptr to the driver header
   876 00000A34 E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
   877                              <1> .exit:
   878 00000A39 5F                  <1>     pop rdi
   879 00000A3A 5E                  <1>     pop rsi
   880 00000A3B 5D                  <1>     pop rbp
   881 00000A3C 5B                  <1>     pop rbx
   882                              <1>     return
    13                              <2> %%_ret:
    14 00000A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   883                              <1> .badExit:
   884 00000A3E F9                  <1>     stc
   885 00000A3F EBF8                <1>     jmp short .exit
   886                              <1> 
   887                              <1> setupInterruptBlock:
   888                              <1> ;Sets up a block of interrupts with pointers provided in a table
   889                              <1> ;Input:
   890                              <1> ; al = Start interrupt
   891                              <1> ; rdi -> Start of pointer table
   892                              <1> ; cl = Last interrupt + 1
   893                              <1> ;Assumes rbp points to DOSSEG
   894 00000A41 0FB6C0              <1>     movzx eax, al
   895 00000A44 0FB6C9              <1>     movzx ecx, cl
   896                              <1> .lp:
   897 00000A47 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   898 00000A4A 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   899 00000A4D E80E000000          <1>     call writeIDTEntry
   900 00000A52 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
   901 00000A59 FFC0                <1>     inc eax     ;Goto next interrupt number
   902 00000A5B 39C8                <1>     cmp eax, ecx
   903 00000A5D 75E8                <1>     jne .lp
   904                              <1>     return
    13                              <2> %%_ret:
    14 00000A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> 
   906                              <1> writeIDTEntry:
   907                              <1> ;Writes the interrupt in the right place in the table
   908                              <1>     ;al = Interrupt number
   909                              <1>     ;rbx -> Handler to install
   910 00000A60 50                  <1>     push rax
   911 00000A61 53                  <1>     push rbx
   912 00000A62 0FB6C0              <1>     movzx eax, al
   913 00000A65 4893                <1>     xchg rbx, rax
   914 00000A67 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
   915 00000A6B 48031D(B4010000)    <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
   916 00000A72 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
   917 00000A75 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   918 00000A79 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
   919 00000A7D 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   920 00000A81 894308              <1>     mov dword [rbx + 8], eax
   921 00000A84 5B                  <1>     pop rbx
   922 00000A85 58                  <1>     pop rax
   923 00000A86 C3                  <1>     ret
    22                                  %include "./src/Sysinit/cfginit.asm"
     1                              <1> ;------------------------------------------------;
     2                              <1> ;              Process CONFIG.SYS                ;
     3                              <1> ;------------------------------------------------;
     4                              <1> ;Create a stack frame with the following order.
     5                              <1> ;Values greater than max are set to max. Values less than min are set to min.
     6                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
     7                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
     8                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
     9                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
    10                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
    11                              <1> ;
    12                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
    13                              <1> ;-------------------------------------------------------------------------;
    14                              <1> ; CONFIG.SYS processing pseudocode:-
    15                              <1> ;
    16                              <1> ; _START:
    17                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
    18                              <1> ; If (EOF encountered)
    19                              <1> ;   Insert a terminating ^Z to the end of the line. 
    20                              <1> ;   Close handle.
    21                              <1> ; Parse the line from beginning looking for a DOS terminating char.
    22                              <1> ;   If (CR or EOF encoutered before terminating char)
    23                              <1> ;       Bad line error msg. 
    24                              <1> ;       If (CR encountered)
    25                              <1> ;           Goto _START
    26                              <1> ;       Else
    27                              <1> ;           Goto _EXIT
    28                              <1> ;   Else 
    29                              <1> ;       If (Keyword AND not DEVICE) 
    30                              <1> ;           Store it's value on stack or change internal variable value
    31                              <1> ;       If (DEVICE)
    32                              <1> ;           Move endPtr after end of line and try load the driver.
    33                              <1> ;           If (driver doesn't exist or fails to init)
    34                              <1> ;               print bad driver error msg.
    35                              <1> ;       Else 
    36                              <1> ;           Bad line error msg
    37                              <1> ;       If (line terminated by CR)
    38                              <1> ;           Goto _START
    39                              <1> ; _EXIT:
    40                              <1> ;-------------------------------------------------------------------------;
    41                              <1> ; Note:
    42                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
    43                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
    44                              <1> ;   adjust the memory pointer and start loading next line.
    45                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
    46                              <1> ;   data structures according to the values on the stack frame.
    47                              <1> ;-------------------------------------------------------------------------;
    48                              <1> ;Start CONFIG.SYS parsing here
    49                              <1> configParse:
    50 00000A87 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
    51 00000A8B 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
    52 00000A93 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
    53 00000A9B B800480000          <1>     mov eax, 4800h
    54 00000AA0 BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
    55 00000AA5 CD21                <1>     int 21h
    56 00000AA7 0F825A010000        <1>     jc .stopProcessError
    57 00000AAD 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
    58 00000AB1 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
    59 00000AB4 482D10000000        <1>     sub rax, mcb_size 
    60 00000ABA 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
    61 00000AC2 31C0                <1>     xor eax, eax
    62                              <1> .nextChar:
    63 00000AC4 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
    64 00000AC8 6681FBFFFF          <1>     cmp bx, -1
    65 00000ACD 0F8434010000        <1>     je .stopProcessError
    66 00000AD3 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
    67 00000AD8 B901000000          <1>     mov ecx, 1  ;Read one byte
    68 00000ADD CD21                <1>     int 21h
    69 00000ADF 0F8222010000        <1>     jc .stopProcessError
    70 00000AE5 85C0                <1>     test eax, eax	;If this is zero, EOF reached, take command
    71 00000AE7 741B                <1>     jz .endOfFile
    72                              <1> .notEOF:
    73 00000AE9 0FB602              <1>     movzx eax, byte [rdx]
    74 00000AEC 3C0D                <1>     cmp al, CR
    75 00000AEE 741F                <1>     je short .endOfLine
    76 00000AF0 3C0A                <1>     cmp al, LF
    77 00000AF2 7418                <1>     je short .endOfLineChange   ;Continue, but replace with standard EOL char (CR)
    78 00000AF4 3C1A                <1>     cmp al, EOF
    79 00000AF6 740C                <1>     je short .endOfFile
    80 00000AF8 E8B4070000          <1>     call .ucChar    ;Uppercase the char
    81 00000AFD 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
    82                              <1> .notChar:
    83 00000AFF 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
    84 00000B02 EBC0                <1>     jmp short .nextChar
    85                              <1> .endOfFile:
    86 00000B04 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
    87                              <1> .endOfLineChange:
    88 00000B0C C6020D              <1>     mov byte [rdx], CR  ;Store a terminating char at the end of the command
    89                              <1> .endOfLine:
    90                              <1> ;rdx points to terminating char
    91                              <1> ;First find the length of the instruction word
    92 00000B0F 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
    93                              <1> ;If this is a 1 char line, skip processing (as it is CR), and goto next line
    94 00000B13 4839F2              <1>     cmp rdx, rsi
    95 00000B16 7473                <1>     je .cmdPrepNew
    96 00000B18 E8D2000000          <1>     call .skipSeparators  ;Skip any standard leading separators
    97 00000B1D 31C9                <1>     xor ecx, ecx
    98                              <1> .cmdNameLenGet:
    99 00000B1F AC                  <1>     lodsb
   100 00000B20 E8B6000000          <1>     call .isCharSeparator
   101 00000B25 740A                <1>     jz short .endOfCommandFound
   102 00000B27 FFC1                <1>     inc ecx
   103 00000B29 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   104 00000B2F 72EE                <1>     jb short .cmdNameLenGet
   105                              <1> ;Else, fall through in error
   106                              <1> .endOfCommandFound:
   107                              <1> ;ecx has the length of the command
   108 00000B31 81F90A000000        <1>     cmp ecx, 10
   109 00000B37 0F84C0000000        <1>     je .badLineHandle
   110 00000B3D 488D3D66010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   111                              <1> .cmdSearch:
   112 00000B44 803FFF              <1>     cmp byte [rdi], -1
   113 00000B47 0F84B0000000        <1>     je .badLineHandle
   114 00000B4D 380F                <1>     cmp byte [rdi], cl
   115 00000B4F 757A                <1>     jne short .gotoNextCmd
   116                              <1>     ;Candidate command found, check said command is the command we want
   117 00000B51 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   118 00000B55 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   119 00000B5C 0F84A5000000        <1>     je .stopProcessError
   120 00000B62 57                  <1>     push rdi
   121 00000B63 51                  <1>     push rcx
   122 00000B64 48FFC7              <1>     inc rdi ;Go to next char
   123 00000B67 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   124 00000B69 59                  <1>     pop rcx
   125 00000B6A 5F                  <1>     pop rdi
   126 00000B6B 755E                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   127                              <1>     ;Else, rdi points to the table entry from the head of the table
   128                              <1>     ;      rcx has the length of the name field
   129                              <1>     ;rdx points to the terminating char of the line 
   130 00000B6D 488D3536010000      <1>     lea rsi, .keyTbl
   131 00000B74 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   132 00000B77 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   133 00000B7D 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   134 00000B80 F8                  <1>     clc ;Ensure flags are happy before entering
   135 00000B81 55                  <1>     push rbp
   136 00000B82 FFD6                <1>     call rsi    ;Call this function
   137 00000B84 5D                  <1>     pop rbp
   138 00000B85 0F8281000000        <1>     jc .stopProcessErrorNoPrint    ;If the function returns CF=CY, error exit
   139                              <1> .cmdPrepNew:
   140 00000B8B 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   141 00000B93 0F8501070000        <1>     jnz .cfgExit
   142 00000B99 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   143                              <1>     ;Read the next char. 
   144                              <1>     ;If EOF, exit.
   145                              <1>     ;Else if, LF, proceed to read line routine.
   146                              <1>     ;Else, advance ptr by one and proceed to process char
   147                              <1> .endCommandClear:
   148 00000B9D 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   149 00000BA1 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   150 00000BA6 B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   151 00000BAB CD21                <1>     int 21h
   152 00000BAD 7258                <1>     jc .stopProcessError
   153 00000BAF 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   154 00000BB1 0F84E3060000        <1>     jz .cfgExit
   155                              <1>     ;Do a trash check
   156 00000BB7 8A02                <1>     mov al, byte [rdx]
   157 00000BB9 3C1A                <1>     cmp al, EOF
   158 00000BBB 0F84D9060000        <1>     je .cfgExit
   159 00000BC1 3C0A                <1>     cmp al, LF
   160 00000BC3 0F84FBFEFFFF        <1>     je .nextChar
   161 00000BC9 EBD2                <1>     jmp short .endCommandClear  ;Loop out trailing spaces, crap chars and CR
   162                              <1> ;CONFIG.SYS utility functions
   163                              <1> .gotoNextCmd:
   164 00000BCB 0FB607              <1>     movzx eax, byte [rdi]
   165 00000BCE 0503000000          <1>     add eax, 3
   166 00000BD3 4801C7              <1>     add rdi, rax
   167 00000BD6 E969FFFFFF          <1>     jmp .cmdSearch
   168                              <1> .isCharSeparator:
   169                              <1> ;Input: AL = Char to check
   170                              <1> ;Output: ZF=ZE -> Char terminal
   171                              <1> ;        ZF=NZ -> Char not terminal
   172 00000BDB 3C3D                <1>     cmp al, "="
   173                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000BDD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000BDF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   174 00000BE0 3C20                <1>     cmp al, SPC
   175                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BE2 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00000BE4 3C09                <1>     cmp al, TAB
   177                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BE6 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   178 00000BE8 3C3B                <1>     cmp al, ";"
   179                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BEA 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   180 00000BEC 3C2C                <1>     cmp al, ","
   181                              <1>     return
    13                              <2> %%_ret:
    14 00000BEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> .skipSeparators:
   183                              <1> ;Input: rsi -> Start of string
   184                              <1> ;Output: rsi -> First non-terminator char after string of terminators
   185 00000BEF 50                  <1>     push rax
   186                              <1> .stl1:
   187 00000BF0 AC                  <1>     lodsb   ;Get char
   188 00000BF1 E8E5FFFFFF          <1>     call .isCharSeparator    ;Is it terminal?
   189 00000BF6 74F8                <1>     jz .stl1    ;Yes, keep going
   190 00000BF8 58                  <1>     pop rax
   191 00000BF9 48FFCE              <1>     dec rsi
   192                              <1>     return
    13                              <2> %%_ret:
    14 00000BFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> .badLineHandle:
   195                              <1> ;If the command was unrecognised, goto next line! Do not halt!
   196 00000BFD E84B000000          <1>     call .badLineErrorMsg
   197 00000C02 E984FFFFFF          <1>     jmp  .cmdPrepNew
   198                              <1> 
   199                              <1> .stopProcessError:
   200                              <1> ;Print the hard error message and reset the system values
   201 00000C07 E836000000          <1>     call .hardErrorMsg
   202                              <1> .stopProcessErrorNoPrint:
   203                              <1> ;Reset all values to OEM defaults
   204 00000C0C 0FB605(CD010000)    <1>     movzx eax, byte [BUFFERS]
   205 00000C13 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   206 00000C17 0FB605(CC010000)    <1>     movzx eax, byte [FILES]
   207 00000C1E 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   208 00000C22 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   209 00000C2A 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   210 00000C32 0FB605(CF010000)    <1>     movzx eax, byte [LASTDRIVE]
   211 00000C39 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   212 00000C3D E958060000          <1>     jmp .cfgExit
   213                              <1> .hardErrorMsg:
   214                              <1> ;Prints an error message and TERMINATE parsing
   215 00000C42 50                  <1>     push rax
   216 00000C43 52                  <1>     push rdx
   217 00000C44 488D1515000000      <1>     lea rdx, .hdLine
   218 00000C4B EB09                <1>     jmp short .errorCmn
   219                              <1> .badLineErrorMsg:
   220                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   221 00000C4D 50                  <1>     push rax
   222 00000C4E 52                  <1>     push rdx
   223 00000C4F 488D152D000000      <1>     lea rdx, .speLine
   224                              <1> .errorCmn:
   225 00000C56 B800090000          <1>     mov eax, 0900h
   226 00000C5B CD21                <1>     int 21h
   227 00000C5D 5A                  <1>     pop rdx
   228 00000C5E 58                  <1>     pop rax
   229                              <1>     return
    13                              <2> %%_ret:
    14 00000C5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230 00000C60 0D0A4572726F722069- <1> .hdLine:    db CR,LF,"Error in processing CONFIG.SYS",CR,LF,"$"
   230 00000C69 6E2070726F63657373- <1>
   230 00000C72 696E6720434F4E4649- <1>
   230 00000C7B 472E5359530D0A24    <1>
   231 00000C83 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   231 00000C8C 6E6973656420636F6D- <1>
   231 00000C95 6D616E6420696E2043- <1>
   231 00000C9E 4F4E4649472E535953- <1>
   231 00000CA7 0D0A24              <1>
   232                              <1> .keyTbl: 
   233 00000CAA 05425245414B        <1>     db 5, "BREAK"           ;DONE
   234 00000CB0 6300                <1> 	dw .breakHandler - .keyTbl
   235 00000CB2 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   236 00000CBA 9900                <1> 	dw .bufHandler - .keyTbl
   237 00000CBC 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   238 00000CC4 EE05                <1> 	dw .countryScan - .keyTbl
   239 00000CC6 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   240 00000CCD 2001                <1> 	dw .drvLoader - .keyTbl
   241 00000CCF 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   242 00000CD4 EE05                <1> 	dw .fcbHandler - .keyTbl
   243 00000CD6 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   244 00000CDC 6B04                <1> 	dw .sftHandler - .keyTbl
   245 00000CDE 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   245 00000CE7 45                  <1>
   246 00000CE8 2E05                <1> 	dw .lastdriveHandler - .keyTbl
   247 00000CEA 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   248 00000CF0 7A05                <1> 	dw .shellHandler - .keyTbl
   249 00000CF2 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   250 00000CF9 EE05                <1> 	dw .stacksHandler - .keyTbl
   251 00000CFB 08445249565041524D  <1>     db 8, "DRIVPARM"
   252 00000D04 EE05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   253                              <1>     ;The following three are to not cause issues with empty lines/EOF chars
   254 00000D06 0352454D            <1>     db 3, "REM"
   255 00000D0A EE05                <1>     dw .comment - .keyTbl
   256 00000D0C FF                  <1> 	db -1	;End of table marker
   257                              <1> 
   258                              <1> .breakHandler:
   259 00000D0D 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   260 00000D11 4881C605000000      <1>     add rsi, 5  ;Go past BREAK
   261                              <1>     ;This must be the word ON or OFF 
   262 00000D18 E8D2FEFFFF          <1>     call .skipSeparators
   263 00000D1D 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   264 00000D1F 66813E4F4E          <1>     cmp word [rsi], "ON"
   265 00000D24 7413                <1>     je .breakOn
   266 00000D26 66813E4F46          <1>     cmp word [rsi], "OF"
   267 00000D2B 7506                <1>     jne .breakBad
   268 00000D2D 807E0246            <1>     cmp byte [rsi + 2], "F"
   269 00000D31 7408                <1>     je .breakCommon
   270                              <1> .breakBad:
   271 00000D33 E815FFFFFF          <1>     call .badLineErrorMsg
   272                              <1>     return
    13                              <2> %%_ret:
    14 00000D38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   273                              <1> .breakOn:
   274 00000D39 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   275                              <1> .breakCommon:
   276 00000D3B B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   277 00000D40 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00000D42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> .bufHandler:
   281 00000D43 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   282 00000D47 4881C607000000      <1>     add rsi, 7  ;Go past BUFFERS=
   283                              <1>     ;This must be at most three digits, anything else is a failure
   284 00000D4E E89CFEFFFF          <1>     call .skipSeparators
   285 00000D53 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   286 00000D56 31C9                <1>     xor ecx, ecx
   287 00000D58 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   288 00000D59 3C30                <1>     cmp al, "0"
   289 00000D5B 7256                <1>     jb .bufHandlerErr
   290 00000D5D 3C39                <1>     cmp al, "9"
   291 00000D5F 7752                <1>     ja .bufHandlerErr
   292 00000D61 FFC1                <1>     inc ecx ;Increment char counter
   293 00000D63 AC                  <1>     lodsb   ;Get second char
   294 00000D64 E850000000          <1>     call .bufHandlerTermCheck
   295 00000D69 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   296 00000D6B 3C30                <1>     cmp al, "0"
   297 00000D6D 7244                <1>     jb .bufHandlerErr
   298 00000D6F 3C39                <1>     cmp al, "9"
   299 00000D71 7740                <1>     ja .bufHandlerErr
   300 00000D73 AC                  <1>     lodsb   ;Check no more chars!
   301 00000D74 E840000000          <1>     call .bufHandlerTermCheck
   302 00000D79 7538                <1>     jne .bufHandlerErr
   303                              <1> .bufHandlerProcess:
   304 00000D7B 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   305 00000D7D 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   306                              <1> .bufHandlerLp:
   307 00000D80 AC                  <1>     lodsb   ;Get the digit
   308 00000D81 2C30                <1>     sub al, "0" ;Convert to ASCII
   309 00000D83 0FB6C0              <1>     movzx eax, al
   310 00000D86 67E30E              <1>     jecxz .bufHandlerPrepExit   ;Exit if this is the only digit
   311 00000D89 D1E0                <1>     shl eax, 1  ;Multiply by 2
   312 00000D8B 678D1480            <1>     lea edx, dword [4*eax + eax]    ;Multiply (2*eax) by 5
   313 00000D8F AC                  <1>     lodsb   ;Get the next digit
   314 00000D90 2C30                <1>     sub al, "0"
   315 00000D92 0FB6C0              <1>     movzx eax, al
   316 00000D95 01D0                <1>     add eax, edx    ;Add the tens to the unit
   317                              <1> .bufHandlerPrepExit:
   318 00000D97 0FB60D(CD010000)    <1>     movzx ecx, byte [BUFFERS]
   319 00000D9E 85C0                <1>     test eax, eax
   320 00000DA0 0F44C1              <1>     cmovz eax, ecx  ;Replace zero with default if the user specified 0 buffers
   321 00000DA3 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   322 00000DA7 F8                  <1>     clc
   323                              <1>     return
    13                              <2> %%_ret:
    14 00000DA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .bufHandlerMul:
   325 00000DA9 2C30                <1>     sub al, "0" ;Convert to a binary value
   326 00000DAB F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   327 00000DAD 0FB7C0              <1>     movzx eax, ax
   328 00000DB0 01C2                <1>     add edx, eax
   329                              <1>     return
    13                              <2> %%_ret:
    14 00000DB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   330                              <1> .bufHandlerErr:
   331 00000DB3 E895FEFFFF          <1>     call .badLineErrorMsg
   332                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> .bufHandlerTermCheck:
   334 00000DB9 3C20                <1>     cmp al, SPC
   335                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DBB 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 00000DBD 3C09                <1>     cmp al, TAB
   337                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DBF 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   338 00000DC1 3C0D                <1>     cmp al, CR
   339                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DC3 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   340 00000DC5 3C0A                <1>     cmp al, LF
   341                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DC7 74EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     return
    13                              <2> %%_ret:
    14 00000DC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> 
   344                              <1> ;===============================
   345                              <1> ;   Device Driver Loader here  :
   346                              <1> ;===============================
   347                              <1> .drvLoader:
   348 00000DCA 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   349 00000DCE 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE= to the pathname
   350 00000DD5 E815FEFFFF          <1>     call .skipSeparators
   351 00000DDA 4889F7              <1>     mov rdi, rsi
   352 00000DDD 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   353                              <1> ;Now search for the first char after pathname. 
   354                              <1> .drvFindEndOfFileName:
   355 00000DE0 AC                  <1>     lodsb ;Get char from string name
   356                              <1>     ;Was the char a primitive string terminator?
   357 00000DE1 3C20                <1>     cmp al, SPC
   358 00000DE3 740C                <1>     je short .fileNameFound
   359 00000DE5 3C1A                <1>     cmp al, EOF
   360 00000DE7 7408                <1>     je short .fileNameFound
   361 00000DE9 3C0D                <1>     cmp al, CR
   362 00000DEB 7404                <1>     je short .fileNameFound
   363 00000DED 3C0A                <1>     cmp al, LF
   364 00000DEF 75EF                <1>     jne short .drvFindEndOfFileName
   365                              <1> .fileNameFound:
   366 00000DF1 48FFCE              <1>     dec rsi ;Point rsi to the space itself
   367 00000DF4 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   368 00000DF8 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   369 00000DFB 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   370 00000DFF C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   371                              <1>     ;rdx -> Filename
   372                              <1>     ;Here open the file to attempt to see how much space to 
   373                              <1>     ; allocate to the file for loading. 
   374                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   375                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   376                              <1>     ; which would allow for opening of files independently of calling programs'
   377                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   378 00000E02 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   379 00000E07 CD21                <1>     int 21h
   380 00000E09 0F82CA020000        <1>     jc .drvBad
   381 00000E0F 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   382 00000E12 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   383 00000E14 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   384 00000E19 CD21                <1>     int 21h
   385 00000E1B 89C6                <1>     mov esi, eax    ;Save the file size in esi
   386 00000E1D 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   387 00000E1F B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   388 00000E24 CD21                <1>     int 21h
   389 00000E26 53                  <1>     push rbx        ;Push the file handle on the stack
   390 00000E27 BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   391 00000E2C B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   392 00000E31 CD21                <1>     int 21h
   393 00000E33 5B                  <1>     pop rbx         ;Get the handle back in rbx
   394 00000E34 0F82AF020000        <1>     jc .drvMemClose
   395 00000E3A 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   396 00000E3D B940000000          <1>     mov ecx, imageDosHdr_size
   397 00000E42 B8003F0000          <1>     mov eax, 3F00h  ;READ
   398 00000E47 CD21                <1>     int 21h
   399 00000E49 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   400 00000E4C 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   401 00000E4F 730C                <1>     jnc short .headerReadOK
   402                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   403                              <1>     ;r8 must point to the block to free
   404 00000E51 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   405 00000E56 CD21                <1>     int 21h
   406 00000E58 E975020000          <1>     jmp .drvBadClose
   407                              <1> .headerReadOK:
   408                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   409 00000E5D 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   410                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   411 00000E60 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   412 00000E65 7430                <1>     je short .exeDrivers
   413 00000E67 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   414 00000E6C 7429                <1>     je short .exeDrivers
   415                              <1> ;.COM drivers come down here
   416                              <1>     ;Get File Image Allocation Size in ecx here.
   417                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   418 00000E6E 31C9                <1>     xor ecx, ecx
   419 00000E70 31D2                <1>     xor edx, edx
   420 00000E72 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   421 00000E77 CD21                <1>     int 21h
   422                              <1>     ;eax now has the filesize. 
   423 00000E79 89C1                <1>     mov ecx, eax
   424 00000E7B 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   425 00000E81 81C101000000        <1>     add ecx, 1h     ;... and round up!
   426 00000E87 C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   427 00000E8A 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   428 00000E90 73BF                <1>     jae .drvFreeMemAndHdl
   429 00000E92 E97C000000          <1>     jmp .loadCont
   430                              <1> .exeDrivers:
   431                              <1>     ;Get the file pointer for file header
   432 00000E97 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   433 00000E9A 31C9                <1>     xor ecx, ecx
   434 00000E9C B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   435 00000EA1 CD21                <1>     int 21h
   436                              <1>     ;Now read in imageFileHeader here
   437 00000EA3 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   438 00000EA6 B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   439 00000EAB B8003F0000          <1>     mov eax, 3F00h  ;READ
   440 00000EB0 CD21                <1>     int 21h
   441 00000EB2 729D                <1>     jc short .drvFreeMemAndHdl
   442 00000EB4 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   443 00000EB9 7296                <1>     jb short .drvFreeMemAndHdl
   444 00000EBB 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   445 00000EC1 758E                <1>     jne .drvFreeMemAndHdl
   446 00000EC3 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   447 00000EC9 7586                <1>     jne .drvFreeMemAndHdl
   448 00000ECB 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   449 00000ED1 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   450                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   451 00000ED7 B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   452 00000EDC B8003F0000          <1>     mov eax, 3F00h  ;READ
   453 00000EE1 CD21                <1>     int 21h
   454 00000EE3 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   455 00000EE9 3D38000000          <1>     cmp eax, 56
   456 00000EEE 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   457                              <1>     ;Round up size requirement.
   458                              <1>     ;If .EXE, round up to nearest section alignment
   459 00000EF4 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   460 00000EF7 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   461 00000EFA 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   462 00000EFC FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   463 00000EFE F7D0                <1>     not eax         ;Flip the set and clear bits
   464 00000F00 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   465 00000F02 01F1                <1>     add ecx, esi    ;Now round upwards!
   466 00000F04 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   467 00000F07 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   468 00000F0D 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   469                              <1> .loadCont:
   470 00000F13 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   471 00000F18 CD21                <1>     int 21h ;r8 has the pointer to the block for freeing
   472                              <1>     ;Now close the file
   473 00000F1A B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   474 00000F1F CD21                <1>     int 21h
   475 00000F21 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   476 00000F23 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   477 00000F28 CD21                <1>     int 21h         ;rax gets the pointer to load the program into
   478 00000F2A 0F82B9010000        <1>     jc .drvMemClose
   479                              <1>     ;Now set the subsystem marker and the owner to DOS
   480 00000F30 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   481 00000F34 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   482                              <1>     ;Build the overlay command block
   483 00000F3C 488D1D(04020000)    <1>     lea rbx, cmdBlock
   484 00000F43 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   485 00000F46 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   486 00000F4A 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   487 00000F4E 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE= to the null terminated pathname
   488 00000F55 E895FCFFFF          <1>     call .skipSeparators
   489 00000F5A 4889F2              <1>     mov rdx, rsi
   490 00000F5D B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   491 00000F62 CD21                <1>     int 21h
   492 00000F64 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   493                              <1> .badDriverLoad:
   494 00000F66 4C8B05(04020000)    <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   495 00000F6D B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   496 00000F72 CD21                <1>     int 21h
   497 00000F74 488D1508000000      <1>     lea rdx, .drvMemMsg
   498 00000F7B B800090000          <1>     mov eax, 0900h
   499 00000F80 CD21                <1>     int 21h
   500                              <1>     return
    13                              <2> %%_ret:
    14 00000F82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501 00000F83 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   501 00000F8C 756768206D656D6F72- <1>
   501 00000F95 7920666F7220647269- <1>
   501 00000F9E 7665720D0A24        <1>
   502                              <1> .loadOk:
   503                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   504 00000FA4 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   505 00000FA7 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   506                              <1>     ;Reset the command line to have a space at the null terminator
   507 00000FAA 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   508 00000FAE 53                  <1>     push rbx
   509 00000FAF 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   510 00000FB2 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   511 00000FB4 5B                  <1>     pop rbx
   512                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   513                              <1>     ;Hence, rsi points to that byte!
   514                              <1>     ;Pointers of each header need adjustment relative to their load address,
   515                              <1>     ; and linking into the main driver chain after NUL.
   516                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   517                              <1>     ;                 Else, free using kernel eject routine.
   518 00000FB5 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   519                              <1> .driverPtrAdjustment:
   520 00000FB6 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   521 00000FBA 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   522 00000FBE 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   523 00000FC5 7408                <1>     je short .driverPtrAdjustmentDone
   524 00000FC7 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   525 00000FCA 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   526 00000FCD EBE7                <1>     jmp short .driverPtrAdjustment
   527                              <1> .driverPtrAdjustmentDone:
   528 00000FCF 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   529                              <1>     ;Prepare for initialising the drivers in the arena
   530                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   531 00000FD0 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   532 00000FD3 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   532 00000FDC 00                  <1>
   533 00000FDD 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   533 00000FE2 [1F040000]          <1>
   534 00000FE6 488D1D(E5010000)    <1>     lea rbx, initDrvBlk
   535 00000FED 56                  <1>     push rsi
   536 00000FEE 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   537 00000FF2 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE
   538 00000FF9 E8F1FBFFFF          <1>     call .skipSeparators    ;Go past equals and any following spaces
   539 00000FFE 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi ;and pass to driver!
   540 00001002 5E                  <1>     pop rsi
   541 00001003 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   542                              <1> .driverInit:
   543 00001007 4C87E5              <1>     xchg r12, rbp
   544 0000100A E87FF9FFFF          <1>     call initDriver
   545 0000100F 725E                <1>     jc short .driverBadRbpAdjust
   546 00001011 E842F8FFFF          <1>     call addDriverMarkers
   547 00001016 4C87E5              <1>     xchg r12, rbp
   548 00001019 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   549 0000101F 7507                <1>     jnz short .driverInitialised
   550 00001021 E8D6F9FFFF          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   551 00001026 724A                <1>     jc short .driverBad
   552                              <1> .driverInitialised:
   553 00001028 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   554 0000102F 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   555 00001033 75D2                <1>     jne short .driverInit ;If not, goto next driver
   556                              <1> ;Now we eject the init routines for the driver
   557                              <1> ;r8 points to the MCB data area already
   558 00001035 31DB                <1>     xor ebx, ebx
   559 00001037 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   560 0000103B 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   561 0000103F 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   562 00001046 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   563 0000104B E8EDF8FFFF          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   564                              <1>     ;Link into main driver chain, 
   565                              <1>     ;r9 points to first driver in block
   566                              <1>     ;rsi points to last driver in block
   567 00001050 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   568 00001054 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   569 0000105B 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   570 0000105E 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   571 00001061 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   572                              <1> .driverExit:
   573                              <1> ;Exit the init routine if it all works out, WOO!
   574                              <1> ;Return values to original registers/memory locations
   575 00001064 644C891C25-         <1>     mov qword fs:[currentPSP], r11
   575 00001069 [1F040000]          <1>
   576 0000106D F8                  <1>     clc
   577                              <1>     return
    13                              <2> %%_ret:
    14 0000106E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> .driverBadRbpAdjust:
   579 0000106F 4C89E5              <1>     mov rbp, r12
   580                              <1> .driverBad:
   581                              <1>     ;Form the string to print
   582 00001072 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
   583 00001079 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
   584 0000107F 750C                <1>     jnz short .driverCharBad    ;If not, exit
   585                              <1>     ;MSD devices need to have something placed in there
   586 00001081 48B84D534420646576- <1>     mov rax, "MSD dev "
   586 0000108A 20                  <1>
   587 0000108B 48AB                <1>     stosq   ;Store the 8 chars here
   588                              <1> .driverCharBad:
   589 0000108D 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
   590 00001091 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
   591                              <1> .driverBadPrint:
   592 00001093 488D1510000000      <1>     lea rdx, .driverBad1
   593 0000109A B800090000          <1>     mov eax, 0900h  ;Print the string!
   594 0000109F CD21                <1>     int 21h
   595 000010A1 B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
   596 000010A6 CD21                <1>     int 21h
   597 000010A8 EBBA                <1>     jmp short .driverExit
   598 000010AA 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
   598 000010B3 6E697469616C697369- <1>
   598 000010BC 6E6720647269766572- <1>
   598 000010C5 3A20                <1>
   599 000010C7 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
   599 000010D0 0A24                <1>
   600                              <1> ;------------------
   601                              <1> ;Bad exit cases
   602                              <1> ;------------------
   603                              <1> .drvBadClose:
   604 000010D2 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   605 000010D7 CD21                <1>     int 21h
   606                              <1> .drvBad:
   607 000010D9 488D1519000000      <1>     lea rdx, .drvBadMsg
   608                              <1> .drvBad2:
   609 000010E0 B800090000          <1>     mov eax, 0900h
   610 000010E5 CD21                <1>     int 21h
   611 000010E7 F8                  <1>     clc ;Never return with CF=CY
   612                              <1>     return
    13                              <2> %%_ret:
    14 000010E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .drvMemClose:
   614 000010E9 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   615 000010EE CD21                <1>     int 21h
   616 000010F0 488D158CFEFFFF      <1>     lea rdx, .drvMemMsg
   617 000010F7 EBE7                <1>     jmp short .drvBad2
   618                              <1> 
   619 000010F9 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
   619 00001102 6D697373696E672066- <1>
   619 0000110B 696C656E616D650D0A- <1>
   619 00001114 24                  <1>
   620                              <1> 
   621                              <1> .sftHandler:
   622                              <1> ;This reads the line to set the number of FILE to between 1 and 254
   623 00001115 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   624 00001119 4881C605000000      <1>     add rsi, 5  ;Go past FILES=
   625 00001120 E8CAFAFFFF          <1>     call .skipSeparators
   626                              <1>     ;This must be at most three digits, anything else is a failure
   627 00001125 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   628 00001128 31C9                <1>     xor ecx, ecx
   629 0000112A AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   630 0000112B 3C30                <1>     cmp al, "0"
   631 0000112D 0F828E000000        <1>     jb .sftHandlerErr
   632 00001133 3C39                <1>     cmp al, "9"
   633 00001135 0F8786000000        <1>     ja .sftHandlerErr
   634 0000113B FFC1                <1>     inc ecx ;Increment char counter
   635 0000113D AC                  <1>     lodsb   ;Get second char
   636 0000113E E884000000          <1>     call .sftHandlerTermCheck
   637 00001143 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   638 00001145 3C30                <1>     cmp al, "0"
   639 00001147 7278                <1>     jb .sftHandlerErr
   640 00001149 3C39                <1>     cmp al, "9"
   641 0000114B 7774                <1>     ja .sftHandlerErr
   642 0000114D FFC1                <1>     inc ecx ;Increment char counter
   643 0000114F AC                  <1>     lodsb   ;Get third char
   644 00001150 E872000000          <1>     call .sftHandlerTermCheck
   645 00001155 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   646 00001157 3C30                <1>     cmp al, "0"
   647 00001159 7266                <1>     jb .sftHandlerErr
   648 0000115B 3C39                <1>     cmp al, "9"
   649 0000115D 7762                <1>     ja .sftHandlerErr
   650 0000115F AC                  <1>     lodsb   ;Check no more chars!
   651 00001160 E862000000          <1>     call .sftHandlerTermCheck
   652 00001165 755A                <1>     jne .sftHandlerErr
   653 00001167 FFC1                <1>     inc ecx ;Increment char counter
   654                              <1> .sftHandlerProcess:
   655 00001169 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   656 0000116B 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   657                              <1> .sftHandlerLp:
   658 0000116E FFC9                <1>     dec ecx
   659 00001170 AC                  <1>     lodsb   ;Get the digit
   660 00001171 E823000000          <1>     call .sftHandlerMul
   661 00001176 67E302              <1>     jecxz .sftHandlerPrepExit
   662 00001179 EBF3                <1>     jmp short .sftHandlerLp 
   663                              <1> .sftHandlerPrepExit:
   664                              <1> ;edx has the value now, so place it in stack
   665 0000117B 81FAFE000000        <1>     cmp edx, 254
   666 00001181 773E                <1>     ja .sftHandlerErr       ;DOS maximum number of files
   667 00001183 0FB60D(CC010000)    <1>     movzx ecx, byte [FILES] ;Get default if the user specifies less than min
   668 0000118A 81FA08000000        <1>     cmp edx, 8              ;DOS minimum number of files
   669 00001190 0F42D1              <1>     cmovb edx, ecx
   670 00001193 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
   671 00001197 F8                  <1>     clc
   672                              <1>     return
    13                              <2> %%_ret:
    14 00001198 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> .sftHandlerMul:
   674                              <1> ;Input:
   675                              <1> ;al = digit to add to result (ASCII digit)
   676                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
   677                              <1> ;rdx = Accumulated sum
   678                              <1> ;Output:
   679                              <1> ;rdx = Accumulated sum with al added
   680                              <1> ;eax is destroyed
   681                              <1> ;All other registers preserved
   682 00001199 51                  <1>     push rcx
   683 0000119A 52                  <1>     push rdx
   684 0000119B 0FB6C0              <1>     movzx eax, al
   685 0000119E 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
   686 000011A3 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
   687 000011A8 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
   688 000011AA BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
   689 000011AF B964000000          <1>     mov ecx, 100
   690 000011B4 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
   691 000011B7 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
   692 000011BA F7E3                <1>     mul ebx    ;Multiply the base offset to eax
   693 000011BC 5A                  <1>     pop rdx ;Get the accumulated value back
   694 000011BD 01C2                <1>     add edx, eax    ;Add this result over
   695 000011BF 59                  <1>     pop rcx
   696                              <1>     return
    13                              <2> %%_ret:
    14 000011C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> .sftHandlerErr:
   698 000011C1 E887FAFFFF          <1>     call .badLineErrorMsg
   699                              <1>     return
    13                              <2> %%_ret:
    14 000011C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   700                              <1> .sftHandlerTermCheck:
   701 000011C7 3C20                <1>     cmp al, SPC
   702                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011C9 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   703 000011CB 3C09                <1>     cmp al, TAB
   704                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011CD 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   705 000011CF 3C0D                <1>     cmp al, CR
   706                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011D1 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   707 000011D3 3C0A                <1>     cmp al, LF
   708                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011D5 74EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   709                              <1>     return
    13                              <2> %%_ret:
    14 000011D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> 
   711                              <1> .lastdriveHandler:
   712 000011D8 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   713 000011DC 4881C609000000      <1>     add rsi, 9  ;Go past LASTDRIVE
   714 000011E3 E807FAFFFF          <1>     call .skipSeparators
   715 000011E8 AC                  <1>     lodsb   ;Get this char
   716 000011E9 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
   717 000011EC E8C0000000          <1>     call .ucChar
   718 000011F1 3C5A                <1>     cmp al, "Z"
   719 000011F3 77CC                <1>     ja .sftHandlerErr
   720 000011F5 3C41                <1>     cmp al, "A"
   721 000011F7 72C8                <1>     jb .sftHandlerErr
   722 000011F9 803E0D              <1>     cmp byte [rsi], CR
   723 000011FC 740F                <1>     je .ldProceed
   724 000011FE 803E0A              <1>     cmp byte [rsi], LF
   725 00001201 740A                <1>     je .ldProceed
   726 00001203 803E09              <1>     cmp byte [rsi], TAB
   727 00001206 7405                <1>     je .ldProceed
   728 00001208 803E20              <1>     cmp byte [rsi], SPC
   729 0000120B 75B4                <1>     jne .sftHandlerErr
   730                              <1> .ldProceed:
   731 0000120D 2C40                <1>     sub al, "@"     ;Convert into a number 1-26 
   732 0000120F 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
   733 00001212 0FB615(CF010000)    <1>     movzx edx, byte [LASTDRIVE]
   734 00001219 39D0                <1>     cmp eax, edx
   735 0000121B 0F42C2              <1>     cmovb eax, edx
   736 0000121E 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   737 00001222 F8                  <1>     clc
   738                              <1>     return
    13                              <2> %%_ret:
    14 00001223 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   739                              <1> 
   740                              <1> .shellHandler:
   741 00001224 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   742 00001228 4889F3              <1>     mov rbx, rsi
   743 0000122B 4881C605000000      <1>     add rsi, 5  ;Go past SHELL
   744 00001232 E8B8F9FFFF          <1>     call .skipSeparators    ;Spaces, equals sign etc
   745 00001237 4889F7              <1>     mov rdi, rsi
   746 0000123A 4829DF              <1>     sub rdi, rbx    ;Get the depth into the string we are at
   747 0000123D B980000000          <1>     mov ecx, 128
   748 00001242 29F9                <1>     sub ecx, edi    ;Get remaining valid char count for the string
   749 00001244 4889F7              <1>     mov rdi, rsi
   750 00001247 B80D000000          <1>     mov eax, CR
   751 0000124C F2AE                <1>     repne scasb     ;Scan for the terminator
   752 0000124E 0F85F9F9FFFF        <1>     jne .badLineErrorMsg    ;If we didn't find it, complain!
   753                              <1>     ;Now we know we are safe, proceed with copy.
   754 00001254 488D3D(54000000)    <1>     lea rdi, cmdSpec
   755 0000125B B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
   756 00001260 CD21                <1>     int 21h
   757                              <1> .shLp:
   758 00001262 AC                  <1>     lodsb
   759                              <1>     ;If a sep, a CR or a default switchchar, we are done!
   760 00001263 3C0D                <1>     cmp al, CR
   761 00001265 740E                <1>     je .shSpecDone   
   762 00001267 E86FF9FFFF          <1>     call .isCharSeparator
   763 0000126C 7407                <1>     je .shSpecDone
   764 0000126E 38D0                <1>     cmp al, dl
   765 00001270 7403                <1>     je .shSpecDone
   766 00001272 AA                  <1>     stosb   ;Else store the char!
   767 00001273 EBED                <1>     jmp short .shLp
   768                              <1> .shSpecDone:
   769 00001275 C60700              <1>     mov byte [rdi], 0   ;Now store the null terminator :)
   770 00001278 C605(A4020000)00    <1>     mov byte [tempPSP + psp.dta], 0 ;Reset the count of chars in the tail
   771 0000127F 488D3D(A5020000)    <1>     lea rdi, tempPSP + psp.dta + 1  ;Now store the tail here
   772 00001286 48FFCE              <1>     dec rsi     ;Go back to get the char again
   773                              <1>     ;This will work with CR especially well
   774                              <1> .shTailLp:
   775 00001289 AC                  <1>     lodsb
   776 0000128A 3C0D                <1>     cmp al, CR
   777 0000128C 7409                <1>     je .shAllDone
   778 0000128E AA                  <1>     stosb
   779 0000128F FE05(A4020000)      <1>     inc byte [tempPSP + psp.dta]    ;Inc the char count!
   780 00001295 EBF2                <1>     jmp short .shTailLp
   781                              <1> .shAllDone: ;Only possible to get here is al=CR
   782 00001297 AA                  <1>     stosb   ;Store the terminating CR
   783                              <1> .countryScan:
   784                              <1> .fcbHandler:
   785                              <1> .stacksHandler:
   786                              <1> .drivParm:
   787                              <1> .comment:
   788 00001298 F8                  <1>     clc
   789                              <1>     return
    13                              <2> %%_ret:
    14 00001299 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> 
   791                              <1> .cfgExit:
   792 0000129A 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
   793 0000129E B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
   794 000012A3 CD21                <1>     int 21h ;bx already has the handle
   795 000012A5 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
   796 000012A9 B800490000          <1>     mov eax, 4900h  ;FREE
   797 000012AE CD21                <1>     int 21h
   798                              <1>     return
    13                              <2> %%_ret:
    14 000012B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .ucChar:
   800                              <1> ;Input: al = Char to UC
   801                              <1> ;Output: al = UC'd char
   802 000012B1 53                  <1>     push rbx    ;Save on original stack
   803 000012B2 50                  <1>     push rax    ;Put the word on the stack
   804 000012B3 B813120000          <1>     mov eax, 1213h  ;Uppercase the char in al
   805 000012B8 CD2F                <1>     int 2fh
   806 000012BA 5B                  <1>     pop rbx     ;Pop off the word we placed on the stack
   807 000012BB 5B                  <1>     pop rbx     ;Get back original rbx
   808                              <1>     return
    13                              <2> %%_ret:
    14 000012BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                                  Segment sdata follows=stext align=1 vfollows=stext valign=1
    24                                  ;SYSINIT data segment
    25                                  %include "./src/Sysinit/sysdat.asm" 
     1                              <1> ;--------------------------------
     2                              <1> ;       DATA FOR SYSINIT        :
     3                              <1> ;--------------------------------
     4 00000000 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
     4 00000009 5343502F444F532E2E- <1>
     4 00000012 2E0A0D24            <1>
     5 00000016 0A0D426164206F7220- <1> badCom  db 0Ah,0Dh,"Bad or missing Command interpreter",0Ah,0Dh,"$"
     5 0000001F 6D697373696E672043- <1>
     5 00000028 6F6D6D616E6420696E- <1>
     5 00000031 746572707265746572- <1>
     5 0000003A 0A0D24              <1>
     6 0000003D 434F4E00            <1> conName db "CON",0
     7 00000041 41555800            <1> auxName db "AUX",0
     8 00000045 50524E00            <1> prnName db "PRN",0
     9                              <1> 
    10 00000049 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0   ;ASCIIZ for CONFIG
    10 00000052 5300                <1>
    11 00000054 434F4D4D414E442E43- <1> cmdSpec db "COMMAND.COM",0  ;ASCIIZ FOR COMMAND.COM. Overwrite in SHELL
    11 0000005D 4F4D00              <1>
    12                              <1> exceptData:
    13 00000060 [B167000000000000]  <1>     dq i0
    14 00000068 [B867000000000000]  <1>     dq i1
    15 00000070 [C267000000000000]  <1>     dq i2
    16 00000078 [CC67000000000000]  <1>     dq i3
    17 00000080 [D667000000000000]  <1>     dq i4
    18 00000088 [E067000000000000]  <1>     dq i5
    19 00000090 [E767000000000000]  <1>     dq i6
    20 00000098 [EE67000000000000]  <1>     dq i7
    21 000000A0 [F567000000000000]  <1>     dq i8
    22 000000A8 [FC67000000000000]  <1>     dq i9
    23 000000B0 [0368000000000000]  <1>     dq i10
    24 000000B8 [0A68000000000000]  <1>     dq i11
    25 000000C0 [1168000000000000]  <1>     dq i12
    26 000000C8 [1868000000000000]  <1>     dq i13
    27 000000D0 [1F68000000000000]  <1>     dq i14
    28 000000D8 [2668000000000000]  <1>     dq i15
    29 000000E0 [2D68000000000000]  <1>     dq i16
    30 000000E8 [3468000000000000]  <1>     dq i17
    31 000000F0 [3B68000000000000]  <1>     dq i18
    32 000000F8 [4268000000000000]  <1>     dq i19
    33 00000100 [4968000000000000]  <1>     dq i20
    34 00000108 [5068000000000000]  <1>     dq i21
    35                              <1> 
    36                              <1> intData:
    37 00000110 [7459000000000000]  <1>     dq terminateProcess ;Int 20h
    38 00000118 [4873000000000000]  <1>     dq functionDispatch ;Int 21h
    39 00000120 [1906000000000000]  <1>     dq OEMHALT          ;Int 22h, If sysinit terminates, halt system
    40 00000128 [A074000000000000]  <1>     dq defaultIretq     ;Int 23h, ignore any CTRL+C during init
    41 00000130 [AF6B000000000000]  <1>     dq dosDefCritErrHdlr    ;Int 24h, return fail, CF=CY, leading to OEMHALT
    42 00000138 [886C000000000000]  <1>     dq absDiskRead      ;Int 25h
    43 00000140 [696C000000000000]  <1>     dq absDiskWrite     ;Int 26h
    44 00000148 [7B59000000000000]  <1>     dq terminateRes     ;Int 27h
    45 00000150 [A074000000000000]  <1>     dq defaultIretq     ;Int 28h
    46 00000158 [A074000000000000]  <1>     dq defaultIretq     ;Int 29h
    47 00000160 [A074000000000000]  <1>     dq defaultIretq     ;Int 2Ah
    48 00000168 [A074000000000000]  <1>     dq defaultIretq     ;Int 2Bh
    49 00000170 [A074000000000000]  <1>     dq defaultIretq     ;Int 2Ch
    50 00000178 [A074000000000000]  <1>     dq defaultIretq     ;Int 2Dh
    51 00000180 [A074000000000000]  <1>     dq defaultIretq     ;Int 2Eh
    52 00000188 [EF7B000000000000]  <1>     dq multiplexHdlr    ;Int 2Fh, multiplex default handler
    53                              <1> nData:
    54 00000190 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
    55 00000198 0480                <1>     dw 08004h
    56 0000019A [C86B000000000000]  <1>     dq nulStrat
    57 000001A2 [CE6B000000000000]  <1>     dq nulIntr
    58 000001AA 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
    59                              <1> 
    60                              <1> localIDTpointer: ;Local IDT pointer
    61 000001B2 0000                <1>     .Limit  dw 0
    62 000001B4 0000000000000000    <1>     .Base   dq 0
    63                              <1> 
    64                              <1> ;DOS Data given by OEM
    65 000001BC 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
    66 000001C4 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
    67 000001CC 00                  <1> FILES       db 0    ;Default number of FILES
    68 000001CD 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
    69 000001CE 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
    70 000001CF 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
    71 000001D0 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
    72                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
    73 000001D1 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
    74 000001D9 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
    75 000001E1 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
    76                              <1> 
    77 000001E5 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
    77 000001EE 000000000000000000- <1>
    77 000001F7 000000000000000000- <1>
    77 00000200 00000000            <1>
    78                              <1> cmdBlock:   ;Used also for overlay block for driver loads
    79                              <1>     istruc execProg
    80 00000204 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
    81 0000020C 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
    82 00000214 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
    83 0000021C 0000000000000000    <1>     at execProg.pfcb2,      dq 0
    84                              <1>     iend
    85                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
    86                              <1>     istruc psp
    87 00000224 CD20                <1>     at psp.return,      db 0CDh, 20h
    88 00000226 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
    89 0000022E 0000000000000000    <1>     at psp.oldInt22h,   dq 0
    90 00000236 0000000000000000    <1>     at psp.oldInt23h,   dq 0
    91 0000023E 0000000000000000    <1>     at psp.oldInt24h,   dq 0
    92 00000246 0000000000000000    <1>     at psp.parentPtr,   dq 0
    93 0000024E FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
    93 00000257 FFFFFFFFFFFFFFFFFF- <1>
    93 00000260 FFFF                <1>
    94 00000262 0000000000000000    <1>     at psp.envPtr,      dq 0
    95 0000026A 0000000000000000    <1>     at psp.rspPtr,      dq 0
    96 00000272 1400                <1>     at psp.jftSize,     dw 20 
    97 00000274 CD21C3              <1>     at psp.unixEntry,   db 0CDh, 21h, 0C3h
    98 00000277 0000000000000000    <1>     at psp.prevPSP,     dq 0
    99 0000027F 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
    99 00000288 0000000000000000    <1>
   100 00000290 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
   100 00000299 000000000000000000- <1>
   100 000002A2 0000                <1>
   101                              <1>     ;Dummy cmd line for COMMAND.COM
   102 000002A4 022F500D0000000000- <1>     at psp.dta,         db 2, "/P",CR,123 dup (0)   
   102 000002AD 000000000000000000- <1>
   102 000002B6 000000000000000000- <1>
   102 000002BF 000000000000000000- <1>
   102 000002C8 000000000000000000- <1>
   102 000002D1 000000000000000000- <1>
   102 000002DA 000000000000000000- <1>
   102 000002E3 000000000000000000- <1>
   102 000002EC 000000000000000000- <1>
   102 000002F5 000000000000000000- <1>
   102 000002FE 000000000000000000- <1>
   102 00000307 000000000000000000- <1>
   102 00000310 000000000000000000- <1>
   102 00000319 000000000000000000- <1>
   102 00000322 00                  <1>
   103 00000323 00                  <1>     iend
    26                                  Segment dBSS nobits align=1 start=0
    27                                  ;DOS BSS data segment
    28                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare dq ?  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   dq ?  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   dq ?  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  dq ?  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  dq ?  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  dq ?  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  dq ?  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   dq ?  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare dq ?  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   149 00000141 <res 4Fh>           <1>     firstSft    db sft_size dup (?)
   150 00000190 <res 4Fh>           <1>     secondSft   db sft_size dup (?)
   151 000001DF <res 4Fh>           <1>     thirdSft    db sft_size dup (?)
   152 0000022E <res 4Fh>           <1>     fourthSft   db sft_size dup (?)
   153 0000027D <res 4Fh>           <1>     fifthSft    db sft_size dup (?)
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 db ?  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   207 0000045F ??                  <1>     volIdFlag   db ?    ;If set, we are searching for a volume ID
   208 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   209 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   210 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   211 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   212                              <1> 
   213 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   214 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   215 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   216 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   217 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   218                              <1> ;The below flag tells DOS to print ^C in the termination function
   219 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   220 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   221                              <1> ;Time stuff
   222                              <1> ;Read the below two as a word
   223 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   224 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   225 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   226 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   227 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   228                              <1> 
   229 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   230 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   231 00000496 ??                  <1>     Int24Trans  db ?  ;Set to -1 if Abort translated to Fail
   232                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   233                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   234                              <1> ; without forcing to re-build the whole primary request block.
   235                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   236                              <1> ; with secondary char output going through the secondary header
   237                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   238                              <1> ; for output)
   239                              <1> ;ioReqPkt is the largest possible packet
   240 00000497 <res 2Ah>           <1>     secdReqHdr  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   241 000004C1 <res 2Ah>           <1>     primReqHdr  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   242                              <1> altRet: ;Accessed as a qword
   243 000004EB <res 2Ah>           <1>     critReqHdr  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   244 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   245                              <1> ;Swappable Buffers
   246 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   247                              <1>     ;We add an additional byte to save ah too
   248 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   249                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   250                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   251 0000051E <res 80h>           <1>     buffer1     db 128 dup (?)  ;Space for one path and file name
   252                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   253 0000059E <res 80h>           <1>     buffer2     db 128 dup (?) ;Space for a second path and file name
   254 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   255 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   256 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   257                              <1> ;Misc bookkeeping flags and vars
   258 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   259 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   260 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;Temp CDS for Server calls that need a tmp CDS
   261 000006D9 <res Ch>            <1>     fcbName     db 11+1 dup (?)   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   262 000006E5 <res Ch>            <1>     wcdFcbName  db 11+1 dup (?)  ;Used to expand any wildcards for rename
   263 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   264 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   265 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   266 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   267 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   268 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   269 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   270 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   271 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   272 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   273 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   274                              <1> 
   275 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   276 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   277 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   278 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   279 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   280 00000708 ??                  <1>     delChar     db ?  ;Char to replace first byte of deleted file's name
   281 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   282                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   283                              <1> workingDD:  ;Create a symbol for the working device driver too
   284 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   285 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   286 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   287                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   288                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   289 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   290 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   291 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   292 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   293 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   294 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   295                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   296                              <1> ; and 32 byte offset into the sector for directory
   297 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   298                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   299 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   300                              <1> ;***************************************************|
   301                              <1> ; Needs to be set up before any file access         |
   302                              <1> ; These vars keep track of file access properties   |
   303                              <1> ;   and must be used only for such purposes.        |
   304                              <1> ;***************************************************|
   305 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   306 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   307                              <1> 
   308 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   309 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   310 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   311                              <1> 
   312 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   313 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   314                              <1> ;***************************************************|
   315 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   316 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   317 00000773 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   318 00000777 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   319                              <1> ;Directory stuff
   320 0000077B ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   321 0000077F ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   322 00000783 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   323 00000785 ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   324                              <1> ;Error DPB 
   325 00000789 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   326                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   327                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   328                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   329                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   330                              <1> ; anything anymore.
   331                              <1> haltDOS:
   332 00000791 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   333                              <1>     
   334 00000792 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   335 000007BD <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   336                              <1> ;Stacks and scratch SFT
   337 000007DD ??????              <1>     alignb  8
   338 000007E0 <res 528h>          <1>     critStack   dq 165 dup (?)
   339 00000D08 ????????????????    <1>     critStakTop dq ?
   340                              <1> 
   341 00000D10 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   342                              <1>     
   343 00000D5F ??                  <1>     alignb  8
   344 00000D60 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   345 00001398 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   346 000013A0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   347 000019D8 ????????????????    <1>     DiskStakTop dq ?
   348                              <1> 
   349 000019E0 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   350                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   351 000019E1 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   352                              <1>     sdaLen      equ     $ - sda 
   353                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   354                              <1> 
   355                              <1> ;Additional variables NOT in the SDA
   356 000019E2 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   357 000019EA <res 2Ah>           <1>     bkupReqHdr  db ioReqPkt_size dup (?)  ;A backup header to allow copying to
   358                              <1>     ;for saving the current header when quickly doing a second request
   359                              <1> 
   360                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   361                              <1> inExtASCII:
   362 00001A14 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   363 00001A15 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   364                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   365                              <1>     ; copy of the date/time record
   366                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   367                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   368                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   369                              <1>     ; to the read IDT routine".
   370                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   371 00001A17 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   372 00001A19 ????????????????    <1>     .base   dq ?
   373                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   374                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   375                              <1>     ; were allowed to write to original callers register stack. 
   376                              <1>     ; So we have this structure below that is used by these functions to 
   377                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   378                              <1>     ; through the multiplexer we never will read this structure. 
   379                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   380 00001A21 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   381                              <1>     dSegLen     equ     $
    29                                  Segment dtext follows=sdata align=1 vfollows=dBSS valign=1 
    30                                  ;DOS main data/code seg. No separation, as this is a single binary blob
    31                                  %define currSegVBase section.dtext.vstart
    32                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 98 ;.98
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0062                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic. The table below is NOT patched
    37                              <1> ; but instead, the function below gets replaced. By default, it points to 
    38                              <1> ; the function editKeys in charFunc.asm. 
    39 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    40 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    41 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    42                              <1> ;Extended ASCII keys with special meanings
    43 0000003C 3B                  <1> extKeyTbl   db eF1
    44 0000003D 002B                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    45 0000003F 3C                  <1>             db eF2
    46 00000040 F22A                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    47 00000042 3D                  <1>             db eF3
    48 00000043 F92A                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    49 00000045 3E                  <1>             db eF4
    50 00000046 2E2B                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    51 00000048 3F                  <1>             db eF5
    52 00000049 732B                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    53 0000004B 40                  <1>             db eF6
    54 0000004C 892B                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    55 0000004E 41                  <1>             db eF7
    56 0000004F 902B                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    57 00000051 4B                  <1>             db eCursL
    58 00000052 572A                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    59 00000054 4D                  <1>             db eCursR
    60 00000055 002B                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    61 00000057 52                  <1>             db eIns
    62 00000058 9B2B                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    63 0000005A 53                  <1>             db eDel
    64 0000005B A22B                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    65                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    66                              <1> 
    67                              <1> ;When counting the number of days, first compute the number of years since
    68                              <1> ; 1980 and your year. 
    69                              <1> ;Then, using the table below, find the number of leap years between 1980
    70                              <1> ; and (YourYear - 1). 
    71                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    72                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    73                              <1> ;
    74                              <1> ;Use the months table to get the number of days in a normal month as leap 
    75                              <1> ; years are added using the previous comment.
    76                              <1> 
    77                              <1> ;This table is the number of days in the month
    78                              <1> ;The function which updates the days in Feb writes the number to this table
    79                              <1> monthsTbl:  
    80 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    80 00000066 1F1E1F              <1>
    81                              <1> 
    82                              <1> ;Error tables
    83                              <1> hardXlatTbl:
    84                              <1> ;Hard error xlat table. Used so that it can be patched by 
    85                              <1> ; multitaskers and network tools as opposed to having a static
    86                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    87 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    88 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    89 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    90 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    91 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    92 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    93 0000006F 19                  <1>     db errSekErr    ;Seek error
    94 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    95 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    96 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    97 00000073 1D                  <1>     db errWF        ;Write fault
    98 00000074 1E                  <1>     db errRF        ;Read fault
    99 00000075 1F                  <1>     db errGF        ;General fault
   100                              <1>     ;The following two adjust for share errors
   101 00000076 1F                  <1>     db errGF        ;Sharing violations
   102 00000077 1F                  <1>     db errGF        ;File Lock violation
   103 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   104                              <1> hardXlatTblL equ $ - hardXlatTbl
   105                              <1> errXlatTbl:
   106                              <1> ;Each entry is n bytes long, defined as
   107                              <1> ; Byte 0      : DOS function number for which translation will occur
   108                              <1> ; Byte 1      : Length of the table entry - 2
   109                              <1> ; Bytes n - 3 : Acceptable Error codes
   110                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   111                              <1> ;The table is terminated with a single -1 byte
   112                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   113                              <1> ; only on entry to a disk function
   114 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   115 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   116 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   117 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   118 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   119 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   120 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   121 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   122 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   123 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   124 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   125 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   126 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   127 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   128 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   129 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   130 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   131 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   132 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   133 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   134 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   135 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   136 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   137 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   138 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   139 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   140 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   141 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   142 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   143 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   144 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   145 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   146 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   147 00000114 FF                  <1>     db -1   ;End Of Table marker
   148                              <1> 
   149                              <1> 
   150                              <1> extErrTbl:
   151                              <1> ;This table contains the default values for how to respond
   152                              <1> ; to particular errors. Fields with -1 need to be filled in before
   153                              <1> ; setting variables using this table.
   154                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   155                              <1> ; Byte 0: Extended Error Code as a byte
   156                              <1> ; Byte 1: Error Class
   157                              <1> ; Byte 2: Error Suggested Action
   158                              <1> ; Byte 3: Error Locus
   159                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   160                              <1> ;
   161                              <1> ;Error 01: Invalid function number
   162 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   163                              <1> ;Error 02: File not found
   164 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   165                              <1> ;Error 03: Path not found
   166 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   167                              <1> ;Error 04: Too many open handles, and no handles are left
   168 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   169                              <1> ;Error 05: Access being denied
   170 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   171                              <1> ;Error 06: Invalid File handle being provided
   172 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   173                              <1> ;Error 07: MCB chain destroyed
   174 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   175                              <1> ;Error 08: No Memory remaining
   176 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   177                              <1> ;Error 09: Invalid MCB block Address
   178 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0A: Bad Environment block
   180 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   181                              <1> ;Error 0B: Data provided in a bad format
   182 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   183                              <1> ;Error 0C: Access Code Invalid
   184 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   185                              <1> ;Error 0D: Error due to Invalid Data provided
   186 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   187                              <1> ;Error 0F: Error due to a bad drive letter being provided
   188 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   189                              <1> ;Error 10: Error due to attempting to delete the CWD
   190 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   191                              <1> ;Error 11: Error due to a unknown device being used
   192 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   193                              <1> ;Error 12: No more file handles available
   194 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 50: Network request not supported
   196 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   197                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   198 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 21: File Locking Violation
   200 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   201                              <1> ;Error 54: Too many levels of redirection error
   202 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   203                              <1> ;Error 56: Bad resource password provided
   204 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   205                              <1> ;Error 52: Directory already exists
   206 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   207                              <1> ;Error 32: Network request not supported by DOS
   208 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   209                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   210 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   211                              <1> ;Error 57: Bad parameter in request
   212 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   213                              <1> ;Error 53: Fail was returned from Int 24h
   214 0000017D 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   215                              <1> ;Error 24: Sharing Buffer Full
   216 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   217 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   218                              <1> 
   219                              <1> ;Nationalisation stuff
   220                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   221 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   222 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   222 0000019A 535953000000000000- <1>
   222 000001A3 000000000000000000- <1>
   222 000001AC 000000000000000000- <1>
   222 000001B5 000000000000000000- <1>
   222 000001BE 000000000000000000- <1>
   222 000001C7 000000000000000000- <1>
   222 000001D0 00                  <1>
   223 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   224 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   225                              <1> charTableArray: ;All the qwords need fixing up here
   226                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   227 000001D5 02                  <1>     db 2
   228 000001D6 [2602000000000000]  <1>     dq ucTblExt
   229                              <1> .filenameUCTable:
   230 000001DE 04                  <1>     db 4
   231 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   232                              <1> .filenameTerminatingTable:
   233 000001E7 05                  <1>     db 5
   234 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   235                              <1> .collatingTable:
   236 000001F0 06                  <1>     db 6
   237 000001F1 [5A03000000000000]  <1>     dq collTblExt
   238                              <1> ;Extended country table
   239                              <1> extCtryTbl:
   240 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   241                              <1>     ;Below: Length of structure (not including this word and above byte)
   242 000001FA 2A00                <1>     dw extCtryTblL
   243                              <1> .countryCode:
   244 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   245                              <1> .activeCP:
   246 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   247                              <1> ;Regular country table
   248                              <1> ctryTbl:
   249                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   250 00000200 0100                <1>     dw 1    ;Date format, UK style
   251 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   252 00000207 2C00                <1>     db ",",0    ;Thousand separator
   253 00000209 2E00                <1>     db ".",0    ;Decimal separator
   254 0000020B 2D00                <1>     db "-",0    ;Date separator
   255 0000020D 3A00                <1>     db ":",0    ;Time separator
   256 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   257 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   258 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   259 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   260 0000021A 2C00                <1>     db ",",0    ;Data list separator
   261 0000021C 000000000000000000- <1>     db 10 dup (0)
   261 00000225 00                  <1>
   262                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   263                              <1> 
   264                              <1> ucTblExt:   ;External pointer to the uppercase table
   265 00000226 8000                <1>     dw 80h
   266                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   267 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   268 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   269 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   270 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   271 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   272 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   273 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   274 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   275 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   276 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   277 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   278 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   279 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   280 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   281 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   282 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   283                              <1> 
   284                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   285 000002A8 8000                <1>     dw 80h
   286                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   287 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   288 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   289 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   290 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   291 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   292 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   293 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   294 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   295 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   296 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   297 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   298 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   299 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   300 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   301 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   302 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   303                              <1> 
   304                              <1> fileTermTblExt:
   305 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   306 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   307 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   308 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   309 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   310                              <1> .startBadRange:
   311 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   312                              <1> .endBadRange:
   313 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   314 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   315                              <1> fileTermTbl:
   316 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   317 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   318 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   319                              <1>     fileTermTbl_len equ $ - fileTermTbl
   320                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   321                              <1>     ;Buffer space
   322 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   322 0000034B 000000000000000000- <1>
   322 00000354 000000000000        <1>
   323                              <1> 
   324                              <1> collTblExt:  ;Collating sequence table, for sorting
   325 0000035A 0001                <1>     dw 0100h
   326                              <1> collTbl:
   327 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   328 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   329 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   330 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   331 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   332 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   333 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   334 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   335 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   336 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   337 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   338 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   339 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   340 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   341 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   342 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   343 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   344 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   345 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   346 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   347 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   348 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   349 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   350 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   351 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   352 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   353 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   354 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   355 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   356 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   357 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   358 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   359                              <1> 
   360                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   361                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   362                              <1> ;Bit[1]=Clear if the char of a terminating type.
   363                              <1> ;Bit[2]=Clear if the char is of separator type.
   364                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   365                              <1> ;Bit[4-7]=Unused.    
   366                              <1> 
   367 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   368 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   369 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   370 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   371 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   372 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   373 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   374 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   375 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   376 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   377 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   378 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   379 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   380 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   381 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   382 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   383 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   383 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   383 000004EE FFFFFFFFFFFFFFFFFF- <1>
   383 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   383 00000500 FFFFFFFFFFFFFFFFFF- <1>
   383 00000509 FFFFFFFFFFFFFFFFFF- <1>
   383 00000512 FFFFFFFFFFFFFFFFFF- <1>
   383 0000051B FFFFFFFFFFFFFFFFFF- <1>
   383 00000524 FFFFFFFFFFFFFFFFFF- <1>
   383 0000052D FFFFFFFFFFFFFFFFFF- <1>
   383 00000536 FFFFFFFFFFFFFFFFFF- <1>
   383 0000053F FFFFFFFFFFFFFFFFFF- <1>
   383 00000548 FFFFFFFFFFFFFFFFFF- <1>
   383 00000551 FFFFFFFFFFFFFFFFFF- <1>
   383 0000055A FFFF                <1>
    33                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 4055                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E B11F                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 BE1F                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 9320                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 BC20                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 C420                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 DC20                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A 0F21                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C 3421                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 9321                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 4624                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 A221                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 AE21                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 5471                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 8871                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A 1F2C                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C 942C                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E BA29                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 762A                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 FD2A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 942C                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 942C                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 1F2C                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A 2C2B                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 2C74                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E A171                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 EA2B                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 A871                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 AA71                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 2C74                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 2C74                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 5772                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 2C74                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E 942C                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 942C                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 972B                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 942C                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 F371                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 4554                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA 942C                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC 942C                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE 102C                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 C926                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 F626                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 0527                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 2627                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 1D72                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA FD2B                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 2B72                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 1255                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 5972                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 7E70                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 9172                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 A272                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 B172                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA E05D                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC 095E                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE DE15                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 3F18                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 331A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 962E                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 A72E                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 E92F                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA 2730                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC 6230                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE 6E30                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 D330                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 4431                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 404A                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 6232                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 9D32                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA BB1B                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC D54E                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE D950                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 E151                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 A756                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 4255                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 F572                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 B232                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA 1D33                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC C870                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE D170                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 0373                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 1473                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 F273                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 3254                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 4D33                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A D933                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 8953                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E F973                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 4934                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 1135                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 2535                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 2D74                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 F175                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 5776                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C 301C                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E EB70                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 DA70                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 2C74                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 E370                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 A15E                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 655F                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A 9135                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C CE36                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 3576                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 3B3F                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 F069                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 3876                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 3F6B                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 EE1E                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 1560                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 1649                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 6B01                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 9B77                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 0977                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 A73B                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 D528                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 B96B                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 9B6B                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 4B6B                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 D46C                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 3F01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B 3D48                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 0D6B                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 1E6A                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 B26A                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 C50C                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 6828                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 8C76                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 9976                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B D26B                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 5C6A                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 7248                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 541B                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 466F                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 7814                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 E676                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 906B                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 4076                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D 172F                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 4876                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 552F                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 5A73                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 6A76                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 076D                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 126D                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B 5A73                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D 6E71                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 4173                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 9373                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 EC73                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 FD73                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 0574                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 0D74                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 2874                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 5274                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 5274                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 5274                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 5F74                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    34                                  %if DEBUG
    35                                  %include "./src/Debug/debug.asm"
    36                                  %endif
    37                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000006AD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000006AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    13 000006B0 56                  <1>     push rsi
    14 000006B1 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B8 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BB 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BD 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006C0 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C2 57                  <1>     push rdi
    22 000006C3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C6 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C9 5F                  <1>     pop rdi ;Get original buf back
    25 000006CA 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CD 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D4 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D7 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 000006D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 000006D9 57                  <1>     push rdi
    35 000006DA E802000000          <1>     call markBuffersAsUnreferenced
    36 000006DF 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 000006E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 000006E1 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    43 000006E8 57                  <1>     push rdi
    44                              <1> .lp:
    45 000006E9 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 000006ED 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 000006F0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 000006F7 75F0                <1>     jne .lp
    49 000006F9 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 000006FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 000006FB 52                  <1>     push rdx
    58 000006FC 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 000006FF E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 00000704 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 00000707 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00000708 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 00000709 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    70 0000070D 750C                <1>     jnz .exit
    71 0000070F 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 00000712 4881FFFFFFFFFF      <1>     cmp rdi, -1
    73 00000719 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    74                              <1> .exit:
    75                              <1>     return
    13                              <2> %%_ret:
    14 0000071B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> flushAllBuffersForDPB:  ;External linkage
    78                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    79 0000071C 50                  <1>     push rax
    80 0000071D 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    81 00000724 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    82 00000727 E802000000          <1>     call flushAllBuffersForDrive
    83 0000072C 58                  <1>     pop rax
    84                              <1>     return
    13                              <2> %%_ret:
    14 0000072D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    87                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    88                              <1> ; Used also to allow flushing all buffers
    89                              <1> ; Input: al = 0-based physical drive number we are xacting on
    90                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    91                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    92 0000072E 57                  <1>     push rdi
    93 0000072F 50                  <1>     push rax
    94 00000730 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    95 00000737 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
    96                              <1> .mainLp:
    97 00000739 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
    98 00000740 741E                <1>     je .exit   
    99 00000742 E826000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   100 00000747 50                  <1>     push rax
   101 00000748 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   102 0000074C 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   103 00000752 58                  <1>     pop rax
   104 00000753 7405                <1>     je .errDrv    ;If not, goto next buffer
   105                              <1> .nextBuffer:
   106 00000755 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   107 00000758 EBDF                <1>     jmp short .mainLp
   108                              <1> .errDrv:
   109 0000075A C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   110 0000075E EBF5                <1>     jmp short .nextBuffer
   111                              <1> .exit:
   112 00000760 58                  <1>     pop rax
   113 00000761 5F                  <1>     pop rdi
   114 00000762 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000769 74C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 0000076B F9                  <1>     stc ;If so, return CF=CY
   117                              <1>     return
    13                              <2> %%_ret:
    14 0000076C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   120                              <1> ;Flushes and cleans the dirty bit from the buffer
   121                              <1> ;Input: AH = Drives to ignore flush for
   122                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   123                              <1> ;       rdi -> Buffer in question
   124 0000076D 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   125                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000770 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   126 00000772 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   127 00000774 7406                <1>     je .takeThisBuffer
   128 00000776 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   129 00000779 F8                  <1>     clc
   130                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000077A 75F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   131                              <1> .takeThisBuffer:
   132 0000077C F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   133                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000780 74EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   134 00000782 50                  <1>     push rax    ;Save the drive number
   135 00000783 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   136 00000787 50                  <1>     push rax    ;Save the buffer flags
   137 00000788 E80C000000          <1>     call flushAndFreeBuffer
   138 0000078D 58                  <1>     pop rax     ;Get back the flags
   139 0000078E 7207                <1>     jc .exit
   140 00000790 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   141 00000793 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   142                              <1> .exit:  
   143 00000797 58                  <1>     pop rax     ;Get back the drive number
   144                              <1>     return
    13                              <2> %%_ret:
    14 00000798 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   147                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   148                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   149                              <1> ;Exit:  CF=NC : Success
   150                              <1> ;       CF=CY : Fail, terminate the request
   151 00000799 50                  <1>     push rax
   152 0000079A 53                  <1>     push rbx
   153 0000079B 51                  <1>     push rcx
   154 0000079C 52                  <1>     push rdx
   155 0000079D 56                  <1>     push rsi
   156 0000079E 55                  <1>     push rbp
   157                              <1> ;If the buffer is freed, skip flushing to avoid issues
   158 0000079F B8FF000000          <1>     mov eax, freeBuffer
   159 000007A4 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   160                              <1>     ;ah = Flags, al = Drive number
   161 000007A8 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   162 000007AA 7470                <1>     je .fbFreeExit  ;If it was free, exit
   163 000007AC F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   164 000007AF 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   165 000007B1 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   166 000007B7 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   167 000007B9 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   168 000007C0 F6C408              <1>     test ah, dataBuffer
   169 000007C3 7407                <1>     jz .fbWriteSetup
   170 000007C5 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   171                              <1> .fbWriteSetup:
   172 000007CC BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   173 000007D1 F6C402              <1>     test ah, fatBuffer
   174 000007D4 7406                <1>     jz .fbWriteNotFat
   175 000007D6 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   176                              <1> .fbWriteNotFat:
   177 000007DC 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   178 000007E0 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   179 000007E4 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   180 000007E8 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   181                              <1> .fbWriteDisk:
   182 000007EC 50                  <1>     push rax    ;Save the drive number and flags
   183 000007ED 53                  <1>     push rbx    ;Has pointer to buffer data area
   184 000007EE 51                  <1>     push rcx    ;# of FAT sectors
   185 000007EF 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   186 000007F0 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   187 000007F1 55                  <1>     push rbp    ;DPB ptr for drive
   188 000007F2 B901000000          <1>     mov ecx, 1  ;One sector to copy
   189 000007F7 E8CE660000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   190 000007FC E802650000          <1>     call absDiskDriverCall    ;Make Driver Request
   191 00000801 5D                  <1>     pop rbp
   192 00000802 5E                  <1>     pop rsi
   193 00000803 5A                  <1>     pop rdx
   194 00000804 59                  <1>     pop rcx
   195 00000805 5B                  <1>     pop rbx
   196                              <1>     ;Don't pop rax here to carry the error code if error!
   197 00000806 751C                <1>     jnz .fbFail
   198                              <1> ;Now check if the buffer was a FAT, to write additional copies
   199 00000808 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   200 00000809 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   201 0000080C 740E                <1>     jz .fbFreeExit  ;If not, exit
   202 0000080E FFC9                <1>     dec ecx
   203 00000810 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   204 00000812 50                  <1>     push rax
   205 00000813 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   206 00000816 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   207 00000819 58                  <1>     pop rax
   208 0000081A EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   209                              <1> .fbFreeExit:
   210 0000081C F8                  <1>     clc
   211                              <1> .fbExitFail:
   212 0000081D 5D                  <1>     pop rbp
   213 0000081E 5E                  <1>     pop rsi
   214 0000081F 5A                  <1>     pop rdx
   215 00000820 59                  <1>     pop rcx
   216 00000821 5B                  <1>     pop rbx
   217 00000822 58                  <1>     pop rax
   218                              <1>     return
    13                              <2> %%_ret:
    14 00000823 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   219                              <1> .fbFail:
   220                              <1> ;Enter here only if the request failed
   221 00000824 FFCE                <1>     dec esi
   222 00000826 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   223 00000828 58                  <1>     pop rax     ;Else pop back the drive number and flags
   224 00000829 EBC1                <1>     jmp short .fbWriteDisk ;Try the request again!
   225                              <1> .fbHardError:
   226                              <1> ;Request failed thrice, critical error call
   227                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   228 0000082B 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   229 00000832 E81F5D0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   230 00000837 3C01                <1>     cmp al, critRetry
   231 00000839 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   232 0000083A 7490                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   233                              <1>     ;Else we fail (Ignore=Fail here)
   234 0000083C F9                  <1>     stc ;Set error flag to indicate fail
   235 0000083D EBDE                <1>     jmp short .fbExitFail
   236                              <1> 
   237                              <1> testDirtyBufferForDrive:    ;External linkage
   238                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   239                              <1> ;Input: al = Drive number (0 based)
   240                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   241                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   242 0000083F 53                  <1>     push rbx
   243 00000840 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   244                              <1> .tdbfdCheckBuffer:
   245 00000847 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   246 0000084A 7509                <1>     jne .tdbfdGotoNextBuffer
   247 0000084C F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   248 00000850 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   249 00000852 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   250                              <1> .tdbfdExit:
   251 00000853 5B                  <1>     pop rbx
   252                              <1>     return
    13                              <2> %%_ret:
    14 00000854 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .tdbfdGotoNextBuffer:
   254 00000855 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   255 00000858 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   256 0000085F 74F2                <1>     je .tdbfdExit
   257 00000861 EBE4                <1>     jmp short .tdbfdCheckBuffer
   258                              <1> 
   259                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   260                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   261                              <1> ; to have a drive number of -1, thus freeing it
   262                              <1> ;Given Drive number is in al
   263 00000863 57                  <1>     push rdi
   264 00000864 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   265                              <1> .i0:
   266 0000086B 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 00000872 7417                <1>     je .exit
   268 00000874 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   269 00000877 750D                <1>     jne .i1 ;If no, skip freeing
   270 00000879 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   271 0000087F E877FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   272 00000884 EBE5                <1>     jmp short .i0
   273                              <1> .i1:
   274 00000886 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   275 00000889 EBE0                <1>     jmp short .i0
   276                              <1> .exit:
   277 0000088B 5F                  <1>     pop rdi
   278                              <1>     return
    13                              <2> %%_ret:
    14 0000088C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> markBufferDirty:
   281 0000088D 55                  <1>     push rbp
   282 0000088E 9C                  <1>     pushfq
   283 0000088F 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   284 00000896 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   285 0000089A 9D                  <1>     popfq
   286 0000089B 5D                  <1>     pop rbp
   287                              <1>     return
    13                              <2> %%_ret:
    14 0000089C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   288                              <1> 
   289                              <1> getBuffer: ;Internal Linkage ONLY
   290                              <1> ;
   291                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   292                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   293                              <1> ;Flushes if not in disk change mode. 
   294                              <1> ;If in disk change mode, will check to see if the selected buffer 
   295                              <1> ; has data referring a device using the same DPB as we are changing.
   296                              <1> ; If it is, skip flushing, if not, flush first!
   297                              <1> ;
   298                              <1> ;This function will return a pointer to the desired data sector OR 
   299                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   300                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   301                              <1> ;Entry: rax = Sector to read
   302                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   303                              <1> ;       rsi = DPB to use for transaction
   304                              <1> ;Exit:  CF=NC => 
   305                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   306                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   307 0000089D 51                  <1>     push rcx
   308 0000089E 52                  <1>     push rdx
   309 0000089F 56                  <1>     push rsi
   310 000008A0 57                  <1>     push rdi
   311 000008A1 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   312 000008A3 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   313 000008A8 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   314 000008AF 741F                <1>     je .rbReadNewSector
   315 000008B1 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   316 000008B8 E8E9FDFFFF          <1>     call makeBufferMostRecentlyUsed
   317 000008BD F8                  <1>     clc
   318                              <1> .rbExit:
   319 000008BE 5F                  <1>     pop rdi
   320 000008BF 5E                  <1>     pop rsi
   321 000008C0 5A                  <1>     pop rdx
   322 000008C1 59                  <1>     pop rcx
   323 000008C2 9C                  <1>     pushfq
   324 000008C3 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   325 000008CA 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   326 000008CE 9D                  <1>     popfq
   327                              <1>     return
    13                              <2> %%_ret:
    14 000008CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .rbReadNewSector:
   329 000008D0 E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   330 000008D5 E8BFFEFFFF          <1>     call flushAndFreeBuffer
   331 000008DA 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   332                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   333                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   334                              <1>     ; is no longer owned by that File so we mark the owner as none
   335 000008DC 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   336 000008DF 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   337 000008E2 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   338 000008E6 80F902              <1>     cmp cl, fatBuffer
   339 000008E9 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   340 000008EB 7503                <1>     jne .rbNonFATbuffer
   341 000008ED 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   342                              <1> .rbNonFATbuffer:
   343 000008F0 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   344 000008F3 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   345 000008F6 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   346 000008F9 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   347 000008FD C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   348 00000901 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   349 00000906 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   350                              <1> 
   351                              <1> readSectorBuffer:   ;Internal Linkage
   352                              <1> ;Reads a sector into a built sector buffer
   353                              <1> ;Entry: rdi = Pointer to buffer header
   354                              <1> ;Exit:  CF=NC : Success
   355                              <1> ;       CF=CY : Fail, terminate the request
   356                              <1> ;       rbx pointing to buffer header
   357                              <1> ;First make request to device driver
   358 00000908 50                  <1>     push rax
   359 00000909 53                  <1>     push rbx
   360 0000090A 51                  <1>     push rcx
   361 0000090B 52                  <1>     push rdx
   362 0000090C 56                  <1>     push rsi
   363 0000090D 55                  <1>     push rbp
   364                              <1> .rsRequest0:
   365 0000090E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   366 00000913 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   367 00000917 7406                <1>     jz .rsRequest1
   368 00000919 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   369                              <1> .rsRequest1:
   370 0000091F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   371 00000922 B901000000          <1>     mov ecx, 1  ;One sector to copy
   372 00000927 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   373 0000092B 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   374 0000092F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   375 00000933 E89D650000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   376 00000938 E8C6630000          <1>     call absDiskDriverCall    ;Make Driver Request
   377 0000093D 7508                <1>     jnz .rsFail
   378                              <1> .rsExit:
   379 0000093F F8                  <1>     clc
   380                              <1> .rsExitFail:
   381 00000940 5D                  <1>     pop rbp
   382 00000941 5E                  <1>     pop rsi
   383 00000942 5A                  <1>     pop rdx
   384 00000943 59                  <1>     pop rcx
   385 00000944 5B                  <1>     pop rbx
   386 00000945 58                  <1>     pop rax
   387                              <1>     return
    13                              <2> %%_ret:
    14 00000946 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> .rsFail:
   389                              <1> ;Enter here only if the request failed
   390 00000947 FFCE                <1>     dec esi
   391 00000949 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   392                              <1> ;Request failed thrice, critical error call
   393                              <1> ;First free the buffer if we failed to read data into it. 
   394                              <1> ;We free this buffer to free the resource if the user aborts.
   395                              <1> ;This function is called in a critical section so the buffer pointer
   396                              <1> ; is under no thread of being reallocated.
   397                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   398 0000094B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   399 00000951 C605(68040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   400 00000958 E8F95B0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   401 0000095D 3C01                <1>     cmp al, critRetry
   402 0000095F 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   403 00000961 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   404 00000965 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   405 00000968 EBA4                <1>     jmp short .rsRequest0
   406                              <1> .fail:
   407 0000096A F9                  <1>     stc ;Set error flag to indicate fail
   408 0000096B E9D0FFFFFF          <1>     jmp .rsExitFail
   409                              <1>     
   410                              <1> findLRUBuffer: ;Internal Linkage
   411                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   412                              <1> ; in rdi and the currBuff variable
   413                              <1> ;Input: Nothing
   414                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   415                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   416 00000970 52                  <1>     push rdx
   417 00000971 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   418 00000978 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   419 0000097C 7436                <1>     je .flbExit 
   420 0000097E 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   421 00000985 742D                <1>     je .flbExit
   422                              <1> .flbWalk:
   423 00000987 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   424 0000098A 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   425 0000098D 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   426 00000991 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   427 00000993 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   428 0000099A 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   429 0000099C 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   430                              <1> .flbHeadLink:
   431 000009A3 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   432 000009AA 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   433 000009B1 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   434                              <1> .flbExit:
   435 000009B4 5A                  <1>     pop rdx
   436 000009B5 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   437                              <1>     return
    13                              <2> %%_ret:
    14 000009BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .flbFreeLink:
   439 000009BD 51                  <1>     push rcx
   440 000009BE 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   441 000009C1 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   442 000009C4 59                  <1>     pop rcx
   443 000009C5 EBDC                <1>     jmp short .flbHeadLink
   444                              <1> 
   445                              <1> findSectorInBuffer:     ;Internal linkage
   446                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   447                              <1> ;If the sector is not in a buffer, returns with a -1
   448                              <1> ;Input: rax = Sector number
   449                              <1> ;       dl = Drive number
   450                              <1> ;Output: rdi = Buffer hdr pointer or -1
   451 000009C7 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   452                              <1> .fsiCheckBuffer:
   453 000009CE 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   454 000009D1 7507                <1>     jne .fsiGotoNextBuffer
   455 000009D3 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   456 000009D7 7501                <1>     jne .fsiGotoNextBuffer
   457                              <1> .fsiExit:
   458                              <1>     return
    13                              <2> %%_ret:
    14 000009D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> .fsiGotoNextBuffer:
   460 000009DA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   461 000009DD 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   462 000009E4 74F3                <1>     je .fsiExit
   463 000009E6 EBE6                <1>     jmp short .fsiCheckBuffer
   464                              <1> 
   465                              <1> ;-----------------------------------------------------------------------------
   466                              <1> ;SPECIAL BUFFER FUNCTIONS
   467                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   468                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   469                              <1> ;-----------------------------------------------------------------------------
   470                              <1> getBufForDOS:
   471                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   472                              <1> ;Input: [workingDPB] = DPB to transact on
   473                              <1> ;       rax = Sector to transfer
   474                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   475 000009E8 51                  <1>     push rcx
   476 000009E9 B101                <1>     mov cl, dosBuffer
   477 000009EB EB0D                <1>     jmp short getBufCommon
   478                              <1> getBufForFat:
   479                              <1> ;Returns a buffer to use for fat data in rbx
   480                              <1> ;Input: [workingDPB] = DPB to transact on
   481                              <1> ;       rax = Sector to transfer
   482                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   483 000009ED 51                  <1>     push rcx
   484 000009EE B102                <1>     mov cl, fatBuffer
   485 000009F0 EB08                <1>     jmp short getBufCommon
   486                              <1> getBufForDir:
   487                              <1> ;Returns a buffer to use for disk directory data in rbx
   488                              <1> ;Input: [workingDPB] = File to manipulate
   489                              <1> ;       rax = Sector to transfer
   490                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   491 000009F2 51                  <1>     push rcx
   492 000009F3 B104                <1>     mov cl, dirBuffer
   493 000009F5 EB03                <1>     jmp short getBufCommon
   494                              <1> getBufForData:
   495                              <1> ;Returns a buffer to use for disk data in rbx
   496                              <1> ;Requires a File Handle.
   497                              <1> ;Input: [workingDPB] = File to manipulate
   498                              <1> ;       rax = Sector to transfer
   499                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   500 000009F7 51                  <1>     push rcx
   501 000009F8 B108                <1>     mov cl, dataBuffer
   502                              <1> getBufCommon:
   503 000009FA 56                  <1>     push rsi
   504 000009FB 57                  <1>     push rdi
   505 000009FC 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   506                              <1> .makeReq:
   507 00000A03 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   508 00000A08 5F                  <1>     pop rdi
   509 00000A09 5E                  <1>     pop rsi
   510 00000A0A 59                  <1>     pop rcx
   511                              <1>     return
    13                              <2> %%_ret:
    14 00000A0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A0C 53                  <1>     push rbx
     9 00000A0D 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000A10 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A15 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A1B 730C                <1>     jae .exit
    13 00000A1D FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A1F 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A25 7302                <1>     jae .exit
    16 00000A27 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A29 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A2B 53                  <1>     push rbx
    29 00000A2C 55                  <1>     push rbp
    30 00000A2D 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A34 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000A37 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A3D 731E                <1>     jae .fat32
    34 00000A3F 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A45 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A47 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A49 6801000000          <1>     push qword 1
    39 00000A4E EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A50 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A52 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A54 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A56 6800000000          <1>     push qword 0
    45 00000A5B EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A5D 6802000000          <1>     push qword 2
    48 00000A62 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A65 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A69 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A6B F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A6D 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A71 01D8                <1>     add eax, ebx
    56 00000A73 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A74 5D                  <1>     pop rbp
    58 00000A75 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A77 51                  <1>     push rcx
    68 00000A78 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A7A 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A7C 482D02000000        <1>     sub rax, 2
    72 00000A82 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000A85 48D3E0              <1>     shl rax, cl
    74 00000A88 31C9                <1>     xor ecx, ecx
    75 00000A8A 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A8D 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A90 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A92 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A95 E872FFFFFF          <1>     call getFATtype
    83 00000A9A 81F902000000        <1>     cmp ecx, 2
    84 00000AA0 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AA2 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AA4 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA6 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AA8 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AA9 89C3                <1>     mov ebx, eax
   100 00000AAB E8EC010000          <1>     call readFAT
   101 00000AB0 7209                <1>     jc .exit
   102 00000AB2 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AB7 75F0                <1>     jne .lp
   104 00000AB9 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000ABB 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000ABD 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000ABF 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000AC1 51                  <1>     push rcx
   117 00000AC2 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AC4 FFC1                <1>     inc ecx
   120 00000AC6 E8D1010000          <1>     call readFAT
   121 00000ACB 7209                <1>     jc .exit
   122 00000ACD 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AD2 75F0                <1>     jne .lp
   124 00000AD4 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AD6 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AD8 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000ADA 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000ADC 53                  <1>     push rbx
   140 00000ADD 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000AE0 89C3                <1>     mov ebx, eax
   143 00000AE2 E8B5010000          <1>     call readFAT
   144 00000AE7 7206                <1>     jc .exit
   145 00000AE9 FFC9                <1>     dec ecx
   146 00000AEB 75F3                <1>     jnz .lp
   147 00000AED 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000AEF 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000AF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000AF1 53                  <1>     push rbx
   157 00000AF2 56                  <1>     push rsi
   158 00000AF3 E864000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AF8 721C                <1>     jc .exit    ;Disk read error?
   160 00000AFA 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000AFF 7415                <1>     je .exit
   162 00000B01 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B06 89C3                <1>     mov ebx, eax
   164 00000B08 E83A020000          <1>     call writeFAT
   165 00000B0D 7207                <1>     jc .exit 
   166 00000B0F 89D8                <1>     mov eax, ebx
   167 00000B11 E811030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit:
   169 00000B16 5E                  <1>     pop rsi
   170 00000B17 5B                  <1>     pop rbx
   171                              <1>     return
    13                              <2> %%_ret:
    14 00000B18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   172                              <1> 
   173                              <1> allocateClusters:
   174                              <1> ;Working dpb must be set. 
   175                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   176                              <1> ;       ebx = Cluster to link to the new cluster
   177                              <1> ;Output:    
   178                              <1> ;   ecx = Number of allocated clusters
   179                              <1> ;   CF=NC => Complete.
   180                              <1> ;   If eax = -1, then no more free clusters. 
   181                              <1> ;   CF=CY => Hard error, exit
   182 00000B19 F8                  <1>     clc ;Always clear the flags before starting
   183 00000B1A 53                  <1>     push rbx
   184 00000B1B 56                  <1>     push rsi
   185 00000B1C 51                  <1>     push rcx    ;Save tfr count on stack
   186 00000B1D 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   187                              <1> .allocateLoop:
   188 00000B20 E837000000          <1>     call findFreeCluster
   189 00000B25 722B                <1>     jc .exit
   190 00000B27 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   191 00000B2C 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   192                              <1>     ;eax has first free cluster value to use
   193                              <1>     ;First we link the previous cluster to this cluster
   194 00000B2E BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   195 00000B33 50                  <1>     push rax
   196 00000B34 E80E020000          <1>     call writeFAT   ;Allocate this cluster first
   197 00000B39 58                  <1>     pop rax
   198 00000B3A 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   199 00000B3C E8E6020000          <1>     call decrementFreeClusterCount
   200                              <1>     ;eax points to this allocated cluster
   201                              <1>     ;ebx points to the previous last cluster
   202 00000B41 89C6                <1>     mov esi, eax    ;New cluster as "value"
   203 00000B43 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   204 00000B45 E8FD010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   205 00000B4A 7206                <1>     jc .exit
   206 00000B4C 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   207 00000B4E FFC9                <1>     dec ecx ;One less cluster allocated
   208 00000B50 75CE                <1>     jnz .allocateLoop
   209                              <1> .exit:
   210 00000B52 5E                  <1>     pop rsi ;Pop the tfr count into esi
   211 00000B53 9C                  <1>     pushfq
   212 00000B54 F7D9                <1>     neg ecx
   213 00000B56 01F1                <1>     add ecx, esi
   214 00000B58 9D                  <1>     popfq
   215 00000B59 5E                  <1>     pop rsi
   216 00000B5A 5B                  <1>     pop rbx
   217                              <1>     return
    13                              <2> %%_ret:
    14 00000B5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> findFreeCluster:
   220                              <1> ;Walks the FAT to find a free cluster and returns the 
   221                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   222                              <1> ;Works on the workingDPB
   223                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   224 00000B5C 53                  <1>     push rbx
   225 00000B5D 52                  <1>     push rdx
   226 00000B5E 55                  <1>     push rbp
   227 00000B5F 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   228                              <1>     ;Use readFAT
   229                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   230                              <1>     ;If readFAT returns 0 then its a free cluster
   231 00000B66 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   232                              <1> .fatLoop:
   233 00000B6B 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   234 00000B6D E82A010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   235 00000B72 7215                <1>     jc .exitFail    ;If something goes wrong, just return
   236 00000B74 85C0                <1>     test eax, eax   ;Is this cluster free?
   237 00000B76 740E                <1>     jz .exit    ;If yes, exit
   238 00000B78 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   239 00000B7C 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   240 00000B7F 76EA                <1>     jbe .fatLoop
   241 00000B81 BBFFFFFFFF          <1>     mov ebx, -1     ;We are full here...
   242                              <1> .exit:
   243 00000B86 89D8                <1>     mov eax, ebx
   244 00000B88 F8                  <1>     clc
   245                              <1> .exitFail:      ;Keep carry flag
   246 00000B89 5D                  <1>     pop rbp
   247 00000B8A 5A                  <1>     pop rdx
   248 00000B8B 5B                  <1>     pop rbx
   249                              <1>     return
    13                              <2> %%_ret:
    14 00000B8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> 
   251                              <1> findFreeClusterData:
   252                              <1> ;Walks the FAT to find a free cluster and returns the 
   253                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   254                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   255                              <1> ; Both fields get filled in the workingDPB
   256                              <1> ;Works on the workingDPB
   257                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   258 00000B8D 53                  <1>     push rbx
   259 00000B8E 52                  <1>     push rdx
   260 00000B8F 55                  <1>     push rbp
   261 00000B90 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   262                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   263 00000B97 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   264                              <1>     ;Use readFAT
   265                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   266                              <1>     ;If readFAT returns 0 then its a free cluster
   267 00000B9E B802000000          <1>     mov eax, 2  ;Start with cluster 2 (which corresponds to cluster 0 = MAX)
   268 00000BA3 8B550F              <1>     mov edx, dword [rbp + dpb.dMaxClusterAddr] ;Max clust addr = MAX + 1
   269                              <1> .fatLoop:
   270 00000BA6 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   271 00000BA8 E8EF000000          <1>     call readFAT
   272 00000BAD 722C                <1>     jc .exitFail   ;If something goes wrong, just return
   273 00000BAF 85C0                <1>     test eax, eax   ;Is this cluster free?
   274 00000BB1 750C                <1>     jne .fatProceed
   275 00000BB3 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   276 00000BBA 7423                <1>     je .fatFirst
   277 00000BBC FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   278                              <1> .fatProceed:
   279 00000BBF 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   280 00000BC3 39D0                <1>     cmp eax, edx
   281 00000BC5 76DF                <1>     jbe .fatLoop
   282                              <1>     ;If we get here with no first free cluster, then we have no free clusters!
   283 00000BC7 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1
   284 00000BCE 7507                <1>     jne .exit
   285 00000BD0 C7453100000000      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], 0  ;No free clusters!
   286                              <1> .exit:
   287 00000BD7 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   288 00000BDA F8                  <1>     clc
   289                              <1> .exitFail:      ;Keep carry flag
   290 00000BDB 5D                  <1>     pop rbp
   291 00000BDC 5A                  <1>     pop rdx
   292 00000BDD 5B                  <1>     pop rbx
   293                              <1>     return
    13                              <2> %%_ret:
    14 00000BDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> .fatFirst:
   295                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   296 00000BDF 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   297 00000BE2 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   298 00000BE9 74D4                <1>     je .fatProceed
   299 00000BEB EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   300                              <1> 
   301                              <1> getNextSectorOfFile:
   302                              <1> ;This function will return the next sector of a file in rax
   303                              <1> ;If the next sector to be read lives in the next cluster, it will update
   304                              <1> ; the vars appropriately
   305                              <1> ;
   306                              <1> ;Input: rbp = dpb pointer
   307                              <1> ;Output:
   308                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   309                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   310                              <1> ;       CF=CY => Critical error occurred and was FAILed
   311                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   312                              <1> ; next cluster and read first sector 
   313                              <1>     ;Check if we need to go to next cluster
   314 00000BED 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   315 00000BF3 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   316 00000BF6 741C                <1>     je .gotoNextCluster
   317                              <1>     ;Goto next sector in same cluster
   318 00000BF8 FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   319 00000BFE 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   320 00000C05 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   321                              <1> .exit:
   322 00000C0C 50                  <1>     push rax
   323 00000C0D 31C0                <1>     xor eax, eax
   324 00000C0F FFC0                <1>     inc eax ;Ensure ZF=NZ
   325 00000C11 58                  <1>     pop rax
   326 00000C12 F8                  <1>     clc     ;And CF=NC
   327                              <1>     return
    13                              <2> %%_ret:
    14 00000C13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .gotoNextCluster:
   329 00000C14 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   330 00000C1A E87D000000          <1>     call readFAT
   331                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C1F 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   332                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   333 00000C21 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   334                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C26 74EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   335                              <1> ;Update the new cluster and sector information
   336 00000C28 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   337 00000C2E FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   338 00000C34 E83EFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   339 00000C39 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   340 00000C40 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   341 00000C47 EBC3                <1>     jmp short .exit
   342                              <1> 
   343                              <1> 
   344                              <1> truncateFAT:
   345                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   346                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   347                              <1> ;       rbp = Current DPB to use for disk
   348                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   349 00000C49 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   350 00000C4A 56                  <1>     push rsi
   351 00000C4B E81D000000          <1>     call freeChainFAT   ;Preserved eax, frees the full chain
   352 00000C50 720F                <1>     jc .exit
   353 00000C52 BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   354 00000C57 E8EB000000          <1>     call writeFAT
   355 00000C5C E8C6010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   356                              <1> .exit:
   357 00000C61 5E                  <1>     pop rsi
   358 00000C62 58                  <1>     pop rax
   359                              <1>     return
    13                              <2> %%_ret:
    14 00000C63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> unlinkFAT:
   361                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   362                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   363                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   364                              <1> ; cluster must be set to EOC before this proc is called.
   365                              <1> ;Stops at first invalid cluster number.
   366                              <1> ;
   367                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   368                              <1> ;       rbp = Current DPB to use for disk
   369                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   370                              <1> 
   371 00000C64 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   372 00000C65 56                  <1>     push rsi
   373                              <1> ;The below call decrements the cluster count for the full chain freed including
   374                              <1> ; the starting cluster address.
   375 00000C66 E802000000          <1>     call freeChainFAT    ;Preserved eax
   376 00000C6B EBF4                <1>     jmp short truncateFAT.exit
   377                              <1> 
   378                              <1> freeChainFAT:
   379                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   380                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   381                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   382                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   383                              <1> ;Stops at first invalid cluster number.
   384                              <1> ;
   385                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   386                              <1> ;       rbp = Current DPB to use for disk
   387                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   388 00000C6D 50                  <1>     push rax
   389 00000C6E 53                  <1>     push rbx
   390 00000C6F 51                  <1>     push rcx
   391 00000C70 56                  <1>     push rsi
   392 00000C71 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   393                              <1> .lp:
   394 00000C73 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   395 00000C78 721D                <1>     jc .exit    ;Error exit
   396 00000C7A 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   397 00000C7C 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   398 00000C7D 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   399 00000C7F E8C3000000          <1>     call writeFAT
   400 00000C84 7211                <1>     jc .exit    ;Error exit
   401 00000C86 E88D010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   402 00000C8B 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   403 00000C91 7404                <1>     je .exit
   404 00000C93 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   405 00000C95 EBDC                <1>     jmp short .lp
   406                              <1> .exit:
   407 00000C97 5E                  <1>     pop rsi
   408 00000C98 59                  <1>     pop rcx
   409 00000C99 5B                  <1>     pop rbx
   410 00000C9A 58                  <1>     pop rax
   411                              <1>     return
    13                              <2> %%_ret:
    14 00000C9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> readFAT:
   413                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   414                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   415                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   416                              <1> ;       rbp = DPB
   417                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   418                              <1> ;If carry set, getBuffer failed!
   419 00000C9C 53                  <1>     push rbx
   420 00000C9D 51                  <1>     push rcx
   421 00000C9E 52                  <1>     push rdx
   422 00000C9F 57                  <1>     push rdi
   423 00000CA0 55                  <1>     push rbp
   424 00000CA1 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   425 00000CA3 E883FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   426                              <1>     ;and FAT type in ecx
   427 00000CA8 E840FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   428 00000CAD 7232                <1>     jc .exitFail
   429                              <1>     ;Check if FAT 12, 16, 32
   430 00000CAF 85C9                <1>     test ecx, ecx
   431 00000CB1 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   432 00000CB3 F7C101000000        <1>     test ecx, 1
   433 00000CB9 740E                <1>     jz .goToNextClusterFat32
   434                              <1>     ;Here we handle FAT16
   435 00000CBB 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   436 00000CC0 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   437 00000CC5 7219                <1>     jb .exit
   438 00000CC7 EB0B                <1>     jmp short .eocExit
   439                              <1> .goToNextClusterFat32:
   440 00000CC9 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   441 00000CCD 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   442 00000CD2 7207                <1>     jb .validCluster32   
   443                              <1> .eocExit:
   444 00000CD4 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   445 00000CD9 EB05                <1>     jmp short .exit
   446                              <1> .validCluster32:
   447 00000CDB 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   448                              <1> .exit:
   449 00000CE0 F8                  <1>     clc
   450                              <1> .exitFail:
   451 00000CE1 5D                  <1>     pop rbp
   452 00000CE2 5F                  <1>     pop rdi
   453 00000CE3 5A                  <1>     pop rdx
   454 00000CE4 59                  <1>     pop rcx
   455 00000CE5 5B                  <1>     pop rbx
   456                              <1>     return
    13                              <2> %%_ret:
    14 00000CE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   457                              <1> .gotoNextClusterFat12:
   458                              <1> ;eax has the sector number of the FAT
   459                              <1> ;edx has byte offset into the sector
   460                              <1> ;edi has current cluster number
   461                              <1> ;rbx has ptr to buffer header
   462 00000CE7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   463 00000CEB F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   464 00000CF1 741C                <1>     jz .gotoNextClusterFat12Even
   465                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   466 00000CF3 29D1                <1>     sub ecx, edx
   467 00000CF5 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   468 00000CF7 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   469 00000CF9 E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   470 00000CFE 72E1                <1>     jc .exitFail    
   471 00000D00 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   472 00000D03 EB23                <1>     jmp short .checkIfLastFAT12Cluster
   473                              <1> .gotoNextClusterFat12OddNoX:
   474 00000D05 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   475 00000D0A C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   476 00000D0D EB19                <1>     jmp short .checkIfLastFAT12Cluster
   477                              <1> .gotoNextClusterFat12Even:
   478 00000D0F 29D1                <1>     sub ecx, edx
   479 00000D11 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   480 00000D13 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   481 00000D15 E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   482 00000D1A 72C5                <1>     jc .exitFail
   483 00000D1C EB05                <1>     jmp short .evenCmn
   484                              <1> .gotoNextClusterFat12EvenNoX:
   485                              <1>     ;Here the cluster is even and can't cross a sector boundary
   486 00000D1E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   487                              <1> .evenCmn:
   488 00000D23 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   489                              <1> .checkIfLastFAT12Cluster:
   490 00000D28 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   491 00000D2D 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   492 00000D2F EBA3                <1>     jmp short .eocExit
   493                              <1> .xBndry:
   494                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   495                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   496 00000D31 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   497 00000D36 FFC0                <1>     inc eax ;Get next FAT sector
   498 00000D38 53                  <1>     push rbx
   499 00000D39 E8AFFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   500 00000D3E 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   501                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D3F 72A5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   502 00000D41 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   503 00000D43 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   504                              <1>     return
    13                              <2> %%_ret:
    14 00000D46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> writeFAT:
   507                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   508                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   509                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   510                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   511                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   512 00000D47 53                  <1>     push rbx
   513 00000D48 51                  <1>     push rcx
   514 00000D49 52                  <1>     push rdx
   515 00000D4A 56                  <1>     push rsi
   516 00000D4B 57                  <1>     push rdi
   517 00000D4C 55                  <1>     push rbp
   518 00000D4D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   519 00000D4F E8D7FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   520                              <1>     ;and FAT type in ecx
   521 00000D54 E894FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   522 00000D59 7223                <1>     jc .exitFail
   523                              <1>     ;Check if FAT 12, 16, 32
   524 00000D5B 85C9                <1>     test ecx, ecx
   525 00000D5D 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   526 00000D5F F7C101000000        <1>     test ecx, 1
   527 00000D65 7407                <1>     jz .goToNextClusterFat32
   528                              <1>     ;Here we handle FAT16
   529 00000D67 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   530 00000D6C EB0A                <1>     jmp short .exit
   531                              <1> .goToNextClusterFat32:
   532 00000D6E 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   533 00000D74 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   534                              <1> .exit:
   535 00000D78 E810FBFFFF          <1>     call markBufferDirty
   536 00000D7D F8                  <1>     clc
   537                              <1> .exitFail:
   538 00000D7E 5D                  <1>     pop rbp
   539 00000D7F 5F                  <1>     pop rdi
   540 00000D80 5E                  <1>     pop rsi
   541 00000D81 5A                  <1>     pop rdx
   542 00000D82 59                  <1>     pop rcx
   543 00000D83 5B                  <1>     pop rbx
   544                              <1>     return
    13                              <2> %%_ret:
    14 00000D84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> .gotoNextClusterFat12:
   546                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   547                              <1> ;eax has the sector number of the FAT
   548                              <1> ;edx has byte offset into the sector
   549                              <1> ;edi has current cluster number
   550                              <1> ;rbx has ptr to buffer header
   551 00000D85 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   552 00000D89 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   553 00000D8F F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   554 00000D95 7432                <1>     jz .gotoNextClusterFat12Even
   555                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   556 00000D97 29D1                <1>     sub ecx, edx
   557 00000D99 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   558 00000D9B 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   559                              <1>     ;Boundary cross, build entry properly
   560                              <1>     ;Replace the high nybble of the low byte
   561 00000D9D 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   562 00000DA2 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   563 00000DA8 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   564 00000DAB 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   565 00000DAD C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   566 00000DB0 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   567 00000DB4 E8D4FAFFFF          <1>     call markBufferDirty
   568 00000DB9 FFC0                <1>     inc eax ;Get next FAT sector
   569 00000DBB E82DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   570 00000DC0 72BC                <1>     jc .exitFail
   571 00000DC2 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   572 00000DC4 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   573 00000DC7 EBAF                <1>     jmp short .exit
   574                              <1> .gotoNextClusterFat12Even:
   575 00000DC9 29D1                <1>     sub ecx, edx
   576 00000DCB FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   577 00000DCD 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   578 00000DCF 89F1                <1>     mov ecx, esi
   579 00000DD1 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   580 00000DD4 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   581 00000DD8 E8B0FAFFFF          <1>     call markBufferDirty
   582 00000DDD FFC0                <1>     inc eax ;Get next FAT sector
   583 00000DDF E809FCFFFF          <1>     call getBufForFat
   584 00000DE4 7298                <1>     jc .exitFail
   585 00000DE6 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   586 00000DE9 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   587 00000DEC 08E9                <1>     or cl, ch       ;Add our entry in
   588 00000DEE 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   589 00000DF1 EB85                <1>     jmp short .exit    
   590                              <1> .gotoNextClusterFat12OddNoX:
   591 00000DF3 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   592 00000DF8 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   593 00000DFD C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   594 00000E00 EB0A                <1>     jmp short .fat12common
   595                              <1> .gotoNextClusterFat12EvenNoX:
   596                              <1>     ;Here the cluster is even and can't cross a sector boundary
   597 00000E02 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   598 00000E07 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   599                              <1> .fat12common:
   600 00000E0C 09F0                <1>     or eax, esi     ;Add the new entry bits
   601 00000E0E 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   602 00000E13 E960FFFFFF          <1>     jmp .exit
   603                              <1> 
   604                              <1> incrementFreeClusterCount:
   605                              <1> ;Cluster Deallocated Function
   606 00000E18 9C                  <1>     pushfq
   607 00000E19 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   608 00000E20 7403                <1>     je .exit
   609 00000E22 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   610                              <1> .exit:
   611 00000E25 9D                  <1>     popfq
   612                              <1>     return
    13                              <2> %%_ret:
    14 00000E26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> decrementFreeClusterCount:
   614                              <1> ;Cluster Allocated Function
   615 00000E27 9C                  <1>     pushfq
   616 00000E28 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   617 00000E2F 7403                <1>     je .exit
   618 00000E31 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   619                              <1> .exit:
   620 00000E34 9D                  <1>     popfq
   621                              <1>     return
    13                              <2> %%_ret:
    14 00000E35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> getBytesPerCluster:
   624                              <1> ;Gets the bytes per cluster
   625                              <1> ;Input: rbp -> Current DPB
   626                              <1> ;Output: ecx = Total bytes per cluster
   627 00000E36 50                  <1>     push rax
   628 00000E37 52                  <1>     push rdx
   629 00000E38 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   630 00000E3C 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   631 00000E40 FFC1                <1>     inc ecx
   632 00000E42 F7E1                <1>     mul ecx
   633 00000E44 89C1                <1>     mov ecx, eax
   634 00000E46 5A                  <1>     pop rdx
   635 00000E47 58                  <1>     pop rax
   636                              <1>     return
    13                              <2> %%_ret:
    14 00000E48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000E49 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000E50 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000E53 7408                <1>     jz .notNet
     6 00000E55 B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00000E5A CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000E5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000E5D C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 00000E64 E867660000          <1>     call dosCrit1Enter
    12 00000E69 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 00000E70 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 00000E77 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 00000E79 0440                <1>     add al, "@"  ;Convert into letter
    16 00000E7B E80A620000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 00000E80 723C                <1>     jc .critError   ;Return error if this fails
    18 00000E82 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 00000E89 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 00000E8D E825610000          <1>     call setWorkingDPB
    21 00000E92 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 00000E96 8805(09070000)      <1>     mov byte [workingDrv], al
    23 00000E9C C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    24 00000EA3 C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 00000EAA C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 00000EB1 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 00000EB6 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 00000EB8 E81D660000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 00000EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 00000EBE B812000000          <1>     mov eax, errNoFil
    33 00000EC3 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 00000EC5 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 00000ECC 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 00000ED3 57                  <1>     push rdi
    43 00000ED4 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 00000ED8 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 00000EDF B90B000000          <1>     mov ecx, 11
    46 00000EE4 F3A4                <1>     rep movsb   ;Get copy the search template!
    47 00000EE6 5F                  <1>     pop rdi
    48 00000EE7 F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 00000EEB 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 00000EF1 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 00000EF4 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 00000EFA 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 00000EFD 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 00000F03 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 00000F09 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 00000F0C 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 00000F11 0F84CA000000        <1>     je .errorExit
    59 00000F17 8905(85070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 00000F1D C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 00000F20 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 00000F22 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 00000F2A 0000                <1>
    65 00000F2C 0F8492000000        <1>     je .oldFat
    66 00000F32 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 00000F36 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    68 00000F3A D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00000F3C 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00000F3E 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00000F40 31D2                <1>     xor edx, edx
    72 00000F42 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 00000F44 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 00000F46 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00000F4A 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00000F4C 31D2                <1>     xor edx, edx
    80 00000F4E F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00000F50 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 00000F57 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00000F5D 89D9                <1>     mov ecx, ebx
    87 00000F5F 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00000F62 E835FDFFFF          <1>     call readFAT
    90 00000F67 3DFFFFFFFF          <1>     cmp eax, -1
    91 00000F6C 7473                <1>     je .errorExit
    92 00000F6E FFC9                <1>     dec ecx
    93 00000F70 75F0                <1>     jnz .fatlp
    94 00000F72 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 00000F78 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 00000F7F 50                  <1>     push rax    ;Push the return address onto stack
    98 00000F80 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    99 00000F86 E8ECFAFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 00000F8B 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00000F92 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 00000F95 E858FAFFFF          <1>     call getBufForDir
   104 00000F9A 0F826A010000        <1>     jc searchDir.fnfError
   105 00000FA0 E869010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 00000FA5 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 00000FAB 52                  <1>     push rdx
   110 00000FAC 31D2                <1>     xor edx, edx
   111 00000FAE F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 00000FB0 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 00000FB2 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 00000FB5 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 00000FB8 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 00000FB9 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 00000FBF E9C2010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 00000FC4 488D0508010000      <1>     lea rax, searchDir.oldNextEP
   125 00000FCB 50                  <1>     push rax    ;Push return address onto the stack
   126 00000FCC 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 00000FD0 31D2                <1>     xor edx, edx
   128 00000FD2 96                  <1>     xchg esi, eax
   129 00000FD3 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 00000FD5 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 00000FDC 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 00000FDF EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 00000FE1 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 00000FE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 00000FE3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 00000FEA 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 00000FF1 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 00000FF8 7509                <1>     jnz .volIdSearch
   150 00000FFA F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 00001001 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 00001003 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 0000100A 7407                <1>     jz .notVolSearch
   156 0000100C 31C0                <1>     xor eax, eax ;Search the root dir.
   157 0000100E E88F060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 00001013 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 00001019 85C0                <1>     test eax, eax
   161 0000101B 0F8497000000        <1>     jz .oldRoot
   162 00001021 E851FAFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 00001026 E8C7F9FFFF          <1>     call getBufForDir
   165 0000102B 0F82D9000000        <1>     jc .fnfError
   166 00001031 E8D8000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 00001036 E8DF000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000103B 73A5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   171 0000103D 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 00001043 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001049 8905(54070000)      <1>     mov dword [currClustD], eax
   177 0000104F 668B05(83070000)    <1>     mov ax, word [dirSect]
   178 00001056 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 0000105C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001060 488905(5D070000)    <1>     mov qword [currSectD], rax  
   181 00001067 C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 0000106F 0000                <1>
   182 00001071 E877FBFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 00001076 0F828E000000        <1>     jc .fnfError
   184 0000107C 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 0000107E 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 00001085 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 0000108C 50                  <1>     push rax    ;Save the next sector we need to read
   188 0000108D 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 00001093 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 00001099 58                  <1>     pop rax
   191 0000109A 748A                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 0000109C 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 000010A4 00                  <1>
   193 000010A5 50                  <1>     push rax
   194 000010A6 8B05(54070000)      <1>     mov eax, dword [currClustD]
   195 000010AC 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 000010B2 58                  <1>     pop rax
   197 000010B3 E96EFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 000010B8 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 000010BF 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 000010C2 E82BF9FFFF          <1>     call getBufForDir
   206 000010C7 7241                <1>     jc .fnfError
   207 000010C9 E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 000010CE E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000010D3 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000010D5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   211 000010D6 7413                <1>     jz .chardev
   212 000010D8 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 000010DF 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 000010E3 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 000010E9 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 000010EB F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 000010F2 7416                <1>     jz .fnfError    
   221 000010F4 E8AD090000          <1>     call checkIfCharDevice
   222 000010F9 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 000010FB E8DD090000          <1>     call buildCharDir
   224 00001100 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 00001102 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 00001109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 0000110A F9                  <1>     stc
   229 0000110B B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 0000110D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 0000110E 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 00001112 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 00001116 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001119 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 0000111A 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 00001120 E8B4000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 00001125 8A25(08070000)      <1>     mov ah, byte [delChar]
   253 0000112B 803E00              <1>     cmp byte [rsi], 00h
   254 0000112E 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 00001130 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 00001132 750F                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 00001134 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000113A 74DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 0000113C 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 0000113F 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 00001141 F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 00001142 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 00001143 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 00001146 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 00001149 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 00001150 7406                <1>     jz .notVolIdExclusive
   273 00001152 F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 00001155 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 00001157 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 00001158 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 0000115F 743C                <1>     je .exclusiveDir
   280 00001161 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 00001163 743F                <1>     je .volFile ;If so, go here
   282 00001165 F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 00001168 751C                <1>     jnz .nextEntry
   284 0000116A 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 0000116C 7408                <1>     jz .scanName
   286 0000116E 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 00001170 7404                <1>     je .scanName            ;If so, we accept this file!
   288 00001172 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 00001174 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 00001176 56                  <1>     push rsi
   293 00001177 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 0000117E E83E000000          <1>     call .nameCompare
   295 00001183 5E                  <1>     pop rsi
   296 00001184 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 00001186 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 0000118D FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 00001193 FFC9                <1>     dec ecx
   302 00001195 758E                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 00001197 31C0                <1>     xor eax, eax
   305 00001199 FFC0                <1>     inc eax ;Clear ZF
   306 0000119B F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 0000119C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 0000119D F6C410              <1>     test ah, dirDirectory
   311 000011A0 75D4                <1>     jnz .scanName
   312 000011A2 EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 000011A4 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 000011A6 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 000011A8 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 000011AA 56                  <1>     push rsi
   322 000011AB 57                  <1>     push rdi
   323 000011AC 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 000011AE 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   325 000011B5 B904000000          <1>     mov ecx, 32/8
   326 000011BA F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 000011BD 5F                  <1>     pop rdi
   328 000011BE 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 000011BF F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 000011C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 000011C1 51                  <1>     push rcx
   339 000011C2 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 000011C4 81F90B000000        <1>     cmp ecx, 11
   342 000011CA 740B                <1>     je .ncExit
   343 000011CC FFC1                <1>     inc ecx
   344 000011CE A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 000011CF 74F3                <1>     je .ncLp    ;If equal, keep going
   346 000011D1 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 000011D5 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 000011D7 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 000011D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 000011D9 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 000011DE A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011E3 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 000011E5 B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 000011EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 000011EB 53                  <1>     push rbx    
   370 000011EC 57                  <1>     push rdi
   371 000011ED B90B000000          <1>     mov ecx, 11
   372 000011F2 B020                <1>     mov al, " "
   373 000011F4 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 000011F6 5F                  <1>     pop rdi
   375 000011F7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 000011FA AC                  <1>     lodsb   ;Get the char in al
   378 000011FB E8795F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 00001200 84C0                <1>     test al, al
   380 00001202 742D                <1>     jz .exit
   381 00001204 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 00001206 740E                <1>     je .extSpace
   383 00001208 3C2E                <1>     cmp al, "."
   384 0000120A 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 0000120C E8E9600000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 00001211 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 00001213 AA                  <1>     stosb   ;Store the char
   389 00001214 EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 00001216 AC                  <1>     lodsb   ;Get a char and increase rsi
   393 00001217 84C0                <1>     test al, al
   394 00001219 7416                <1>     jz .exit
   395 0000121B 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 0000121D 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 0000121F 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 00001223 AC                  <1>     lodsb
   401 00001224 84C0                <1>     test al, al
   402 00001226 7409                <1>     jz .exit
   403 00001228 3C20                <1>     cmp al, " "
   404 0000122A 7405                <1>     je .exit
   405 0000122C AA                  <1>     stosb
   406 0000122D EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 0000122F 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 00001231 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 00001232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 00001233 B908000000          <1>     mov ecx, 8
   419 00001238 F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 0000123A 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 0000123E 750D                <1>     jne .ext
   423 00001240 48FFCF              <1>     dec rdi
   424 00001243 FFC1                <1>     inc ecx
   425 00001245 81F908000000        <1>     cmp ecx, 8
   426 0000124B 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 0000124D 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 00001252 7506                <1>     jne .validExt
   430 00001254 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 00001258 7415                <1>     je .exit
   432                              <1> .validExt:
   433 0000125A B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 0000125C AA                  <1>     stosb
   435 0000125D B903000000          <1>     mov ecx, 3
   436 00001262 F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 00001264 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 00001268 7505                <1>     jne .exit
   440 0000126A 48FFCF              <1>     dec rdi
   441 0000126D EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 0000126F 31C0                <1>     xor eax, eax
   444 00001271 AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 00001272 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 00001273 50                  <1>     push rax
   451 00001274 53                  <1>     push rbx
   452 00001275 56                  <1>     push rsi
   453 00001276 57                  <1>     push rdi
   454 00001277 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 0000127A 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   456 00001280 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 00001282 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 00001285 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 0000128C FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 0000128E 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 00001290 488D35(D9060000)    <1>     lea rsi, fcbName
   462 00001297 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 0000129B 57                  <1>     push rdi
   464 0000129C 48B820202020202020- <1>     mov rax, "        "
   464 000012A5 20                  <1>
   465 000012A6 48AB                <1>     stosq
   466 000012A8 66AB                <1>     stosw
   467 000012AA AA                  <1>     stosb
   468 000012AB 5F                  <1>     pop rdi
   469 000012AC 48A5                <1>     movsq   ;Move 8 chars
   470 000012AE 66A5                <1>     movsw   ;Move 2 chars
   471 000012B0 A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 000012B1 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   474 000012B7 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 000012BA 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   476 000012C0 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 000012C3 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 000012C9 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 000012CC 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 000012D2 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 000012D5 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 000012DB 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 000012DE 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 000012E2 488D35(5A060000)    <1>     lea rsi, curDirCopy
   485 000012E9 E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 000012EE 5F                  <1>     pop rdi
   488 000012EF 5E                  <1>     pop rsi
   489 000012F0 5B                  <1>     pop rbx
   490 000012F1 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 000012F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 000012F3 30C0                <1>     xor al, al
   502 000012F5 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012F8 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   504 000012FA 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012FE 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   506 00001300 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 00001302 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 00001304 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001306 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   511 00001308 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 0000130A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 0000130B 30C0                <1>     xor al, al   ;Set to Directory
   516 0000130D EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 0000130F B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 00001311 50                  <1>     push rax
   525 00001312 57                  <1>     push rdi
   526 00001313 E876000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 00001318 5F                  <1>     pop rdi
   528 00001319 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000131A 72EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 0000131C 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 00001324 FFFFFF              <1>
   532 00001327 0F8497010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 0000132D 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   534 00001333 B0FF                <1>     mov al, -1
   535 00001335 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 0000133B 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 00001341 C605(05070000)00    <1>     mov byte [parDirExist], 0   
   538 00001348 C605(04070000)00    <1>     mov byte [fileExist], 0     
   539 0000134F 8A05(09070000)      <1>     mov al, byte [workingDrv]
   540 00001355 FEC0                <1>     inc al
   541 00001357 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 0000135B 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 00001360 7424                <1>     je .net
   544 00001362 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   545 00001369 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 00001370 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 00001374 FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 0000137A E894010000          <1>     call pathWalk
   549 0000137F 8F05(12070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 00001385 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 00001386 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 00001389 E990010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 0000138E B0FF                <1>     mov al, -1
   564 00001390 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   565 00001396 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 0000139C 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 000013A3 FEC0                <1>     inc al  ;make al = 0
   568 000013A5 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 000013AB E836000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013B0 72D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 000013B2 31C0                <1>     xor eax, eax
   574 000013B4 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013B6 74CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   576 000013B8 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013BB 74C8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   578 000013BD AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 000013BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 000013BF 31C0                <1>     xor eax, eax
   584 000013C1 4889FE              <1>     mov rsi, rdi
   585 000013C4 EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 000013C6 B0FF                <1>     mov al, -1
   590 000013C8 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 000013CB 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   597 000013D1 B0FF                <1>     mov al, -1
   598 000013D3 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 000013D9 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 000013E0 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 000013E6 C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 000013ED C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 000013F4 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 000013FB 7431                <1>     jz .notServer
   606 000013FD E8F1FEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 00001402 E8D95C0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 00001407 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 00001409 56                  <1>     push rsi
   610 0000140A 57                  <1>     push rdi
   611 0000140B 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   612 00001412 50                  <1>     push rax
   613 00001413 E8B8600000          <1>     call dosCrit1Enter
   614 00001418 E80B590000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 0000141D E8B8600000          <1>     call dosCrit1Exit
   616 00001422 58                  <1>     pop rax
   617 00001423 5F                  <1>     pop rdi
   618 00001424 5E                  <1>     pop rsi
   619 00001425 0F83B3000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 0000142B B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 0000142D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 0000142E F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 00001435 7514                <1>     jnz .skipRemoteQualify      ;So skip!
   628 00001437 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 0000143F FFFFFF              <1>
   629 00001442 B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 00001447 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001449 73E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   632                              <1> .skipRemoteQualify:
   633 0000144B E8A3FEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 00001450 9C                  <1>     pushfq  ;Save the flag state on stack
   635 00001451 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 00001452 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001455 E8135D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 0000145A 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 0000145C E80C5D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 00001461 756B                <1>     jnz .notNet
   641 00001463 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 00001465 7567                <1>     jne .notNet
   643 00001467 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 00001468 9D                  <1>     popfq
   645 00001469 66AD                <1>     lodsw
   646 0000146B 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 0000146F 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 00001471 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 00001477 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 0000147E 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 0000147F AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 00001480 E8F45C0000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 00001485 84C0                <1>     test al, al
   658 00001487 7435                <1>     jz .netEnd
   659 00001489 E8DF5C0000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 0000148E AA                  <1>     stosb
   661 0000148F 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 00001491 AC                  <1>     lodsb
   665 00001492 E8D65C0000          <1>     call swapPathSeparator
   666 00001497 74F8                <1>     jz .moveNetSharePtr
   667 00001499 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 0000149C 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 0000149F 84C0                <1>     test al, al ;Was this char null?
   670 000014A1 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 000014A3 4889FB              <1>     mov rbx, rdi
   672 000014A6 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 000014A9 E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 000014AE 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 000014B0 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 000014B3 E8B55C0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 000014B8 7504                <1>     jnz .netEnd
   680 000014BA C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 000014BE 5B                  <1>     pop rbx
   683 000014BF 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014C1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014C3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   685                              <1> .netFFnoCDS:
   686 000014C4 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 000014C9 CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 000014CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 000014CC 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 000014CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 000014CE 58                  <1>     pop rax ;Get the drive letter back
   695 000014CF 9D                  <1>     popfq   ;Get the flag state back
   696 000014D0 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 000014D2 B003                <1>     mov al, errPnf  ;Null path error
   699 000014D4 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 000014D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 000014D6 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 000014D8 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 000014DA B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 000014DC F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 000014DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 000014DE 84C0                <1>     test al, al
   709 000014E0 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 000014E2 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 000014E5 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 000014E7 50                  <1>     push rax    ;Save the drive letter
   714 000014E8 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 000014E9 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 000014EC E87C5C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 000014F1 58                  <1>     pop rax ;Get back the drive letter
   719 000014F2 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 000014F4 48FFC6              <1>     inc rsi
   723 000014F7 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 000014F9 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 000014FF FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 00001501 50                  <1>     push rax    ;Save the current drive number
   731 00001502 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 00001504 E8645C0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 00001509 58                  <1>     pop rax ;Get back the current drive number
   734 0000150A 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 0000150C C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 00001513 E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 00001518 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 0000151E F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 00001525 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 00001527 57                  <1>     push rdi
   755 00001528 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 0000152F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 00001535 5F                  <1>     pop rdi
   758 00001536 740F                <1>     jz .notNet
   759 00001538 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 0000153F B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 00001544 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 00001546 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 00001547 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 0000154A 7543                <1>     jnz .mainlp
   766                              <1>     ;Setup dummy dir data for Root directory
   767 0000154C 31C0                <1>     xor eax, eax
   768 0000154E 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   769 00001555 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   770 0000155C C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   771                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   772                              <1>     ; join host! Only when hitting the disk though.
   773 00001563 F605(2E060000)FF    <1>     test byte [skipDisk], -1
   774 0000156A 0F8489000000        <1>     jz .exitGood
   775 00001570 57                  <1>     push rdi
   776 00001571 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   777 00001578 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   778 0000157E 5F                  <1>     pop rdi
   779 0000157F 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   780 00001581 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   781 00001588 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   782 0000158A E93CFEFFFF          <1>     jmp getPathNoCanon
   783                              <1> .mainlp:
   784                              <1>     ;rbx must remain constant in this portion,
   785                              <1>     ; and is used to signify the first writable byte in the path
   786 0000158F 53                  <1>     push rbx
   787 00001590 E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   788 00001595 5B                  <1>     pop rbx
   789 00001596 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   790 00001598 84C0                <1>     test al, al
   791 0000159A 7507                <1>     jnz .notFile
   792 0000159C C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   793                              <1> .notFile:
   794 000015A3 53                  <1>     push rbx                ;The below messes up rbx
   795 000015A4 E860040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   796 000015A9 5B                  <1>     pop rbx
   797 000015AA E80B020000          <1>     call searchForPathspec  ;Now search the directory
   798 000015AF 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   799 000015B1 E87E020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   800 000015B6 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   801 000015B8 84C0                <1>     test al, al ;Exit if this pathspec was a file
   802 000015BA 743D                <1>     jz .exitGood
   803                              <1>     ;Here I have to take the cluster data from the found directory entry
   804                              <1>     ; and setup the search for the next pathspec portion
   805                              <1>     ;Copy necessary data from the current directory copy
   806 000015BC 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   807 000015C3 74CA                <1>     jz .mainlp
   808 000015C5 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   809 000015CC C1E010              <1>     shl eax, 10h    ;Shift it high
   810 000015CF 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   811                              <1>     ;eax now has the cluster number of the search
   812 000015D6 8905(7F070000)      <1>     mov dword [dirClustA], eax
   813 000015DC 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   814 000015E2 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   815 000015E4 8905(85070000)      <1>     mov dword [dirEntry], eax
   816 000015EA 668905(83070000)    <1>     mov word [dirSect], ax
   817 000015F1 EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   818                              <1> .badDriveExit:
   819 000015F3 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   820                              <1>     return
    13                              <2> %%_ret:
    14 000015F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .exitGood:
   822 000015F9 C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   823                              <1> .exit:
   824                              <1>     return
    13                              <2> %%_ret:
    14 00001600 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> prepareDir:
   827                              <1> ;Used to transfer the current directory if it is necessary.
   828                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   829                              <1> ; a relative path is specified.
   830                              <1> ;Input: al = 1-based drive letter
   831                              <1> ;Output: rdi = Pointing at where to place chars from source string
   832                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   833                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   834 00001601 56                  <1>     push rsi    ;Push ptr to source string
   835 00001602 E8C95E0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   836 00001607 E8645A0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   837 0000160C 7320                <1>     jnc .notJoin ;Very valid disk
   838 0000160E F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   839 00001615 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   840 00001617 F9                  <1>     stc
   841 00001618 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   842                              <1> .getDPB: 
   843 0000161A 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   844 00001621 E802570000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   845                              <1>     return
    13                              <2> %%_ret:
    14 00001626 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> .okJoin:
   847 00001627 E8EEFFFFFF          <1>     call .getDPB
   848 0000162C EB3A                <1>     jmp short .joinEp
   849                              <1> .notJoin:
   850 0000162E E8E7FFFFFF          <1>     call .getDPB
   851                              <1>     ;rbp = DPB ptr now
   852                              <1> .critExit:
   853 00001633 E8A25E0000          <1>     call dosCrit1Exit
   854 00001638 7253                <1>     jc .badDriveExit 
   855 0000163A 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   856                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   857                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   858                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   859                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   860                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   861 00001641 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   862 00001648 4889FB              <1>     mov rbx, rdi
   863 0000164B 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   864 0000164F 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   865                              <1>     ;Now check if we have a subst to handle
   866 00001652 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   867 00001658 7535                <1>     jnz .prepDirSubst
   868 0000165A F605(01070000)FF    <1>     test byte [spliceFlag], -1
   869 00001661 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   870                              <1>     ;Else we copy the first two chars only (X:)
   871 00001663 66A5                <1>     movsw  
   872 00001665 B05C                <1>     mov al, "\"
   873 00001667 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   874                              <1> .joinEp:
   875 00001668 31C0                <1>     xor eax, eax    ;Get cluster 0
   876 0000166A EB1B                <1>     jmp short .prepDirExitSkip
   877                              <1> .prepLoop:
   878 0000166C AC                  <1>     lodsb
   879 0000166D 84C0                <1>     test al, al ;If al was null, then we stop
   880 0000166F 7403                <1>     jz .prepDirExit
   881 00001671 AA                  <1>     stosb
   882 00001672 EBF8                <1>     jmp short .prepLoop
   883                              <1> .prepDirExit:
   884 00001674 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   885 00001678 7403                <1>     je .prepDirExitSkipPathsep
   886 0000167A B05C                <1>     mov al, "\"
   887 0000167C AA                  <1>     stosb   ;Store the path separator and increment rdi
   888                              <1> .prepDirExitSkipPathsep:
   889 0000167D 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   890 00001684 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   891                              <1> .prepDirExitSkip:
   892 00001687 E816000000          <1>     call prepSetupDirSearchVars
   893 0000168C F8                  <1>     clc ;Clear carry before exiting
   894                              <1> .badDriveExit:
   895 0000168D 5E                  <1>     pop rsi
   896                              <1>     return
    13                              <2> %%_ret:
    14 0000168E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> .prepDirSubst:
   898 0000168F 51                  <1>     push rcx
   899 00001690 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   900                              <1> .prepDirCopy1:
   901 00001694 F3A4                <1>     rep movsb   ;Copy the string over
   902 00001696 59                  <1>     pop rcx
   903 00001697 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   904 0000169E 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   905 000016A0 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   906                              <1> prepSetupDirSearchVars:
   907                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   908                              <1> ;       rbp -> Working DPB
   909 000016A2 51                  <1>     push rcx
   910 000016A3 31C9                <1>     xor ecx, ecx
   911 000016A5 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   912 000016AC 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   913 000016B2 E855F3FFFF          <1>     call getFATtype ;Get type of fat
   914 000016B7 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   915 000016BD 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   916                              <1>     ;FAT 32 here
   917 000016BF 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   918 000016C1 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   919 000016C3 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   920                              <1> .psdsvExit:
   921 000016C6 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   922 000016CC 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   923 000016D2 59                  <1>     pop rcx
   924                              <1>     return 
    13                              <2> %%_ret:
    14 000016D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> copyPathspec:
   927                              <1> ;1) Copies a path portion from the source buffer to the destination
   928                              <1> ;2) Advances rsi to the next null, \ or /
   929                              <1> ;3) Expands all * to ?'s
   930                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   931                              <1> ;    next path separator and rdi pointing to the previous pathsep
   932                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   933                              <1> ;    with rsi moving to path separator
   934                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   935                              <1> ;
   936                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   937                              <1> ;           rdi = Points to where to store it
   938                              <1> ;
   939                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   940                              <1> ;           rdi = First char of next space to store next pathspec
   941                              <1> ;           al = Last char stored (either \ or NULL)
   942                              <1> ;           CF=NC = OK path
   943                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   944                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   945 000016D4 57                  <1>     push rdi    ;Save the pointer into the user buffer
   946 000016D5 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   947 000016DC 488D3D(D9060000)    <1>     lea rdi, fcbName
   948 000016E3 57                  <1>     push rdi
   949 000016E4 B903000000          <1>     mov ecx, 3
   950 000016E9 B820202020          <1>     mov eax, "    " ;Four spaces
   951 000016EE F3AB                <1>     rep stosd   ;Store 12 spaces
   952 000016F0 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   953                              <1> 
   954 000016F1 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   955 000016F8 AC                  <1>     lodsb   ;Get first char from user path in al
   956 000016F9 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   957 000016FB 746B                <1>     je .cpsDots
   958 000016FD 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   959                              <1> ;First char is not a dot, so now check if starts with E5h? 
   960                              <1> ;If so, store 05h in its place!
   961 00001700 3CE5                <1>     cmp al, 0E5h
   962 00001702 7506                <1>     jne .cpsMainLoop
   963 00001704 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   964 00001707 B005                <1>     mov al, 05h
   965 00001709 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   966                              <1> .cpsMainLoop:
   967 0000170A AC                  <1>     lodsb   ;Get the char in al and advance rsi
   968 0000170B 84C0                <1>     test al, al ;Is it the null char?
   969 0000170D 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   970 00001713 E8555A0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   971 00001718 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   972 0000171E 3C2E                <1>     cmp al, "." ;Filename extension separator
   973 00001720 7420                <1>     je .cpsExtension
   974                              <1>     ;If we have space in the filename, we check to see if the next char is *
   975 00001722 3C2A                <1>     cmp al, "*" ;Wildcard?
   976 00001724 7430                <1>     je .cpsWildcard
   977 00001726 3C3F                <1>     cmp al, "?" ;Good wildcard?
   978 00001728 740C                <1>     je .store
   979 0000172A E84A5A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   980 0000172F E8C65B0000          <1>     call checkCharValid ; and check it is a valid char
   981 00001734 7472                <1>     je .cpsExitError
   982                              <1> .store:
   983 00001736 4839DF              <1>     cmp rdi, rbx
   984 00001739 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   985 0000173B AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   986 0000173C EBCC                <1>     jmp short .cpsMainLoop
   987                              <1> .cpsInvalidChar:
   988 0000173E 30C0                <1>     xor al, al
   989 00001740 EB3B                <1>     jmp short .cpsProcessName
   990                              <1> .cpsExtension:
   991                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   992 00001742 B903000000          <1>     mov ecx, 3 
   993 00001747 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   994 0000174E 57                  <1>     push rdi
   995 0000174F B020                <1>     mov al, " "
   996 00001751 F3AA                <1>     rep stosb
   997 00001753 5F                  <1>     pop rdi
   998 00001754 EBB4                <1>     jmp short .cpsMainLoop
   999                              <1> .cpsWildcard:
  1000                              <1> ;Fill the entire FCB filespec with ?'s.
  1001                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1002                              <1> ; *'s from crashing DOS :)
  1003 00001756 AC                  <1>     lodsb   ;Get char, inc rsi
  1004 00001757 3C2A                <1>     cmp al, "*"
  1005 00001759 74FB                <1>     je short .cpsWildcard
  1006 0000175B 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1007 0000175E B03F                <1>     mov al, "?"
  1008                              <1> .cpsWildcardLp:
  1009 00001760 AA                  <1>     stosb
  1010 00001761 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1011 00001764 75FA                <1>     jne short .cpsWildcardLp
  1012 00001766 EBA2                <1>     jmp short .cpsMainLoop
  1013                              <1> 
  1014                              <1> .cpsDots:
  1015 00001768 AA                  <1>     stosb   ;Store the first dot
  1016 00001769 8A06                <1>     mov al, byte [rsi]
  1017 0000176B 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1018 0000176D 752E                <1>     jne .cpsStore
  1019 0000176F A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1020 00001770 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1021 00001772 84C0                <1>     test al, al
  1022 00001774 7407                <1>     jz .cpsProcessName
  1023 00001776 E8F2590000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1024 0000177B 752B                <1>     jnz .cpsExitError
  1025                              <1> .cpsProcessName:
  1026                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1027 0000177D 84C0                <1>     test al, al 
  1028 0000177F 741C                <1>     jz .cpsStore
  1029 00001781 E8E7590000          <1>     call swapPathSeparator
  1030 00001786 7415                <1>     jz .cpsStore
  1031                              <1> .cpsFindTerminator:
  1032 00001788 AC                  <1>     lodsb
  1033 00001789 84C0                <1>     test al, al 
  1034 0000178B 7410                <1>     jz .cpsStore
  1035 0000178D E8DB590000          <1>     call swapPathSeparator
  1036 00001792 7409                <1>     jz .cpsStore
  1037 00001794 E8615B0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1038 00001799 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1039                              <1>     ;If we encounter a terminator, convert to 0
  1040 0000179B 30C0                <1>     xor al, al
  1041                              <1> .cpsStore:
  1042 0000179D 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1043 000017A4 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1044 000017A5 5F                  <1>     pop rdi
  1045 000017A6 F8                  <1>     clc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 000017A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .cpsExitError:
  1048 000017A8 5F                  <1>     pop rdi
  1049 000017A9 F9                  <1>     stc
  1050                              <1>     return
    13                              <2> %%_ret:
    14 000017AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> .cpsSkipPathseps:
  1052 000017AB AC                  <1>     lodsb
  1053 000017AC E8BC590000          <1>     call swapPathSeparator
  1054 000017B1 74F8                <1>     jz .cpsSkipPathseps
  1055 000017B3 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1056 000017B6 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1057 000017B8 EBE3                <1>     jmp short .cpsStore
  1058                              <1> 
  1059                              <1> searchForPathspec:
  1060                              <1>     ;Now search the current directory for this filename
  1061                              <1>     ;Find first using SDA ffBlock
  1062                              <1>     ;If al = 0, we have final file name or directory name
  1063                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1064                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1065                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1066                              <1>     ;                 FF block somewhat setup
  1067                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1068 000017BA 50                  <1>     push rax
  1069 000017BB 53                  <1>     push rbx
  1070 000017BC 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1071 000017BD 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1072 000017BE 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1073 000017C5 53                  <1>     push rbx    ;and push it onto the stack
  1074                              <1> ;Evaluate whether we are searching for a file for a directory
  1075 000017C6 84C0                <1>     test al, al
  1076 000017C8 741D                <1>     jz .sfpPNfile
  1077                              <1>     ;Fall if subdir
  1078 000017CA 488D3D(D9060000)    <1>     lea rdi, fcbName
  1079 000017D1 B03F                <1>     mov al, "?" ;Search for wildcard
  1080 000017D3 B90B000000          <1>     mov ecx, 11
  1081 000017D8 F2AE                <1>     repne scasb
  1082 000017DA 7450                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1083 000017DC B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1084 000017DE C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1085 000017E5 EB07                <1>     jmp short .sfpPNMain
  1086                              <1> .sfpPNfile:
  1087                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1088 000017E7 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1089                              <1> .sfpPNMain:
  1090 000017EE 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1091 000017F5 7418                <1>     je .sfpPNNoDisk
  1092 000017F7 E8E7F7FFFF          <1>     call searchDir
  1093 000017FC 7211                <1>     jc .sfpPNNoDisk
  1094 000017FE 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1095 00001805 7507                <1>     jne .noAdjust
  1096                              <1>     ;Readjust when the start of a dir entry name is 05h
  1097 00001807 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1098                              <1> .noAdjust:
  1099 0000180E F8                  <1>     clc ;Ensure the carry flag is clear here!
  1100                              <1> .sfpPNNoDisk:
  1101 0000180F 5B                  <1>     pop rbx
  1102 00001810 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1103 00001816 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1104 00001817 5E                  <1>     pop rsi
  1105 00001818 5B                  <1>     pop rbx
  1106 00001819 58                  <1>     pop rax ;Get back the original al value
  1107                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000181A 738E                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108 0000181C 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1109 0000181E F9                  <1>     stc         ;Dont forget to set CF again!!
  1110 0000181F B802000000          <1>     mov eax, errFnf
  1111                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001824 7484                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1112 00001826 B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1113                              <1>     return
    13                              <2> %%_ret:
    14 0000182B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .sfpPnf:
  1115 0000182C B803000000          <1>     mov eax, errPnf
  1116                              <1> .sfpErrExit:
  1117 00001831 F9                  <1>     stc ;Set carry
  1118 00001832 EBDB                <1>     jmp short .sfpPNNoDisk
  1119                              <1> 
  1120                              <1> addPathspecToBuffer:
  1121                              <1> ;Input: fcbName = Qualified pathname portion
  1122                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1123                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1124                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1125                              <1> ;rbx points to the "head of the path"
  1126                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1127                              <1> ;Converts the special char if the filename starts with it!
  1128 00001834 F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1129                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000183B 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1130 0000183D 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1131 00001844 7469                <1>     je .aptbDots
  1132                              <1>     ;Copy filename over to internal buffer
  1133                              <1> .aptbAddNull:
  1134 00001846 56                  <1>     push rsi    ;Save source pointer position
  1135 00001847 488D35(D9060000)    <1>     lea rsi, fcbName
  1136 0000184E 803E05              <1>     cmp byte [rsi], 05h
  1137 00001851 7503                <1>     jne .notSpecialChar
  1138 00001853 C606E5              <1>     mov byte [rsi], 0E5h
  1139                              <1> .notSpecialChar:
  1140 00001856 E8D8F9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1141 0000185B 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1142 0000185E 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1143 0000185F E8C4000000          <1>     call .aptbInterveneEnterJoin
  1144                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001864 72C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1145                              <1> .aptbHandleTerminator:
  1146 00001866 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1147 0000186C 84C0                <1>     test al, al
  1148 0000186E 741A                <1>     jz .aptbHandleNull
  1149 00001870 E8F8580000          <1>     call swapPathSeparator
  1150 00001875 0F85C5000000        <1>     jnz .aptbErrorExit
  1151                              <1> ;Handle path separator here directly
  1152 0000187B 50                  <1>     push rax    ;Preserve the terminator char
  1153 0000187C 8A47FF              <1>     mov al, byte [rdi - 1]
  1154 0000187F E8E9580000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1155 00001884 58                  <1>     pop rax
  1156 00001885 7426                <1>     jz .aptbExitOk 
  1157 00001887 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1158 00001888 EB23                <1>     jmp short .aptbExitOk
  1159                              <1> .aptbHandleNull:
  1160 0000188A E85B000000          <1>     call .aptbAtHeadOfPath
  1161 0000188F 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1162 00001891 50                  <1>     push rax
  1163 00001892 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1164 00001895 E8D3580000          <1>     call swapPathSeparator
  1165 0000189A 58                  <1>     pop rax
  1166 0000189B 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1167 0000189D 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1168 000018A0 EB0B                <1>     jmp short .aptbExitOk
  1169                              <1> .aptbHandleNullNoOverwritePrim:
  1170 000018A2 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1171 000018A6 7403                <1>     je short .aptbHandleNullNoOverwrite
  1172                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1173 000018A8 48FFCF              <1>     dec rdi
  1174                              <1> .aptbHandleNullNoOverwrite:
  1175 000018AB 8807                <1>     mov byte [rdi], al  ;Write in a null
  1176                              <1> .aptbExitOk:
  1177 000018AD F8                  <1>     clc
  1178                              <1>     return
    13                              <2> %%_ret:
    14 000018AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .aptbDots:
  1180                              <1> ;For one dot, we pull the terminating null to rdi
  1181                              <1> ;For two dots, we search backwards for the previous "\"
  1182 000018AF 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1183 000018B6 7409                <1>     je .aptbMoreDots
  1184 000018B8 C605(D9060000)20    <1>     mov byte [fcbName], " "
  1185 000018BF EB85                <1>     jmp short .aptbAddNull
  1186                              <1> .aptbMoreDots:
  1187                              <1> ;Here we have two dots
  1188 000018C1 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1189 000018C6 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1190                              <1> ;Else, we are able to decrement.
  1191 000018C8 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1192                              <1> .aptbDotsLp:
  1193 000018CF E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1194 000018D4 7490                <1>     je .aptbHandleTerminator
  1195 000018D6 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1196 000018D9 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1197 000018DB E88D580000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1198 000018E0 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1199 000018E2 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1200 000018E5 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1201                              <1> .aptbAtHeadOfPath:
  1202                              <1> ;Returns ZF=ZE if at head of path.
  1203 000018EA 57                  <1>     push rdi
  1204 000018EB 48FFCF              <1>     dec rdi
  1205 000018EE 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1206 000018F1 5F                  <1>     pop rdi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 000018F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .aptbInterveneExitJoin:
  1209                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1210 000018F3 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1211 000018FA 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1212 00001900 753E                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1213                              <1>     ;Now we change the drive letter and return
  1214 00001902 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1215 00001905 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1216 00001908 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1217 0000190A E861570000          <1>     call getCDSNotJoin
  1218                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000190F 72E1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1219 00001911 56                  <1>     push rsi
  1220 00001912 57                  <1>     push rdi
  1221 00001913 53                  <1>     push rbx
  1222 00001914 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1223 0000191B E808540000          <1>     call getDiskDPB 
  1224 00001920 5B                  <1>     pop rbx
  1225 00001921 5F                  <1>     pop rdi
  1226 00001922 5E                  <1>     pop rsi
  1227 00001923 E93EFFFFFF          <1>     jmp .aptbHandleTerminator
  1228                              <1> .aptbInterveneEnterJoin:
  1229                              <1> ;Handles join paths.
  1230 00001928 F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1231                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000192F 74C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1232 00001931 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1233 00001932 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1234 00001939 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1235 0000193E 5E                  <1>     pop rsi
  1236                              <1>     return
    13                              <2> %%_ret:
    14 0000193F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .aptbErrorExit:
  1238 00001940 B002                <1>     mov al, errFnf
  1239 00001942 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1240 00001949 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1241 00001950 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1242 00001957 F9                  <1>     stc
  1243                              <1>     return
    13                              <2> %%_ret:
    14 00001958 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1244                              <1> 
  1245                              <1> handleJoin:
  1246                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1247                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1248                              <1> ;Input:
  1249                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1250                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1251                              <1> ; rax = 0
  1252                              <1> ;Output:
  1253                              <1> ;If no match, no effect.
  1254                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1255                              <1> ; join drive. rsi is advanced to the next path componant.
  1256                              <1> ;If CF=CY => Disk detection error
  1257 00001959 51                  <1>     push rcx
  1258 0000195A 55                  <1>     push rbp
  1259 0000195B 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1260 00001962 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1261 00001966 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1262 0000196C 740C                <1>     jz .okToGo
  1263 0000196E F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1264 00001974 0F848C000000        <1>     jz .exitNoCrit
  1265                              <1> .okToGo:
  1266 0000197A E8515B0000          <1>     call dosCrit1Enter
  1267 0000197F 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1268 00001986 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1269                              <1> .checkCDS:
  1270 00001988 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1271 0000198E 7560                <1>     jne .gotoNextCDS
  1272                              <1> .scanCDSName:
  1273                              <1> ;Get the length of the CDS path componant to check
  1274 00001990 51                  <1>     push rcx
  1275 00001991 57                  <1>     push rdi
  1276 00001992 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1277 00001993 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1278 00001996 E82E580000          <1>     call strlen     ;Get length of the path componant in ecx
  1279 0000199B FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1280 0000199D F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1281 0000199F 754C                <1>     jnz .notString
  1282                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1283 000019A1 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1284 000019A2 E8C6570000          <1>     call swapPathSeparator
  1285 000019A7 7407                <1>     jz .goodString
  1286 000019A9 84C0                <1>     test al, al
  1287 000019AB 7540                <1>     jnz .notString
  1288 000019AD 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1289                              <1> .goodString:
  1290                              <1>     ;Here we know we have the right string.
  1291 000019B0 59                  <1>     pop rcx ;Trash original rsi
  1292 000019B1 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1293 000019B2 59                  <1>     pop rcx 
  1294                              <1>     ;Now store the path in the original CDS before intervening
  1295                              <1>     ; in the path
  1296 000019B3 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1297 000019BA 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1298 000019BB 57                  <1>     push rdi
  1299 000019BC 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1300 000019BF 53                  <1>     push rbx    ;Preserve the head of the path
  1301 000019C0 E863530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1302 000019C5 5B                  <1>     pop rbx
  1303 000019C6 5F                  <1>     pop rdi
  1304 000019C7 5E                  <1>     pop rsi
  1305 000019C8 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1306 000019CA 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1307 000019D0 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1308 000019D2 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1309 000019D6 7403                <1>     je .notNet
  1310 000019D8 F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1311 000019D9 EB26                <1>     jmp short .exit
  1312                              <1> .notNet:
  1313                              <1> ; Join entry intervention occurs here.
  1314 000019DB 8843FE              <1>     mov byte [rbx - 2], al
  1315 000019DE 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1316                              <1> .pullLp:
  1317 000019E2 AC                  <1>     lodsb
  1318 000019E3 AA                  <1>     stosb
  1319 000019E4 84C0                <1>     test al, al
  1320 000019E6 75FA                <1>     jnz .pullLp
  1321 000019E8 48FFCF              <1>     dec rdi
  1322 000019EB EB14                <1>     jmp short .exit
  1323                              <1> .notString:
  1324 000019ED 5E                  <1>     pop rsi
  1325 000019EE 5F                  <1>     pop rdi
  1326 000019EF 59                  <1>     pop rcx
  1327                              <1> .gotoNextCDS:
  1328 000019F0 4881C55F000000      <1>     add rbp, cds_size
  1329 000019F7 FFC1                <1>     inc ecx 
  1330 000019F9 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1331 000019FF 7587                <1>     jnz .checkCDS
  1332                              <1> .exit:
  1333 00001A01 E8D45A0000          <1>     call dosCrit1Exit
  1334                              <1> .exitNoCrit:
  1335 00001A06 5D                  <1>     pop rbp
  1336 00001A07 59                  <1>     pop rcx
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001A08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> checkDevPath:
  1340                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1341                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1342                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1343                              <1> ; and the next componant we are searching for is a char device, we 
  1344                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1345                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1346                              <1> ;Input: rsi = Pointer to the next path spec
  1347                              <1> ;       rdi = Buffer where to add it
  1348                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1349                              <1> ;        If devicename in the root dir, then replace pathsep
  1350 00001A09 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1351                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001A10 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1352                              <1> ;First check we are searching in the root dir!
  1353 00001A12 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1354                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001A18 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1355                              <1> ;Now check to see if fcbname is DEV
  1356 00001A1A 50                  <1>     push rax
  1357 00001A1B 48B844455620202020- <1>     mov rax, "DEV     "
  1357 00001A24 20                  <1>
  1358 00001A25 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1359 00001A2C 58                  <1>     pop rax
  1360 00001A2D 7565                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1361 00001A2F 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1361 00001A37 205C                <1>
  1362 00001A39 7559                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1363                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1364 00001A3B F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1365                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001A42 74C4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1366                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1367 00001A44 56                  <1>     push rsi    ;Save if not followed by dev!
  1368 00001A45 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1369 00001A46 488D3D(D9060000)    <1>     lea rdi, fcbName
  1370 00001A4D E899F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1371                              <1>     ;Returns in al the terminating char of the source string
  1372 00001A52 5F                  <1>     pop rdi
  1373 00001A53 5E                  <1>     pop rsi
  1374                              <1>     ;If al is a pathsep, fail 
  1375 00001A54 E814570000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1376 00001A59 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1377                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1378 00001A5B 53                  <1>     push rbx
  1379 00001A5C E845000000          <1>     call checkIfCharDevice
  1380 00001A61 5B                  <1>     pop rbx ;Don't need bh yet
  1381 00001A62 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1382                              <1> .repDev:
  1383                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1384 00001A64 C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1384 00001A6C 5620                <1>
  1385 00001A6E C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1385 00001A76 2020                <1>
  1386 00001A78 C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1386 00001A80 205C                <1>
  1387 00001A82 B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1388 00001A84 EB0C                <1>     jmp short .exit
  1389                              <1> .pathSepExit:
  1390                              <1> ;Here only if the device was determined to be a char device.
  1391 00001A86 30C0                <1>     xor al, al
  1392 00001A88 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1393 00001A8E C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1394                              <1> .exit:
  1395 00001A92 F8                  <1>     clc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00001A93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .checkDevice:
  1398 00001A94 E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1399 00001A99 72F7                <1>     jc .exit                ;If not a device, silently return
  1400 00001A9B 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1401 00001AA2 74E2                <1>     je .pathSepExit
  1402 00001AA4 EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1403                              <1> 
  1404                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1405                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1406                              <1> ; device driver chain. 
  1407                              <1> ;Output: CF=CY if not found
  1408                              <1> ;        CF=NC if found
  1409                              <1> ;           BH = Low byte of the device attribute word
  1410 00001AA6 50                  <1>     push rax
  1411 00001AA7 57                  <1>     push rdi
  1412 00001AA8 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1413 00001AAF 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1414                              <1> .checkName:
  1415 00001AB6 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1416 00001ABA 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1417 00001ABC F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1418 00001ABF 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1419 00001AC1 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1420 00001AC4 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1421 00001AC7 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1422 00001ACB 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1423                              <1> .walkList:
  1424 00001ACD 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1425 00001AD0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1426 00001AD7 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1427 00001AD9 F9                  <1>     stc
  1428                              <1> .exit:
  1429 00001ADA 5F                  <1>     pop rdi
  1430 00001ADB 58                  <1>     pop rax
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00001ADC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> 
  1433                              <1> buildCharDir:
  1434                              <1> ;Build a dummy directory entry for the char device in FCBName
  1435                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1436 00001ADD 50                  <1>     push rax
  1437 00001ADE 57                  <1>     push rdi
  1438 00001ADF C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1439 00001AE6 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1440                              <1>     ;Zero the directory copy (32 bytes)
  1441 00001AED 50                  <1>     push rax
  1442 00001AEE 51                  <1>     push rcx
  1443 00001AEF 57                  <1>     push rdi
  1444 00001AF0 31C0                <1>     xor eax, eax    ;Zero rax
  1445 00001AF2 B904000000          <1>     mov ecx, 4
  1446 00001AF7 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1447 00001AFA 5F                  <1>     pop rdi
  1448 00001AFB 59                  <1>     pop rcx
  1449 00001AFC 58                  <1>     pop rax
  1450 00001AFD C705(85070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1450 00001B05 FFFF                <1>
  1451 00001B07 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1452 00001B0E 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1453 00001B11 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1454 00001B16 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1455 00001B19 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1456                              <1>     ;Get date and time and set the write time in the directory entry
  1457 00001B1D E8AC120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1458 00001B22 E892130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1459 00001B27 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1460 00001B2A 31C0                <1>     xor eax, eax
  1461 00001B2C 5F                  <1>     pop rdi
  1462 00001B2D 58                  <1>     pop rax
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00001B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> checkFailingComp:
  1466                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1467                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1468                              <1> ;Returns: ZF=ZE => Last path componant
  1469                              <1> ;         ZF=NZ => Not last path componant
  1470 00001B2F 50                  <1>     push rax
  1471 00001B30 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1472 00001B36 84C0                <1>     test al, al
  1473 00001B38 58                  <1>     pop rax
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00001B39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001B3A 4889D7              <1>     mov rdi, rdx
     8 00001B3D E887560000          <1>     call strlen
     9 00001B42 81F940000000        <1>     cmp ecx, 64
    10 00001B48 760E                <1>     jbe .okLength
    11                              <1> .badFile:
    12 00001B4A B002                <1>     mov al, errFnf
    13 00001B4C E9CA590000          <1>     jmp extErrExit
    14                              <1> .badPath:
    15 00001B51 B003                <1>     mov al, errPnf
    16 00001B53 E9C3590000          <1>     jmp extErrExit
    17                              <1> .okLength:
    18 00001B58 4889D6              <1>     mov rsi, rdx
    19 00001B5B E8CC560000          <1>     call checkPathspecOK
    20 00001B60 0F8226020000        <1>     jc .bad  ;Don't allow any malformed chars, exit Acc den
    21                              <1> .pathOk:
    22 00001B66 E87C570000          <1>     call scanPathWC
    23 00001B6B 72E4                <1>     jc .badPath ;Dont allow wildcards
    24                              <1>     ;Path is ok, now proceed
    25 00001B6D C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    26 00001B74 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    27 00001B7B E88FF7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    28                              <1>     ;If the path exists, exit error
    29 00001B80 0F8395590000        <1>     jnc extErrExit
    30                              <1>     ;Handle resolved null paths here!!!
    31 00001B86 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    32 00001B8C 30C0                <1>     xor al, al
    33 00001B8E 3D003A5C00          <1>     cmp eax, 005C3A00h
    34 00001B93 74B5                <1>     je .badFile
    35                              <1>     ;-----------------------------
    36                              <1>     ;TEST THAT THE DRIVE IS VALID
    37                              <1>     ;This is clearly unnecessary
    38                              <1>     ;    Keep it for now...
    39                              <1>     ;-----------------------------
    40 00001B95 57                  <1>     push rdi
    41 00001B96 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    42 00001B9D 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    43 00001BA3 5F                  <1>     pop rdi
    44 00001BA4 0F8471590000        <1>     jz extErrExit  ;Exit access denied
    45                              <1>     ;-------------------------------------------
    46                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    47 00001BAA E880FFFFFF          <1>     call checkFailingComp
    48 00001BAF 0F8566590000        <1>     jnz extErrExit
    49                              <1>     ;So all is well, the new subdirectories name is in fcbName
    50                              <1>     ;The parent dir's directory entry is in the curDirCopy
    51 00001BB5 E805540000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    52                              <1>     ;returns in rdi the working cds ptr
    53 00001BBA 7312                <1>     jnc .notNet
    54 00001BBC B803110000          <1>     mov eax, 1103h
    55 00001BC1 CD2F                <1>     int 2fh
    56 00001BC3 0F8252590000        <1>     jc extErrExit
    57 00001BC9 E93F590000          <1>     jmp extGoodExit
    58                              <1> .notNet:
    59 00001BCE E8FD580000          <1>     call dosCrit1Enter
    60                              <1>     ;Current dpb ptr is already set
    61                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    62                              <1>     ;First we make a dummy dir in curDirCopy
    63 00001BD3 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    64 00001BDA 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    65 00001BE1 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    66 00001BE8 48A5                <1>     movsq   ;Copy the name over
    67 00001BEA A5                  <1>     movsd
    68 00001BEB E8DE110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    69 00001BF0 E8C4120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    70 00001BF5 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    71 00001BFB 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    72 00001C01 31C0                <1>     xor eax, eax
    73 00001C03 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    74 00001C09 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    75 00001C10 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    76                              <1> .searchForDirSpace:
    77 00001C16 8905(7F070000)      <1>     mov dword [dirClustA], eax
    78 00001C1C 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    79 00001C1E 668905(83070000)    <1>     mov word [dirSect], ax
    80 00001C25 8905(85070000)      <1>     mov dword [dirEntry], eax
    81 00001C2B E896050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    82 00001C30 7328                <1>     jnc .dirEntryFnd
    83 00001C32 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    83 00001C3A 0000                <1>
    84 00001C3C 0F844A010000        <1>     je .bad ;Set CF and exit
    85 00001C42 E868060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    86 00001C47 0F823F010000        <1>     jc .bad
    87 00001C4D 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    88 00001C52 0F8434010000        <1>     je .bad
    89                              <1>     ;Else eax = Newly allocated cluster
    90 00001C58 EBBC                <1>     jmp short .searchForDirSpace
    91                              <1> .dirEntryFnd:
    92                              <1> ;rdi points to current directory copy
    93                              <1> ;rsi now points to offset in the buffer to write the entry to
    94                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    95 00001C5A 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
    96 00001C61 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    97                              <1>      
    98 00001C65 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    99 00001C6C 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   100 00001C73 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   101 00001C76 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   102                              <1> ;Must now request a cluster and sanitise it
   103 00001C7D E86FEEFFFF          <1>     call startNewChain  ;Get cluster number in eax
   104 00001C82 0F8209010000        <1>     jc .badExit
   105 00001C88 E85E060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   106 00001C8D 0F82FE000000        <1>     jc .badExit
   107                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   108 00001C93 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   109 00001C9A C1E810              <1>     shr eax, 10h    ;Get high word low
   110 00001C9D 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   111 00001CA4 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   112 00001CAB E842EDFFFF          <1>     call getBufForDir
   113 00001CB0 0F82DB000000        <1>     jc .badExit
   114 00001CB6 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   115 00001CBD 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   116 00001CC4 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   117 00001CC9 B904000000          <1>     mov ecx, 4
   118 00001CCE F348A5              <1>     rep movsq   ;Copy over the buffered directory
   119 00001CD1 E8B7EBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   120                              <1>     ;Now need to read in data sector and make two entries . and ..
   121 00001CD6 57                  <1>     push rdi
   122 00001CD7 51                  <1>     push rcx
   123 00001CD8 B90B000000          <1>     mov ecx, 11
   124 00001CDD 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   125 00001CE4 B020                <1>     mov al, " "
   126 00001CE6 F3AA                <1>     rep stosb
   127 00001CE8 59                  <1>     pop rcx
   128 00001CE9 5F                  <1>     pop rdi
   129 00001CEA 48B82E000000000000- <1>     mov rax, "."
   129 00001CF3 00                  <1>
   130 00001CF4 8805(5A060000)      <1>     mov byte [curDirCopy], al
   131 00001CFA 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001D01 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001D08 C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   134 00001D0F C1E210              <1>     shl edx, 10h
   135 00001D12 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001D14 E85EEDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001D19 E8D4ECFFFF          <1>     call getBufForDir
   138 00001D1E 7271                <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001D20 488D35(5A060000)    <1>     lea rsi, curDirCopy
   141 00001D27 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001D2B B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001D30 F348A5              <1>     rep movsq
   144                              <1>     ;Now create .. entry
   145 00001D33 C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   146 00001D3A 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   147 00001D40 E8C7ECFFFF          <1>     call getFATtype
   148 00001D45 81F902000000        <1>     cmp ecx, 2
   149 00001D4B 7207                <1>     jb .notFAT32
   150 00001D4D 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   151 00001D50 7502                <1>     jne .notFAT32
   152 00001D52 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   153                              <1> .notFAT32:
   154 00001D54 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   155 00001D5B C1E810              <1>     shr eax, 10h
   156 00001D5E 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   157 00001D65 488D35(5A060000)    <1>     lea rsi, curDirCopy
   158 00001D6C B904000000          <1>     mov ecx, 4
   159 00001D71 F348A5              <1>     rep movsq
   160 00001D74 E814EBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   161 00001D79 E89EE9FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   162 00001D7E 7211                <1>     jc .badExit
   163                              <1> .okExit:
   164                              <1>     ;AND WE ARE DONE!
   165 00001D80 E855570000          <1>     call dosCrit1Exit
   166 00001D85 31C0                <1>     xor eax, eax
   167 00001D87 E981570000          <1>     jmp extGoodExit
   168                              <1> .bad:
   169 00001D8C B805000000          <1>     mov eax, errAccDen
   170                              <1> .badExit:
   171 00001D91 E844570000          <1>     call dosCrit1Exit
   172 00001D96 E980570000          <1>     jmp extErrExit
   173                              <1> 
   174                              <1> removeDIR:         ;ah = 3Ah
   175 00001D9B 4889D7              <1>     mov rdi, rdx
   176 00001D9E E826540000          <1>     call strlen
   177 00001DA3 81F940000000        <1>     cmp ecx, 64
   178 00001DA9 7613                <1>     jbe .okLength
   179                              <1> .badPath:
   180 00001DAB B005                <1>     mov al, errAccDen
   181 00001DAD E969570000          <1>     jmp extErrExit
   182                              <1> .pnf:
   183 00001DB2 E823570000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   184 00001DB7 B003                <1>     mov al, errPnf
   185 00001DB9 E95D570000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001DBE 4889D6              <1>     mov rsi, rdx
   188 00001DC1 E866540000          <1>     call checkPathspecOK
   189 00001DC6 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001DC8 E81A550000          <1>     call scanPathWC
   192 00001DCD 72DC                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001DCF E8FC560000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   195 00001DD4 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   196 00001DDB 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   197 00001DE2 E824F5FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   198 00001DE7 72C9                <1>     jc .pnf             ;Path Doesn't exist
   199 00001DE9 E8D1510000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   200 00001DEE 7312                <1>     jnc .notNet
   201 00001DF0 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   202 00001DF5 CD2F                <1>     int 2fh
   203 00001DF7 0F821E570000        <1>     jc extErrExit
   204 00001DFD E90B570000          <1>     jmp extGoodExit
   205                              <1> .notNet:
   206 00001E02 488D3D(1E050000)    <1>     lea rdi, buffer1
   207 00001E09 E8BB530000          <1>     call strlen ;Get the length of the full qualified name in ecx
   208 00001E0E 66890D(4E070000)    <1>     mov word [pathLen], cx
   209                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   210 00001E15 31C0                <1>     xor eax, eax
   211                              <1> .scanLoop:
   212 00001E17 E81F530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   213 00001E1C 721A                <1>     jc .notCurrent
   214 00001E1E E8DD530000          <1>     call compareFileNames
   215 00001E23 7404                <1>     jz .cantDelCD
   216 00001E25 FFC0                <1>     inc eax
   217 00001E27 EBEE                <1>     jmp short .scanLoop
   218                              <1> .cantDelCD:
   219 00001E29 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   220 00001E2E E8A7560000          <1>     call dosCrit1Exit
   221 00001E33 E9E3560000          <1>     jmp extErrExit
   222                              <1> .notCurrent:
   223 00001E38 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   224                              <1>     ;Now let use check that our directory is not the CDS currentdir
   225 00001E3F 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   226 00001E46 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   227                              <1>     ;If the given path length is one more than the backslash offset
   228                              <1>     ; due to the terminating null, then the user is trying to delete the 
   229                              <1>     ; root dir. Fail this.
   230 00001E49 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   231 00001E4D FFC1                <1>     inc ecx
   232 00001E4F 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   233 00001E56 0F8423010000        <1>     je .accessDenied
   234 00001E5C E878030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   235                              <1>     ;for the entry in the sector we are hoping to delete
   236 00001E61 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   237 00001E68 C1E010              <1>     shl eax, 10h
   238 00001E6B 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   239 00001E72 09D8                <1>     or eax, ebx
   240 00001E74 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   241 00001E7A E8F8EBFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   242 00001E7F E86EEBFFFF          <1>     call getBufForDir
   243 00001E84 0F82FA000000        <1>     jc .exitBad
   244                              <1>     ;rbx points to buffer
   245 00001E8A 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   246 00001E8E 48B82E202020202020- <1>     mov rax, ".       "
   246 00001E97 20                  <1>
   247 00001E98 483906              <1>     cmp qword [rsi], rax
   248 00001E9B 0F85DE000000        <1>     jne .accessDenied
   249 00001EA1 B42E                <1>     mov ah, "." ;Screw the partial stall
   250 00001EA3 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   251 00001EA7 0F85D2000000        <1>     jne .accessDenied
   252 00001EAD 4881C620000000      <1>     add rsi, fatDirEntry_size
   253 00001EB4 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   254 00001EBB B904000000          <1>     mov ecx, 4
   255 00001EC0 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   256                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   257                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   258 00001EC3 488D3D(D9060000)    <1>     lea rdi, fcbName
   259 00001ECA B03F                <1>     mov al, "?"
   260 00001ECC B90B000000          <1>     mov ecx, 11
   261 00001ED1 F3AA                <1>     rep stosb   ;Store the pattern to search for
   262 00001ED3 30C0                <1>     xor al, al  ;Store a terminating zero
   263 00001ED5 AA                  <1>     stosb
   264 00001ED6 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   265 00001EDC 50                  <1>     push rax    ;Save on stack temporarily
   266 00001EDD 8905(7F070000)      <1>     mov dword [dirClustA], eax
   267 00001EE3 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   268 00001EE5 668905(83070000)    <1>     mov word [dirSect], ax
   269 00001EEC C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   269 00001EF4 0000                <1>
   270 00001EF6 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   271 00001EFD 58                  <1>     pop rax
   272 00001EFE E874EBFFFF          <1>     call getStartSectorOfCluster
   273 00001F03 E8EAEAFFFF          <1>     call getBufForDir   
   274 00001F08 727A                <1>     jc .exitBad
   275 00001F0A E8FFF1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   276 00001F0F 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   277 00001F16 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   278 00001F1C C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   279 00001F23 E80EF1FFFF          <1>     call searchDir.rmdirEP
   280 00001F28 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   281                              <1>     ;Else, this is a empty dir, we can remove it
   282                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   283 00001F2A 488B05(46070000)    <1>     mov rax, qword [tempSect]
   284 00001F31 E8BCEAFFFF          <1>     call getBufForDir
   285 00001F36 724C                <1>     jc .exitBad
   286 00001F38 E8D1F1FFFF          <1>     call prepSectorSearch
   287 00001F3D 0FB705(4E070000)    <1>     movzx eax, word [entry]
   288 00001F44 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   289 00001F48 4801C6              <1>     add rsi, rax    
   290 00001F4B 8A05(08070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   291 00001F51 8806                <1>     mov byte [rsi], al  ;Store delchar there
   292 00001F53 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   293 00001F57 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   294 00001F5B E82DE9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   295 00001F60 C1E210              <1>     shl edx, 10h
   296 00001F63 09D0                <1>     or eax, edx
   297                              <1>     ;Now remove the FAT chain
   298 00001F65 E8FAECFFFF          <1>     call unlinkFAT
   299 00001F6A 7218                <1>     jc .exitBad
   300 00001F6C E8ABE7FFFF          <1>     call flushAllBuffersForDPB
   301 00001F71 7211                <1>     jc .exitBad
   302 00001F73 E862550000          <1>     call dosCrit1Exit
   303 00001F78 31C0                <1>     xor eax, eax
   304 00001F7A E98E550000          <1>     jmp extGoodExit
   305                              <1> .accessDenied:
   306 00001F7F B805000000          <1>     mov eax, errAccDen
   307                              <1> .exitBad:
   308 00001F84 F9                  <1>     stc
   309 00001F85 E850550000          <1>     call dosCrit1Exit
   310 00001F8A E98C550000          <1>     jmp extErrExit
   311                              <1> 
   312                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   313                              <1> ;Input: rdx = Pointer to ASCIIZ string
   314 00001F8F 4889D7              <1>     mov rdi, rdx
   315 00001F92 E832520000          <1>     call strlen
   316 00001F97 81F940000000        <1>     cmp ecx, 64
   317 00001F9D 7618                <1>     jbe .okLength
   318                              <1> .badPath:
   319 00001F9F B003                <1>     mov al, errPnf
   320 00001FA1 E975550000          <1>     jmp extErrExit
   321                              <1> .badPathCrit:
   322 00001FA6 E82F550000          <1>     call dosCrit1Exit
   323 00001FAB EBF2                <1>     jmp short .badPath
   324                              <1> .badCrit:
   325 00001FAD E828550000          <1>     call dosCrit1Exit
   326 00001FB2 E964550000          <1>     jmp extErrExit
   327                              <1> .okLength:
   328 00001FB7 4889D6              <1>     mov rsi, rdx
   329 00001FBA E86D520000          <1>     call checkPathspecOK
   330 00001FBF 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   331 00001FC1 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   332                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   333                              <1> .notBad:
   334 00001FC3 E83E530000          <1>     call checkPathNet   ;Never allow network paths
   335 00001FC8 74D5                <1>     jz .badPath ;Or Net paths
   336                              <1>     ;Path is ok, now proceed
   337 00001FCA E801550000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   338 00001FCF C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   339 00001FD6 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   340 00001FDD E829F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   341 00001FE2 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   342                              <1>     ;Now we check to make sure the path provided is not past the maximum
   343                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   344                              <1>     ; moved the path past the end.
   345 00001FE4 488D3D(1E050000)    <1>     lea rdi, buffer1
   346 00001FEB E8D9510000          <1>     call strlen ;Get the length of this path
   347 00001FF0 81F943000000        <1>     cmp ecx, 67
   348 00001FF6 77AE                <1>     ja .badPathCrit
   349                              <1>     ;The path must've been ok, so now copy the path into the CDS
   350                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   351                              <1>     ;Copy the workingCDS to the tmpCDS
   352 00001FF8 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   353 00001FFF 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   354 00002005 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   355 0000200B 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   356 00002011 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   357                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   358 00002017 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   359 0000201A E8E4000000          <1>     call .getFatCluster
   360 0000201F 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   361                              <1>     ;ecx has the length of the path in the buffer
   362 00002022 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   363 00002024 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   364 00002029 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   365 0000202C E898510000          <1>     call strlen
   366 00002031 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   367 00002033 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   368 00002038 0F8768FFFFFF        <1>     ja .badPathCrit
   369 0000203E 51                  <1>     push rcx
   370 0000203F 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   371 00002046 B95F000000          <1>     mov ecx, cds_size
   372 0000204B F3A4                <1>     rep movsb   
   373 0000204D 59                  <1>     pop rcx
   374 0000204E FFC9                <1>     dec ecx ;Remove the trailing null from the count
   375 00002050 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   376 00002057 57                  <1>     push rdi
   377 00002058 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   378 0000205B 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   379 0000205F F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   380 00002061 5F                  <1>     pop rdi
   381 00002062 4889FE              <1>     mov rsi, rdi
   382 00002065 31C0                <1>     xor eax, eax
   383 00002067 31C9                <1>     xor ecx, ecx
   384 00002069 FFC9                <1>     dec ecx
   385 0000206B F2AE                <1>     repne scasb   ;Search for the terminating null
   386 0000206D 4881EF02000000      <1>     sub rdi, 2
   387 00002074 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   388 00002076 E8F2500000          <1>     call swapPathSeparator
   389 0000207B 7503                <1>     jnz .notSlash
   390 0000207D C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   391                              <1> .notSlash:
   392 00002080 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   393 00002083 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   394 00002085 E8B1500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   395 0000208A 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   396 00002091 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   397 00002094 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   398                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   399                              <1>     ;Backslash offset must always be 2 on a join host
   400 0000209B B943000000          <1>     mov ecx, 67
   401 000020A0 F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   402 000020A2 EB41                <1>     jmp short .exitGood
   403                              <1> .notJoin:
   404                              <1> ;rsi -> workingCDS
   405                              <1> ;Lets first copy the working CDS into tmpCDS
   406 000020A4 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   407 000020AB B95F000000          <1>     mov ecx, cds_size
   408 000020B0 F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   409 000020B2 E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   410 000020B7 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   411 000020BD 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   412 000020C4 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   413 000020CB E808510000          <1>     call strcpy
   414 000020D0 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   415 000020D7 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   416 000020DE B95F000000          <1>     mov ecx, cds_size
   417 000020E3 F3A4                <1>     rep movsb
   418                              <1> .exitGood:
   419 000020E5 E8F0530000          <1>     call dosCrit1Exit
   420 000020EA 31C0                <1>     xor eax, eax
   421 000020EC E91C540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   422                              <1> .net:
   423                              <1> ;SDA Vars are setup for this request
   424 000020F1 B805110000          <1>     mov eax, 1105h
   425 000020F6 CD2F                <1>     int 2fh
   426 000020F8 0F821D540000        <1>     jc extErrExit
   427 000020FE E90A540000          <1>     jmp extGoodExit
   428                              <1> .getFatCluster:
   429 00002103 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   430 0000210A 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   431 00002111 C1E010              <1>     shl eax, 10h
   432 00002114 09D0                <1>     or eax, edx ;Add low bits to eax
   433                              <1>     return
    13                              <2> %%_ret:
    14 00002116 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> getCurrentDIR:     ;ah = 47h
   436                              <1> ;Returns the path for a drive with no X:\.
   437                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   438                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   439 00002117 88D0                <1>     mov al, dl  ;Move drive number into al
   440 00002119 E8B2530000          <1>     call dosCrit1Enter
   441 0000211E E84D4F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   442 00002123 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   443                              <1> .badDrvExit:
   444 00002125 E8B0530000          <1>     call dosCrit1Exit
   445 0000212A B80F000000          <1>     mov eax, errBadDrv
   446 0000212F E9E7530000          <1>     jmp extErrExit
   447                              <1> .okDrive:
   448                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   449 00002134 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   450 00002135 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   451 0000213C 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   452 0000213D C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   453 00002144 488D3D(1E050000)    <1>     lea rdi, buffer1
   454 0000214B E8BBF1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   455 00002150 5E                  <1>     pop rsi ;Get back the original workingCDS
   456 00002151 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   457 00002152 72D1                <1>     jc .badDrvExit
   458                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   459                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   460                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   461 00002154 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   462 00002158 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   463 0000215B 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   464 0000215E 7503                <1>     jne .dontSkipChar
   465 00002160 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   466                              <1> .dontSkipChar:
   467 00002163 AC                  <1>     lodsb   ;Get char
   468 00002164 84C0                <1>     test al, al
   469 00002166 7406                <1>     jz .notSpecialChar
   470 00002168 3C05                <1>     cmp al, 05h     ;Special char case?
   471 0000216A 7502                <1>     jne .notSpecialChar
   472 0000216C B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   473                              <1> .notSpecialChar:
   474 0000216E AA                  <1>     stosb
   475 0000216F 84C0                <1>     test al, al ;Did we store a terminator char?
   476 00002171 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   477 00002173 E862530000          <1>     call dosCrit1Exit
   478 00002178 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   479 0000217D E98B530000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   480                              <1> 
   481                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   482 00002182 50                  <1>     push rax
   483 00002183 B800600000          <1>     mov eax, 6000h
   484 00002188 CD21                <1>     int 21h
   485 0000218A 58                  <1>     pop rax
   486                              <1>     return
    13                              <2> %%_ret:
    14 0000218B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1>     
   488                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   489                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   490 0000218C E89B500000          <1>     call checkPathspecOK    ;This preserves rsi
   491 00002191 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   492 00002193 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   493                              <1> .badPath:
   494 00002195 B805000000          <1>     mov eax, errAccDen
   495 0000219A E97C530000          <1>     jmp extErrExit
   496                              <1> .pathspecOk:
   497 0000219F 57                  <1>     push rdi    ;Save the destination
   498 000021A0 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   499 000021A7 E8E2F1FFFF          <1>     call canonicaliseFileName
   500 000021AC 5F                  <1>     pop rdi
   501 000021AD 0F8268530000        <1>     jc extErrExit
   502 000021B3 488D35(1E050000)    <1>     lea rsi, buffer1
   503 000021BA E819500000          <1>     call strcpy
   504 000021BF 31C0                <1>     xor eax, eax
   505 000021C1 E947530000          <1>     jmp extGoodExit
   506                              <1> 
   507                              <1> ;-----------------------------------
   508                              <1> ;    General Directory Routines    :
   509                              <1> ;-----------------------------------
   510                              <1> 
   511                              <1> 
   512                              <1> findFreeDiskDirEntry:
   513                              <1> ;Find a space in the directory we are searching for a directory entry
   514                              <1> ;Accept first entry starting with a 0E5h or 00h
   515                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   516                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   517                              <1> ; be called for CDS's that are NOT net CDS's).
   518                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   519                              <1> ;       Directory vars must be set up for the directory we are searching in
   520                              <1> ;Output: CF=CY => Error, eax has error code
   521                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   522 000021C6 8A05(08070000)      <1>     mov al, byte [delChar]
   523 000021CC 8805(D9060000)      <1>     mov byte [fcbName], al
   524 000021D2 E80CEEFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   525                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021D7 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   526                              <1> ;Free entry found, dir variables are set for the free entry. 
   527                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   528                              <1> getDiskDirectoryEntry:
   529                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   530                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   531                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   532                              <1> ;        qword [tempSect] = Disk sector number of directory
   533                              <1> ;        word [entry] = 32 byte offset into sector
   534                              <1> ;        CF=CY => Error, exit 
   535 000021D9 53                  <1>     push rbx
   536 000021DA 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   537                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   538                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   539 000021E0 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   540 000021E7 85C0                <1>     test eax, eax
   541 000021E9 7407                <1>     jz .skipCluster
   542 000021EB E887E8FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   543 000021F0 EB1B                <1>     jmp short .skipOldFat
   544                              <1> .skipCluster:
   545 000021F2 55                  <1>     push rbp
   546 000021F3 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   547 000021FA 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   548 00002201 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   549                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   550 00002204 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   551 00002208 5D                  <1>     pop rbp
   552 00002209 7202                <1>     jb .skipOldFat
   553 0000220B F9                  <1>     stc
   554                              <1>     return
    13                              <2> %%_ret:
    14 0000220C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> .skipOldFat:
   556 0000220D 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   557 00002210 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   558 00002217 E8D6E7FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   559 0000221C 5B                  <1>     pop rbx
   560                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000221D 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 0000221F 53                  <1>     push rbx
   562 00002220 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   563 00002227 E8E2EEFFFF          <1>     call prepSectorSearch
   564                              <1>     ;Above function gets data buffer ptr in rsi
   565 0000222C 31D2                <1>     xor edx, edx
   566 0000222E 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   567 00002234 C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   568                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   569 00002237 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   570 0000223B F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   571 0000223D 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   572 00002240 668915(4E070000)    <1>     mov word [entry], dx
   573 00002247 5B                  <1>     pop rbx
   574                              <1>     return
    13                              <2> %%_ret:
    14 00002248 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> updateSFTDateTimeFields:    
   577                              <1> ;Updates the SFT time/date entries for disk files
   578                              <1> ;Called with:
   579                              <1> ;   [workingDPB] = DPB pointer for the disk device
   580                              <1> ;   [currentSFT] = Current SFT pointer
   581                              <1> ;   bx = attribute byte from the SFT
   582 00002249 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   583                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000224E 75F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 00002250 66F7C30040          <1>     test bx, blokNoDTonClose
   585                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002255 75F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   586 00002257 50                  <1>     push rax
   587 00002258 53                  <1>     push rbx
   588 00002259 E8700B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   589                              <1>     ;Build date and time words
   590 0000225E E8560C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   591                              <1>     ;Update SFT fields
   592 00002263 66894713            <1>     mov word [rdi + sft.wTime], ax
   593 00002267 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   594 0000226A 66894715            <1>     mov word [rdi + sft.wDate], ax
   595 0000226E 31C0                <1>     xor eax, eax
   596 00002270 FF15(2F010000)      <1>     call qword [updateDirShare]
   597 00002276 5B                  <1>     pop rbx
   598 00002277 58                  <1>     pop rax
   599                              <1>     return
    13                              <2> %%_ret:
    14 00002278 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   600                              <1> 
   601                              <1> getAndUpdateDirSectorForFile:
   602                              <1> ;Input: rdi -> SFT
   603                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   604                              <1> ;               rdi -> SFT
   605 00002279 FF7727              <1>     push qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   606 0000227C E8022D0000          <1>     call setDPBfromSFT
   607 00002281 58                  <1>     pop rax
   608                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002282 72F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   609 00002284 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   610 0000228B C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   611 00002292 E85BE7FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   612                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002297 72DF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   613 00002299 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   614 000022A0 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   615 000022A4 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   616 000022A8 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   617 000022AB 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   618                              <1>     return
    13                              <2> %%_ret:
    14 000022AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   619                              <1> 
   620                              <1> growDirectory:
   621                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   622                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   623                              <1> ;                 eax = New Cluster number
   624                              <1> ;               TWO NON CF ERROR CASES.
   625                              <1> ;               If eax = -1 => disk full!
   626                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   627                              <1> ;        CF=CY => Something went wrong. Rip. 
   628 000022AF 53                  <1>     push rbx
   629 000022B0 51                  <1>     push rcx
   630 000022B1 57                  <1>     push rdi
   631 000022B2 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   632 000022B8 85C0                <1>     test eax, eax
   633 000022BA 742B                <1>     jz .exit
   634 000022BC E8E3E7FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   635 000022C1 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   636 000022C3 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   637 000022C8 E84CE8FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   638 000022CD 7218                <1>     jc .exit
   639 000022CF 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   640 000022D4 7411                <1>     je .exit
   641 000022D6 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   642 000022D8 E8BFE9FFFF          <1>     call readFAT
   643 000022DD 7208                <1>     jc .exit
   644 000022DF E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   645 000022E4 7201                <1>     jc .exit
   646 000022E6 F8                  <1>     clc
   647                              <1> .exit:
   648 000022E7 5F                  <1>     pop rdi
   649 000022E8 59                  <1>     pop rcx
   650 000022E9 5B                  <1>     pop rbx
   651                              <1>     return   
    13                              <2> %%_ret:
    14 000022EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> sanitiseCluster:
   653                              <1> ;Sanitises the cluster in eax to all zeros
   654                              <1> ;Does not move file pointers
   655                              <1> ;Currently, is only called to sanitise subdirectory clusters
   656                              <1> ;Input: eax = Cluster number
   657                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   658                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   659                              <1> ;        If CF=CY => Error, exit
   660 000022EB 50                  <1>     push rax
   661 000022EC 53                  <1>     push rbx
   662 000022ED 51                  <1>     push rcx
   663 000022EE 52                  <1>     push rdx
   664 000022EF 56                  <1>     push rsi
   665 000022F0 55                  <1>     push rbp
   666 000022F1 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   667 000022F8 E87AE7FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   668 000022FD 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   669 00002301 FFC2                <1>     inc edx ;Make it a count of sectors
   670                              <1> .getSectorInCluster:
   671 00002303 E8EAE6FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   672 00002308 721E                <1>     jc .exitBad
   673 0000230A 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   674 0000230E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   675 00002312 31C0                <1>     xor eax, eax
   676 00002314 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   677 00002316 E872E5FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   678                              <1> 
   679 0000231B FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   680 0000231D 740A                <1>     jz .exit    ;Jump if we done
   681 0000231F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   682 00002323 48FFC0              <1>     inc rax ;Goto next sector in cluster
   683 00002326 EBDB                <1>     jmp short .getSectorInCluster
   684                              <1> .exitBad:
   685 00002328 F9                  <1>     stc
   686                              <1> .exit:
   687 00002329 5D                  <1>     pop rbp
   688 0000232A 5E                  <1>     pop rsi
   689 0000232B 5A                  <1>     pop rdx
   690 0000232C 59                  <1>     pop rcx
   691 0000232D 5B                  <1>     pop rbx
   692 0000232E 58                  <1>     pop rax
   693                              <1>     return
    13                              <2> %%_ret:
    14 0000232F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002330 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002331 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002338 48891D(A5040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 0000233F 5B                  <1>     pop rbx
    60 00002340 C705(AD040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002348 0000                <1>
    61 0000234A 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00002351 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00002357 0F85A1000000        <1>     jnz .notChar
    64 0000235D 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00002363 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00002369 E84B510000          <1>     call dosPushRegs    ;Save context here
    68 0000236E 488D1DA5DCFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002375 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002378 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 0000237B 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 0000237E 890D(97040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00002384 31C9                <1>     xor ecx, ecx
    75 00002386 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002389 7506                <1>     jne .skipBsySet
    77 0000238B 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002391 66870D(9A040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002398 488D1D(97040000)    <1>     lea rbx, secdReqHdr
    82 0000239F E80F480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 000023A4 668B3D(9A040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 000023AB F7C700800000        <1>     test edi, drvErrStatus
    85 000023B1 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 000023B3 803D(99040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 000023BA 750C                <1>     jne .notNDRead
    89 000023BC 8A05(A4040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 000023C2 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 000023C8 8A25(9B040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 000023CE F6D4                <1>     not ah
    94 000023D0 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 000023D3 E8CA500000          <1>     call dosPopRegs ;Get back the context
    96 000023D8 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000023DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000023E0 88CC                <1>     mov ah, cl
   101 000023E2 E8B5410000          <1>     call charDevErr
   102 000023E7 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000023E9 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000023EB E8B2500000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000023F0 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000023F5 8025(9B040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 000023FC EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000023FE 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00002400 7409                <1>     jz .makeDiskNetReadReq
   115 00002402 FECC                <1>     dec ah
   116 00002404 7421                <1>     jz .makeDiskNetNonDestReq
   117 00002406 FECC                <1>     dec ah
   118 00002408 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 0000240A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 0000240B E833000000          <1>     call .prepDiskNetIO
   123 00002410 E821220000          <1>     call readBytes
   124 00002415 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00002417 E857000000          <1>     call .cleanDiskNetIO
   126 0000241C 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002422 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00002424 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00002426 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00002427 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 0000242A E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 0000242F 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00002432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002433 E80B000000          <1>     call .prepDiskNetIO
   138 00002438 E855250000          <1>     call writeBytes
   139 0000243D E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002442 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002443 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 00002449 E86B500000          <1>     call dosPushRegs
   146 0000244E FF35(17040000)      <1>     push qword [currentDTA]
   147 00002454 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 0000245B 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00002462 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 00002469 31C9                <1>     xor ecx, ecx
   151 0000246B FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 0000246D FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 00002473 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 00002479 8F05(17040000)      <1>     pop qword [currentDTA]
   157 0000247F E81E500000          <1>     call dosPopRegs
   158 00002484 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 00002486 E82E500000          <1>     call dosPushRegs
   164 0000248B B00D                <1>     mov al, drvOPEN
   165 0000248D EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 0000248F E825500000          <1>     call dosPushRegs
   169 00002494 B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002496 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 0000249C 7569                <1>     jnz .exit    ;Exit if so
   174 0000249E F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 000024A2 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 000024A6 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 000024A8 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 000024AF 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 000024B1 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 000024B4 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 000024B6 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 000024BA 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 000024C0 7445                <1>     jz .exit    ;No, exit!
   186 000024C2 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 000024C5 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   188 000024CC 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 000024CF 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 000024D2 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 000024D5 50                  <1>     push rax    ;Save the dword
   193 000024D6 E8DC460000          <1>     call goDriver
   194 000024DB 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   195 000024E2 F7C700800000        <1>     test edi, drvErrStatus
   196 000024E8 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 000024EA 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 000024F0 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 000024F2 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 000024F4 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 000024F6 88C8                <1>     mov al, cl  ;Move drive number into al
   205 000024F8 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 000024FA E89D400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 000024FF B001                <1>     mov al, critRetry   ;al returns user response
   210 00002501 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 00002503 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 00002504 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 00002506 58                  <1>     pop rax    
   215                              <1> .exit:
   216 00002507 E8964F0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 0000250C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 0000250D E87E010000          <1>     call charIn_B
    17 00002512 50                  <1>     push rax
    18 00002513 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002518 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00002519 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 0000251A 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 0000251C 3C20                <1>     cmp al, asciiCaret
    27 0000251E 0F8286000000        <1>     jb .control
    28 00002524 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00002526 7406                <1>     je .skipCurs
    30 00002528 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 0000252E FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 00002534 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 0000253B 56                  <1>     push rsi
    35 0000253C 7507                <1>     jnz .skipErrorCheck
    36 0000253E 50                  <1>     push rax
    37 0000253F E898020000          <1>     call vConCtrlCheck
    38 00002544 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00002545 E820020000          <1>     call outputOnStdout
    41 0000254A 5E                  <1>     pop rsi
    42 0000254B F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002552 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 00002554 53                  <1>     push rbx
    45 00002555 56                  <1>     push rsi
    46 00002556 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 0000255B E843030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00002560 0F82CF000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00002566 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 0000256A F7C300800000        <1>     test ebx, devRedirDev
    52 00002570 0F85BF000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00002576 F7C380000000        <1>     test ebx, devCharDev
    54 0000257C 0F84B3000000        <1>     jz auxOutCmn.exit
    55 00002582 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00002587 E817030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 0000258C 0F82A3000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002592 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00002598 0F8492000000        <1>     jz auxOutCmn.diskFileEP
    60 0000259E C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 000025A5 E98B000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 000025AA 3C0D                <1>     cmp al, CR
    64 000025AC 742A                <1>     je .newline
    65 000025AE 3C08                <1>     cmp al, BSP
    66 000025B0 7432                <1>     je .back
    67 000025B2 3C09                <1>     cmp al, TAB
    68 000025B4 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 000025BA 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 000025C0 0CF8                <1>     or al, ~7
    72 000025C2 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 000025C4 51                  <1>     push rcx
    75 000025C5 0FB6C8              <1>     movzx ecx, al
    76 000025C8 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 000025CB B020                <1>     mov al, SPC
    79 000025CD E84AFFFFFF          <1>     call charOut_B.in   ;Output the char
    80 000025D2 FEC9                <1>     dec cl
    81 000025D4 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 000025D6 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000025D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 000025D8 C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 000025DF E94AFFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 000025E4 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 000025EA E93FFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 000025EF E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 000025F4 BB03000000          <1>     mov ebx, 3
    95 000025F9 E8A5020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025FE 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97                              <1> .auxloop:
    98 00002600 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 00002602 E829FDFFFF          <1>     call mainCharIO
   100 00002607 7408                <1>     jz .signalLoop
   101 00002609 30E4                <1>     xor ah, ah  ;Read the char in
   102 0000260B E820FDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 00002610 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 00002611 E8A3010000          <1>     call callInt28h
   106 00002616 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 00002618 53                  <1>     push rbx
   110 00002619 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 0000261E EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 00002620 53                  <1>     push rbx
   114 00002621 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 00002626 88D0                <1>     mov al, dl  ;Get the char into al
   117 00002628 50                  <1>     push rax
   118 00002629 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 0000262E 58                  <1>     pop rax
   120 0000262F 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 00002630 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 00002635 5E                  <1>     pop rsi
   126 00002636 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00002637 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 00002638 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 0000263A 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 0000263C 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 00002642 31DB                <1>     xor ebx, ebx    
   135 00002644 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002649 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   137 0000264B 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 00002652 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 00002654 E8D7FCFFFF          <1>     call mainCharIO
   140 00002659 E85B010000          <1>     call callInt28h ;This preserves flags so call here!
   141 0000265E 7507                <1>     jnz .readChar
   142 00002660 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 00002664 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 00002666 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 00002667 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 0000266B 31DB                <1>     xor ebx, ebx
   151 0000266D E831020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002672 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   153 00002674 B401                <1>     mov ah, 01  ;ND read for char
   154 00002676 E8B5FCFFFF          <1>     call mainCharIO
   155 0000267B 750B                <1>     jnz .getChar
   156 0000267D B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 0000267F CD2A                <1>     int 2Ah
   158 00002681 E833010000          <1>     call callInt28h
   159 00002686 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 00002688 30E4                <1>     xor ah, ah
   163 0000268A E8A1FCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 0000268F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002690 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002691 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 00002696 7543                <1>     jnz .pullChar
   172 00002698 803D(E0190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 0000269F 7507                <1>     jne .skiplookahead
   174 000026A1 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 000026A3 E888FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 000026A8 B484                <1>     mov ah, 84h
   178 000026AA CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 000026AC 66813D(151A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 000026B4 FF                  <1>
   180 000026B5 751B                <1>     jne .skipClockRead
   181 000026B7 E8FD4D0000          <1>     call dosPushRegs
   182 000026BC F8                  <1>     clc ;Clear CF, write primary header to backup
   183 000026BD E882000000          <1>     call swapPrimaryHeader
   184 000026C2 E807070000          <1>     call readDateTimeRecord
   185 000026C7 F9                  <1>     stc ;Set CF, write backup to primary header
   186 000026C8 E877000000          <1>     call swapPrimaryHeader
   187 000026CD E8D04D0000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 000026D2 66FF05(151A0000)    <1>     inc word [keybTicks]
   190 000026D9 EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 000026DB 30E4                <1>     xor ah, ah
   193 000026DD E84EFCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 000026E2 5E                  <1>     pop rsi
   195 000026E3 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 000026E5 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 000026E7 C605(141A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 000026EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 000026EF 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 000026F2 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 000026F3 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026F5 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   208 000026F7 E820FEFFFF          <1>     call charOut_B.in
   209 000026FC EBF4                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 000026FE E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 00002703 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002705 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   216 00002707 FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002709 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 0000270A 50                  <1>     push rax
   222 0000270B 52                  <1>     push rdx
   223 0000270C 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 0000270E E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 00002713 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 00002715 B404                <1>     mov ah, 04h ;Flush input buffers
   227 00002717 E814FCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 0000271C 5A                  <1>     pop rdx
   230 0000271D 58                  <1>     pop rax
   231 0000271E 88C4                <1>     mov ah, al  ;Move function number into ah
   232 00002720 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 00002722 7507                <1>     jne .others
   234 00002724 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 00002727 7412                <1>     jz .bad ;Yes, exit
   236 00002729 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 0000272B 3C01                <1>     cmp al, 01h
   239 0000272D 740F                <1>     je .callFunction
   240 0000272F 3C07                <1>     cmp al, 07h
   241 00002731 740B                <1>     je .callFunction
   242 00002733 3C08                <1>     cmp al, 08h
   243 00002735 7407                <1>     je .callFunction
   244 00002737 3C0A                <1>     cmp al, 0Ah
   245 00002739 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 0000273B 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 0000273D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 0000273E FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 0000273F E98D4C0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 00002744 56                  <1>     push rsi
   262 00002745 57                  <1>     push rdi
   263 00002746 51                  <1>     push rcx
   264 00002747 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 00002750 00                  <1>
   265 00002751 488D35(C1040000)    <1>     lea rsi, primReqHdr
   266 00002758 488D3D(EA190000)    <1>     lea rdi, bkupReqHdr
   267 0000275F 7303                <1>     jnc .read
   268 00002761 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 00002764 F3A4                <1>     rep movsb   ;Swap
   271 00002766 59                  <1>     pop rcx
   272 00002767 5F                  <1>     pop rdi
   273 00002768 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 00002769 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 0000276A 53                  <1>     push rbx
   279 0000276B BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00002770 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 00002775 7217                <1>     jc .exit
   282 00002777 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 0000277D 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 0000277F 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 00002783 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 00002789 7405                <1>     jz .notCharDevOrFast
   287 0000278B CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 0000278D F8                  <1>     clc
   290                              <1> .exit:
   291 0000278E 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 0000278F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002790 E809000000          <1>     call outputOnSFT
   295 00002795 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 00002796 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00002797 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000279C 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 0000279E 50                  <1>     push rax
   307 0000279F B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 000027A1 E88AFBFFFF          <1>     call mainCharIO
   309 000027A6 58                  <1>     pop rax
   310 000027A7 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 000027A9 B402                <1>     mov ah, 02h ;Output char in al
   312 000027AB E880FBFFFF          <1>     call mainCharIO
   313 000027B0 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 000027B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 000027B2 E802000000          <1>     call callInt28h
   317 000027B7 EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 000027B9 9C                  <1>     pushfq
   322 000027BA F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 000027C1 7417                <1>     jz .exit    ;If zero, not safe
   324 000027C3 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 000027CA 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 000027CC FF35(95040000)      <1>     push qword [int28Flag] 
   328 000027D2 CD28                <1>     int 28h
   329 000027D4 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 000027DA 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 000027DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 000027DC E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 000027E1 53                  <1>     push rbx
   355 000027E2 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 000027E4 E8BA000000          <1>     call getCharDevSFT
   357 000027E9 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027EA 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   359 000027EC B401                <1>     mov ah, 01  ;Non destructively read CON
   360 000027EE E83DFBFFFF          <1>     call mainCharIO
   361 000027F3 74C4                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 000027F5 3C13                <1>     cmp al, DC3 ;^S ?
   364 000027F7 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 000027F9 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 000027FB E830FBFFFF          <1>     call mainCharIO
   367 00002800 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 00002805 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00002807 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 00002809 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 0000280B 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 0000280D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 0000280E F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 00002814 53                  <1>     push rbx
   378 00002815 BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 0000281A E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 0000281F 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002820 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   382 00002822 57                  <1>     push rdi
   383 00002823 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00002826 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   385 0000282C 741D                <1>     jz .notNet
   386 0000282E 50                  <1>     push rax
   387 0000282F B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002834 CD2F                <1>     int 2Fh
   389 00002836 58                  <1>     pop rax
   390 00002837 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002839 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002840 50                  <1>     push rax
   394 00002841 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002846 CD2F                <1>     int 2Fh
   396 00002848 58                  <1>     pop rax
   397 00002849 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 0000284B 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 00002852 7507                <1>     jnz .echoOn
   403 00002854 E836FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002859 EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 0000285B E826FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002860 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002861 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002862 E852FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002867 B401                <1>     mov ah, 01h ;ND read
   414 00002869 E8C2FAFFFF          <1>     call mainCharIO
   415 0000286E 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002870 53                  <1>     push rbx
   418 00002871 31DB                <1>     xor ebx, ebx
   419 00002873 E82B000000          <1>     call getCharDevSFT
   420 00002878 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002879 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   422 0000287B 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 0000287D E8AEFAFFFF          <1>     call mainCharIO
   424 00002882 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002884 7514                <1>     jnz .checkBreak2
   426 00002886 803D(141A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 0000288D 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002893 C605(141A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 0000289A 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000289C 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   432 0000289E E99D3E0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 000028A3 F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 000028AA 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 000028AC 57                  <1>     push rdi
   444 000028AD E853260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 000028B2 4889FE              <1>     mov rsi, rdi
   446 000028B5 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 000028B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 000028B7 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 000028BD 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 000028BF 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 000028C6 F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 000028C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 000028C8 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 000028CA 0F834CFCFFFF        <1>     jae charOut_B.in
   465 000028D0 3C09                <1>     cmp al, TAB
   466 000028D2 0F8444FCFFFF        <1>     je charOut_B.in
   467 000028D8 3C15                <1>     cmp al, NAK
   468 000028DA 0F843CFCFFFF        <1>     je charOut_B.in
   469 000028E0 3C14                <1>     cmp al, DC4
   470 000028E2 0F8434FCFFFF        <1>     je charOut_B.in
   471 000028E8 50                  <1>     push rax
   472 000028E9 B05E                <1>     mov al, "^" ;Get caret in place
   473 000028EB E82CFCFFFF          <1>     call charOut_B.in
   474 000028F0 58                  <1>     pop rax
   475 000028F1 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 000028F3 E924FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 000028F8 B00D                <1>     mov al, CR
   479 000028FA E81DFCFFFF          <1>     call charOut_B.in
   480 000028FF B00A                <1>     mov al, LF
   481 00002901 E916FCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002906 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000290D 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 0000290F 53                  <1>     push rbx
   491 00002910 56                  <1>     push rsi
   492 00002911 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002918 C705(ED040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002920 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002922 C605(EB040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002929 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   498 00002930 E882420000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002935 66F705(EE040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   500 0000293D 02                  <1>
   501 0000293E 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002940 30C0                <1>     xor al, al
   504 00002942 5E                  <1>     pop rsi
   505 00002943 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002944 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002945 8A05(F8040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   510 0000294B 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 0000294D 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 0000294F C705(ED040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002957 0000                <1>
   514 00002959 C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002960 C705(01050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002968 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 0000296A 488D05(F8040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   519 00002971 488905(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   520 00002978 E83A420000          <1>     call goDriver   ;RSI and RBX as before
   521 0000297D E9BE3D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002982 57                  <1>     push rdi
   526 00002983 C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 0000298A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   528 00002991 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002998 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002999 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 0000299A C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 000029A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 000029A2 4889D6              <1>     mov rsi, rdx
   554 000029A5 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 000029A7 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029A9 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 000029AB 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 000029AE 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 000029B0 7606                <1>     jbe .avoidcheck
   560 000029B2 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 000029B6 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 000029B8 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 000029BA 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 000029BD FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 000029BF 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 000029C5 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 000029CB 56                  <1>     push rsi    ;Push user buffer address
   571 000029CC 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 000029D3 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 000029DA 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 000029DC 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 000029DE E8ADFCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 000029E3 3C0A                <1>     cmp al, LF
   577 000029E5 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 000029E7 E8A4FCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 000029EC 3C06                <1>     cmp al, ACK
   582 000029EE 74F7                <1>     je .mainLoop   ;Get another char
   583 000029F0 3A0544D6FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 000029F6 0F842C010000        <1>     je .escape
   585 000029FC 3C7F                <1>     cmp al, DEL
   586 000029FE 0F848F000000        <1>     je .delete
   587 00002A04 3C08                <1>     cmp al, BSP
   588 00002A06 0F8487000000        <1>     je .delete
   589 00002A0C 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002A0E 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002A13 3C15                <1>     cmp al, NAK
   593 00002A15 9090909090          <1>     db 5 dup (90h)
   594 00002A1A 3C0D                <1>     cmp al, CR
   595 00002A1C 7452                <1>     je .carriageReturn
   596 00002A1E 3C0A                <1>     cmp al, LF
   597 00002A20 7467                <1>     je .lineFeed
   598 00002A22 3A0513D6FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002A28 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002A2A 38D6                <1>     cmp dh, dl
   602 00002A2C 731C                <1>     jae .bufOflw
   603 00002A2E AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002A2F FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002A31 E892FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002A36 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002A3D 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002A3F 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002A41 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002A43 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002A46 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002A48 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002A4A B007                <1>     mov al, BEL ;Sound the bell
   619 00002A4C E8CBFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002A51 EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002A53 B05C                <1>     mov al, "\"
   624 00002A55 E8C2FAFFFF          <1>     call charOut_B.in
   625 00002A5A 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002A5B E898FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002A60 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002A66 E859FBFFFF          <1>     call charOut_B.outputATab
   631 00002A6B E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002A70 AA                  <1>     stosb
   634 00002A71 E8A6FAFFFF          <1>     call charOut_B.in
   635 00002A76 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002A77 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002A7A FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002A7C 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002A83 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002A86 F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002A88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002A89 E86AFEFFFF          <1>     call printCRLF
   645 00002A8E E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002A93 E805000000          <1>     call .removeChar
   648 00002A98 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002A9D 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002A9F 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002AA1 E868000000          <1>     call .vConErase
   653 00002AA6 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002AA8 3C20                <1>     cmp al, SPC
   655 00002AAA 7311                <1>     jae .normalChar
   656 00002AAC 3C09                <1>     cmp al, TAB
   657 00002AAE 7420                <1>     je .eraTab
   658 00002AB0 3C15                <1>     cmp al, NAK
   659 00002AB2 7409                <1>     je .normalChar
   660 00002AB4 3C14                <1>     cmp al, DC4
   661 00002AB6 7405                <1>     je .normalChar
   662 00002AB8 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002ABD 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002AC4 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   666 00002AC6 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002AC8 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   668 00002ACA 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002ACD FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002ACF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002AD0 57                  <1>     push rdi
   675 00002AD1 48FFCF              <1>     dec rdi
   676 00002AD4 FD                  <1>     std ;Go backwards
   677 00002AD5 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002AD8 B020                <1>     mov al, SPC
   679 00002ADA 53                  <1>     push rbx
   680 00002ADB BB07000000          <1>     mov ebx, 7
   681 00002AE0 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002AE3 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002AE4 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002AE6 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002AEA 740A                <1>     je .tabChar
   687 00002AEC FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002AEE E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002AF0 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002AF6 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002AF8 00D9                <1>     add cl, bl
   695 00002AFA 80E107              <1>     and cl, 7
   696 00002AFD 5B                  <1>     pop rbx
   697 00002AFE 5F                  <1>     pop rdi
   698 00002AFF FC                  <1>     cld
   699 00002B00 74BB                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002B02 E80C000000          <1>     call .vConEraseNoDec
   703 00002B07 E2F9                <1>     loop .vConDelTab
   704 00002B09 E9AFFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002B0E 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002B11 FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002B13 B008                <1>     mov al, BSP ;Move cursor back
   712 00002B15 E802FAFFFF          <1>     call charOut_B.in
   713 00002B1A B020                <1>     mov al, SPC ;Replace with a space
   714 00002B1C E8FBF9FFFF          <1>     call charOut_B.in
   715 00002B21 B008                <1>     mov al, BSP ;Move cursor back again
   716 00002B23 E9F4F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002B28 FF2504D5FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002B2E E846000000          <1>     call .fCommon2
   724 00002B33 EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002B35 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002B38 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002B3A EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002B3C B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002B41 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002B48 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002B4A 0F8497FEFFFF        <1>     je .mainLoop
   735 00002B50 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002B52 0F848FFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002B58 AC                  <1>     lodsb
   739 00002B59 AA                  <1>     stosb
   740 00002B5A E869FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002B5F FEC7                <1>     inc bh
   742 00002B61 FEC6                <1>     inc dh
   743 00002B63 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002B65 E97DFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002B6A E80A000000          <1>     call .fCommon2
   747 00002B6F 4801CE              <1>     add rsi, rcx
   748 00002B72 00CF                <1>     add bh, cl
   749 00002B74 E96EFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002B79 E812FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002B7E 3A05B6D4FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002B84 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002B86 E805FBFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002B8B 59                  <1>     pop rcx ;Get original return address from stack
   759 00002B8C E956FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002B91 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002B94 28F9                <1>     sub cl, bh
   763 00002B96 74F3                <1>     jz .fforceExit
   764 00002B98 FFC9                <1>     dec ecx
   765 00002B9A 74EF                <1>     jz .fforceExit
   766 00002B9C 57                  <1>     push rdi
   767 00002B9D 4889F7              <1>     mov rdi, rsi
   768 00002BA0 48FFC7              <1>     inc rdi
   769 00002BA3 F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002BA5 5F                  <1>     pop rdi
   771 00002BA6 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002BA8 F6D1                <1>     not cl
   773 00002BAA 00D9                <1>     add cl, bl
   774 00002BAC 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002BAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002BAF B040                <1>     mov al, "@"
   778 00002BB1 E866F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002BB6 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002BB7 57                  <1>     push rdi
   781 00002BB8 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002BBD 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002BBE 88F3                <1>     mov bl, dh
   784 00002BC0 E996FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002BC5 B01A                <1>     mov al, EOF
   788 00002BC7 E95EFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002BCC 8A0568D4FFFF        <1>     mov al, byte [extESC]
   792 00002BD2 E953FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002BD7 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002BDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002BDE 38DF                <1>     cmp bh, bl
   798 00002BE0 0F8401FEFFFF        <1>     je .mainLoop
   799 00002BE6 FEC7                <1>     inc bh
   800 00002BE8 48FFC6              <1>     inc rsi
   801 00002BEB E9F7FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002BF0 E89BFAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002BF5 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002BFA 57                  <1>     push rdi    ;Preserve rdi
   808 00002BFB 488D3D3AD4FFFF      <1>     lea rdi, extKeyTbl
   809 00002C02 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002C03 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002C04 740D                <1>     je .charFound
   815 00002C06 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002C08 7414                <1>     jz .notInTable
   817 00002C0A 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002C11 EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002C13 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002C14 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002C18 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002C1B 5F                  <1>     pop rdi
   824 00002C1C FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002C1E 59                  <1>     pop rcx ;Realign stack
   827 00002C1F 59                  <1>     pop rcx
   828 00002C20 E9C2FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    43                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002C25 E8A4010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002C2A E81D440000          <1>     call getUserRegs
     6 00002C2F 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002C36 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002C3D 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002C43 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002C49 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002C4D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002C51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002C52 B0FF                <1>     mov al, -1      ;Default to fail
    19 00002C54 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C59 72F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    21 00002C5B E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002C60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002C61 E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002C66 E8E1430000          <1>     call getUserRegs
    26 00002C6B 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002C72 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002C79 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002C7D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002C81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002C82 80FD17              <1>     cmp ch, 23
    37 00002C85 7749                <1>     ja .exitBad
    38 00002C87 80F93B              <1>     cmp cl, 59
    39 00002C8A 7744                <1>     ja .exitBad
    40 00002C8C 80FE3B              <1>     cmp dh, 59
    41 00002C8F 773F                <1>     ja .exitBad
    42 00002C91 80FA63              <1>     cmp dl, 99
    43 00002C94 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002C96 E833010000          <1>     call readDateTimeRecord
    46 00002C9B 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002CA2 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002CA9 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002CAC 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002CB0 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002CB4 B906000000          <1>     mov ecx, 6
    52 00002CB9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002CBC E809420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002CC1 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002CC8 E8EA3E0000          <1>     call goDriver
    56 00002CCD 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002CCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002CD0 B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002CD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002CD3 6681F97800          <1>     cmp cx, 120
    69 00002CD8 0F83ED000000        <1>     jae .exitBad
    70 00002CDE 84F6                <1>     test dh, dh
    71 00002CE0 0F84E5000000        <1>     jz .exitBad
    72 00002CE6 80FE0C              <1>     cmp dh, 12
    73 00002CE9 0F87DC000000        <1>     ja .exitBad
    74 00002CEF 84D2                <1>     test dl, dl
    75 00002CF1 0F84D4000000        <1>     jz .exitBad
    76 00002CF7 80FA1F              <1>     cmp dl, 31
    77 00002CFA 0F87CB000000        <1>     ja .exitBad
    78 00002D00 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002D07 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002D0D E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002D12 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002D15 750C                <1>     jne .notFeb
    84 00002D17 3A1541D3FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002D1D 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002D23 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002D25 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002D28 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002D2B 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002D2E BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002D33 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002D35 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002D38 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002D3B 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002D40 FFC9                <1>     dec ecx
    99 00002D42 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002D45 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002D4A EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002D4C 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002D4E 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002D55 488D3501D3FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002D5C FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002D5E 67E308              <1>     jecxz .addMonthOffset
   110 00002D61 AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002D62 0FB6C0              <1>     movzx eax, al
   112 00002D65 01C2                <1>     add edx, eax
   113 00002D67 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002D69 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002D70 FFC9                <1>     dec ecx
   117 00002D72 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002D74 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002D7B 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002D82 B906000000          <1>     mov ecx, 6
   123 00002D87 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002D8A E846410000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002D8F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002D96 E81C3E0000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002D9B 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00002DA2 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00002DA9 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00002DAC B906000000          <1>     mov ecx, 6
   132 00002DB1 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00002DB4 E811410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00002DB9 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 00002DC0 E8F23D0000          <1>     call goDriver
   136 00002DC5 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00002DCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00002DCB B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002DCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 00002DCE 53                  <1>     push rbx
   146 00002DCF 51                  <1>     push rcx
   147 00002DD0 52                  <1>     push rdx
   148 00002DD1 56                  <1>     push rsi
   149 00002DD2 55                  <1>     push rbp
   150                              <1> 
   151 00002DD3 66C705(151A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00002DDB 00                  <1>
   152 00002DDC 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00002DE3 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00002DE8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00002DEB E8E5400000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 00002DF0 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00002DF7 E8BB3D0000          <1>     call goDriver
   162 00002DFC 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00002E03 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00002E0A 7466                <1>     je .exit    ;Return if equal
   170 00002E0C 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00002E11 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00002E13 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00002E1A BBB5050000          <1>     mov ebx, 365*4 + 1
   177 00002E1F 31D2                <1>     xor edx, edx
   178 00002E21 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00002E23 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00002E25 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 00002E2A 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 00002E2C 7210                <1>     jb .foundBunch
   185 00002E2E 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 00002E30 FFC1                <1>     inc ecx
   187 00002E32 FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00002E34 39DA                <1>     cmp edx, ebx
   190 00002E36 7206                <1>     jb .foundBunch
   191 00002E38 29DA                <1>     sub edx, ebx
   192 00002E3A FFC1                <1>     inc ecx
   193 00002E3C EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 00002E3E C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 00002E41 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 00002E43 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 00002E48 488D350ED2FFFF      <1>     lea rsi, monthsTbl
   204 00002E4F 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 00002E51 FFC1                <1>     inc ecx ;Start from 1
   207 00002E53 AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 00002E54 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 00002E57 39C2                <1>     cmp edx, eax
   210 00002E59 7204                <1>     jb .monthFound
   211 00002E5B 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 00002E5D EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 00002E5F FFC2                <1>     inc edx
   217 00002E61 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 00002E67 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 00002E6D E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 00002E72 5D                  <1>     pop rbp
   222 00002E73 5E                  <1>     pop rsi
   223 00002E74 5A                  <1>     pop rdx
   224 00002E75 59                  <1>     pop rcx
   225 00002E76 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002E77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 00002E78 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 00002E7F 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00002E84 31D2                <1>     xor edx, edx
   234 00002E86 B907000000          <1>     mov ecx, 7   
   235 00002E8B F7F1                <1>     div ecx  ;Get remainder in dl
   236 00002E8D 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 00002E93 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00002E95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00002E96 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 00002E9C F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 00002E9F 51                  <1>     push rcx
   248 00002EA0 57                  <1>     push rdi
   249 00002EA1 B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00002EA6 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 00002EAB 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 00002EAE 488D3DA9D1FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00002EB5 AA                  <1>     stosb   ;Store the word in rdi
   254 00002EB6 5F                  <1>     pop rdi
   255 00002EB7 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002EB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 00002EB9 53                  <1>     push rbx
   271 00002EBA 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 00002EC1 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 00002EC3 89D8                <1>     mov eax, ebx
   274 00002EC5 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 00002ECC C1E305              <1>     shl ebx, 5
   276 00002ECF 09D8                <1>     or eax, ebx
   277 00002ED1 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 00002ED8 C1E30B              <1>     shl ebx, 11
   279 00002EDB 09D8                <1>     or eax, ebx
   280 00002EDD 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 00002EE4 C1E310              <1>     shl ebx, 16
   282 00002EE7 09D8                <1>     or eax, ebx
   283 00002EE9 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 00002EF0 C1E315              <1>     shl ebx, 21
   285 00002EF3 09D8                <1>     or eax, ebx
   286 00002EF5 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 00002EFC C1E319              <1>     shl ebx, 25
   288 00002EFF 09D8                <1>     or eax, ebx
   289 00002F01 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 00002F02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 00002F03 E8C6FEFFFF          <1>     call readDateTimeRecord
   296 00002F08 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 00002F0D 31D2                <1>     xor edx, edx
   298 00002F0F 6689C2              <1>     mov dx, ax  ;Save time
   299 00002F12 C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 00002F15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00002F16 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 00002F1D 4889D6              <1>     mov rsi, rdx
    30 00002F20 803EFF              <1>     cmp byte [rsi], -1
    31 00002F23 7507                <1>     jne .notExt1
    32 00002F25 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 00002F2C 0FB606              <1>     movzx eax, byte [rsi]
    35 00002F2F 50                  <1>     push rax    ;Push on stack the drive number
    36 00002F30 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00002F37 E822030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 00002F3C 7306                <1>     jnc .fcbOk
    39 00002F3E 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 00002F3F E9B7450000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00002F44 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 00002F4B E876E4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 00002F50 7306                <1>     jnc .fileFound
    45 00002F52 5B                  <1>     pop rbx
    46 00002F53 E9A3450000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 00002F58 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 00002F5F 57                  <1>     push rdi
    51 00002F60 E80EE3FFFF          <1>     call setupFFBlock
    52 00002F65 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00002F66 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 00002F6D F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00002F74 7407                <1>     jz .notExt2
    57 00002F76 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 00002F7D 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 00002F7E 85DB                <1>     test ebx, ebx
    61 00002F80 7509                <1>     jnz .notCurrentDrive
    62 00002F82 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 00002F89 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 00002F8B AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 00002F8C 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 00002F8F B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00002F94 F3A5                <1>     rep movsd
    69 00002F96 89D8                <1>     mov eax, ebx
    70 00002F98 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00002F99 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 00002FA0 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00002FA7 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 00002FAE 7412                <1>     jz .notExt3
    75 00002FB0 B8FFFFFFFF          <1>     mov eax, -1
    76 00002FB5 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00002FB6 FFC0                <1>     inc eax ;Make it zero
    78 00002FB8 AB                  <1>     stosd
    79 00002FB9 AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00002FBA 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 00002FC1 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 00002FC2 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 00002FC4 AA                  <1>     stosb
    85 00002FC5 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 00002FCA F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 00002FCD E926450000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 00002FD2 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 00002FD9 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 00002FE0 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 00002FE7 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 00002FEA 803EFF              <1>     cmp byte [rsi], -1
    96 00002FED 7514                <1>     jne .notExt
    97 00002FEF FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 00002FF5 4881C606000000      <1>     add rsi, exFcb.attribute
    99 00002FFC AC                  <1>     lodsb   ;Get search attr in al
   100 00002FFD 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 00003003 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 0000300A 31C0                <1>     xor eax, eax
   105 0000300C AC                  <1>     lodsb   ;Get the FCB drive letter
   106 0000300D 50                  <1>     push rax    ;Push drive letter on the stack
   107 0000300E 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 00003011 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 00003012 B905000000          <1>     mov ecx, 5
   110 00003017 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00003019 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 0000301F 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00003026 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00003027 8F05(17040000)      <1>     pop qword [currentDTA]
   115 0000302D E817DEFFFF          <1>     call findNextMain
   116 00003032 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00003038 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 0000303E 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00003045 F607FF              <1>     test byte [rdi], -1
   120 00003048 7407                <1>     jz .notExt2
   121 0000304A 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 00003051 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 00003052 881F                <1>     mov byte [rdi], bl
   125 00003054 E9A2440000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 00003059 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 00003060 57                  <1>     push rdi
   130 00003061 E8F8010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00003066 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 00003067 0F828E440000        <1>     jc fcbErrExit
   133 0000306D E854E3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 00003072 0F8283440000        <1>     jc fcbErrExit
   135 00003078 E8E50F0000          <1>     call outerDeleteMain
   136 0000307D 0F8278440000        <1>     jc fcbErrExit
   137 00003083 E970440000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 00003088 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 0000308F 4889D6              <1>     mov rsi, rdx
   144 00003092 803EFF              <1>     cmp byte [rsi], -1
   145 00003095 7507                <1>     jne .notExt
   146 00003097 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 0000309E 31C0                <1>     xor eax, eax
   149 000030A0 AC                  <1>     lodsb
   150 000030A1 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 000030A2 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 000030A9 E8B0010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 000030AE 723D                <1>     jc .badPop
   154 000030B0 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 000030B6 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 000030BC 58                  <1>     pop rax ;Get drive letter back
   157 000030BD 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 000030C4 E869010000          <1>     call fcbInitName2
   159 000030C9 7223                <1>     jc short .bad
   160 000030CB 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 000030D2 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 000030D9 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 000030E0 E8A10B0000          <1>     call renameMain
   164 000030E5 0F830D440000        <1>     jnc fcbGoodExit
   165 000030EB EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 000030ED 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 000030EE E908440000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 000030F3 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 000030FA 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 00003101 57                  <1>     push rdi
   177 00003102 E857010000          <1>     call fcbInitRoutine
   178 00003107 5F                  <1>     pop rdi
   179 00003108 0F82ED430000        <1>     jc fcbErrExit
   180 0000310E E8B3E2FFFF          <1>     call getFilePathNoCanon
   181 00003113 0F82E2430000        <1>     jc fcbErrExit
   182 00003119 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 0000311F 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00003126 803EFF              <1>     cmp byte [rsi], -1
   186 00003129 7507                <1>     jne .notExtended
   187 0000312B 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 00003132 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00003136 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 00003138 85D2                <1>     test edx, edx
   193 0000313A 7402                <1>     jz .noRemainder
   194 0000313C FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 0000313E 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 00003141 E9B2430000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 00003146 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 0000314D 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 00003151 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 00003158 C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 00003159 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 00003160 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 00003167 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 0000316B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 0000316C E88D010000          <1>     call parseNameToFCB
   229 00003171 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 00003172 E8D53E0000          <1>     call getUserRegs
   231 00003177 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 0000317A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 0000317B 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 00003182 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003185 755F                <1>     jne .exitErr
   251 00003187 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 0000318B 7559                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 0000318D 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00003194 57                  <1>     push rdi
   256 00003195 E8C4000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 0000319A 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 0000319B 0F825A430000        <1>     jc fcbErrExit
   259 000031A1 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 000031A4 E883400000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 000031A9 723B                <1>     jc .exitErr
   262 000031AB E816E2FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 000031B0 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 000031B6 30C0                <1>     xor al, al
   265 000031B8 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 000031BD 7427                <1>     je .exitErr
   267 000031BF 488D1D(100D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 000031C6 48891D(32070000)    <1>     mov qword [currentSFT], rbx
   269 000031CD 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 000031D4 E86F100000          <1>     call createMain
   271 000031D9 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 000031DB E889130000          <1>     call closeMain
   275 000031E0 0F8312430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 000031E6 B805000000          <1>     mov eax, errAccDen
   278 000031EB E90B430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> ;=================================================================
   281                              <1> ;=================================================================
   282                              <1> ;These functions will be marked as reserved for future expansion.
   283                              <1> ; One idea will be to create a handle based record IO interface.
   284                              <1> ; We will be able to do IO on records of predefined length 
   285                              <1> ; on a file handle, thus removing the need for an FCB but still
   286                              <1> ; maintaining the usefulness of record based IO.
   287                              <1> ;=================================================================
   288                              <1> ;=================================================================
   289                              <1> closeFileFCB:      ;ah = 10h
   290                              <1> sequentialReadFCB: ;ah = 14h
   291                              <1> sequentialWriteFCB:;ah = 15h
   292                              <1> randomReadFCB:     ;ah = 21h
   293                              <1> randomWriteFCB:    ;ah = 22h
   294                              <1> setRelRecordFCB:   ;ah = 24h
   295                              <1> randBlockReadFCB:  ;ah = 27h
   296                              <1> randBlockWriteFCB: ;ah = 28h
   297 000031F0 B805000000          <1>     mov eax, errAccDen
   298 000031F5 E901430000          <1>     jmp fcbErrExit
   299                              <1> 
   300                              <1> 
   301                              <1> ;--------------------------------
   302                              <1> ;  Common FCB related Routines  :
   303                              <1> ;--------------------------------
   304                              <1> fcbCheckDriveType:
   305                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   306                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   307                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   308                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   309                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   310                              <1> ;If a net CDS, automatic fail (for now).
   311 000031FA C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   312 00003201 51                  <1>     push rcx
   313 00003202 57                  <1>     push rdi
   314 00003203 55                  <1>     push rbp
   315 00003204 9C                  <1>     pushfq
   316 00003205 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   317 0000320C 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   318 0000320E E8AC3D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   319 00003213 7218                <1>     jc .exit
   320                              <1>     ;rdi has cds ptr now
   321 00003215 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   322 00003219 E8EED7FFFF          <1>     call getFATtype
   323 0000321E 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   324 00003224 7707                <1>     ja .exit
   325                              <1> .okToGo:
   326 00003226 C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   327                              <1> .exit:
   328 0000322D 9D                  <1>     popfq
   329 0000322E 5D                  <1>     pop rbp
   330 0000322F 5F                  <1>     pop rdi
   331 00003230 59                  <1>     pop rcx
   332                              <1>     return
    13                              <2> %%_ret:
    14 00003231 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> fcbInitName2:
   334                              <1> ;Must be called after fcbInitRoutine has been run once
   335                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   336                              <1> ;       rdx -> UserFCB
   337                              <1> ;       eax[0] = Drive number (0 based)
   338 00003232 55                  <1>     push rbp
   339 00003233 4889E5              <1>     mov rbp, rsp
   340 00003236 4881EC0F000000      <1>     sub rsp, 15
   341 0000323D 57                  <1>     push rdi
   342 0000323E 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   343 00003242 4889D6              <1>     mov rsi, rdx
   344 00003245 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   345 0000324C 7407                <1>     jz .notExtended
   346 0000324E 4881C607000000      <1>     add rsi, exFcb.driveNum
   347                              <1> .notExtended:
   348                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   349 00003255 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   350 0000325C EB36                <1>     jmp short fcbInitRoutine.rename2EP
   351                              <1> fcbInitRoutine:
   352                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   353                              <1> ;Input: rdx -> User FCB
   354                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   355 0000325E 55                  <1>     push rbp
   356 0000325F 4889E5              <1>     mov rbp, rsp
   357 00003262 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   358                              <1>     ;This space is used to store X:FILENAME.EXT,0
   359 00003269 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   360 0000326A 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   361 0000326E C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   362 00003275 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   363 0000327C E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   364 00003281 7410                <1>     jz .notExtended
   365 00003283 C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   366 0000328A 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   367 0000328D 8805(FC060000)      <1>     mov byte [searchAttr], al
   368                              <1> .notExtended:
   369 00003293 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   370                              <1> .rename2EP:
   371                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   372 00003294 E8D73D0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   373 00003299 723F                <1>     jc .badDisk
   374 0000329B E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   375 000032A0 488D1DB5D1FFFF      <1>     lea rbx, asciiCharProperties
   376 000032A7 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   377 000032AC 56                  <1>     push rsi    ;rsi -> fcb.filename
   378                              <1> .nameCharCheck:
   379 000032AD AC                  <1>     lodsb   ;Get the char in al
   380 000032AE D7                  <1>     xlatb   ;Get the char signature in al
   381 000032AF A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   382 000032B1 7427                <1>     jz .badDisk
   383 000032B3 FFC9                <1>     dec ecx
   384 000032B5 75F6                <1>     jnz .nameCharCheck
   385 000032B7 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   386 000032B8 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   387 000032BB E873DFFFFF          <1>     call FCBToAsciiz
   388 000032C0 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   389 000032C1 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   390 000032C4 7414                <1>     je .badDisk
   391 000032C6 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   392 000032CA 55                  <1>     push rbp
   393 000032CB E8BEE0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   394 000032D0 5D                  <1>     pop rbp
   395 000032D1 7207                <1>     jc .badDisk
   396 000032D3 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   397 000032D8 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   398                              <1> .badDisk:
   399 000032DA B003                <1>     mov al, errPnf  ;DOS does this... so will I
   400 000032DC F9                  <1>     stc
   401                              <1> .jiggleStack:
   402 000032DD 4889EC              <1>     mov rsp, rbp
   403 000032E0 5D                  <1>     pop rbp
   404                              <1> .exit:
   405                              <1>     return
    13                              <2> %%_ret:
    14 000032E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> storeZeroBasedDriveNumber:
   408                              <1> ;Input: al => 0 based drive letter
   409                              <1> ;       rdi -> Points to buffer to store the X: in
   410 000032E2 FEC0                <1>     inc al
   411                              <1> storeOneBasedDriveNumber:
   412                              <1> ;Input: al => 1 based drive letter
   413                              <1> ;       rdi -> Points to buffer to store the X: in
   414 000032E4 0440                <1>     add al, "@"
   415 000032E6 B43A                <1>     mov ah, ":"
   416 000032E8 66AB                <1>     stosw
   417                              <1>     return
    13                              <2> %%_ret:
    14 000032EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> isFCBExtended:
   420                              <1> ;Input: rdx = FCB ptr
   421                              <1> ;Output: rsi -> Drive letter of FCB
   422                              <1> ;        rdx -> FCB first byte
   423                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   424 000032EB 4889D6              <1>     mov rsi, rdx
   425 000032EE 803EFF              <1>     cmp byte [rsi], -1
   426 000032F1 7507                <1>     jne .notExtended
   427 000032F3 4881C607000000      <1>     add rsi, exFcb.driveNum
   428                              <1> .notExtended:
   429 000032FA 4839F2              <1>     cmp rdx, rsi
   430                              <1>     return
    13                              <2> %%_ret:
    14 000032FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> parseNameToFCB:
   433                              <1> ;rsi points to a command line to parse
   434                              <1> ;rdi points to a future unopened FCB
   435                              <1> ;al = parsing control bits. 
   436                              <1> ; al[0] = If set, leading filename separators are scanned off
   437                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   438                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   439                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   440                              <1> ;
   441                              <1> ;Separators include : . ; , = + TAB SPACE
   442                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   443 000032FE C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   444 00003305 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   445 00003307 A802                <1>     test al, 2  ;Set drive letter
   446 00003309 7402                <1>     jz .skipDriveLetter
   447 0000330B 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   448                              <1> .skipDriveLetter:
   449 0000330D 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   450 00003310 B908000000          <1>     mov ecx, 8  ;Copy Filename
   451 00003315 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   452 00003317 93                  <1>     xchg eax, ebx
   453 00003318 B020                <1>     mov al, " " ;Clear the field
   454 0000331A 7405                <1>     jz .clearFilenameField
   455 0000331C 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   456 0000331F 31C9                <1>     xor ecx, ecx
   457                              <1> .clearFilenameField:
   458 00003321 F3AA                <1>     rep stosb
   459 00003323 B903000000          <1>     mov ecx, 3
   460 00003328 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   461 0000332B 7405                <1>     jz .clearExtensionField
   462 0000332D 4801CF              <1>     add rdi, rcx
   463 00003330 31C9                <1>     xor ecx, ecx
   464                              <1> .clearExtensionField:
   465 00003332 F3AA                <1>     rep stosb
   466 00003334 91                  <1>     xchg eax, ecx
   467 00003335 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   468 00003336 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   469 0000333D F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   470 00003340 740F                <1>     jz .dontScanOffTerm
   471 00003342 E89F000000          <1>     call skipSeparators ;Skip leading separators
   472 00003347 E8543E0000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   473 0000334C 7508                <1>     jnz .skipIfNotTerminator
   474 0000334E 48FFC6              <1>     inc rsi
   475                              <1> .dontScanOffTerm:
   476 00003351 E890000000          <1>     call skipSeparators  ;Skip separators
   477                              <1> .skipIfNotTerminator:
   478 00003356 E81D3E0000          <1>     call uppercaseCharAtPtr 
   479 0000335B 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   480 0000335D 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   481 00003360 7519                <1>     jne .skipSettingDriveLetter
   482 00003362 48FFC6              <1>     inc rsi ;Goto next char
   483 00003365 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   484 00003367 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   485 00003369 50                  <1>     push rax    ;Save the 1 based drive letter
   486 0000336A E8013D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   487 0000336F 58                  <1>     pop rax
   488 00003370 7302                <1>     jnc .validDriveLetter
   489                              <1> .invalidDriveLetter:
   490 00003372 B2FF                <1>     mov dl, -1
   491                              <1> .validDriveLetter:
   492 00003374 AA                  <1>     stosb
   493 00003375 48FFC6              <1>     inc rsi ;Align pointers...
   494 00003378 48FFCF              <1>     dec rdi 
   495                              <1> .skipSettingDriveLetter:
   496 0000337B 48FFCE              <1>     dec rsi
   497 0000337E 48FFC7              <1>     inc rdi
   498                              <1> getFCBFilename:
   499                              <1> ;Input: rsi points to first char of filename
   500                              <1> ;       rdi points to storage buffer for filename
   501                              <1> ;       dl contains the signature if drive invalid
   502                              <1> ;Output:
   503                              <1> ;       Fields filled
   504                              <1> ;       al = Return signature
   505 00003381 B908000000          <1>     mov ecx, 8
   506 00003386 E815000000          <1>     call getFCBNameField
   507 0000338B 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   508 0000338E 750D                <1>     jne .noExt
   509 00003390 B903000000          <1>     mov ecx, 3
   510 00003395 48FFC6              <1>     inc rsi ;Skip this char
   511 00003398 E814000000          <1>     call forceFCBNameField
   512                              <1> .noExt:
   513 0000339D 88D0                <1>     mov al, dl  ;Store the return signature
   514                              <1>     return
    13                              <2> %%_ret:
    14 0000339F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> getFCBNameField:
   517                              <1> ;Checks if the field is appropriate before copying it
   518 000033A0 E8D33D0000          <1>     call uppercaseCharAtPtr
   519 000033A5 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   520 000033A7 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   521 000033AA 48FFCE              <1>     dec rsi ;Point to previous char
   522                              <1>     return
    13                              <2> %%_ret:
    14 000033AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .okName:
   524 000033AE 48FFCE              <1>     dec rsi ;Go back now a char
   525                              <1> forceFCBNameField:
   526                              <1> ;Forcefully copies the name from rsi to rdi
   527 000033B1 E8C23D0000          <1>     call uppercaseCharAtPtr
   528 000033B6 7226                <1>     jc .terminatingSpace
   529 000033B8 750D                <1>     jnz .notSep
   530 000033BA F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   531 000033C1 741B                <1>     jz .terminatingSpace
   532 000033C3 3C20                <1>     cmp al, " "
   533 000033C5 7517                <1>     jne .terminatingSpace
   534                              <1> .notSep:
   535 000033C7 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   536 000033CA FFC9                <1>     dec ecx
   537 000033CC 3C2A                <1>     cmp al, "*" ;Big wildcard?
   538 000033CE 7504                <1>     jne .notBigWildcard
   539 000033D0 B03F                <1>     mov al, "?"
   540 000033D2 F3AA                <1>     rep stosb
   541                              <1> .notBigWildcard:
   542 000033D4 AA                  <1>     stosb   ;Stores the uppercased char
   543 000033D5 3C3F                <1>     cmp al, "?"
   544 000033D7 75D8                <1>     jne forceFCBNameField
   545 000033D9 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   546 000033DC EBD3                <1>     jmp short forceFCBNameField
   547                              <1> .terminatingSpace:
   548 000033DE B020                <1>     mov al, " "
   549 000033E0 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   550 000033E2 48FFCE              <1>     dec rsi     ;Point back to terminating char
   551                              <1>     return
    13                              <2> %%_ret:
    14 000033E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> skipSeparators:
   554                              <1> ;Input: rsi -> String 
   555                              <1> ;Output: rsi -> First non separator type char
   556 000033E6 AC                  <1>     lodsb
   557 000033E7 E8C33D0000          <1>     call isCharSeparator
   558 000033EC 74F8                <1>     jz skipSeparators
   559 000033EE 48FFCE              <1>     dec rsi
   560                              <1>     return
    13                              <2> %%_ret:
    14 000033F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 000033F2 51                  <1>     push rcx    ;Save file attributes on stack
    11 000033F3 488D0D4E0E0000      <1>     lea rcx, createMain
    12 000033FA C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003401 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003403 BB16000000          <1>     mov ebx, dirInclusive
    21 00003408 F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 0000340F 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003412 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 00003418 488D0DFF0C0000      <1>     lea rcx, openMain  
    25 0000341F 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003420 4889D6              <1>     mov rsi, rdx
    28 00003423 E8043E0000          <1>     call checkPathspecOK
    29 00003428 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 0000342A 58                  <1>     pop rax
    32 0000342B B805000000          <1>     mov eax, errAccDen
    33 00003430 E9E6400000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003435 E896400000          <1>     call dosCrit1Enter
    36 0000343A E8CD190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 0000343F E896400000          <1>     call dosCrit1Exit
    38 00003444 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 0000344A E8F4180000          <1>     call setCurrentSFT
    41 0000344F 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00003456 E87A1A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 0000345B 0F82BC000000        <1>     jc .exitBad
    44 00003461 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00003468 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 0000346F 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00003476 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00003478 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 0000347B 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00003482 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00003483 E887DEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00003488 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00003489 488D058E0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00003490 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00003497 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00003499 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 0000349C 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 0000349E F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 000034A5 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 000034A7 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 000034AD 30C9                <1>     xor cl, cl
    69 000034AF 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 000034B5 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 000034B7 58                  <1>     pop rax
    73 000034B8 B802000000          <1>     mov eax, errFnf 
    74 000034BD E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 000034C2 58                  <1>     pop rax
    77 000034C3 B803000000          <1>     mov eax, errPnf
    78 000034C8 E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 000034CD 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    82 000034CF 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 000034D2 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 000034D3 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1>     ;al means openmode here
    86 000034D5 A880                <1>     test al, 80h    ;No Inherit bit set?
    87 000034D7 7407                <1>     jz .callProc
    88 000034D9 247F                <1>     and al, 7Fh     ;Clear this bit
    89 000034DB B900100000          <1>     mov ecx, devNoInherit
    90                              <1> .callProc:
    91 000034E0 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 000034E6 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 000034EC 51                  <1>     push rcx    ;Save the device word 
    94 000034ED FFD3                <1>     call rbx    ;Enter with open mode in 
    95 000034EF 59                  <1>     pop rcx
    96 000034F0 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 000034F7 7228                <1>     jc .exitBad2
    98 000034F9 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 000034FE 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 00003502 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 00003509 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 0000350F 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 00003517 FF                  <1>
   103 00003518 E9F03F0000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 0000351D FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 0000351E 5B                  <1>     pop rbx ;Pop the word from the stack
   107 0000351F EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 00003521 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 00003528 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 0000352B 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 00003532 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 00003537 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 0000353F FF                  <1>
   116 00003540 E9D63F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 00003545 E8A1190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 0000354A 0F82CB3F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 00003550 E8EE170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 00003555 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   124 0000355A 740A                <1>     je .killHdl ;always kill the handle!
   125                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   126 0000355C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 00003560 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 00003562 3C70                <1>     cmp al, netFCBShare
   129 00003564 7408                <1>     je .notNetFCB
   130                              <1> .killHdl:
   131 00003566 E835190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 0000356B C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .notNetFCB:
   134 0000356E E8F60F0000          <1>     call closeMain  ;Call close main!
   135 00003573 0F82A23F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 00003579 B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 0000357E E98A3F0000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 00003583 488D35AC100000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 0000358A E85C190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 0000358F 0F82863F0000        <1>     jc extErrExit   ;Error code in al and exit
   144 00003595 E8A9170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 0000359A 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 0000359C FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 000035A2 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 000035A9 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 000035AB 8F05(17040000)      <1>     pop qword [currentDTA]
   150 000035B1 0F82643F0000        <1>     jc extErrExit   ;Error code in al and exit
   151 000035B7 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 000035B9 E9463F0000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 000035BE 488D35CD130000      <1>     lea rsi, writeBytes
   156 000035C5 E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 000035CA BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 000035CF F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 000035D6 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 000035D9 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 000035DF 4889D6              <1>     mov rsi, rdx
   166 000035E2 E8453C0000          <1>     call checkPathspecOK
   167 000035E7 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 000035E9 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 000035EB F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 000035F2 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 000035F4 B805000000          <1>     mov eax, errAccDen
   174 000035F9 E91D3F0000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 000035FE 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 00003605 52                  <1>     push rdx
   178 00003606 E804DDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 0000360B 5A                  <1>     pop rdx
   180 0000360C 0F82093F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 00003612 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 00003619 0F85FC3E0000        <1>     jnz extErrExit
   184 0000361F E83E0A0000          <1>     call outerDeleteMain
   185 00003624 0F82F13E0000        <1>     jc extErrExit
   186 0000362A E9DE3E0000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;Input: ecx=0, edx=Position to seek to
   190                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   191                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   192                              <1> ; use a 64 bit file pointer... They can try though!
   193                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   194                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   195 0000362F E8B7180000          <1>     call getSFTPtr
   196 00003634 0F82E13E0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   197 0000363A 3C03                <1>     cmp al, 3
   198 0000363C 720A                <1>     jb .validFunction
   199 0000363E B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   200 00003643 E9D33E0000          <1>     jmp extErrExit
   201                              <1> .validFunction:
   202 00003648 3C01                <1>     cmp al, 1
   203 0000364A 771A                <1>     ja .seekend
   204 0000364C 7203                <1>     jb .seekset
   205                              <1> ;Here we are at seekcur, seek from current (signed)
   206 0000364E 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   207                              <1> .seekset:
   208                              <1> ;Seek from the start (unsigned)
   209 00003651 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   210 00003654 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   211                              <1>     ;We return the file position in eax anyway!
   212                              <1> .seekExit:
   213 00003656 E8F1390000          <1>     call getUserRegs    ;Get user regs in rsi
   214 0000365B 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   215 0000365E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   216 00003661 E99E3E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   217                              <1> .seekend:
   218                              <1> ;Here we are at seekend, seek from end (signed)
   219 00003666 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   220 0000366C 7505                <1>     jnz .netCheck
   221                              <1> .proceedDisk:
   222 0000366E 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 00003671 EBDE                <1>     jmp short .seekset
   224                              <1> .netCheck:
   225 00003673 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   226 00003679 75F3                <1>     jnz .proceedDisk
   227 0000367B 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   228                              <1>     ;Check it's share mode
   229 0000367F 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   230 00003684 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   231 00003689 7407                <1>     je .netSeek
   232 0000368B 3D30000000          <1>     cmp eax, denyReadShare
   233 00003690 75DC                <1>     jne .proceedDisk
   234                              <1> .netSeek:
   235 00003692 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   236 00003697 CD2F                <1>     int 2Fh
   237 00003699 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   238 0000369B E97B3E0000          <1>     jmp extErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   242 000036A0 3C01                <1>     cmp al, 1
   243 000036A2 761F                <1>     jbe .subFuncOk
   244 000036A4 B801000000          <1>     mov eax, errInvFnc
   245                              <1> .chmodError:
   246                              <1> ;Call with ax = errorcode
   247 000036A9 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   248 000036B0 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   249 000036B7 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   250 000036BE E9583E0000          <1>     jmp extErrExit
   251                              <1> .subFuncOk:
   252 000036C3 4889D6              <1>     mov rsi, rdx
   253 000036C6 89C3                <1>     mov ebx, eax    ;Store function code in bl
   254 000036C8 53                  <1>     push rbx
   255 000036C9 51                  <1>     push rcx
   256 000036CA E85D3B0000          <1>     call checkPathspecOK
   257 000036CF 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   258                              <1> .badPath:
   259 000036D1 59                  <1>     pop rcx
   260 000036D2 5B                  <1>     pop rbx
   261 000036D3 B805000000          <1>     mov eax, errAccDen
   262 000036D8 EBCF                <1>     jmp short .chmodError
   263                              <1> .pathOk:
   264 000036DA E8273C0000          <1>     call checkPathNet 
   265 000036DF 74F0                <1>     jz .badPath ;Or Net paths
   266 000036E1 E8013C0000          <1>     call scanPathWC
   267 000036E6 72E9                <1>     jc .badPath ;Dont allow wildcards
   268 000036E8 488D3D(1E050000)    <1>     lea rdi, buffer1
   269 000036EF 52                  <1>     push rdx
   270 000036F0 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   271 000036F7 E813DCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   272 000036FC 5A                  <1>     pop rdx
   273 000036FD 59                  <1>     pop rcx
   274 000036FE 5B                  <1>     pop rbx
   275 000036FF 0F82163E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   276                              <1>     ;In the case of a wildcard, recall this will return the first file
   277 00003705 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   278 0000370C 759B                <1>     jnz .chmodError
   279                              <1> 
   280 0000370E E8AC380000          <1>     call testCDSNet
   281 00003713 730C                <1>     jnc .notNet
   282 00003715 750A                <1>     jnz .notNet ;This type of net ok
   283 00003717 B805000000          <1>     mov eax, errAccDen
   284 0000371C E9FA3D0000          <1>     jmp extErrExit
   285                              <1> .notNet:
   286 00003721 84DB                <1>     test bl, bl
   287 00003723 7526                <1>     jnz .setAttribs
   288                              <1>     ;Get attribs here
   289 00003725 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 0000372B 7412                <1>     jz .getDiskAttribs
   291 0000372D B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   292 00003732 CD2F                <1>     int 2Fh
   293 00003734 0F82E13D0000        <1>     jc extErrExit
   294 0000373A E9CE3D0000          <1>     jmp extGoodExit
   295                              <1> .getDiskAttribs:
   296 0000373F 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   297 00003746 E9C23D0000          <1>     jmp extGoodExit
   298                              <1> 
   299                              <1> .setAttribs:
   300                              <1>     ;Set attribs here
   301 0000374B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 00003751 7417                <1>     jz .setDiskAttribs
   303 00003753 0FB7C9              <1>     movzx ecx, cx
   304 00003756 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   305 00003757 B80E110000          <1>     mov eax, 110Eh
   306 0000375C CD2F                <1>     int 2Fh
   307 0000375E 59                  <1>     pop rcx
   308 0000375F 0F82B63D0000        <1>     jc extErrExit
   309 00003765 E9A33D0000          <1>     jmp extGoodExit
   310                              <1> .setDiskAttribs:
   311 0000376A E881080000          <1>     call checkNoOpenHandlesForShareAction
   312 0000376F 730A                <1>     jnc .okToSet
   313 00003771 B820000000          <1>     mov eax, errShrVio
   314 00003776 E9A03D0000          <1>     jmp extErrExit
   315                              <1> .okToSet:
   316 0000377B E8503D0000          <1>     call dosCrit1Enter
   317 00003780 E854EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   318 00003785 722D                <1>     jc .setErrorNoFlush
   319 00003787 F6C118              <1>     test cl, volLabelFile | directoryFile
   320 0000378A 740A                <1>     jz .set
   321 0000378C B805000000          <1>     mov eax, errAccDen
   322 00003791 E91E000000          <1>     jmp .setErrorNoFlush
   323                              <1> .set:
   324 00003796 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   325 00003799 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   326 0000379C 08E9                <1>     or cl, ch
   327 0000379E 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   328 000037A1 E876CFFFFF          <1>     call flushAllBuffersForDPB
   329 000037A6 720C                <1>     jc .setError
   330 000037A8 E82D3D0000          <1>     call dosCrit1Exit
   331 000037AD 31C0                <1>     xor eax, eax
   332 000037AF E9593D0000          <1>     jmp extGoodExit
   333                              <1> .setError:
   334                              <1> 
   335                              <1> .setErrorNoFlush:
   336 000037B4 E8213D0000          <1>     call dosCrit1Exit
   337 000037B9 E95D3D0000          <1>     jmp extErrExit
   338                              <1> 
   339                              <1> duplicateHandle:   ;ah = 45h, handle function
   340                              <1> ;Input: bx = Handle to duplicate
   341                              <1> ;Output: If ok then ax = New handle
   342 000037BE 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   343 000037C1 E80F170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   344                              <1> .duplicateCommon:
   345 000037C6 0F824F3D0000        <1>     jc extErrExit   ;Exit if no space
   346 000037CC 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   347 000037CF 93                  <1>     xchg eax, ebx
   348 000037D0 E816170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   349 000037D5 0F82403D0000        <1>     jc extErrExit
   350 000037DB 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   351 000037DE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   352 000037E4 7505                <1>     jnz .netFile
   353 000037E6 E8EA090000          <1>     call openDriverMux
   354                              <1> .netFile:
   355 000037EB E8B0160000          <1>     call getJFTPtr
   356 000037F0 8A1F                <1>     mov bl, byte [rdi]
   357 000037F2 881E                <1>     mov byte [rsi], bl
   358 000037F4 E9143D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   359                              <1> 
   360                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   361                              <1> ;Input: bx = Handle to duplicate
   362                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   363                              <1>     ;First we close cx if it exists
   364 000037F9 0FB7C9              <1>     movzx ecx, cx
   365 000037FC 53                  <1>     push rbx
   366 000037FD 51                  <1>     push rcx
   367 000037FE 89CB                <1>     mov ebx, ecx
   368 00003800 E840FDFFFF          <1>     call closeFileHdl   ;Close handle 
   369 00003805 5B                  <1>     pop rbx
   370 00003806 58                  <1>     pop rax
   371 00003807 E894160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   372 0000380C EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   373                              <1> 
   374                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   375                              <1> ;Input: cx = Search Attributes, cl only used
   376                              <1> ;       rdx = Ptr to path to file to look for
   377                              <1> ;       al = Document as needing to be 0 for now
   378                              <1> ;Return:
   379                              <1> ;Data in the DTA or error through AX with CF=CY
   380                              <1> ;CAVEATS!
   381                              <1> ;DTA:attribFnd = 40h => Char dev
   382                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   383 0000380E 880D(FC060000)      <1>     mov byte [searchAttr], cl
   384 00003814 4889D6              <1>     mov rsi, rdx
   385 00003817 E8103A0000          <1>     call checkPathspecOK
   386 0000381C 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   387 0000381E 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   388                              <1> .badPath:
   389 00003820 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   390 00003825 E9F13C0000          <1>     jmp extErrExit
   391                              <1> .pathspecOk:
   392 0000382A FF35(17040000)      <1>     push qword [currentDTA]
   393 00003830 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   394 00003837 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   395 0000383E 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   396 00003845 E8C5DAFFFF          <1>     call getFilePath
   397                              <1> .findfileExit:
   398 0000384A 8F05(17040000)      <1>     pop qword [currentDTA]
   399 00003850 0F82C53C0000        <1>     jc extErrExit
   400 00003856 488D3D(2F060000)    <1>     lea rdi, dosffblock
   401 0000385D 57                  <1>     push rdi
   402 0000385E E810DAFFFF          <1>     call setupFFBlock
   403 00003863 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   404 00003864 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   405 0000386B B92B000000          <1>     mov ecx, ffBlock_size
   406 00003870 F3A4                <1>     rep movsb   ;Copy the whole block. 
   407                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   408 00003872 31C0                <1>     xor eax, eax    ;Return value
   409 00003874 E9943C0000          <1>     jmp extGoodExit ;Exit well
   410                              <1> 
   411                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   412                              <1> ;Input: DTA has the find first block from the previous search
   413 00003879 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   414 00003880 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   415 00003887 B92B000000          <1>     mov ecx, ffBlock_size
   416 0000388C F3A4                <1>     rep movsb
   417 0000388E FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   418 00003894 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   419 0000389B 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   420 000038A2 E8A2D5FFFF          <1>     call findNextMain
   421 000038A7 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   422                              <1> 
   423                              <1> renameFile:        ;ah = 56h
   424                              <1> ;Input: rdx -> Filespec to rename
   425                              <1> ;       rdi -> New filespec
   426                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   427 000038A9 4889D6              <1>     mov rsi, rdx
   428 000038AC BB16000000          <1>     mov ebx, dirInclusive
   429 000038B1 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   430 000038B8 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   431 000038BB 880D(FC060000)      <1>     mov byte [searchAttr], cl
   432                              <1>     ;Step 0, verify both paths provided are valid
   433 000038C1 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   434 000038C6 7249                <1>     jc .accDenError
   435 000038C8 56                  <1>     push rsi
   436 000038C9 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   437 000038CC E84A000000          <1>     call .renamePathCheck
   438 000038D1 5E                  <1>     pop rsi
   439 000038D2 723D                <1>     jc .accDenError
   440                              <1>     ;Now we canonicalise the filenames to make life easy
   441 000038D4 56                  <1>     push rsi
   442 000038D5 4889FE              <1>     mov rsi, rdi
   443 000038D8 488D3D(9E050000)    <1>     lea rdi, buffer2
   444 000038DF E8AADAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   445 000038E4 5E                  <1>     pop rsi
   446 000038E5 722A                <1>     jc .accDenError
   447                              <1>     ;Now test if first file exists.
   448 000038E7 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   449 000038ED 8F05(26060000)      <1>     pop qword [fname2Ptr]
   450 000038F3 488D3D(1E050000)    <1>     lea rdi, buffer1
   451 000038FA E88FDAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   452 000038FF 7210                <1>     jc .accDenError 
   453 00003901 E880030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   454 00003906 0F820F3C0000        <1>     jc extErrExit
   455 0000390C E9FC3B0000          <1>     jmp extGoodExit
   456                              <1> .accDenError:
   457 00003911 B805000000          <1>     mov eax, errAccDen
   458 00003916 E9003C0000          <1>     jmp extErrExit
   459                              <1> .renamePathCheck:
   460                              <1> ;Checks if the pathspec in rsi is OK
   461 0000391B 56                  <1>     push rsi
   462 0000391C 57                  <1>     push rdi
   463 0000391D E80A390000          <1>     call checkPathspecOK
   464 00003922 5F                  <1>     pop rdi
   465 00003923 5E                  <1>     pop rsi
   466 00003924 730D                <1>     jnc .pathOk     ;Path ok 
   467 00003926 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   468                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   469 00003928 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   470 0000392F 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   471                              <1> .badPath:
   472 00003931 F9                  <1>     stc
   473                              <1>     return
    13                              <2> %%_ret:
    14 00003932 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .pathOk:
   475 00003933 F8                  <1>     clc
   476                              <1>     return
    13                              <2> %%_ret:
    14 00003934 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> getSetFileDateTime: ;ah = 57h
   479 00003935 3C01                <1>     cmp al, 1
   480 00003937 760A                <1>     jbe .oksubfun
   481 00003939 B801000000          <1>     mov eax, errInvFnc
   482 0000393E E9D83B0000          <1>     jmp extErrExit
   483                              <1> .oksubfun:
   484 00003943 E8A3150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   485 00003948 0F82CD3B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   486 0000394E 3C01                <1>     cmp al, 1
   487 00003950 7426                <1>     je .setTimeDate
   488                              <1>     ;Here we get the Time/Date
   489 00003952 E8793B0000          <1>     call dosCrit1Enter
   490 00003957 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   491 0000395B 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   492 0000395F E8763B0000          <1>     call dosCrit1Exit
   493 00003964 E8E3360000          <1>     call getUserRegs
   494 00003969 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   495 0000396D 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   496 00003971 31C0                <1>     xor eax, eax
   497 00003973 E9953B0000          <1>     jmp extGoodExit
   498                              <1> .setTimeDate:
   499                              <1>     ;Here we set the Time/Date
   500 00003978 E8533B0000          <1>     call dosCrit1Enter
   501 0000397D 66894F13            <1>     mov word [rdi + sft.wTime], cx
   502 00003981 66895715            <1>     mov word [rdi + sft.wDate], dx
   503 00003985 31C0                <1>     xor eax, eax
   504 00003987 FF15(2F010000)      <1>     call qword [updateDirShare]
   505                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   506                              <1>     ; further change the file time since we have manually overridden it 
   507                              <1>     ; with the time specified
   508 0000398D 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;Clear flag to sync
   509 00003993 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], blokNoDTonClose    ;Force it to this time
   510 00003999 E83C3B0000          <1>     call dosCrit1Exit
   511 0000399E 31C0                <1>     xor eax, eax
   512 000039A0 E9683B0000          <1>     jmp extGoodExit
   513                              <1> 
   514                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   515                              <1> ;Uses the clock to do it's bidding
   516                              <1> ;cx = file attribute 
   517                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   518                              <1> ;       filename
   519 000039A5 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   520 000039AA 740A                <1>     jz .validAttribs
   521 000039AC B805000000          <1>     mov eax, errAccDen
   522 000039B1 E9653B0000          <1>     jmp extErrExit
   523                              <1> .validAttribs:
   524 000039B6 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   525 000039BA 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   526 000039BD B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   527 000039C2 31C0                <1>     xor eax, eax
   528 000039C4 4889D7              <1>     mov rdi, rdx
   529 000039C7 F2AE                <1>     repne scasb
   530 000039C9 85C9                <1>     test ecx, ecx
   531 000039CB 750A                <1>     jnz .nullFnd
   532                              <1>     ;Bad path
   533 000039CD B803000000          <1>     mov eax, errPnf
   534 000039D2 E9443B0000          <1>     jmp extErrExit
   535                              <1> .nullFnd:
   536 000039D7 48FFCF              <1>     dec rdi
   537 000039DA 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   538 000039DE E88A370000          <1>     call swapPathSeparator
   539 000039E3 7403                <1>     jz .pathsepFnd
   540                              <1>     ;If no pathsep found, force one at rdi
   541 000039E5 B05C                <1>     mov al, "\"
   542 000039E7 AA                  <1>     stosb
   543                              <1> .pathsepFnd:
   544 000039E8 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   545                              <1> .fileCreateLoop:
   546 000039EB 55                  <1>     push rbp
   547 000039EC E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   548 000039F1 5D                  <1>     pop rbp
   549 000039F2 0FB7C1              <1>     movzx eax, cx
   550 000039F5 0FB7D2              <1>     movzx edx, dx
   551 000039F8 C1E010              <1>     shl eax, 10h
   552 000039FB 09D0                <1>     or eax, edx  ;Add the bits of dx too
   553 000039FD E831000000          <1>     call .writeNybbles
   554 00003A02 31C0                <1>     xor eax, eax
   555 00003A04 AA                  <1>     stosb   ;Store terminating null
   556 00003A05 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   557 00003A08 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   558 00003A0B 55                  <1>     push rbp
   559 00003A0C E85C000000          <1>     call createNewFile
   560 00003A11 5D                  <1>     pop rbp
   561 00003A12 0F83F53A0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   562 00003A18 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   563 00003A1F 3D05000000          <1>     cmp eax, errAccDen
   564 00003A24 74C5                <1>     je .fileCreateLoop
   565 00003A26 3D50000000          <1>     cmp eax, errFilExist
   566 00003A2B 74BE                <1>     je .fileCreateLoop
   567 00003A2D F9                  <1>     stc
   568 00003A2E E9E83A0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   569                              <1> .writeNybbles:
   570                              <1> ;Write the nybbles of eax at rdi
   571 00003A33 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   572                              <1> .wnLp:
   573 00003A38 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   574 00003A3B 50                  <1>     push rax
   575 00003A3C 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   576 00003A41 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   577 00003A46 3D39000000          <1>     cmp eax, '9'
   578 00003A4B 7605                <1>     jbe .notExtDigit
   579 00003A4D 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   580                              <1> .notExtDigit:
   581 00003A52 AA                  <1>     stosb   ;Store the digit
   582 00003A53 58                  <1>     pop rax
   583 00003A54 FFC9                <1>     dec ecx
   584 00003A56 75E0                <1>     jnz .wnLp
   585                              <1>     return
    13                              <2> %%_ret:
    14 00003A58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> .uniqueTimeGet:
   588 00003A59 E870F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   589 00003A5E 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   590 00003A65 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   591                              <1>     return
    13                              <2> %%_ret:
    14 00003A6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> createNewFile:     ;ah = 5Bh
   594 00003A6D 51                  <1>     push rcx    ;Save file attributes on stack
   595 00003A6E 488D0DBE070000      <1>     lea rcx, createNewMain
   596 00003A75 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   597 00003A7C E99FF9FFFF          <1>     jmp openFileHdl.openCommon
   598                              <1> 
   599                              <1> lockUnlockFile:    ;ah = 5Ch
   600                              <1> ;ah = 5Ch
   601                              <1> ;al = subfunction
   602                              <1> ;       00h lock region of file
   603                              <1> ;       01h unlock region of file
   604                              <1> ;ebx = file handle
   605                              <1> ;ecx = start offset of region within file
   606                              <1> ;edi = length of region in bytes
   607 00003A81 3C01                <1>     cmp al, 1
   608 00003A83 7757                <1>     ja .badFunction
   609 00003A85 57                  <1>     push rdi
   610 00003A86 E87A140000          <1>     call derefSFTPtr
   611 00003A8B 730B                <1>     jnc .validHdl
   612 00003A8D 58                  <1>     pop rax ;Discard the qword on the stack
   613 00003A8E B806000000          <1>     mov eax, errBadHdl
   614 00003A93 E9833A0000          <1>     jmp extErrExit
   615                              <1> .validHdl:
   616 00003A98 84C0                <1>     test al, al ;Check if al = 0
   617 00003A9A 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   618 00003A9B 7424                <1>     jz .lockFileRegion
   619 00003A9D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   620 00003AA3 740B                <1>     jz .unlockShare ;Jump if a local file only
   621 00003AA5 50                  <1>     push rax
   622 00003AA6 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   623 00003AAB CD2F                <1>     int 2Fh
   624 00003AAD 5B                  <1>     pop rbx
   625 00003AAE EB06                <1>     jmp short .exitSelect
   626                              <1> .unlockShare:
   627 00003AB0 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   628                              <1> .exitSelect:
   629 00003AB6 0F825F3A0000        <1>     jc extErrExit
   630 00003ABC E94C3A0000          <1>     jmp extGoodExit
   631                              <1> .lockFileRegion:
   632 00003AC1 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   633 00003AC7 740B                <1>     jz .lockShare   ;Jump if a local file only
   634 00003AC9 50                  <1>     push rax
   635 00003ACA B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   636 00003ACF CD2F                <1>     int 2Fh
   637 00003AD1 5B                  <1>     pop rbx
   638 00003AD2 EBE2                <1>     jmp short .exitSelect
   639                              <1> .lockShare:
   640 00003AD4 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   641 00003ADA EBDA                <1>     jmp short .exitSelect
   642                              <1> .badFunction:
   643 00003ADC B801000000          <1>     mov eax, errInvFnc
   644 00003AE1 668905(0B040000)    <1>     mov word [errorExCde], ax
   645 00003AE8 E92E3A0000          <1>     jmp extErrExit
   646                              <1> 
   647                              <1> setHandleCount:    ;ah = 67h
   648                              <1> ;Input: bx = Size of new file handle table for process
   649                              <1> ;Output: CF=NC -> Ok to make more handles
   650                              <1> ;        CF=CY -> ax = Error code
   651                              <1> ;Five cases to consider:
   652                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   653                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   654                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   655                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   656                              <1> ;   Special case below, cannot be enacted directly by caller.
   657                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   658 00003AED 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   659 00003AF0 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   660 00003AF7 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   661 00003AFB 7765                <1>     ja short .moreHdlsReq
   662 00003AFD 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   663 00003B02 771A                <1>     ja short .reduceExternal
   664                              <1>     ;Here if 20 handles or less requested
   665 00003B04 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   666 00003B0A 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   667 00003B0C 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   668 00003B0E 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   669                              <1> .exitGood:
   670 00003B14 E9F4390000          <1>     jmp extGoodExit
   671                              <1> .exitBad:
   672 00003B19 E9FD390000          <1>     jmp extErrExit
   673                              <1> .reduceExternal:
   674                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   675                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   676                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   677                              <1> ; and failing that, it will free it and then allocate a new block.
   678 00003B1E 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   679 00003B22 E8E8000000          <1>     call .checkOpenHandles
   680 00003B27 72F0                <1>     jc short .exitBad
   681                              <1>     ;Recall ebx has the numebr of handles here
   682 00003B29 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   683 00003B2E 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   684 00003B32 EBE0                <1>     jmp short .exitGood
   685                              <1> .reduceFree:
   686                              <1> ;Entered once we know that we have an external block
   687                              <1> ;Now we close all handles above JFT size
   688 00003B34 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   689 00003B38 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   690 00003B3B E8CF000000          <1>     call .checkOpenHandles
   691 00003B40 72D7                <1>     jc short .exitBad
   692 00003B42 BB14000000          <1>     mov ebx, dfltJFTsize
   693 00003B47 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   694                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   695 00003B49 E8B8000000          <1>     call .copyBlock
   696                              <1>     ;Now we can free the old block
   697 00003B4E 4989F0              <1>     mov r8, rsi
   698 00003B51 53                  <1>     push rbx
   699 00003B52 E8DE1A0000          <1>     call freeMemory
   700 00003B57 5B                  <1>     pop rbx
   701 00003B58 72BF                <1>     jc short .exitBad
   702 00003B5A 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   703 00003B5E 31C0                <1>     xor eax, eax
   704                              <1> .exitGood2:
   705 00003B60 EBB2                <1>     jmp short .exitGood
   706                              <1> .moreHdlsReq:
   707 00003B62 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   708 00003B68 7507                <1>     jne short .okToExpand
   709 00003B6A B801000000          <1>     mov eax, errInvFnc
   710                              <1> .exitBad2:
   711 00003B6F EBA8                <1>     jmp short .exitBad
   712                              <1> .okToExpand:
   713                              <1> ;Need to check if we are external and reallocating. 
   714                              <1> ;   If we are, can we realloc or do we need to free and save?
   715 00003B71 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   716 00003B77 762E                <1>     jbe short .moreFromJFT
   717 00003B79 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   718 00003B7D E83C000000          <1>     call .reallocBlock
   719 00003B82 7390                <1>     jnc short .exitGood
   720 00003B84 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   721 00003B89 728E                <1>     jc short .exitBad
   722 00003B8B 4989F0              <1>     mov r8, rsi ;Free the source block
   723 00003B8E 53                  <1>     push rbx
   724 00003B8F 57                  <1>     push rdi    ;Save the new pointer here
   725 00003B90 55                  <1>     push rbp
   726 00003B91 E89F1A0000          <1>     call freeMemory
   727 00003B96 5D                  <1>     pop rbp
   728 00003B97 5F                  <1>     pop rdi
   729 00003B98 5B                  <1>     pop rbx
   730 00003B99 7317                <1>     jnc short .freeOk ;Free'd the original block
   731 00003B9B 50                  <1>     push rax    ;Save error code on stack
   732 00003B9C 4989F8              <1>     mov r8, rdi ;Free the new block
   733 00003B9F E8911A0000          <1>     call freeMemory
   734 00003BA4 58                  <1>     pop rax
   735 00003BA5 EBC8                <1>     jmp short .exitBad2
   736                              <1> .moreFromJFT:
   737 00003BA7 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   738 00003BAB E826000000          <1>     call .getBlock
   739 00003BB0 72BD                <1>     jc short .exitBad2
   740                              <1> .freeOk:
   741 00003BB2 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   742 00003BB6 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   743 00003BBA 31C0                <1>     xor eax, eax
   744 00003BBC EBA2                <1>     jmp short .exitGood2
   745                              <1> .reallocBlock:
   746                              <1> ;Input:
   747                              <1> ;   rsi -> Source block to reallocate
   748                              <1> ;   ebx = Number of handles
   749                              <1> ;   rbp -> Current PSP
   750                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   751                              <1> ;                 ebx = Number of handles
   752                              <1> ;        CF=CY => Error, EAX has error code
   753 00003BBE 56                  <1>     push rsi ;Save external pointer on stack
   754 00003BBF 53                  <1>     push rbx    ;Save number of handles on stack
   755 00003BC0 55                  <1>     push rbp
   756 00003BC1 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   757 00003BC7 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   758 00003BCA 4989F0              <1>     mov r8, rsi
   759 00003BCD E86B1B0000          <1>     call reallocMemory
   760 00003BD2 5D                  <1>     pop rbp
   761 00003BD3 5B                  <1>     pop rbx
   762 00003BD4 5E                  <1>     pop rsi ;Get external pointer back in rsi
   763                              <1>     return
    13                              <2> %%_ret:
    14 00003BD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .getBlock:
   765                              <1> ;rsi -> Source block for copy 
   766                              <1> ;ebx = Number of new handles
   767                              <1> ;Output: rsi and ebx as before
   768                              <1> ;        rdi -> New block
   769                              <1> ;IF CF=CY, bad exit
   770 00003BD6 53                  <1>     push rbx    ;bx has the number of handles we want
   771 00003BD7 56                  <1>     push rsi
   772 00003BD8 55                  <1>     push rbp
   773 00003BD9 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   774 00003BDF C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   775 00003BE2 89D9                <1>     mov ecx, ebx
   776 00003BE4 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   777 00003BE7 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   778 00003BE8 E844180000          <1>     call allocateMemory ;Allocate memory 
   779 00003BED 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   780 00003BEE 5D                  <1>     pop rbp ;Get the PSP pointer back
   781 00003BEF 5E                  <1>     pop rsi ;Get the source pointer back
   782 00003BF0 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   783                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003BF1 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   784 00003BF3 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   785 00003BF6 57                  <1>     push rdi
   786 00003BF7 31C0                <1>     xor eax, eax
   787 00003BF9 FFC8                <1>     dec eax
   788 00003BFB F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   789 00003BFD 5F                  <1>     pop rdi
   790 00003BFE 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   791 00003C00 E801000000          <1>     call .copyBlock ;Copy all the handles over
   792                              <1>     return
    13                              <2> %%_ret:
    14 00003C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .copyBlock:
   794                              <1> ;Input: rsi -> Source block
   795                              <1> ;       rdi -> Destination block
   796                              <1> ;       ecx = Number of handles to copy
   797 00003C06 56                  <1>     push rsi
   798 00003C07 57                  <1>     push rdi
   799 00003C08 51                  <1>     push rcx
   800 00003C09 F3A4                <1>     rep movsb
   801 00003C0B 59                  <1>     pop rcx
   802 00003C0C 5F                  <1>     pop rdi
   803 00003C0D 5E                  <1>     pop rsi
   804                              <1>     return
    13                              <2> %%_ret:
    14 00003C0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> .checkOpenHandles:
   806                              <1> ;Checks for open handles in the range that is to be freed.
   807                              <1> ;If any found, error exit
   808                              <1> ;Input: rsi -> Where to start searching
   809 00003C0F 56                  <1>     push rsi
   810 00003C10 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   811                              <1> .cohLoop:
   812 00003C14 803EFF              <1>     cmp byte [rsi], -1
   813 00003C17 7509                <1>     jne .checkOpenHandlesBadExit
   814 00003C19 48FFC6              <1>     inc rsi
   815 00003C1C FFC9                <1>     dec ecx
   816 00003C1E 75F4                <1>     jnz .cohLoop
   817 00003C20 5E                  <1>     pop rsi
   818                              <1>     return
    13                              <2> %%_ret:
    14 00003C21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> .checkOpenHandlesBadExit:
   820 00003C22 B804000000          <1>     mov eax, errNhl
   821 00003C27 F9                  <1>     stc
   822 00003C28 5E                  <1>     pop rsi
   823                              <1>     return
    13                              <2> %%_ret:
    14 00003C29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   826                              <1>     ;Input: bx = File to flush
   827 00003C2A E8BC120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   828 00003C2F 0F82E6380000        <1>     jc extErrExit
   829 00003C35 E809110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   830                              <1>     ;Now we check if the device is a char, disk or net file and commit
   831 00003C3A E811000000          <1>     call commitMain
   832 00003C3F 0F82D6380000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   833                              <1> .exitOk:
   834 00003C45 30C0                <1>     xor al, al
   835 00003C47 E800340000          <1>     call getUserRegs
   836 00003C4C 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   837                              <1>     return
    13                              <2> %%_ret:
    14 00003C4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   838                              <1> 
   839                              <1> ;-----------------------------------:
   840                              <1> ;       Main File IO Routines       :
   841                              <1> ;-----------------------------------:
   842                              <1> commitMain:
   843                              <1> ;Commits the current SFT 
   844 00003C50 E8F6100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   845 00003C55 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   846 00003C59 F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   847                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003C5F 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   848 00003C61 F7C300800000        <1>     test ebx, devRedirDev
   849 00003C67 7408                <1>     jz .notNet
   850                              <1>     ;Commit file net redir call and exit
   851 00003C69 B807110000          <1>     mov eax, 1107h
   852 00003C6E CD2F                <1>     int 2Fh
   853                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003C70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .notNet:
   855 00003C71 E85A380000          <1>     call dosCrit1Enter
   856 00003C76 E8CEE5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   857 00003C7B B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   858 00003C80 E817090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   859                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003C85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   860                              <1>     
   861                              <1> renameMain:
   862                              <1> ;Now, creates a special find first block for the source file
   863                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   864                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   865                              <1> ; block. 
   866                              <1> ;Then we search for that file name specifically (again), replacing 
   867                              <1> ; the filename portion of the destination buffer. If it exists or the 
   868                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   869                              <1> ; the new directory entry and delete the original file. 
   870                              <1> ;Input:
   871                              <1> ; filenamePtr1 -> Source path + filename pattern
   872                              <1> ; filenamePtr2 -> New path + filename pattern
   873                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   874                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   875 00003C86 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   876 00003C8D E82D330000          <1>     call testCDSNet ;CF=NC => Not net
   877 00003C92 7308                <1>     jnc .notNet
   878 00003C94 B811110000          <1>     mov eax, 1111h
   879 00003C99 CD2F                <1>     int 2Fh
   880                              <1>     return
    13                              <2> %%_ret:
    14 00003C9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   881                              <1> .notNet:
   882                              <1> ;First check if both drives are on the same disk
   883 00003C9C 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   884 00003CA2 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   885 00003CA8 38E0                <1>     cmp al, ah
   886 00003CAA 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   887 00003CAC B811000000          <1>     mov eax, errDevUnk
   888 00003CB1 F9                  <1>     stc
   889                              <1>     return
    13                              <2> %%_ret:
    14 00003CB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   890                              <1> .sameDrive:
   891                              <1> ;Now we check if either pathsepc is simply X:\,0
   892                              <1> ; If they are, return fail as we cannot rename the root dir
   893 00003CB3 E818380000          <1>     call dosCrit1Enter
   894 00003CB8 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   895 00003CBE 30C0                <1>     xor al, al
   896 00003CC0 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   897 00003CC5 750B                <1>     jne .checkpath2
   898                              <1> .accDen:
   899 00003CC7 B805000000          <1>     mov eax, errAccDen
   900                              <1> .errorExit:
   901 00003CCC F9                  <1>     stc
   902 00003CCD E9D3020000          <1>     jmp .exit2
   903                              <1> .checkpath2:
   904 00003CD2 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   905 00003CD8 30C0                <1>     xor al, al
   906 00003CDA 3D003A5C00          <1>     cmp eax, 005C3A00h
   907 00003CDF 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   908                              <1>     ;Now ensure hte two paths are not equal
   909 00003CE1 488D35(1E050000)    <1>     lea rsi, buffer1
   910 00003CE8 488D3D(9E050000)    <1>     lea rdi, buffer2
   911 00003CEF E80C350000          <1>     call compareFileNames
   912 00003CF4 74D1                <1>     jz .accDen
   913                              <1> ;Now we find first the source file
   914 00003CF6 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   915 00003CFD 4889F7              <1>     mov rdi, rsi
   916 00003D00 E8C1D6FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   917 00003D05 0F829A020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   918 00003D0B 488D35(5A060000)    <1>     lea rsi, curDirCopy
   919 00003D12 488D3D(BD070000)    <1>     lea rdi, renameDir
   920 00003D19 B904000000          <1>     mov ecx, fatDirEntry_size/8
   921 00003D1E F348A5              <1>     rep movsq   ;Copy directory over
   922 00003D21 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   923 00003D28 E846D5FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   924                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   925                              <1>     ; dir for any CDS.
   926 00003D2D F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   927 00003D34 7591                <1>     jnz .accDen ;Cant rename a char file!
   928 00003D36 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   929 00003D3D 7447                <1>     jz .notDirCheck
   930 00003D3F 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   931 00003D46 57                  <1>     push rdi
   932 00003D47 E87D340000          <1>     call strlen ;Get asciiz length in ecx
   933 00003D4C 5B                  <1>     pop rbx
   934 00003D4D FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   935 00003D4F 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   936 00003D56 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   937                              <1> .dirCheck:
   938 00003D5D 4889DF              <1>     mov rdi, rbx
   939 00003D60 51                  <1>     push rcx    ;Save the char count to check!
   940 00003D61 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   941 00003D62 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   942 00003D64 AC                  <1>     lodsb   ;Get the last char to check in al
   943 00003D65 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   944 00003D66 59                  <1>     pop rcx
   945 00003D67 7512                <1>     jne .neqDir
   946                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   947 00003D69 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   948 00003D6B 7404                <1>     je .curDirChangeErr
   949 00003D6D 84C0                <1>     test al, al
   950 00003D6F 750A                <1>     jne .neqDir ;Proceed as normal if not null
   951                              <1> .curDirChangeErr:
   952                              <1>     ;Here we are trying to change a current directory. Fail it!
   953                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   954                              <1>     ; we initially had programmed in (with access denied error instead).
   955 00003D71 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   956 00003D76 E951FFFFFF          <1>     jmp .errorExit
   957                              <1> .neqDir:
   958 00003D7B 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   959 00003D82 FFCA                <1>     dec edx
   960 00003D84 75D7                <1>     jnz .dirCheck
   961                              <1> .notDirCheck:
   962                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   963 00003D86 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   964 00003D8B 31C0                <1>     xor eax, eax
   965 00003D8D 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   966 00003D94 F2AE                <1>     repne scasb   ;Search for terminating null
   967 00003D96 FD                  <1>     std ;Go backwards now, to find the path sep
   968 00003D97 B05C                <1>     mov al, "\"
   969 00003D99 F2AE                <1>     repne scasb   ;Now rsi points one before
   970 00003D9B FC                  <1>     cld ;Go normal ways now
   971 00003D9C 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   972 00003DA3 57                  <1>     push rdi
   973 00003DA4 4889FE              <1>     mov rsi, rdi
   974 00003DA7 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
   975 00003DAE E838D4FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   976 00003DB3 5F                  <1>     pop rdi
   977 00003DB4 57                  <1>     push rdi    ;Save rdi on stack again
   978 00003DB5 488D35(B0070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   979                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   980 00003DBC 48A5                <1>     movsq
   981 00003DBE A5                  <1>     movsd
   982 00003DBF A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   983 00003DC0 5F                  <1>     pop rdi ;rdi points to first char position
   984 00003DC1 E82A020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   985 00003DC6 0F8200FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   986                              <1>     ;Else return the pattern back to its original position
   987 00003DCC 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   988 00003DD3 E85BD4FFFF          <1>     call FCBToAsciiz
   989                              <1>     ;Delete the original directory entry
   990 00003DD8 E8FCE3FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
   991                              <1>     ;rsi points to the file entry
   992 00003DDD 8A05(08070000)      <1>     mov al, byte [delChar]
   993 00003DE3 8806                <1>     mov byte [rsi], al
   994 00003DE5 E8A3CAFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   995                              <1> 
   996                              <1>     ;Now we use the destination filename pattern to build the new filename
   997 00003DEA 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   998 00003DF1 31C0                <1>     xor eax, eax
   999 00003DF3 B943000000          <1>     mov ecx, 67
  1000 00003DF8 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
  1001                              <1> .findPattern:
  1002 00003DFA 48FFCF              <1>     dec rdi
  1003 00003DFD 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
  1004 00003E00 75F8                <1>     jne .findPattern
  1005                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
  1006 00003E02 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
  1007 00003E09 807FFF3A            <1>     cmp byte [rdi - 1], ":"
  1008 00003E0D 750D                <1>     jne .notRoot
  1009                              <1>     ;The root dir always exists on a volume so can skip the check.
  1010 00003E0F 48FFC7              <1>     inc rdi ;Goto the first char of the filename
  1011 00003E12 57                  <1>     push rdi
  1012 00003E13 800D(FE060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
  1013 00003E1A EB29                <1>     jmp short .skipCheck
  1014                              <1> .notRoot:
  1015 00003E1C AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1016 00003E1D 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1017                              <1>     ;Now check if the parent directory exists for the destination
  1018 00003E1E 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1019 00003E1F FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1020 00003E25 488D35(9E050000)    <1>     lea rsi, buffer2
  1021 00003E2C 4889F7              <1>     mov rdi, rsi
  1022 00003E2F E88BD5FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1023 00003E34 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1024 00003E3A 5F                  <1>     pop rdi
  1025 00003E3B 0F826F010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1026 00003E41 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1027                              <1> .skipCheck:
  1028                              <1>     ;rdi now points to the first char of the pattern
  1029 00003E45 4889FE              <1>     mov rsi, rdi
  1030 00003E48 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1031 00003E4F E897D3FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1032                              <1>     ;Ensure the destination pattern is not all question marks
  1033 00003E54 813D(E5060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1033 00003E5C 3F3F                <1>
  1034 00003E5E 7524                <1>     jne .validRenPattern
  1035 00003E60 813D(E9060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1035 00003E68 3F3F                <1>
  1036 00003E6A 7518                <1>     jne .validRenPattern
  1037 00003E6C 66813D(ED060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1037 00003E74 3F                  <1>
  1038 00003E75 750D                <1>     jne .validRenPattern
  1039 00003E77 803D(EF060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1040 00003E7E 0F8427010000        <1>     je .bad ;Access denied buddy ol' pal
  1041                              <1> .validRenPattern:
  1042                              <1>     ;curDirCopy has information for the destination directory file we will 
  1043                              <1>     ; write to. The cluster points to the directory file itself to search in
  1044                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1045                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1046 00003E84 488D35(BD070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1047 00003E8B 488D3D(D9060000)    <1>     lea rdi, fcbName
  1048 00003E92 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1049 00003E93 B90B000000          <1>     mov ecx, 11
  1050 00003E98 F3A4                <1>     rep movsb
  1051 00003E9A 5F                  <1>     pop rdi
  1052 00003E9B 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1053                              <1> .mnnLp:
  1054 00003EA2 AC                  <1>     lodsb
  1055 00003EA3 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1056 00003EA5 7404                <1>     je .mnnWC   ;Skip overriding this char
  1057 00003EA7 AA                  <1>     stosb   ;Store new char and go forwards by one
  1058 00003EA8 48FFCF              <1>     dec rdi ;Now go back by one
  1059                              <1> .mnnWC:
  1060 00003EAB 48FFC7              <1>     inc rdi ;Goto next letter
  1061 00003EAE FFC1                <1>     inc ecx
  1062 00003EB0 81F90B000000        <1>     cmp ecx, 11
  1063 00003EB6 75EA                <1>     jne .mnnLp
  1064 00003EB8 488D35(D9060000)    <1>     lea rsi, fcbName
  1065 00003EBF 488D3D(BD070000)    <1>     lea rdi, renameDir
  1066 00003EC6 B90B000000          <1>     mov ecx, 11
  1067 00003ECB F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1068 00003ECD 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1069 00003ECE 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1070 00003ECF 488D35(D9060000)    <1>     lea rsi, fcbName
  1071 00003ED6 E858D3FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1072 00003EDB 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]
  1073 00003EE2 4889F7              <1>     mov rdi, rsi
  1074 00003EE5 E8DCD4FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1075 00003EEA 0F83C0000000        <1>     jnc .badExit   ;If the file exists, then error
  1076 00003EF0 3C02                <1>     cmp al, errFnf ;If Fnf error then we may proceed
  1077 00003EF2 0F85B8000000        <1>     jne .badExit
  1078                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1079                              <1>     ;If the parent is root, deal with special case
  1080 00003EF8 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1081 00003EFF F605(FE060000)02    <1>     test byte [fileFDflg], 2
  1082 00003F06 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1083 00003F0D 7416                <1>     jz .notRoot2
  1084 00003F0F 488D35(D9060000)    <1>     lea rsi, fcbName
  1085 00003F16 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1086 00003F1D 48A5                <1>     movsq
  1087 00003F1F A5                  <1>     movsd
  1088 00003F20 A4                  <1>     movsb
  1089 00003F21 31C0                <1>     xor eax, eax    ;Dir to search
  1090 00003F23 EB13                <1>     jmp short .getSpace
  1091                              <1> .notRoot2:
  1092 00003F25 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1093 00003F2C 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1094 00003F33 C1E210              <1>     shl edx, 10h
  1095 00003F36 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1096                              <1> .getSpace:
  1097 00003F38 E877000000          <1>     call .searchForDirSpace
  1098 00003F3D 726C                <1>     jc .bad
  1099                              <1> ;dir Entry found, rsi points to space in buffer
  1100 00003F3F 4889F7              <1>     mov rdi, rsi
  1101 00003F42 488D35(BD070000)    <1>     lea rsi, renameDir
  1102 00003F49 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1103 00003F4E F348A5              <1>     rep movsq   ;Copy dir over
  1104 00003F51 E837C9FFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1105                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1106                              <1>     ;If it does, we find next. If not, we exit
  1107 00003F56 B03F                <1>     mov al, "?"
  1108 00003F58 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1109 00003F5F E865320000          <1>     call strlen ;Get in rcx to get the length of the string
  1110 00003F64 F2AE                <1>     repne scasb
  1111 00003F66 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1112 00003F68 B90B000000          <1>     mov ecx, 11
  1113 00003F6D 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1114 00003F74 F2AE                <1>     repne scasb
  1115 00003F76 7525                <1>     jne .exit
  1116                              <1>     ;Here we gotta do a find next now!
  1117 00003F78 FF35(17040000)      <1>     push qword [currentDTA]
  1118 00003F7E 488D3D(92070000)    <1>     lea rdi, renameFFBlk
  1119 00003F85 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1120 00003F8C E8B8CEFFFF          <1>     call findNextMain
  1121 00003F91 8F05(17040000)      <1>     pop qword [currentDTA]
  1122 00003F97 0F83E7FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1123                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1124                              <1> .exit:
  1125 00003F9D 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1126 00003F9E E879C7FFFF          <1>     call flushAllBuffersForDPB
  1127 00003FA3 720B                <1>     jc .badExit
  1128                              <1> .exit2: ;Bad exit before we push qword on stack 
  1129 00003FA5 E830350000          <1>     call dosCrit1Exit
  1130                              <1>     return
    13                              <2> %%_ret:
    14 00003FAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> .bad:
  1132 00003FAB B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1133                              <1> .badExit:
  1134 00003FB0 F9                  <1>     stc
  1135 00003FB1 5F                  <1>     pop rdi
  1136 00003FB2 EBF1                <1>     jmp short .exit2
  1137                              <1> .searchForDirSpace:
  1138                              <1> ;Input: eax = First directory to search 
  1139 00003FB4 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1140 00003FBA 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1141 00003FBC 668905(83070000)    <1>     mov word [dirSect], ax
  1142 00003FC3 8905(85070000)      <1>     mov dword [dirEntry], eax
  1143 00003FC9 E8F8E1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1144 00003FCE 731C                <1>     jnc .dirEntryFnd
  1145 00003FD0 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1145 00003FD8 0000                <1>
  1146 00003FDA 7412                <1>     je .searchBad ;Set CF and exit
  1147 00003FDC E8CEE2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1148 00003FE1 720B                <1>     jc .searchBad
  1149 00003FE3 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1150 00003FE8 7404                <1>     je .searchBad
  1151                              <1>     ;Else eax = Newly allocated cluster
  1152 00003FEA EBC8                <1>     jmp short .searchForDirSpace
  1153                              <1> .dirEntryFnd:
  1154 00003FEC F8                  <1>     clc
  1155                              <1>     return
    13                              <2> %%_ret:
    14 00003FED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1156                              <1> .searchBad:
  1157 00003FEE F9                  <1>     stc
  1158                              <1>     return
    13                              <2> %%_ret:
    14 00003FEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1159                              <1> 
  1160                              <1> 
  1161                              <1> checkNoOpenHandlesForShareAction:
  1162                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1163                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1164                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1165                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1166                              <1> ; proceeding.
  1167                              <1> ;
  1168                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1169                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1170                              <1> ;       currDirCopy = Directory entry for the file
  1171 00003FF0 E8C4340000          <1>     call dosPushRegs    ;Save the context completely
  1172 00003FF5 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1173 00003FFC 740C                <1>     jz .noOpenFileCheckHandler
  1174 00003FFE FF15(BF000000)      <1>     call qword [openFileCheck]
  1175 00004004 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1176 00004006 7447                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1177 00004008 EB4C                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1178                              <1> .noOpenFileCheckHandler:
  1179                              <1>     ;The following closes most recent shared handles referencing it
  1180                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1181                              <1>     ; mode and if there is precisely 1  
  1182 0000400A FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1183                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1184 00004010 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1185 00004017 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  1186 0000401E B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1187 00004023 C605(07070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1188                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1189 0000402A 57                  <1>     push rdi    ;Save the SFT ptr
  1190 0000402B E8D5020000          <1>     call buildSFTEntry
  1191 00004030 5F                  <1>     pop rdi
  1192 00004031 7223                <1>     jc .errorMain
  1193 00004033 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1194 00004038 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1195 0000403E E8173D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1196 00004043 7211                <1>     jc .errorMain
  1197 00004045 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1198 0000404A E8A23C0000          <1>     call closeShareCallWrapper
  1199                              <1> .exit:
  1200 0000404F E84E340000          <1>     call dosPopRegs
  1201 00004054 F8                  <1>     clc
  1202                              <1>     return
    13                              <2> %%_ret:
    14 00004055 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1203                              <1> .errorMain:
  1204 00004056 E847340000          <1>     call dosPopRegs
  1205 0000405B B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1206 00004060 F9                  <1>     stc
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00004061 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> 
  1209                              <1> outerDeleteMain:
  1210                              <1> ;Internal current dir must be populated with dir entry
  1211                              <1> ; and internal DOS directory variables now point to this entry.
  1212                              <1> ;Checks if the file is a char device or read only.
  1213                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1214                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1215                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1216                              <1> ;         CF=NC => File deleted
  1217 00004062 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1218 00004069 E8512F0000          <1>     call testCDSNet ;CF=NC => Not net
  1219 0000406E 7308                <1>     jnc .notNet
  1220 00004070 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1221 00004075 CD2F                <1>     int 2Fh
  1222                              <1>     return
    13                              <2> %%_ret:
    14 00004077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1223                              <1> .notNet:
  1224 00004078 B805000000          <1>     mov eax, errAccDen  
  1225 0000407D F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1226 00004084 7548                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1227 00004086 E845000000          <1>     call deleteMain
  1228 0000408B 7241                <1>     jc .exitBad
  1229                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1230 0000408D B03F                <1>     mov al, "?"
  1231 0000408F 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1232 00004096 B90B000000          <1>     mov ecx, 11
  1233 0000409B F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1234 0000409D 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1235 0000409F F8                  <1>     clc
  1236                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 000040A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .serverWCloop:
  1238 000040A1 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1239 000040A7 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1240 000040AE 57                  <1>     push rdi    ;Push this address onto the stack
  1241 000040AF E8BFD1FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1242 000040B4 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1243 000040BA E88ACDFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1244 000040BF 8F05(17040000)      <1>     pop qword [currentDTA]
  1245                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040C5 72D9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1246 000040C7 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1247 000040CC 73D3                <1>     jnc .serverWCloop     
  1248                              <1> ;Stop as soon as an error occurs
  1249                              <1> .exitBad:
  1250 000040CE F9                  <1>     stc
  1251                              <1>     return
    13                              <2> %%_ret:
    14 000040CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1252                              <1> 
  1253                              <1> deleteMain:
  1254                              <1> ;Now unlink FAT chain and then clear directory entry
  1255                              <1> ;Get the start cluster of this file
  1256                              <1> ;Input:
  1257                              <1> ; The file must have NOT be read-only.
  1258                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1259                              <1> ;     - curDirCopy must be filled with the file directory information
  1260                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1261                              <1> ;Output: CF=NC => Success, 
  1262                              <1> ; If not net CDS:
  1263                              <1> ;   rsi keeps pointing to directory entry.
  1264                              <1> ;   al = First char of the file that was deleted.
  1265                              <1> ;        CF=CY => Error
  1266                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1267 000040D0 E81BFFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1268                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040D5 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1269 000040D7 55                  <1>     push rbp
  1270 000040D8 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1271 000040DF 52                  <1>     push rdx
  1272 000040E0 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1273 000040E7 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1274 000040EE C1E010              <1>     shl eax, 10h
  1275 000040F1 09D0                <1>     or eax, edx ;Add low bits to eax
  1276 000040F3 5A                  <1>     pop rdx
  1277 000040F4 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1278 000040F6 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1279 000040F8 E867CBFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1280 000040FD 721C                <1>     jc .exitBad
  1281                              <1> .skipUnlink:
  1282                              <1>     ;Now replace the first char of the directory to 0E5h
  1283                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1284 000040FF E8D5E0FFFF          <1>     call getDiskDirectoryEntry
  1285 00004104 7215                <1>     jc .exitBad
  1286 00004106 8A05(08070000)      <1>     mov al, byte [delChar]
  1287 0000410C 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1288 0000410E E87AC7FFFF          <1>     call markBufferDirty
  1289                              <1>     ;CF must be clear
  1290 00004113 E804C6FFFF          <1>     call flushAllBuffersForDPB
  1291 00004118 5D                  <1>     pop rbp
  1292                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004119 73B4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1293                              <1> .exitBad:
  1294 0000411B 5D                  <1>     pop rbp
  1295 0000411C F9                  <1>     stc
  1296                              <1>     return
    13                              <2> %%_ret:
    14 0000411D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1297                              <1> 
  1298                              <1> openMain:
  1299                              <1> ;Input: ax (formally al) = Open mode
  1300                              <1> ;       [currentSFT] = SFT we are building
  1301                              <1> ;       [workingCDS] = CDS of drive to access
  1302                              <1> ;       [workingDPB] = DPB of drive to access
  1303                              <1> ;Ouput: CF=CY => Error, eax has error code
  1304 0000411E E8D3000000          <1>     call setOpenMode
  1305                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004123 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1306 00004125 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1307 0000412C 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1308 00004133 30E4                <1>     xor ah, ah  ;al has the access mode
  1309 00004135 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1310 0000413C 750A                <1>     jne .notNet
  1311                              <1> .redirOpen:
  1312 0000413E 50                  <1>     push rax    ;Push open mode onto stack
  1313 0000413F B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1314 00004144 CD2F                <1>     int 2Fh
  1315 00004146 58                  <1>     pop rax
  1316                              <1>     return
    13                              <2> %%_ret:
    14 00004147 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1317                              <1> .notNet:
  1318 00004148 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1319 0000414E 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1320 00004150 E87B330000          <1>     call dosCrit1Enter
  1321                              <1> ;Ensure our disk attributes permit opening
  1322 00004155 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1323 0000415B F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1324 0000415E 752C                <1>     jnz .accDenExit
  1325 00004160 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1326 00004163 7439                <1>     jz short .openFile      ;If not, proceed.
  1327                              <1> ;Else, we check if we are permitted to open this file.
  1328 00004165 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1329 00004169 F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1330 0000416F 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1331 00004171 89CA                <1>     mov edx, ecx
  1332 00004173 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1333 00004179 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1334 0000417F 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1335 00004181 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1336 00004187 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1337 0000418A 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1338                              <1> .accDenExit:
  1339 0000418C B805000000          <1>     mov eax, errAccDen
  1340 00004191 EB27                <1>     jmp short .errorExit
  1341                              <1> .fcbOpen:
  1342 00004193 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1343 00004198 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1344 0000419C 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1345                              <1> .openFile:
  1346 0000419E C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1347 000041A5 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1348 000041AC E854010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1349 000041B1 7207                <1>     jc .errorExit
  1350 000041B3 E8A23B0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1351 000041B8 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1352                              <1> .errorExit:
  1353 000041BA E81B330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1354                              <1>     return
    13                              <2> %%_ret:
    14 000041BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .fileSharedOk:
  1356 000041C0 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1357 000041C5 E8810B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1358 000041CA FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1359 000041D0 E805330000          <1>     call dosCrit1Exit
  1360                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1361 000041D5 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1362 000041DC E8A5E2FFFF          <1>     call openSFT
  1363 000041E1 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1364 000041E7 7501                <1>     jnz .netOpen
  1365                              <1>     return
    13                              <2> %%_ret:
    14 000041E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1366                              <1> .netOpen:
  1367 000041EA 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1368 000041F1 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1369                              <1>     return
    13                              <2> %%_ret:
    14 000041F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1370                              <1> 
  1371                              <1> setOpenMode:
  1372                              <1> ;Input: al = Open mode for the file open
  1373 000041F6 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1374 000041FC 53                  <1>     push rbx
  1375                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1376 000041FD F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1377 00004204 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1378 00004206 88C3                <1>     mov bl, al
  1379 00004208 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1380 0000420B 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1381 00004212 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1382 00004214 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1383 00004217 7405                <1>     je .s2
  1384                              <1> .s1:
  1385 00004219 80FB40              <1>     cmp bl, denyNoneShare
  1386 0000421C 770D                <1>     ja .somBad
  1387                              <1> .s2:
  1388 0000421E 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1389 00004220 80E30F              <1>     and bl, 0Fh
  1390 00004223 80FB02              <1>     cmp bl, RWAccess
  1391 00004226 7703                <1>     ja .somBad
  1392 00004228 5B                  <1>     pop rbx
  1393 00004229 F8                  <1>     clc
  1394                              <1>     return
    13                              <2> %%_ret:
    14 0000422A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1395                              <1> .somBad:
  1396 0000422B 5B                  <1>     pop rbx
  1397 0000422C B80C000000          <1>     mov eax, errAccCde
  1398 00004231 F9                  <1>     stc
  1399                              <1>     return
    13                              <2> %%_ret:
    14 00004232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1400                              <1> 
  1401                              <1> createNewMain:
  1402                              <1> ;Input: ax (formally al) = File attributes
  1403                              <1> ;       [currentSFT] = SFT we are building
  1404                              <1> ;       [workingCDS] = CDS of drive to access
  1405                              <1> ;       [workingDPB] = DPB of drive to access
  1406 00004233 0FB6C0              <1>     movzx eax, al
  1407 00004236 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1408 00004238 F605(04070000)FF    <1>     test byte [fileExist], -1
  1409 0000423F 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1410 00004241 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1411 00004246 F9                  <1>     stc
  1412                              <1>     return
    13                              <2> %%_ret:
    14 00004247 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1413                              <1> createMain:
  1414                              <1> ;Input: ax (formally al) = File attributes
  1415                              <1> ;       [currentSFT] = SFT we are building
  1416                              <1> ;       [workingCDS] = CDS of drive to access
  1417                              <1> ;       [workingDPB] = DPB of drive to access
  1418 00004248 0FB6C0              <1>     movzx eax, al
  1419                              <1> .createNewEP:
  1420 0000424B A880                <1>     test al, 80h    ; Is this invalid bit set?
  1421 0000424D 750C                <1>     jnz .invalidAttrib
  1422 0000424F A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1423 00004251 7402                <1>     jz .notVol
  1424 00004253 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1425                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1426                              <1> .notVol:
  1427 00004255 0C20                <1>     or al, archiveFile   ;Set archive bit
  1428 00004257 A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1429 00004259 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1430                              <1> .invalidAttrib:
  1431 0000425B B805000000          <1>     mov eax, errAccDen
  1432 00004260 F9                  <1>     stc
  1433                              <1>     return
    13                              <2> %%_ret:
    14 00004261 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1434                              <1> .validAttr:
  1435                              <1> ;Check we are not creating a directory.
  1436 00004262 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1437 00004269 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1438 00004270 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1439 00004277 750A                <1>     jne .diskFile
  1440 00004279 50                  <1>     push rax    ;Save the new attributes
  1441 0000427A B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1442 0000427F CD2F                <1>     int 2Fh
  1443 00004281 5B                  <1>     pop rbx
  1444                              <1>     return
    13                              <2> %%_ret:
    14 00004282 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> .diskFile:
  1446 00004283 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1447 00004289 740A                <1>     jz .hardFile
  1448 0000428B 50                  <1>     push rax    ;Save the new attributes
  1449 0000428C B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1450 00004291 CD2F                <1>     int 2Fh
  1451 00004293 5B                  <1>     pop rbx
  1452                              <1>     return
    13                              <2> %%_ret:
    14 00004294 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1453                              <1> .hardFile:
  1454 00004295 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1455 0000429B C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1456 000042A2 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1457 000042A9 E822320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1458 000042AE 57                  <1>     push rdi    ;Save the sft handle
  1459 000042AF 50                  <1>     push rax    ;Save the file attributes on stack
  1460 000042B0 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1461 000042B5 E84B000000          <1>     call buildSFTEntry
  1462 000042BA 5B                  <1>     pop rbx ;Pop the file attribute off
  1463 000042BB 5F                  <1>     pop rdi
  1464 000042BC 7241                <1>     jc .errorExit
  1465 000042BE E8973A0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1466 000042C3 723A                <1>     jc .errorExit
  1467 000042C5 F6C308              <1>     test bl, volLabelFile    ;Was the attribute a volume label?
  1468 000042C8 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1469                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1470 000042CA 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1471 000042D1 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1472 000042D3 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1473 000042D5 8805(E1190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1474 000042DB E8F0310000          <1>     call dosCrit1Enter
  1475 000042E0 E8432A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1476 000042E5 E8F0310000          <1>     call dosCrit1Exit
  1477                              <1> .notVolLabel:
  1478 000042EA B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1479 000042EF FF15(2F010000)      <1>     call qword [updateDirShare]
  1480 000042F5 E8E0310000          <1>     call dosCrit1Exit
  1481 000042FA E9D6FEFFFF          <1>     jmp openDriverMux
  1482                              <1> .errorExit:
  1483 000042FF E8D6310000          <1>     call dosCrit1Exit
  1484                              <1>     return
    13                              <2> %%_ret:
    14 00004304 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1485                              <1> buildSFTEntry:
  1486                              <1> ;Called in a critical section.
  1487                              <1> ;Input: al = Open mode
  1488                              <1> ;       STACK: File attributes if creating a file
  1489                              <1> ;       [currentSFT] = SFT we are building
  1490                              <1> ;       [workingCDS] = CDS of drive to access
  1491                              <1> ;       [workingDPB] = DPB of drive to access
  1492                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1493                              <1> ;
  1494                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1495                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1496                              <1> ;        If CF=CY: - Return fail
  1497                              <1> ;
  1498                              <1> ;
  1499                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1500                              <1> ;   If not, create disk entry.
  1501                              <1> ;Check if the device was a char device by checking curDirCopy.
  1502                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1503                              <1> 
  1504                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1505                              <1> ; to start of file fields of the SFT
  1506 00004305 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1507 00004306 4889E5              <1>     mov rbp, rsp
  1508 00004309 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1509                              <1> ;Set the open mode
  1510 00004310 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1511                              <1> ;Get current time
  1512 00004314 E8B5EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1513 00004319 E89BEBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1514 0000431E 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1515                              <1> ;Set current Owner
  1516 00004321 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1517 00004328 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1518                              <1> ;Set file pointer to first byte
  1519 0000432C C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1520                              <1> ;Common fields set
  1521 00004333 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1522 0000433A 0F84CA010000        <1>     jz .openProc
  1523                              <1>     ;Here if Creating a file.
  1524                              <1>     ;First check if we are handling a volume label
  1525 00004340 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1526 00004348 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1527 0000434A 56                  <1>     push rsi
  1528 0000434B 57                  <1>     push rdi
  1529 0000434C 55                  <1>     push rbp
  1530 0000434D C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1531 00004354 E88ACCFFFF          <1>     call searchDir  ;Searches the root dir
  1532 00004359 C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1533 00004360 5D                  <1>     pop rbp
  1534 00004361 5F                  <1>     pop rdi
  1535 00004362 5E                  <1>     pop rsi
  1536 00004363 0F83F8010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1537 00004369 3C12                <1>     cmp al, errNoFil
  1538 0000436B 0F85F0010000        <1>     jne .bad ;If not "no file found", error out
  1539                              <1> .notVolLbl:
  1540 00004371 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1541 00004378 0F84D7000000        <1>     jz .createFile
  1542 0000437E F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1543 00004385 0F8588010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1544 0000438B F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile | dirReadOnly
  1545 00004392 0F85C9010000        <1>     jnz .bad    ;Cant recreate a dir or ro file!
  1546                              <1>     ;Here disk file exists, so recreating the file.
  1547 00004398 55                  <1>     push rbp
  1548 00004399 FF35(32070000)      <1>     push qword [currentSFT]
  1549 0000439F E82CFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1550 000043A4 8F05(32070000)      <1>     pop qword [currentSFT]
  1551 000043AA 5D                  <1>     pop rbp
  1552 000043AB 0F82B0010000        <1>     jc .bad
  1553                              <1>     ;al has the char for the filename
  1554                              <1>     ;Sets vars for the sector/offset into the sector
  1555 000043B1 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1556 000043B8 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1557 000043BA 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1558                              <1>     ;al has file attributes.
  1559 000043BE 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1560 000043C1 31C0                <1>     xor eax, eax
  1561                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1562 000043C3 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1563 000043C7 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1564 000043CB 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1565 000043CE 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1566 000043D1 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1567 000043D4 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1568 000043D7 57                  <1>     push rdi    ;Save SFT pointer
  1569 000043D8 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1570 000043DF B920000000          <1>     mov ecx, fatDirEntry_size
  1571 000043E4 F3A4                <1>     rep movsb
  1572 000043E6 E8A2C4FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1573 000043EB 5F                  <1>     pop rdi
  1574                              <1> .createCommon:  ;rdi must point to the current SFT 
  1575                              <1>     ;Now populate the remaining SFT fields 
  1576 000043EC 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1577 000043F3 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1578 000043F6 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1579 000043F9 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1580 00004400 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1581 00004404 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1582 0000440B C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1583 0000440E 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1584 00004411 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1585 00004414 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1586 00004417 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1587 0000441B 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1588 0000441F C1E210              <1>     shl edx, 10h
  1589 00004422 09D0                <1>     or eax, edx
  1590 00004424 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1591                              <1> 
  1592 00004427 31C0                <1>     xor eax, eax
  1593                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1594 00004429 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1595 0000442F 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1596 00004431 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1597 00004435 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1598 0000443C 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1599                              <1>     ;Last thing, copy the filename over
  1600                              <1>     ;Now save the name
  1601                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1602 00004440 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1603 00004444 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1604 0000444B 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1605 0000444D 66A5                <1>     movsw
  1606 0000444F A4                  <1>     movsb
  1607                              <1>     ;SFT filled
  1608 00004450 E903010000          <1>     jmp .exit
  1609                              <1> .createFile:
  1610                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1611                              <1>     ;rsi points to current sft entry
  1612 00004455 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1613                              <1>     ;Clear out the dir entry
  1614 0000445C 57                  <1>     push rdi
  1615 0000445D B904000000          <1>     mov ecx, 4
  1616 00004462 31C0                <1>     xor eax, eax
  1617 00004464 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1618 00004467 5F                  <1>     pop rdi
  1619                              <1>     ;Copy the FCB name over    
  1620 00004468 56                  <1>     push rsi
  1621 00004469 57                  <1>     push rdi
  1622 0000446A B90B000000          <1>     mov ecx, 11
  1623 0000446F 488D35(D9060000)    <1>     lea rsi, fcbName
  1624 00004476 F3A4                <1>     rep movsb   ;Move over the FCB name
  1625 00004478 5F                  <1>     pop rdi
  1626 00004479 5E                  <1>     pop rsi
  1627                              <1> 
  1628 0000447A 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1629                              <1>     ;al has file attributes.
  1630 0000447E 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1631 00004481 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1632 00004484 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1633 00004487 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1634 0000448A 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1635                              <1> .searchForDirSpace:
  1636 00004490 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1637 00004496 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1638 00004498 668905(83070000)    <1>     mov word [dirSect], ax
  1639 0000449F 8905(85070000)      <1>     mov dword [dirEntry], eax
  1640 000044A5 57                  <1>     push rdi
  1641 000044A6 E81BDDFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1642 000044AB 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1643 000044AC 7328                <1>     jnc .dirEntryFnd
  1644 000044AE 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1644 000044B6 0000                <1>
  1645 000044B8 0F84A3000000        <1>     je .bad ;Set CF and exit
  1646 000044BE E8ECDDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1647 000044C3 0F828F000000        <1>     jc .exit
  1648 000044C9 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1649 000044CE 0F848D000000        <1>     je .bad
  1650                              <1>     ;Else eax = Newly allocated cluster
  1651 000044D4 EBBA                <1>     jmp short .searchForDirSpace
  1652                              <1> .dirEntryFnd:
  1653 000044D6 4887FE              <1>     xchg rdi, rsi
  1654 000044D9 B904000000          <1>     mov ecx, 4
  1655 000044DE F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1656 000044E1 E8A7C3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1657 000044E6 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1658 000044ED E9FAFEFFFF          <1>     jmp .createCommon
  1659                              <1> .open:
  1660                              <1> ;curdircopy has a copy of the disk file directory
  1661                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1662 000044F2 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1663 000044F9 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1664                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1665 00004500 E8D4DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1666 00004505 E9E2FEFFFF          <1>     jmp .createCommon
  1667                              <1> .openProc:
  1668                              <1>     ;Here if Opening a file. 
  1669                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1670                              <1>     ;This is taken care of by openMain.
  1671 0000450A F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1672 00004511 74DF                <1>     jz .open
  1673                              <1> .charDev:
  1674 00004513 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1675 0000451A E8FB2D0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1676 0000451F 7307                <1>     jnc .notBadCharDevName
  1677 00004521 B805000000          <1>     mov eax, errAccDen
  1678 00004526 EB30                <1>     jmp short .exit ;CF already set
  1679                              <1> .notBadCharDevName:
  1680 00004528 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1681 0000452F 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1682 00004533 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1683 00004537 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1684 0000453A 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1685 0000453D 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1686 00004541 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1687 00004548 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1688 0000454C B820202020          <1>     mov eax, "    "
  1689 00004551 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1690 00004555 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1691                              <1> .exit:
  1692 00004558 E8F6090000          <1>     call writeThroughBuffersForHandle
  1693 0000455D 7207                <1>     jc .bad2
  1694 0000455F 5D                  <1>     pop rbp
  1695                              <1>     return
    13                              <2> %%_ret:
    14 00004560 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1696                              <1> .bad:   ;Set Access Denied
  1697 00004561 B805000000          <1>     mov eax, errAccDen
  1698                              <1> .bad2:  ;Error propagating error code
  1699 00004566 F9                  <1>     stc
  1700 00004567 5D                  <1>     pop rbp
  1701                              <1>     return
    13                              <2> %%_ret:
    14 00004568 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1702                              <1> closeMain: ;Int 2Fh AX=1201h
  1703                              <1> ;Gets the directory entry for a file
  1704                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1705                              <1> ;If CF=CY on return: Error, return error with al = error code
  1706                              <1> ;Preserve all regs except eax and rdi
  1707                              <1> ; If CF=NC on return: eax = Unknown
  1708                              <1> ;                     rdi = current SFT ptr
  1709 00004569 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1710 00004570 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1711 00004574 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1712 0000457A 7408                <1>     jz .physical
  1713                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1714 0000457C B806110000          <1>     mov eax, 1106h  ;Make request
  1715 00004581 CD2F                <1>     int 2Fh ;Beep!
  1716                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004583 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1717                              <1> .physical:  
  1718                              <1> ; We make a request to the dev dir to close the device
  1719                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1720 00004584 E8472F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1721 00004589 E8BBDCFFFF          <1>     call updateSFTDateTimeFields
  1722 0000458E E8B1090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1723 00004593 50                  <1>     push rax
  1724 00004594 53                  <1>     push rbx
  1725 00004595 E857370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1726 0000459A 5B                  <1>     pop rbx
  1727 0000459B 58                  <1>     pop rax
  1728                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1729                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1730                              <1> ;Closes the handle properly if only one reference to file remains.
  1731                              <1> ;Input: ax = Initial open handle count
  1732                              <1> ;       bx = attribute byte from the SFT
  1733                              <1> ;       rdi -> Current SFT
  1734 0000459C 50                  <1>     push rax    ;Save the handle count for later
  1735 0000459D 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1736 000045A2 7577                <1>     jnz .notDiskBitsSet
  1737 000045A4 E8D0DCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1738 000045A9 B805000000          <1>     mov eax, errAccDen
  1739 000045AE 726C                <1>     jc .accDenExit
  1740 000045B0 56                  <1>     push rsi    ; -> Buffer dir entry
  1741 000045B1 57                  <1>     push rdi    ; -> SFT ptr
  1742 000045B2 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1743 000045B6 E806CCFFFF          <1>     call findInBuffer.nameCompare
  1744 000045BB 5F                  <1>     pop rdi     ; -> SFT ptr
  1745 000045BC 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1746 000045BD 7408                <1>     jz .dirEntryForUs
  1747                              <1> .badFileFound:
  1748 000045BF B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1749 000045C4 F9                  <1>     stc
  1750 000045C5 EB55                <1>     jmp short .accDenExit
  1751                              <1> .dirEntryForUs:
  1752 000045C7 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1753 000045CB 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1754 000045CF F6D0                <1>     not al  ;Reverse the bits
  1755 000045D1 20C8                <1>     and al, cl  ;These should be equal
  1756 000045D3 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1757 000045D5 75E8                <1>     jnz .badFileFound
  1758                              <1>     
  1759 000045D7 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1760 000045DB 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1761 000045DE 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1762 000045E1 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1763 000045E5 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1764 000045E9 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1765 000045ED 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1766 000045F1 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1767 000045F5 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1768 000045F8 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1769 000045FC C1E810              <1>     shr eax, 10h
  1770 000045FF 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1771 00004603 E885C2FFFF          <1>     call markBufferDirty
  1772 00004608 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1773 0000460F E81AC1FFFF          <1>     call flushAllBuffersForDrive
  1774 00004614 B805000000          <1>     mov eax, errAccDen
  1775 00004619 7201                <1>     jc .accDenExit
  1776                              <1> .notDiskBitsSet:
  1777 0000461B F8                  <1>     clc
  1778                              <1> .accDenExit:
  1779 0000461C 9C                  <1>     pushfq
  1780 0000461D E86DDEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1781 00004622 9D                  <1>     popfq
  1782 00004623 59                  <1>     pop rcx ;Get back the initial open handle count
  1783 00004624 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1784 00004627 9C                  <1>     pushfq
  1785 00004628 FFC9                <1>     dec ecx ;Decrement count
  1786 0000462A 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1787 0000462C 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1788                              <1> .exit:
  1789 0000462F E8A62E0000          <1>     call dosCrit1Exit
  1790 00004634 9D                  <1>     popfq
  1791                              <1>     return
    13                              <2> %%_ret:
    14 00004635 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1792                              <1> 
  1793                              <1> readBytes:
  1794                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1795                              <1> ;Input: ecx = Number of bytes to read
  1796                              <1> ;Output: ecx = Number of bytes read
  1797                              <1> ;Number of bytes read 
  1798                              <1> ;If CF=CY, return with error code in ax
  1799 00004636 E810070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1800 0000463B 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1801 0000463F 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1802 00004641 3C01                <1>     cmp al, WriteAccess
  1803 00004643 7509                <1>     jne .readable
  1804 00004645 B805000000          <1>     mov eax, errAccDen
  1805 0000464A 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1806 0000464C F9                  <1>     stc
  1807                              <1>     return
    13                              <2> %%_ret:
    14 0000464D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1808                              <1> .readable:
  1809 0000464E E83E070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1810 00004653 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1811 00004656 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1812 0000465C 740A                <1>     jz .notRedir
  1813 0000465E B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1814 00004663 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1815                              <1>     return 
    13                              <2> %%_ret:
    14 00004665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1816                              <1> .exitOk:
  1817 00004666 F8                  <1>     clc
  1818                              <1>     return 
    13                              <2> %%_ret:
    14 00004667 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1819                              <1> .notRedir:
  1820 00004668 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1821 0000466E 7510                <1>     jnz readCharDev
  1822 00004670 E85B2E0000          <1>     call dosCrit1Enter
  1823 00004675 E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1824 0000467A E85B2E0000          <1>     call dosCrit1Exit
  1825                              <1>     return 
    13                              <2> %%_ret:
    14 0000467F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1826                              <1> readCharDev:
  1827                              <1> ;rdi points to sft for char dev to read
  1828                              <1> ;ecx has the number of bytes to transfer
  1829                              <1> ;Vars have been set up and DTA has the transfer address
  1830                              <1> ;Returns in ecx, the actual bytes transferred
  1831                              <1> ;If CF=CY, return with error code in ax
  1832 00004680 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1833 00004687 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1834 0000468B 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1835 00004692 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1836 00004695 0F84CA020000        <1>     jz charReadExitOk    ;If it does, jump to exit as if EOF has been hit
  1837 0000469B F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1838 0000469E 7407                <1>     jz .notNul
  1839                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1840                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1841 000046A0 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1842 000046A2 E9BE020000          <1>     jmp charReadExitOk    ;Goto exit
  1843                              <1> .notNul:
  1844 000046A7 F6C320              <1>     test bl, charDevBinary
  1845 000046AA 0F857F000000        <1>     jnz .binary
  1846                              <1>     ;Here if the device is in ASCII mode
  1847 000046B0 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1848 000046B3 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1849                              <1> .consoleInput:
  1850                              <1>     ;Console input here
  1851 000046B9 E8C4E2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1852                              <1>     ;Get current offset into buffer (if one exists)
  1853 000046BE 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1854 000046C5 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1855 000046C8 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1856 000046CA 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1857 000046D1 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1858                              <1>     ;Else, reset the buffer
  1859 000046D3 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1859 000046DB FF                  <1>
  1860                              <1> .oldBuf:
  1861                              <1> ;Preserve the dta and number of chars to tfr
  1862 000046DC 51                  <1>     push rcx
  1863 000046DD 57                  <1>     push rdi
  1864 000046DE 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1865 000046E5 E8B8E2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1866 000046EA 5F                  <1>     pop rdi
  1867 000046EB 59                  <1>     pop rcx
  1868 000046EC 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1869 000046F3 803E1A              <1>     cmp byte [rsi], EOF
  1870 000046F6 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1871 000046F8 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1872 000046FB B00A                <1>     mov al, LF
  1873 000046FD E81ADEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1874 00004702 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1875 00004704 EB18                <1>     jmp short .exit
  1876                              <1> .tfrBuf:
  1877 00004706 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1878 00004707 AA                  <1>     stosb
  1879 00004708 3C0D                <1>     cmp al, CR 
  1880 0000470A 7503                <1>     jne .noCRLF
  1881 0000470C C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1882                              <1> .noCRLF:
  1883 0000470F 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1884 00004711 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1885 00004713 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1886                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1887 00004715 E802DEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1888 0000471A 31F6                <1>     xor esi, esi
  1889 0000471C 0C01                <1>     or al, 1    ;Set ZF = NZ
  1890                              <1> .exit:
  1891 0000471E E877E2FFFF          <1>     call vConRetDriver
  1892 00004723 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1893                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1894 0000472A E936020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1895                              <1> 
  1896                              <1> .binary:
  1897                              <1>     ;Setup registers for transfer
  1898 0000472F 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1899 00004732 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1900                              <1>     ;ecx has the number of bytes to transfer directly
  1901 00004735 E89B270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1902 0000473A 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1903 00004741 E871240000          <1>     call goDriver   ;Make the request
  1904 00004746 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1905 00004749 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1906 00004750 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1907 00004756 7422                <1>     jz .binNoError
  1908                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1909 00004758 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1910 0000475A E83D1E0000          <1>     call charDevErr   ;ah = has part of the error 
  1911                              <1>     ;al now has the response
  1912 0000475F 3C00                <1>     cmp al, critIgnore
  1913 00004761 7417                <1>     je .binNoError ;Simply proceed as normal
  1914 00004763 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1915 00004766 3C03                <1>     cmp al, critFail
  1916 00004768 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1917                              <1>     ;Fallthrough here for fail!
  1918                              <1> .failExit:
  1919 0000476A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1920 00004771 31C9                <1>     xor ecx, ecx
  1921 00004773 B805000000          <1>     mov eax, errAccDen
  1922 00004778 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1923                              <1>     return
    13                              <2> %%_ret:
    14 00004779 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1924                              <1> .binNoError:
  1925                              <1>     ;Get number of bytes transferred into 
  1926 0000477A 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1927 00004780 F7D8                <1>     neg eax ;make it into -eax
  1928 00004782 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1929                              <1>     ;ecx now has bytes left to transfer
  1930 00004786 50                  <1>     push rax    ;Save value on stack
  1931 00004787 31C0                <1>     xor eax, eax ;Set ZF
  1932 00004789 FFC0                <1>     inc eax ;Clear ZF
  1933 0000478B 58                  <1>     pop rax ;Get back the original value
  1934 0000478C E9D4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  1935                              <1> .generalASCII:
  1936                              <1>     ;ecx has bytes to transfer here
  1937                              <1>     ;Setup registers for transfer
  1938 00004791 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1939 00004794 51                  <1>     push rcx
  1940 00004795 B901000000          <1>     mov ecx, 1  ;Get one char
  1941 0000479A 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1942 0000479D E833270000          <1>     call primReqReadSetup   ;Setup request
  1943 000047A2 59                  <1>     pop rcx
  1944                              <1>     ;rbx now has request header ptr
  1945 000047A3 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1946                              <1> .asciiReadChar:
  1947 000047AA 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1948 000047AD E854E1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1949 000047B2 E800240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1950 000047B7 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1951 000047BE F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1952 000047C4 7420                <1>     jz .asciiNoError
  1953 000047C6 B486                <1>     mov ah, critCharDev | critData
  1954 000047C8 E8CF1D0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  1955                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1956 000047CD C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1956 000047D5 0000                <1>
  1957 000047D7 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1958 000047DA 3C03                <1>     cmp al, critFail
  1959 000047DC 748C                <1>     je .failExit
  1960 000047DE 3C01                <1>     cmp al, critRetry
  1961 000047E0 74C8                <1>     je .asciiReadChar
  1962                              <1>     ;Ignore here, pretend NULL CHAR was read
  1963 000047E2 30C0                <1>     xor al, al
  1964 000047E4 EB15                <1>     jmp short .asciiIgnoreEP
  1965                              <1> .asciiNoError:
  1966                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1967                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1968                              <1> ;Preserve RBX, RSI
  1969                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1970 000047E6 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1971 000047E9 813D(D7040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1971 000047F1 0000                <1>
  1972 000047F3 0F856C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1973 000047F9 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1974                              <1> .asciiIgnoreEP:
  1975 000047FB 48FF05(CF040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1976 00004802 48FFC7              <1>     inc rdi ;Also advance register pointer
  1977 00004805 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  1978 00004807 0F8458010000        <1>     je charReadExitOk   ;Exit if so!
  1979 0000480D 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1980 0000480F E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1981                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1982 00004811 FEC0                <1>     inc al  ;make ZF=NZ
  1983 00004813 E94D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1984                              <1> 
  1985                              <1> readDiskFile:
  1986                              <1> ;rdi = Current SFT
  1987                              <1> ;rbp = WorkingDPB
  1988                              <1> ;ecx = Bytes to transfer
  1989 00004818 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1990 0000481F C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1991                              <1>     ;We have the following vars setup:
  1992                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1993                              <1>     ;currClustF
  1994                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1995                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1996 00004826 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1997 00004829 85D2                <1>     test edx, edx
  1998 0000482B 0F843F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1999 00004831 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2000 00004837 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2001 0000483A 8905(54070000)      <1>     mov dword [currClustD], eax
  2002 00004840 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2003 00004842 0F8428010000        <1>     jz readExitOk
  2004 00004848 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2005 0000484D 0F841D010000        <1>     jz readExitOk   
  2006 00004853 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2007                              <1>     ;Check if we have opened a volume label (should never happen)
  2008 00004859 F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2009 0000485D 7407                <1>     jz .shareCheck
  2010 0000485F B805000000          <1>     mov eax, errAccDen
  2011 00004864 F9                  <1>     stc
  2012                              <1>     return
    13                              <2> %%_ret:
    14 00004865 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2013                              <1> .shareCheck:
  2014                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2015 00004866 E88D340000          <1>     call retryShareIODelay
  2016 0000486B 7308                <1>     jnc .shareOk
  2017 0000486D E823350000          <1>     call shareCheckReadLockViolation
  2018 00004872 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2019                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004874 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2020                              <1> .shareOk:
  2021 00004875 E85FBEFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2022 0000487A 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2023 0000487C 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2024 0000487E 7426                <1>     jz .skipWalk
  2025                              <1> .goToCurrentCluster:
  2026 00004880 E817C4FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2027 00004885 0F82CB000000        <1>     jc .badExit   ;This can only return Fail
  2028 0000488B 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2029 00004890 0F84DA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2030 00004896 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2031 0000489C FFCA                <1>     dec edx ;Decrement counter
  2032 0000489E 75E0                <1>     jnz .goToCurrentCluster
  2033 000048A0 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2034                              <1> .skipWalk:
  2035 000048A6 E8CCC1FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2036                              <1>     ;Now we add the offset to this
  2037 000048AB 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2038 000048B2 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2039 000048B5 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2040                              <1> ;Main
  2041                              <1> .mainRead:
  2042 000048BC E8BB000000          <1>     call diskIOGetBuffer
  2043 000048C1 0F828F000000        <1>     jc .badExit
  2044 000048C7 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2045 000048CB 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2046 000048D2 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2047                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2048                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2049                              <1>     ; 3) Bytes left to read from Request
  2050                              <1> 
  2051 000048D5 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2052 000048D8 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2053 000048DE 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  2054 000048E4 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2055 000048E6 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2056 000048E9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2057 000048ED 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2058 000048F4 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2059 000048F6 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2060                              <1>     
  2061 000048F9 57                  <1>     push rdi
  2062 000048FA 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2063 00004901 51                  <1>     push rcx
  2064 00004902 F3A4                <1>     rep movsb
  2065 00004904 59                  <1>     pop rcx
  2066 00004905 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2067 0000490B 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2068 00004911 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2069 00004918 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2070 0000491E 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2071 00004922 31D2                <1>     xor edx, edx    ;Zero rdx
  2072 00004924 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2073 00004926 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2074 0000492D 5F                  <1>     pop rdi
  2075 0000492E 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2076 00004934 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2077 00004936 7438                <1>     jz readExitOk ;Exit if so!
  2078 00004938 E8B0C2FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2079 0000493D 7217                <1>     jc .badExit
  2080                              <1>     ;If ZF=ZE then currClustF has last cluster
  2081 0000493F 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2082                              <1>     ;Else repeat
  2083                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2084 00004941 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2084 00004949 00                  <1>
  2085 0000494A 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2086 00004951 E966FFFFFF          <1>     jmp .mainRead
  2087                              <1> .badExit:
  2088                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2089                              <1>     ; we need to update the SFT before returning
  2090 00004956 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2091 0000495C 30C0                <1>     xor al, al  ;Set ZF flag
  2092 0000495E E80D000000          <1>     call readExitOk   ;We call this
  2093 00004963 F9                  <1>     stc ;All calls which end up here return Fail!
  2094 00004964 C3                  <1>     ret
  2095                              <1> charReadExitOk:
  2096                              <1> ;Input: ecx = Number of bytes left to transfer!
  2097                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2098                              <1> ;       ZF=NZ => preserve bit 6
  2099 00004965 7509                <1>     jnz readExitOk
  2100 00004967 E8DF030000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2101 0000496C 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~charDevNoEOF
  2102                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2103                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2104 00004970 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2105 00004976 E8D8030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2106                              <1>     return 
    13                              <2> %%_ret:
    14 0000497B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2107                              <1> 
  2108                              <1> diskIOGetBuffer:
  2109                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2110                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2111                              <1> ; the buffer.
  2112                              <1> ;Input: rax = Sector to get buffer for. 
  2113                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2114                              <1> ;         Else: Error
  2115 0000497C F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2116 00004983 7407                <1>     jz .skipBreak
  2117 00004985 50                  <1>     push rax
  2118 00004986 E87BDFFFFF          <1>     call checkBreak
  2119 0000498B 58                  <1>     pop rax
  2120                              <1> .skipBreak:
  2121 0000498C E866C0FFFF          <1>     call getBufForData
  2122                              <1>     return
    13                              <2> %%_ret:
    14 00004991 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2123                              <1> 
  2124                              <1> writeBytes:
  2125                              <1> ;Writes the bytes from the user buffer
  2126                              <1> ;Input: ecx = Bytes to xfr
  2127                              <1> ;Returns number of bytes written in ecx if CF=NC
  2128 00004992 E8B4030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2129 00004997 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2130 0000499B 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2131 0000499D 3C00                <1>     cmp al, ReadAccess
  2132 0000499F 7509                <1>     jne .writeable
  2133                              <1> .noWrite:
  2134 000049A1 B805000000          <1>     mov eax, errAccDen
  2135 000049A6 31C9                <1>     xor ecx, ecx
  2136 000049A8 F9                  <1>     stc
  2137 000049A9 C3                  <1>     ret
  2138                              <1> .writeable:
  2139                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2140                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2141                              <1> ; FCB IO
  2142 000049AA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2143 000049B0 7406                <1>     jz .skipAttribCheck
  2144 000049B2 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2145 000049B6 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2146                              <1> .skipAttribCheck:
  2147 000049B8 E8D4030000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2148 000049BD 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2149 000049C3 7408                <1>     jz .notRedir
  2150 000049C5 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2151 000049CA CD2F                <1>     int 2Fh
  2152                              <1>     return
    13                              <2> %%_ret:
    14 000049CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2153                              <1> .notRedir:
  2154 000049CD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2155 000049D3 7510                <1>     jnz writeCharDev
  2156 000049D5 E8F62A0000          <1>     call dosCrit1Enter
  2157 000049DA E84E010000          <1>     call writeDiskFile
  2158 000049DF E8F62A0000          <1>     call dosCrit1Exit
  2159                              <1>     return
    13                              <2> %%_ret:
    14 000049E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2160                              <1> writeCharDev:
  2161 000049E5 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2162                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2163 000049EC 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2164 000049F2 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2165                              <1>     ;If ecx = 0, we exit
  2166 000049F6 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2167 000049F8 85C9                <1>     test ecx, ecx
  2168 000049FA 0F8433030000        <1>     jz writeExitChar
  2169 00004A00 88D8                <1>     mov al, bl  ;Move the flags over
  2170 00004A02 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2171 00004A09 4889DF              <1>     mov rdi, rbx
  2172 00004A0C 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2173 00004A0E A820                <1>     test al, charDevBinary
  2174 00004A10 744A                <1>     jz .asciiDev
  2175                              <1> ;Write binary transfer here
  2176                              <1> .binaryLp:
  2177 00004A12 31C0                <1>     xor eax, eax
  2178 00004A14 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2179 00004A17 E8AE240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2180 00004A1C 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2181 00004A23 E88B210000          <1>     call goDriverChar
  2182 00004A28 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2183 00004A2B B487                <1>     mov ah, critCharDev | critData | critWrite
  2184 00004A2D 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2185 00004A34 F7C700800000        <1>     test edi, drvErrStatus
  2186 00004A3A 7415                <1>     jz .binXfrOk
  2187 00004A3C E85B1B0000          <1>     call charDevErr ;Invoke Int 24h
  2188 00004A41 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2189 00004A44 3C00                <1>     cmp al, critIgnore
  2190 00004A46 7409                <1>     je .binXfrOk
  2191 00004A48 3C01                <1>     cmp al, critRetry
  2192 00004A4A 74C6                <1>     je .binaryLp
  2193 00004A4C E9D5000000          <1>     jmp .exitFail
  2194                              <1> .binXfrOk:
  2195 00004A51 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2196 00004A57 E9D7020000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2197                              <1> .asciiDev:
  2198 00004A5C A802                <1>     test al, charDevConOut
  2199 00004A5E 0F859E000000        <1>     jnz .conDev
  2200 00004A64 A804                <1>     test al, charDevNulDev
  2201 00004A66 0F858F000000        <1>     jnz .nulDev
  2202                              <1>     ;Here we transfer for a generic character device in ascii mode
  2203 00004A6C 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2204 00004A6E 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2205 00004A71 0F84BC020000        <1>     je writeExitChar
  2206 00004A77 51                  <1>     push rcx
  2207 00004A78 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2208 00004A7D 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2209 00004A80 E845240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2210 00004A85 59                  <1>     pop rcx
  2211 00004A86 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2212 00004A8D 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2213                              <1> .asciiLp:
  2214 00004A91 E870DEFFFF          <1>     call checkBreak
  2215 00004A96 E81C210000          <1>     call goDriver
  2216 00004A9B 57                  <1>     push rdi
  2217 00004A9C B487                <1>     mov ah, critCharDev | critData | critWrite
  2218 00004A9E 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2219 00004AA5 F7C700800000        <1>     test edi, drvErrStatus
  2220 00004AAB 741D                <1>     jz .asciiNoError
  2221 00004AAD E8EA1A0000          <1>     call charDevErr ;Invoke Int 24h
  2222 00004AB2 5F                  <1>     pop rdi
  2223 00004AB3 C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2223 00004ABB 0000                <1>
  2224 00004ABD 3C01                <1>     cmp al, critRetry
  2225 00004ABF 74D0                <1>     je .asciiLp
  2226 00004AC1 3C00                <1>     cmp al, critIgnore
  2227 00004AC3 7412                <1>     je .ignoreEp
  2228 00004AC5 E95C000000          <1>     jmp .exitFail
  2229                              <1> .asciiNoError:
  2230 00004ACA 5F                  <1>     pop rdi
  2231 00004ACB 813D(D7040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2231 00004AD3 0000                <1>
  2232 00004AD5 741D                <1>     je .bytesXfrdOk
  2233                              <1> .ignoreEp:
  2234 00004AD7 FFC2                <1>     inc edx ;One more char has been xfrd
  2235 00004AD9 FF05(CF040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2236 00004ADF 48FFC7              <1>     inc rdi ;And our copy... 
  2237 00004AE2 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2238 00004AE5 740D                <1>     je .bytesXfrdOk
  2239 00004AE7 66C705(C4040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2239 00004AEF 00                  <1>
  2240 00004AF0 FFC9                <1>     dec ecx
  2241 00004AF2 759D                <1>     jnz .asciiLp
  2242                              <1> .bytesXfrdOk:
  2243 00004AF4 89D0                <1>     mov eax, edx
  2244 00004AF6 E938020000          <1>     jmp writeExitChar
  2245                              <1> .nulDev:
  2246 00004AFB 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2247 00004AFD E931020000          <1>     jmp writeExitChar
  2248                              <1> .conDev:
  2249 00004B02 E87BDEFFFF          <1>     call vConSwapDriver
  2250 00004B07 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2251 00004B0A 51                  <1>     push rcx
  2252                              <1> .conDevLp:
  2253 00004B0B AC                  <1>     lodsb
  2254 00004B0C 3C1A                <1>     cmp al, EOF
  2255 00004B0E 7409                <1>     je .conDevExit
  2256 00004B10 E807DAFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2257 00004B15 FFC9                <1>     dec ecx
  2258 00004B17 75F2                <1>     jnz .conDevLp
  2259                              <1> .conDevExit:
  2260 00004B19 58                  <1>     pop rax ;Get initial ecx back into eax
  2261 00004B1A 29C8                <1>     sub eax, ecx
  2262 00004B1C E879DEFFFF          <1>     call vConRetDriver
  2263 00004B21 E90D020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2264                              <1> .exitFail:
  2265 00004B26 B805000000          <1>     mov eax, errAccDen
  2266 00004B2B F9                  <1>     stc
  2267                              <1>     return
    13                              <2> %%_ret:
    14 00004B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2268                              <1> writeDiskFile:
  2269                              <1>     ;rdi has SFT ptr
  2270 00004B2D 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2271 00004B33 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2272 00004B3A C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2273 00004B41 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2274 00004B47 0F859E010000        <1>     jnz .badExit
  2275 00004B4D 85C9                <1>     test ecx, ecx
  2276 00004B4F 7505                <1>     jnz .nonZeroWrite
  2277 00004B51 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2278                              <1> .nonZeroWrite:
  2279                              <1>     ;Now do share check here
  2280 00004B56 E89D310000          <1>     call retryShareIODelay
  2281 00004B5B 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2282 00004B5D E82A320000          <1>     call shareCheckWriteLockViolation
  2283 00004B62 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2284                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004B64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2285                              <1> .proceedWithWrite:
  2286                              <1> ;Ensure that we update the directory entry after this write
  2287 00004B65 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(charDevNoEOF|blokNoDTonClose)
  2288                              <1> ;Ensure that all buffers are now unreferenced
  2289 00004B6B E869BBFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2290 00004B70 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2291                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2292 00004B73 85C0                <1>     test eax, eax
  2293 00004B75 7515                <1>     jnz .notStart
  2294 00004B77 E875BFFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2295                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B7C 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2296 00004B7E 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2297 00004B83 0F8451010000        <1>     je .diskFullExit
  2298                              <1>     ;Now eax has the first cluster of chain
  2299 00004B89 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2300                              <1> .notStart:
  2301                              <1> ;eax has the start cluster of the file
  2302                              <1> ;Now we go to CurntOff
  2303 00004B8C 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2304 00004B92 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2305 00004B98 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2306 00004B9A 743F                <1>     jz .atCluster
  2307 00004B9C E87B000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2308                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004BA1 72C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2309 00004BA3 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2310 00004BA8 7531                <1>     jne .atCluster
  2311 00004BAA 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
  2312 00004BB1 7505                <1>     jne .haveFreeClustCnt
  2313 00004BB3 E8D5BFFFFF          <1>     call findFreeClusterData
  2314                              <1> .haveFreeClustCnt:
  2315 00004BB8 395531              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], edx
  2316 00004BBB 0F8219010000        <1>     jb .diskFullExit
  2317                              <1>     ;Here we know we have enough cluster to allocate to the file,
  2318                              <1>     ; so just roll with it. 
  2319 00004BC1 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2320 00004BC7 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2321 00004BC9 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2322 00004BCB E849BFFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2323                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004BD0 7292                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2324 00004BD2 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2325 00004BD4 E843000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2326                              <1>     retc    
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004BD9 7289                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2327                              <1> .atCluster:
  2328                              <1> ;Fall here with the sector number in eax
  2329 00004BDB E897BEFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2330                              <1>     ;Now we add the offset to this
  2331 00004BE0 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2332 00004BE7 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2333 00004BEA 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2334 00004BF1 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2335 00004BF7 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2336 00004BF9 753B                <1>     jnz .mainWrite  
  2337                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2338                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2339                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2340 00004BFB 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2341 00004BFE 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2342 00004C01 7311                <1>     jae .extend
  2343                              <1> ;Here we truncate!
  2344 00004C03 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2345 00004C09 E83BC0FFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2346                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004C0E 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004C10 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2347 00004C11 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2348                              <1> .extend:
  2349 00004C14 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2350 00004C17 E9D6000000          <1>     jmp .noByteExit ;Exit ok!
  2351                              <1> .walkFAT:
  2352                              <1> ;Input: eax = Cluster to start walking from
  2353                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2354                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2355                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2356                              <1> ;If CF=CY, hard error, fail!
  2357 00004C1C E87BC0FFFF          <1>     call readFAT
  2358                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004C21 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2359 00004C23 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2360 00004C28 740A                <1>     je .wFatExit    ;Return if so
  2361 00004C2A 8905(54070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2362 00004C30 FFCA                <1>     dec edx                         ;Decrement counter
  2363 00004C32 75E8                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2364                              <1> .wFatExit:
  2365 00004C34 F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2366                              <1>     return
    13                              <2> %%_ret:
    14 00004C35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2367                              <1> .mainWrite:
  2368                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2369 00004C36 E841FDFFFF          <1>     call diskIOGetBuffer
  2370 00004C3B 0F82AA000000        <1>     jc .badExit
  2371 00004C41 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2372 00004C45 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2373 00004C4C 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2374                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2375                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2376                              <1>     ; 3) Number of bytes left free in the sector
  2377 00004C4F 31C0                <1>     xor eax, eax
  2378 00004C51 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2379 00004C55 89D8                <1>     mov eax, ebx
  2380 00004C57 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2381 00004C5E 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2382                              <1> 
  2383 00004C64 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2384 00004C66 0F47CB              <1>     cmova ecx, ebx
  2385 00004C69 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2386 00004C6B 0F47C8              <1>     cmova ecx, eax
  2387                              <1> 
  2388 00004C6E 56                  <1>     push rsi
  2389 00004C6F 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2390 00004C76 51                  <1>     push rcx
  2391 00004C77 F3A4                <1>     rep movsb
  2392 00004C79 59                  <1>     pop rcx
  2393 00004C7A E80EBCFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2394                              <1> 
  2395 00004C7F 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2396 00004C85 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2397 00004C8B 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2398 00004C92 5E                  <1>     pop rsi
  2399                              <1> 
  2400 00004C93 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2401 00004C99 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2402 00004C9F 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2403 00004CA1 745A                <1>     jz writeExit
  2404 00004CA3 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2404 00004CAB 00                  <1>
  2405 00004CAC E83CBFFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2406 00004CB1 7238                <1>     jc .badExit
  2407 00004CB3 7581                <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2408                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2409                              <1>     ; current allocation chain
  2410 00004CB5 8B1D(54070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2411 00004CBB B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2412 00004CC0 E854BEFFFF          <1>     call allocateClusters
  2413 00004CC5 7224                <1>     jc .badExit
  2414 00004CC7 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2415 00004CCC 740C                <1>     je .diskFullExit  ;End write in this case!
  2416                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2417                              <1> ; write to! 
  2418                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2419 00004CCE E81ABFFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2420 00004CD3 7216                <1>     jc .badExit
  2421 00004CD5 E95CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2422                              <1> .diskFullExit:
  2423 00004CDA 56                  <1>     push rsi
  2424 00004CDB 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2425 00004CE2 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2426 00004CE8 5E                  <1>     pop rsi
  2427 00004CE9 7412                <1>     jz writeExit    ;If no trigger Int 24h, return success
  2428                              <1>     ;Here we future proof for triggering Int 24h.
  2429                              <1> .badExit:
  2430 00004CEB B805000000          <1>     mov eax, errAccDen
  2431 00004CF0 F9                  <1>     stc
  2432                              <1>     return
    13                              <2> %%_ret:
    14 00004CF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2433                              <1> .noByteExit:
  2434 00004CF2 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2435 00004CF7 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2436                              <1> writeExit:
  2437                              <1> ;Advances the bytes on the file pointer
  2438                              <1> ;Return: ecx = Number of bytes transferred
  2439 00004CFD 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2440 00004D04 E84A000000          <1>     call updateCurrentSFT
  2441 00004D09 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2442 00004D0F 7515                <1>     jnz .exit   ;These just exit as no filesize!
  2443 00004D11 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2444 00004D13 7411                <1>     jz .exit
  2445 00004D15 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2446                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2447 00004D1B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2448 00004D1E 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2449 00004D21 7303                <1>     jae .exit
  2450 00004D23 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2451                              <1> .exit:
  2452 00004D26 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2453 00004D2B FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2454 00004D31 F8                  <1>     clc
  2455                              <1>     return
    13                              <2> %%_ret:
    14 00004D32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2456                              <1> writeExitChar:
  2457                              <1> ;Input: eax = Number of chars transferred
  2458 00004D33 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2459 00004D39 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2460 00004D3B 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2461 00004D41 EBBA                <1>     jmp short writeExit
  2462                              <1> ;-----------------------------------:
  2463                              <1> ;        File Handle routines       :
  2464                              <1> ;-----------------------------------:
  2465                              <1> 
  2466                              <1> setCurrentSFT:
  2467                              <1> ;Set the pointer in rdi as current SFT 
  2468 00004D43 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2469                              <1>     return 
    13                              <2> %%_ret:
    14 00004D4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2470                              <1> getCurrentSFT:
  2471                              <1> ;Get the current SFT pointer in rdi
  2472 00004D4B 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2473                              <1>     return 
    13                              <2> %%_ret:
    14 00004D52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2474                              <1> updateCurrentSFT:
  2475                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2476                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2477 00004D53 57                  <1>     push rdi
  2478 00004D54 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2479                              <1> ;Get in ecx the number of bytes we xferred
  2480 00004D5B 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2481 00004D61 F7D9                <1>     neg ecx ;Multiply by -1
  2482 00004D63 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2483                              <1> ;ecx has bytes transferred
  2484 00004D69 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2485 00004D6F 751D                <1>     jnz .exit
  2486                              <1> ;Down here for disk files only!
  2487 00004D71 50                  <1>     push rax
  2488 00004D72 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2489 00004D78 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2490 00004D7B 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2491 00004D81 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2492 00004D84 8B05(67070000)      <1>     mov eax, dword [currByteF]
  2493 00004D8A 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2494 00004D8D 58                  <1>     pop rax
  2495                              <1> .exit:
  2496 00004D8E 5F                  <1>     pop rdi
  2497 00004D8F F8                  <1>     clc
  2498                              <1>     return 
    13                              <2> %%_ret:
    14 00004D90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2499                              <1> 
  2500                              <1> setupVarsForTransfer:
  2501                              <1> ;Computes the actual bytes to be transferred and 
  2502                              <1> ; sets up internal variables for the transfer. 
  2503                              <1> ;Works for both reading and writing
  2504                              <1> ;Input: ecx = User desired Bytes to transfer
  2505                              <1> ;       rdi = SFT pointer for the file
  2506                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2507                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2508                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2509                              <1> ;
  2510                              <1> ;Note: Does not account for a FULL disk. When writing,
  2511                              <1> ; if the disk will get full as a result of the write,
  2512                              <1> ; stop at the last byte before the transfer. If the 
  2513                              <1> ; file pointer is past the last free byte, write 0
  2514 00004D91 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2515 00004D95 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2516 00004D9C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2517 00004D9F 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2518 00004DA5 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2519 00004DAB 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2520 00004DB1 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2521                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004DB7 75D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2522                              <1> ;Disk files...
  2523 00004DB9 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2524 00004DBC 8905(67070000)      <1>     mov dword [currByteF], eax
  2525 00004DC2 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2526                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2527 00004DC6 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2528 00004DCD 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2529 00004DD0 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2530 00004DD6 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2531 00004DDC 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2532 00004DE0 31D2                <1>     xor edx, edx    ;Zero rdx
  2533 00004DE2 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2534                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2535                              <1>     ;edx has the offset into that sector
  2536 00004DE4 8905(58070000)      <1>     mov dword [currSectF], eax
  2537 00004DEA 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2538 00004DF1 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2539 00004DF3 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2540 00004DF6 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2541 00004DFC 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2542 00004DFE 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2543 00004E01 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2544 00004E03 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2545 00004E09 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2546                              <1>     return 
    13                              <2> %%_ret:
    14 00004E0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2547                              <1> 
  2548                              <1> findFreeSFT:
  2549                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2550                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2551                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2552                              <1> ;        CF=CY => eax = errNhl, error exit
  2553 00004E0C 31DB                <1>     xor ebx, ebx
  2554                              <1> .mainLp:
  2555 00004E0E 53                  <1>     push rbx    ;Save the sft ndx
  2556 00004E0F E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2557 00004E14 5B                  <1>     pop rbx
  2558 00004E15 7307                <1>     jnc .sftExists
  2559 00004E17 B804000000          <1>     mov eax, errNhl
  2560 00004E1C F9                  <1>     stc
  2561                              <1>     return
    13                              <2> %%_ret:
    14 00004E1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2562                              <1> .sftExists:
  2563 00004E1E 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2564 00004E23 7427                <1>     je .sftFound
  2565 00004E25 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2566 00004E2A 751C                <1>     jne .gotoNextNdx
  2567                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2568 00004E2C 53                  <1>     push rbx
  2569 00004E2D 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2570 00004E34 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2571 00004E38 750B                <1>     jne .netGoToNextNdx
  2572 00004E3A 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2573 00004E41 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2574                              <1> .netGoToNextNdx:
  2575 00004E45 5B                  <1>     pop rbx
  2576 00004E46 7404                <1>     je .sftFound
  2577                              <1> .gotoNextNdx:
  2578 00004E48 FFC3                <1>     inc ebx
  2579 00004E4A EBC2                <1>     jmp short .mainLp
  2580                              <1> .sftFound:
  2581 00004E4C 53                  <1>     push rbx
  2582 00004E4D 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2583 00004E52 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2584 00004E59 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2585 00004E5D 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2586 00004E64 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2587 00004E68 5B                  <1>     pop rbx
  2588 00004E69 F8                  <1>     clc
  2589                              <1>     return
    13                              <2> %%_ret:
    14 00004E6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2590                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2591                              <1> ;Return a pointer to the SFT entry in rdi
  2592                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2593                              <1> ;Output: rdi = SFT pointer
  2594 00004E6B 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2595                              <1> .walk:
  2596 00004E72 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2597 00004E76 7212                <1>     jb .thisTable
  2598 00004E78 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2599 00004E7C 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2600 00004E7F 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2601 00004E86 75EA                <1>     jne .walk
  2602 00004E88 F9                  <1>     stc
  2603                              <1>     return
    13                              <2> %%_ret:
    14 00004E89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2604                              <1> .thisTable:
  2605 00004E8A 50                  <1>     push rax
  2606 00004E8B 52                  <1>     push rdx
  2607 00004E8C B84F000000          <1>     mov eax, sft_size
  2608 00004E91 F7E3                <1>     mul ebx
  2609 00004E93 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2610 00004E96 5A                  <1>     pop rdx
  2611 00004E97 58                  <1>     pop rax
  2612 00004E98 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2613                              <1>     return
    13                              <2> %%_ret:
    14 00004E9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2614                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2615                              <1> ;Return a zero extended value in rdi for the SFT entry
  2616                              <1> ;Input: bx = JFT handle (we zero extend)
  2617                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2618                              <1> ;        CF=CY => al = Error code, Fail
  2619 00004EA0 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2620 00004EA3 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2621 00004EAA 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2622 00004EAE 7204                <1>     jb .ok
  2623 00004EB0 B006                <1>     mov al, errBadHdl
  2624 00004EB2 F9                  <1>     stc
  2625                              <1>     return
    13                              <2> %%_ret:
    14 00004EB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2626                              <1> .ok:
  2627 00004EB4 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2628 00004EBA 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2629 00004EBC 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2630 00004EBE 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2631 00004EC2 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2632 00004EC6 EB0B                <1>     jmp short .pspOkExit
  2633                              <1> .pspJftBelow:
  2634 00004EC8 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2635                              <1> .pspJftOk:
  2636 00004ECE 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2637                              <1> .pspOkExit:
  2638 00004ED3 F8                  <1>     clc
  2639                              <1>     return
    13                              <2> %%_ret:
    14 00004ED4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2640                              <1> findFreeJFTEntry:
  2641                              <1> ;Finds a free JFT entry in the currentPSP.
  2642                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2643                              <1> ;        CF=CY => al=errNhl
  2644 00004ED5 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2645                              <1> .searchLp:
  2646 00004ED7 E8C4FFFFFF          <1>     call getJFTPtr
  2647 00004EDC 7209                <1>     jc .badExit
  2648 00004EDE 803FFF              <1>     cmp byte [rdi], -1
  2649                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EE1 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2650 00004EE3 FFC3                <1>     inc ebx
  2651 00004EE5 EBF0                <1>     jmp short .searchLp
  2652                              <1> .badExit:
  2653 00004EE7 B004                <1>     mov al, errNhl
  2654 00004EE9 F9                  <1>     stc
  2655                              <1>     return
    13                              <2> %%_ret:
    14 00004EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2656                              <1> getSFTPtr:
  2657                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2658                              <1> ;Input: bx = JFT handle
  2659                              <1> ;Output: CF=NC: rdi = SFT pointer
  2660                              <1> ;        CF=CY: Error, ax=Error code
  2661 00004EEB E815000000          <1>     call derefSFTPtr
  2662                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EF0 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2663 00004EF2 50                  <1>     push rax
  2664 00004EF3 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2665 00004EFA 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2666 00004EFE 58                  <1>     pop rax
  2667                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EFF 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2668 00004F01 B006                <1>     mov al, errBadHdl   ;Error code
  2669 00004F03 F9                  <1>     stc         ;Reset CF
  2670                              <1>     return
    13                              <2> %%_ret:
    14 00004F04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2671                              <1> 
  2672                              <1> derefSFTPtr:
  2673                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2674                              <1> ;Input: bx = File handle (gets zero extended)
  2675                              <1> ;Output: CF=NC: rdi = SFT pointer
  2676                              <1> ;        CF=CY: Error, ax=Error code
  2677 00004F05 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2678 00004F0A 7205                <1>     jb .fail
  2679 00004F0C 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2680 00004F0F 7504                <1>     jne .ok
  2681                              <1> .fail:
  2682 00004F11 B006                <1>     mov al, errBadHdl
  2683 00004F13 F9                  <1>     stc
  2684                              <1>     return
    13                              <2> %%_ret:
    14 00004F14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2685                              <1> .ok:
  2686 00004F15 53                  <1>     push rbx    ;Preserve the JFT handle
  2687 00004F16 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2688 00004F19 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2689 00004F1E 5B                  <1>     pop rbx 
  2690                              <1>     return
    13                              <2> %%_ret:
    14 00004F1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2691                              <1> 
  2692                              <1> getSFTndxInheritable:
  2693                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2694                              <1> ;Input: ebx = SFTndx (word)
  2695                              <1> ;Output: 
  2696                              <1> ;   ZF=ZE => Inheritable
  2697                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2698 00004F20 57                  <1>     push rdi
  2699 00004F21 E845FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2700 00004F26 7208                <1>     jc .badNdx
  2701 00004F28 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2702 00004F2E 5F                  <1>     pop rdi
  2703                              <1>     return
    13                              <2> %%_ret:
    14 00004F2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2704                              <1> .badNdx:
  2705 00004F30 31FF                <1>     xor edi, edi
  2706 00004F32 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2707 00004F34 F8                  <1>     clc
  2708 00004F35 5F                  <1>     pop rdi
  2709                              <1>     return
    13                              <2> %%_ret:
    14 00004F36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2710                              <1> 
  2711                              <1> incrementOpenCount:
  2712                              <1> ;Given a SFTndx, this function will increment it's open count
  2713                              <1> ;Output:
  2714                              <1> ;   CF=NC => sftndx ok, count incremented
  2715                              <1> ;   CF=CY => Bad ndx
  2716 00004F37 57                  <1>     push rdi
  2717 00004F38 E82EFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2718 00004F3D 7203                <1>     jc .exit
  2719 00004F3F 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2720                              <1> .exit:
  2721 00004F42 5F                  <1>     pop rdi
  2722                              <1>     return
    13                              <2> %%_ret:
    14 00004F43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2723                              <1> 
  2724                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2725                              <1> ;Input: rdi = SFT pointer
  2726                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2727 00004F44 9C                  <1>     pushfq
  2728 00004F45 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2729 00004F48 FFC8                <1>     dec eax     ;Decrement count
  2730 00004F4A 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2731 00004F4C FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2732                              <1> .exit:
  2733 00004F4E 9D                  <1>     popfq
  2734 00004F4F 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2735                              <1>     return
    13                              <2> %%_ret:
    14 00004F52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2736                              <1> 
  2737                              <1> ;Buffer Wrapper
  2738                              <1> writeThroughBuffersForHandle:
  2739                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2740 00004F53 57                  <1>     push rdi
  2741 00004F54 55                  <1>     push rbp
  2742 00004F55 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2743 00004F5C 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2744 00004F62 751C                <1>     jnz .exit
  2745 00004F64 FF35(0A070000)      <1>     push qword [workingDPB]
  2746 00004F6A 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2747 00004F6E 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2748 00004F75 E8A2B7FFFF          <1>     call flushAllBuffersForDPB
  2749 00004F7A 8F05(0A070000)      <1>     pop qword [workingDPB]
  2750                              <1> .exit:
  2751 00004F80 5D                  <1>     pop rbp
  2752 00004F81 5F                  <1>     pop rdi
  2753                              <1>     return
    13                              <2> %%_ret:
    14 00004F82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2754                              <1> 
  2755                              <1> setDPBfromSFT:
  2756                              <1> ;Sets and updates the DPB from an SFT ptr
  2757                              <1> ;Input: rdi -> sft
  2758                              <1> ;Output: CF=NC: workingDPB set
  2759                              <1> ;        CF=CY: Error fail, exit
  2760 00004F83 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2761 00004F87 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
  2762 00004F8B 8805(09070000)      <1>     mov byte [workingDrv], al
  2763 00004F91 E821200000          <1>     call setWorkingDPB
  2764 00004F96 E8DE1D0000          <1>     call ensureDiskValid
  2765                              <1>     return
    13                              <2> %%_ret:
    14 00004F9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    46                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004F9C 3C0F                <1>     cmp al, 15
    36 00004F9E 7747                <1>     ja .invalidFunction
    37 00004FA0 84C0                <1>     test al, al
    38 00004FA2 745B                <1>     jz .getDevWord
    39 00004FA4 3C01                <1>     cmp al, 1
    40 00004FA6 746E                <1>     je .setDevWord
    41 00004FA8 2C02                <1>     sub al, 2
    42 00004FAA 3C03                <1>     cmp al, 3
    43 00004FAC 7673                <1>     jbe .ioctlStringFunctions
    44 00004FAE 2C04                <1>     sub al, 4
    45 00004FB0 3C01                <1>     cmp al, 1
    46 00004FB2 0F8644010000        <1>     jbe .ioStatusFunctions
    47 00004FB8 2C02                <1>     sub al, 2
    48 00004FBA 3C02                <1>     cmp al, 2
    49 00004FBC 0F86CD010000        <1>     jbe .devControl
    50 00004FC2 2C03                <1>     sub al, 3
    51 00004FC4 0F8498020000        <1>     jz .setSharingCount
    52 00004FCA FEC8                <1>     dec al
    53 00004FCC 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 00004FD2 FEC8                <1>     dec al
    55 00004FD4 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 00004FDA FEC8                <1>     dec al
    57 00004FDC 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 00004FE2 E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004FE7 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004FEC E92A250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004FF1 B805000000          <1>     mov eax, errAccDen
    65 00004FF6 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004FF8 B806000000          <1>     mov eax, errBadHdl
    68 00004FFD EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004FFF E801FFFFFF          <1>     call derefSFTPtr
    74 00005004 72F2                <1>     jc .badHandle
    75 00005006 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 0000500A 30C0                <1>     xor al, al
    77 0000500C E83B200000          <1>     call getUserRegs
    78 00005011 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00005015 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00005016 E8EAFEFFFF          <1>     call derefSFTPtr
    84 0000501B 72DB                <1>     jc .badHandle 
    85 0000501D 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00005020 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00005021 0FB6F3              <1>     movzx esi, bl
    96 00005024 488D1D(C1040000)    <1>     lea rbx, primReqHdr
    97 0000502B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00005032 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00005039 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 0000503C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 0000503F 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00005043 51                  <1>     push rcx
   105 00005044 52                  <1>     push rdx
   106 00005045 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 0000504A BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 0000504F A801                <1>     test al, 1  ;If set, this is a write operation
   109 00005051 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00005054 7507                <1>     jnz .notWrite
   111 00005056 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 0000505D 5A                  <1>     pop rdx
   114 0000505E 59                  <1>     pop rcx
   115 0000505F 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00005062 3C01                <1>     cmp al, 1
   117 00005064 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00005066 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00005069 E897FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 0000506E 7288                <1>     jc .badHandle 
   122 00005070 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00005077 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 0000507D 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00005083 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00005087 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 0000508E 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00005091 31C0                <1>     xor eax, eax
   130 00005093 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00005095 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 0000509C 89F0                <1>     mov eax, esi
   136 0000509E 53                  <1>     push rbx
   137 0000509F E83C200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 000050A4 5B                  <1>     pop rbx
   139 000050A5 730A                <1>     jnc .okDrive
   140 000050A7 B80F000000          <1>     mov eax, errBadDrv
   141 000050AC E96A240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 000050B1 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 000050B8 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 000050BC 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 000050BF 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000050C2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000050C6 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000050C9 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000050CD 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000050D0 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000050D6 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 000050DC 51                  <1>     push rcx    ;Push xfrctr
   159 000050DD 52                  <1>     push rdx    ;Buffer Ptr
   160 000050DE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 000050E4 E8CE1A0000          <1>     call goDriver
   162 000050E9 5A                  <1>     pop rdx
   163 000050EA 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 000050EB 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 000050F1 0F8416240000        <1>     jz extGoodExit
   167 000050F7 E91A030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 000050FC E804FEFFFF          <1>     call derefSFTPtr
   173 00005101 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00005107 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   175 0000510E C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 00005111 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00005118 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 0000511E 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 00005124 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 0000512B B906000000          <1>     mov ecx, drvINSTATUS
   181 00005130 BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 00005135 84C0                <1>     test al, al
   183 00005137 0F45CA              <1>     cmovnz ecx, edx
   184 0000513A 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 0000513D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 00005143 7416                <1>     jz .ioStatDisk
   187 00005145 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 0000514C 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 00005153 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00005157 30C0                <1>     xor al, al
   191 00005159 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 0000515B C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 00005162 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00005166 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00005169 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 0000516C 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 00005170 E8421A0000          <1>     call goDriver
   200 00005175 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 0000517B 0F8595020000        <1>     jnz failIOCTLCall
   202 00005181 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00005187 7403                <1>     jz .notBusyExit
   204 00005189 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 0000518B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 0000518C 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 0000518E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 0000518F 84C0                <1>     test al, al
   216 00005191 746D                <1>     jz .remTest
   217 00005193 A801                <1>     test al, 1
   218 00005195 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 00005197 E869FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 0000519C 0F8256FEFFFF        <1>     jc .badHandle 
   222 000051A2 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 000051A6 E8A11E0000          <1>     call getUserRegs
   225 000051AB 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 000051AF 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 000051B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 000051B2 88D8                <1>     mov al, bl
   233 000051B4 E8271F0000          <1>     call getCDS
   234 000051B9 730A                <1>     jnc .devTestOkDrive
   235 000051BB B80F000000          <1>     mov eax, errBadDrv
   236 000051C0 E956230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 000051C5 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 000051CC 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 000051D0 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 000051D5 7513                <1>     jnz .remoteDrive
   242 000051D7 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 000051DB 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 000051DF 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 000051E3 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 000051E8 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 000051EA 6689D3              <1>     mov bx, dx
   249 000051ED 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 000051F2 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 000051F7 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 000051F9 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 000051FE EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 00005200 88D8                <1>     mov al, bl
   258 00005202 E8D91E0000          <1>     call getCDS
   259 00005207 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 00005209 B80F000000          <1>     mov eax, errBadDrv
   262 0000520E E908230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 00005213 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 0000521A 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 00005220 75E7                <1>     jnz .remTestBadDrv
   267 00005222 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   268 00005229 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 0000522D 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 00005230 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 00005234 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 0000523A 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 00005240 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 00005243 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005247 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 0000524D 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 00005250 E862190000          <1>     call goDriver
   278 00005255 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005259 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 0000525E C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 00005261 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 00005262 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 00005269 6685D2              <1>     test dx, dx
   288 0000526C 0F8475FDFFFF        <1>     jz .invalidFunction
   289 00005272 668915(21000000)    <1>     mov word [shareDelay], dx
   290 00005279 31C0                <1>     xor eax, eax
   291 0000527B E98D220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 00005280 E866FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 00005285 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 00005287 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 0000528E B806000000          <1>     mov eax, errBadHdl
   299 00005293 E983220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 00005298 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 0000529E 75E7                <1>     jnz .ioctrlBadHandle
   303 000052A0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000052A6 74DF                <1>     jz .ioctrlBadHandle
   305 000052A8 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000052AC EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000052AE 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000052B0 51                  <1>     push rcx
   310 000052B1 52                  <1>     push rdx
   311 000052B2 E8291E0000          <1>     call getCDS ;Sets the current CDS
   312 000052B7 5A                  <1>     pop rdx
   313 000052B8 59                  <1>     pop rcx
   314 000052B9 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000052BB 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 000052C2 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000052C6 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000052CA 7406                <1>     jz .badDrv
   320 000052CC 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000052D0 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000052D2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000052D9 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000052DE E938220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000052E3 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 000052E7 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 000052EB 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 000052EE 8805(C2040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   332 000052F4 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 000052F7 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 000052FD 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 000052FF C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 00005306 B801000000          <1>     mov eax, errInvFnc
   340 0000530B E90B220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 00005310 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   344 00005317 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 0000531A C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 0000531E 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 00005324 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005328 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 0000532C 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 0000532F E8181D0000          <1>     call getUserRegs
   351 00005334 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005338 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 0000533C 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 00005340 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 00005344 4889FE              <1>     mov rsi, rdi
   356 00005347 E86B180000          <1>     call goDriver
   357 0000534C 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 00005352 0F84B5210000        <1>     jz extGoodExit
   359 00005358 E9B9000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 0000535D 88D8                <1>     mov al, bl
   363 0000535F 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   364 00005366 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 0000536A C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 0000536D 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 00005373 53                  <1>     push rbx
   368 00005374 E8671D0000          <1>     call getCDS
   369 00005379 8805(09070000)      <1>     mov byte [workingDrv], al
   370 0000537F 5B                  <1>     pop rbx
   371 00005380 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 00005386 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 0000538D 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 00005391 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 00005395 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 00005398 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 0000539B 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000053A1 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000053A7 E80B180000          <1>     call goDriver
   381 000053AC 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000053B2 7405                <1>     jz .getDrvOk
   383 000053B4 E95D000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000053B9 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000053BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000053BD 88D8                <1>     mov al, bl
   389 000053BF 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   390 000053C6 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000053CA C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000053CD 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000053D3 53                  <1>     push rbx
   394 000053D4 E8071D0000          <1>     call getCDS
   395 000053D9 8805(09070000)      <1>     mov byte [workingDrv], al
   396 000053DF 5B                  <1>     pop rbx
   397 000053E0 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 000053E6 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 000053ED 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 000053F1 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 000053F5 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 000053F8 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 000053FB 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 00005401 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 00005407 E8AB170000          <1>     call goDriver
   406 0000540C 30C0                <1>     xor al, al
   407 0000540E 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005414 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005416 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 0000541A 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 00005420 E84B110000          <1>     call xlatHardError
   415 00005425 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 0000542C E9EA200000          <1>     jmp extErrExit
   417                              <1> 
    47                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00005431 E89A200000          <1>     call dosCrit1Enter
    15 00005436 B806000000          <1>     mov eax, 6
    16 0000543B 39C3                <1>     cmp ebx, eax
    17 0000543D 0F42D8              <1>     cmovb ebx, eax
    18 00005440 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00005442 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005449 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 00005450 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005457 31ED                <1>     xor ebp, ebp    
    24 00005459 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 0000545B 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00005462 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005465 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005468 7409                <1>     je .walk1
    30 0000546A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 0000546D 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00005473 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 0000547B 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00005481 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005484 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005486 31C9                <1>     xor ecx, ecx
    42 00005488 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 0000548B 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00005492 48C1E104            <1>     shl rcx, 4
    46 00005496 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00005499 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 0000549C 7409                <1>     je .cons1
    49 0000549E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000054A1 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000054A7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000054AF 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000054B1 31C9                <1>     xor ecx, ecx
    56 000054B3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000054B6 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000054BC 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000054BF 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000054C1 31D2                <1>     xor edx, edx
    61 000054C3 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000054C6 48895608            <1>     mov qword [rsi + 8], rdx
    63 000054CA 3C5A                <1>     cmp al, mcbMarkEnd
    64 000054CC 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000054CE 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000054D0 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000054D3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000054D6 39D9                <1>     cmp ecx, ebx
    72 000054D8 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000054DA 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000054E1 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000054E8 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000054EB 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 000054ED 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 000054F4 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 000054F6 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 000054F8 7209                <1>     jb .walk2
    83 000054FA 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 000054FC 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 00005503 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005506 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005508 31C9                <1>     xor ecx, ecx
    89 0000550A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 0000550D 48C1E104            <1>     shl rcx, 4
    91 00005511 4881C610000000      <1>     add rsi, mcb.program
    92 00005518 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 0000551B E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005520 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005527 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005529 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 00005530 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 00005533 0F84A8000000        <1>     jz .allocFail
   102 00005539 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 0000553B C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 0000553E 31C9                <1>     xor ecx, ecx
   105 00005540 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00005543 29D9                <1>     sub ecx, ebx
   107 00005545 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 0000554B 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 0000554E 48C1E104            <1>     shl rcx, 4
   110 00005552 4881C610000000      <1>     add rsi, mcb.program
   111 00005559 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 0000555C 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 0000555E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00005561 EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 00005563 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 0000556A 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00005571 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005579 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 0000557C 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 0000557E 31C9                <1>     xor ecx, ecx
   123 00005580 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00005583 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005585 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005587 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 0000558D 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005590 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00005592 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00005595 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 00005598 4881C710000000      <1>     add rdi, mcb.program
   133 0000559F 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000055A5 48C1E304            <1>     shl rbx, 4
   135 000055A9 4801DF              <1>     add rdi, rbx
   136 000055AC 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000055AE 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000055B6 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000055B9 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000055C0 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000055C4 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000055CB 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000055CF 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000055D2 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000055D6 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000055DB E8FA1E0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000055E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000055E1 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000055E8 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000055EA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000055ED 7409                <1>     je .af1
   157 000055EF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000055F2 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 000055F8 31C9                <1>     xor ecx, ecx
   161 000055FA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 000055FD 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005605 7505                <1>     jne .af2
   164 00005607 39D9                <1>     cmp ecx, ebx
   165 00005609 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 0000560C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 0000560F 7410                <1>     je .afExit
   169 00005611 48C1E104            <1>     shl rcx, 4
   170 00005615 4881C610000000      <1>     add rsi, mcb.program
   171 0000561C 4801CE              <1>     add rsi, rcx
   172 0000561F EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00005621 B808000000          <1>     mov eax, errNoMem
   175 00005626 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 0000562D 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005630 E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005635 E8961E0000          <1>     call dosCrit1Enter
   183 0000563A 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00005641 31C9                <1>     xor ecx, ecx
   185 00005643 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 0000564A 4889F7              <1>     mov rdi, rsi
   187 0000564D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005650 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005654 4881C610000000      <1>     add rsi, mcb.program
   190 0000565B 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 0000565E 31C9                <1>     xor ecx, ecx
   193 00005660 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 00005663 7409                <1>     je .valid
   195 00005665 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005668 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 0000566E 4939F0              <1>     cmp r8, rsi
   199 00005671 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 00005673 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005676 0F84A5000000        <1>     je .blockError
   203 0000567C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 0000567F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00005683 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 0000568A 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 0000568D EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 0000568F 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00005697 0F8484000000        <1>     je .blockError
   213 0000569D 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000056A5 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000056AD 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000056AF 31C9                <1>     xor ecx, ecx
   218 000056B1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000056B4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000056BA 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000056BD 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000056BF 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000056C1 31C9                <1>     xor ecx, ecx
   225 000056C3 48890E              <1>     mov qword [rsi], rcx
   226 000056C6 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000056CA 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000056CD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000056D0 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000056D2 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000056D5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000056D8 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000056DC 4881C110000000      <1>     add rcx, mcb.program
   236 000056E3 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000056E6 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 000056EE 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 000056F0 31C9                <1>     xor ecx, ecx
   241 000056F2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 000056F5 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 000056FB 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 000056FE 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005700 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005702 31C9                <1>     xor ecx, ecx
   248 00005704 48890E              <1>     mov qword [rsi], rcx
   249 00005707 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 0000570B E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005710 E8C51D0000          <1>     call dosCrit1Exit
   253 00005715 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 0000571C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005720 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005721 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005728 B809000000          <1>     mov eax, errMemAddr
   259 0000572D E8E91D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005732 E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005737 E89E1D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 0000573C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 0000573D E88E1D0000          <1>     call dosCrit1Enter
   268 00005742 85DB                <1>     test ebx, ebx
   269 00005744 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 0000574A B806000000          <1>     mov eax, 6
   271 0000574F 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005751 0F42D8              <1>     cmovb ebx, eax
   273 00005754 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 0000575B 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 0000575E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005761 7409                <1>     je .ctn
   277 00005763 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005766 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 0000576C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005774 74AB                <1>     je freeMemory.blockError
   284 00005776 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005779 31C9                <1>     xor ecx, ecx
   286 0000577B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 0000577E 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005780 0F8791000000        <1>     ja .growth
   289 00005786 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 0000578C 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 0000578E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005794 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005797 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 0000579D 48C1E304            <1>     shl rbx, 4
   296 000057A1 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000057A8 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000057AB 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000057AD C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000057B0 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000057B2 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000057BA 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000057BD 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000057BF 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000057C5 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000057C8 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000057CC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000057D3 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000057D6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000057D9 7409                <1>     je .shrinkAbsorb
   312 000057DB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000057DE 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000057E4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 000057EC 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 000057F2 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 000057F4 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 000057F6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 000057F9 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 000057FC 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 000057FF 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005802 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005806 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005809 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 0000580B 48890E              <1>     mov qword [rsi], rcx
   329 0000580E 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005812 E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005817 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 0000581A 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005820 31C9                <1>     xor ecx, ecx
   337 00005822 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005825 48C1E104            <1>     shl rcx, 4
   339 00005829 4889F7              <1>     mov rdi, rsi    
   340 0000582C 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005833 4801CE              <1>     add rsi, rcx
   342 00005836 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005839 7409                <1>     je .growthOK
   344 0000583B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 0000583E 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005844 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 0000584C 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 0000584E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005850 31C9                <1>     xor ecx, ecx
   353 00005852 31D2                <1>     xor edx, edx
   354 00005854 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005857 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 0000585D 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005860 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005862 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005864 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005867 775E                <1>     ja .notEnuffMem1
   361 00005869 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 0000586B 81FA01000000        <1>     cmp edx, 1
   363 00005871 744E                <1>     je .notEnuffMem2
   364 00005873 31C9                <1>     xor ecx, ecx
   365 00005875 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005878 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 0000587C 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 0000587F 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005882 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005889 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 0000588D 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005890 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005894 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005896 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005898 7411                <1>     jz .exit
   378 0000589A 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000058A0 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000058A3 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000058AB E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000058B0 E8251C0000          <1>     call dosCrit1Exit
   384 000058B5 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 000058BC 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000058C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000058C1 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000058C3 EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 000058C5 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 000058C7 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 000058CC 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 000058D3 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 000058D6 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 000058DB B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 000058E0 E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 000058E5 84C0                <1>     test al, al
   402 000058E7 741F                <1>     jz .get
   403 000058E9 3C02                <1>     cmp al, 2
   404 000058EB 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 000058ED 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 000058F4 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 000058F8 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 000058FE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005902 E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005907 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005908 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 0000590F 31C0                <1>     xor eax, eax
   415 00005911 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005917 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 0000591A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 0000591E E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005923 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005924 B801000000          <1>     mov eax, errInvFnc
   422 00005929 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 0000592B 50                  <1>     push rax
   428 0000592C 53                  <1>     push rbx
   429 0000592D 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005934 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005937 7408                <1>     je .ok1
   433 00005939 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 0000593C 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 0000593E 5B                  <1>     pop rbx
   437 0000593F 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005940 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005941 31C0                <1>     xor eax, eax
   441 00005943 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005946 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 0000594A 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005951 4801C3              <1>     add rbx, rax
   445 00005954 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005956 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005957 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005958 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 0000595A C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00005961 E9B51B0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00005966 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 0000596D E8A91B0000          <1>     call extErrExit ;Error thru the unified error handler
   457 00005972 EBB7                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    48                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005974 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005976 E9CD190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 0000597B 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005981 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005984 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005989 E9BA190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 0000598E C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005995 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 0000599C 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 0000599E 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 0000599F EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000059A1 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 000059A8 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000059AC 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000059AD 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000059B4 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000059B8 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000059BC 4C89C6              <1>     mov rsi, r8
    52 000059BF 4889D7              <1>     mov rdi, rdx
    53 000059C2 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000059C7 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000059CA 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000059D2 F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000059D9 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000059DB 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000059E3 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000059E7 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000059EB 31C9                <1>     xor ecx, ecx
    64 000059ED B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 000059F2 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 000059F6 B0FF                <1>     mov al, -1
    67 000059F8 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 000059FA 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 000059FC E89FF4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005A01 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005A04 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005A08 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005A0C 67E31C              <1>     jecxz .copy
    77 00005A0F FFC9                <1>     dec ecx
    78 00005A11 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005A12 0FB6D8              <1>     movzx ebx, al
    80 00005A15 53                  <1>     push rbx
    81 00005A16 E805F5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005A1B 58                  <1>     pop rax
    83 00005A1C 7508                <1>     jnz .badJFT
    84 00005A1E AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005A1F E813F5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005A24 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005A26 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005A29 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005A2B C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005A32 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005A33 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005A36 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005A3A B022                <1>     mov al, 22h
    97 00005A3C E8DD150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005A41 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005A44 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005A46 B023                <1>     mov al, 23h
   101 00005A48 E8D1150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005A4D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005A50 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005A52 B024                <1>     mov al, 24h
   105 00005A54 E8C5150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005A59 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005A5C 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005A5E 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005A63 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005A69 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005A6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005A6E C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005A75 81FA06000000        <1>     cmp edx, 6
   120 00005A7B 7305                <1>     jae .aboveMinimum
   121 00005A7D BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005A82 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005A89 89D3                <1>     mov ebx, edx
   129 00005A8B 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005A8C 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005A8D E8ABFCFFFF          <1>     call reallocMemory
   132 00005A92 5B                  <1>     pop rbx
   133 00005A93 58                  <1>     pop rax
   134 00005A94 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005A96 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005A9A EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005A9C 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005A9E 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005AA0 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005AA6 F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005AAD 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005AAF 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005AB5 C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005ABC 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005AC2 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005AC9 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005AD0 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005AD4 B024                <1>     mov al, 24h
   158 00005AD6 E8741C0000          <1>     call setIntVector
   159 00005ADB 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005ADF B023                <1>     mov al, 23h
   161 00005AE1 E8691C0000          <1>     call setIntVector
   162 00005AE6 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005AEA B022                <1>     mov al, 22h
   164 00005AEC E85E1C0000          <1>     call setIntVector
   165                              <1> 
   166 00005AF1 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005AF3 CD2A                <1>     int 2Ah
   168 00005AF5 C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;Aborts now get translated temporarily
   169 00005AFC B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005B01 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005B08 CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005B0A 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005B11 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005B14 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005B18 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005B1B 0F8494000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005B21 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005B28 747A                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181 00005B2A 803D(06070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   182 00005B31 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   183 00005B33 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   184 00005B38 CD2F                <1>     int 2Fh
   185                              <1> .skipAbortNetClose:
   186 00005B3A FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   187 00005B40 FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   188                              <1> ;Now close file handles
   189 00005B46 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   190 00005B4D 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   191 00005B51 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   192                              <1> .hdlLp:
   193 00005B53 53                  <1>     push rbx
   194 00005B54 51                  <1>     push rcx
   195 00005B55 E8EBD9FFFF          <1>     call closeFileHdl
   196 00005B5A 59                  <1>     pop rcx
   197 00005B5B 5B                  <1>     pop rbx
   198 00005B5C FFC3                <1>     inc ebx ;Goto next handle to close
   199 00005B5E 39CB                <1>     cmp ebx, ecx
   200 00005B60 75F1                <1>     jne .hdlLp   ;Keep looping for all entries in the JFT 
   201                              <1> ;Now free MCB's owned by task
   202 00005B62 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   203                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   204                              <1>     ; with the currentPSP signature and free them.
   205 00005B69 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   206                              <1> .wlkMcb:  ;And walk the chain
   207                              <1> ;First verify the address in rsi is a valid mcb
   208 00005B70 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   209 00005B72 80F94D              <1>     cmp cl, mcbMarkCtn
   210 00005B75 7405                <1>     je .checkToFree
   211 00005B77 80F95A              <1>     cmp cl, mcbMarkEnd
   212 00005B7A 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   213                              <1> .checkToFree:
   214 00005B7C 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   215 00005B80 750F                <1>     jne .noFree
   216 00005B82 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   217 00005B86 53                  <1>     push rbx
   218 00005B87 51                  <1>     push rcx
   219 00005B88 56                  <1>     push rsi
   220 00005B89 E8A7FAFFFF          <1>     call freeMemory ;Free this memory block
   221 00005B8E 5E                  <1>     pop rsi
   222 00005B8F 59                  <1>     pop rcx
   223 00005B90 5B                  <1>     pop rbx
   224                              <1>     ;If an error occured, the internal vars will be set.
   225                              <1> .noFree:
   226 00005B91 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   227 00005B94 740E                <1>     je .freeOk          ;Skip if we are
   228 00005B96 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   229 00005B99 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   230 00005B9D 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   231 00005BA2 EBCC                <1>     jmp short .wlkMcb
   232                              <1> .freeOk:
   233 00005BA4 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   234 00005BAA 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   235 00005BAE 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   236                              <1> .ownParent:
   237 00005BB5 B0FF                <1>     mov al, -1  ;Flush all drive buffers
   238 00005BB7 E814190000          <1>     call dosCrit1Enter
   239 00005BBC E86DABFFFF          <1>     call flushAllBuffersForDrive
   240 00005BC1 E814190000          <1>     call dosCrit1Exit
   241 00005BC6 FA                  <1>     cli
   242 00005BC7 C605(96040000)00    <1>     mov byte [Int24Trans], 0    
   243 00005BCE C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   244 00005BD5 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   245 00005BDC 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   246 00005BE3 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   247                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   248                              <1>     ; the ret ptr and the flags
   249 00005BE7 B022                <1>     mov al, 22h
   250 00005BE9 E830140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   251 00005BEE 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   252 00005BF3 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   253 00005BFC E8A1180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   254 00005C01 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    49                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005C03 55                  <1>     push rbp
   100 00005C04 4889E5              <1>     mov rbp, rsp
   101 00005C07 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005C0E 31C9                <1>     xor ecx, ecx
   104 00005C10 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105 00005C14 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   106 00005C18 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   107 00005C1C 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   108 00005C20 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   109                              <1> 
   110 00005C24 B403                <1>     mov ah, execOverlay
   111 00005C26 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   112 00005C2D 7402                <1>     jz short .noMulti
   113 00005C2F B404                <1>     mov ah, execBkgrnd
   114                              <1> .noMulti:
   115 00005C31 38E0                <1>     cmp al, ah
   116 00005C33 7615                <1>     jbe .validSubfunction
   117                              <1> .badSubFunction:
   118 00005C35 B801000000          <1>     mov eax, errInvFnc
   119 00005C3A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   120                              <1> .badExit:
   121 00005C41 4889EC              <1>     mov rsp, rbp
   122 00005C44 5D                  <1>     pop rbp
   123 00005C45 E9D1180000          <1>     jmp extErrExit
   124                              <1> 
   125                              <1> .validSubfunction:
   126 00005C4A 3C02                <1>     cmp al, execInvld
   127 00005C4C 74E7                <1>     je .badSubFunction
   128                              <1>     ;Save registers for each function call
   129 00005C4E 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   130 00005C52 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   131 00005C56 0FB6C0              <1>     movzx eax, al
   132 00005C59 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   133 00005C5D 4889D7              <1>     mov rdi, rdx
   134 00005C60 E864150000          <1>     call strlen ;Get string length in cx
   135 00005C65 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   136                              <1>     ;Now open the file we wanna yeet to
   137 00005C69 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   138 00005C6B 55                  <1>     push rbp    ;Preserve local frame ptr
   139 00005C6C E892D7FFFF          <1>     call openFileHdl
   140 00005C71 5D                  <1>     pop rbp
   141 00005C72 72CD                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00005C74 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00005C78 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 00005C7B E885F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 00005C80 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00005C84 F7C280000000        <1>     test edx, devCharDev
   148 00005C8A 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 00005C8C B002                <1>     mov al, errFnf
   150 00005C8E E92B060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 00005C93 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 00005C9B 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154 00005CA1 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   155 00005CA5 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   156 00005CA8 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   157 00005CAB 7514                <1>     jnz short .copyEnvironmentBlock
   158 00005CAD 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   159 00005CB4 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   160 00005CB8 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   161 00005CBC 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   162 00005CBF 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   163                              <1> .copyEnvironmentBlock:
   164 00005CC1 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   165                              <1>     ;Get the length of the environment
   166 00005CC4 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   167                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkCtn
   168                              <1> ;    je .envMCBFound
   169                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkEnd
   170                              <1> ;    jne .invalidEnvironmentError
   171                              <1> ;.envMCBFound:
   172                              <1>     ;The env block mcb size must be between 160 and 32768 bytes.
   173                              <1>     ;Get the length of the environment from the MCB itself!
   174                              <1> ;    xor ecx, ecx
   175                              <1> ;    mov ecx, dword [rdi - mcb_size + mcb.blockSize]
   176                              <1> ;    shl ecx, 4  ;Convert to bytes from paragraphs
   177                              <1> ;    cmp ecx, 7FF0h  ;Is it above 32Kb?
   178                              <1> ;    ja .invalidEnvironmentError ;Error out!
   179                              <1> ;    cmp ecx, 0A0h   ;Is the environment less than 160 bytes?
   180                              <1> ;    jb .invalidEnvironmentError ;Error out!
   181 00005CC9 31C0                <1>     xor eax, eax
   182 00005CCB 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   183                              <1> .envVerifyLp:
   184 00005CCE F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   185 00005CD0 7531                <1>     jnz short .invalidEnvironmentError
   186 00005CD2 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   187 00005CD5 FFC9                <1>     dec ecx
   188 00005CD7 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   189 00005CD8 75F4                <1>     jnz short .envVerifyLp
   190                              <1> 
   191 00005CDA 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   192 00005CDD 57                  <1>     push rdi     ;Save the length of the environment block
   193 00005CDE 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   194 00005CE4 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   195 00005CE8 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   196 00005CEA 89FB                <1>     mov ebx, edi
   197 00005CEC C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   198 00005CEF 55                  <1>     push rbp
   199 00005CF0 E83CF7FFFF          <1>     call allocateMemory
   200 00005CF5 5D                  <1>     pop rbp
   201 00005CF6 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   202 00005CF7 7314                <1>     jnc short .copyEnvironment
   203                              <1>     ;Fall thru if not enuff memory
   204                              <1> .insufficientMemory:
   205 00005CF9 B808000000          <1>     mov eax, errNoMem
   206 00005CFE E9BB050000          <1>     jmp .cleanAndFail
   207                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   208 00005D03 B80A000000          <1>     mov eax, errBadEnv
   209 00005D08 E9B1050000          <1>     jmp .cleanAndFail
   210                              <1> 
   211                              <1> .copyEnvironment:
   212                              <1>     ;rax has the ptr to allocated memory block
   213                              <1>     ;rcx has the number of chars to copy from the source env block
   214 00005D0D 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   215 00005D10 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   216 00005D14 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   217 00005D18 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   218 00005D1B F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   219 00005D1D B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   220 00005D22 66AB                <1>     stosw       ;Away you go!
   221 00005D24 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   222 00005D28 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   223 00005D2C F3A4                <1>     rep movsb   ;Move the bytes to rdi
   224                              <1> ;Done with the environment... more or less
   225                              <1> .loadProgram:
   226 00005D2E B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   227 00005D33 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   228 00005D3A E89B050000          <1>     call .readDataFromHdl
   229 00005D3F 0F8274050000        <1>     jc .badFmtErr
   230 00005D45 85C0                <1>     test eax, eax   ;Were zero bytes read?
   231 00005D47 0F846C050000        <1>     jz .badFmtErr
   232 00005D4D 3D40000000          <1>     cmp eax, imageDosHdr_size
   233 00005D52 0F826F030000        <1>     jb .loadCom
   234                              <1> 
   235 00005D58 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   236 00005D5D 740B                <1>     je .proceedEXE
   237 00005D5F 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   238 00005D64 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   239                              <1> .proceedEXE:
   240                              <1>     ;Now we need to read e_lfanew
   241 00005D6A 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   242 00005D6B 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   243 00005D6E 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   244 00005D71 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   245 00005D73 30C0                <1>     xor al, al  ;Set file pointer from start of file
   246 00005D75 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   247 00005D79 E8B1D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   248 00005D7E 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   249 00005D7F B918000000          <1>     mov ecx, imageFileHeader_size
   250 00005D84 E851050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   251 00005D89 85C0                <1>     test eax, eax   ;Were zero bytes read?
   252 00005D8B 0F8428050000        <1>     jz .badFmtErr
   253 00005D91 3D18000000          <1>     cmp eax, imageFileHeader_size
   254 00005D96 0F821D050000        <1>     jb .badFmtErr
   255                              <1>     ;So now rdx points to the imageFileHeader
   256 00005D9C 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   257 00005DA2 0F8511050000        <1>     jne .badFmtErr
   258 00005DA8 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   259 00005DAE 0F8505050000        <1>     jne .badFmtErr
   260                              <1>     ;Check the binary is executable
   261 00005DB4 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   262 00005DB8 66A90200            <1>     test ax, imageFileExecutable
   263 00005DBC 0F84F7040000        <1>     jz .badFmtErr
   264 00005DC2 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   265                              <1> 
   266 00005DC6 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   267 00005DCC 0F82E7040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   268                              <1>     ;Now save the number of sections in the the file
   269 00005DD2 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   270 00005DD6 85C0                <1>     test eax, eax   ;If this is 0, what?
   271 00005DD8 0F84DB040000        <1>     jz .badFmtErr
   272 00005DDE 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   273                              <1>     ;Now load Optional header, file ptr points to it so all good!
   274 00005DE2 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   275                              <1>     ;rdx points to exeHdrSpace
   276 00005DE7 E8EE040000          <1>     call .readDataFromHdl
   277 00005DEC 85C0                <1>     test eax, eax   ;Were zero bytes read?
   278 00005DEE 0F84C5040000        <1>     jz .badFmtErr
   279 00005DF4 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   280 00005DF9 0F82BA040000        <1>     jb .badFmtErr
   281                              <1>     ;Now File Ptr points to data dirs, not an issue
   282 00005DFF 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   283                              <1>     ;We load the program in, one section at a time, reading section headers in
   284                              <1>     ; one at a time to the section header internal buffer.
   285 00005E06 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   286 00005E0E 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   287 00005E10 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   288 00005E16 488B05(66050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   289 00005E1D 4885C0              <1>     test rax, rax
   290 00005E20 750A                <1>     jnz .notDefaultStackAlloc
   291 00005E22 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   291 00005E2B 00                  <1>
   292                              <1> .notDefaultStackAlloc:
   293 00005E2C 01C3                <1>     add ebx, eax    ;Add stack allocation
   294 00005E2E 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   295                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   296                              <1>     ; section aligned and so we will need to align before reading, to 
   297                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   298 00005E34 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   299 00005E3A 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   300 00005E3D 81C311000000        <1>     add ebx, 11h
   301 00005E43 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   302 00005E46 55                  <1>     push rbp
   303 00005E47 E8E5F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   304 00005E4C 5D                  <1>     pop rbp
   305 00005E4D 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   306 00005E53 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   307 00005E57 480500010000        <1>     add rax, psp_size
   308 00005E5D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   309                              <1>     ;Finally, just check that we have some code to execute. 
   310                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   311 00005E61 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   311 00005E69 0000                <1>
   312 00005E6B 0F8448040000        <1>     je .badFmtErr   ;If no bytes, exit error
   313 00005E71 EB0B                <1>     jmp short .exeProceed1
   314                              <1> .exeOvlySkipAlloc:
   315 00005E73 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   316 00005E77 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   317 00005E7A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   318                              <1> .exeProceed1:
   319                              <1> ;===========================================================================
   320                              <1>     ;The below blocks are being kept because they can be turned on later
   321                              <1>     ; to change this exe loader to force section alignment of the 
   322                              <1>     ; base load address. It appears there is no need to enforce that the 
   323                              <1>     ; base load address be section aligned, but individual sections need
   324                              <1>     ; to adhere to the section alignment requirements thereafter. 
   325                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   326                              <1>     ; first section gets places at the load address and not at some
   327                              <1>     ; offset from it (as is usually the case, offset 1000h).
   328                              <1> ;===========================================================================
   329                              <1>     ;=======================================================================
   330                              <1>     ;Now we align the progBase to full header size aligned to the next page
   331                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   332                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   333                              <1>     ;=======================================================================
   334                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   335                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   336                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   337                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   338                              <1>     ;push rax
   339                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   340                              <1>     ;dec ecx ;Turn into a mask
   341                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   342                              <1>     ;inc ecx
   343                              <1>     ;sub rcx, rax
   344                              <1>     ;pop rdi
   345                              <1>     ;xor eax, eax
   346                              <1>     ;rep stosb
   347                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   348                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   349                              <1> 
   350                              <1>     ;So now copy one section at a time, read section header in
   351                              <1>     ;File pointer points to the directory table, so skip that
   352 00005E7E 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   353                              <1>     ;Load however many directories we have into place
   354                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   355 00005E84 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   356 00005E87 31C9                <1>     xor ecx, ecx
   357 00005E89 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   358 00005E8D B001                <1>     mov al, 1   ;Move handle forwards from current position
   359 00005E8F E89BD7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   360                              <1>     ;eax has pointer location after adjustment
   361 00005E94 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   362                              <1>     ;File now points to start of Section headers. Read first header in.
   363                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   364 00005E97 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   365 00005E9B 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   366 00005E9F 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   367 00005EA1 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   368                              <1> .loadLp:
   369 00005EA5 51                  <1>     push rcx    ;Save # of segments left on stack
   370 00005EA6 57                  <1>     push rdi    ;Save the current buffer ptr here
   371 00005EA7 B928000000          <1>     mov ecx, imageSectionHdr_size
   372 00005EAC 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   373 00005EB3 E822040000          <1>     call .readDataFromHdl
   374 00005EB8 5F                  <1>     pop rdi
   375 00005EB9 59                  <1>     pop rcx
   376 00005EBA 85C0                <1>     test eax, eax
   377 00005EBC 0F84F7030000        <1>     jz .badFmtErr
   378 00005EC2 3D28000000          <1>     cmp eax, imageSectionHdr_size
   379 00005EC7 0F85EC030000        <1>     jne .badFmtErr
   380                              <1>     ;File ptr moved forwards to next section header
   381 00005ECD 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   382                              <1>     ;Section header read, now we load section into memory
   383                              <1>     ;Move file ptr to data location
   384 00005ED4 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   385 00005EDA 85D2                <1>     test edx, edx
   386 00005EDC 744B                <1>     jz short .skipRawPtrMove
   387 00005EDE 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   388 00005EE2 31C0                <1>     xor eax, eax    ;Seek from start of file
   389 00005EE4 51                  <1>     push rcx
   390 00005EE5 57                  <1>     push rdi
   391 00005EE6 E844D7FFFF          <1>     call lseekHdl
   392 00005EEB 5F                  <1>     pop rdi
   393 00005EEC 59                  <1>     pop rcx
   394                              <1>     ;Is this a overlay load?
   395 00005EED 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   396 00005EF5 7532                <1>     jne short .skipRawPtrMove
   397                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   398                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   399                              <1>     ;Is this is the first segment with data being read into memory?
   400 00005EF7 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   401 00005EFB 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   402 00005F03 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   403                              <1>     ;Now rebase the program to point the first byte of the first
   404                              <1>     ; section at the ProgBase.
   405 00005F05 51                  <1>     push rcx
   406 00005F06 57                  <1>     push rdi
   407 00005F07 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   408 00005F0B 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   409 00005F11 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   410 00005F14 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   411 00005F18 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   412 00005F1C 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   413 00005F20 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   414 00005F23 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   415 00005F27 5F                  <1>     pop rdi
   416 00005F28 59                  <1>     pop rcx
   417                              <1> .skipRawPtrMove:
   418 00005F29 51                  <1>     push rcx
   419 00005F2A 31FF                <1>     xor edi, edi
   420 00005F2C 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   421 00005F32 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   422                              <1>     ;If a section has a virtual address outside of the allocation arena
   423                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   424                              <1>     ; next section.
   425 00005F36 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   426 00005F3A 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   427 00005F3D 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   428 00005F3F 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   429 00005F46 31C9                <1>     xor ecx, ecx
   430 00005F48 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   431 00005F4B 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   432 00005F4F 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   433 00005F56 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   434 00005F59 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   435 00005F5C 7713                <1>     ja short .okToLoad
   436                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   437                              <1> 
   438                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   439 00005F5E F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   439 00005F66 0000                <1>
   440 00005F68 0F854B030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   441                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   442                              <1> 
   443                              <1>     ;Else, just skip this section, goto next section
   444 00005F6E 59                  <1>     pop rcx
   445 00005F6F EB3F                <1>     jmp short .gotoNextSection
   446                              <1> .okToLoad:
   447 00005F71 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   448 00005F77 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   449 00005F7A 57                  <1>     push rdi    ;Save section in memory locally
   450 00005F7B E85A030000          <1>     call .readDataFromHdl
   451 00005F80 5F                  <1>     pop rdi
   452 00005F81 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   453 00005F82 0F8231030000        <1>     jc .badFmtErr
   454                              <1>     ;Don't check for a zero section read as empty sections may be present!
   455 00005F88 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   456 00005F8E 0F8525030000        <1>     jne .badFmtErr
   457                              <1>     ;Data read ok, now fill in any zeros needed
   458 00005F94 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   459                              <1> 
   460 00005F97 51                  <1>     push rcx
   461                              <1>     ;Here do section padding
   462 00005F98 4889F8              <1>     mov rax, rdi    ;Get the current address
   463 00005F9B 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   464 00005FA1 FFC9                <1>     dec ecx ;Turn into a mask
   465 00005FA3 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   466 00005FA6 FFC1                <1>     inc ecx
   467 00005FA8 4829C1              <1>     sub rcx, rax
   468 00005FAB 31C0                <1>     xor eax, eax
   469 00005FAD F3AA                <1>     rep stosb
   470 00005FAF 59                  <1>     pop rcx
   471                              <1> .gotoNextSection:
   472 00005FB0 FFC9                <1>     dec ecx ;Decrement our section counter
   473 00005FB2 7419                <1>     jz short .doExeFixups
   474                              <1>     ;Read next section header in here
   475 00005FB4 51                  <1>     push rcx
   476 00005FB5 57                  <1>     push rdi
   477 00005FB6 30C0                <1>     xor al, al  ;Move rel start of file
   478 00005FB8 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   479 00005FBB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   480 00005FBF 31C9                <1>     xor ecx, ecx
   481 00005FC1 E869D6FFFF          <1>     call lseekHdl
   482 00005FC6 5F                  <1>     pop rdi
   483 00005FC7 59                  <1>     pop rcx
   484 00005FC8 E9D8FEFFFF          <1>     jmp .loadLp
   485                              <1> .doExeFixups:
   486                              <1> ;Here we fixup addresses if needed
   487                              <1> ;If the program is loaded at its desired location never need to relocate.
   488                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   489                              <1> ;   If the program has had it's .reloc section stripped by the linker
   490                              <1> ;       or has no .reloc directory, we fail
   491                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   492                              <1> ;       relocations anyway.
   493                              <1> 
   494                              <1> ;If program base = desired load, skip relocs
   495 00005FCD 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   496 00005FD1 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   497 00005FD8 0F84CA000000        <1>     je .exeComplete
   498                              <1> ;If program has had relocs stripped, fail
   499 00005FDE 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   500 00005FE2 66A90100            <1>     test ax, imageFileRelocsStripped
   501 00005FE6 0F85CD020000        <1>     jnz .badFmtErr
   502                              <1> ;If program has no .reloc section, fail
   503 00005FEC 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   504 00005FF2 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   505 00005FF8 0F82BB020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   506                              <1> ;Now we get the reloc section
   507 00005FFE 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   508 00006001 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   509                              <1>     ;eax now points to position in file of directory entry for reloc
   510 00006007 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   511 0000600B 31C0                <1>     xor eax, eax
   512 0000600D E81DD6FFFF          <1>     call lseekHdl   ;Move handle there in file
   513 00006012 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   514 00006015 B908000000          <1>     mov ecx, imageDataDirectory_size
   515                              <1>     ;Read 8 bytes into sectHdr space
   516 0000601A 488D15(9E050000)    <1>     lea rdx, sectHdr
   517 00006021 E8B4020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   518 00006026 85C0                <1>     test eax, eax
   519 00006028 0F848B020000        <1>     jz .badFmtErr
   520 0000602E 39C8                <1>     cmp eax, ecx
   521 00006030 0F8583020000        <1>     jne .badFmtErr
   522                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   523 00006036 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   524 0000603C 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   525 0000603E 7468                <1>     jz .exeComplete   ;... including if overlay
   526 00006040 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   527                              <1>     ;Now rsi points to where in memory the relocation data table is
   528                              <1>     ;Now compute the relocation factor =
   529                              <1>     ;   Difference from the load address and prefered
   530 00006044 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   531 00006048 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   532 0000604F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   533 00006057 750F                <1>     jne short .notOverlayReloc
   534                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   535                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   536                              <1>     ;This should be the same as ProgBase anyway for overlays.
   537 00006059 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   538 0000605D 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   539                              <1>     ;Store this as the overlay program base
   540 00006064 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   541                              <1> .notOverlayReloc:
   542 00006068 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   543                              <1>     ;rsi points to relocation data table in memory
   544 0000606B 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   545 00006071 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   546 00006073 7433                <1>     jz .exeComplete
   547                              <1>     ;rsi points to the first base relocation block. The relocations begin
   548                              <1>     ; after the first block
   549                              <1>     ;ecx has the number of base relocation blocks to process.
   550                              <1> .nextBlock:
   551 00006075 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   552 00006076 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   553 00006078 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   554 0000607C 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   555 0000607F 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   556 00006082 67E31E              <1>     jecxz .blockDone    
   557 00006085 81E908000000        <1>     sub ecx, 8
   558 0000608B 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   559 00006092 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   560                              <1> .blockNotDone:
   561 00006094 66AD                <1>     lodsw   ;Get the next page offset word
   562 00006096 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   563                              <1>     ;rdi points to base, rax give offset into 4Kb page
   564 0000609B 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   565 0000609F FFC9                <1>     dec ecx
   566 000060A1 75F1                <1>     jnz .blockNotDone
   567                              <1> .blockDone:
   568 000060A3 59                  <1>     pop rcx
   569 000060A4 FFC9                <1>     dec ecx
   570 000060A6 75CD                <1>     jnz .nextBlock
   571                              <1> .exeComplete:
   572 000060A8 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   573                              <1>     ;Now get EP relative to the (rescaled) load address.
   574 000060AE 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   575 000060B2 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   576 000060B6 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   577 000060BC 0F82F7010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   578 000060C2 E9CC000000          <1>     jmp .buildChildPSP
   579                              <1> .loadCom:
   580                              <1>     ;File is open here, so just read the file into memory. 
   581                              <1>     ;The file cannot exceed 64Kb in size.
   582                              <1>     ;Allocate 64Kb of memory, or as much as we can
   583 000060C7 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   584 000060CF 745C                <1>     je .comOverlay
   585 000060D1 BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   586 000060D6 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   587 000060D9 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   588 000060DC 55                  <1>     push rbp
   589 000060DD E84FF3FFFF          <1>     call allocateMemory
   590 000060E2 5D                  <1>     pop rbp
   591 000060E3 7355                <1>     jnc .comallocOk
   592 000060E5 3C08                <1>     cmp al, errNoMem
   593 000060E7 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   594                              <1>     ;rbx should have the amount available in paragraphs
   595 000060ED 09DB                <1>     or ebx, ebx ;Clear the upper dword
   596 000060EF 48C1E304            <1>     shl rbx, 4
   597                              <1>     ;We check if this value is psp_size more than filesize
   598 000060F3 53                  <1>     push rbx    ;Save new minimum size
   599 000060F4 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   600 000060F9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   601 000060FD 31D2                <1>     xor edx, edx    ;Go to end of file
   602 000060FF E82BD5FFFF          <1>     call lseekHdl
   603                              <1>     ;eax has file size
   604 00006104 5B                  <1>     pop rbx ;Get back max alloc size
   605 00006105 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   606 00006107 29C2                <1>     sub edx, eax
   607 00006109 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   608 0000610F 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   609 00006115 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   610 00006118 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   611 0000611B 55                  <1>     push rbp
   612 0000611C E810F3FFFF          <1>     call allocateMemory
   613 00006121 5D                  <1>     pop rbp
   614 00006122 0F8296010000        <1>     jc .cleanAndFail
   615 00006128 E90D000000          <1>     jmp .comallocOk
   616                              <1> .comOverlay:
   617                              <1>     ;Here we simply read the file into the buffer provided
   618 0000612D 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   619 00006131 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   620 00006134 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   621 00006138 EB0A                <1>     jmp short .comRead
   622                              <1> .comallocOk:
   623                              <1>     ;rax should point to the first byte
   624 0000613A 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   625 0000613E 480500010000        <1>     add rax, psp_size
   626                              <1> .comRead:
   627 00006144 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   628                              <1> 
   629 00006148 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   630 0000614D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   631 00006151 31D2                <1>     xor edx, edx    ;Go to end of file
   632 00006153 E8D7D4FFFF          <1>     call lseekHdl
   633                              <1>     ;eax has filesize now
   634 00006158 50                  <1>     push rax    ;Save filesize
   635 00006159 31C0                <1>     xor eax, eax    ;Reposition to start of file
   636 0000615B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   637 0000615F 31D2                <1>     xor edx, edx    ;Go to start of file
   638 00006161 E8C9D4FFFF          <1>     call lseekHdl
   639 00006166 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   640 00006167 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   641 0000616F 7411                <1>     je .comOverlay2
   642                              <1>     ;Now we check if the space we have available is sufficient to load
   643                              <1>     ; the program. Skipped if an overlay being loaded
   644                              <1>     ;ecx = # File size
   645 00006171 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   646 00006174 81EA00010000        <1>     sub edx, psp_size
   647 0000617A 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   648 0000617C 0F8277FBFFFF        <1>     jb .insufficientMemory
   649                              <1> .comOverlay2:
   650 00006182 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   651 00006186 E84F010000          <1>     call .readDataFromHdl   ;Read from the file handle
   652 0000618B 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   653 0000618F 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   654                              <1> .buildChildPSP:
   655                              <1>     ;We can close handle now
   656 00006193 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   657 00006197 55                  <1>     push rbp
   658 00006198 E8A8D3FFFF          <1>     call closeFileHdl   ;Close the file
   659 0000619D 5D                  <1>     pop rbp
   660                              <1> 
   661                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   662 0000619E 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   663 000061A6 0F84EA000000        <1>     je .overlayExit
   664                              <1>     ;Now build the PSP
   665 000061AC 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   666 000061AF 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   667 000061B3 52                  <1>     push rdx
   668 000061B4 55                  <1>     push rbp
   669 000061B5 E8D4F7FFFF          <1>     call createPSP
   670 000061BA 5D                  <1>     pop rbp
   671 000061BB 5A                  <1>     pop rdx
   672                              <1> 
   673                              <1>     ;Now copy the environment block over if rax != 0
   674 000061BC 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   675 000061C0 4885DB              <1>     test rbx, rbx
   676 000061C3 7404                <1>     jz short .skipEnvCopy
   677 000061C5 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   678                              <1> .skipEnvCopy:
   679                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   680 000061C9 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   681 000061D0 E8FB120000          <1>     call dosCrit1Enter
   682 000061D5 E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   683                              <1> 
   684 000061DA 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   685 000061E1 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   686                              <1> 
   687                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   688                              <1>     ; and set FS to point to the PSP
   689 000061E8 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   690                              <1> 
   691 000061EC 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   692 000061F0 B925000000          <1>     mov ecx, fcb_size
   693 000061F5 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   694 000061F9 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   695 000061FB F3A4                <1>     rep movsb   ;Copy fcb 1 over
   696 000061FD 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   697 00006201 B925000000          <1>     mov ecx, fcb_size
   698 00006206 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   699 0000620A 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   700 0000620C F3A4                <1>     rep movsb   ;Copy fcb 2 over
   701 0000620E 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   702 00006212 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   703 00006219 B980000000          <1>     mov ecx, 80h
   704 0000621E F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   705                              <1> 
   706 00006220 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   707 00006222 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   708                              <1> 
   709                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   710 00006225 88D8                <1>     mov al, bl
   711 00006227 30DB                <1>     xor bl, bl
   712 00006229 E8420E0000          <1>     call getCDSNotJoin
   713 0000622E 7302                <1>     jnc .drive1Ok
   714 00006230 B3FF                <1>     mov bl, -1
   715                              <1> .drive1Ok:
   716 00006232 88F8                <1>     mov al, bh
   717 00006234 30FF                <1>     xor bh, bh
   718 00006236 E8350E0000          <1>     call getCDSNotJoin
   719 0000623B 7302                <1>     jnc .drive2Ok
   720 0000623D B7FF                <1>     mov bh, -1
   721                              <1> .drive2Ok:
   722                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   723                              <1>     ;rdi has pointer to psp
   724 0000623F 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   725                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   726 00006242 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   727 00006247 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   727 00006250 FF                  <1>
   728 00006251 4821C6              <1>     and rsi, rax    ;To align downwards
   729                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   730                              <1>     ;That is the job of the runtime to handle.
   731                              <1> ;Registers carrying data at this point:
   732                              <1> ;bx = FCB drive statuses
   733                              <1> ;rsi = Stack Base
   734                              <1> ;rbp = execFrame
   735 00006254 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   736 00006258 750B                <1>     jne short .noBg
   737                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   738 0000625A 56                  <1>     push rsi
   739 0000625B E8EC0D0000          <1>     call getUserRegs
   740 00006260 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   741 00006264 5E                  <1>     pop rsi
   742                              <1> .noBg:
   743 00006265 FF15(9F000000)      <1>     call qword [launchTask]
   744 0000626B 7251                <1>     jc short .cleanAndFail
   745                              <1> ;Final step: Transfer control
   746 0000626D 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   747 00006271 742C                <1>     je .xfrProgram
   748 00006273 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   749 00006277 741D                <1>     je .overlayExit ;Skip the below for background tasks
   750 00006279 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   751 0000627D 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   752 00006281 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   753 00006285 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   754 00006288 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   755 0000628B 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   756 00006292 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   757                              <1> .overlayExit:
   758 00006296 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   759 00006299 5D                  <1>     pop rbp ;Point rsp to the return address
   760 0000629A E96E120000          <1>     jmp extGoodExit ;And return!
   761                              <1> .xfrProgram:
   762 0000629F FA                  <1>     cli
   763 000062A0 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   764 000062A3 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   765 000062AA FB                  <1>     sti
   766                              <1> 
   767 000062AB 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   768 000062AC FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   769 000062AF 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   770 000062B2 4989F9              <1>     mov r9, rdi
   771 000062B5 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   772                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000062B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> ;r8 is guaranteed to have a copy of the PSP.
   774                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   775                              <1> ;Everything else is optional and potentially changable at a later stage
   776                              <1> 
   777                              <1> .badFmtErr:
   778 000062B9 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   779                              <1> .cleanAndFail:
   780                              <1> ;Close the open file and any open resources and fail
   781 000062BE E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   782 000062C3 E812120000          <1>     call dosCrit1Exit
   783 000062C8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   784 000062CC 50                  <1>     push rax    ;Save error code
   785 000062CD 55                  <1>     push rbp
   786 000062CE E872D2FFFF          <1>     call closeFileHdl
   787 000062D3 5D                  <1>     pop rbp
   788 000062D4 58                  <1>     pop rax
   789 000062D5 E967F9FFFF          <1>     jmp .badExit
   790                              <1> 
   791                              <1> .readDataFromHdl:
   792                              <1> ;Input: ecx = Number of bytes to transfer
   793                              <1> ;       rdx = Ptr to the buffer to use
   794 000062DA 52                  <1>     push rdx
   795 000062DB E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   796 000062E0 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   797 000062E4 55                  <1>     push rbp
   798 000062E5 E899D2FFFF          <1>     call readFileHdl
   799 000062EA 5D                  <1>     pop rbp
   800 000062EB E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   801 000062F0 5A                  <1>     pop rdx
   802                              <1>     return
    13                              <2> %%_ret:
    14 000062F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> .clearArenaOwner:
   804 000062F2 53                  <1>     push rbx
   805 000062F3 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   806 000062F5 E8D6110000          <1>     call dosCrit1Enter
   807 000062FA E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   808 000062FF 5B                  <1>     pop rbx
   809                              <1>     return
    13                              <2> %%_ret:
    14 00006300 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> .setPSPArenaOwner:
   811                              <1> ;Sets the current PSP as the arena owner
   812 00006301 53                  <1>     push rbx
   813 00006302 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   814 00006309 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   815 0000630E E8C7110000          <1>     call dosCrit1Exit
   816 00006313 5B                  <1>     pop rbx
   817                              <1>     return
    13                              <2> %%_ret:
    14 00006314 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .setProgOrEnvArenaOwnerToRBX:
   819                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   820 00006315 9C                  <1>     pushfq
   821 00006316 50                  <1>     push rax
   822                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   823                              <1>     ;This is because they are set up at separate points in the routine!
   824 00006317 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   825 0000631B E80C000000          <1>     call .writeArenaHeaderOwner
   826 00006320 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   827 00006324 E803000000          <1>     call .writeArenaHeaderOwner
   828 00006329 58                  <1>     pop rax
   829 0000632A 9D                  <1>     popfq
   830                              <1>     return
    13                              <2> %%_ret:
    14 0000632B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .writeArenaHeaderOwner:
   832                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   833                              <1> ;       rbx = Owner ID
   834 0000632C 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   835                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000632F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   836 00006331 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   837 00006337 48895801            <1>     mov qword [rax + 1], rbx
   838                              <1>     return
    13                              <2> %%_ret:
    14 0000633B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    50                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 0000633C 3C01                <1>     cmp al, 01
    12 0000633E 740B                <1>     je .setSC
    13 00006340 7210                <1>     jb .getSC
    14 00006342 3C03                <1>     cmp al, 03
    15 00006344 7214                <1>     jb .getDev
    16 00006346 741C                <1>     je .setDev
    17 00006348 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 0000634A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 0000634B 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00006351 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00006352 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006358 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 0000635A B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 0000635C E8EB0C0000          <1>     call getUserRegs
    29 00006361 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006365 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006368 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 0000636B 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 0000636D 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006370 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00006372 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006377 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 0000637E 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006380 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006382 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006384 488D35759EFFFF      <1>     lea rsi, ctryTbl
    65 0000638B B926000000          <1>     mov ecx, countryStruc_size
    66 00006390 F3A4                <1>     rep movsb
    67 00006392 0FB71D639EFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006399 E8AE0C0000          <1>     call getUserRegs
    70 0000639E 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 000063A2 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 000063A4 E964110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 000063A9 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 000063AB E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000063B0 0F8265110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000063B6 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000063B8 75E8                <1>     jnz .exitNoCountryCode 
    81 000063BA 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000063BC 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000063BE 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000063C0 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000063C2 663B1D339EFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000063C9 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 000063CB 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000063CD 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000063CF B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000063D4 CD2F                <1>     int 2fh
   105 000063D6 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000063D8 751F                <1>     jne .errNotInstalled
   107 000063DA 488D35A89DFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000063E1 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000063E6 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000063EB 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000063ED 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000063F0 CD2F                <1>     int 2fh
   113 000063F2 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000063F4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000063F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 000063F7 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 000063F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 000063F9 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 000063FB EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 000063FD 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 00006403 7250                <1>     jb .invFuncExit
   143 00006405 488D357D9DFFFF      <1>     lea rsi, dosNLSPtr
   144 0000640C 6681FAFFFF          <1>     cmp dx, -1
   145 00006411 660F4415E39DFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006419 6681FBFFFF          <1>     cmp bx, -1
   147 0000641E 660F441DD89DFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 00006426 663B15CF9DFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 0000642D 7569                <1>     jne .nlsReq
   150 0000642F 663B1DC89DFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 00006436 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 00006438 488D35969DFFFF      <1>     lea rsi, charTableArray
   155 0000643F 0FB72D8D9DFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 00006446 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 00006448 7515                <1>     jne .tblFound
   159 0000644A 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 00006451 FFCD                <1>     dec ebp
   161 00006453 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 00006455 B801000000          <1>     mov eax, 1
   165 0000645A E9BC100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 0000645F A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 00006460 3C01                <1>     cmp al, 1
   169 00006462 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 00006464 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 00006469 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 0000646E F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 00006470 E8D70B0000          <1>     call getUserRegs
   177 00006475 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 00006478 89D8                <1>     mov eax, ebx    
   181 0000647A E98E100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 0000647F 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 00006485 31C0                <1>     xor eax, eax    ;Clear eax
   186 00006487 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 00006489 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 0000648B 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 0000648E 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006490 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006492 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 00006496 EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 00006498 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 0000649B B800140000          <1>     mov eax, 1400h  ;Install check!
   199 000064A0 CD2F                <1>     int 2fh
   200 000064A2 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 000064A4 75AF                <1>     jne .invFuncExit    
   202 000064A6 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 000064AB CD2F                <1>     int 2fh
   204 000064AD 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 000064AF 0F8566100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000064B5 0FB705159DFFFF      <1>     movzx eax, word [defaultCP]
   210 000064BC E94C100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000064C1 3C01                <1>     cmp al, 1
   220 000064C3 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000064C5 E8820B0000          <1>     call getUserRegs
   223 000064CA 0FB71D2D9DFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000064D1 0FB715F99CFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 000064D8 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 000064DB 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 000064DE E92A100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 000064E3 B801000000          <1>     mov eax, errInvFnc
   230 000064E8 E92E100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 000064ED 3C02                <1>     cmp al, 2
   233 000064EF 75F2                <1>     jne .exitBadFunc
   234 000064F1 0FB715999CFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 000064F8 B800140000          <1>     mov eax, 1400h
   236 000064FD CD2F                <1>     int 2Fh
   237 000064FF 3CFF                <1>     cmp al, -1
   238 00006501 75E0                <1>     jne .exitBadFunc
   239 00006503 488D357F9CFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 0000650A B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 0000650F CD2F                <1>     int 2Fh
   242 00006511 84C0                <1>     test al, al
   243 00006513 0F84F40F0000        <1>     jz extGoodExit
   244 00006519 3C41                <1>     cmp al, errNLSAcDen
   245 0000651B 0F85FA0F0000        <1>     jne extErrExit
   246 00006521 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 00006523 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 0000652A C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 00006531 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 00006538 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 0000653F E9E40F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 00006544 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00006546 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00006548 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00006549 53                  <1>     push rbx
   259 0000654A 488D1DD79CFFFF      <1>     lea rbx, ucTbl
   260 00006551 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 00006553 D7                  <1>     xlatb
   262 00006554 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 00006555 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 00006556 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006558 7510                <1>     jne .doReq
    10 0000655A 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 0000655B 488B05(E3040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006562 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006569 58                  <1>     pop rax
    15                              <1> .doReq:
    16 0000656A E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 0000656F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006570 50                  <1>     push rax    ;Wanna preserve ax
    24 00006571 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006576 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006579 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 0000657B 53                  <1>     push rbx
    28 0000657C 488D1DE69AFFFF      <1>     lea rbx, hardXlatTbl
    29 00006583 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006584 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006585 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 0000658C 58                  <1>     pop rax
    34 0000658D 56                  <1>     push rsi
    35 0000658E 488D35809BFFFF      <1>     lea rsi, extErrTbl
    36 00006595 E8DA0F0000          <1>     call setErrorVars
    37 0000659A 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 0000659B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000659C 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 0000659F 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 000065A5 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 000065AC 56                  <1>     push rsi
    50 000065AD 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 000065B1 E87C000000          <1>     call hardErrorCommon
    52 000065B6 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000065B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000065B8 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000065BA 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000065BD 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000065BF 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000065C2 57                  <1>     push rdi        ;Save the buffer pointer
    68 000065C3 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000065C6 81FF00000000        <1>     cmp edi, drvWPErr
    70 000065CC 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000065CE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000065D1 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 000065D7 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 000065DD 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 000065E0 F6C301              <1>     test bl, dosBuffer
    79 000065E3 7505                <1>     jnz .df0
    80 000065E5 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 000065E8 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 000065EA F6C302              <1>     test bl, fatBuffer
    84 000065ED 750C                <1>     jnz .df1
    85 000065EF 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 000065F2 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Invalidate the count!
    87 000065F9 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 000065FB F6C304              <1>     test bl, dirBuffer
    90 000065FE 7505                <1>     jnz .df2
    91 00006600 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 00006603 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 00006605 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006608 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 0000660F 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006615 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 0000661B E802000000          <1>     call diskDevErrBitfield
   101 00006620 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006621 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006622 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006625 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 0000662C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006630 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006632 E839FFFFFF          <1>     call xlatHardError
   117 00006637 50                  <1>     push rax
   118 00006638 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 0000663D 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 0000663F 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006642 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006643 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 0000664A 7204                <1>     jb .noIntError  ;If not 0, enter
   153 0000664C B003                <1>     mov al, critFail    ;Else, return Fail always
   154 0000664E EB76                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 00006650 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 00006657 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 0000665F FF                  <1>
   158 00006660 740C                <1>     je .notOpeningFile
   159 00006662 57                  <1>     push rdi
   160 00006663 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 0000666A C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 0000666D 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 0000666E FA                  <1>     cli                         
   165 0000666F FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   166 00006675 FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   167 0000667B 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   168 00006682 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   169 00006684 CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   170 00006686 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   171 0000668D 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   172 00006694 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   173 0000669B FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   174 000066A1 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   175 000066A8 FB                  <1>     sti                         
   176                              <1>     ;Now we check that the response given was allowed, and translate if needed
   177                              <1> .checkResponse:
   178 000066A9 3C00                <1>     cmp al, critIgnore
   179 000066AB 743F                <1>     je .checkIgnore
   180 000066AD 3C01                <1>     cmp al, critRetry
   181 000066AF 7446                <1>     je .checkRetry
   182 000066B1 3C03                <1>     cmp al, critFail
   183 000066B3 754D                <1>     jne .abort   ;Must be abort
   184                              <1> .setFail:   ;Here is for fail
   185 000066B5 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   186 000066B7 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187 000066BD F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   188 000066C4 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   189                              <1> .exit:
   190 000066C6 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   191 000066CD 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   192                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000066D4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000066D6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   193                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   194 000066D7 50                  <1>     push rax
   195 000066D8 57                  <1>     push rdi
   196 000066D9 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   197 000066E0 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   198 000066E7 8807                <1>     mov byte [rdi], al
   199 000066E9 5F                  <1>     pop rdi
   200 000066EA 58                  <1>     pop rax
   201                              <1>     return
    13                              <2> %%_ret:
    14 000066EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> .checkIgnore:
   203 000066EC F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   204 000066F3 75D1                <1>     jnz .exit
   205 000066F5 EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   206                              <1> .checkRetry:
   207 000066F7 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   208 000066FE 75C6                <1>     jnz .exit   
   209 00006700 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   210                              <1> .abort:
   211                              <1> ;Prepare to abort. We abort from within!
   212 00006702 E893C2FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   213                              <1> ;If a network request requests abort, translate to fail
   214 00006707 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   215 0000670E 7509                <1>     jne .kill   ;If this is zero, local invokation
   216 00006710 C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   217 00006717 EBAD                <1>     jmp short .exit
   218                              <1> .kill:
   219 00006719 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   220 0000671B C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   221 00006722 C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;Clear special vol search byte if set
   222                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   223                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   224                              <1>     ;This only affects programs which are their own parents as when aborting
   225                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   226                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   227                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   228                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   229                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   230                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   231                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   232                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   233                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   234                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   235                              <1>     ; the following prevents a GP. Fault.
   236 00006729 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   237 00006730 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   238 00006737 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   239 0000673B E97CF3FFFF          <1>     jmp terminateClean.altEP
   240                              <1> 
   241                              <1> ctrlBreakHdlr:
   242 00006740 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   243 00006742 E881C1FFFF          <1>     call printCaretASCII
   244 00006747 E8ACC1FFFF          <1>     call printCRLF
   245                              <1>     ;Reset the console back to 0
   246 0000674C E849C2FFFF          <1>     call vConRetDriver
   247                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   248                              <1> .exceptEP:
   249                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   250                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   251                              <1> ;   interrupted DOS call is restarted
   252 00006751 FA                  <1> 	cli
   253 00006752 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   254 00006759 E8440D0000          <1> 	call dosPopRegs ;Get user state back
   255 0000675E C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   256 00006765 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   257 0000676C 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
   258 00006773 F8                  <1>     clc
   259 00006774 CD23                <1>     int 23h ;Call critical error handler
   260 00006776 FA                  <1>     cli ;Clear interrupts again
   261 00006777 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   262 0000677E 9C                  <1>     pushfq  ;Get flags in rax
   263 0000677F 58                  <1>     pop rax 
   264 00006780 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   265 00006787 750C                <1>     jne .checkCF
   266                              <1> .returnToDOS:
   267 00006789 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   268 00006790 E9B30B0000          <1>     jmp functionDispatch    ;Goto int 21h
   269                              <1> .checkCF:
   270 00006795 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   271 0000679C A801                <1>     test al, 1  ;CF set?
   272 0000679E 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   273 000067A0 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   274 000067A5 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   275 000067AC E9970B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
   276                              <1> 
   277                              <1> ;CPU Exception handlers
   278                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   279                              <1> ; CTRL+C exit.
   280                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   281                              <1> ; system.
   282                              <1> ; Also halt if the application is it's own parent.
   283                              <1> ;An application should hook these interupts if they wish to not 
   284                              <1> ; CTRL+C exit, and instead return to DOS.
   285                              <1> i0:
   286 000067B1 31C0                <1>     xor eax, eax
   287 000067B3 E9AB000000          <1>     jmp cpu_2args
   288                              <1> i1:
   289 000067B8 B801000000          <1>     mov eax, 1
   290 000067BD E9A1000000          <1>     jmp cpu_2args
   291                              <1> i2:
   292 000067C2 B802000000          <1>     mov eax, 2
   293 000067C7 E997000000          <1>     jmp cpu_2args
   294                              <1> i3:
   295 000067CC B803000000          <1>     mov eax, 3
   296 000067D1 E98D000000          <1>     jmp cpu_2args
   297                              <1> i4:
   298 000067D6 B804000000          <1>     mov eax, 4
   299 000067DB E983000000          <1>     jmp cpu_2args
   300                              <1> i5:
   301 000067E0 B805000000          <1>     mov eax, 5
   302 000067E5 EB7C                <1>     jmp short cpu_2args
   303                              <1> i6:
   304 000067E7 B806000000          <1>     mov eax, 6
   305 000067EC EB75                <1>     jmp short cpu_2args
   306                              <1> i7:
   307 000067EE B807000000          <1>     mov eax, 7
   308 000067F3 EB6E                <1>     jmp short cpu_2args
   309                              <1> i8:
   310 000067F5 B808000000          <1>     mov eax, 8
   311 000067FA EB60                <1>     jmp short cpu_3args
   312                              <1> i9:
   313 000067FC B809000000          <1>     mov eax, 9
   314 00006801 EB60                <1>     jmp short cpu_2args
   315                              <1> i10:
   316 00006803 B80A000000          <1>     mov eax, 0Ah
   317 00006808 EB52                <1>     jmp short cpu_3args
   318                              <1> i11:
   319 0000680A B80B000000          <1>     mov eax, 0Bh
   320 0000680F EB4B                <1>     jmp short cpu_3args
   321                              <1> i12:
   322 00006811 B80C000000          <1>     mov eax, 0Ch
   323 00006816 EB44                <1>     jmp short cpu_3args
   324                              <1> i13:
   325 00006818 B80D000000          <1>     mov eax, 0Dh
   326 0000681D EB3D                <1>     jmp short cpu_3args
   327                              <1> i14:
   328 0000681F B80E000000          <1>     mov eax, 0Eh
   329 00006824 EB2F                <1>     jmp short cpu_4args
   330                              <1> i15:
   331 00006826 B80F000000          <1>     mov eax, 0Fh
   332 0000682B EB36                <1>     jmp short cpu_2args
   333                              <1> i16:
   334 0000682D B810000000          <1>     mov eax, 10h
   335 00006832 EB2F                <1>     jmp short cpu_2args
   336                              <1> i17:
   337 00006834 B811000000          <1>     mov eax, 11h
   338 00006839 EB21                <1>     jmp short cpu_3args
   339                              <1> i18:
   340 0000683B B812000000          <1>     mov eax, 12h
   341 00006840 EB21                <1>     jmp short cpu_2args
   342                              <1> i19:
   343 00006842 B813000000          <1>     mov eax, 13h
   344 00006847 EB1A                <1>     jmp short cpu_2args
   345                              <1> i20:
   346 00006849 B814000000          <1>     mov eax, 14h
   347 0000684E EB13                <1>     jmp short cpu_2args
   348                              <1> i21:
   349 00006850 B815000000          <1>     mov eax, 15h
   350                              <1> cpu_4args:
   351 00006855 B903000000          <1>     mov ecx, 3
   352 0000685A EB0C                <1>     jmp short cpu_exception
   353                              <1> cpu_3args:
   354 0000685C B902000000          <1>     mov ecx, 2
   355 00006861 EB05                <1>     jmp short cpu_exception
   356                              <1> cpu_2args:
   357 00006863 B901000000          <1>     mov ecx, 1
   358                              <1> cpu_exception:
   359                              <1> ;Enter with:
   360                              <1> ; eax = Exception number in binary
   361                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   362 00006868 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   363 0000686F BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   364 00006874 E8E5010000          <1>     call .writeExceptionMessage
   365                              <1> 
   366 00006879 C605(91070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
   367 00006880 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
   368 00006887 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
   369 00006889 3D02000000          <1>     cmp eax, 2              ;NMI?
   370 0000688E 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
   371                              <1> 
   372 00006890 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
   373 00006897 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
   374 0000689B 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
   375                              <1> 
   376 0000689D 488D352B020000      <1>     lea rsi, .fatal1
   377 000068A4 BBC1000000          <1>     mov ebx, fatal1L
   378 000068A9 E8B0010000          <1>     call .writeExceptionMessage
   379 000068AE EB18                <1>     jmp short .introEnd
   380                              <1> .introStop:
   381 000068B0 C605(91070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   382 000068B7 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   383 000068BE BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   384 000068C3 E896010000          <1>     call .writeExceptionMessage
   385                              <1> .introEnd:
   386 000068C8 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   387 000068CF E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   388 000068D4 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   389 000068DB BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   390 000068E0 E879010000          <1>     call .writeExceptionMessage
   391                              <1> 
   392 000068E5 488D35A4020000      <1>     lea rsi, .fatal2
   393 000068EC BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   394 000068F1 E868010000          <1>     call .writeExceptionMessage
   395                              <1> 
   396 000068F6 80F901              <1>     cmp cl, 1
   397 000068F9 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   398                              <1> .cpurollprint:
   399 000068FF 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   400 00006906 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   401                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   402 0000690A B108                <1>     mov cl, 8    ;8 bytes
   403                              <1> .cpurollprint1:
   404 0000690C 48C1C208            <1>     rol rdx, 8
   405 00006910 88D0                <1>     mov al, dl
   406 00006912 52                  <1>     push rdx
   407 00006913 E814010000          <1>     call .printbyte
   408 00006918 5A                  <1>     pop rdx
   409 00006919 FEC9                <1>     dec cl
   410 0000691B 75EF                <1>     jnz .cpurollprint1
   411                              <1> 
   412 0000691D BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   413 00006922 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   414 00006929 E830010000          <1>     call .writeExceptionMessage
   415                              <1> 
   416 0000692E BB03000000          <1>     mov ebx, crlfL
   417 00006933 488D3572020000      <1>     lea rsi, .crlf
   418 0000693A E81F010000          <1>     call .writeExceptionMessage    
   419                              <1> 
   420 0000693F F605(91070000)FF    <1>     test byte [haltDOS], -1
   421 00006946 7534                <1>     jnz .fatalStop
   422 00006948 E8FC000000          <1>     call .readInputChar
   423                              <1>     ;Set error code to General Failure
   424 0000694D 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   424 00006955 00                  <1>
   425 00006956 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   426 0000695D C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   427 00006964 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   428 0000696B B8FF4C0000          <1>     mov eax, 4cFFh
   429 00006970 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   430                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   431                              <1>     ; setup as above, chances are it was a CPU error
   432 00006977 E9CC090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   433                              <1> .fatalStop:
   434                              <1> ;This is called if inDOS > 1 or NMI occured
   435                              <1> ;Freezes the machine
   436 0000697C B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   437 00006981 CD2A                <1>     int 2Ah
   438 00006983 E8480B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   439 00006988 E8570B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   440 0000698D FA                  <1>     cli                 ;Halt all interrupts
   441                              <1> .fatalLp:
   442 0000698E F390                <1>     pause
   443 00006990 EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   444                              <1> .cpuextendederror:
   445 00006992 5A                  <1>     pop rdx
   446 00006993 48FFC9              <1>     dec rcx
   447 00006996 51                  <1>     push rcx
   448 00006997 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   449 0000699E B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   450 000069A0 86D6                <1>     xchg dl, dh   
   451                              <1> .pr1:
   452 000069A2 88D0                <1>     mov al, dl
   453 000069A4 52                  <1>     push rdx
   454 000069A5 E882000000          <1>     call .printbyte
   455 000069AA 5A                  <1>     pop rdx
   456 000069AB C1CA08              <1>     ror edx, 8    ;Print just dx for now
   457 000069AE FEC9                <1>     dec cl
   458 000069B0 75F0                <1>     jnz .pr1
   459                              <1> 
   460 000069B2 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   461 000069B9 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   462 000069BE E89B000000          <1>     call .writeExceptionMessage
   463                              <1> 
   464 000069C3 488D35C6010000      <1>     lea rsi, .fatal2
   465 000069CA BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   466 000069CF E88A000000          <1>     call .writeExceptionMessage
   467                              <1> 
   468 000069D4 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   469 000069D5 48FFC9              <1>     dec rcx
   470 000069D8 0F8421FFFFFF        <1>     jz .cpurollprint
   471                              <1> 
   472 000069DE B108                <1>     mov cl, 8   ;16 nybbles
   473 000069E0 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   474 000069E3 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   475                              <1> .pr2:
   476 000069EA 48C1C208            <1>     rol rdx, 8    ;Print rdx
   477 000069EE 88D0                <1>     mov al, dl
   478 000069F0 52                  <1>     push rdx
   479 000069F1 E836000000          <1>     call .printbyte
   480 000069F6 5A                  <1>     pop rdx
   481 000069F7 FEC9                <1>     dec cl
   482 000069F9 75EF                <1>     jnz .pr2
   483                              <1> 
   484 000069FB 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   485 00006A02 BB10000000          <1>     mov ebx, 16
   486 00006A07 E852000000          <1>     call .writeExceptionMessage
   487                              <1> 
   488 00006A0C 488D357D010000      <1>     lea rsi, .fatal2
   489 00006A13 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   490 00006A18 E841000000          <1>     call .writeExceptionMessage
   491                              <1> 
   492 00006A1D E9DDFEFFFF          <1>     jmp .cpurollprint
   493                              <1> 
   494                              <1> 
   495                              <1> .char:    ;Print a single character
   496 00006A22 488D1D6D000000      <1>     lea rbx, .ascii
   497 00006A29 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   498 00006A2A AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   499 00006A2B C3                  <1>     ret
   500                              <1> .printbyte:
   501 00006A2C 88C2                <1>     mov dl, al            ;save byte in dl
   502 00006A2E 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   503 00006A32 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   504 00006A37 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   505 00006A3B E8E2FFFFFF          <1>     call .char
   506 00006A40 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   507 00006A43 E8DAFFFFFF          <1>     call .char
   508 00006A48 C3                  <1>     ret        
   509                              <1> 
   510                              <1> 
   511                              <1> .readInputChar:
   512 00006A49 C605(ED040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   513 00006A50 488D35(1C050000)    <1>     lea rsi, singleIObyt
   514 00006A57 BB01000000          <1>     mov ebx, 1  ;Read one char
   515 00006A5C EB07                <1>     jmp short .ioException
   516                              <1> .writeExceptionMessage:
   517                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   518 00006A5E C605(ED040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   519                              <1> .ioException:
   520 00006A65 C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   521 00006A6C 66C705(EE040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   521 00006A74 00                  <1>
   522 00006A75 891D(01050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   523 00006A7B 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   524 00006A82 488935(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   525 00006A89 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   526 00006A90 E822010000          <1>     call goDriver
   527                              <1>     return
    13                              <2> %%_ret:
    14 00006A95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   528                              <1> 
   529                              <1> 
   530                              <1> ;Error messages
   531 00006A96 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   531 00006A9F 39414243444546      <1>
   532 00006AA6 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   532 00006AAF 20205343502F444F53- <1>
   532 00006AB8 20455843455054494F- <1>
   532 00006AC1 4E2044455445435445- <1>
   532 00006ACA 44210D0A0A          <1>
   533                              <1> fatalt0L   equ $ - .fatalt0
   534                              <1> 
   535                              <1> .fatal1:   
   536 00006ACF 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   536 00006AD8 656E7469616C6C7920- <1>
   536 00006AE1 666174616C20657272- <1>
   536 00006AEA 6F7220686173206265- <1>
   536 00006AF3 656E20646574656374- <1>
   536 00006AFC 65640D0A            <1>
   537 00006B00 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   537 00006B09 68652063757272656E- <1>
   537 00006B12 74206170706C696361- <1>
   537 00006B1B 74696F6E206D757374- <1>
   537 00006B24 206265207465726D69- <1>
   537 00006B2D 6E617465642E0D0A0A  <1>
   538 00006B36 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   538 00006B3F 20616E79206B657920- <1>
   538 00006B48 746F20636F6E74696E- <1>
   538 00006B51 7565206F7220435452- <1>
   538 00006B5A 4C2B414C542B44454C- <1>
   538 00006B63 20746F207265737461- <1>
   538 00006B6C 727420746865206D61- <1>
   538 00006B75 6368696E652E        <1>
   539 00006B7B 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   539 00006B84 5354454D204552524F- <1>
   539 00006B8D 523A20              <1>
   540                              <1> fatal1L equ $ - .fatal1
   541                              <1> 
   542 00006B90 203A20              <1> .fatal2:   db " : "
   543                              <1> fatal2L    equ $ - .fatal2
   544                              <1> 
   545                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   546 00006B93 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   546 00006B9C 4F532053595354454D- <1>
   546 00006BA5 2053544F503A20      <1>
   547                              <1> fatalHaltL equ $ - .fatalHalt
   548 00006BAC 0D0A0A              <1> .crlf:  db CR,LF,LF
   549                              <1> crlfL  equ $ - .crlf
    52                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006BAF B003                <1>     mov al, critFail
     7 00006BB1 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006BB3 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006BB7 E828090000          <1>     call dosCrit2Enter
    16 00006BBC FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006BBF FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006BC2 E827090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006BC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006BC8 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006BCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006BCF 84C0                <1>     test al, al
    33 00006BD1 723F                <1>     jc .diskError
    34 00006BD3 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006BD9 7337                <1>     jae .diskError
    36 00006BDB 50                  <1>     push rax
    37 00006BDC FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006BDE E8FD040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006BE3 58                  <1>     pop rax
    40 00006BE4 7235                <1>     jc .error
    41 00006BE6 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006BEC 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006BF3 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006BFB 750A                <1>     jnz .netError
    45 00006BFD 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006C01 E8B1030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006C06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006C07 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006C0F 00                  <1>
    50 00006C10 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006C12 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006C1A 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006C1B C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006C22 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006C29 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006C30 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006C31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006C32 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006C38 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006C39 FC                  <1>     cld ;Set string ops in the right direction
    65 00006C3A E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006C3F 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 00006C41 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006C48 56                  <1>     push rsi
    69 00006C49 50                  <1>     push rax
    70 00006C4A 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006C51 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006C53 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006C56 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006C5C F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006C5D B800030000          <1>     mov eax, 0300h  
    79 00006C62 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006C64 58                  <1>     pop rax
    82 00006C65 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006C66 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006C68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006C69 FA                  <1>     cli
    93 00006C6A 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006C71 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 00006C78 55                  <1>     push rbp
    96 00006C79 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006C7A E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006C7F 7252                <1>     jc absDiskExit
    99 00006C81 E844020000          <1>     call primReqWriteSetup
   100 00006C86 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006C88 FA                  <1>     cli 
   107 00006C89 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006C90 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 00006C97 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006C98 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006C99 E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006C9E 7233                <1>     jc absDiskExit
   113 00006CA0 E830020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006CA5 E859000000          <1>     call absDiskDriverCall
   118 00006CAA 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006CAC 8A05(C4040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006CB2 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006CB4 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006CB6 741A                <1>     je .absExit
   125 00006CB8 B440                <1>     mov ah, 40h ;Seek error
   126 00006CBA 3C06                <1>     cmp al, 06h
   127 00006CBC 7414                <1>     je .absExit
   128 00006CBE B408                <1>     mov ah, 08h ;Bad CRC
   129 00006CC0 3C04                <1>     cmp al, 04h
   130 00006CC2 740E                <1>     je .absExit
   131 00006CC4 B404                <1>     mov ah, 04h ;Sector not found
   132 00006CC6 3C08                <1>     cmp al, 08h
   133 00006CC8 7408                <1>     je .absExit
   134 00006CCA 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006CCC 84C0                <1>     test al, al
   136 00006CCE 7402                <1>     je .absExit
   137 00006CD0 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006CD2 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006CD3 5B                  <1>     pop rbx
   142 00006CD4 5D                  <1>     pop rbp
   143 00006CD5 FA                  <1>     cli
   144 00006CD6 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00006CDD FB                  <1>     sti ;Reenable interrupts
   146 00006CDE 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006CE5 9C                  <1>     pushfq
   148 00006CE6 5A                  <1>     pop rdx ;Get the current flags
   149 00006CE7 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006CEB 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006CF0 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006CF2 FA                  <1>     cli
   154 00006CF3 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006CF4 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006CF5 9C                  <1>     pushfq
   157 00006CF6 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006CF8 89CA                <1>     mov edx, ecx
   159 00006CFA FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006D00 9D                  <1>     popfq
   161 00006D01 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006D02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006D03 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006D04 8B0D(D7040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006D0A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006D0E E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 00006D13 5E                  <1>     pop rsi
   177 00006D14 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006D1A 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006D1C 0FB705(C4040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 00006D23 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006D27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006D28 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006D2C 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006D2F 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006D35 E87D020000          <1>     call setWorkingDPB
   192 00006D3A 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006D3B E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006D40 5F                  <1>     pop rdi
   195                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006D41 72E4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   196 00006D43 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006D45 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006D4C 31C0                <1>     xor eax, eax
   200 00006D4E FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006D50 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006D54 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006D5B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006D61 7509                <1>     jnz .next
   207 00006D63 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006D67 7503                <1>     jne .next   ;Else, goto next
   209 00006D69 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006D6C 4881C75F000000      <1>     add rdi, cds_size
   212 00006D73 FFC9                <1>     dec ecx
   213 00006D75 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006D77 F8                  <1>     clc
   216                              <1>     return
    13                              <2> %%_ret:
    14 00006D78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> ensureDiskValid:
   219                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   220                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   221                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   222                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   223 00006D79 E8A0010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   224                              <1> ;Return in rbx the req hdr address
   225 00006D7E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   226 00006D82 E830FEFFFF          <1>     call goDriver   ;Request!
   227 00006D87 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   228 00006D8B F7C700800000        <1>     test edi, drvErrStatus
   229 00006D91 0F85C4000000        <1>     jnz .diskDrvCritErr
   230 00006D97 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   231 00006D9E 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   232 00006DA1 3805(E1190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   233 00006DA7 750C                <1>     jne .notForce
   234                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   235                              <1>     ; not changed but the new volume needs to be updated. 
   236                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   237                              <1>     ; new label.  
   238 00006DA9 C605(E1190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   239 00006DB0 E95E000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   240                              <1> .notForce:
   241 00006DB5 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   242 00006DB8 7854                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   243                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006DBA 75BC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   244                              <1>     ;Here we check for any dirty buffers
   245                              <1>     ;If dirty buffer found, dont get new DPB
   246 00006DBC 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   247                              <1> .checkBuffer:
   248 00006DC3 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   249 00006DC6 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   250 00006DC8 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   251 00006DCC 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   252 00006DCE F8                  <1>     clc 
   253                              <1>     return
    13                              <2> %%_ret:
    14 00006DCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   254                              <1> .gotoNextBuffer:
   255 00006DD0 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   256 00006DD3 4881FFFFFFFFFF      <1>     cmp rdi, -1
   257 00006DDA 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   258                              <1>     ;If we get here, we found no dirty buffers for our drive
   259                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   260 00006DDC C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset number of free to unknown
   261 00006DE3 E8F998FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   262                              <1> .dirtyLoop:
   263 00006DE8 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   264 00006DEC 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   265 00006DEF 7515                <1>     jne .skipDirtyCheck
   266 00006DF1 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   267 00006DF5 0F8490000000        <1>     je .dirtyBufferError
   268                              <1>     ;Set reference bit and drive to free
   269 00006DFB 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   270 00006E01 E8F598FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   271                              <1> .skipDirtyCheck:
   272 00006E06 E8FE98FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   273 00006E0B 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   274                              <1> .exit:
   275                              <1>     return
    13                              <2> %%_ret:
    14 00006E0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   277 00006E0E E8509AFFFF          <1>     call freeBuffersForDrive    ;Free all the buffers with the DPB in rbp
   278                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   279 00006E13 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   280                              <1>     ;Get a buffer to read BPB into in rdi
   281 00006E17 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   282 00006E19 E8CA9BFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   283                              <1>     retc    ;Immediately exit with the carry flag set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006E1E 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   284 00006E20 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   285                              <1> .repeatEP:
   286 00006E24 E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   287 00006E29 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   288 00006E2D E885FDFFFF          <1>     call goDriver   ;Request!
   289 00006E32 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   290 00006E36 F7C700800000        <1>     test edi, drvErrStatus
   291 00006E3C 751D                <1>     jnz .diskDrvCritErr
   292                              <1>     ;Now rebuild the dpb fields for this drive
   293 00006E3E 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   294 00006E42 53                  <1>     push rbx
   295 00006E43 E8280A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   296 00006E48 5B                  <1>     pop rbx
   297                              <1>     ;Adjust the buffer header information
   298 00006E49 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   299 00006E4C 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   300 00006E4F 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   301 00006E52 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   302 00006E55 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   303 00006E57 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   304                              <1>     return
    13                              <2> %%_ret:
    14 00006E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .diskDrvCritErr:
   306                              <1> ;Critical Errors fall through here
   307                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   308 00006E5B C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset freecluster count
   309 00006E62 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   310 00006E69 B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   311 00006E6B 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   312 00006E71 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   313 00006E75 E8A8F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   314 00006E7A 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   315 00006E81 3C01                <1>     cmp al, critRetry
   316 00006E83 0F84F0FEFFFF        <1>     je ensureDiskValid
   317                              <1> .errorExitBad:
   318 00006E89 F9                  <1>     stc     ;Set error flag to indicate fail
   319                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00006E8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> 
   321                              <1> .dirtyBufferError:
   322 00006E8B 55                  <1>     push rbp
   323 00006E8C 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   324 00006E90 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   325 00006E96 5D                  <1>     pop rbp
   326 00006E97 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   327                              <1>     ;rbp points to the dpb still
   328 00006E99 57                  <1>     push rdi
   329 00006E9A 488B3D(D0040000)    <1>     mov rdi, qword [primReqHdr + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   330 00006EA1 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   331 00006EA8 5F                  <1>     pop rdi ;Get back the buffer pointer
   332 00006EA9 C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   333 00006EB0 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   334 00006EB7 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   335 00006EBC E8F7F6FFFF          <1>     call diskDevErr
   336 00006EC1 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   337 00006EC3 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   338 00006EC5 E95EFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   339                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   340                              <1> ;           Primitive Driver Requests
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;First are Disk requests, then Char device requests
   343                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   344                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   345                              <1> 
   346                              <1> primReqWriteSetup:
   347 00006ECA 50                  <1>     push rax
   348 00006ECB B408                <1>     mov ah, drvWRITE    ;Command code
   349 00006ECD 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   350 00006ED3 EB03                <1>     jmp short primReqRWCommon
   351                              <1> primReqReadSetup:
   352 00006ED5 50                  <1>     push rax
   353 00006ED6 B404                <1>     mov ah, drvREAD
   354                              <1> primReqRWCommon:
   355                              <1> ;Sets up the IO request packet with:
   356                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   357                              <1> ; rbx = Data storage buffer ptr
   358                              <1> ; ecx = Number of sectors to transfer
   359                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   360                              <1> ; ~~~~ Set by entry function ~~~~ 
   361                              <1> ; ah = Command code
   362                              <1> ; All regs preserved EXCEPT rbx.
   363                              <1> ; Return: rbx = Transfer Address
   364 00006ED8 48891D(CF040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   365 00006EDF 890D(D7040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   366 00006EE5 C605(C1040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   367 00006EEC 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   368 00006EF1 8905(C2040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   369 00006EF7 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   370 00006EFA 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   371                              <1>     ;Disk operations only here!
   372 00006EFC 488915(DB040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   373 00006F03 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 00006F06 8805(CE040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   375 00006F0C 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   376 00006F0F 8805(C2040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   377                              <1> primReqCommonExit:
   378                              <1> ;Returns in rbx the primary request header as these functions
   379                              <1> ; setup the request in the primary request header space
   380 00006F15 58                  <1>     pop rax
   381 00006F16 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   382                              <1>     return
    13                              <2> %%_ret:
    14 00006F1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> primReqMedCheckSetup:
   385                              <1> ;Prepare the diskIO packet for mediacheck
   386                              <1> ;rbp has DPB pointer for device to check media on
   387 00006F1E 50                  <1>     push rax
   388 00006F1F C605(C1040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   389 00006F26 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   390 00006F29 8805(CE040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   391 00006F2F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   392 00006F32 8805(C2040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   393 00006F38 C605(C3040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   394 00006F3F 66C705(C4040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   394 00006F47 00                  <1>
   395 00006F48 EBCB                <1>     jmp short primReqCommonExit
   396                              <1> 
   397                              <1> primReqGetBPBSetup:
   398                              <1> ;rbp has DPB pointer for device
   399                              <1> ;rdi has sector buffer header pointer for transfer
   400 00006F4A 50                  <1>     push rax
   401 00006F4B 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   402 00006F4F 48893D(CF040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   403 00006F56 C605(C1040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   404 00006F5D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   405 00006F60 8805(CE040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   406 00006F66 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   407 00006F69 8805(C2040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   408 00006F6F C605(C3040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   409 00006F76 66C705(C4040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   409 00006F7E 00                  <1>
   410 00006F7F EB94                <1>     jmp short primReqCommonExit
   411                              <1> 
   412                              <1> primReqOpenSetup:
   413                              <1> ;al = unit number if a disk device. Undefined otherwise
   414 00006F81 50                  <1>     push rax
   415 00006F82 B40D                <1>     mov ah, drvOPEN
   416 00006F84 EB03                <1>     jmp short primReqOCcommon
   417                              <1> primReqCloseSetup:
   418                              <1> ;al = unit number if a disk device. Undefined otherwise
   419 00006F86 50                  <1>     push rax
   420 00006F87 B40E                <1>     mov ah, drvCLOSE
   421                              <1> primReqOCcommon:
   422 00006F89 C605(C1040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   423 00006F90 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   424 00006F91 8905(C2040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   425                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   426 00006F97 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   427                              <1> 
   428                              <1> secdReqCharIOReq:
   429                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   430                              <1> ;Input:
   431                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   432                              <1> ; ecx = Length of buffer
   433                              <1> ; rdi = Buffer pointer
   434                              <1> ;Output: 
   435                              <1> ; rbx = Transfer Address 
   436 00006F9C 488D1D(97040000)    <1>     lea rbx, secdReqHdr
   437 00006FA3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   438 00006FA6 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   439 00006FA9 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   440 00006FAF 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   441 00006FB3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   442                              <1>     return
    13                              <2> %%_ret:
    14 00006FB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> ;If the device which will process this request is a disk device
   444                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   445                              <1> ;Then we will read the appropriate byte from that buffer to the 
   446                              <1> ; singleIOByt buffer.
   447                              <1> ;Such a request will require additional setup with the following fields:
   448                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    53                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006FB7 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006FBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006FBF 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 00006FC6 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006FCD 7409                <1>     je .net
    23 00006FCF 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006FD5 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006FD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006FD8 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006FD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006FDA E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006FDF 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006FE1 B80C110000          <1>     mov eax, 110Ch 
    43 00006FE6 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006FE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006FE9 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006FF0 E8DB040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006FF5 E82EFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006FFA 721C                <1>     jc .exit
    51 00006FFC E88C9BFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00007001 7215                <1>     jc .exit
    53 00007003 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00007006 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00007008 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 0000700B 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    57 0000700E FFCB                <1>     dec ebx ;Get the number of clusters
    58 00007010 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00007014 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00007017 F8                  <1>     clc
    61                              <1> .exit:
    62 00007018 E8BD040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 0000701D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 0000701E 50                  <1>     push rax    ;Preserve rax
    69 0000701F FA                  <1>     cli ;Halt interrupts
    70 00007020 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00007027 0FB6C0              <1>     movzx eax, al
    72 0000702A 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 0000702E 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 00007035 31DB                <1>     xor ebx, ebx
    75 00007037 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 0000703A 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 0000703E 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00007042 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 00007046 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 00007049 FB                  <1>     sti
    81 0000704A 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 0000704B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 0000704C 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00007053 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00007054 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 0000705B 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00007062 740A                <1>     je .exitBad
    96 00007064 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 00007066 7407                <1>     je .exit    ;Drive found
    98 00007068 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 0000706C EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 0000706E F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 0000706F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00007070 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 00007075 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 00007077 56                  <1>     push rsi
   114 00007078 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 0000707F 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 00007085 5E                  <1>     pop rsi
   117 00007086 7401                <1>     jz .exit
   118 00007088 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 00007089 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   123                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   124                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   125                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   126                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   127                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   128                              <1> ; a new CDS or even a new complete CDS array!
   129                              <1> ;Input: al = Drive Letter for drive
   130                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   131                              <1> ;Output: rdi = newly filled in workingCDS
   132                              <1> ;CF=NC => CDS valid and has a DPB
   133                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   134 0000708A 50                  <1>     push rax
   135 0000708B 2C40                <1>     sub al, "A"-1
   136 0000708D 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   137 00007093 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   138 0000709A 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   139 000070A0 58                  <1>     pop rax
   140 000070A1 723C                <1>     jb .exit    ;Exit with CF=CY
   141 000070A3 50                  <1>     push rax
   142 000070A4 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   143 000070A9 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   144 000070AB 58                  <1>     pop rax
   145 000070AC 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   146 000070B2 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   147 000070B9 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   148 000070C1 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   149 000070C8 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   150                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   151 000070CE 50                  <1>     push rax
   152 000070CF 56                  <1>     push rsi
   153 000070D0 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   154 000070D2 E87DFFFFFF          <1>     call walkDPBchain
   155 000070D7 7204                <1>     jb .skipSettingDPB
   156 000070D9 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   157                              <1> .skipSettingDPB:
   158 000070DD 5E                  <1>     pop rsi
   159 000070DE 58                  <1>     pop rax
   160                              <1> .exit:
   161                              <1>     return
    13                              <2> %%_ret:
    14 000070DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   162                              <1> 
   163                              <1> getCDS:     ;Int 2Fh AX=1219h
   164                              <1> ;Gets the device DPB and saves it in the DOS variable
   165                              <1> ;This can be called to get CDS for network drives too!
   166                              <1> ;Input: al = 1 based drive number
   167                              <1> ;Sets workingCDS var with the CDS for the device. 
   168                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   169 000070E0 84C0                <1>     test al, al
   170 000070E2 7508                <1>     jnz .skip
   171 000070E4 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   172 000070EA FEC0                <1>     inc al
   173                              <1> .skip:
   174 000070EC FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   175 000070EE 56                  <1>     push rsi
   176 000070EF C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   177 000070F6 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   178 000070FD 7423                <1>     jz .localCall
   179                              <1>     ;Invokation via 21/5D00
   180 000070FF 50                  <1>     push rax
   181 00007100 57                  <1>     push rdi
   182 00007101 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   183 00007108 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   184 0000710F 0441                <1>     add al, "A" ;Convert to a drive letter
   185 00007111 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   186 00007116 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   187 0000711C 5F                  <1>     pop rdi
   188 0000711D 58                  <1>     pop rax
   189 0000711E 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   190 00007120 EB17                <1>     jmp short .exitOk   ;All oki
   191                              <1> .localCall:
   192 00007122 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   193 00007127 7208                <1>     jc .exitBad
   194 00007129 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   195 0000712F 7508                <1>     jnz .exitOk ;Exit with flag cleared
   196                              <1>     ;Else Return to unknown error locus
   197                              <1> .exitBad:
   198 00007131 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   199                              <1> .exitBad1:
   200 00007138 F9                  <1>     stc
   201                              <1> .exitOk:
   202 00007139 5E                  <1>     pop rsi
   203                              <1>     return
    13                              <2> %%_ret:
    14 0000713A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   204                              <1> 
   205                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   206                              <1>     ;Gets the CDS for the current drive in al
   207                              <1>     ;Input: al = Drive number, 0 = A ...
   208                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   209                              <1>     ;        CF=CY => al not valid
   210 0000713B 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   211 00007141 7202                <1>     jb .ctn
   212 00007143 F9                  <1>     stc 
   213                              <1>     return
    13                              <2> %%_ret:
    14 00007144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   214                              <1> .ctn:
   215 00007145 50                  <1>     push rax
   216 00007146 52                  <1>     push rdx
   217 00007147 0FB6C0              <1>     movzx eax, al
   218 0000714A 48BE5F000000000000- <1>     mov rsi, cds_size
   218 00007153 00                  <1>
   219 00007154 31D2                <1>     xor edx, edx
   220 00007156 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   221 00007158 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   222 0000715F 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   223 00007162 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   224 00007169 5A                  <1>     pop rdx
   225 0000716A 58                  <1>     pop rax
   226 0000716B F8                  <1>     clc
   227                              <1>     return
    13                              <2> %%_ret:
    14 0000716C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> 
   230                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   231                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   232                              <1> ;Input: AL = Char to normalise.
   233                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   234                              <1> ;If path separator, set ZF=ZE
   235 0000716D 3C5C                <1>     cmp al, "\"
   236 0000716F 7406                <1>     je .exit
   237 00007171 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   238 00007173 7502                <1>     jne .exit
   239 00007175 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   240                              <1> .exit:
   241                              <1>     return
    13                              <2> %%_ret:
    14 00007177 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> uppercaseCharAtPtr:
   244                              <1> ;Get the char pointed to by rsi and then fall
   245 00007178 AC                  <1>     lodsb
   246                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   247                              <1> ;Convert a lowercase char to uppercase
   248                              <1> ; Leave alone uppercase chars and invalid chars
   249                              <1> ;Input: al = Char to convert to uppercase
   250                              <1> ;Output: al = Processed char
   251 00007179 53                  <1>     push rbx
   252 0000717A 3C61                <1>     cmp al, "a"
   253 0000717C 7214                <1>     jb .exit
   254 0000717E 3C7A                <1>     cmp al, "z"
   255 00007180 7702                <1>     ja .checkExt
   256 00007182 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   257                              <1> .checkExt:
   258 00007184 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   259 00007186 720A                <1>     jb .exit
   260 00007188 2C80                <1>     sub al, 80h ;Turn into table offset
   261 0000718A 488D1D1991FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   262 00007191 D7                  <1>     xlatb   ;Get converted extended byte into al
   263                              <1> .exit:
   264 00007192 50                  <1>     push rax    ;Save al temporarily
   265 00007193 488D1DC292FFFF      <1>     lea rbx, asciiCharProperties
   266 0000719A D7                  <1>     xlatb   ;Get the signature in al
   267 0000719B A801                <1>     test al, badChar
   268 0000719D 58                  <1>     pop rax
   269 0000719E 5B                  <1>     pop rbx
   270                              <1>     return
    13                              <2> %%_ret:
    14 0000719F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> isCharTerminator:
   273                              <1> ;Input: al = Char to check properties of
   274                              <1> ;Output:    ZF=NZ => Char not name terminator
   275                              <1> ;           ZF=ZE => Char terminator
   276 000071A0 50                  <1>     push rax
   277 000071A1 53                  <1>     push rbx
   278 000071A2 488D1DB392FFFF      <1>     lea rbx, asciiCharProperties
   279 000071A9 D7                  <1>     xlatb
   280 000071AA A802                <1>     test al, termChar
   281 000071AC 5B                  <1>     pop rbx
   282 000071AD 58                  <1>     pop rax
   283                              <1>     return
    13                              <2> %%_ret:
    14 000071AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> isCharSeparator:
   286                              <1> ;Input: al = Char to check properties of
   287                              <1> ;Output:    ZF=NZ => Char not separator
   288                              <1> ;           ZF=ZE => Char separator
   289 000071AF 50                  <1>     push rax
   290 000071B0 53                  <1>     push rbx
   291 000071B1 488D1DA492FFFF      <1>     lea rbx, asciiCharProperties
   292 000071B8 D7                  <1>     xlatb
   293 000071B9 A804                <1>     test al, sepChar
   294 000071BB 5B                  <1>     pop rbx
   295 000071BC 58                  <1>     pop rax
   296                              <1>     return
    13                              <2> %%_ret:
    14 000071BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> strlen2:    ;Int 2Fh, AX=1212h
   299                              <1> ;Entry point for Multiplex
   300 000071BE 57                  <1>     push rdi
   301 000071BF 4889F7              <1>     mov rdi, rsi
   302 000071C2 E802000000          <1>     call strlen
   303 000071C7 5F                  <1>     pop rdi
   304                              <1>     return
    13                              <2> %%_ret:
    14 000071C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> strlen: 
   306                              <1> ;Gets the length of a ASCIIZ string
   307                              <1> ;Input: rdi = Source buffer
   308                              <1> ;Output: ecx = Length of string
   309 000071C9 50                  <1>     push rax
   310 000071CA 57                  <1>     push rdi
   311 000071CB 30C0                <1>     xor al, al
   312 000071CD 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   313 000071CF FFC9                <1>     dec ecx ;rcx = -1
   314 000071D1 F2AE                <1>     repne scasb
   315 000071D3 F7D1                <1>     not ecx
   316 000071D5 5F                  <1>     pop rdi
   317 000071D6 58                  <1>     pop rax
   318                              <1>     return
    13                              <2> %%_ret:
    14 000071D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> 
   320                              <1> strcpy:
   321                              <1> ;Copies a null terminated string from rsi to rdi
   322 000071D8 AC                  <1>     lodsb
   323 000071D9 AA                  <1>     stosb
   324 000071DA 84C0                <1>     test al, al
   325                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000071DC 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   326 000071DE EBF8                <1>     jmp short strcpy
   327                              <1> 
   328                              <1> strcmp:
   329                              <1> ;Compares two ASCIIZ strings for equality.
   330                              <1> ;Input: rsi = First string
   331                              <1> ;       rdi = Second string
   332                              <1> ;       ecx = Number of bytes to compare
   333                              <1> ;Output: ZF=ZE => Equal
   334                              <1> ;        ZF=NZ => Not equal
   335 000071E0 56                  <1>     push rsi
   336 000071E1 57                  <1>     push rdi
   337 000071E2 F3A6                <1>     repe cmpsb
   338 000071E4 5F                  <1>     pop rdi
   339 000071E5 5E                  <1>     pop rsi
   340                              <1>     return
    13                              <2> %%_ret:
    14 000071E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> 
   343                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   344                              <1> ;Converts lowercase to uppercase and / to "\"
   345                              <1> ;Input: rsi = Source buffer
   346                              <1> ;       rdi = Buffer to place normalised path
   347 000071E7 50                  <1>     push rax
   348 000071E8 56                  <1>     push rsi
   349 000071E9 57                  <1>     push rdi
   350                              <1> .scan:
   351 000071EA AC                  <1>     lodsb
   352 000071EB 84C0                <1>     test al, al
   353 000071ED 740D                <1>     jz .exit
   354 000071EF E879FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   355 000071F4 E880FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   356 000071F9 AA                  <1>     stosb
   357 000071FA EBEE                <1>     jmp short .scan
   358                              <1> .exit:
   359 000071FC 5F                  <1>     pop rdi
   360 000071FD 5E                  <1>     pop rsi
   361 000071FE 58                  <1>     pop rax
   362                              <1>     return
    13                              <2> %%_ret:
    14 000071FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   365                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   366                              <1> ;Input: rsi = One ASCIIZ pathname
   367                              <1> ;       rdi = Second ASCIIZ pathname
   368                              <1> ;Return:
   369                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   370 00007200 50                  <1>     push rax
   371 00007201 56                  <1>     push rsi
   372 00007202 57                  <1>     push rdi
   373                              <1> .scan:
   374 00007203 AC                  <1>     lodsb
   375 00007204 E818000000          <1>     call .normaliseChar
   376 00007209 88C4                <1>     mov ah, al  ;Save normalised char in ah
   377 0000720B 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   378 0000720D 48FFC7              <1>     inc rdi ;And goto next char
   379 00007210 E80C000000          <1>     call .normaliseChar
   380 00007215 38E0                <1>     cmp al, ah  ;Are they equal?
   381 00007217 7504                <1>     jne .exit   ;If not equal, exit
   382 00007219 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   383 0000721B 75E6                <1>     jnz .scan
   384                              <1> .exit:
   385 0000721D 5F                  <1>     pop rdi
   386 0000721E 5E                  <1>     pop rsi
   387 0000721F 58                  <1>     pop rax
   388                              <1>     return
    13                              <2> %%_ret:
    14 00007220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .normaliseChar:
   390 00007221 E853FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   391 00007226 E842FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   392                              <1>     return
    13                              <2> %%_ret:
    14 0000722B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> checkPathspecOK:
   394                              <1> ;Input:
   395                              <1> ;rsi -> points to a path to verify if it is ok.
   396                              <1> ;Output:
   397                              <1> ;CF=NC => The path is totally clean and ok to use.
   398                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   399                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   400                              <1> ; and depending on method of invokation and caller, may be permissable.
   401                              <1> ;We accept lc and uc characters in this check function.
   402 0000722C 50                  <1>     push rax
   403 0000722D 53                  <1>     push rbx    ;Use rbx as the return flag status
   404 0000722E 56                  <1>     push rsi
   405 0000722F 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   406                              <1>     ;Start by getting the length of the ASCIIZ string.
   407 00007231 51                  <1>     push rcx
   408 00007232 57                  <1>     push rdi
   409 00007233 4889F7              <1>     mov rdi, rsi
   410 00007236 E88EFFFFFF          <1>     call strlen
   411 0000723B 89C8                <1>     mov eax, ecx    ;Save the length in eax
   412 0000723D 5F                  <1>     pop rdi
   413 0000723E 59                  <1>     pop rcx
   414 0000723F 3D40000000          <1>     cmp eax, 64    ;Check
   415 00007244 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   416 0000724A 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   417 0000724C 0F848A000000        <1>     jz .badExit
   418                              <1>     ;First we verify if our path is relative or canonical (absolute)
   419 00007252 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   420 00007255 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   421 00007259 7416                <1>     je .netName
   422 0000725B 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   423 0000725F 7410                <1>     je .netName
   424 00007261 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   425 00007264 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   426                              <1>     ;Here if relative
   427 00007266 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   428 0000726D 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   429 0000726F EB3B                <1>     jmp short .okToScan
   430                              <1> .netName:
   431 00007271 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   432 00007278 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   433 0000727B 745F                <1>     je .badExit
   434 0000727D EB2D                <1>     jmp short .okToScan
   435                              <1> .diskPath:
   436 0000727F 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   437 00007286 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   438 00007289 7451                <1>     je .badExit
   439 0000728B F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   440 00007292 740F                <1>     jz .localAbsCheck
   441                              <1> .absMain:
   442 00007294 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   443 00007295 E8D3FEFFFF          <1>     call swapPathSeparator
   444 0000729A 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   445 0000729C 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   446 0000729F 743B                <1>     je .badExit ;Error if so!
   447 000072A1 EB09                <1>     jmp short .okToScan
   448                              <1> .localAbsCheck:
   449 000072A3 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   450 000072A5 E8C3FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   451 000072AA 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   452                              <1>     ;Else we are relative and begin wildcard search
   453                              <1> .okToScan:
   454 000072AC AC                  <1>     lodsb   
   455 000072AD 84C0                <1>     test al, al ;End of path char?
   456 000072AF 7430                <1>     jz .exit
   457 000072B1 E8B7FEFFFF          <1>     call swapPathSeparator
   458 000072B6 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   459 000072B8 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   460 000072BA 7411                <1>     je .wcFound
   461 000072BC 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   462 000072BE 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   463                              <1>     ;Else we check that the char in al is an acceptable char
   464 000072C0 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   465 000072C2 74E8                <1>     je .okToScan
   466 000072C4 E831000000          <1>     call checkCharValid
   467 000072C9 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   468 000072CB EBDF                <1>     jmp short .okToScan
   469                              <1> .wcFound:
   470 000072CD BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   471 000072D2 EBD8                <1>     jmp short .okToScan
   472                              <1> .wcCheck:
   473                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   474 000072D4 F7C340000000        <1>     test ebx, 40h
   475 000072DA 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   476                              <1>     ;Else fall through in error
   477                              <1> .badExit:
   478 000072DC BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   479                              <1> .exit:
   480 000072E1 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   481 000072E2 9D                  <1>     popfq
   482 000072E3 5E                  <1>     pop rsi
   483 000072E4 5B                  <1>     pop rbx
   484 000072E5 58                  <1>     pop rax
   485                              <1>     return
    13                              <2> %%_ret:
    14 000072E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> scanPathWC:
   488                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   489                              <1> ; even in the final path componant.
   490                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   491                              <1> ;Output: CF=NC => No wildcards present
   492                              <1> ;        CF=CY => Wildcards found
   493 000072E7 50                  <1>     push rax
   494 000072E8 56                  <1>     push rsi
   495                              <1> .scan:
   496 000072E9 AC                  <1>     lodsb
   497 000072EA 84C0                <1>     test al, al
   498 000072EC 7409                <1>     jz .exit
   499 000072EE 3C3F                <1>     cmp al, "?"
   500 000072F0 7404                <1>     je .wcFnd
   501 000072F2 3C2A                <1>     cmp al, "*"
   502 000072F4 75F3                <1>     jne .scan
   503                              <1> .wcFnd:
   504 000072F6 F9                  <1>     stc
   505                              <1> .exit:
   506 000072F7 5E                  <1>     pop rsi
   507 000072F8 58                  <1>     pop rax
   508                              <1>     return
    13                              <2> %%_ret:
    14 000072F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> checkCharValid:
   511                              <1> ;If ZF=ZE => Invalid Char
   512                              <1> ;If ZF=NZ => Valid Char
   513 000072FA 50                  <1>     push rax
   514 000072FB E879FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   515 00007300 58                  <1>     pop rax
   516                              <1>     return
    13                              <2> %%_ret:
    14 00007301 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> 
   519                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   520                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   521                              <1> ;Input: rsi = One pointer
   522                              <1> ;       rdi = Second pointer
   523                              <1> ;Output: ZF=ZE if equal
   524                              <1> ;        ZF=NZ if not
   525 00007302 4839FE              <1>     cmp rsi, rdi
   526                              <1>     return
    13                              <2> %%_ret:
    14 00007305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkPathNet:
   529                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   530                              <1> ;Output: ZF=ZE => Path is a net path
   531                              <1> ;        ZF=NZ => Path is not a net path
   532 00007306 50                  <1>     push rax
   533 00007307 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   534 0000730A E85EFEFFFF          <1>     call swapPathSeparator
   535 0000730F 7507                <1>     jnz .exit
   536 00007311 88E0                <1>     mov al, ah  ;Get the second char
   537 00007313 E855FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   538                              <1> .exit:
   539 00007318 58                  <1>     pop rax
   540                              <1>     return
    13                              <2> %%_ret:
    14 00007319 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getCharDevDriverPtr:
   543                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   544                              <1> ;Input: rax = Device Driver name (space padded)
   545                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   546 0000731A 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   547                              <1> .lp:
   548 00007321 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   549                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007325 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   550 00007327 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   551 0000732A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   552 00007331 75EE                <1>     jne .lp ;If not loop
   553 00007333 F9                  <1>     stc ;Else bad exit
   554                              <1>     return
    13                              <2> %%_ret:
    14 00007334 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   557                              <1> ;Pointer to the first non-null device driver in the chain.
   558                              <1> ;Returns the value in rax only
   559 00007335 488D05(7A000000)    <1>     lea rax, nulDevHdr
   560 0000733C 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   561                              <1>     return
    13                              <2> %%_ret:
    14 0000733F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   564                              <1> ;Gets the extended error code in ax and returns
   565 00007340 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   566                              <1>     return
    13                              <2> %%_ret:
    14 00007347 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7 00007348 FA                  <1>     cli ;Halt external interrupts
     8 00007349 FC                  <1>     cld ;Ensure all string ops occur in the right direction
     9 0000734A 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    10 0000734D 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    11                              <1>     ;Cherry pick functions
    12 00007353 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    13 00007356 7235                <1>     jb .fsbegin   ;If below skip these checks
    14 00007358 0F847C020000        <1>     je ctrlBreakCheck
    15 0000735E 80FC64              <1>     cmp ah, 64h
    16 00007361 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    17 00007367 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    18 00007369 80FC51              <1>     cmp ah, 51h
    19 0000736C 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    20 00007372 80FC62              <1>     cmp ah, 62h
    21 00007375 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    22 0000737B 80FC50              <1>     cmp ah, 50h
    23 0000737E 0F84A0020000        <1>     je setCurrProcessID
    24 00007384 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    25 00007387 0F84BA020000        <1>     je systemServices
    26                              <1> .fsbegin:
    27 0000738D E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    28 00007392 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    29 00007399 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    29 000073A1 00                  <1>
    30 000073A2 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    31 000073A9 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    32 000073B0 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    33 000073B6 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    34                              <1> ;Network related variable resetting
    35 000073BD C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    36                              <1> ;Here, we want to save oldRSP in the callers PSP
    37 000073C4 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    38 000073CB 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    39 000073CF 58                  <1>     pop rax     ;Get old rax back
    40 000073D0 50                  <1>     push rax    ;and push it back onto the stack
    41                              <1> .charFun0CEP:
    42                              <1> .serverEP:
    43 000073D1 488D25(080D0000)    <1>     lea rsp, critStakTop
    44 000073D8 FB                  <1>     sti         ;Reenable interrupts
    45                              <1> 
    46 000073D9 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    47 000073DB 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    48 000073E1 C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    49 000073E8 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    50 000073EE 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    51                              <1> 
    52 000073F4 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    53 000073F5 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    54 000073F7 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    55 000073F9 488D055C91FFFF      <1>     lea rax, kDispTbl
    56 00007400 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    57 00007403 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    58 00007407 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    59 0000740A 58                  <1>     pop rax
    60                              <1> 
    61 0000740B 84E4                <1>     test ah, ah     ;Simple Terminate function?
    62 0000740D 741C                <1>     jz .fddiskOp
    63 0000740F 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    64 00007412 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    65 00007414 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    66 00007417 7712                <1>     ja .fddiskOp
    67                              <1> ;Char operations here
    68 00007419 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    69 00007420 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    70 00007422 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    71 00007429 EB40                <1>     jmp short .fdGoToFunction
    72                              <1> .fddiskOp:
    73                              <1>     ;Disk operations go here
    74                              <1>     ;Save rax on entry to a disk funciton
    75 0000742B 488905(33040000)    <1>     mov qword [oldRAX], rax
    76                              <1>     ;Clear up error info
    77 00007432 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    78 00007439 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    79 00007440 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    80                              <1> 
    81 00007447 50                  <1>     push rax
    82 00007448 B482                <1>     mov ah, 82h ;Cancel all critical section!
    83 0000744A CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    84 0000744C 58                  <1>     pop rax
    85                              <1> 
    86 0000744D C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    87 00007454 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
    88 0000745B F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
    89 00007462 7407                <1>     jz .fdGoToFunction
    90                              <1> ; HANDLE CTRL+BREAK HERE!
    91 00007464 50                  <1>     push rax
    92 00007465 E89CB4FFFF          <1>     call checkBreak   ; Check for a ^C
    93 0000746A 58                  <1>     pop rax
    94                              <1> .fdGoToFunction:
    95 0000746B 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
    96                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
    97                              <1>     ;
    98                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
    99                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   100                              <1>     ;
   101 00007472 FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   102                              <1> .fdExit:
   103 00007478 FA                  <1>     cli     ;Redisable interrupts
   104 00007479 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   105 0000747F 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   106 00007486 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   107 00007489 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   108 00007490 488905(7B040000)    <1>     mov qword [oldRSP], rax
   109 00007497 E806000000          <1>     call dosPopRegs  ;Pop the frame
   110 0000749C 48CF                <1>     iretq
   111                              <1> .fdExitBad:
   112 0000749E 30C0                <1>     xor al, al
   113                              <1> defaultIretq:
   114 000074A0 48CF                <1>     iretq
   115                              <1> dosPopRegs:
   116 000074A2 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   117 000074A8 58                  <1>     pop rax
   118 000074A9 5B                  <1>     pop rbx
   119 000074AA 59                  <1>     pop rcx
   120 000074AB 5A                  <1>     pop rdx
   121 000074AC 5E                  <1>     pop rsi
   122 000074AD 5F                  <1>     pop rdi
   123 000074AE 5D                  <1>     pop rbp
   124 000074AF 4158                <1>     pop r8
   125 000074B1 4159                <1>     pop r9
   126 000074B3 FF25(73040000)      <1>     jmp qword [dosReturn]
   127                              <1> dosPushRegs:
   128 000074B9 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   129 000074BF 4151                <1>     push r9
   130 000074C1 4150                <1>     push r8
   131 000074C3 55                  <1>     push rbp
   132 000074C4 57                  <1>     push rdi
   133 000074C5 56                  <1>     push rsi
   134 000074C6 52                  <1>     push rdx
   135 000074C7 51                  <1>     push rcx
   136 000074C8 53                  <1>     push rbx
   137 000074C9 50                  <1>     push rax
   138 000074CA FF25(73040000)      <1>     jmp qword [dosReturn]
   139                              <1> dosCrit1Enter:
   140                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000074D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141 000074D1 B801800000          <1>     mov eax, 8001h
   142 000074D6 CD2A                <1>     int 2ah
   143 000074D8 58                  <1>     pop rax
   144                              <1>     return
    13                              <2> %%_ret:
    14 000074D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> dosCrit1Exit:
   146                              <1>     return
    13                              <2> %%_ret:
    14 000074DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147 000074DB B801810000          <1>     mov eax, 8101h
   148 000074E0 CD2A                <1>     int 2ah
   149 000074E2 58                  <1>     pop rax
   150                              <1>     return
    13                              <2> %%_ret:
    14 000074E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> dosCrit2Enter:
   152                              <1>     return
    13                              <2> %%_ret:
    14 000074E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   153 000074E5 B802800000          <1>     mov eax, 8002h
   154 000074EA CD2A                <1>     int 2ah
   155 000074EC 58                  <1>     pop rax
   156                              <1>     return
    13                              <2> %%_ret:
    14 000074ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   157                              <1> dosCrit2Exit:
   158                              <1>     return
    13                              <2> %%_ret:
    14 000074EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159 000074EF B802810000          <1>     mov eax, 8102h
   160 000074F4 CD2A                <1>     int 2ah
   161 000074F6 58                  <1>     pop rax
   162                              <1>     return
    13                              <2> %%_ret:
    14 000074F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> ;FCB specific returns
   165                              <1> fcbGoodExit:
   166                              <1> ;Preserve the carry flag on entry to DOS
   167 000074F8 30C0                <1>     xor al, al ;Set return code al = 0
   168                              <1>     return
    13                              <2> %%_ret:
    14 000074FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   169                              <1> fcbErrExit:
   170                              <1> ;Preserve the carry flag on entry to DOS
   171                              <1> ;Input: eax = Extended error code to store in SDA 
   172 000074FB E836000000          <1>     call xLatError
   173 00007500 B0FF                <1>     mov al, -1  ;Set return code al = -1
   174 00007502 F9                  <1>     stc
   175                              <1>     return
    13                              <2> %%_ret:
    14 00007503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> ;Handle and General DOS Returns
   178                              <1> ;All good exits destroy AT LEAST ax 
   179                              <1> extGoodExit2:
   180                              <1> ;Good exit with an extended return code in eax
   181 00007504 E843FBFFFF          <1>     call getUserRegs
   182 00007509 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   183 0000750B EB08                <1>     jmp short extGoodExit.extGoodCommon
   184                              <1> extGoodExit:
   185                              <1> ;Good exit
   186                              <1> ;Return code in ax
   187 0000750D E83AFBFFFF          <1>     call getUserRegs
   188 00007512 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   189                              <1> .extGoodCommon:
   190 00007515 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   191 00007519 F8                  <1>     clc
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000751A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> extErrExit:
   194                              <1> ;The extended error exit from DOS
   195                              <1> ;Jumped to with AL=Extended error code
   196                              <1> ;Can be called too.
   197                              <1> ;Input: al = Extended error code
   198                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   199                              <1> ;   Returns with: eax = xLat Error
   200                              <1> ;                 rsi = callerFrame
   201 0000751B 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   202 0000751E E813000000          <1>     call xLatError
   203 00007523 E891000000          <1>     call checkFail
   204                              <1> .noXlat:
   205 00007528 E81FFBFFFF          <1>     call getUserRegs
   206 0000752D 668906              <1>     mov word [rsi + callerFrame.rax], ax
   207 00007530 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   208 00007534 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   209                              <1>     return
    13                              <2> %%_ret:
    14 00007535 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> xLatError:
   211                              <1> ;Translates the error code given in ax and sets error code in the var
   212                              <1> ; Input: ax = Extended Error Code
   213                              <1> ; Output: ax = Potentially translated Error Code
   214                              <1> ;         [errorExCde] = Original Error Code
   215                              <1> ;Preserves all registers except ax
   216                              <1> ;AH is always returned as 0
   217 00007536 53                  <1>     push rbx
   218 00007537 51                  <1>     push rcx
   219 00007538 56                  <1>     push rsi
   220 00007539 668905(0B040000)    <1>     mov word [errorExCde], ax
   221 00007540 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   222 00007542 488D35308BFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   223                              <1> .readEntry:
   224 00007549 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   225 0000754B 3CFF                <1>     cmp al, -1
   226 0000754D 741F                <1>     je .skipXlat
   227 0000754F 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   228 00007555 7408                <1>     je .found
   229                              <1>     ;Here, entry not found, goto next entry
   230 00007557 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   231 0000755A 4801C6              <1>     add rsi, rax    ;Goto next entry
   232 0000755D EBEA                <1>     jmp short .readEntry
   233                              <1> .found:
   234                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   235 0000755F 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   236                              <1> .mainSearch:
   237 00007562 AC                  <1>     lodsb   ;Get one byte into al
   238 00007563 38C3                <1>     cmp bl, al  ;Check against the error code
   239 00007565 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   240 00007567 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   241 00007569 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   242                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   243 0000756B 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   244                              <1> .skipXlat:
   245 0000756E 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   246 00007570 5E                  <1>     pop rsi
   247 00007571 59                  <1>     pop rcx
   248 00007572 5B                  <1>     pop rbx
   249                              <1>     return
    13                              <2> %%_ret:
    14 00007573 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   251                              <1> ;Looks up the error code in the variable and sets the other error vars
   252                              <1> ;Called with the lookup table in rsi
   253                              <1> ;All regs preserved
   254 00007574 50                  <1>     push rax
   255 00007575 53                  <1>     push rbx
   256 00007576 51                  <1>     push rcx
   257 00007577 56                  <1>     push rsi
   258 00007578 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   259 0000757F B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   260                              <1> .readEntry:
   261 00007584 AD                  <1>     lodsd   ;Read the dword table entry into eax
   262 00007585 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   263 0000758A 7428                <1>     je .exit    
   264 0000758C 38D8                <1>     cmp al, bl  ;Compare the error codes
   265 0000758E 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   266 00007590 D3E8                <1>     shr eax, cl
   267 00007592 3CFF                <1>     cmp al, -1
   268 00007594 7406                <1>     je .skipClass
   269 00007596 8805(0E040000)      <1>     mov byte [errorClass], al
   270                              <1> .skipClass:
   271 0000759C D3E8                <1>     shr eax, cl
   272 0000759E 3CFF                <1>     cmp al, -1
   273 000075A0 7406                <1>     je .skipAct
   274 000075A2 8805(0D040000)      <1>     mov byte [errorAction], al
   275                              <1> .skipAct:
   276 000075A8 D3E8                <1>     shr eax, cl
   277 000075AA 3CFF                <1>     cmp al, -1
   278 000075AC 7406                <1>     je .exit
   279 000075AE 8805(0A040000)      <1>     mov byte [errorLocus], al
   280                              <1> .exit:
   281 000075B4 5E                  <1>     pop rsi
   282 000075B5 59                  <1>     pop rcx
   283 000075B6 5B                  <1>     pop rbx
   284 000075B7 58                  <1>     pop rax
   285                              <1>     return
    13                              <2> %%_ret:
    14 000075B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   286                              <1> checkFail:
   287                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   288                              <1> ; and swaps the var error code if so
   289 000075B9 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   290 000075C0 7409                <1>     jz .skipFail
   291 000075C2 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   291 000075CA 00                  <1>
   292                              <1> .skipFail:
   293 000075CB 56                  <1>     push rsi
   294 000075CC 488D35428BFFFF      <1>     lea rsi, extErrTbl
   295 000075D3 E89CFFFFFF          <1>     call setErrorVars
   296 000075D8 5E                  <1>     pop rsi
   297                              <1>     return
    13                              <2> %%_ret:
    14 000075D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> ;========================================:
   299                              <1> ;      Reentrant Kernel Functions        :
   300                              <1> ;========================================:
   301                              <1> ctrlBreakCheck:    ;ah = 33h
   302 000075DA 3C06                <1>     cmp al, 6
   303 000075DC 743C                <1>     je .trueVer
   304 000075DE 3C05                <1>     cmp al, 5
   305 000075E0 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   306 000075E2 84C0                <1>     test al, al
   307 000075E4 7508                <1>     jnz .cbcget     ;Get the state or other functions
   308 000075E6 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   309 000075EC 48CF                <1>     iretq
   310                              <1> .cbcget:
   311 000075EE 3C02                <1>     cmp al, 02h
   312 000075F0 771A                <1>     ja .cbcBad
   313 000075F2 740D                <1>     jz .cbcxchg ;Function 2
   314 000075F4 52                  <1>     push rdx
   315 000075F5 80E201              <1>     and dl, 1   ;Get only the bottom bit
   316 000075F8 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   317 000075FE 5A                  <1>     pop rdx
   318 000075FF 48CF                <1>     iretq
   319                              <1> .cbcxchg:
   320 00007601 80E201              <1>     and dl, 1
   321 00007604 8615(32040000)      <1>     xchg byte [breakFlag], dl
   322 0000760A 48CF                <1>     iretq
   323                              <1> .cbcBad:
   324 0000760C B0FF                <1>     mov al, -1
   325 0000760E 48CF                <1>     iretq
   326                              <1> .getBtDrv:
   327                              <1> ;Undocumented.
   328                              <1> ;Might be unreliable so dont document yet.
   329                              <1> ;Return 1 based boot drive in dl
   330 00007610 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   331 00007616 FEC2                <1>     inc dl  ;Return a 1 based drive number
   332 00007618 48CF                <1>     iretq
   333                              <1> .trueVer:
   334                              <1> ;Undocumented.
   335                              <1> ;bx returns true DOS number.
   336                              <1> ;dl has "revision" number in bits 0-2. 
   337                              <1> ;dh has various flags. All reserved for future use.
   338 0000761A 66BB0062            <1>     mov bx, dosVerMac
   339 0000761E 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   340 00007622 48CF                <1>     iretq
   341                              <1> 
   342                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   343 00007624 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   344 0000762B 48CF                <1>     iretq
   345                              <1> 
   346                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   347 0000762D 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   348 00007634 48CF                <1>     iretq
   349                              <1> 
   350                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   351 00007636 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   352 0000763D 48CF                <1>     iretq
   353                              <1> 
   354                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   355 0000763F 8805(E0190000)      <1>     mov byte [lookahead], al    
   356 00007645 48CF                <1>     iretq
   357                              <1> 
   358                              <1> systemServices: ;ah = 61h
   359                              <1> ;All pointers returned in rdx
   360                              <1> ;al = 0 -> Get Environment pointer in rdx
   361                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   362                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   363                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   364                              <1> ;                        Else, rdx -> Filename
   365 00007647 3C01                <1>     cmp al, 1
   366 00007649 7453                <1>     je short .getCmdLineArgs
   367 0000764B 3C02                <1>     cmp al, 2
   368 0000764D 760C                <1>     jbe .getEnvPtr
   369 0000764F B801000000          <1>     mov eax, errInvFnc
   370                              <1> .exitBad:
   371 00007654 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   372 00007659 48CF                <1>     iretq
   373                              <1> .getEnvPtr:
   374                              <1>     ;Gets the environment pointer in rdx
   375 0000765B 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   376 00007662 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   377 00007666 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   378                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   379                              <1> ; pass the ptr to the word after.
   380 00007668 FA                  <1>     cli
   381 00007669 51                  <1>     push rcx
   382 0000766A 31C9                <1>     xor ecx, ecx
   383 0000766C B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   384                              <1> .gep0:
   385 00007671 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   386 00007676 740D                <1>     je short .gep1
   387 00007678 48FFC2              <1>     inc rdx         ;Go to the next byte
   388 0000767B FFC9                <1>     dec ecx
   389 0000767D 75F2                <1>     jnz short .gep0
   390                              <1> .gep00:
   391                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   392 0000767F 59                  <1>     pop rcx
   393 00007680 FB                  <1>     sti
   394 00007681 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   395 00007683 EBCF                <1>     jmp short .exitBad
   396                              <1> .gep1:
   397 00007685 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   398 0000768C 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   399 00007691 75EC                <1>     jne .gep00
   400 00007693 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   401 0000769A 59                  <1>     pop rcx
   402 0000769B FB                  <1>     sti
   403 0000769C EB0B                <1>     jmp short .exitOk
   404                              <1> .getCmdLineArgs:
   405 0000769E 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   406 000076A5 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   407                              <1> .exitOk:
   408 000076A9 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   409 000076AE 48CF                <1>     iretq
   410                              <1> 
   411                              <1> 
   412                              <1> ;========================================:
   413                              <1> ;            Kernel Functions            :
   414                              <1> ;========================================:
   415                              <1> diskReset:         ;ah = 0Dh
   416                              <1> ;Flush all dirty buffers to disk
   417 000076B0 E81BFEFFFF          <1>     call dosCrit1Enter
   418 000076B5 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   419 000076B7 E87290FFFF          <1>     call flushAllBuffersForDrive  
   420                              <1>     ;Now we free all buffers and set their referenced bit
   421 000076BC 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   422                              <1> .drBufferLp:
   423 000076C3 4881FFFFFFFFFF      <1>     cmp rdi, -1
   424 000076CA 740B                <1>     je .drExit
   425 000076CC 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   426 000076D2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   427 000076D5 EBEC                <1>     jmp short .drBufferLp
   428                              <1> .drExit:
   429 000076D7 E8FEFDFFFF          <1>     call dosCrit1Exit
   430 000076DC B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   431 000076E1 CD2F                <1>     int 2fh
   432                              <1>     return
    13                              <2> %%_ret:
    14 000076E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> selectDisk:        ;ah = 0Eh
   435                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   436 000076E4 88D0                <1>     mov al, dl
   437 000076E6 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   438 000076E8 E883F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   439 000076ED 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   440 000076EF 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   441                              <1> .skipSettingCurrent:
   442 000076F5 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   443                              <1>     return
    13                              <2> %%_ret:
    14 000076FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   446 000076FD 8A05(31040000)      <1>     mov al, byte [currentDrv]
   447                              <1>     return
    13                              <2> %%_ret:
    14 00007703 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> FATinfoDefault:    ;ah = 1Bh
   450 00007704 30D2                <1>     xor dl, dl
   451                              <1> FATinfoDevice:     ;ah = 1Ch
   452                              <1> ;Input: dl = 1 based drive number
   453                              <1> ;Output:
   454                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   455                              <1> ;cx = bytes per sector
   456                              <1> ;edx = total number of clusters
   457                              <1> ;rbx = Ptr to media ID byte
   458 00007706 88D0                <1>     mov al, dl  ;Move drive number into al
   459 00007708 E8D3F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   460 0000770D 7307                <1>     jnc .fidCDSFound
   461 0000770F B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   462 00007714 EB2E                <1>     jmp short .error 
   463                              <1> .fidCDSFound:
   464 00007716 E8BFF8FFFF          <1>     call getDiskData
   465 0000771B 7227                <1>     jc .error
   466                              <1> ;Now we have that:
   467                              <1> ;al = sectors per cluster
   468                              <1> ;ah = media ID byte
   469                              <1> ;ebx = total clusters
   470                              <1> ;cx = bytes per sector
   471                              <1> ;edx = number of available clusters
   472 0000771D E82AF9FFFF          <1>     call getUserRegs
   473 00007722 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   474 00007728 30E4                <1>     xor ah, ah
   475 0000772A 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   476 0000772D 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   477 00007731 488D1D(91070000)    <1>     lea rbx, mediaByte
   478 00007738 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   479 0000773C 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   480                              <1> .badExit:
   481 00007740 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   482                              <1>     return
    13                              <2> %%_ret:
    14 00007743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> .error:
   484 00007744 E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   485 00007749 66B8FFFF            <1>     mov ax, -1
   486 0000774D EBF1                <1>     jmp short .badExit
   487                              <1> 
   488                              <1> setIntVector:      ;ah = 25h
   489                              <1> ;Called with:
   490                              <1> ;   rdx = Pointer to interrupt handler
   491                              <1> ;   al = Interrupt number
   492 0000774F FA                  <1>     cli ;Halt interrupts
   493 00007750 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   494 00007757 0FB6C0              <1>     movzx eax, al
   495 0000775A 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   496 0000775E 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   497 00007765 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   498 00007768 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   499 0000776C 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   500 00007770 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   501 00007774 895008              <1>     mov dword [rax + 8], edx
   502 00007777 FB                  <1>     sti
   503                              <1>     return
    13                              <2> %%_ret:
    14 00007778 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 00007779 8805(D0030000)      <1>     mov byte [verifyFlag], al
   507 0000777F 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    13                              <2> %%_ret:
    14 00007786 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 00007787 E8C0F8FFFF          <1>     call getUserRegs
   511 0000778C 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 0000778E 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 00007791 668B056888FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   514 00007798 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    13                              <2> %%_ret:
    14 0000779B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   518                              <1> ;Input: dx = Version number. Value of 0 means true value.
   519 0000779C 6685D2              <1>     test dx, dx
   520 0000779F 750A                <1>     jnz .newVal
   521 000077A1 66C7055688FFFF0062  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   522                              <1>     return
    13                              <2> %%_ret:
    14 000077AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .newVal:
   524 000077AB 6689154E88FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   525                              <1>     return
    13                              <2> %%_ret:
    14 000077B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   528                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   529 000077B3 30D2                <1>     xor dl, dl
   530                              <1> getDeviceDPBptr:   ;ah = 32h
   531                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   532                              <1> ;On exit: rbx = DPB pointer
   533 000077B5 88D0                <1>     mov al, dl
   534 000077B7 E824F9FFFF          <1>     call getCDS
   535 000077BC 722C                <1>     jc .bad
   536 000077BE 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   537 000077C5 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   538 000077CB 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   539                              <1>     ;Here ONLY if accessing critical Disk data structures
   540 000077CD E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   541 000077D2 E851F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   542 000077D7 E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   543 000077DC 720C                <1>     jc .bad
   544 000077DE E869F8FFFF          <1>     call getUserRegs
   545 000077E3 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   546 000077E7 30C0                <1>     xor al, al
   547                              <1>     return
    13                              <2> %%_ret:
    14 000077E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> .bad:
   549 000077EA B0FF                <1>     mov al, -1
   550                              <1>     return
    13                              <2> %%_ret:
    14 000077EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> getInDOSflagPtr:   ;ah = 34h
   553 000077ED 488D15(08040000)    <1>     lea rdx, inDOS
   554 000077F4 E853F8FFFF          <1>     call getUserRegs
   555 000077F9 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   556                              <1>     return
    13                              <2> %%_ret:
    14 000077FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getIntVector:      ;ah = 35h
   559                              <1> ;Called with:
   560                              <1> ;   al = Interrupt Number
   561                              <1> ;Returns:
   562                              <1> ;   rbx = Pointer to interrupt handler
   563 000077FE E81BF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   564 00007803 E844F8FFFF          <1>     call getUserRegs
   565 00007808 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   566                              <1>     return
    13                              <2> %%_ret:
    14 0000780C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> 
   568                              <1> getDiskFreeSpace:  ;ah = 36h
   569                              <1> ;Input: Drive number in dl (0 = Current)
   570                              <1> ;Output:    ax = sectors per cluster
   571                              <1> ;           ebx = number of free clusters
   572                              <1> ;           cx = bytes per sector
   573                              <1> ;           edx = total clusters on drive
   574 0000780D 88D0                <1>     mov al, dl
   575 0000780F E8CCF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   576 00007814 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   577                              <1> ;Else, we at an error.
   578                              <1> ;Simply return with CY set and error code in al with extended error info
   579 00007816 B80F000000          <1>     mov eax, errBadDrv
   580 0000781B E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   581                              <1>     ;extErrExit sets rsi to caller regs
   582 00007820 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   583                              <1>     return
    13                              <2> %%_ret:
    14 00007825 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .gdfsCDSFound:
   585 00007826 E8AFF7FFFF          <1>     call getDiskData
   586 0000782B 7219                <1>     jc .error
   587                              <1> ;Now we have that:
   588                              <1> ;al = sectors per cluster
   589                              <1> ;ah = media ID byte
   590                              <1> ;ebx = total clusters
   591                              <1> ;cx = bytes per sector
   592                              <1> ;edx = number of available clusters
   593 0000782D E81AF8FFFF          <1>     call getUserRegs
   594 00007832 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   595 00007834 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   596 00007837 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   597 0000783B 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   598 0000783E 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   599                              <1> .badExit:
   600 00007842 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   601                              <1>     return
    13                              <2> %%_ret:
    14 00007845 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> .error:
   603 00007846 E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   604 0000784B 66B8FFFF            <1>     mov ax, -1
   605 0000784F EBF1                <1>     jmp short .badExit
   606                              <1> 
   607                              <1> 
   608                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   609 00007851 31C0                <1>     xor eax, eax
   610 00007853 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   611 0000785A E9AEFCFFFF          <1>     jmp extGoodExit
   612                              <1> 
   613                              <1> getSysVarsPtr:     ;ah = 52h
   614 0000785F 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   615 00007866 E8E1F7FFFF          <1>     call getUserRegs
   616 0000786B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   617                              <1>     return
    13                              <2> %%_ret:
    14 0000786F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   618                              <1> 
   619                              <1> 
   620                              <1> ;AH = 53h - CREATE DPB
   621                              <1> createDPB:         ;generates a DPB from a given BPB
   622                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   623                              <1> ;This is done so that the other fields of the DPB can be recycled
   624                              <1> ;Input: rsi = ptr to the BPB
   625                              <1> ;       rbp = ptr to the DPB
   626                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   627                              <1> ;bMediaDescriptor
   628 00007870 8A4615              <1>     mov al, byte [rsi + bpb.media]
   629 00007873 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   630                              <1> ;dFirstFreeCluster
   631 00007876 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   632                              <1> ;dNumberOfFreeClusters
   633 0000787D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   634                              <1> ;wBytesPerSector
   635 00007884 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   636 00007888 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   637                              <1> ;bMaxSectorInCluster
   638 0000788C 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   639 0000788F FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   640 00007891 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   641                              <1> ;bSectorsPerClusterShift
   642 00007894 FEC0                <1>     inc al
   643 00007896 30C9                <1>     xor cl, cl
   644                              <1> .cd2:
   645 00007898 D0E8                <1>     shr al, 1
   646 0000789A 7404                <1>     jz .cd3
   647 0000789C FEC1                <1>     inc cl
   648 0000789E EBF8                <1>     jmp short .cd2
   649                              <1> .cd3:
   650 000078A0 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   651                              <1> ;wFAToffset, number of reserved sectors in partition
   652 000078A3 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   653 000078A7 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   654                              <1> ;bNumberOfFATs
   655 000078AB 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   656 000078AE 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   657                              <1> ;wNumberRootDirEntries
   658                              <1> ;Gets the number of 32 byte entries in the root directory
   659                              <1> ;Only valid for FAT 12/16
   660 000078B1 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   661 000078B5 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   662                              <1> ;dFATlength, get the FAT length
   663 000078B9 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   664 000078BD 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   665 000078C0 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   666 000078C2 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   667 000078C5 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   668                              <1> ;Complex cases below...
   669                              <1> ;dClusterHeapOffset, start sector of the data area
   670 000078C8 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   671 000078CC 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   672 000078CF 85C0                <1>     test eax, eax
   673 000078D1 0F44C3              <1>     cmovz eax, ebx
   674                              <1> ;eax = FATsz
   675 000078D4 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   676 000078D8 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   677 000078DB 85DB                <1>     test ebx, ebx
   678 000078DD 0F44D9              <1>     cmovz ebx, ecx 
   679                              <1> ;ebx = TotSec
   680 000078E0 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   681 000078E3 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   682                              <1> .cd4:
   683 000078E5 01C2                <1>     add edx, eax
   684 000078E7 FEC9                <1>     dec cl
   685 000078E9 75FA                <1>     jnz .cd4
   686 000078EB 89D0                <1>     mov eax, edx    ;Store product in eax
   687 000078ED 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   688 000078F1 01D0                <1>     add eax, edx
   689                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   690 000078F3 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   691 000078F7 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   692 000078FA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   693 000078FE 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   694 000078FF 89D0                <1>     mov eax, edx
   695 00007901 31D2                <1>     xor edx, edx
   696 00007903 F7F1                <1>     div ecx
   697 00007905 89C2                <1>     mov edx, eax
   698 00007907 58                  <1>     pop rax
   699 00007908 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   700                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   701                              <1>     ;aka eax = Start sector of the data area in volume
   702 0000790A 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   703                              <1> ;dClusterCount
   704 0000790D 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   705 0000790F 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   706 00007911 31D2                <1>     xor edx, edx
   707 00007913 BB01000000          <1>     mov ebx, 1
   708 00007918 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   709 0000791B D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   710 0000791D F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   711 0000791F FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   712 00007921 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   713                              <1> ;dFirstUnitOfRootDir
   714 00007924 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   715 00007929 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   716 0000792C 770F                <1>     ja .cd5
   717                              <1>     ;Else, we need to find the first sector of the root directory
   718                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   719 0000792E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   720 00007932 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   721                              <1> .cd51:
   722 00007936 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   723 00007939 FFC9                <1>     dec ecx
   724 0000793B 75F9                <1>     jnz .cd51
   725                              <1> .cd5:
   726 0000793D 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   727 00007940 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   728                              <1> ;Exit epilogue
   729 00007944 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   730 0000794B 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   731                              <1>     return
    13                              <2> %%_ret:
    14 0000794D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> getVerifySetting:  ;ah = 54h
   734 0000794E 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   735                              <1>     return
    13                              <2> %%_ret:
    14 00007954 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getExtendedError:  ;ah = 59h
   738 00007955 E8F2F6FFFF          <1>     call getUserRegs
   739 0000795A 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   740 00007961 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   741 00007967 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   742 0000796D 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   743 00007973 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   744 0000797A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   745 0000797D 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   746 00007981 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   747 00007984 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   748                              <1> noOp:
   749                              <1>     return
    13                              <2> %%_ret:
    14 00007988 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> ;At some point we will implement the below function but that is
   751                              <1> ; a low priority as it is not a DOS 3.3 function. 
   752                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    55                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007989 3C07                <1>     cmp al, 07h
     8 0000798B 7204                <1>     jb .skip
     9 0000798D 3C09                <1>     cmp al, 09h
    10 0000798F 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007991 4889D6              <1>     mov rsi, rdx
    13 00007994 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007998 66891D(43040000)    <1>     mov word [machineNum], bx
    15 0000799F 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 000079A3 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 000079AA 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000079B1 53                  <1>     push rbx
    20 000079B2 488B1D(E2190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 000079B9 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 000079BA 50                  <1>     push rax    ;Push al onto stack as a qword
    23 000079BB E856010000          <1>     call serverFunctionSelect
    24 000079C0 B801000000          <1>     mov eax, eLocUnk
    25 000079C5 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 000079CB E94BFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 000079D0 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 000079D1 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 000079D2 5F                  <1>     pop rdi
    33 000079D3 E874F6FFFF          <1>     call getUserRegs
    34 000079D8 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 000079DB 56                  <1>     push rsi
    36 000079DC B906000000          <1>     mov ecx, 6
    37 000079E1 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 000079E4 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 000079EB 48A5                <1>     movsq   ;Transfer r8...
    40 000079ED 48A5                <1>     movsq   ;... and r9
    41 000079EF 5E                  <1>     pop rsi
    42 000079F0 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 000079F3 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 000079F7 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 000079FB 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 000079FF 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007A03 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007A07 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007A0B 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007A0F 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007A16 C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007A1D E9AFF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007A22 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007A29 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007A2E 740A                <1>     je .validTask
    62 00007A30 B805000000          <1>     mov eax, errAccDen
    63 00007A35 E9E1FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007A3A 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007A3C E88FFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007A41 53                  <1>     push rbx
    70 00007A42 E8BED4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007A47 7227                <1>     jc .exit
    72 00007A49 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007A4E 741B                <1>     je .gotoNextFile
    74 00007A50 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007A55 7414                <1>     je .gotoNextFile
    76 00007A57 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007A5D 750C                <1>     jnz .gotoNextFile
    78 00007A5F 48893D(32070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007A66 E8E5C1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007A6B 5B                  <1>     pop rbx
    83 00007A6C FFC3                <1>     inc ebx
    84 00007A6E EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007A70 E865FAFFFF          <1>     call dosCrit1Exit
    87 00007A75 5B                  <1>     pop rbx ;Align stack
    88 00007A76 E992FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007A7B FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007A81 0F8294FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007A87 E981FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007A8C FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007A92 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007A94 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007A9A EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007A9C FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007AA2 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007AA4 E8A3F5FFFF          <1>     call getUserRegs
   110 00007AA9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007AAD 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007AB1 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007AB5 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007AB7 488D3D(07040000)    <1>     lea rdi, sda
   124 00007ABE 48B9DB150000000000- <1>     mov rcx, sdaLen
   124 00007AC7 00                  <1>
   125 00007AC8 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007AD1 00                  <1>
   126 00007AD2 E875F5FFFF          <1>     call getUserRegs
   127 00007AD7 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007ADB 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007ADF EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007AE1 50                  <1>     push rax
   133 00007AE2 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007AE7 CD2F                <1>     int 2Fh
   135 00007AE9 5B                  <1>     pop rbx
   136 00007AEA 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007AEC EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007AEE 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007AF0 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007AF7 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007AFB 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007B02 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007B05 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007B0C 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007B0F 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007B16 55                  <1>     push rbp
   156 00007B17 4889E5              <1>     mov rbp, rsp
   157 00007B1A 53                  <1>     push rbx
   158 00007B1B 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007B1F 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007B22 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007B25 7621                <1>     jbe short .argumentTooBig
   162 00007B27 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007B2B D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007B2D FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007B2F 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007B33 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007B36 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007B3A 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007B3E 5B                  <1>     pop rbx
   170 00007B3F 5D                  <1>     pop rbp
   171 00007B40 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007B47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007B48 5B                  <1>     pop rbx
   175 00007B49 5D                  <1>     pop rbp
   176 00007B4A C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007B4D 3C01                <1>     cmp al, 01
   181 00007B4F 7214                <1>     jb .getName
   182 00007B51 7437                <1>     jz .setName
   183 00007B53 3C06                <1>     cmp al, 6
   184 00007B55 724C                <1>     jb .netRedir
   185 00007B57 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007B5E B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007B60 E9B6F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007B65 4889D7              <1>     mov rdi, rdx
   198 00007B68 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007B6F E8D8F4FFFF          <1>     call getUserRegs
   200 00007B74 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007B78 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007B7F 31C0                <1>     xor eax, eax
   204 00007B81 48A5                <1>     movsq
   205 00007B83 A5                  <1>     movsd
   206 00007B84 66A5                <1>     movsw
   207 00007B86 A4                  <1>     movsb
   208 00007B87 AA                  <1>     stosb   ;Store terminating null
   209 00007B88 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007B8A 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007B91 4889D6              <1>     mov rsi, rdx
   217 00007B94 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007B9A 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007BA1 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007BA3 50                  <1>     push rax
   223 00007BA4 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007BA9 CD2F                <1>     int 2Fh
   225 00007BAB 5A                  <1>     pop rdx
   226 00007BAC 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00007BAE E95AF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007BB3 80FC07              <1>     cmp ah, 07h
   233 00007BB6 7419                <1>     je .driveAction
   234 00007BB8 80FC08              <1>     cmp ah, 08h
   235 00007BBB 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007BBD 50                  <1>     push rax
   238 00007BBE B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007BC3 CD2F                <1>     int 2Fh
   240 00007BC5 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007BC6 0F824FF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007BCC E93CF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007BD1 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007BD3 E863F5FFFF          <1>     call getCDSforDrive
   249 00007BD8 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007BDA 80EA07              <1>     sub dl, 7
   252 00007BDD 7408                <1>     jz .enable
   253 00007BDF 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007BE5 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007BE7 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007BED EBDD                <1>     jmp short .goodExit
    56                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007BEF 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007BF2 7411                <1>     je .installCheck
    23 00007BF4 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007BF7 740C                <1>     je .installCheck
    25 00007BF9 80FC12              <1>     cmp ah, 12h
    26 00007BFC 741E                <1>     je .goMplx
    27 00007BFE 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007C01 7402                <1>     je .installCheck
    29 00007C03 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007C05 84C0                <1>     test al, al
    38 00007C07 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007C09 B801000000          <1>     mov eax, errInvFnc
    41 00007C0E C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007C15 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007C1A 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007C1C 3C30                <1>     cmp al, mDispTblL / 2
    48 00007C1E 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00007C20 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 00007C21 53                  <1>     push rbx    ;Storage for DOS function
    53 00007C22 53                  <1>     push rbx    ;Stores rbx value
    54 00007C23 488D1D2E000000      <1>     lea rbx, .retAddr
    55 00007C2A 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00007C2F 51                  <1>     push rcx
    58 00007C30 488D1DF789FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00007C37 53                  <1>     push rbx
    60 00007C38 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00007C3B D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007C3D 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007C40 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00007C44 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00007C45 4801CB              <1>     add rbx, rcx
    66 00007C48 59                  <1>     pop rcx
    67 00007C49 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007C4E 5B                  <1>     pop rbx
    69 00007C4F 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 00007C54 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 00007C57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 00007C58 53                  <1>     push rbx
    75 00007C59 9C                  <1>     pushfq
    76 00007C5A 5B                  <1>     pop rbx
    77 00007C5B 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 00007C60 5B                  <1>     pop rbx
    79 00007C61 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 00007C63 B0FF                <1>     mov al, -1
    83 00007C65 C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 00007C66 4C8D05(00000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 00007C6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 00007C6E 88C8                <1>     mov al, cl
    95 00007C70 E88EB7FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 00007C75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 00007C76 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 00007C7C 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 00007C83 488905(7B040000)    <1>     mov qword [oldRSP], rax
   110 00007C8A 89E8                <1>     mov eax, ebp
   111 00007C8C E89EB9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 00007C91 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 00007C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 00007C98 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 00007C9E 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 00007CA5 488905(7B040000)    <1>     mov qword [oldRSP], rax
   121 00007CAC 89E8                <1>     mov eax, ebp
   122 00007CAE E8E9D2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 00007CB3 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 00007CB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 00007CBA 31C0                <1>     xor eax, eax
   132 00007CBC 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 00007CBF AC                  <1>     lodsb
   135 00007CC0 01C2                <1>     add edx, eax
   136 00007CC2 FFC9                <1>     dec ecx
   137 00007CC4 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 00007CC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 00007CC7 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 00007CC9 AC                  <1>     lodsb
   148 00007CCA 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007CCC 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00007CCE 29C2                <1>     sub edx, eax
   151 00007CD0 FFC1                <1>     inc ecx
   152 00007CD2 EBF5                <1>     jmp short .lp
    57                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007CD4 B801000000          <1>     mov eax, errInvFnc
     6 00007CD9 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007CE0 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007CE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007CE2 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007CE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007CE8 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007CE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007CEA FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007CF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007CF1 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007CF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007CF8 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007CFF 53                  <1>     push rbx
    34 00007D00 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007D06 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D07 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007D09 E806000000          <1>     call shareRetryCountdown
    38 00007D0E FFCB                <1>     dec ebx
    39 00007D10 75ED                <1>     jnz .mainLoop
    40 00007D12 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007D13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007D14 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D1B 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007D1D 51                  <1>     push rcx
    49 00007D1E 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007D25 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007D28 51                  <1>     push rcx
    53 00007D29 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007D2B 66FFC9              <1>     dec cx
    56 00007D2E 75FB                <1>     jnz .mainLoop
    57 00007D30 59                  <1>     pop rcx
    58 00007D31 FFC9                <1>     dec ecx
    59 00007D33 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007D35 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007D36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007D37 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007D3D 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007D3F 50                  <1>     push rax
    69 00007D40 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007D44 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007D49 58                  <1>     pop rax
    72 00007D4A 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007D4C E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D51 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 00007D53 B820000000          <1>     mov eax, errShrVio
    78 00007D58 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007D59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007D5A 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007D5B 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007D62 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
    93 00007D69 31C0                <1>     xor eax, eax
    94 00007D6B 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007D71 51                  <1>     push rcx
    96 00007D72 E873FFFFFF          <1>     call openShareCallWrapper
    97 00007D77 59                  <1>     pop rcx
    98 00007D78 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007D7A E895FFFFFF          <1>     call shareRetryCountdown
   100 00007D7F FFC9                <1>     dec ecx
   101 00007D81 75DF                <1>     jnz .keepLooping
   102 00007D83 E841000000          <1>     call shareCriticalError
   103 00007D88 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007D8A 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007D8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007D8C C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007D93 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007D95 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007D9C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007DA2 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007DA4 50                  <1>     push rax
   119 00007DA5 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007DA9 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007DAE 58                  <1>     pop rax
   122 00007DAF 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007DB1 E80B000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007DB6 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   126                              <1> .notInCompatMode:
   127 00007DB8 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007DBA B821000000          <1>     mov eax, errLokVio
   129 00007DBF F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007DC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007DC1 57                  <1>     push rdi
   135 00007DC2 B821000000          <1>     mov eax, errLokVio
   136 00007DC7 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007DC9 57                  <1>     push rdi
   141 00007DCA C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007DD1 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00007DD8 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 00007DDF 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00007DE1 E8D2E7FFFF          <1>     call diskDevErr
   147 00007DE6 5F                  <1>     pop rdi
   148 00007DE7 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007DE9 74D5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00007DEB F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00007DEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                                  dtextL  equ ($-$$)
    59                                  Segment kDrvText follows=dtext vfollows=dtext align=1 valign=1
    60                                  ;All drivers are linked into the kDrvText segment
    61                                  %define currSegVBase section.kDrvText.vstart
    62                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00000000 [2200000000000000]  <1>     dq auxHdr
     7 00000008 1380                <1>     dw 08013h
     8 0000000A [A001000000000000]  <1>     dq commonStrat
     9 00000012 [A801000000000000]  <1>     dq conDriver
    10 0000001A 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00000022 [4400000000000000]  <1>     dq prnHdr
    13 0000002A 0080                <1>     dw 08000h
    14 0000002C [A001000000000000]  <1>     dq commonStrat
    15 00000034 [9D04000000000000]  <1>     dq com1Intr
    16 0000003C 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00000044 [6600000000000000]  <1>     dq clkHdr
    19 0000004C 40A0                <1>     dw 0A040h
    20 0000004E [A001000000000000]  <1>     dq commonStrat
    21 00000056 [2506000000000000]  <1>     dq prnDriver
    22 0000005E 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00000066 [8800000000000000]  <1>     dq msdHdr
    25 0000006E 0880                <1>     dw 08008h
    26 00000070 [A001000000000000]  <1>     dq commonStrat
    27 00000078 [1303000000000000]  <1>     dq clkDriver
    28 00000080 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00000088 [AA00000000000000]  <1>     dq com1Hdr
    31 00000090 4008                <1>     dw 00840h   
    32 00000092 [A001000000000000]  <1>     dq commonStrat
    33 0000009A [4E06000000000000]  <1>     dq msdDriver
    34 000000A2 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 000000AA [CC00000000000000]  <1>     dq com2Hdr
    37 000000B2 0080                <1>     dw 08000h
    38 000000B4 [A001000000000000]  <1>     dq commonStrat
    39 000000BC [9D04000000000000]  <1>     dq com1Intr
    40 000000C4 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 000000CC [EE00000000000000]  <1>     dq com3Hdr
    43 000000D4 0080                <1>     dw 08000h
    44 000000D6 [A001000000000000]  <1>     dq commonStrat
    45 000000DE [A604000000000000]  <1>     dq com2Intr
    46 000000E6 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000000EE [1001000000000000]  <1>     dq com4Hdr
    49 000000F6 0080                <1>     dw 08000h
    50 000000F8 [A001000000000000]  <1>     dq commonStrat
    51 00000100 [AF04000000000000]  <1>     dq com3Intr
    52 00000108 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00000110 [3201000000000000]  <1>     dq lpt1Hdr
    55 00000118 0080                <1>     dw 08000h
    56 0000011A [A001000000000000]  <1>     dq commonStrat
    57 00000122 [B804000000000000]  <1>     dq com4Intr
    58 0000012A 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00000132 [5401000000000000]  <1>     dq lpt2Hdr
    61 0000013A 40A0                <1>     dw 0A040h
    62 0000013C [A001000000000000]  <1>     dq commonStrat
    63 00000144 [2506000000000000]  <1>     dq prnDriver
    64 0000014C 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00000154 [7601000000000000]  <1>     dq lpt3Hdr
    67 0000015C 40A0                <1>     dw 0A040h
    68 0000015E [A001000000000000]  <1>     dq commonStrat
    69 00000166 [2506000000000000]  <1>     dq prnDriver
    70 0000016E 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00000176 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 0000017E 40A0                <1>     dw 0A040h
    74 00000180 [A001000000000000]  <1>     dq commonStrat
    75 00000188 [2506000000000000]  <1>     dq prnDriver
    76 00000190 4C50543320202020    <1>     dq "LPT3    "
    77 00000198 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    63                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 000001A0 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 000001A7 C3                  <1>     ret
     5                              <1> conDriver:
     6 000001A8 50                  <1>     push rax
     7 000001A9 53                  <1>     push rbx
     8 000001AA 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 000001B1 B003                <1>     mov al, 03h ;Unknown Command
    10 000001B3 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 000001B7 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 000001B9 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 000001BC 84C0                <1>     test al, al
    15 000001BE 7445                <1>     jz .conInit
    16 000001C0 3C04                <1>     cmp al, 4
    17 000001C2 745B                <1>     jz .conRead
    18 000001C4 3C05                <1>     cmp al, 5
    19 000001C6 0F8499000000        <1>     jz .conNondestructiveRead
    20 000001CC 3C06                <1>     cmp al, 6
    21 000001CE 0F84C2000000        <1>     jz .conInputStatus
    22 000001D4 3C07                <1>     cmp al, 7
    23 000001D6 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 000001DC 3C08                <1>     cmp al, 8
    25 000001DE 0F84E4000000        <1>     jz .conWrite
    26 000001E4 3C09                <1>     cmp al, 9
    27 000001E6 0F84DC000000        <1>     jz .conWrite
    28 000001EC 3C0A                <1>     cmp al, 0Ah
    29 000001EE 0F84FD000000        <1>     jz .conOutputStatus
    30 000001F4 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 000001F6 B480                <1>     mov ah, 80h ;Set error bit
    33 000001F8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 000001FC 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00000202 5B                  <1>     pop rbx
    37 00000203 58                  <1>     pop rax
    38 00000204 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00000205 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00000207 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000020E 75EC                <1>     jnz short .conExit
    43 00000210 E86E0C0000          <1>     call conInit
    44 00000215 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000021C EBDE                <1>     jmp short .conExit
    46 0000021E 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000021F B005                <1>     mov al, 05h ;Bad request structure length?
    50 00000221 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00000224 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00000226 57                  <1>     push rdi
    54 00000227 51                  <1>     push rcx
    55 00000228 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000022C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000022E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00000231 741C                <1>     je .cre2
    60 00000233 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 0000023A 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 0000023C 31C0                <1>     xor eax, eax
    63 0000023E CD36                <1>     int 36h
    64                              <1> .cre11:
    65 00000240 AA                  <1>     stosb
    66 00000241 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00000243 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00000245 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 0000024B FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 0000024D EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 0000024F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00000252 59                  <1>     pop rcx
    75 00000253 5F                  <1>     pop rdi
    76 00000254 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00000256 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 0000025C C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00000263 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00000265 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00000267 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 0000026A 758A                <1>     jne .conWriteErrorCode
    86 0000026C 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00000273 7519                <1>     jnz .cnr2
    88 00000275 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00000277 CD36                <1>     int 36h
    90 00000279 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 0000027B 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 0000027E E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00000283 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00000289 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 0000028E 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00000294 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00000296 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00000298 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 0000029B 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 000002A1 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 000002A6 B005                <1>     mov al, 05h ;Bad request structure length?
   110 000002A8 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 000002AB 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 000002B1 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 000002B8 B401                <1>     mov ah, 01      ;Get buffer status
   115 000002BA CD36                <1>     int 36h
   116 000002BC 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 000002C2 30E4                <1>     xor ah, ah
   118 000002C4 CD36                <1>     int 36h ;Read key to flush from buffer
   119 000002C6 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 000002C8 B005                <1>     mov al, 05h ;Bad request structure length?
   123 000002CA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 000002CD 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 000002D3 56                  <1>     push rsi
   127 000002D4 51                  <1>     push rcx
   128 000002D5 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 000002D9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 000002DB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 000002DE 7407                <1>     je .cw2
   133 000002E0 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 000002E1 CD29                <1>     int 29h ;Fast print char
   135 000002E3 FFC1                <1>     inc ecx
   136 000002E5 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 000002E7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 000002EA 59                  <1>     pop rcx
   140 000002EB 5E                  <1>     pop rsi
   141 000002EC E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 000002F1 B005                <1>     mov al, 05h ;Bad request structure length?
   144 000002F3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 000002F6 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 000002FC E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00000301 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00000302 50                  <1>     push rax
   152 00000303 B40E                <1>     mov ah, 0Eh
   153 00000305 CD30                <1>     int 30h
   154 00000307 58                  <1>     pop rax
   155 00000308 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 0000030A C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00000311 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00000313 50                  <1>     push rax
   163 00000314 53                  <1>     push rbx
   164 00000315 51                  <1>     push rcx
   165 00000316 52                  <1>     push rdx
   166 00000317 56                  <1>     push rsi
   167 00000318 55                  <1>     push rbp
   168 00000319 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 00000320 B003                <1>     mov al, 03h ;Unknown Command
   170 00000322 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00000326 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00000328 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 0000032B 84C0                <1>     test al, al
   175 0000032D 743B                <1>     jz .clkInit
   176 0000032F 3C04                <1>     cmp al, 04h
   177 00000331 7451                <1>     jz .clkRead
   178 00000333 3C06                <1>     cmp al, 06h
   179 00000335 0F84AE000000        <1>     jz .clkInputStatus
   180 0000033B 3C07                <1>     cmp al, 07h
   181 0000033D 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00000343 3C08                <1>     cmp al, 08h
   183 00000345 0F84BE000000        <1>     jz .clkWrite
   184 0000034B 3C09                <1>     cmp al, 09h
   185 0000034D 0F84B6000000        <1>     jz .clkWrite
   186 00000353 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00000355 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00000357 B480                <1>     mov ah, 80h ;Set error bit
   191 00000359 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 0000035D 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00000363 5D                  <1>     pop rbp
   195 00000364 5E                  <1>     pop rsi
   196 00000365 5A                  <1>     pop rdx
   197 00000366 59                  <1>     pop rcx
   198 00000367 5B                  <1>     pop rbx
   199 00000368 58                  <1>     pop rax
   200 00000369 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 0000036A B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 0000036C F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00000373 75E8                <1>     jnz short .clkExit
   205 00000375 E86A0B0000          <1>     call clockInit
   206 0000037A C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00000381 EBDA                <1>     jmp short .clkExit
   208 00000383 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00000384 B005                <1>     mov al, 05h ;Bad request structure length?
   212 00000386 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00000389 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 0000038B 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 0000038E 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00000392 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00000399 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 0000039D 30E4                <1>     xor ah, ah
   220 0000039F CD3A                <1>     int 3Ah         ;Read the system timer
   221 000003A1 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 000003A3 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 000003A5 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 000003A7 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 000003AB 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 000003B2 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 000003B5 0FB7D2              <1>     movzx edx, dx
   230 000003B8 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 000003BA 89D0                <1>     mov eax, edx
   232 000003BC 31D2                <1>     xor edx, edx
   233 000003BE 89D8                <1>     mov eax, ebx
   234 000003C0 B944040000          <1>     mov ecx, 1092   
   235 000003C5 F7F1                <1>     div ecx
   236 000003C7 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 000003CA 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 000003CC 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 000003D0 31D2                <1>     xor edx, edx
   240 000003D2 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 000003D7 F7F1                <1>     div ecx
   242 000003D9 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 000003DC 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 000003DE 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 000003E1 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 000003E4 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 000003E9 B005                <1>     mov al, 05h ;Bad request structure length?
   253 000003EB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 000003EE 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 000003F4 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 000003F9 B005                <1>     mov al, 05h ;Bad request structure length?
   259 000003FB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 000003FE 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 00000404 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00000409 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000040B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 0000040E 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 00000414 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00000417 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 0000041B 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000041F 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00000426 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00000428 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 0000042C B105                <1>     mov cl, 5
   276 0000042E F6F1                <1>     div cl          ;Divide al by 5
   277 00000430 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 00000432 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 00000434 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 00000437 B912000000          <1>     mov ecx, 18
   283 0000043C F7E1                <1>     mul ecx  
   284 0000043E 01C3                <1>     add ebx, eax
   285                              <1> 
   286 00000440 31D2                <1>     xor edx, edx
   287 00000442 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 00000446 B944040000          <1>     mov ecx, 1092
   289 0000044B F7E1                <1>     mul ecx
   290 0000044D 01C3                <1>     add ebx, eax
   291 0000044F 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 00000451 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 00000455 B401                <1>     mov ah, 01h     ;Set the system time
   294 00000457 CD3A                <1>     int 3Ah
   295                              <1> 
   296 00000459 4889F3              <1>     mov rbx, rsi
   297 0000045C E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00000461 51                  <1>     push rcx
   303 00000462 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00000465 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00000467 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000046C 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00000472 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00000475 050A000000          <1>     add eax, 10
   310 0000047A E2F9                <1>     loop .cbth0
   311 0000047C 59                  <1>     pop rcx
   312 0000047D C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 0000047E 51                  <1>     push rcx
   318 0000047F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00000482 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 00000484 3D0A000000          <1>     cmp eax, 10
   322 00000489 7209                <1>     jb .chtb1
   323 0000048B 2D0A000000          <1>     sub eax, 10
   324 00000490 FFC1                <1>     inc ecx
   325 00000492 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00000494 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00000497 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00000499 59                  <1>     pop rcx
   330 0000049A C3                  <1>     ret
   331 0000049B 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 0000049D C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 000004A4 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 000004A6 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 000004AD EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 000004AF C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 000004B6 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 000004B8 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 000004BF 50                  <1>     push rax
   347 000004C0 53                  <1>     push rbx
   348 000004C1 51                  <1>     push rcx
   349 000004C2 52                  <1>     push rdx
   350 000004C3 56                  <1>     push rsi
   351 000004C4 57                  <1>     push rdi
   352 000004C5 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 000004CC B003                <1>     mov al, 03h ;Unknown Command
   354 000004CE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 000004D2 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 000004D4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 000004D7 84C0                <1>     test al, al
   359 000004D9 745B                <1>     jz short .comExit
   360 000004DB 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 000004DD 7464                <1>     jz .comRead
   362 000004DF 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 000004E1 0F849D000000        <1>     jz .comNondestructiveRead   
   364 000004E7 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 000004E9 0F8486000000        <1>     jz .comReadInputStatus
   366 000004EF 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 000004F1 0F849C000000        <1>     jz .comFlushInputBuffers
   368 000004F7 3C08                <1>     cmp al, 8
   369 000004F9 0F84BA000000        <1>     jz .comWrite
   370 000004FF 3C09                <1>     cmp al, 9
   371 00000501 0F84B2000000        <1>     jz .comWrite
   372 00000507 3C0A                <1>     cmp al, 0Ah
   373 00000509 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 0000050F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00000511 B002                <1>     mov al, 02h ;Unknown device
   377 00000513 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00000515 BA0B000000          <1>     mov edx, 0Bh
   380 0000051A EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 0000051C BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00000521 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 00000524 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00000529 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 0000052B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 0000052E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 00000530 B480                <1>     mov ah, 80h ;Set error bit
   391 00000532 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00000536 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 0000053C 5F                  <1>     pop rdi
   395 0000053D 5E                  <1>     pop rsi
   396 0000053E 5A                  <1>     pop rdx
   397 0000053F 59                  <1>     pop rcx
   398 00000540 5B                  <1>     pop rbx
   399 00000541 58                  <1>     pop rax
   400 00000542 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 00000543 B005                <1>     mov al, 05h ;Bad request structure length?
   404 00000545 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 00000548 75E6                <1>     jne .comWriteErrorCode
   406 0000054A 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 0000054E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 00000550 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 00000553 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 00000555 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 0000055A 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00000561 F8                  <1>     clc
   415 00000562 CD34                <1>     int 34h ;Recieve Char
   416 00000564 72BB                <1>     jc .comError
   417 00000566 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00000569 74EA                <1>     je .cr11
   419 0000056B AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 0000056C FFC1                <1>     inc ecx
   421 0000056E EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 00000570 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 00000573 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00000575 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00000577 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 0000057A 75B4                <1>     jne .comWriteErrorCode
   430 0000057C 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 00000582 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 00000584 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00000586 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00000589 75A5                <1>     jne .comWriteErrorCode
   438 0000058B 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 00000591 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 00000593 B005                <1>     mov al, 05h ;Bad request structure length?
   443 00000595 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00000598 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 0000059A 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 000005A1 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 000005A6 F8                  <1>     clc
   449 000005A7 CD34                <1>     int 34h
   450 000005A9 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 000005AF 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 000005B2 75E6                <1>     jne .cfib0
   453 000005B4 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 000005B9 B005                <1>     mov al, 05h ;Bad request structure length?
   457 000005BB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 000005BE 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 000005C4 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 000005C8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 000005CA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 000005CD 7417                <1>     je .cw2
   465 000005CF AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 000005D0 B401                <1>     mov ah, 01h ;Move function number into ah
   467 000005D2 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 000005D9 F8                  <1>     clc
   469 000005DA CD34                <1>     int 34h ;Transmit char
   470 000005DC 0F823FFFFFFF        <1>     jc .comError
   471 000005E2 FFC1                <1>     inc ecx
   472 000005E4 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 000005E6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 000005E9 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 000005EE B005                <1>     mov al, 05h ;Bad request structure length?
   480 000005F0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 000005F3 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 000005F9 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 00000600 B403                <1>     mov ah, 03h     ;Get status
   485 00000602 F8                  <1>     clc
   486 00000603 CD34                <1>     int 34h
   487 00000605 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 0000060B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 00000610 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00000613 F7D0                <1>     not eax      ;Bitwise inversion
   491 00000615 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 0000061A 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 0000061F E912FFFFFF          <1>     jmp .comExit
   494 00000624 00                  <1> .comDevice   db 0
   495                              <1> 
   496                              <1> ;Prn Drivers
   497                              <1> prnDriver:
   498 00000625 50                  <1>     push rax
   499 00000626 53                  <1>     push rbx
   500 00000627 488B1D6AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]
   501 0000062E B003                <1>     mov al, 03h ;Unknown Command
   502 00000630 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   503 00000634 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   504 00000636 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   505 00000639 84C0                <1>     test al, al ;If the command code was Init, return ok!
   506 0000063B 7408                <1>     jz .prnExit 
   507                              <1>     ;Everything else, device not ready
   508 0000063D B002                <1>     mov al, drvNotReady
   509                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   510 0000063F B480                <1>     mov ah, 80h ;Set error bit
   511 00000641 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   512                              <1> .prnExit:
   513 00000645 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   514 0000064B 5B                  <1>     pop rbx
   515 0000064C 58                  <1>     pop rax
   516 0000064D C3                  <1>     ret
    64                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 0000064E 50                  <1>     push rax
     3 0000064F 53                  <1>     push rbx
     4 00000650 51                  <1>     push rcx
     5 00000651 52                  <1>     push rdx
     6 00000652 56                  <1>     push rsi
     7 00000653 57                  <1>     push rdi
     8 00000654 55                  <1>     push rbp
     9 00000655 4150                <1>     push r8
    10 00000657 488B1D3AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 0000065E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 00000662 B003                <1>     mov al, drvBadCmd
    13 00000664 7744                <1>     ja .msdWriteEntryError ;If yes, error!
    14 00000666 B001                <1>     mov al, drvBadUnit 
    15 00000668 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 0000066C 773C                <1>     ja .msdWriteEntryError ;If yes, error!
    17 0000066E 488D35E2040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00000675 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 00000679 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 0000067C 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00000680 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00000684 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00000686 488D0DA5000000      <1>     lea rcx, .msdTable
    24 0000068D 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00000691 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00000693 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00000695 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00000698 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 0000069A 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 000006A0 4158                <1>     pop r8
    32 000006A2 5D                  <1>     pop rbp
    33 000006A3 5F                  <1>     pop rdi
    34 000006A4 5E                  <1>     pop rsi
    35 000006A5 5A                  <1>     pop rdx
    36 000006A6 59                  <1>     pop rcx
    37 000006A7 5B                  <1>     pop rbx
    38 000006A8 58                  <1>     pop rax
    39 000006A9 C3                  <1>     ret
    40                              <1> .msdWriteEntryError:
    41                              <1> ;Used for errors which occur before a function!
    42 000006AA E87C000000          <1>     call .msdWriteErrorCode
    43 000006AF EBE9                <1>     jmp short .msdDriverExit
    44                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    45 000006B1 4889FB              <1>     mov rbx, rdi
    46 000006B4 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    47                              <1> ;Now fall through to general error
    48                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    49 000006B7 488B1DDAFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    50 000006BE B401                <1>     mov ah, 01h
    51 000006C0 CD33                <1>     int 33h ;Read status of last operation
    52 000006C2 7265                <1>     jc .msdGenErr
    53 000006C4 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    54 000006C7 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    55 000006C9 7460                <1>     je .msdWriteErrorCode 
    56 000006CB B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    57 000006CD 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    58 000006D0 7459                <1>     je .msdWriteErrorCode 
    59 000006D2 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    60 000006D5 7454                <1>     je .msdWriteErrorCode
    61                              <1> ;Device Not Ready
    62 000006D7 B002                <1>     mov al, 02h  ;Device not ready code
    63 000006D9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    64 000006DC 744D                <1>     je .msdWriteErrorCode
    65 000006DE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    66 000006E2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    67                              <1> ;Write Protected
    68 000006E6 30C0                <1>     xor al, al
    69 000006E8 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    70 000006ED 743C                <1>     je .msdWriteErrorCode
    71                              <1> ;CRC Error
    72 000006EF B004                <1>     mov al, 04h     ;CRC error code
    73 000006F1 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    74 000006F6 7433                <1>     je .msdWriteErrorCode
    75 000006F8 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    76 000006FD 742C                <1>     je .msdWriteErrorCode
    77 000006FF 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    78 00000704 7425                <1>     je .msdWriteErrorCode
    79                              <1> ;Seek Error
    80 00000706 B006                <1>     mov al, 06h     ;Seek error code
    81 00000708 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    82 0000070B 741E                <1>     je .msdWriteErrorCode
    83                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    84                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    85 0000070D B007                <1>     mov al, 07h
    86 0000070F 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    87 00000712 7417                <1>     je .msdWriteErrorCode
    88                              <1> ;Sector Not Found
    89 00000714 B008                <1>     mov al, 08h     ;Sector not found code
    90 00000716 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    91 00000719 7410                <1>     je .msdWriteErrorCode
    92                              <1> ;Write faults
    93 0000071B B00A                <1>     mov al, 0Ah     ;Write fault
    94 0000071D 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    95 00000720 7409                <1>     je .msdWriteErrorCode
    96                              <1> ;Read faults
    97 00000722 B00B                <1>     mov al, 0Bh     ;Read fault
    98 00000724 80F911              <1>     cmp cl, 11h     ;Read error
    99 00000727 7402                <1>     je .msdWriteErrorCode
   100                              <1> ;General Errors
   101                              <1> .msdGenErr:
   102 00000729 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   103                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   104 0000072B B480                <1>     mov ah, 80h ;Set error bit
   105 0000072D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   106 00000731 C3                  <1>     ret ;Return to set done bit
   107                              <1> .msdTable:
   108 00000732 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   109 00000734 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   110 00000736 B200                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   111 00000738 4601                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   112 0000073A 5201                <1>     dw .msdRead - .msdTable         ;Function 4
   113 0000073C 0000                <1>     dw 0                            ;Function 5
   114 0000073E 0000                <1>     dw 0                            ;Function 6
   115 00000740 0000                <1>     dw 0                            ;Function 7
   116 00000742 9001                <1>     dw .msdWrite - .msdTable        ;Function 8
   117 00000744 CE01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   118 00000746 0000                <1>     dw 0                            ;Function 10
   119 00000748 0000                <1>     dw 0                            ;Function 11
   120 0000074A 1902                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   121 0000074C 2502                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   122 0000074E 4002                <1>     dw .msdDevClose - .msdTable     ;Function 14
   123 00000750 5B02                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   124 00000752 0000                <1>     dw 0                            ;Function 16
   125 00000754 0000                <1>     dw 0                            ;Function 17
   126 00000756 0000                <1>     dw 0                            ;Function 18
   127 00000758 8302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   128 0000075A 0000                <1>     dw 0                            ;Function 20
   129 0000075C 0000                <1>     dw 0                            ;Function 21
   130 0000075E 0000                <1>     dw 0                            ;Function 22
   131 00000760 2A03                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   132 00000762 3F03                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   133                              <1> .msdInitShim:
   134 00000764 53                  <1>     push rbx
   135 00000765 4157                <1>     push r15
   136 00000767 E8F6070000          <1>     call msdInit
   137 0000076C 415F                <1>     pop r15
   138 0000076E 5B                  <1>     pop rbx
   139 0000076F 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   140 00000778 C3                  <1>     ret
   141                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   142                              <1> .msdMedChk:          ;Function 1
   143 00000779 B005                <1>     mov al, 05h ;Bad request structure length
   144 0000077B 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   145 0000077E 75AB                <1>     jne .msdWriteErrorCode
   146                              <1>     ;If the BPB makes no sense, claim it was changed, so we can rebuild BPB.
   147 00000780 F6450DFF            <1>     test byte [rbp + bpb.secPerClus], -1
   148 00000784 744F                <1>     jz .mmcChange   ;If the BPB weird, say that it was changed!
   149                              <1>     ;Now set the volume ID appropriately so that if error, we have it ready
   150 00000786 50                  <1>     push rax
   151 00000787 488D4527            <1>     lea rax, qword [rbp + bpb.volID]    ;Get the volID from the BPB
   152 0000078B 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   153 0000078F 58                  <1>     pop rax
   154                              <1> 
   155 00000790 E814030000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   156 00000795 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   157 00000797 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   158 0000079C 488D0DAA030000      <1>     lea rcx, .msdBIOSmap
   159 000007A3 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   160 000007A6 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   161 000007A9 7534                <1>     jnz .mmcNoChange
   162                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   163 000007AB B416                <1>     mov ah, 16h 
   164 000007AD CD33                <1>     int 33h
   165 000007AF 0F8202FFFFFF        <1>     jc .msdGenDiskError
   166 000007B5 80FC80              <1>     cmp ah, 80h
   167 000007B8 740E                <1>     je .mmcNoChangeLine
   168 000007BA 80FC86              <1>     cmp ah, 86h
   169 000007BD 7409                <1>     je .mmcNoChangeLine
   170 000007BF 84E4                <1>     test ah, ah ;No change?
   171 000007C1 741C                <1>     jz .mmcNoChange
   172 000007C3 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   173 000007C6 750D                <1>     jnz .mmcChange
   174                              <1> ;If nothing, fall through and test manually, should never happen though
   175                              <1> .mmcNoChangeLine:
   176                              <1> ;Now we test Media Descriptor
   177 000007C8 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   178 000007CD 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   179 000007D0 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   180 000007D3 7405                <1>     je .mmcUnsure
   181                              <1> .mmcChange:
   182 000007D5 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   183 000007D9 C3                  <1>     ret
   184                              <1> .mmcUnsure:
   185 000007DA C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   186 000007DE C3                  <1>     ret
   187                              <1> .mmcNoChange:
   188 000007DF C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   189 000007E3 C3                  <1>     ret
   190                              <1> 
   191                              <1> 
   192                              <1> .msdBuildBPB:        ;Function 2
   193 000007E4 B005                <1>     mov al, 05h ;Bad request structure length
   194 000007E6 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   195 000007E9 0F853CFFFFFF        <1>     jne .msdWriteErrorCode
   196                              <1> 
   197 000007EF 4889DE              <1>     mov rsi, rbx
   198 000007F2 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   199 000007F7 488D0D4F030000      <1>     lea rcx, .msdBIOSmap
   200 000007FE 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   201 00000801 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   202 00000805 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   203 00000807 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   204 0000080A B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   205 0000080F CD33                <1>     int 33h
   206 00000811 0F82A0FEFFFF        <1>     jc .msdGenDiskError
   207                              <1> ;------------------------------------------------------
   208                              <1> ;At this point: 
   209                              <1> ;   rsi -> Driver Request Packet
   210                              <1> ;   rbx -> New BPB that was been read in
   211                              <1> ;   rbp -> Original BPB that is stored in driver
   212                              <1> ;------------------------------------------------------
   213                              <1> ;Check we have a short jump and NOP at the start of the bootsector.
   214 00000817 B007                <1>     mov al, drvBadMed       ;Default to unknown media error code
   215 00000819 807B0290            <1>     cmp byte [rbx + bpb.jmpBoot + 2], 090h  ;NOP
   216 0000081D 0F8508FFFFFF        <1>     jne .msdWriteErrorCode
   217 00000823 803BEB              <1>     cmp byte [rbx + bpb.jmpBoot], 0EBh      ;JMP SHORT
   218 00000826 0F85FFFEFFFF        <1>     jne .msdWriteErrorCode 
   219                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   220 0000082C 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   221 00000830 7416                <1>     je .mbbpb0
   222 00000832 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   223 00000836 7410                <1>     je .mbbpb0
   224 00000838 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   225 0000083C 740A                <1>     je .mbbpb0
   226 0000083E 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   227 00000842 0F82E3FEFFFF        <1>     jb .msdWriteErrorCode
   228                              <1> .mbbpb0:
   229                              <1> ;Now test that the BPB makes sense. If the values are non-sequitur, 
   230                              <1> ; don't overwrite the BPB we have!
   231 00000848 F6430DFF            <1>     test byte [rbx + bpb.secPerClus], -1 ;Does this BPB makes sense?
   232 0000084C B802000000          <1>     mov eax, drvNotReady    ;Load the error code if the secPerClus is 0
   233 00000851 0F84D4FEFFFF        <1>     jz .msdWriteErrorCode
   234                              <1> ;Now reset the open handles in the var count!! This should throw a GP error
   235                              <1> ; if the open is being done and this count is not zero. Actually should be a 
   236                              <1> ; bad disk change error but this is done by Share(?) so we just need to reset 
   237                              <1> ; it in any case.
   238 00000857 480FB64E01          <1>     movzx rcx, byte [rsi + bpbBuildReqPkt.unitnm]
   239 0000085C 488D3DEF020000      <1>     lea rdi, .msdHdlCnt
   240 00000863 C6040F00            <1>     mov byte [rdi + rcx], 0  ;Reset open hdls!
   241 00000867 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   242 0000086A 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   243 0000086D B90F000000          <1>     mov ecx, bpbEx_size/8
   244 00000872 56                  <1>     push rsi
   245 00000873 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   246 00000876 5E                  <1>     pop rsi
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000877 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> .msdIOCTLRead:       ;Function 3, returns done
   250 00000878 B005                <1>     mov al, drvBadDrvReq
   251 0000087A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   252 0000087D 0F85A8FEFFFF        <1>     jne .msdWriteErrorCode
   253 00000883 C3                  <1>     ret
   254                              <1> .msdRead:            ;Function 4
   255                              <1> ;Will read one sector at a time.
   256 00000884 B005                <1>     mov al, 05h ;Bad request structure length
   257 00000886 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 00000889 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   259 0000088F E86B020000          <1>     call .msdIOSetVolLbl
   260                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   261                              <1> ;    test byte [7c02h], 1
   262                              <1> ;    jnz .msdGenErr
   263                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   264 00000894 E810020000          <1>     call .msdCheckDeviceType
   265                              <1> 
   266 00000899 4889DF              <1>     mov rdi, rbx
   267 0000089C 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   268                              <1> .msdr0:
   269 0000089E B682                <1>     mov dh, 82h ;LBA Read Sectors
   270 000008A0 E8E1010000          <1>     call .msdBlkIOCommon
   271 000008A5 0F8206FEFFFF        <1>     jc .msdIOError
   272 000008AB 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   273 000008AF 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   274 000008B3 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   275 000008B7 FFC6                <1>     inc esi
   276 000008B9 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 000008BC 75E0                <1>     jne .msdr0
   278 000008BE 4889FB              <1>     mov rbx, rdi
   279 000008C1 C3                  <1>     ret
   280                              <1> .msdWrite:           ;Function 8
   281                              <1> ;Will write one sector at a time.
   282 000008C2 B005                <1>     mov al, 05h ;Bad request structure length
   283 000008C4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 000008C7 0F855EFEFFFF        <1>     jne .msdWriteErrorCode
   285 000008CD E82D020000          <1>     call .msdIOSetVolLbl
   286                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   287                              <1> ;    test byte [7c02h], 2
   288                              <1> ;    jnz .msdGenErr
   289                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   290 000008D2 E8D2010000          <1>     call .msdCheckDeviceType
   291                              <1> 
   292 000008D7 4889DF              <1>     mov rdi, rbx
   293 000008DA 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   294                              <1> .msdw0:
   295 000008DC B683                <1>     mov dh, 83h ;LBA Write Sectors
   296 000008DE E8A3010000          <1>     call .msdBlkIOCommon
   297 000008E3 0F82C8FDFFFF        <1>     jc .msdIOError
   298 000008E9 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   299 000008ED 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   300 000008F1 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   301 000008F5 FFC6                <1>     inc esi
   302 000008F7 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   303 000008FA 75E0                <1>     jne .msdw0
   304 000008FC 4889FB              <1>     mov rbx, rdi
   305 000008FF C3                  <1>     ret
   306                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   307                              <1> ;Will write one sector at a time and then verify it.
   308 00000900 B005                <1>     mov al, 05h ;Bad request structure length
   309 00000902 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   310 00000905 0F8520FEFFFF        <1>     jne .msdWriteErrorCode
   311 0000090B E8EF010000          <1>     call .msdIOSetVolLbl
   312                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   313                              <1> ;    test byte [7c02h], 2
   314                              <1> ;    jnz .msdGenErr
   315                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   316 00000910 E894010000          <1>     call .msdCheckDeviceType
   317                              <1> 
   318 00000915 4889DF              <1>     mov rdi, rbx
   319 00000918 31F6                <1>     xor esi, esi  ;Set counter to zero
   320                              <1> .msdwv0:
   321 0000091A B683                <1>     mov dh, 83h ;LBA Write Sectors
   322 0000091C E865010000          <1>     call .msdBlkIOCommon
   323 00000921 0F828AFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   324 00000927 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   325 00000929 E858010000          <1>     call .msdBlkIOCommon
   326 0000092E 0F827DFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   327 00000934 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   328 00000938 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   329 0000093C 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   330 00000940 FFC6                <1>     inc esi
   331 00000942 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   332 00000945 75D3                <1>     jne .msdwv0
   333 00000947 4889FB              <1>     mov rbx, rdi
   334 0000094A C3                  <1>     ret
   335                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   336 0000094B B005                <1>     mov al, drvBadDrvReq
   337 0000094D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   338 00000950 0F85D5FDFFFF        <1>     jne .msdWriteErrorCode
   339                              <1> 
   340 00000956 C3                  <1>     ret
   341                              <1> .msdDevOpen:         ;Function 13
   342 00000957 B005                <1>     mov al, drvBadDrvReq
   343 00000959 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   344 0000095C 0F85C9FDFFFF        <1>     jne .msdWriteErrorCode
   345                              <1> 
   346 00000962 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   347 00000967 488D0DE4010000      <1>     lea rcx, .msdHdlCnt
   348 0000096E FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   349 00000971 C3                  <1>     ret
   350                              <1> .msdDevClose:        ;Function 14
   351 00000972 B005                <1>     mov al, drvBadDrvReq
   352 00000974 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   353 00000977 0F85AEFDFFFF        <1>     jne .msdWriteErrorCode
   354                              <1> 
   355 0000097D 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   356 00000982 488D0DC9010000      <1>     lea rcx, .msdHdlCnt
   357 00000989 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   358 0000098C C3                  <1>     ret
   359                              <1> .msdRemovableMedia:  ;Function 15
   360 0000098D B005                <1>     mov al, drvBadDrvReq
   361 0000098F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   362 00000992 0F8593FDFFFF        <1>     jne .msdWriteErrorCode
   363                              <1>     
   364 00000998 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   365 0000099D 488D0DA9010000      <1>     lea rcx, .msdBIOSmap
   366 000009A4 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   367 000009A8 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   368 000009AD C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   369 000009B0 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   370 000009B4 C3                  <1>     ret
   371                              <1> .msdGenericIOCTL:    ;Function 19
   372 000009B5 B005                <1>     mov al, drvBadDrvReq
   373 000009B7 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   374 000009BA 0F856BFDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   376                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   377 000009C0 B003                <1>     mov al, drvBadCmd
   378 000009C2 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   379 000009C6 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   380 000009C9 0F855CFDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   381 000009CF F6C180              <1>     test cl, 80h    ;Extended function bit set?
   382 000009D2 0F8453FDFFFF        <1>     jz .msdWriteErrorCode
   383 000009D8 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   384 000009DB 80F941              <1>     cmp cl, 41h     
   385 000009DE 743F                <1>     je .msdGIOCTLWrite
   386 000009E0 80F942              <1>     cmp cl, 42h
   387 000009E3 7451                <1>     je .msdGIOCTLFormat
   388 000009E5 80F960              <1>     cmp cl, 60h
   389 000009E8 0F853DFDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   390                              <1>     ;Get params here
   391 000009EE 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   392 000009F2 488D1554010000      <1>     lea rdx, .msdBIOSmap
   393 000009F9 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   394 000009FC B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   395 000009FE 53                  <1>     push rbx
   396 000009FF CD33                <1>     int 33h
   397                              <1>     ;Returns:
   398                              <1>     ;rbx = Sector size in bytes
   399                              <1>     ;rcx = Last LBA block
   400 00000A01 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   401 00000A04 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   402 00000A05 0F82ACFCFFFF        <1>     jc .msdGenDiskError
   403                              <1> ;Get LBA Table:
   404                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   405                              <1> ;Offset 1:  Reserved, 7 bytes
   406                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   407                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   408 00000A0B 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   409 00000A0F 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   410 00000A16 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   411 00000A1A 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   412                              <1>     return
    13                              <2> %%_ret:
    14 00000A1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> .msdGIOCTLWrite:
   415                              <1> ;Write Table:
   416                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   417                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   418                              <1> ;Offset 2:  Reserved, 6 bytes
   419                              <1> ;Offset 8:  Sector to start format at (QWORD)
   420                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   421 00000A1F E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   422 00000A24 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   423 00000A28 B483                <1>     mov ah, 83h
   424                              <1> .msdGIOCTLwfCommon:
   425 00000A2A CD33                <1>     int 33h
   426 00000A2C 0F8285FCFFFF        <1>     jc .msdGenDiskError
   427 00000A32 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   428                              <1>     return 
    13                              <2> %%_ret:
    14 00000A35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   429                              <1> 
   430                              <1> .msdGIOCTLFormat:
   431                              <1> ;Format Table:
   432                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   433                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   434                              <1> ;Offset 2:  Reserved, 6 bytes
   435                              <1> ;Offset 8:  Sector to start format at (QWORD)
   436 00000A36 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   437 00000A3B B485                <1>     mov ah, 85h
   438 00000A3D EBEB                <1>     jmp short .msdGIOCTLwfCommon
   439                              <1> 
   440                              <1> .msdGIOCTLFormatWriteSetup:
   441                              <1> ;Sets the following:
   442                              <1> ;al = Number of sectors to write/format
   443                              <1> ;rcx = Sector to begin transfer at
   444                              <1> ;dl = BIOS Drive to do transfer on
   445                              <1> ;rsi = Driver Packet (usually set to rbx)
   446                              <1> ;rdi = Write/Format packet
   447 00000A3F 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   448 00000A43 488D1503010000      <1>     lea rdx, .msdBIOSmap
   449 00000A4A 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   450 00000A4D 4889DE              <1>     mov rsi, rbx
   451 00000A50 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   452 00000A54 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   453 00000A57 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000A5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> .msdGetLogicalDev:   ;Function 23
   457 00000A5C B005                <1>     mov al, drvBadDrvReq
   458 00000A5E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   459 00000A61 0F85C4FCFFFF        <1>     jne .msdWriteErrorCode
   460                              <1> 
   461 00000A67 8A05DF000000        <1>     mov al, byte [.msdCurDev]
   462 00000A6D 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   463 00000A70 C3                  <1>     ret
   464                              <1> .msdSetLogicalDev:   ;Function 24
   465 00000A71 B005                <1>     mov al, drvBadDrvReq
   466 00000A73 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   467 00000A76 0F85AFFCFFFF        <1>     jne .msdWriteErrorCode
   468                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   469 00000A7C 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   470 00000A7F 8805C7000000        <1>     mov byte [.msdCurDev], al
   471 00000A85 C3                  <1>     ret
   472                              <1> 
   473                              <1> .msdBlkIOCommon:  ;Does block IO
   474                              <1> ;Called with rdi containing old rbx value and ah with function number
   475                              <1> ;rbp points to bpb
   476                              <1> ;Error handled by caller
   477                              <1> ;Sector count handled by caller
   478                              <1> ;Called with dh = BIOS function number
   479 00000A86 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   480 00000A8B 488D0DBB000000      <1>     lea rcx, .msdBIOSmap
   481 00000A92 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   482 00000A95 31C9                <1>     xor ecx, ecx
   483 00000A97 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   484 00000A9A 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   485 00000A9E 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   486 00000AA2 88F4                <1>     mov ah, dh
   487 00000AA4 B001                <1>     mov al, 01h ;Do one sector at a time 
   488 00000AA6 CD33                <1>     int 33h
   489                              <1>     return
    13                              <2> %%_ret:
    14 00000AA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1> 
   491                              <1> .msdCheckDeviceType:
   492                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   493                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   494                              <1> ; is being transacted on, prompts the user. Else, 
   495                              <1> ;Returns ZF=NZ if media number changed!
   496                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   497 00000AA9 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   498 00000AAD 3A0599000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   499                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AB3 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   500                              <1> ;If not equal, check new drive is not A or B
   501 00000AB5 3C02                <1>     cmp al, 2
   502 00000AB7 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   503                              <1>     ;Check if we are in single drive mode or not
   504 00000AB9 F6058A000000FF      <1>     test byte [.msdSingleFlag], -1
   505 00000AC0 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   506 00000AC2 3A0583000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   507 00000AC8 742D                <1>     je .msdCDTexitOk    ;Exit if so
   508 00000ACA 88057B000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   509 00000AD0 0441                <1>     add al, "A" ;Convert to a letter
   510 00000AD2 880545000000        <1>     mov byte [.msdStrikeLetter], al
   511 00000AD8 488D352B000000      <1>     lea rsi, .msdStrike
   512 00000ADF B937000000          <1>     mov ecx, .msdStrikeL
   513                              <1> .msdCDTprintMessage:
   514 00000AE4 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   515 00000AE5 CD29                <1>     int 29h ;Print char in al
   516 00000AE7 FFC9                <1>     dec ecx
   517 00000AE9 75F9                <1>     jnz .msdCDTprintMessage
   518 00000AEB 31C0                <1>     xor eax, eax
   519 00000AED CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   520                              <1> .msdCDTexit:
   521 00000AEF E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   522 00000AF4 FFC0                <1>     inc eax ;Clear ZF
   523 00000AF6 C3                  <1>     ret
   524                              <1> .msdCDTexitOk:
   525 00000AF7 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   526 00000AFC 31C0                <1>     xor eax, eax
   527 00000AFE C3                  <1>     ret
   528                              <1> .msdIOSetVolLbl:
   529                              <1> ;Sets the volume label on requests to read, write, write/verify. Medchk does its own
   530                              <1> ;Input: rbx -> io request packet
   531                              <1> ;       rbp -> BPB to get volume ID from
   532                              <1> ;Output: Pointer placed in io request packet
   533 00000AFF 50                  <1>     push rax
   534 00000B00 488D4527            <1>     lea rax, qword [rbp + bpb.volID]    ;Get the volID from the BPB
   535 00000B04 48894322            <1>     mov qword [rbx + ioReqPkt.desptr], rax 
   536 00000B08 58                  <1>     pop rax
   537 00000B09 C3                  <1>     ret
   538 00000B0A 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   538 00000B13 666F72206472697665- <1>
   538 00000B1C 20                  <1>
   539 00000B1D 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   539 00000B26 72696B650D0A616E79- <1>
   539 00000B2F 206B6579207768656E- <1>
   539 00000B38 2072656164790D0A0A  <1>
   540                              <1> .msdStrikeL equ $ - .msdStrike
   541                              <1> 
   542 00000B41 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   543                              <1> ;LASTDRIVE default is 5
   544                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   545                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   546 00000B4A 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   547 00000B4B 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   548 00000B4C 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   549                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   550 00000B4D FFFFFFFFFF          <1> .msdBIOSmap  db -1, -1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   551 00000B52 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   552 00000B57 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   552 00000B60 000000000000000000- <1>
   552 00000B69 000000000000000000- <1>
   552 00000B72 000000000000000000- <1>
   552 00000B7B 00000000            <1>
   553 00000B7F 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   553 00000B88 000000000000000000- <1>
   553 00000B91 000000000000000000- <1>
   553 00000B9A 000000000000000000- <1>
   553 00000BA3 000000000000000000- <1>
   553 00000BAC 000000000000000000- <1>
   553 00000BB5 000000000000000000- <1>
   553 00000BBE 000000000000000000- <1>
   553 00000BC7 000000000000000000- <1>
   553 00000BD0 000000000000000000- <1>
   553 00000BD9 000000000000000000- <1>
   553 00000BE2 000000000000000000- <1>
   553 00000BEB 000000000000000000- <1>
   553 00000BF4 000000000000000000- <1>
   553 00000BFD 000000000000000000- <1>
   553 00000C06 000000000000000000- <1>
   553 00000C0F 000000000000000000- <1>
   553 00000C18 000000000000000000- <1>
   553 00000C21 000000000000000000- <1>
   553 00000C2A 000000000000000000- <1>
   553 00000C33 000000000000000000- <1>
   553 00000C3C 000000000000000000- <1>
   553 00000C45 000000000000000000- <1>
   553 00000C4E 000000000000000000- <1>
   553 00000C57 000000000000000000- <1>
   553 00000C60 000000000000000000- <1>
   553 00000C69 000000000000000000- <1>
   553 00000C72 000000000000000000- <1>
   553 00000C7B 000000000000000000- <1>
   553 00000C84 000000000000000000- <1>
   553 00000C8D 000000000000000000- <1>
   553 00000C96 000000000000000000- <1>
   553 00000C9F 000000000000000000- <1>
   553 00000CA8 000000000000000000- <1>
   553 00000CB1 000000000000000000- <1>
   553 00000CBA 000000000000000000- <1>
   553 00000CC3 000000000000000000- <1>
   553 00000CCC 000000000000000000- <1>
   553 00000CD5 000000000000000000- <1>
   553 00000CDE 000000000000000000- <1>
   553 00000CE7 000000000000000000- <1>
   553 00000CF0 000000000000000000- <1>
   553 00000CF9 000000000000000000- <1>
   553 00000D02 000000000000000000- <1>
   553 00000D0B 000000000000000000- <1>
   553 00000D14 000000000000000000- <1>
   553 00000D1D 000000000000000000- <1>
   553 00000D26 000000000000000000- <1>
   553 00000D2F 000000000000000000- <1>
   553 00000D38 000000000000000000- <1>
   553 00000D41 000000000000000000- <1>
   553 00000D4A 000000000000000000- <1>
   553 00000D53 000000000000000000- <1>
   553 00000D5C 000000000000000000- <1>
   553 00000D65 000000000000000000- <1>
   553 00000D6E 000000000000000000- <1>
   553 00000D77 000000000000000000- <1>
   553 00000D80 000000000000000000- <1>
   553 00000D89 000000000000000000- <1>
   553 00000D92 000000000000000000- <1>
   553 00000D9B 000000000000000000- <1>
   553 00000DA4 000000000000000000- <1>
   553 00000DAD 000000000000000000- <1>
   553 00000DB6 000000000000000000- <1>
   553 00000DBF 000000000000000000- <1>
   553 00000DC8 000000000000000000- <1>
   553 00000DD1 000000000000        <1>
   554                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   554                              <2> .dfltBPB :
   174 00000DD7 E9                  <2>  db 0E9h
   175 00000DD8 00                  <2>  db 00h
   176 00000DD9 90                  <2>  db 90h
   177 00000DDA 534350444F537631    <2>  db 'SCPDOSv1'
   178 00000DE2 0002                <2>  dw 0200h
   179 00000DE4 01                  <2>  db 01h
   180 00000DE5 0100                <2>  dw 0001h
   181 00000DE7 02                  <2>  db 02h
   182 00000DE8 E000                <2>  dw 00E0h
   183 00000DEA 400B                <2>  dw 0B40h
   184 00000DEC F0                  <2>  db 0F0h
   185 00000DED 0900                <2>  dw 0009h
   186 00000DEF 1200                <2>  dw 0012h
   187 00000DF1 0200                <2>  dw 0002h
   188 00000DF3 00000000            <2>  dd 0
   189 00000DF7 00000000            <2>  dd 0
   190 00000DFB 00                  <2>  db 00h
   191 00000DFC 00                  <2>  db 00h
   192 00000DFD 29                  <2>  db 29h
   193 00000DFE 00000000            <2>  dd 0
   194 00000E02 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00000E0B 2020                <2>
   195 00000E0D 4641543132202020    <2>  db 'FAT12   '
   196 00000E15 000000000000000000- <2>  db 58 dup 0
   196 00000E1E 000000000000000000- <2>
   196 00000E27 000000000000000000- <2>
   196 00000E30 000000000000000000- <2>
   196 00000E39 000000000000000000- <2>
   196 00000E42 000000000000000000- <2>
   196 00000E4B 00000000            <2>
   555                              <1> endptr equ $
    65                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00000E4F 0F010D23000000      <1>     sidt [myIdt]
     8 00000E56 0FB6C0              <1>     movzx eax, al
     9 00000E59 4892                <1>     xchg rdx, rax
    10 00000E5B 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00000E5F 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00000E66 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00000E69 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00000E6D 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00000E71 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00000E75 894208              <1>     mov dword [rdx + 8], eax
    17 00000E78 C3                  <1>     ret
    18                              <1> myIdt:
    19 00000E79 0000                <1> .limit  dw 0
    20 00000E7B 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00000E83 50                  <1>     push rax
    25 00000E84 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00000E85 51                  <1>     push rcx
    27 00000E86 52                  <1>     push rdx
    28 00000E87 488D1574F4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00000E8E B829000000          <1>     mov eax, 29h
    30 00000E93 E8B7FFFFFF          <1>     call installInterrupt
    31 00000E98 488D156BF4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00000E9F B83B000000          <1>     mov eax, 3Bh
    33 00000EA4 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00000EA9 B401                <1>     mov ah, 01      ;Get buffer status
    36 00000EAB CD36                <1>     int 36h
    37 00000EAD 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00000EAF 30E4                <1>     xor ah, ah
    39 00000EB1 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00000EB3 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00000EB5 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00000EBA CD30                <1>     int 30h
    44 00000EBC B402                <1>     mov ah, 02h
    45 00000EBE 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00000EC0 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00000EC2 CD30                <1>     int 30h
    48 00000EC4 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00000EC6 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00000ECB CD30                <1>     int 30h
    51 00000ECD 5A                  <1>     pop rdx
    52 00000ECE 59                  <1>     pop rcx
    53 00000ECF 5B                  <1>     pop rbx
    54 00000ED0 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00000ED1 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00000ED6 50                  <1>     push rax
    58 00000ED7 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00000EDE 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00000EE2 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00000EE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00000EE4 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00000EE5 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00000EE7 CD3A                <1>     int 3Ah
    70 00000EE9 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00000EEB 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00000EEE E84D000000          <1>     call .bcd2Bin
    74 00000EF3 88C5                <1>     mov ch, al
    75 00000EF5 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00000EF8 E843000000          <1>     call .bcd2Bin
    77 00000EFD 88C1                <1>     mov cl, al
    78 00000EFF 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00000F02 E839000000          <1>     call .bcd2Bin
    80 00000F07 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00000F09 89C2                <1>     mov edx, eax
    82 00000F0B B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00000F0D CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00000F0F B404                <1>     mov ah, 04  ;Read RTC Date
    89 00000F11 CD3A                <1>     int 3Ah
    90 00000F13 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00000F15 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00000F18 E823000000          <1>     call .bcd2Bin
    94 00000F1D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00000F20 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    96 00000F26 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00000F29 E812000000          <1>     call .bcd2Bin
    98 00000F2E 88C6                <1>     mov dh, al  
    99 00000F30 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00000F33 E808000000          <1>     call .bcd2Bin
   101 00000F38 88C2                <1>     mov dl, al
   102 00000F3A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00000F3C CD21                <1>     int 21h
   104 00000F3E EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00000F40 51                  <1>     push rcx
   108 00000F41 89C1                <1>     mov ecx, eax
   109 00000F43 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00000F48 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00000F4E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00000F51 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00000F54 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00000F56 FFC9                <1>     dec ecx
   116 00000F58 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00000F5A 59                  <1>     pop rcx
   119 00000F5B C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00000F5C 5B                  <1>     pop rbx ;Get the pointer back
   122 00000F5D E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;    mov byte [7c02h], 0
   136                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   137 00000F62 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   138 00000F63 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   139 00000F65 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   140 00000F69 664489C0            <1>     mov ax, r8w
   141 00000F6D 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   142 00000F73 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   143 00000F79 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   144                              <1> 
   145 00000F80 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   146 00000F87 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   147 00000F8E 747C                <1>     jz .remInit ;No? Go to removables
   148 00000F90 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   148 00000F99 00                  <1>
   149 00000F9A B280                <1>     mov dl, 80h ;Start with HDD 0
   150                              <1> .primary:
   151 00000F9C 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   152 00000FA3 7467                <1>     je .remInit
   153 00000FA5 31C9                <1>     xor ecx, ecx    ;Sector 0
   154 00000FA7 E80E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   155 00000FAC 724F                <1>     jc .primaryEpilog
   156                              <1>     ;Here, check MBR or BPB
   157 00000FAE 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   158 00000FB7 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   159                              <1>     ;Now check if BPB or MBR
   160 00000FB9 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   161 00000FBB 8A6302              <1>     mov ah, byte [rbx + 2]
   162 00000FBE 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   163 00000FC2 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   164                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   165                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   166 00000FC4 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   167 00000FCB B104                <1>     mov cl, 4
   168                              <1> .checkPrimary:
   169 00000FCD 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   170 00000FD0 3C01                <1>     cmp al, 01
   171 00000FD2 7421                <1>     je .primaryFound
   172 00000FD4 3C04                <1>     cmp al, 04
   173 00000FD6 741D                <1>     je .primaryFound
   174 00000FD8 3C06                <1>     cmp al, 06
   175 00000FDA 7419                <1>     je .primaryFound
   176 00000FDC 3C0B                <1>     cmp al, 0Bh
   177 00000FDE 7415                <1>     je .primaryFound
   178 00000FE0 3C0C                <1>     cmp al, 0Ch
   179 00000FE2 7411                <1>     je .primaryFound
   180 00000FE4 3C0E                <1>     cmp al, 0Eh
   181 00000FE6 740D                <1>     je .primaryFound
   182 00000FE8 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   183 00000FEF FEC9                <1>     dec cl
   184 00000FF1 740A                <1>     jz .primaryEpilog
   185 00000FF3 EBD8                <1>     jmp short .checkPrimary
   186                              <1> .primaryFound:
   187                              <1>     ;Copy the first sector of this partition into memory
   188 00000FF5 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   189 00000FF8 E8CB000000          <1>     call .readSectorAndAddDataToTables
   190                              <1> .primaryEpilog:
   191 00000FFD FEC2                <1>     inc dl  ;Goto next BIOS drive
   192 00000FFF 88D6                <1>     mov dh, dl
   193 00001001 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   194 00001004 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   195 0000100A 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   196                              <1> .extended:
   197                              <1> ;We have gone through all the devices once
   198                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   199                              <1>     ;je .remInit ;If yes, get removable devices
   200                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   201                              <1>     ;xor ecx, ecx    ;Get MBR back
   202                              <1>     ;call .initReadSector
   203                              <1>     ;Now we eventually search MBR for a FAT extended partition
   204                              <1> .remInit:
   205                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   206                              <1> ; for some reason the removable drives stop working or dont exist.
   207 0000100C 488D35C4FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   208 00001013 488D3D3DFBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   209 0000101A 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   210 0000101D 48897708            <1>     mov qword [rdi + 8], rsi
   211                              <1> ;This forces the hard drives to start at C:
   212 00001021 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   213 00001024 30D2                <1>     xor dl, dl  ;Start with removable device 0
   214 00001026 4C0FB6C2            <1>     movzx r8, dl ;Once r8b becomes 2, go past the disk drives
   215                              <1>     ;rdi points to the space for the subsequent bpb's
   216 0000102A 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   217 00001031 7509                <1>     jnz .removables
   218 00001033 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   219 0000103A EB2D                <1>     jmp short .msdExit  ;And return!
   220                              <1> .removables:
   221 0000103C 31C9                <1>     xor ecx, ecx    ;Read sector 0
   222 0000103E E885000000          <1>     call .readSectorAndAddDataToTables
   223                              <1> .removableEpilogue:
   224 00001043 FEC2                <1>     inc dl  ;Goto next BIOS device now
   225 00001045 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   226 0000104B 7413                <1>     je .end
   227 0000104D 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   228 00001054 7504                <1>     jne .re0
   229 00001056 4D0FB6C1            <1>     movzx r8, r9b    ;Return to this drive number
   230                              <1> .re0:
   231 0000105A 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   232 0000105E 72DC                <1>     jb .removables
   233                              <1> .end:
   234 00001060 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   235 00001067 741D                <1>     je .singleRemDev
   236                              <1> .msdExit:
   237 00001069 5B                  <1>     pop rbx ;rbx points to the parameter block
   238                              <1>     ;Now we set the .optptr, .endptr and .numunt
   239 0000106A 50                  <1>     push rax
   240 0000106B 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   241 00001072 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   242 00001075 488D05DBFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   243 0000107C 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   244 00001080 58                  <1>     pop rax
   245 00001081 E94BFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   246                              <1> .singleRemDev:
   247                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   248 00001086 488D1DC0FAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   249 0000108D 8A15BAFAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   250 00001093 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   251 00001096 488D1DBAFAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   252 0000109D 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   253 000010A0 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   254 000010A4 C6059FFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   255 000010AB C60599FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   256 000010B2 FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   257 000010B8 EBAF                <1>     jmp short .msdExit
   258                              <1> .initReadSector:
   259                              <1> ;Called with sector number in rcx and BIOS device number in dl
   260 000010BA B482                <1>     mov ah, 82h ;Read
   261 000010BC B001                <1>     mov al, 1   ;One sector
   262 000010BE 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   263 000010C5 CD33                <1>     int 33h
   264 000010C7 C3                  <1>     ret
   265                              <1> 
   266                              <1> .readSectorAndAddDataToTables:
   267                              <1> ;Input:
   268                              <1> ;ecx = Sector number to read
   269                              <1> ;r15 -> bpb array entry for the BPB
   270                              <1> ;r8 = Logical Drive number (offset into arrays)
   271 000010C8 E8EDFFFFFF          <1>     call .initReadSector
   272                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000010CD 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000010CF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   273                              <1>     ;Now verify this is a BPB
   274 000010D0 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   275 000010D2 8A6302              <1>     mov ah, byte [rbx + 2]
   276 000010D5 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   277                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010D9 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   278                              <1>     ;Now copy data to internal tables
   279 000010DB 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   280 000010DE 51                  <1>     push rcx
   281 000010DF B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   282 000010E4 4C89FF              <1>     mov rdi, r15
   283 000010E7 F348A5              <1>     rep movsq   ;Copy the BPB
   284 000010EA 59                  <1>     pop rcx
   285                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   286 000010EB 488D1D5BFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   287 000010F2 4C01C3              <1>     add rbx, r8
   288                              <1>     ;Add device count to rbx to point to correct entry
   289 000010F5 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   290 000010F7 488D1D59FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   291 000010FE 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   292 00001102 4C893B              <1>     mov qword [rbx], r15
   293 00001105 49FFC0              <1>     inc r8  ;Goto next logical drive
   294 00001108 FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   295 0000110E 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   296                              <1>     return
    13                              <2> %%_ret:
    14 00001115 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                                  kDrvTextL  equ ($-$$)
    67                                  Segment kDrvDat follows=kDrvText vfollows=kDrvText align=1 valign=1
    68                                  kDrvDatL  equ ($-$$)
    69                                  Segment kDrvBSS follows=kDrvDat align=1 nobits
    70                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    71 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    72                                  dosEnd: ;Used to compute the size of resident DOS
    73                                  dosLen equ kDrvDatL + kDrvTextL + dtextL
    73          ------------------       info: assembly required 1+16+2 passes

