     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;If remote pc used fcb to open, use netFCB to make maximum restrictive share
   160                              <1> netFCBShare     equ 70h     
   161                              <1> noInherit       equ 80h
   162                              <1> ;Bits 8-12 reserved 0
   163                              <1> ;Fancy open mode bits
   164                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   165                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   166                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   168                              <1> 
   169                              <1> ;Attribute Byte
   170                              <1> readOnlyFile    equ 1h
   171                              <1> hiddenFile      equ 2h
   172                              <1> systemFile      equ 4h
   173                              <1> volLabelFile    equ 8h
   174                              <1> directoryFile   equ 10h ;Directory entry
   175                              <1> archiveFile     equ 20h
   176                              <1> charFile        equ 40h ;Reserved, never found in dir
   177                              <1> ;Device Info equates
   178                              <1> ;For a block device, bits [5:0] contain the drive number
   179                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   180                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   181                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   182                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   183                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   184                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   185                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   186                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   187                              <1> devCharDev      equ 80h ;If set, it is a char device!
   188                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   189                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   190                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   191                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   192                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   193                              <1>  
   194                              <1> ;------------------------------------------------------------------------;
   195                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   196                              <1> ; to an internal buffer, and then copying it to the specified location
   197                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   198                              <1> ; another request for the same sector from the same device is made, so 
   199                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   200                              <1> ; size, selected according to the largest detected sector size during 
   201                              <1> ; the initial loadup.
   202                              <1> ;
   203                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   204                              <1> ;
   205                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   206                              <1> ;------------------------------------------------------------------------;
   207                              <1> 
   208                              <1> struc bufferHdr
   209 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   210 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   211 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   212 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   213 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   214 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   215 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   216 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   217                              <1>     .dataarea:             ;Points to the start of the data area
   218                              <1> endstruc
   219                              <1> ;Buffer Flag equates
   220                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   221                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   222                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   223                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   224                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   225                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   226                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   227                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> ; Memory control block for each memory arena
   230                              <1> ;------------------------------------------------------------------------;
   231                              <1> struc mcb
   232 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   233 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   234 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   235                              <1>     ;The following byte is reserved outside of sysinit
   236 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   237 0000000E ????                <1>     .reserved   db 2 dup (?) 
   238                              <1>     .program:
   239                              <1> endstruc
   240                              <1> ;MCB equates
   241                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   242                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   243                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   244                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   245                              <1> mcbMarkCtn      equ "M"
   246                              <1> mcbMarkEnd      equ "Z"
   247                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   248                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   249                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   250                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   251                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   252                              <1> mcbSubIFS       equ "I" ;Unused for now
   253                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   254                              <1> mcbSubFCBS      equ "X" ;Unused for now
   255                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   256                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   257                              <1> mcbSubStacks    equ "S" ;Unused for now
   258                              <1> 
   259                              <1> 
   260                              <1> memFirstFit     equ 0   ;First free block goes to application
   261                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   262                              <1> memLastFit      equ 2   ;Last free block goes to application
   263                              <1> 
   264                              <1> ;Owner = Para aligned address => Owning application PSP
   265                              <1> ;...To consider...
   266                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   267                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   268                              <1> ;------------------------------------------------------------------------;
   269                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   270                              <1> ; following order, thus allowing for return values to be placed in the 
   271                              <1> ; registers by accessing the caller register stack frame.
   272                              <1> ;------------------------------------------------------------------------;
   273                              <1> struc callerFrame
   274 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   275 00000008 ????????????????    <1>     .rbx    dq ?    
   276 00000010 ????????????????    <1>     .rcx    dq ?
   277 00000018 ????????????????    <1>     .rdx    dq ?
   278 00000020 ????????????????    <1>     .rsi    dq ?
   279 00000028 ????????????????    <1>     .rdi    dq ?
   280 00000030 ????????????????    <1>     .rbp    dq ?
   281 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   282 00000040 ????????????????    <1>     .r9     dq ?
   283                              <1> ;Pushed by Processor when invoked via Interrupt
   284 00000048 ????????????????    <1>     .rip    dq ?
   285 00000050 ????????????????    <1>     .cs     dq ?
   286 00000058 ????????????????    <1>     .flags  dq ?
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc dpl
   290                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   291                              <1> ; server calls
   292 00000000 ????????????????    <1>     .rax    dq ?
   293 00000008 ????????????????    <1>     .rbx    dq ?
   294 00000010 ????????????????    <1>     .rcx    dq ?
   295 00000018 ????????????????    <1>     .rdx    dq ?
   296 00000020 ????????????????    <1>     .rsi    dq ?
   297 00000028 ????????????????    <1>     .rdi    dq ?
   298 00000030 ????????????????    <1>     .r8     dq ?
   299 00000038 ????????????????    <1>     .r9     dq ?
   300 00000040 ????????????????    <1>     .align  dq ?
   301 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   302 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   306 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   307 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   308 00000010 ????????????????    <1>     .newSFTVal      dq ?
   309 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   310 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   311 00000028 ????????????????    <1>     .newLastdrive   dq ?
   312 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   313 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   314 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   315 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   316 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   317 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   318 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   319                              <1> endstruc
   320                              <1> 
   321                              <1> struc filename
   322                              <1> ;8.3 File name struct
   323 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   324 00000008 ??????              <1>     .fExt   db 3 dup (?)
   325                              <1> endstruc
   326                              <1> 
   327                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   328 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on
   329 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   330 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   331 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   332 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   333 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   334 00000016 ????                <1>     .fileTime   dw ?  ;File time
   335 00000018 ????                <1>     .fileDate   dw ?  ;File date
   336 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   337 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   338                              <1> endstruc
   339                              <1> 
   340                              <1> struc psp
   341 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   342 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   343 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   344 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   345 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   346 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   347 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   348                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   349                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   350                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   351                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   352                              <1> ; always used and jftSize.
   353                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   354 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   355 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   356 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   357 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   358 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   359 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   360 0000005B ??                  <1>                 db ?  ;Reserved byte
   361                              <1> ;The below are in the same place as in DOS.
   362                              <1>     .cmdLineArgPtr: ;Symbol for future use
   363 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   364 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   365                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   366 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   367 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   368                              <1> endstruc
   369                              <1> 
   370                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   371                              <1> 
   372                              <1> struc clkStruc
   373 00000000 ????                <1>     .dateWord   dw ?
   374 00000002 ??                  <1>     .minutes    db ?
   375 00000003 ??                  <1>     .hours      db ?
   376 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   377 00000005 ??                  <1>     .seconds    db ?
   378                              <1> endstruc
   379                              <1> 
   380                              <1> 
   381                              <1> struc extCtryStruc
   382 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   383 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   384 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   385 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   386 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   387                              <1>                         ;0 = month day year hh:mm:ss
   388                              <1>                         ;1 = day month year hh:mm:ss
   389                              <1>                         ;2 = year month day hh:mm:ss
   390 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   391 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   392 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   393 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   394 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   395 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   396                              <1>                         ;0 = Symbol leads, without space
   397                              <1>                         ;1 = Symbol follows, without space
   398                              <1>                         ;2 = Symbol leads, one space
   399                              <1>                         ;3 = Symbol follows, one space
   400                              <1>                         ;4 = Symbol replace decimal separator
   401 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   402 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   403 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   404 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   405 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   406                              <1> endstruc
   407                              <1> 
   408                              <1> struc countryStruc
   409 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   410                              <1>                         ;0 = month day year hh:mm:ss
   411                              <1>                         ;1 = day month year hh:mm:ss
   412                              <1>                         ;2 = year month day hh:mm:ss
   413 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   414 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   415 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   416 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   417 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   418 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   419                              <1>                         ;0 = Symbol leads, without space
   420                              <1>                         ;1 = Symbol follows, without space
   421                              <1>                         ;2 = Symbol leads, one space
   422                              <1>                         ;3 = Symbol follows, one space
   423                              <1>                         ;4 = Symbol replace decimal separator
   424 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   425 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   426 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   427 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   428 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   429                              <1> endstruc
   430                              <1> 
   431                              <1> ;Critical Error AH bitfield equates
   432                              <1> critRead    equ 0h
   433                              <1> critWrite   equ 1h
   434                              <1> critDOS     equ 0h
   435                              <1> critFAT     equ 2h
   436                              <1> critDir     equ 4h
   437                              <1> critData    equ 6h
   438                              <1> critFailOK  equ 8h
   439                              <1> critRetryOK equ 10h
   440                              <1> critIgnorOK equ 20h
   441                              <1> critCharDev equ 80h
   442                              <1> 
   443                              <1> critIgnore  equ 0
   444                              <1> critRetry   equ 1
   445                              <1> critAbort   equ 2
   446                              <1> critFail    equ 3
   447                              <1> 
   448                              <1> ;MISC ASCII control chars
   449                              <1> NUL equ 00h ;^@         | ASCII Null
   450                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   451                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   452                              <1> BEL equ 07h ;^G         | ASCII Bell
   453                              <1> BSP equ 08h ;^H         | ASCII Backspace
   454                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   455                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   456                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   457                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   458                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   459                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   460                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   461                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   462                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   463                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   464                              <1> SPC equ 20h ;Printable  | ASCII Space
   465                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   466                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   467                              <1> 
   468                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   469                              <1> ;Extended Ascii Codes
   470                              <1> eF1     equ 3Bh ;F1 second byte
   471                              <1> eF2     equ 3Ch ;F2 second byte
   472                              <1> eF3     equ 3Dh ;F3 second byte
   473                              <1> eF4     equ 3Eh ;F4 second byte
   474                              <1> eF5     equ 3Fh ;F5 second byte
   475                              <1> eF6     equ 40h ;F6 second byte
   476                              <1> eF7     equ 41h ;F7 second byte
   477                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   478                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   479                              <1> eIns    equ 52h ;Insert second byte
   480                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   481                              <1> 
   482                              <1> ;Default Configuration for the system
   483                              <1> 
   484                              <1> buffersDefault  equ 30
   485                              <1> filesDefault    equ 20
   486                              <1> fcbsDefault     equ 4
   487                              <1> safeFcbsDeflt   equ 0
   488                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI44     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E815150000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F82FF180000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3DB3130000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D97130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[361B0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B99B110000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3D7C130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[361B0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010D62130000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3D7D0F0000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax             ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E809130000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 20h-2Fh
    57                              <1> adjInts:
    58 00000297 488D3D1A100000      <1>     lea rdi, intData
    59 0000029E B820000000          <1>     mov eax, 20h            ;Start with interrupt 20h
    60 000002A3 B930000000          <1>     mov ecx, 30h
    61 000002A8 E8F3120000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 22h and 24h correctly using DOS to get them low
    66 000002AD 488D157C180000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B822250000          <1>     mov eax, 2522h   ;Int 22h, set vector
    68 000002B9 CD21                <1>     int 21h
    69 000002BB 488D156E180000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B824250000          <1>     mov eax, 2524h
    71 000002C7 CD21                <1>     int 21h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012D72100000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012D73100000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D3555100000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B351A130000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 488905AD120000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [33000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E820150000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F82C7170000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B359D120000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1D8D120000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E849110000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F8286170000        <1>     jc OEMHALT
   146 000003AA E808100000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E89F110000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F826E170000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E8BB100000          <1>     call ejectKernelInit
   159 000003E1 0F8249170000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;------------------------------------------------;
   174                              <1> ;     Set up general PSP areas and DOS vars      ;
   175                              <1> ;------------------------------------------------;
   176                              <1> ;Ensure to link the default DOS vCON edit key
   177                              <1> ; controller routines before proceeding
   178 000003E7 488D85[2B2A0000]    <1>     lea rax, qword [rbp + editKeys]
   179 000003EE 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   179 000003F3 [32000000]          <1>
   180                              <1> 
   181                              <1> ;Additional DOS Vars init and fixups
   182 000003F7 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   182 000003FF FF                  <1>
   183 00000400 6466C70425-         <1>     mov word fs:[currentNdx], -1    ;Has to be -1 initially
   183 00000405 [39070000]FFFF      <1>
   184 0000040B 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   184 00000413 00                  <1>
   185 00000414 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   185 0000041C 00                  <1>
   186 0000041D 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   186 00000425 2F                  <1>
   187 00000426 488DBD[6D630000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   188 0000042D 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   188 00000432 [12020000]          <1>
   189 00000436 4801AD[D6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   190 0000043D 4801AD[DF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   191 00000444 4801AD[E8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   192 0000044B 4801AD[F1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   193                              <1> 
   194                              <1> ;Server Table setup
   195 00000452 488DBD[8F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   196 00000459 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   196 0000045E [931A0000]          <1>
   197                              <1> 
   198                              <1> ;Set network machine name to... nothing!
   199 00000462 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   200 00000469 B910000000          <1>     mov ecx, 10h    ;16 chars long
   201 0000046E B020                <1>     mov al, SPC ;Space char
   202 00000470 F3AA                <1>     rep stosb   ;Fill with space chars
   203                              <1> 
   204                              <1> ;Patch Data Table init
   205 00000472 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   206 00000479 488D85[17730000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   207 00000480 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   208 00000482 488D85[21730000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   209 00000489 48AB                <1>     stosq
   210 0000048B 488D85[2B730000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   211 00000492 48AB                <1>     stosq
   212 00000494 488D85[35730000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   213 0000049B 48AB                <1>     stosq
   214                              <1> 
   215                              <1> ;Initial PSP pointer fields
   216 0000049D 488D1D9C110000      <1>     lea rbx, qword [tempPSP]
   217 000004A4 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   217 000004A9 [1F040000]          <1>
   218 000004AD 53                  <1>     push rbx
   219 000004AE 4881C380000000      <1>     add rbx, psp.dta
   220 000004B5 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   220 000004BA [17040000]          <1>
   221 000004BE 5B                  <1>     pop rbx
   222 000004BF 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   223 000004C3 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   224 000004C7 4889DA              <1>     mov rdx, rbx
   225 000004CA B822350000          <1>     mov eax, 3522h  ;Get pointer for Int 22h in rbx
   226 000004CF CD21                <1>     int 21h
   227 000004D1 48895A0A            <1>     mov qword [rdx + psp.oldInt22h], rbx
   228 000004D5 B823350000          <1>     mov eax, 3523h
   229 000004DA CD21                <1>     int 21h
   230 000004DC 48895A12            <1>     mov qword [rdx + psp.oldInt23h], rbx
   231 000004E0 B824350000          <1>     mov eax, 3524h
   232 000004E5 CD21                <1>     int 21h
   233 000004E7 48895A1A            <1>     mov qword [rdx + psp.oldInt24h], rbx
   234                              <1> ;------------------------------------------------;
   235                              <1> ;              Setup DOSMGR Hooks                ;
   236                              <1> ;------------------------------------------------;   
   237 000004EB 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   238 000004F2 488D85[317B0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   239 000004F9 48AB                <1>     stosq   ;Store ptr for LaunchTask
   240 000004FB 48AB                <1>     stosq   ;Store ptr for TerminateTask
   241                              <1> ;------------------------------------------------;
   242                              <1> ;              Setup DLLMGR Hooks                ;
   243                              <1> ;------------------------------------------------;   
   244 000004FD 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   245 00000504 488D85[317B0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   246 0000050B 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   247 0000050D 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   248                              <1> ;------------------------------------------------;
   249                              <1> ;               Setup Share Hooks                ;
   250                              <1> ;------------------------------------------------;
   251 0000050F 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   252 00000516 488D9D[317B0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   253 0000051D 488D85[2B7B0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   254 00000524 48AB                <1>     stosq   ;Store bad for openFileCheck
   255 00000526 4893                <1>     xchg rax, rbx
   256 00000528 48AB                <1>     stosq   ;Store good for open
   257 0000052A 48AB                <1>     stosq   ;Store good for close
   258 0000052C 4893                <1>     xchg rax, rbx
   259                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   260 0000052E B905000000          <1>     mov ecx, 5
   261 00000533 F348AB              <1>     rep stosq
   262 00000536 4893                <1>     xchg rax, rbx
   263 00000538 48AB                <1>     stosq   ;Store good for check file lock exists
   264 0000053A 4893                <1>     xchg rax, rbx
   265                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   266 0000053C B903000000          <1>     mov ecx, 3
   267 00000541 F348AB              <1>     rep stosq
   268 00000544 4893                <1>     xchg rax, rbx
   269 00000546 48AB                <1>     stosq   ;Store good for close dup file share
   270 00000548 4893                <1>     xchg rax, rbx
   271 0000054A 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   272 0000054C 48AB                <1>     stosq   ;Store bad for update dir information
   273                              <1> 
   274                              <1> ;Finish by setting up internal DOS vars from OEM passed arguments.
   275 0000054E 0FB605B7100000      <1>     movzx eax, byte [OEMBIOS]
   276 00000555 85C0                <1>     test eax, eax
   277 00000557 741B                <1>     jz short skipOEMName
   278 00000559 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   279 00000560 48B8494F0000000000- <1>     mov rax, "IO"
   279 00000569 00                  <1>
   280 0000056A 488906              <1>     mov qword [rsi], rax
   281 0000056D C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   282                              <1> skipOEMName:
   283 00000574 8B05A3100000        <1>     mov eax, dword [OEMVERSION]
   284 0000057A 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   285                              <1> 
   286 00000580 488B058E100000      <1>     mov rax, qword [OEMPTR]
   287 00000587 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   288                              <1> 
   289 0000058E 0FB60575100000      <1>     movzx eax, byte [DFLTDRIVE]
   290 00000595 31DB                <1>     xor ebx, ebx
   291 00000597 3D19000000          <1>     cmp eax, 25
   292 0000059C 0F47C3              <1>     cmova eax, ebx
   293 0000059F 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   294                              <1> 
   295 000005A5 0FB6055C100000      <1>     movzx eax, byte [FILES]
   296 000005AC BB14000000          <1>     mov ebx, filesDefault
   297 000005B1 3D05000000          <1>     cmp eax, 5
   298 000005B6 0F42C3              <1>     cmovb eax, ebx
   299 000005B9 3DFE000000          <1>     cmp eax, 254
   300 000005BE 0F47C3              <1>     cmova eax, ebx
   301 000005C1 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   302                              <1> 
   303 000005C7 0FB6053B100000      <1>     movzx eax, byte [BUFFERS]
   304 000005CE BB1E000000          <1>     mov ebx, buffersDefault
   305 000005D3 85C0                <1>     test eax, eax
   306 000005D5 0F44C3              <1>     cmovz eax, ebx
   307 000005D8 3D63000000          <1>     cmp eax, 99
   308 000005DD 0F47C3              <1>     cmova eax, ebx
   309 000005E0 880523100000        <1>     mov byte [BUFFERS], al
   310                              <1> 
   311 000005E6 0FB6051E100000      <1>     movzx eax, byte [LASTDRIVE]
   312 000005ED BB05000000          <1>     mov ebx, lastDriveDeflt
   313 000005F2 39D8                <1>     cmp eax, ebx
   314 000005F4 0F42C3              <1>     cmovb eax, ebx
   315 000005F7 3D19000000          <1>     cmp eax, 25
   316 000005FC 0F47C3              <1>     cmova eax, ebx
   317 000005FF 880506100000        <1>     mov byte [LASTDRIVE], al
   318 00000605 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   319                              <1> 
   320                              <1> ;------------------------------------------------;
   321                              <1> ;          Find largest sector size              ;
   322                              <1> ;------------------------------------------------;
   323                              <1> sectorSizeSearch:
   324                              <1> ;Done by reading DPB's for each drive
   325 0000060B 31C0                <1>     xor eax, eax
   326 0000060D 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   326 00000612 [3B000000]          <1>
   327                              <1>     ;Go thru each block individually
   328                              <1> .findLargest:
   329 00000616 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   330 0000061A 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   331 0000061F 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   332 00000623 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   333 0000062A 75EA                <1>     jne short .findLargest  ;If not, keep checking
   334 0000062C 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   334 00000631 [5B000000]          <1>
   335                              <1> ;------------------------------------------------;
   336                              <1> ;                CDS array inits                 ;
   337                              <1> ;------------------------------------------------;
   338 00000635 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   339 0000063C E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   340 00000641 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   341                              <1> makeCDSArray:
   342                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   343                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   344                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   345 00000646 B85F000000          <1>     mov eax, cds_size
   346 0000064B F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   347 0000064D 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   348 00000652 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   349 00000655 31DB                <1>     xor ebx, ebx
   350 00000657 89C3                <1>     mov ebx, eax
   351 00000659 B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   352 0000065E CD21                <1>     int 21h
   353                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000660 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000662 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   354 00000663 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   355 00000666 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   356 0000066C C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   357 00000670 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   358                              <1> 
   359 00000678 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   359 0000067D [65000000]          <1>
   360 00000681 57                  <1>     push rdi
   361 00000682 51                  <1>     push rcx
   362 00000683 89C8                <1>     mov eax, ecx
   363 00000685 B95F000000          <1>     mov ecx, cds_size
   364 0000068A F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   365 0000068C 89C1                <1>     mov ecx, eax
   366 0000068E 31C0                <1>     xor eax, eax
   367 00000690 F3AA                <1>     rep stosb
   368 00000692 59                  <1>     pop rcx
   369 00000693 5F                  <1>     pop rdi
   370 00000694 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   370 00000699 [3B000000]          <1>
   371 0000069D B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   372                              <1> .tempCDS:
   373 000006A2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   374 000006A4 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   375 000006A8 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   376 000006AF 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   377 000006B5 31D2                <1>     xor edx, edx    ;Use edx for flags
   378 000006B7 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   379 000006BE 7409                <1>     je .skipValidCDS
   380 000006C0 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   381 000006C5 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   382                              <1> .skipValidCDS:
   383 000006C9 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   384 000006CD FFC0                <1>     inc eax ;Increment the drive letter
   385 000006CF 4881C75F000000      <1>     add rdi, cds_size   ;Goto next array entry
   386 000006D6 FFC9                <1>     dec ecx
   387 000006D8 75C8                <1>     jnz .tempCDS
   388 000006DA C3                  <1>     ret
   389                              <1> initialCDSWritten:
   390                              <1> ;------------------------------------------------;
   391                              <1> ;        Create a Default Temporary Buffer       ;
   392                              <1> ;------------------------------------------------;
   393 000006DB 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   393 000006E0 [5B000000]          <1>
   394 000006E4 81C320000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   395 000006EA 81C30F000000        <1>     add ebx, 0Fh
   396 000006F0 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   397 000006F3 B800480000          <1>     mov eax, 4800h
   398 000006F8 CD21                <1>     int 21h
   399 000006FA 0F8230140000        <1>     jc OEMHALT
   400 00000700 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   400 00000705 [5D000000]          <1>
   401 00000709 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   402 00000710 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   403 00000716 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   404 0000071C 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   405 00000724 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   406                              <1> ;------------------------------------------------;
   407                              <1> ;          Default File Handle Creation          ;
   408                              <1> ;                                                ;
   409                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   410                              <1> ;------------------------------------------------;
   411                              <1> defaultFileHandles:
   412 00000728 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   413 0000072F 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   413 00000734 [43000000]          <1>
   414 00000738 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   415 0000073F 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   416                              <1> 
   417 00000745 E8100C0000          <1>     call openStreams
   418 0000074A 0F82E0130000        <1>     jc OEMHALT
   419                              <1> ;------------------------------------------------;
   420                              <1> ;             Print Welcome Message              ;
   421                              <1> ;------------------------------------------------;
   422 00000750 488D15300A0000      <1>     lea rdx, strtmsg
   423 00000757 B409                <1>     mov ah, 09h
   424 00000759 CD21                <1>     int 21h    
   425                              <1> ;------------------------------------------------;
   426                              <1> ;               Load CONFIG.SYS                  ;
   427                              <1> ;------------------------------------------------;
   428                              <1> ;Setup stackframe, workout base 
   429                              <1> setupFrame:
   430 0000075B 55                  <1>     push rbp
   431 0000075C 4889E5              <1>     mov rbp, rsp
   432 0000075F 4881EC68000000      <1>     sub rsp, cfgFrame_size
   433 00000766 0FB6059C0E0000      <1>     movzx eax, byte [BUFFERS]
   434 0000076D 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   435 00000771 0FB605900E0000      <1>     movzx eax, byte [FILES]
   436 00000778 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   437 0000077C 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   438 00000784 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   439 0000078C 0FB605780E0000      <1>     movzx eax, byte [LASTDRIVE]
   440 00000793 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   441                              <1> 
   442 00000797 0FB6156C0E0000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   443 0000079E B40E                <1>     mov ah, 0Eh ;Select drive
   444 000007A0 CD21                <1>     int 21h
   445 000007A2 488D15250A0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   446 000007A9 B43D                <1>     mov ah, 3Dh ;Open file for reading
   447 000007AB B000                <1>     mov al, ReadAccess
   448 000007AD CD21                <1>     int 21h
   449 000007AF 0F8259070000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   450                              <1> ;------------------------------------------------;
   451                              <1> ;              Process CONFIG.SYS                ;
   452                              <1> ;------------------------------------------------;
   453                              <1> ;Create a stack frame with the following order.
   454                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   455                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   456                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   457                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   458                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   459                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   460                              <1> ;
   461                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   462                              <1> ;-------------------------------------------------------------------------;
   463                              <1> ; CONFIG.SYS processing pseudocode:-
   464                              <1> ;
   465                              <1> ; _START:
   466                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   467                              <1> ; If (EOF encountered)
   468                              <1> ;   Insert a terminating ^Z to the end of the line. 
   469                              <1> ;   Close handle.
   470                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   471                              <1> ;   If (CR or EOF encoutered before terminating char)
   472                              <1> ;       Bad line error msg. 
   473                              <1> ;       If (CR encountered)
   474                              <1> ;           Goto _START
   475                              <1> ;       Else
   476                              <1> ;           Goto _EXIT
   477                              <1> ;   Else 
   478                              <1> ;       If (Keyword AND not DEVICE) 
   479                              <1> ;           Store it's value on stack or change internal variable value
   480                              <1> ;       If (DEVICE)
   481                              <1> ;           Move endPtr after end of line and try load the driver.
   482                              <1> ;           If (driver doesn't exist or fails to init)
   483                              <1> ;               print bad driver error msg.
   484                              <1> ;       Else 
   485                              <1> ;           Bad line error msg
   486                              <1> ;       If (line terminated by CR)
   487                              <1> ;           Goto _START
   488                              <1> ; _EXIT:
   489                              <1> ;-------------------------------------------------------------------------;
   490                              <1> ; Note:
   491                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   492                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   493                              <1> ;   adjust the memory pointer and start loading next line.
   494                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   495                              <1> ;   data structures according to the values on the stack frame.
   496                              <1> ;-------------------------------------------------------------------------;
   497                              <1> ;Start CONFIG.SYS parsing here
   498                              <1> configParse:
   499 000007B5 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   500 000007B9 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   501 000007C1 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
   502 000007C9 B800480000          <1>     mov eax, 4800h
   503 000007CE BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
   504 000007D3 CD21                <1>     int 21h
   505 000007D5 0F8238010000        <1>     jc .stopProcessError
   506 000007DB 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
   507 000007DF 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
   508 000007E2 482D10000000        <1>     sub rax, mcb_size 
   509 000007E8 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
   510 000007F0 31C0                <1>     xor eax, eax
   511                              <1> .nextChar:
   512 000007F2 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   513 000007F6 6681FBFFFF          <1>     cmp bx, -1
   514 000007FB 0F8412010000        <1>     je .stopProcessError
   515 00000801 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   516 00000806 B901000000          <1>     mov ecx, 1  ;Read one byte
   517 0000080B CD21                <1>     int 21h
   518 0000080D 0F8200010000        <1>     jc .stopProcessError
   519 00000813 85C0                <1>     test eax, eax	;If this is zero, EOF reached
   520 00000815 0F84DD060000        <1>     jz .cfgExit
   521                              <1> .notEOF:
   522 0000081B 0FB602              <1>     movzx eax, byte [rdx]
   523 0000081E 3C0D                <1>     cmp al, CR
   524 00000820 7420                <1>     je short .endOfLine
   525 00000822 3C0A                <1>     cmp al, LF
   526 00000824 741C                <1>     je short .endOfLine
   527 00000826 3C1A                <1>     cmp al, EOF
   528 00000828 7410                <1>     je short .endOfFileChar
   529 0000082A 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   530 0000082B B813120000          <1>     mov eax, 1213h  ;Uppercase the char if it is uppercasable
   531 00000830 CD2F                <1>     int 2Fh
   532 00000832 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   533 00000834 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   534                              <1> .notChar:
   535 00000835 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   536 00000838 EBB8                <1>     jmp short .nextChar
   537                              <1> .endOfFileChar:
   538 0000083A 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
   539                              <1> .endOfLine:
   540                              <1> ;rdx points to terminating char
   541                              <1> ;First find the length of the instruction word
   542 00000842 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   543 00000846 31C9                <1>     xor ecx, ecx
   544                              <1> .cmdNameLenGet:
   545 00000848 AC                  <1>     lodsb
   546 00000849 E8B5000000          <1>     call .isCharTerminal
   547 0000084E 740A                <1>     jz short .endOfCommandFound
   548 00000850 FFC1                <1>     inc ecx
   549 00000852 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   550 00000858 72EE                <1>     jb short .cmdNameLenGet
   551                              <1> ;Else, fall through in error
   552                              <1> .endOfCommandFound:
   553                              <1> ;ecx has the length of the command
   554 0000085A 81F90A000000        <1>     cmp ecx, 10
   555 00000860 0F84AD000000        <1>     je .stopProcessError
   556 00000866 488D3D1B010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   557                              <1> .cmdSearch:
   558 0000086D 803FFF              <1>     cmp byte [rdi], -1
   559 00000870 0F849D000000        <1>     je .stopProcessError
   560 00000876 380F                <1>     cmp byte [rdi], cl
   561 00000878 7579                <1>     jne short .gotoNextCmd
   562                              <1>     ;Candidate command found, check said command is the command we want
   563 0000087A 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   564 0000087E 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   565 00000885 0F8488000000        <1>     je .stopProcessError
   566 0000088B 57                  <1>     push rdi
   567 0000088C 51                  <1>     push rcx
   568 0000088D 48FFC7              <1>     inc rdi ;Go to next char
   569 00000890 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   570 00000892 59                  <1>     pop rcx
   571 00000893 5F                  <1>     pop rdi
   572 00000894 755D                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   573                              <1>     ;Else, rdi points to the table entry from the head of the table
   574                              <1>     ;      rcx has the length of the name field
   575                              <1>     ;rdx points to the terminating char of the line 
   576 00000896 488D35EB000000      <1>     lea rsi, .keyTbl
   577 0000089D 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   578 000008A0 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   579 000008A6 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   580 000008A9 F8                  <1>     clc ;Ensure flags are happy before entering
   581 000008AA 55                  <1>     push rbp
   582 000008AB FFD6                <1>     call rsi    ;Call this function
   583 000008AD 5D                  <1>     pop rbp
   584 000008AE 7263                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   585 000008B0 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   586 000008B8 0F853A060000        <1>     jnz .cfgExit
   587 000008BE 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   588                              <1>     ;Read the next char. 
   589                              <1>     ;If EOF, exit.
   590                              <1>     ;Else if, LF, proceed to read line routine.
   591                              <1>     ;Else, advance ptr by one and proceed to process char
   592                              <1> .endCommandClear:
   593 000008C2 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   594 000008C6 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   595 000008CB B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   596 000008D0 CD21                <1>     int 21h
   597 000008D2 723F                <1>     jc .stopProcessError
   598 000008D4 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   599 000008D6 0F841C060000        <1>     jz .cfgExit
   600                              <1>     ;Do a trash check
   601 000008DC 8A02                <1>     mov al, byte [rdx]
   602 000008DE 3C1A                <1>     cmp al, EOF
   603 000008E0 0F8412060000        <1>     je .cfgExit
   604 000008E6 3C0A                <1>     cmp al, LF
   605 000008E8 0F8404FFFFFF        <1>     je .nextChar
   606 000008EE E928FFFFFF          <1>     jmp .notEOF
   607                              <1> ;CONFIG.SYS utility functions
   608                              <1> .gotoNextCmd:
   609 000008F3 0FB607              <1>     movzx eax, byte [rdi]
   610 000008F6 0503000000          <1>     add eax, 3
   611 000008FB 4801C7              <1>     add rdi, rax
   612 000008FE E96AFFFFFF          <1>     jmp .cmdSearch
   613                              <1> .isCharTerminal:
   614                              <1> ;Input: AL = Char to check
   615                              <1> ;Output: ZF=ZE -> Char terminal
   616                              <1> ;        ZF=NZ -> Char not terminal
   617 00000903 3C3D                <1>     cmp al, "="
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000905 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000907 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 00000908 3C20                <1>     cmp al, SPC
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000090A 74(07)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 0000090C 3C09                <1>     cmp al, TAB
   622                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000090E 74(07)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   623 00000910 3C3B                <1>     cmp al, ";"
   624                              <1>     return
    13                              <2> %%_ret:
    14 00000912 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   625                              <1> .stopProcessError:
   626 00000913 E836000000          <1>     call .badLineErrorMsg
   627                              <1>     ;Reset all values to OEM defaults
   628 00000918 0FB605EA0C0000      <1>     movzx eax, byte [BUFFERS]
   629 0000091F 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   630 00000923 0FB605DE0C0000      <1>     movzx eax, byte [FILES]
   631 0000092A 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   632 0000092E 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   633 00000936 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   634 0000093E 0FB605C60C0000      <1>     movzx eax, byte [LASTDRIVE]
   635 00000945 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   636 00000949 E9AA050000          <1>     jmp .cfgExit
   637                              <1>     
   638                              <1> .badLineErrorMsg:
   639                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   640 0000094E 50                  <1>     push rax
   641 0000094F 52                  <1>     push rdx
   642 00000950 488D150A000000      <1>     lea rdx, .speLine
   643 00000957 B800090000          <1>     mov eax, 0900h
   644 0000095C CD21                <1>     int 21h
   645 0000095E 5A                  <1>     pop rdx
   646 0000095F 58                  <1>     pop rax
   647                              <1>     return
    13                              <2> %%_ret:
    14 00000960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648 00000961 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   648 0000096A 6E6973656420636F6D- <1>
   648 00000973 6D616E6420696E2043- <1>
   648 0000097C 4F4E4649472E535953- <1>
   648 00000985 0D0A24              <1>
   649                              <1> .keyTbl: 
   650 00000988 05425245414B        <1>     db 5, "BREAK"           ;DONE
   651 0000098E 7800                <1> 	dw .breakHandler - .keyTbl
   652 00000990 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   653 00000998 AE00                <1> 	dw .bufHandler - .keyTbl
   654 0000099A 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   655 000009A2 6F05                <1> 	dw .countryScan - .keyTbl
   656 000009A4 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   657 000009AB 2B01                <1> 	dw .drvLoader - .keyTbl
   658 000009AD 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   659 000009B2 6F05                <1> 	dw .fcbHandler - .keyTbl
   660 000009B4 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   661 000009BA 6804                <1> 	dw .sftHandler - .keyTbl
   662 000009BC 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   662 000009C5 45                  <1>
   663 000009C6 1D05                <1> 	dw .lastdriveHandler - .keyTbl
   664 000009C8 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   665 000009CE 6F05                <1> 	dw .shellHandler - .keyTbl
   666 000009D0 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   667 000009D7 6F05                <1> 	dw .stacksHandler - .keyTbl
   668 000009D9 08445249565041524D  <1>     db 8, "DRIVPARM"
   669 000009E2 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   670 000009E4 FF                  <1> 	db -1	;End of table marker
   671                              <1> .cfgSkipLeadingSpaces:
   672                              <1> ;Input: rsi -> Start of string to skip spaces of
   673                              <1> ;Output: rsi -> First non-space char in string
   674 000009E5 50                  <1>     push rax
   675 000009E6 51                  <1>     push rcx
   676 000009E7 57                  <1>     push rdi
   677 000009E8 4889F7              <1>     mov rdi, rsi
   678 000009EB B820000000          <1>     mov eax, SPC
   679 000009F0 31C9                <1>     xor ecx, ecx
   680 000009F2 FFC9                <1>     dec ecx
   681 000009F4 F3AE                <1>     repe scasb  ;
   682 000009F6 4889FE              <1>     mov rsi, rdi
   683 000009F9 5F                  <1>     pop rdi
   684 000009FA 59                  <1>     pop rcx
   685 000009FB 58                  <1>     pop rax
   686 000009FC 48FFCE              <1>     dec rsi
   687                              <1>     return
    13                              <2> %%_ret:
    14 000009FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   688                              <1> 
   689                              <1> .breakHandler:
   690 00000A00 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   691 00000A04 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
   692                              <1>     ;This must be the word ON or OFF 
   693 00000A0B E8D5FFFFFF          <1>     call .cfgSkipLeadingSpaces
   694 00000A10 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   695 00000A12 66813E4F4E          <1>     cmp word [rsi], "ON"
   696 00000A17 7413                <1>     je .breakOn
   697 00000A19 66813E4F46          <1>     cmp word [rsi], "OF"
   698 00000A1E 7506                <1>     jne .breakBad
   699 00000A20 807E0246            <1>     cmp byte [rsi + 2], "F"
   700 00000A24 7408                <1>     je .breakCommon
   701                              <1> .breakBad:
   702 00000A26 E823FFFFFF          <1>     call .badLineErrorMsg
   703                              <1>     return
    13                              <2> %%_ret:
    14 00000A2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   704                              <1> .breakOn:
   705 00000A2C FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   706                              <1> .breakCommon:
   707 00000A2E B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   708 00000A33 CD21                <1>     int 21h
   709                              <1>     return
    13                              <2> %%_ret:
    14 00000A35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> 
   711                              <1> .bufHandler:
   712 00000A36 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   713 00000A3A 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
   714                              <1>     ;This must be at most three digits, anything else is a failure
   715 00000A41 E89FFFFFFF          <1>     call .cfgSkipLeadingSpaces
   716 00000A46 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   717 00000A49 31C9                <1>     xor ecx, ecx
   718 00000A4B AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   719 00000A4C 3C30                <1>     cmp al, "0"
   720 00000A4E 724C                <1>     jb .bufHandlerErr
   721 00000A50 3C39                <1>     cmp al, "9"
   722 00000A52 7748                <1>     ja .bufHandlerErr
   723 00000A54 FFC1                <1>     inc ecx ;Increment char counter
   724 00000A56 AC                  <1>     lodsb   ;Get second char
   725 00000A57 E846000000          <1>     call .bufHandlerTermCheck
   726 00000A5C 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   727 00000A5E 3C30                <1>     cmp al, "0"
   728 00000A60 723A                <1>     jb .bufHandlerErr
   729 00000A62 3C39                <1>     cmp al, "9"
   730 00000A64 7736                <1>     ja .bufHandlerErr
   731 00000A66 AC                  <1>     lodsb   ;Check no more chars!
   732 00000A67 E836000000          <1>     call .bufHandlerTermCheck
   733 00000A6C 752E                <1>     jne .bufHandlerErr
   734                              <1> .bufHandlerProcess:
   735 00000A6E 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   736 00000A70 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   737                              <1> .bufHandlerLp:
   738 00000A73 AC                  <1>     lodsb   ;Get the digit
   739 00000A74 E819000000          <1>     call .bufHandlerMul
   740 00000A79 67E304              <1>     jecxz .bufHandlerPrepExit
   741 00000A7C FFC9                <1>     dec ecx
   742 00000A7E EBF3                <1>     jmp short .bufHandlerLp 
   743                              <1> .bufHandlerPrepExit:
   744                              <1> ;edx has the value now, so place it in stack
   745 00000A80 0FB60D820B0000      <1>     movzx ecx, byte [BUFFERS]
   746 00000A87 85D2                <1>     test edx, edx
   747 00000A89 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
   748 00000A8C 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
   749 00000A90 F8                  <1>     clc
   750                              <1>     return
    13                              <2> %%_ret:
    14 00000A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> .bufHandlerMul:
   752 00000A92 2C30                <1>     sub al, "0" ;Convert to a binary value
   753 00000A94 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   754 00000A96 0FB7C0              <1>     movzx eax, ax
   755 00000A99 01C2                <1>     add edx, eax
   756                              <1>     return
    13                              <2> %%_ret:
    14 00000A9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> .bufHandlerErr:
   758 00000A9C E8ADFEFFFF          <1>     call .badLineErrorMsg
   759                              <1>     return
    13                              <2> %%_ret:
    14 00000AA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   760                              <1> .bufHandlerTermCheck:
   761 00000AA2 3C20                <1>     cmp al, SPC
   762                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA4 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00000AA6 3C09                <1>     cmp al, TAB
   764                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA8 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 00000AAA 3C0D                <1>     cmp al, CR
   766                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AAC 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 00000AAE 3C0A                <1>     cmp al, LF
   768                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AB0 74(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769                              <1>     return
    13                              <2> %%_ret:
    14 00000AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   770                              <1> 
   771                              <1> ;===============================
   772                              <1> ;   Device Driver Loader here  :
   773                              <1> ;===============================
   774                              <1> .drvLoader:
   775                              <1> ;    mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
   776 00000AB3 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   777 00000AB7 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
   778 00000ABE 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   779 00000AC1 B820000000          <1>     mov eax, SPC
   780 00000AC6 51                  <1>     push rcx
   781 00000AC7 31C9                <1>     xor ecx, ecx
   782 00000AC9 FFC9                <1>     dec ecx
   783 00000ACB F3AE                <1>     repe scasb      ;Skip leading spaces for name (between = and first char)
   784 00000ACD 59                  <1>     pop rcx
   785                              <1> ;Now search for the first char after pathname. 
   786 00000ACE 4889FE              <1>     mov rsi, rdi
   787                              <1> .drvFindEndOfFileName:
   788 00000AD1 AC                  <1>     lodsb ;Get char from string name
   789                              <1>     ;Was the char a primitive string terminator?
   790 00000AD2 3C20                <1>     cmp al, SPC
   791 00000AD4 740C                <1>     je short .fileNameFound
   792 00000AD6 3C1A                <1>     cmp al, EOF
   793 00000AD8 7408                <1>     je short .fileNameFound
   794 00000ADA 3C0D                <1>     cmp al, CR
   795 00000ADC 7404                <1>     je short .fileNameFound
   796 00000ADE 3C0A                <1>     cmp al, LF
   797 00000AE0 75EF                <1>     jne short .drvFindEndOfFileName
   798                              <1> .fileNameFound:
   799 00000AE2 48FFCE              <1>     dec rsi ;Point rdi to the space itself
   800 00000AE5 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   801 00000AE9 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   802 00000AEC 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   803 00000AF0 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   804                              <1>     ;rdx -> Filename
   805                              <1>     ;Here open the file to attempt to see how much space to 
   806                              <1>     ; allocate to the file for loading. 
   807                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   808                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   809                              <1>     ; which would allow for opening of files independently of calling programs'
   810                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   811 00000AF3 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   812 00000AF8 CD21                <1>     int 21h
   813 00000AFA 0F82B4020000        <1>     jc .drvBad
   814 00000B00 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   815 00000B03 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   816 00000B05 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   817 00000B0A CD21                <1>     int 21h
   818 00000B0C 89C6                <1>     mov esi, eax    ;Save the file size in esi
   819 00000B0E 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   820 00000B10 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   821 00000B15 CD21                <1>     int 21h
   822 00000B17 53                  <1>     push rbx        ;Push the file handle on the stack
   823 00000B18 BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   824 00000B1D B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   825 00000B22 CD21                <1>     int 21h
   826 00000B24 5B                  <1>     pop rbx         ;Get the handle back in rbx
   827 00000B25 0F8299020000        <1>     jc .drvMemClose
   828 00000B2B 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   829 00000B2E B940000000          <1>     mov ecx, imageDosHdr_size
   830 00000B33 B8003F0000          <1>     mov eax, 3F00h  ;READ
   831 00000B38 CD21                <1>     int 21h
   832 00000B3A 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   833 00000B3D 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   834 00000B40 730C                <1>     jnc short .headerReadOK
   835                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   836                              <1>     ;r8 must point to the block to free
   837 00000B42 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   838 00000B47 CD21                <1>     int 21h
   839 00000B49 E95F020000          <1>     jmp .drvBadClose
   840                              <1> .headerReadOK:
   841                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   842 00000B4E 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   843                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   844 00000B51 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   845 00000B56 7430                <1>     je short .exeDrivers
   846 00000B58 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   847 00000B5D 7429                <1>     je short .exeDrivers
   848                              <1> ;.COM drivers come down here
   849                              <1>     ;Get File Image Allocation Size in ecx here.
   850                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   851 00000B5F 31C9                <1>     xor ecx, ecx
   852 00000B61 31D2                <1>     xor edx, edx
   853 00000B63 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   854 00000B68 CD21                <1>     int 21h
   855                              <1>     ;eax now has the filesize. 
   856 00000B6A 89C1                <1>     mov ecx, eax
   857 00000B6C 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   858 00000B72 81C101000000        <1>     add ecx, 1h     ;... and round up!
   859 00000B78 C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   860 00000B7B 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   861 00000B81 73BF                <1>     jae .drvFreeMemAndHdl
   862 00000B83 E97C000000          <1>     jmp .loadCont
   863                              <1> .exeDrivers:
   864                              <1>     ;Get the file pointer for file header
   865 00000B88 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   866 00000B8B 31C9                <1>     xor ecx, ecx
   867 00000B8D B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   868 00000B92 CD21                <1>     int 21h
   869                              <1>     ;Now read in imageFileHeader here
   870 00000B94 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   871 00000B97 B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   872 00000B9C B8003F0000          <1>     mov eax, 3F00h  ;READ
   873 00000BA1 CD21                <1>     int 21h
   874 00000BA3 729D                <1>     jc short .drvFreeMemAndHdl
   875 00000BA5 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   876 00000BAA 7296                <1>     jb short .drvFreeMemAndHdl
   877 00000BAC 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   878 00000BB2 758E                <1>     jne .drvFreeMemAndHdl
   879 00000BB4 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   880 00000BBA 7586                <1>     jne .drvFreeMemAndHdl
   881 00000BBC 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   882 00000BC2 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   883                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   884 00000BC8 B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   885 00000BCD B8003F0000          <1>     mov eax, 3F00h  ;READ
   886 00000BD2 CD21                <1>     int 21h
   887 00000BD4 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   888 00000BDA 3D38000000          <1>     cmp eax, 56
   889 00000BDF 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   890                              <1>     ;Round up size requirement.
   891                              <1>     ;If .EXE, round up to nearest section alignment
   892 00000BE5 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   893 00000BE8 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   894 00000BEB 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   895 00000BED FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   896 00000BEF F7D0                <1>     not eax         ;Flip the set and clear bits
   897 00000BF1 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   898 00000BF3 01F1                <1>     add ecx, esi    ;Now round upwards!
   899 00000BF5 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   900 00000BF8 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   901 00000BFE 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   902                              <1> .loadCont:
   903 00000C04 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   904 00000C09 CD21                <1>     int 21h ;r8 has the pointer to the block for freeing
   905                              <1>     ;Now close the file
   906 00000C0B B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   907 00000C10 CD21                <1>     int 21h
   908 00000C12 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   909 00000C14 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   910 00000C19 CD21                <1>     int 21h         ;rax gets the pointer to load the program into
   911 00000C1B 0F82A3010000        <1>     jc .drvMemClose
   912                              <1>     ;Now set the subsystem marker and the owner to DOS
   913 00000C21 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   914 00000C25 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   915                              <1>     ;Build the overlay command block
   916 00000C2D 488D1DB4050000      <1>     lea rbx, cmdBlock
   917 00000C34 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   918 00000C37 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   919 00000C3B 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   920 00000C3F 4881C207000000      <1>     add rdx, 7  ;Go past DEVICE= to the null terminated pathname
   921 00000C46 B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   922 00000C4B CD21                <1>     int 21h
   923 00000C4D 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   924                              <1> .badDriverLoad:
   925 00000C4F 4C8B0592050000      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   926 00000C56 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   927 00000C5B CD21                <1>     int 21h
   928 00000C5D 488D1508000000      <1>     lea rdx, .drvMemMsg
   929 00000C64 B800090000          <1>     mov eax, 0900h
   930 00000C69 CD21                <1>     int 21h
   931                              <1>     return
    13                              <2> %%_ret:
    14 00000C6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932 00000C6C 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   932 00000C75 756768206D656D6F72- <1>
   932 00000C7E 7920666F7220647269- <1>
   932 00000C87 7665720D0A24        <1>
   933                              <1> .loadOk:
   934                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   935 00000C8D 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   936 00000C90 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   937                              <1>     ;Reset the command line to have a space at the null terminator
   938 00000C93 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   939 00000C97 53                  <1>     push rbx
   940 00000C98 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   941 00000C9B 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   942 00000C9D 5B                  <1>     pop rbx
   943                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   944                              <1>     ;Hence, rsi points to that byte!
   945                              <1>     ;Pointers of each header need adjustment relative to their load address,
   946                              <1>     ; and linking into the main driver chain after NUL.
   947                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   948                              <1>     ;                 Else, free using kernel eject routine.
   949 00000C9E 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   950                              <1> .driverPtrAdjustment:
   951 00000C9F 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   952 00000CA3 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   953 00000CA7 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   954 00000CAE 7408                <1>     je short .driverPtrAdjustmentDone
   955 00000CB0 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   956 00000CB3 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   957 00000CB6 EBE7                <1>     jmp short .driverPtrAdjustment
   958                              <1> .driverPtrAdjustmentDone:
   959 00000CB8 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   960                              <1>     ;Prepare for initialising the drivers in the arena
   961                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   962 00000CB9 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   963 00000CBC 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   963 00000CC5 00                  <1>
   964 00000CC6 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   964 00000CCB [1F040000]          <1>
   965 00000CCF 488D1D4B090000      <1>     lea rbx, initDrvBlk
   966 00000CD6 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   967 00000CDA 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   968 00000CDE 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   969                              <1> .driverInit:
   970 00000CE2 4C87E5              <1>     xchg r12, rbp
   971 00000CE5 E803080000          <1>     call initDriver
   972 00000CEA 725E                <1>     jc short .driverBadRbpAdjust
   973 00000CEC E8C6060000          <1>     call addDriverMarkers
   974 00000CF1 4C87E5              <1>     xchg r12, rbp
   975 00000CF4 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   976 00000CFA 7507                <1>     jnz short .driverInitialised
   977 00000CFC E85A080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   978 00000D01 724A                <1>     jc short .driverBad
   979                              <1> .driverInitialised:
   980 00000D03 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   981 00000D0A 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   982 00000D0E 75D2                <1>     jne short .driverInit ;If not, goto next driver
   983                              <1> ;Now we eject the init routines for the driver
   984                              <1> ;r8 points to the MCB data area already
   985 00000D10 31DB                <1>     xor ebx, ebx
   986 00000D12 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   987 00000D16 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   988 00000D1A 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   989 00000D21 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   990 00000D26 E871070000          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   991                              <1>     ;Link into main driver chain, 
   992                              <1>     ;r9 points to first driver in block
   993                              <1>     ;rsi points to last driver in block
   994 00000D2B 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   995 00000D2F 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   996 00000D36 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   997 00000D39 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   998 00000D3C 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   999                              <1> .driverExit:
  1000                              <1> ;Exit the init routine if it all works out, WOO!
  1001                              <1> ;Return values to original registers/memory locations
  1002 00000D3F 644C891C25-         <1>     mov qword fs:[currentPSP], r11
  1002 00000D44 [1F040000]          <1>
  1003 00000D48 F8                  <1>     clc
  1004                              <1>     return
    13                              <2> %%_ret:
    14 00000D49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1005                              <1> .driverBadRbpAdjust:
  1006 00000D4A 4C89E5              <1>     mov rbp, r12
  1007                              <1> .driverBad:
  1008                              <1>     ;Form the string to print
  1009 00000D4D 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
  1010 00000D54 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
  1011 00000D5A 750C                <1>     jnz short .driverCharBad    ;If not, exit
  1012                              <1>     ;MSD devices need to have something placed in there
  1013 00000D5C 48B84D534420646576- <1>     mov rax, "MSD dev "
  1013 00000D65 20                  <1>
  1014 00000D66 48AB                <1>     stosq   ;Store the 8 chars here
  1015                              <1> .driverCharBad:
  1016 00000D68 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
  1017 00000D6C 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
  1018                              <1> .driverBadPrint:
  1019 00000D6E 488D1510000000      <1>     lea rdx, .driverBad1
  1020 00000D75 B800090000          <1>     mov eax, 0900h  ;Print the string!
  1021 00000D7A CD21                <1>     int 21h
  1022 00000D7C B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
  1023 00000D81 CD21                <1>     int 21h
  1024 00000D83 EBBA                <1>     jmp short .driverExit
  1025 00000D85 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
  1025 00000D8E 6E697469616C697369- <1>
  1025 00000D97 6E6720647269766572- <1>
  1025 00000DA0 3A20                <1>
  1026 00000DA2 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
  1026 00000DAB 0A24                <1>
  1027                              <1> ;------------------
  1028                              <1> ;Bad exit cases
  1029                              <1> ;------------------
  1030                              <1> .drvBadClose:
  1031 00000DAD B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1032 00000DB2 CD21                <1>     int 21h
  1033                              <1> .drvBad:
  1034 00000DB4 488D1519000000      <1>     lea rdx, .drvBadMsg
  1035                              <1> .drvBad2:
  1036 00000DBB B800090000          <1>     mov eax, 0900h
  1037 00000DC0 CD21                <1>     int 21h
  1038 00000DC2 F8                  <1>     clc ;Never return with CF=CY
  1039                              <1>     return
    13                              <2> %%_ret:
    14 00000DC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1040                              <1> .drvMemClose:
  1041 00000DC4 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1042 00000DC9 CD21                <1>     int 21h
  1043 00000DCB 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
  1044 00000DD2 EBE7                <1>     jmp short .drvBad2
  1045                              <1> 
  1046 00000DD4 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
  1046 00000DDD 6D697373696E672066- <1>
  1046 00000DE6 696C656E616D650D0A- <1>
  1046 00000DEF 24                  <1>
  1047                              <1> 
  1048                              <1> .sftHandler:
  1049                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1050 00000DF0 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1051 00000DF4 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1052 00000DFB E8E5FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1053                              <1>     ;This must be at most three digits, anything else is a failure
  1054 00000E00 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1055 00000E03 31C9                <1>     xor ecx, ecx
  1056 00000E05 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1057 00000E06 3C30                <1>     cmp al, "0"
  1058 00000E08 0F8280000000        <1>     jb .sftHandlerErr
  1059 00000E0E 3C39                <1>     cmp al, "9"
  1060 00000E10 777C                <1>     ja .sftHandlerErr
  1061 00000E12 FFC1                <1>     inc ecx ;Increment char counter
  1062 00000E14 AC                  <1>     lodsb   ;Get second char
  1063 00000E15 E87A000000          <1>     call .sftHandlerTermCheck
  1064 00000E1A 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1065 00000E1C 3C30                <1>     cmp al, "0"
  1066 00000E1E 726E                <1>     jb .sftHandlerErr
  1067 00000E20 3C39                <1>     cmp al, "9"
  1068 00000E22 776A                <1>     ja .sftHandlerErr
  1069 00000E24 FFC1                <1>     inc ecx ;Increment char counter
  1070 00000E26 AC                  <1>     lodsb   ;Get third char
  1071 00000E27 E868000000          <1>     call .sftHandlerTermCheck
  1072 00000E2C 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1073 00000E2E 3C30                <1>     cmp al, "0"
  1074 00000E30 725C                <1>     jb .sftHandlerErr
  1075 00000E32 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1076 00000E34 7758                <1>     ja .sftHandlerErr
  1077 00000E36 AC                  <1>     lodsb   ;Check no more chars!
  1078 00000E37 E858000000          <1>     call .sftHandlerTermCheck
  1079 00000E3C 7550                <1>     jne .sftHandlerErr
  1080 00000E3E FFC1                <1>     inc ecx ;Increment char counter
  1081                              <1> .sftHandlerProcess:
  1082 00000E40 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1083 00000E42 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1084                              <1> .sftHandlerLp:
  1085 00000E45 FFC9                <1>     dec ecx
  1086 00000E47 AC                  <1>     lodsb   ;Get the digit
  1087 00000E48 E819000000          <1>     call .sftHandlerMul
  1088 00000E4D 67E302              <1>     jecxz .sftHandlerPrepExit
  1089 00000E50 EBF3                <1>     jmp short .sftHandlerLp 
  1090                              <1> .sftHandlerPrepExit:
  1091                              <1> ;edx has the value now, so place it in stack
  1092 00000E52 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1093 00000E57 81FA08000000        <1>     cmp edx, 8
  1094 00000E5D 0F42D1              <1>     cmovb edx, ecx
  1095 00000E60 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1096 00000E64 F8                  <1>     clc
  1097                              <1>     return
    13                              <2> %%_ret:
    14 00000E65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> .sftHandlerMul:
  1099                              <1> ;Input:
  1100                              <1> ;al = digit to add to result (ASCII digit)
  1101                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
  1102                              <1> ;rdx = Accumulated sum
  1103                              <1> ;Output:
  1104                              <1> ;rdx = Accumulated sum with al added
  1105                              <1> ;eax is destroyed
  1106                              <1> ;All other registers preserved
  1107 00000E66 51                  <1>     push rcx
  1108 00000E67 52                  <1>     push rdx
  1109 00000E68 0FB6C0              <1>     movzx eax, al
  1110 00000E6B 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
  1111 00000E70 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
  1112 00000E75 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
  1113 00000E77 BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
  1114 00000E7C B964000000          <1>     mov ecx, 100
  1115 00000E81 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
  1116 00000E84 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
  1117 00000E87 F7E3                <1>     mul ebx    ;Multiply the base offset to eax
  1118 00000E89 5A                  <1>     pop rdx ;Get the accumulated value back
  1119 00000E8A 01C2                <1>     add edx, eax    ;Add this result over
  1120 00000E8C 59                  <1>     pop rcx
  1121                              <1>     return
    13                              <2> %%_ret:
    14 00000E8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1122                              <1> .sftHandlerErr:
  1123 00000E8E E8BBFAFFFF          <1>     call .badLineErrorMsg
  1124                              <1>     return
    13                              <2> %%_ret:
    14 00000E93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1125                              <1> .sftHandlerTermCheck:
  1126 00000E94 3C20                <1>     cmp al, SPC
  1127                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E96 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1128 00000E98 3C09                <1>     cmp al, TAB
  1129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E9A 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1130 00000E9C 3C0D                <1>     cmp al, CR
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E9E 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132 00000EA0 3C0A                <1>     cmp al, LF
  1133                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000EA2 74(93)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1134                              <1>     return
    13                              <2> %%_ret:
    14 00000EA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> 
  1136                              <1> .lastdriveHandler:
  1137 00000EA5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1138 00000EA9 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1139 00000EB0 E830FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1140 00000EB5 AC                  <1>     lodsb   ;Get this char
  1141 00000EB6 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1142 00000EB9 50                  <1>     push rax    ;Push on stack
  1143 00000EBA B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1144 00000EBF CD2F                <1>     int 2Fh
  1145 00000EC1 5B                  <1>     pop rbx
  1146 00000EC2 3C5A                <1>     cmp al, "Z"
  1147 00000EC4 77C8                <1>     ja .sftHandlerErr
  1148 00000EC6 3C41                <1>     cmp al, "A"
  1149 00000EC8 72C4                <1>     jb .sftHandlerErr
  1150 00000ECA 803E0D              <1>     cmp byte [rsi], CR
  1151 00000ECD 740F                <1>     je .ldProceed
  1152 00000ECF 803E0A              <1>     cmp byte [rsi], LF
  1153 00000ED2 740A                <1>     je .ldProceed
  1154 00000ED4 803E09              <1>     cmp byte [rsi], TAB
  1155 00000ED7 7405                <1>     je .ldProceed
  1156 00000ED9 803E20              <1>     cmp byte [rsi], SPC
  1157 00000EDC 75B0                <1>     jne .sftHandlerErr
  1158                              <1> .ldProceed:
  1159 00000EDE 2C41                <1>     sub al, "A" ;Convert into a number
  1160 00000EE0 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1161 00000EE3 BA05000000          <1>     mov edx, lastDriveDeflt
  1162 00000EE8 3D05000000          <1>     cmp eax, lastDriveDeflt
  1163 00000EED 0F42C2              <1>     cmovb eax, edx
  1164 00000EF0 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1165 00000EF4 F8                  <1>     clc
  1166                              <1>     return
    13                              <2> %%_ret:
    14 00000EF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> .ldBad:
  1168 00000EF6 F9                  <1>     stc
  1169                              <1> .countryScan:
  1170                              <1> .fcbHandler:
  1171                              <1> .shellHandler:
  1172                              <1> .stacksHandler:
  1173                              <1> .drivParm:
  1174                              <1>     return
    13                              <2> %%_ret:
    14 00000EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1175                              <1> 
  1176                              <1> .cfgExit:
  1177 00000EF8 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1178 00000EFC B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
  1179 00000F01 CD21                <1>     int 21h ;bx already has the handle
  1180 00000F03 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
  1181 00000F07 B800490000          <1>     mov eax, 4900h  ;FREE
  1182 00000F0C CD21                <1>     int 21h
  1183                              <1> ;------------------------------------------------;
  1184                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1185                              <1> ;                  CONFIG.SYS                    ;
  1186                              <1> ;------------------------------------------------;
  1187                              <1> ;Add additional buffers.
  1188                              <1> ;Add additional SFT entries.
  1189                              <1> ;Add additional FCBS.
  1190                              <1> ;Create a larger CDS if needed.
  1191                              <1> noCfg:
  1192                              <1> ;Start with buffers:
  1193 00000F0E 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
  1194 00000F12 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
  1195 00000F18 0F849D000000        <1>     je .skipBuffers
  1196 00000F1E FFC9                <1>     dec ecx  ;Minus one now
  1197 00000F20 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1198                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1199 00000F28 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
  1199 00000F2D [5B000000]          <1>
  1200 00000F31 0520000000          <1>     add eax, bufferHdr_size ;eax has the size to add
  1201 00000F36 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
  1202 00000F37 F7E1                <1>     mul ecx ;Get total size to allocate in eax
  1203 00000F39 5A                  <1>     pop rdx     ;and get the total value back in rdx
  1204 00000F3A 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
  1205 00000F3C 81C30F000000        <1>     add ebx, 0Fh
  1206 00000F42 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
  1207 00000F45 B800480000          <1>     mov eax, 4800h  ;ALLOC
  1208 00000F4A CD21                <1>     int 21h
  1209 00000F4C 726D                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
  1210                              <1>     ;Each buffer has no flags, drive number must be -1
  1211 00000F4E 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
  1212 00000F51 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
  1213 00000F54 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
  1214 00000F5A 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
  1215 00000F62 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
  1216 00000F66 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
  1216 00000F6B [5D000000]          <1>
  1217 00000F6F 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
  1218 00000F72 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1219 00000F75 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1220 00000F77 FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
  1221 00000F79 67E321              <1>     jecxz .lastBuffer
  1222                              <1> .bufferLoop:
  1223 00000F7C 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1224 00000F7F 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1225 00000F82 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1226 00000F88 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1227 00000F8C 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1228 00000F8F 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1229 00000F92 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1230 00000F96 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1231 00000F99 FFC9                <1>     dec ecx
  1232 00000F9B 75DF                <1>     jnz .bufferLoop
  1233                              <1> .lastBuffer:
  1234 00000F9D 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1235 00000FA0 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1236 00000FA7 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1237 00000FAD 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1238 00000FB1 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1239 00000FB4 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1240 00000FB7 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1241                              <1> .skipBuffers:
  1242                              <1> ;Now build a new SFT header for the number of files specified by user
  1243 00000FBB 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1244 00000FBF 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1245 00000FC5 7663                <1>     jbe short .skipSFT
  1246                              <1>     ;First compute how big this new arena needs to be
  1247 00000FC7 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
  1248 00000FCD B84F000000          <1>     mov eax, sft_size
  1249 00000FD2 F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1250 00000FD4 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1251 00000FD9 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1252 00000FDB 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1253 00000FE1 C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1254 00000FE4 B800480000          <1>     mov eax, 4800h
  1255 00000FE9 CD21                <1>     int 21h
  1256 00000FEB 723D                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
  1257 00000FED 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
  1257 00000FF2 [43000000]          <1>
  1258 00000FF6 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
  1259 00000FF9 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
  1260 00000FFD 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
  1261 00001004 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1262 0000100A 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1263 00001012 C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
  1264                              <1>     ;Point rdi to first sft in this arena
  1265 00001016 488D781A            <1>     lea rdi, qword [rax + sfth_size + mcb_size]
  1266                              <1> .initExtraSFTs:
  1267 0000101A 66C7070000          <1>     mov word [rdi], 0
  1268 0000101F 4881C74F000000      <1>     add rdi, sft_size   ;Goto next SFT
  1269 00001026 FFC9                <1>     dec ecx
  1270 00001028 75F0                <1>     jnz .initExtraSFTs  ;Remember uop hybridisation (don't use loop)
  1271                              <1> .skipSFT:
  1272                              <1> ;FCBS now
  1273 0000102A 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1274 0000102E 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
  1275 00001031 B84F000000          <1>     mov eax, sft_size
  1276 00001036 F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1277 00001038 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1278 0000103D 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1279 0000103F 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1280 00001045 C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1281 00001048 B800480000          <1>     mov eax, 4800h
  1282 0000104D CD21                <1>     int 21h
  1283 0000104F 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
  1284 00001051 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
  1284 00001056 [6D000000]          <1>
  1285 0000105A 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
  1286 0000105E 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
  1287 00001065 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1288 0000106B 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1289 00001073 C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
  1290                              <1> .skipFCBS:
  1291                              <1> ;And CDS now
  1292 00001077 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1293 0000107B 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
  1294 00001083 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
  1295                              <1>     ;Else, we first free the old CDS and then reallocate
  1296 00001085 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
  1296 0000108A [65000000]          <1>
  1297 0000108E B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
  1298 00001093 CD21                <1>     int 21h
  1299 00001095 720D                <1>     jc short .skipCDS
  1300 00001097 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1301 0000109F E8A2F5FFFF          <1>     call makeCDSArray
  1302                              <1> .skipCDS:
  1303 000010A4 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1304 000010A7 5D                  <1>     pop rbp ;Stack frame no longer needed
  1305                              <1> ;Now we close all five default handles and open AUX, CON and PRN
  1306                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
  1307 000010A8 31DB                <1>     xor ebx, ebx
  1308                              <1> closeHandlesLoop:
  1309 000010AA B8003E0000          <1>     mov eax, 3e00h  ;Close
  1310 000010AF CD21                <1>     int 21h
  1311 000010B1 FFC3                <1>     inc ebx ;Goto next handle
  1312 000010B3 81FB06000000        <1>     cmp ebx, 6
  1313 000010B9 75EF                <1>     jne closeHandlesLoop
  1314 000010BB E89A020000          <1>     call openStreams
  1315                              <1> l1:
  1316 000010C0 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
  1317 000010C5 B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
  1318 000010CA CD21                <1>     int 21h         ;Malloc and get pointer in rbx
  1319 000010CC 0F828F000000        <1>     jc badMem
  1320 000010D2 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
  1321 000010D5 4881EB10000000      <1>     sub rbx, mcb_size
  1322 000010DC 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
  1323 000010E4 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
  1324 000010EB 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
  1325 000010F2 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
  1326                              <1>     ;Input: r8 = PSP
  1327                              <1>     ;       r9 = Memory Arena Pointer
  1328                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
  1329 000010F5 E87A0A0000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
  1330 000010FA 720E                <1>     jc short l2 
  1331 000010FC 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
  1332 00001103 B800490000          <1>     mov eax, 4900h  ;Free the memory block
  1333 00001108 CD21                <1>     int 21h
  1334                              <1> l2:
  1335                              <1>     ;Load COMMAND.COM
  1336                              <1>     ;Get currentPSP ptr
  1337 0000110A B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
  1338 0000110C CD21                <1>     int 21h
  1339 0000110E B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1340 00001110 CD21                <1>     int 21h
  1341 00001112 0441                <1>     add al, "A"
  1342 00001114 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1343                              <1> 
  1344 0000111A 488D1DC7000000      <1>     lea rbx, cmdBlock
  1345 00001121 488D3518050000      <1>     lea rsi, tempPSP
  1346 00001128 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
  1347 0000112C 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1348 00001130 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
  1349 00001134 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1350 00001138 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
  1351 0000113F 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
  1352 00001143 488D158F000000      <1>     lea rdx, cmdLine
  1353 0000114A B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1354 0000114F CD21                <1>     int 21h
  1355 00001151 488D1545000000      <1>     lea rdx, badCom
  1356 00001158 B409                <1>     mov ah, 09h ;Print message
  1357 0000115A CD21                <1>     int 21h
  1358                              <1> hltLbl:
  1359 0000115C F4                  <1>     hlt
  1360 0000115D F390                <1>     pause
  1361 0000115F EBFB                <1>     jmp short hltLbl
  1362                              <1> badMem:
  1363 00001161 488D1509000000      <1>     lea rdx, memErr
  1364 00001168 B800090000          <1>     mov eax, 0900h
  1365 0000116D CD21                <1>     int 21h
  1366 0000116F EBEB                <1>     jmp short hltLbl
  1367 00001171 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
  1367 0000117A 6D6F7279204572726F- <1>
  1367 00001183 720A0D24            <1>
  1368                              <1> ;--------------------------------
  1369                              <1> ;       DATA FOR SYSINIT        :
  1370                              <1> ;--------------------------------
  1371 00001187 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1371 00001190 5343502F444F532E2E- <1>
  1371 00001199 2E0A0D24            <1>
  1372 0000119D 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1372 000011A6 7373696E6720436F6D- <1>
  1372 000011AF 6D616E6420696E7465- <1>
  1372 000011B8 727072657465720A0D- <1>
  1372 000011C1 24                  <1>
  1373 000011C2 434F4E00            <1> conName db "CON",0
  1374 000011C6 41555800            <1> auxName db "AUX",0
  1375 000011CA 50524E00            <1> prnName db "PRN",0
  1376                              <1> 
  1377 000011CE 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1377 000011D7 5300                <1>
  1378 000011D9 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
  1378 000011E2 442E434F4D00        <1>
  1379                              <1> 
  1380                              <1> cmdBlock:   ;Used also for overlay block
  1381                              <1>     istruc execProg
  1382 000011E8 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
  1383 000011F0 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
  1384 000011F8 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1385 00001200 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1386                              <1>     iend
  1387                              <1> exceptData:
  1388 00001208 [BE65000000000000]  <1>     dq i0
  1389 00001210 [C565000000000000]  <1>     dq i1
  1390 00001218 [CF65000000000000]  <1>     dq i2
  1391 00001220 [D965000000000000]  <1>     dq i3
  1392 00001228 [E365000000000000]  <1>     dq i4
  1393 00001230 [ED65000000000000]  <1>     dq i5
  1394 00001238 [F465000000000000]  <1>     dq i6
  1395 00001240 [FB65000000000000]  <1>     dq i7
  1396 00001248 [0266000000000000]  <1>     dq i8
  1397 00001250 [0966000000000000]  <1>     dq i9
  1398 00001258 [1066000000000000]  <1>     dq i10
  1399 00001260 [1766000000000000]  <1>     dq i11
  1400 00001268 [1E66000000000000]  <1>     dq i12
  1401 00001270 [2566000000000000]  <1>     dq i13
  1402 00001278 [2C66000000000000]  <1>     dq i14
  1403 00001280 [3366000000000000]  <1>     dq i15
  1404 00001288 [3A66000000000000]  <1>     dq i16
  1405 00001290 [4166000000000000]  <1>     dq i17
  1406 00001298 [4866000000000000]  <1>     dq i18
  1407 000012A0 [4F66000000000000]  <1>     dq i19
  1408 000012A8 [5666000000000000]  <1>     dq i20
  1409 000012B0 [5D66000000000000]  <1>     dq i21
  1410                              <1> 
  1411                              <1> intData:
  1412 000012B8 [A857000000000000]  <1>     dq terminateProcess ;Int 20h
  1413 000012C0 [8F71000000000000]  <1>     dq functionDispatch ;Int 21h
  1414 000012C8 [301B000000000000]  <1>     dq OEMHALT          ;Int 22h, If sysinit terminates, halt system
  1415 000012D0 [E772000000000000]  <1>     dq defaultIretq     ;Int 23h, ignore any CTRL+C during init
  1416 000012D8 [F269000000000000]  <1>     dq dosDefCritErrHdlr 
  1417 000012E0 [CB6A000000000000]  <1>     dq absDiskRead      ;Int 25h
  1418 000012E8 [AC6A000000000000]  <1>     dq absDiskWrite     ;Int 26h
  1419 000012F0 [AF57000000000000]  <1>     dq terminateRes     ;Int 27h
  1420 000012F8 [E772000000000000]  <1>     dq defaultIretq     ;Int 28h
  1421 00001300 [E772000000000000]  <1>     dq defaultIretq     ;Int 29h
  1422 00001308 [E772000000000000]  <1>     dq defaultIretq     ;Int 2Ah
  1423 00001310 [E772000000000000]  <1>     dq defaultIretq     ;Int 2Bh
  1424 00001318 [E772000000000000]  <1>     dq defaultIretq     ;Int 2Ch
  1425 00001320 [E772000000000000]  <1>     dq defaultIretq     ;Int 2Dh
  1426 00001328 [E772000000000000]  <1>     dq defaultIretq     ;Int 2Eh
  1427 00001330 [367A000000000000]  <1>     dq multiplexHdlr    ;Int 2Fh, multiplex default handler
  1428                              <1> nData:
  1429 00001338 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
  1430 00001340 0480                <1>     dw 08004h
  1431 00001342 [0B6A000000000000]  <1>     dq nulStrat
  1432 0000134A [116A000000000000]  <1>     dq nulIntr
  1433 00001352 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1434                              <1> 
  1435                              <1> openStreams:
  1436                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
  1437 0000135A 488D1565FEFFFF      <1>     lea rdx, auxName
  1438 00001361 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1439 00001366 CD21                <1>     int 21h
  1440                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001368 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000136A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1441 0000136B 89C3                <1>     mov ebx, eax
  1442 0000136D B903000000          <1>     mov ecx, 3  ;
  1443 00001372 B800460000          <1>     mov eax, 4600h  ;DUP2
  1444 00001377 CD21                <1>     int 21h
  1445                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001379 72(6A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 0000137B B8003E0000          <1>     mov eax, 3e00h
  1447 00001380 CD21                <1>     int 21h ;Close the original handle
  1448                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001382 72(6A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1449 00001384 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1450 00001389 488D1532FEFFFF      <1>     lea rdx, conName
  1451 00001390 CD21                <1>     int 21h
  1452                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001392 72(6A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1453 00001394 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1454 00001396 B800450000          <1>     mov eax, 4500h  ;DUP
  1455 0000139B CD21                <1>     int 21h
  1456                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000139D 72(6A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1457 0000139F B800450000          <1>     mov eax, 4500h  ;DUP
  1458 000013A4 CD21                <1>     int 21h
  1459                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013A6 72(6A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1460 000013A8 488D151BFEFFFF      <1>     lea rdx, prnName
  1461 000013AF B8023D0000          <1>     mov eax, 3D02h
  1462 000013B4 CD21                <1>     int 21h       ;Open file
  1463                              <1>     return
    13                              <2> %%_ret:
    14 000013B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> addDriverMarkers:
  1466                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
  1467                              <1> ; information and owner to each memory block. Used for drivers that allocate
  1468                              <1> ; their own memory using ALLOC.
  1469                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
  1470                              <1> ;       fs -> Dos Data Area
  1471                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
  1472                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
  1473                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
  1474 000013B7 50                  <1>     push rax
  1475 000013B8 53                  <1>     push rbx
  1476 000013B9 51                  <1>     push rcx
  1477 000013BA 56                  <1>     push rsi
  1478 000013BB 57                  <1>     push rdi
  1479 000013BC 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
  1480 000013C3 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
  1481 000013CA B844000000          <1>     mov eax, mcbSubDriver
  1482 000013CF BB4C000000          <1>     mov ebx, mcbSubDrvExtra
  1483 000013D4 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
  1484 000013DB 0F44C3              <1>     cmove eax, ebx
  1485 000013DE EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
  1486                              <1> .checkSubsystem:
  1487 000013E0 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
  1488 000013E4 7512                <1>     jne short .gotoNextBlock
  1489 000013E6 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
  1490 000013E9 39D8                <1>     cmp eax, ebx
  1491 000013EB 0F45C3              <1>     cmovne eax, ebx
  1492 000013EE 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
  1493 000013F2 7504                <1>     jne short .gotoNextBlock
  1494 000013F4 C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
  1495                              <1> .gotoNextBlock:
  1496 000013F8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
  1497 000013FB 7415                <1>     je short .exit
  1498 000013FD 31C9                <1>     xor ecx, ecx
  1499 000013FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
  1500 00001402 48C1E104            <1>     shl rcx, 4
  1501 00001406 4881C610000000      <1>     add rsi, mcb.program    
  1502 0000140D 4801CE              <1>     add rsi, rcx
  1503 00001410 EBCE                <1>     jmp short .checkSubsystem
  1504                              <1> .exit:
  1505 00001412 5F                  <1>     pop rdi
  1506 00001413 5E                  <1>     pop rsi
  1507 00001414 59                  <1>     pop rcx
  1508 00001415 5B                  <1>     pop rbx
  1509 00001416 58                  <1>     pop rax
  1510                              <1>     return
    13                              <2> %%_ret:
    14 00001417 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1511                              <1> 
  1512                              <1> 
  1513                              <1> convertBPBArray:
  1514                              <1> ;rsi -> BPB array
  1515                              <1> ;rbp -> Space for cl consecutive DPB's
  1516                              <1> ;rdi -> Driver header
  1517                              <1> ;cl = Number of BPBs to process
  1518                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
  1519 00001418 E852000000          <1>     call .findLastDPB
  1520 0000141D 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
  1521                              <1> .buildNext:
  1522 00001420 56                  <1>     push rsi
  1523 00001421 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
  1524 00001424 B453                <1>     mov ah, 53h ;Build DPB
  1525 00001426 CD21                <1>     int 21h
  1526 00001428 5E                  <1>     pop rsi
  1527 00001429 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
  1527 0000142E [77000000]          <1>
  1528 00001432 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
  1529 00001435 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
  1530 0000143D 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
  1531 00001440 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
  1532 00001444 FEC5                <1>     inc ch  ;Goto next unit number
  1533 00001446 38E9                <1>     cmp cl, ch  ;When equal, exit!
  1534 00001448 7414                <1>     jz short .exit
  1535 0000144A 488D4535            <1>     lea rax, qword [rbp + dpb_size]
  1536 0000144E 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1537 00001452 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
  1538 00001455 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
  1539 0000145C EBC2                <1>     jmp short .buildNext
  1540                              <1> .exit:
  1541                              <1>     ;Now set next DPB as -1 i.e end of chain!
  1542 0000145E 31C0                <1>     xor eax, eax
  1543 00001460 48FFC8              <1>     dec rax
  1544 00001463 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1545 00001467 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
  1546 0000146E C3                  <1>     ret
  1547                              <1> .findLastDPB:
  1548                              <1> ;Finds the last DPB and links the next DPB to it
  1549 0000146F 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1549 00001474 [3B000000]          <1>
  1550 00001478 4885C0              <1>     test rax, rax
  1551 0000147B 7415                <1>     jz short .first 
  1552                              <1> .lp:
  1553 0000147D 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
  1554 00001485 7406                <1>     je short .lastFound
  1555 00001487 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
  1556 0000148B EBF0                <1>     jmp short .lp   ;And go again
  1557                              <1> .lastFound:
  1558 0000148D 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
  1559 00001491 C3                  <1>     ret
  1560                              <1> .first:
  1561                              <1> ;If this is the first DPB array, set the dpbHeadPtr
  1562 00001492 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
  1562 00001497 [3B000000]          <1>
  1563 0000149B C3                  <1>     ret
  1564                              <1> 
  1565                              <1> ejectKernelInit:
  1566                              <1> ;Reallocates the space allocated to the driver file after 
  1567                              <1> ; init was called.
  1568                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
  1569                              <1> ;       r8 -> Points to the mcb header for reallocation
  1570                              <1> ;Uses the sysinit init drive block. 
  1571                              <1> ;rax, rbx, rflags trashed
  1572                              <1> ;If returns CF=CY, error in reallocation.
  1573 0000149C 53                  <1>     push rbx
  1574 0000149D 488D1D7D010000      <1>     lea rbx, initDrvBlk
  1575 000014A4 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
  1576 000014A8 5B                  <1>     pop rbx
  1577                              <1>     ;If this endptr is zero or -1 ignore it. 
  1578                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
  1579 000014A9 4885C0              <1>     test rax, rax
  1580                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014AC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014AE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1581 000014AF 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
  1582                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000014B2 74(AE)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1583 000014B4 48FFC8              <1>     dec rax ;Return to original value
  1584 000014B7 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
  1585 000014BD 48C1E804            <1>     shr rax, 4
  1586 000014C1 48C1E004            <1>     shl rax, 4
  1587 000014C5 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
  1588 000014C8 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
  1589 000014CA 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
  1590 000014D1 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
  1591 000014D3 4981C010000000      <1>     add r8, mcb.program ;Goto program
  1592 000014DA C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
  1593 000014DD 29D8                <1>     sub eax, ebx
  1594 000014DF 89C3                <1>     mov ebx, eax
  1595 000014E1 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
  1596 000014E6 CD21                <1>     int 21h
  1597 000014E8 4158                <1>     pop r8
  1598                              <1>     return
    13                              <2> %%_ret:
    14 000014EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1599                              <1> .exit:
  1600 000014EB F8                  <1>     clc ;Make sure to clear the CF flag before returning
  1601                              <1>     return
    13                              <2> %%_ret:
    14 000014EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1602                              <1> 
  1603                              <1> initDriver:
  1604                              <1> ;Initialises one driver and adjusts the DOS data appropriately
  1605                              <1> ;If on return CF=CY then the driver didnt want to be loaded
  1606                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
  1607                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
  1608                              <1> ; arguments are to be passed to the driver
  1609                              <1> ;Input: rsi -> driver pointer
  1610                              <1> ;       rbx -> sysinit request pointer
  1611                              <1> ;       rbp -> DOSSEG pointer
  1612 000014ED C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1613 000014F0 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1614 000014F4 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1615 000014FA 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
  1616 00001500 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1617                              <1>     ;Protect the important registers. All others trashable
  1618 00001503 53                  <1>     push rbx
  1619 00001504 56                  <1>     push rsi
  1620 00001505 55                  <1>     push rbp
  1621 00001506 FF560A              <1>     call qword [rsi + drvHdr.strPtr]
  1622 00001509 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1623 0000150C 5D                  <1>     pop rbp
  1624 0000150D 5E                  <1>     pop rsi
  1625 0000150E 5B                  <1>     pop rbx
  1626                              <1>     ;Check if a driver wants to not load.
  1627                              <1>     ;If a kernel driver wants to stop, halt boot.
  1628 0000150F 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1629 00001515 750C                <1>     jnz short .errExit
  1630 00001517 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1631 0000151B 7508                <1>     jne short .notHalt
  1632 0000151D 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
  1633 00001521 7502                <1>     jne short .notHalt
  1634                              <1> .errExit:
  1635 00001523 F9                  <1>     stc
  1636 00001524 C3                  <1>     ret
  1637                              <1> .notHalt:
  1638                              <1>     ;Now check if the drivers were con/clock before exiting
  1639 00001525 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
  1640 00001529 66250300            <1>     and ax, devDrvConIn | devDrvConOut
  1641 0000152D 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
  1642 0000152F 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
  1643 00001533 7507                <1>     jne short .checkClock
  1644 00001535 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
  1645                              <1> .checkClock:
  1646 0000153C 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1647 00001542 7407                <1>     jz short .notClock
  1648 00001544 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
  1649                              <1> .notClock:
  1650                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
  1651 0000154B 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1652                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001551 75(EC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1653                              <1>     ;Else, store the number of units as reported live by driver
  1654 00001553 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
  1655 00001557 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
  1656 0000155A C3                  <1>     ret
  1657                              <1> 
  1658                              <1> buildDPBs:
  1659                              <1>     ;Here we specially handle MSD drivers, building DPBs
  1660                              <1>     ;If return with CF=CY, fail. Else, all done and setup
  1661                              <1>     ;Input: rbx -> Points to sysinit request packet
  1662                              <1>     ;       rsi -> Driver header
  1663                              <1>     ;       rbp -> DOSSEG pointer
  1664                              <1>     ;Preserves those registers
  1665 0000155B 53                  <1>     push rbx
  1666 0000155C 55                  <1>     push rbp
  1667 0000155D 56                  <1>     push rsi
  1668 0000155E 57                  <1>     push rdi
  1669 0000155F 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
  1670 00001562 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
  1671 00001566 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
  1672 0000156A B835000000          <1>     mov eax, dpb_size
  1673 0000156F F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
  1674 00001571 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
  1675 00001576 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
  1676 00001579 89C3                <1>     mov ebx, eax
  1677 0000157B B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
  1678 00001580 CD21                <1>     int 21h
  1679 00001582 7219                <1>     jc short .badExit
  1680 00001584 4889C5              <1>     mov rbp, rax    
  1681 00001587 C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
  1682 0000158B 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
  1683                              <1>     ;rsi -> Ptr to BPB
  1684                              <1> 	;rbp -> Ptr to buffer to hold first DPB
  1685                              <1>     ;rdi -> Ptr to the driver header
  1686 00001593 E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
  1687                              <1> .exit:
  1688 00001598 5F                  <1>     pop rdi
  1689 00001599 5E                  <1>     pop rsi
  1690 0000159A 5D                  <1>     pop rbp
  1691 0000159B 5B                  <1>     pop rbx
  1692                              <1>     return
    13                              <2> %%_ret:
    14 0000159C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1693                              <1> .badExit:
  1694 0000159D F9                  <1>     stc
  1695 0000159E EBF8                <1>     jmp short .exit
  1696                              <1> 
  1697                              <1> setupInterruptBlock:
  1698                              <1> ;Sets up a block of interrupts with pointers provided in a table
  1699                              <1> ;Input:
  1700                              <1> ; al = Start interrupt
  1701                              <1> ; rdi -> Start of pointer table
  1702                              <1> ; cl = Last interrupt + 1
  1703                              <1> ;Assumes rbp points to DOSSEG
  1704 000015A0 0FB6C0              <1>     movzx eax, al
  1705 000015A3 0FB6C9              <1>     movzx ecx, cl
  1706                              <1> .lp:
  1707 000015A6 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
  1708 000015A9 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
  1709 000015AC E80E000000          <1>     call writeIDTEntry
  1710 000015B1 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
  1711 000015B8 FFC0                <1>     inc eax     ;Goto next interrupt number
  1712 000015BA 39C8                <1>     cmp eax, ecx
  1713 000015BC 75E8                <1>     jne .lp
  1714                              <1>     return
    13                              <2> %%_ret:
    14 000015BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1715                              <1> 
  1716                              <1> writeIDTEntry:
  1717                              <1> ;Writes the interrupt in the right place in the table
  1718                              <1>     ;al = Interrupt number
  1719                              <1>     ;rbx -> Handler to install
  1720 000015BF 50                  <1>     push rax
  1721 000015C0 53                  <1>     push rbx
  1722 000015C1 0FB6C0              <1>     movzx eax, al
  1723 000015C4 4893                <1>     xchg rbx, rax
  1724 000015C6 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
  1725 000015CA 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
  1726 000015D1 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
  1727 000015D4 48C1E810            <1>     shr rax, 10h    ;Bring next word low
  1728 000015D8 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
  1729 000015DC 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
  1730 000015E0 894308              <1>     mov dword [rbx + 8], eax
  1731 000015E3 5B                  <1>     pop rbx
  1732 000015E4 58                  <1>     pop rax
  1733 000015E5 C3                  <1>     ret
  1734                              <1> 
  1735                              <1> ; DATA AREA
  1736                              <1> localIDTpointer: ;Local IDT pointer
  1737 000015E6 0000                <1>     .Limit  dw 0
  1738 000015E8 0000000000000000    <1>     .Base   dq 0
  1739                              <1> 
  1740 000015F0 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1741 000015F8 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1742 00001600 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1743                              <1> 
  1744                              <1> ;DOS Data given by OEM
  1745 00001608 00                  <1> FILES       db 0    ;Default number of FILES
  1746 00001609 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1747 0000160A 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1748 0000160B 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1749 0000160C 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1750                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1751 0000160D 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1752 00001615 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1753 0000161D 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1754                              <1> 
  1755 00001621 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1755 0000162A 000000000000000000- <1>
  1755 00001633 000000000000000000- <1>
  1755 0000163C 00000000            <1>
  1756                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1757                              <1>     istruc psp
  1758 00001640 CD20                <1>     at psp.return,      db 0CDh, 20h
  1759 00001642 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1760 0000164A 0000000000000000    <1>     at psp.oldInt22h,   dq 0
  1761 00001652 0000000000000000    <1>     at psp.oldInt23h,   dq 0
  1762 0000165A 0000000000000000    <1>     at psp.oldInt24h,   dq 0
  1763 00001662 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1764 0000166A FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1764 00001673 FFFFFFFFFFFFFFFFFF- <1>
  1764 0000167C FFFF                <1>
  1765 0000167E 0000000000000000    <1>     at psp.envPtr,      dq 0
  1766 00001686 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1767 0000168E 1400                <1>     at psp.jftSize,     dw 20 
  1768 00001690 CD21C3              <1>     at psp.unixEntry,   db 0CDh, 21h, 0C3h
  1769 00001693 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1770 0000169B 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1770 000016A4 0000000000000000    <1>
  1771 000016AC 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1771 000016B5 000000000000000000- <1>
  1771 000016BE 0000                <1>
  1772 000016C0 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1772 000016C9 000000000000000000- <1>
  1772 000016D2 000000000000000000- <1>
  1772 000016DB 000000000000000000- <1>
  1772 000016E4 000000000000000000- <1>
  1772 000016ED 000000000000000000- <1>
  1772 000016F6 000000000000000000- <1>
  1772 000016FF 000000000000000000- <1>
  1772 00001708 000000000000000000- <1>
  1772 00001711 000000000000000000- <1>
  1772 0000171A 000000000000000000- <1>
  1772 00001723 000000000000000000- <1>
  1772 0000172C 000000000000000000- <1>
  1772 00001735 000000000000000000- <1>
  1772 0000173E 0000                <1>
  1773                              <1>     iend
    17                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 00001740 31C0                <1>     xor eax, eax    ;Drive A:
    14 00001742 BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 00001747 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 0000174B 0F45C3              <1>     cmovnz eax, ebx
    17 0000174E 8805B6FEFFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 00001754 4889351A040000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 0000175B C605A6FEFFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 00001762 C605A0FEFFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 00001769 C6059BFEFFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 00001770 C705A3FEFFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 00001779 00                  <1>
    24 0000177A 48C70590FEFFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 00001783 0000                <1>
    25 00001785 C60580FEFFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 0000178C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 0000178E 49C1E818            <1>     shr r8, 3*8
    29 00001792 4584C0              <1>     test r8b, r8b
    30 00001795 0F8495030000        <1>     jz OEMHALT
    31 0000179B 4889F7              <1>     mov rdi, rsi
    32 0000179E 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 000017A5 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 000017AC B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 000017B1 57                  <1>     push rdi        ;rdi points to the APT space
    42 000017B2 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 000017BB 00                  <1>
    43                              <1> pdtLoop:
    44 000017BC 48AB                <1>     stosq
    45 000017BE 480500002000        <1>     add rax, 200000h
    46 000017C4 FFC9                <1>     dec ecx
    47 000017C6 75F4                <1>     jnz pdtLoop
    48 000017C8 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 000017C9 48893D20FEFFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 000017D0 57                  <1>     push rdi
    53 000017D1 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 000017D4 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 000017D7 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 000017DE 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 000017E5 B93C000000          <1>     mov ecx, 60
    58 000017EA 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 000017F0 48AB                <1>     stosq
    61 000017F2 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 000017F8 FFC9                <1>     dec ecx
    63 000017FA 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 000017FC 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 000017FF 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 00001802 48B8-               <1>     mov rax, driverChain
    71 00001804 [367C000000000000]  <1>
    72 0000180C 5F                  <1>     pop rdi
    73 0000180D 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 00001810 488905F6FDFFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75                              <1> 
    76                              <1> ;----------------------------------------------------------------
    77                              <1> ;                       PIC Remap procedure                     :
    78                              <1> ;----------------------------------------------------------------
    79                              <1> ;Remapping the IRQ lines to Interrupts 0F0h - 0FFh
    80 00001817 FA                  <1>     cli
    81 00001818 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    82 0000181A E621                <1>     out 021h, al
    83 0000181C E6A1                <1>     out 0A1h, al
    84 0000181E 0F010D68030000      <1>     sidt [oemIDTptr]    ;Get the idt here
    85 00001825 488B3563030000      <1>     mov rsi, qword [oemIDTptr.Base] ;Get the base ptr
    86 0000182C 4889F7              <1>     mov rdi, rsi
    87 0000182F 4881C600020000      <1>     add rsi, 020h*10h
    88 00001836 4881C7000F0000      <1>     add rdi, 0F0h*10h
    89 0000183D B920000000          <1>     mov ecx, 2*10h    ;Copy the hardware IRQ pointers high!
    90 00001842 F348A5              <1>     rep movsq
    91                              <1> 
    92 00001845 B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    93 00001847 E620                <1>     out 020h, al
    94 00001849 E680                <1>     out 080h, al    
    95 0000184B E6A0                <1>     out 0A0h, al
    96 0000184D E680                <1>     out 080h, al    
    97 0000184F B0F0                <1>     mov al, 0F0h       ;PIC1 to take Int 0F0h - F7h
    98 00001851 E621                <1>     out 021h, al
    99 00001853 E680                <1>     out 080h, al    
   100 00001855 0408                <1>     add al, 8        ;PIC2 to take Int  F8h - FFh
   101 00001857 E6A1                <1>     out 0A1h, al 
   102 00001859 E680                <1>     out 080h, al    
   103 0000185B B004                <1>     mov al, 4
   104 0000185D E621                <1>     out 021h, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
   105 0000185F E680                <1>     out 080h, al    
   106 00001861 FEC8                <1>     dec al
   107 00001863 FEC8                <1>     dec al
   108 00001865 E6A1                <1>     out 0A1h, al    ;Tell PIC 2 its cascade identity (00000010)
   109 00001867 E680                <1>     out 080h, al
   110 00001869 B001                <1>     mov al, 01h        ;Initialise in 8086 mode
   111 0000186B E621                <1>     out 021h, al
   112 0000186D E680                <1>     out 080h, al    
   113 0000186F E6A1                <1>     out 0A1h, al
   114 00001871 E680                <1>     out 080h, al    
   115 00001873 0F011D13030000      <1>     lidt [oemIDTptr] 
   116 0000187A 31C0                <1>     xor eax, eax    ;Unmask all interrupts 
   117 0000187C E621                <1>     out 021h, al
   118 0000187E E6A1                <1>     out 0A1h, al
   119 00001880 FB                  <1>     sti
   120                              <1> ;Ensure that interrupts are still masked
   121 00001881 C3                  <1>     ret
   122                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
   123                              <1> OEMINIT ENDP
   124                              <1> 
   125                              <1> OEMMCBINIT PROC NEAR
   126 00001882 B820E80000          <1>     mov eax, 0E820h ;Get memory map
   127 00001887 CD35                <1>     int 35h ; rsi has pointer to memory map
   128 00001889 488B05E5020000      <1>     mov rax, qword [biosUBase]
   129 00001890 E8F6000000          <1>     call .mcbFindAddress
   130 00001895 7341                <1>     jnc .mcbi1  ;If found, proceed
   131                              <1>     ;Here, we try use E801h
   132 00001897 B801E80000          <1>     mov eax, 0E801h
   133 0000189C CD35                <1>     int 35h
   134 0000189E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   135 000018A1 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   136 000018A4 85C0                <1>     test eax, eax
   137 000018A6 7417                <1>     jz .worst
   138 000018A8 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   139 000018AB C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   140 000018AE 8905C9020000        <1>     mov dword [loProtMem], eax
   141 000018B4 891DC7020000        <1>     mov dword [hiProtMem], ebx
   142 000018BA E919010000          <1>     jmp mcbBuild
   143                              <1> .worst:
   144                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   145 000018BF B800002000          <1>     mov eax, 200000h
   146 000018C4 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   147 000018CB 29D8                <1>     sub eax, ebx
   148 000018CD 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   149 000018D3 E900010000          <1>     jmp mcbBuild 
   150                              <1> .mcbi1:
   151 000018D8 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   152 000018DB 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   152 000018E4 00                  <1>
   153 000018E5 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   154 000018E9 0F85BC000000        <1>     jne .mcbFail
   155 000018EF 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   156                              <1>     ;PCI hole always exists so this value will always be a dword
   157 000018F3 890584020000        <1>     mov dword [loProtMem], eax
   158 000018F9 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   159 000018FC 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   160 000018FF 4881FB00000001      <1>     cmp rbx, 1000000h  
   161 00001906 773A                <1>     ja .skipISA
   162                              <1> ;Here we deal with ISA hole issues
   163 00001908 B820E80000          <1>     mov eax, 0E820h
   164 0000190D CD35                <1>     int 35h
   165 0000190F 48B800000001000000- <1>     mov rax, 1000000h
   165 00001918 00                  <1>
   166 00001919 E86D000000          <1>     call .mcbFindAddress
   167 0000191E 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   168 00001924 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   168 0000192D 00                  <1>
   169 0000192E 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   170 00001932 0F85A0000000        <1>     jne mcbBuild  
   171 00001938 488B5808            <1>     mov rbx, qword [rax + 8]
   172 0000193C 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   173                              <1> .skipISA:
   174 00001942 B820E80000          <1>     mov eax, 0E820h
   175 00001947 CD35                <1>     int 35h
   176 00001949 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   176 00001952 00                  <1>
   177 00001953 E833000000          <1>     call .mcbFindAddress
   178 00001958 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   179 0000195A 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   179 00001963 00                  <1>
   180 00001964 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   181 00001968 756E                <1>     jne mcbBuild   
   182 0000196A 488B5808            <1>     mov rbx, qword [rax + 8]
   183                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   184 0000196E 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   184 00001977 00                  <1>
   185 00001978 4839CB              <1>     cmp rbx, rcx
   186 0000197B 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   187 0000197F 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   188 00001986 E94D000000          <1>     jmp mcbBuild
   189                              <1> .mcbFindAddress:
   190                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   191                              <1> ;Entry: rax = Address of arena to search for
   192                              <1> ;       rsi = Pointer to memory map
   193                              <1> ;       ecx = Number of 24 byte entries
   194                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   195                              <1> ;       CF=CY : value in rax not found
   196 0000198B 56                  <1>     push rsi
   197 0000198C 51                  <1>     push rcx
   198 0000198D 50                  <1>     push rax
   199                              <1> .mfa0:
   200 0000198E 483B06              <1>     cmp rax, qword [rsi]
   201 00001991 7410                <1>     je .mcbAddressFound
   202 00001993 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   203 0000199A FFC9                <1>     dec ecx
   204 0000199C 79F0                <1>     jns .mfa0
   205                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   206 0000199E 58                  <1>     pop rax
   207 0000199F 59                  <1>     pop rcx
   208 000019A0 5E                  <1>     pop rsi
   209 000019A1 F9                  <1>     stc
   210 000019A2 C3                  <1>     ret
   211                              <1> .mcbAddressFound:
   212 000019A3 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   213 000019A6 59                  <1>     pop rcx ;Pop old rax value off
   214 000019A7 59                  <1>     pop rcx
   215 000019A8 5E                  <1>     pop rsi
   216 000019A9 F8                  <1>     clc
   217 000019AA C3                  <1>     ret
   218                              <1> .mcbFail:
   219 000019AB 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   220 000019B2 B804130000          <1>     mov eax, 1304h
   221 000019B7 CD30                <1>     int 30h
   222 000019B9 E972010000          <1>     jmp OEMHALT
   223 000019BE 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   223 000019C7 6C6F636174696F6E20- <1>
   223 000019D0 4572726F720A0D00    <1>
   224                              <1> 
   225                              <1> mcbBuild:
   226                              <1> ;Actually build the MCB chain here
   227                              <1> ;Start by computing the difference between userbase and DOS area
   228 000019D8 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   229 000019DF 488B351AFCFFFF      <1>     mov rsi, qword [MCBANCHOR]  
   230 000019E6 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   231 000019E9 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   232 000019ED 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   233 000019F3 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   234 000019F6 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   235 000019F9 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   236 000019FC 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   237 00001A02 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   238 00001A08 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   238 00001A11 00                  <1>
   239 00001A12 0F8218010000        <1>     jb OEMHALT
   240 00001A18 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   241 00001A1B 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   242 00001A1E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   243 00001A21 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   244 00001A29 31F6                <1>     xor esi, esi
   245 00001A2B 8B354C010000        <1>     mov esi, dword [loProtMem]
   246 00001A31 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   247 00001A37 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   248 00001A3A 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   249                              <1> 
   250                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   251 00001A3D 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   251 00001A46 00                  <1>
   252 00001A47 746C                <1>     jz .skipISA
   253                              <1>     ;Here if an ISA hole exists, place a MCB around it
   254 00001A49 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   255                              <1>     ;Remove one MCB worth of space from alloc
   256 00001A50 31C9                <1>     xor ecx, ecx
   257 00001A52 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   258 00001A55 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   259 00001A5B C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   260 00001A5E C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   261 00001A61 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   262 00001A64 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   263 00001A67 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   264 00001A6F 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   264 00001A78 00                  <1>
   265 00001A79 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   266 00001A7C 480510000000        <1>     add rax, mcb_size
   267 00001A82 4829C1              <1>     sub rcx, rax    ;Take their difference
   268 00001A85 C1E904              <1>     shr ecx, 4
   269 00001A88 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   270 00001A8B C1E104              <1>     shl ecx, 4  ;Get bytes again
   271 00001A8E 4881C310000000      <1>     add rbx, mcb_size
   272 00001A95 4801CB              <1>     add rbx, rcx
   273                              <1>     ;RBX should now be at 16Mb
   274 00001A98 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   275 00001A9B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   276 00001AA3 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   277 00001AA9 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   278 00001AAC 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   279 00001AB2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   280                              <1> .skipISA:
   281                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   282                              <1>     ;rbx points to a block with "Z" marker
   283 00001AB5 813DC6000000000000- <1>     cmp dword [longMem], 0
   283 00001ABE 00                  <1>
   284 00001ABF 746E                <1>     jz .exit
   285                              <1>     ;Add PCI hole MCB
   286 00001AC1 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   287                              <1>     ;Remove one MCB worth of space from alloc
   288 00001AC8 31C9                <1>     xor ecx, ecx
   289 00001ACA 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   290 00001ACD 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   291 00001AD3 C1E104              <1>     shl ecx, 4  ;Get bytes
   292 00001AD6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   293 00001AD9 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   294 00001ADC C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   295 00001ADF 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   296 00001AE7 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   296 00001AF0 00                  <1>
   297 00001AF1 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   298 00001AF4 480510000000        <1>     add rax, mcb_size
   299 00001AFA 4829C1              <1>     sub rcx, rax    ;Take their difference
   300 00001AFD C1E904              <1>     shr ecx, 4
   301 00001B00 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   302 00001B03 C1E104              <1>     shl ecx, 4  ;Get bytes again
   303 00001B06 4881C310000000      <1>     add rbx, mcb_size
   304 00001B0D 4801CB              <1>     add rbx, rcx
   305                              <1>     ;RBX should now be at 4Gb
   306 00001B10 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   307 00001B13 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   308 00001B1B 488B0D63000000      <1>     mov rcx, qword [longMem]
   309 00001B22 48C1E904            <1>     shr rcx, 4
   310 00001B26 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   311 00001B2C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   312                              <1> .exit:
   313 00001B2F C3                  <1>     ret
   314                              <1> OEMMCBINIT ENDP
   315                              <1> 
   316                              <1> OEMHALT PROC    NEAR
   317                              <1> ;If a critical error occurs during sysinit, fail through here
   318                              <1> ;Int 22h, 23h and 24h point here during sysinit
   319 00001B30 488D2D0C000000      <1>     lea rbp, hltmsg
   320 00001B37 B804130000          <1>     mov eax, 1304h
   321 00001B3C CD30                <1>     int 30h
   322                              <1> .ei0:
   323 00001B3E F4                  <1>     hlt
   324 00001B3F F390                <1>     pause
   325 00001B41 EBFB                <1>     jmp short .ei0
   326 00001B43 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   326 00001B4C 7469616C6973696E67- <1>
   326 00001B55 20534350444F532E53- <1>
   326 00001B5E 59532E205379737465- <1>
   326 00001B67 6D2068616C74696E67- <1>
   326 00001B70 2E2E2E00            <1>
   327                              <1> OEMHALT ENDP
   328                              <1> 
   329                              <1> OEMCALLBK PROC NEAR
   330 00001B74 C3                  <1>     ret
   331                              <1> OEMCALLBK ENDP
   332                              <1> 
   333                              <1> ;OEM Only variables are permitted in this file. They are not 
   334                              <1> ; visible to SYSINIT
   335 00001B75 0000000000000000    <1> biosUBase   dq 0
   336 00001B7D 00000000            <1> loProtMem   dd 0
   337 00001B81 00000000            <1> hiProtMem   dd 0
   338 00001B85 0000000000000000    <1> longMem     dq 0
   339                              <1> oemIDTptr:      ;Local IDT pointer
   340 00001B8D 0000                <1>     .Limit  dw 0
   341 00001B8F 0000000000000000    <1>     .Base   dq 0
    18                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    19                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    resd 1    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     resq 1    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33 0000009C ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   resq 1  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare resq 1  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  resb sfth_size
   149 00000141 <res 4Fh>           <1>     firstSft    resb sft_size
   150 00000190 <res 4Fh>           <1>     secondSft   resb sft_size
   151 000001DF <res 4Fh>           <1>     thirdSft    resb sft_size
   152 0000022E <res 4Fh>           <1>     fourthSft   resb sft_size
   153 0000027D <res 4Fh>           <1>     fifthSft    resb sft_size
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  resb 1  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   resb 1  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 resb 1  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  resw 1  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction resb 1  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  resb 1  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  resq 1  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  resb 1  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   207 0000045F ????????????????    <1>     xInt24hRSP  resq 1  ;RSP across an Int 24h call
   208 00000467 ??                  <1>     Int24bitfld resb 1  ;Copies the bit field given to the Int 24h handler
   209 00000468 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   210 00000469 ??                  <1>     Int24Fail   resb 1  ;Set if Int 24h returned fail
   211                              <1> 
   212 0000046A ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 21h entry if called from within Int 21h
   213 00000472 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   214 0000047A ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 21h
   215 00000482 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 21 call
   216 0000048A ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   217                              <1> ;The below flag tells DOS to print ^C in the termination function
   218 0000048B ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   219 0000048C ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   220                              <1> ;Time stuff
   221                              <1> ;Read the below two as a word
   222 0000048D ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   223 0000048E ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   224 0000048F ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   225 00000490 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   226 00000492 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   227                              <1> 
   228 00000493 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   229 00000494 ??                  <1>     int28Flag   resb 1  ;If set, Int 28h should be called, if clear no
   230 00000495 ??                  <1>     Int24Trans  resb 1  ;Set to -1 if Abort translated to Fail
   231                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   232                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   233                              <1> ; without forcing to re-build the whole primary request block.
   234                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   235                              <1> ; with secondary char output going through the secondary header
   236                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   237                              <1> ; for output)
   238                              <1> ;ioReqPkt is the largest possible packet
   239 00000496 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   240 000004C0 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   241                              <1>     altRet: ;Accessed as a qword
   242 000004EA <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   243 00000514 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   244                              <1> ;Swappable Buffers
   245 00000515 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   246                              <1>     ;We add an additional byte to save ah too
   247 0000051B ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   248 0000051D <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   249 0000059D <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   250 0000061D ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   251 00000625 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   252 0000062D ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   253                              <1> ;Misc bookkeeping flags and vars
   254 0000062E <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   255 00000659 <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   256 00000679 <res 5Fh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   257 000006D8 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   258 000006E4 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   259 000006F0 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   260 000006F8 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   261 000006F9 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   262 000006FA ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   263 000006FB ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   264 000006FC ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   265 000006FD ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   266 000006FE ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   267 000006FF ??                  <1>     rwFlag      resb 1  ;00h=Read, 1=Write, read/write/share error reporting
   268 00000700 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   269 00000701 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   270                              <1> 
   271 00000702 ??                  <1>     vConInsert  resb 1  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   272 00000703 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   273 00000704 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   274 00000705 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   275 00000706 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   276 00000707 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   277 00000708 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   278                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   279                              <1> workingDD:  ;Create a symbol for the working device driver too
   280 00000709 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   281 00000711 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   282 00000719 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   283                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   284                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   285 00000721 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   286 00000729 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   287 00000731 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   288 00000739 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   289 0000073B ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   290 0000073D ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   291                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   292                              <1> ; and 32 byte offset into the sector for directory
   293 00000745 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   294                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   295                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   296 0000074D ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   297                              <1> ;***************************************************|
   298                              <1> ; Needs to be set up before any file access         |
   299                              <1> ; These vars keep track of file access properties   |
   300                              <1> ;   and must be used only for such purposes.        |
   301                              <1> ;***************************************************|
   302 0000074F ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   303 00000753 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   304                              <1> 
   305 00000757 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   306 0000075B ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   307 0000075C ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   308                              <1> 
   309 00000764 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   310 00000766 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   311                              <1> ;***************************************************|
   312 0000076A ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   313 0000076E ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   314 00000772 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   315 00000773 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   316 00000777 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   317 0000077B ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   318                              <1> ;Directory stuff
   319 0000077F ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   320 00000783 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   321 00000787 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   322 00000789 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   323                              <1> ;Error DPB 
   324 0000078D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   325 00000795 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   326                              <1>     
   327 00000796 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   328 000007C1 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   329                              <1> ;Stacks and scratch SFT
   330 000007E1 ??????????????      <1>     alignb  8
   331 000007E8 <res 528h>          <1>     critStack   resq 165
   332 00000D10 ????????????????    <1>     critStakTop resq 1
   333                              <1> 
   334 00000D18 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   335                              <1>     
   336 00000D67 ??                  <1>     alignb  8
   337 00000D68 <res 638h>          <1>     AuxStack    resq 199
   338 000013A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   339 000013A8 <res 638h>          <1>     DiskStack   resq 199
   340 000019E0 ????????????????    <1>     DiskStakTop resq 1
   341                              <1> 
   342 000019E8 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   343 000019E9 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   344                              <1>     ;The above is used in create and delete for volume labels only. Otherwise is -1.
   345                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   346 000019EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   347 00001A5A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   348                              <1> ;Exception handler vars in SDA now 
   349 00001A82 <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   350 00001A92 ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   351                              <1>     sdaLen      equ     $ - sda 
   352                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   353                              <1> 
   354                              <1> ;Additional variables NOT in the SDA
   355 00001A93 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   356 00001A9B ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   357 00001A9C <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   358                              <1>     ;for saving the current header when quickly doing a second request
   359                              <1> 
   360 00001AC6 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   361 00001AC7 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   362                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   363                              <1> inExtASCII:
   364 00001AC9 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   365 00001ACA ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   366                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   367                              <1>     ; copy of the date/time record
   368                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   369                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   370                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   371                              <1>     ; to the read IDT routine".
   372                              <1>     dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   373 00001ACC ????                <1>         .limit  dw ?
   374 00001ACE ????????????????    <1>         .base   dq ?
   375                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   376                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   377                              <1>     ; were allowed to write to original callers register stack. 
   378                              <1>     ; So we have this structure below that is used by these functions to 
   379                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   380                              <1>     ; through the multiplexer we never will read this structure. 
   381                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   382 00001AD6 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   383                              <1>     dSegLen     equ     $
    20                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    21                                  %define currSegVBase section.resSeg.vstart
    22                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 96 ;.96
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0060                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic.
    37 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    38 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    39 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    40                              <1> ;Extended ASCII keys with special meanings
    41 0000003C 3B                  <1> extKeyTbl   db eF1
    42 0000003D 3B29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    43 0000003F 3C                  <1>             db eF2
    44 00000040 2D29                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    45 00000042 3D                  <1>             db eF3
    46 00000043 3429                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    47 00000045 3E                  <1>             db eF4
    48 00000046 6929                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    49 00000048 3F                  <1>             db eF5
    50 00000049 AE29                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    51 0000004B 40                  <1>             db eF6
    52 0000004C C429                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    53 0000004E 41                  <1>             db eF7
    54 0000004F CB29                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    55 00000051 4B                  <1>             db eCursL
    56 00000052 9228                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    57 00000054 4D                  <1>             db eCursR
    58 00000055 3B29                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    59 00000057 52                  <1>             db eIns
    60 00000058 D629                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    61 0000005A 53                  <1>             db eDel
    62 0000005B DD29                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    63                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    64                              <1> 
    65                              <1> ;When counting the number of days, first compute the number of years since
    66                              <1> ; 1980 and your year. 
    67                              <1> ;Then, using the table below, find the number of leap years between 1980
    68                              <1> ; and (YourYear - 1). 
    69                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    70                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    71                              <1> ;
    72                              <1> ;Use the months table to get the number of days in a normal month as leap 
    73                              <1> ; years are added using the previous comment.
    74                              <1> 
    75                              <1> ;This table is the number of days in the month
    76                              <1> ;The function which updates the days in Feb writes the number to this table
    77                              <1> monthsTbl:  
    78 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    78 00000066 1F1E1F              <1>
    79                              <1> 
    80                              <1> ;Error tables
    81                              <1> hardXlatTbl:
    82                              <1> ;Hard error xlat table. Used so that it can be patched by 
    83                              <1> ; multitaskers and network tools as opposed to having a static
    84                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    85 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    86 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    87 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    88 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    89 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    90 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    91 0000006F 19                  <1>     db errSekErr    ;Seek error
    92 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    93 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    94 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    95 00000073 1D                  <1>     db errWF        ;Write fault
    96 00000074 1E                  <1>     db errRF        ;Read fault
    97 00000075 1F                  <1>     db errGF        ;General fault
    98                              <1>     ;The following two adjust for share errors
    99 00000076 1F                  <1>     db errGF        ;Sharing violations
   100 00000077 1F                  <1>     db errGF        ;File Lock violation
   101 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   102                              <1> hardXlatTblL equ $ - hardXlatTbl
   103                              <1> errXlatTbl:
   104                              <1> ;Each entry is n bytes long, defined as
   105                              <1> ; Byte 0      : DOS function number for which translation will occur
   106                              <1> ; Byte 1      : Length of the table entry - 2
   107                              <1> ; Bytes n - 3 : Acceptable Error codes
   108                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   109                              <1> ;The table is terminated with a single -1 byte
   110                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   111                              <1> ; only on entry to a disk function
   112 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   113 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   114 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   115 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   116 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   117 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   118 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   119 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   120 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   121 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   122 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   123 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   124 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   125 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   126 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   127 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   128 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   129 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   130 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   131 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   132 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   133 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   134 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   135 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   136 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   137 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   138 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   139 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   140 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   141 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   142 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   143 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   144 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   145 00000114 FF                  <1>     db -1   ;End Of Table marker
   146                              <1> 
   147                              <1> 
   148                              <1> extErrTbl:
   149                              <1> ;This table contains the default values for how to respond
   150                              <1> ; to particular errors. Fields with -1 need to be filled in before
   151                              <1> ; setting variables using this table.
   152                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   153                              <1> ; Byte 0: Extended Error Code as a byte
   154                              <1> ; Byte 1: Error Class
   155                              <1> ; Byte 2: Error Suggested Action
   156                              <1> ; Byte 3: Error Locus
   157                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   158                              <1> ;
   159                              <1> ;Error 01: Invalid function number
   160 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   161                              <1> ;Error 02: File not found
   162 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   163                              <1> ;Error 03: Path not found
   164 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   165                              <1> ;Error 04: Too many open handles, and no handles are left
   166 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   167                              <1> ;Error 05: Access being denied
   168 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   169                              <1> ;Error 06: Invalid File handle being provided
   170 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   171                              <1> ;Error 07: MCB chain destroyed
   172 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   173                              <1> ;Error 08: No Memory remaining
   174 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   175                              <1> ;Error 09: Invalid MCB block Address
   176 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   177                              <1> ;Error 0A: Bad Environment block
   178 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0B: Data provided in a bad format
   180 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   181                              <1> ;Error 0C: Access Code Invalid
   182 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 0D: Error due to Invalid Data provided
   184 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   185                              <1> ;Error 0F: Error due to a bad drive letter being provided
   186 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   187                              <1> ;Error 10: Error due to attempting to delete the CWD
   188 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   189                              <1> ;Error 11: Error due to a unknown device being used
   190 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   191                              <1> ;Error 12: No more file handles available
   192 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   193                              <1> ;Error 50: Network request not supported
   194 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   195                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   196 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   197                              <1> ;Error 21: File Locking Violation
   198 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 54: Too many levels of redirection error
   200 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   201                              <1> ;Error 56: Bad resource password provided
   202 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   203                              <1> ;Error 52: Directory already exists
   204 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   205                              <1> ;Error 32: Network request not supported by DOS
   206 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   207                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   208 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   209                              <1> ;Error 57: Bad parameter in request
   210 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   211                              <1> ;Error 53: Fail was returned from Int 24h
   212 0000017D 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   213                              <1> ;Error 24: Sharing Buffer Full
   214 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   215 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   216                              <1> 
   217                              <1> ;Nationalisation stuff
   218                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   219 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   220 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   220 0000019A 535953000000000000- <1>
   220 000001A3 000000000000000000- <1>
   220 000001AC 000000000000000000- <1>
   220 000001B5 000000000000000000- <1>
   220 000001BE 000000000000000000- <1>
   220 000001C7 000000000000000000- <1>
   220 000001D0 00                  <1>
   221 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   222 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   223                              <1> charTableArray: ;All the qwords need fixing up here
   224                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   225 000001D5 02                  <1>     db 2
   226 000001D6 [2602000000000000]  <1>     dq ucTblExt
   227                              <1> .filenameUCTable:
   228 000001DE 04                  <1>     db 4
   229 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   230                              <1> .filenameTerminatingTable:
   231 000001E7 05                  <1>     db 5
   232 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   233                              <1> .collatingTable:
   234 000001F0 06                  <1>     db 6
   235 000001F1 [5A03000000000000]  <1>     dq collTblExt
   236                              <1> ;Extended country table
   237                              <1> extCtryTbl:
   238 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   239                              <1>     ;Below: Length of structure (not including this word and above byte)
   240 000001FA 2A00                <1>     dw extCtryTblL
   241                              <1> .countryCode:
   242 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   243                              <1> .activeCP:
   244 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   245                              <1> ;Regular country table
   246                              <1> ctryTbl:
   247                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   248 00000200 0100                <1>     dw 1    ;Date format, UK style
   249 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   250 00000207 2C00                <1>     db ",",0    ;Thousand separator
   251 00000209 2E00                <1>     db ".",0    ;Decimal separator
   252 0000020B 2D00                <1>     db "-",0    ;Date separator
   253 0000020D 3A00                <1>     db ":",0    ;Time separator
   254 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   255 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   256 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   257 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   258 0000021A 2C00                <1>     db ",",0    ;Data list separator
   259 0000021C 000000000000000000- <1>     db 10 dup (0)
   259 00000225 00                  <1>
   260                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   261                              <1> 
   262                              <1> ucTblExt:   ;External pointer to the uppercase table
   263 00000226 8000                <1>     dw 80h
   264                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   265 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   266 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   267 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   268 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   269 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   270 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   271 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   272 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   273 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   274 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   275 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   276 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   277 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   278 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   279 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   280 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   281                              <1> 
   282                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   283 000002A8 8000                <1>     dw 80h
   284                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   285 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   286 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   287 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   288 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   289 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   290 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   291 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   292 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   293 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   294 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   295 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   296 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   297 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   298 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   299 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   300 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   301                              <1> 
   302                              <1> fileTermTblExt:
   303 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   304 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   305 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   306 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   307 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   308                              <1> .startBadRange:
   309 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   310                              <1> .endBadRange:
   311 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   312 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   313                              <1> fileTermTbl:
   314 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   315 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   316 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   317                              <1>     fileTermTbl_len equ $ - fileTermTbl
   318                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   319                              <1>     ;Buffer space
   320 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   320 0000034B 000000000000000000- <1>
   320 00000354 000000000000        <1>
   321                              <1> 
   322                              <1> collTblExt:  ;Collating sequence table, for sorting
   323 0000035A 0001                <1>     dw 0100h
   324                              <1> collTbl:
   325 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   326 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   327 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   328 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   329 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   330 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   331 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   332 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   333 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   334 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   335 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   336 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   337 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   338 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   339 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   340 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   341 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   342 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   343 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   344 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   345 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   346 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   347 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   348 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   349 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   350 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   351 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   352 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   353 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   354 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   355 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   356 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   357                              <1> 
   358                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   359                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   360                              <1> ;Bit[1]=Clear if the char of a terminating type.
   361                              <1> ;Bit[2]=Clear if the char is of space/tab type.
   362                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   363                              <1> ;Bit[4-7]=Unused.    
   364                              <1> 
   365 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   366 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   367 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   368 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   369 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   370 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   371 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   372 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   373 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   374 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   375 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   376 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   377 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   378 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   379 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   380 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   381 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   381 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   381 000004EE FFFFFFFFFFFFFFFFFF- <1>
   381 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   381 00000500 FFFFFFFFFFFFFFFFFF- <1>
   381 00000509 FFFFFFFFFFFFFFFFFF- <1>
   381 00000512 FFFFFFFFFFFFFFFFFF- <1>
   381 0000051B FFFFFFFFFFFFFFFFFF- <1>
   381 00000524 FFFFFFFFFFFFFFFFFF- <1>
   381 0000052D FFFFFFFFFFFFFFFFFF- <1>
   381 00000536 FFFFFFFFFFFFFFFFFF- <1>
   381 0000053F FFFFFFFFFFFFFFFFFF- <1>
   381 00000548 FFFFFFFFFFFFFFFFFF- <1>
   381 00000551 FFFFFFFFFFFFFFFFFF- <1>
   381 0000055A FFFF                <1>
    23                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 7453                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E F71D                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 041E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 D81E                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 011F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 091F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 211F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A 541F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C 791F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E D81F                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 8B22                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 E71F                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 F31F                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 9B6F                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 CF6F                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A 922A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C 922A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E CA27                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 8328                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 0A29                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 922A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 922A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 2C2A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A 3929                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 7372                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E E86F                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 F729                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 EF6F                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 F16F                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 7372                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 7372                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 9E70                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 7372                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E 922A                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 922A                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 A429                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 922A                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 3A70                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 7952                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA 922A                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC 922A                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE 1D2A                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 0425                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 2B25                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 3125                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 5225                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 6470                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA 0A2A                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 7270                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 4653                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 A070                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 C56E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 D870                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 E970                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 F870                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA 095C                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC 325C                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE 6014                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 A716                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 8818                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 872C                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 982C                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 BF2D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA FD2D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC 382E                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE 442E                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 A92E                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 182F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 7C48                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 3630                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 7130                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 071A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC 114D                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE 154F                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 1D50                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 D154                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 7653                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 3C71                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 8630                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA F130                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC 0F6F                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE 186F                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 4A71                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 5B71                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 3972                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 6652                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 2131                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A AD31                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C C551                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E 4072                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 F531                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 BD32                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 D132                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 7472                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 3874                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 9E74                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C 751A                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E 326F                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 216F                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 7372                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 2A6F                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 CA5C                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 8E5D                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A 3D33                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C 7A34                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 7E74                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 4D3D                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 3368                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 8174                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 8269                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 341D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 3E5E                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 5247                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 6801                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 E475                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 5275                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 8439                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 E526                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B200                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CC00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DA00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 DE69                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 C069                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 8E69                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 1D6B                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 3E01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B 6A46                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 5069                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 6168                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 F568                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 B80B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 7826                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 D574                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 E274                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B F769                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 9F68                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 9F46                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 9919                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 8D6D                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 FB12                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 2F75                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 B569                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 8974                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D ED2C                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 9174                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 2B2D                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 A171                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 B374                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 4E6B                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 596B                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B A171                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D B56F                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 8871                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 DA71                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 3372                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 4472                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 4C72                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 5472                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 6F72                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 9972                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 9972                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 9972                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 A672                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    24                                  %if DEBUG
    25                                  %include "./src/Debug/debug.asm"
    26                                  %endif
    27                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 000006AD 7428                <1>     je .exit
    13 000006AF 56                  <1>     push rsi
    14 000006B0 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B7 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BA 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BC 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006BF EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C1 57                  <1>     push rdi
    22 000006C2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C8 5F                  <1>     pop rdi ;Get original buf back
    25 000006C9 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CC 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D3 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D6 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 000006D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> markBuffersAsUnreferencedWrapper:
    33                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    34                              <1> ; and preserves rdi
    35 000006D8 57                  <1>     push rdi
    36 000006D9 E802000000          <1>     call markBuffersAsUnreferenced
    37 000006DE 5F                  <1>     pop rdi
    38                              <1>     return
    13                              <2> %%_ret:
    14 000006DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    41                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    42                              <1> ;Output: rdi = First disk buffer
    43 000006E0 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    44 000006E7 57                  <1>     push rdi
    45                              <1> .lp:
    46 000006E8 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    47 000006EC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    48 000006EF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    49 000006F6 75F0                <1>     jne .lp
    50 000006F8 5F                  <1>     pop rdi
    51                              <1>     return
    13                              <2> %%_ret:
    14 000006F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    54                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    55                              <1> ; second buffer in the chain in rdi
    56                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    57                              <1> ;Output: rdi = Second buffer in the chain
    58 000006FA 52                  <1>     push rdx
    59 000006FB 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    60 000006FE E8A3FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    61 00000703 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    62 00000706 5A                  <1>     pop rdx
    63                              <1>     return
    13                              <2> %%_ret:
    14 00000707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    66                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    67                              <1> ;Input: rdi = Buffer header to start searching at
    68                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    69                              <1> ;        ZF=ZE => No unreferenced buffer found
    70 00000708 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    71 0000070C 750C                <1>     jnz .exit
    72 0000070E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 00000711 4881FFFFFFFFFF      <1>     cmp rdi, -1
    74 00000718 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    75                              <1> .exit:
    76                              <1>     return
    13                              <2> %%_ret:
    14 0000071A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> flushAllBuffersForDPB:  ;External linkage
    79                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    80 0000071B 50                  <1>     push rax
    81 0000071C 488B05(09070000)    <1>     mov rax, qword [workingDPB]
    82 00000723 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    83 00000726 E802000000          <1>     call flushAllBuffersForDrive
    84 0000072B 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000072C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    88                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    89                              <1> ; Used also to allow flushing all buffers
    90                              <1> ; Input: al = 0-based physical drive number we are xacting on
    91                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    92                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    93 0000072D 57                  <1>     push rdi
    94 0000072E 50                  <1>     push rax
    95 0000072F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    96 00000736 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
    97                              <1> .mainLp:
    98 00000738 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
    99 0000073F 741E                <1>     je .exit   
   100 00000741 E826000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   101 00000746 50                  <1>     push rax
   102 00000747 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   103 0000074B 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   104 00000751 58                  <1>     pop rax
   105 00000752 7405                <1>     je .errDrv    ;If not, goto next buffer
   106                              <1> .nextBuffer:
   107 00000754 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   108 00000757 EBDF                <1>     jmp short .mainLp
   109                              <1> .errDrv:
   110 00000759 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   111 0000075D EBF5                <1>     jmp short .nextBuffer
   112                              <1> .exit:
   113 0000075F 58                  <1>     pop rax
   114 00000760 5F                  <1>     pop rdi
   115 00000761 F605(69040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   116                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000768 74C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   117 0000076A F9                  <1>     stc ;If so, return CF=CY
   118                              <1>     return
    13                              <2> %%_ret:
    14 0000076B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   119                              <1> 
   120                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   121                              <1> ;Flushes and cleans the dirty bit from the buffer
   122                              <1> ;Input: AH = Drives to ignore flush for
   123                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   124                              <1> ;       rdi -> Buffer in question
   125 0000076C 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   126                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000076F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   127 00000771 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   128 00000773 7406                <1>     je .takeThisBuffer
   129 00000775 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   130 00000778 F8                  <1>     clc
   131                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000779 75F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   132                              <1> .takeThisBuffer:
   133 0000077B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   134                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000077F 74EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   135 00000781 50                  <1>     push rax    ;Save the drive number
   136 00000782 0FB64709            <1>     movzx eax, byte [rdi + bufferHdr.bufferFlags]
   137 00000786 50                  <1>     push rax    ;Save the buffer flags
   138 00000787 E80A000000          <1>     call flushAndFreeBuffer
   139 0000078C 58                  <1>     pop rax     ;Get back the flags
   140 0000078D 7205                <1>     jc .exit
   141 0000078F 24BF                <1>     and al, ~dirtyBuffer    ;Clean the dirty bit
   142 00000791 884709              <1>     mov byte [rdi + bufferHdr.bufferFlags], al  ;And return the flags!
   143                              <1> .exit:  
   144 00000794 58                  <1>     pop rax     ;Get back the drive number
   145                              <1>     return
    13                              <2> %%_ret:
    14 00000795 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   148                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   149                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   150                              <1> ;Exit:  CF=NC : Success
   151                              <1> ;       CF=CY : Fail, terminate the request
   152 00000796 50                  <1>     push rax
   153 00000797 53                  <1>     push rbx
   154 00000798 51                  <1>     push rcx
   155 00000799 52                  <1>     push rdx
   156 0000079A 56                  <1>     push rsi
   157 0000079B 55                  <1>     push rbp
   158                              <1> ;If the buffer is freed, skip flushing to avoid issues
   159 0000079C B8FF000000          <1>     mov eax, freeBuffer
   160 000007A1 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   161                              <1>     ;ah = Flags, al = Drive number
   162 000007A5 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   163 000007A7 7473                <1>     je .fbFreeExit  ;If it was free, exit
   164 000007A9 F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   165 000007AC 746E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   166 000007AE 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   167 000007B4 7466                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   168 000007B6 C605(67040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   169 000007BD F6C408              <1>     test ah, dataBuffer
   170 000007C0 7407                <1>     jz .fbNotData
   171 000007C2 800D(67040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   172                              <1> .fbNotData:
   173 000007C9 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   174 000007CE F6C402              <1>     test ah, fatBuffer
   175 000007D1 7406                <1>     jz .fbWriteSetup
   176 000007D3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   177                              <1> .fbWriteSetup:
   178 000007D9 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   179 000007DD 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   180 000007E1 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   181 000007E5 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   182                              <1> .fbWriteDisk:
   183 000007E9 50                  <1>     push rax    ;Save the drive number and flags
   184 000007EA 53                  <1>     push rbx    ;Has pointer to buffer data area
   185 000007EB 51                  <1>     push rcx    ;# of FAT sectors
   186 000007EC 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   187 000007ED 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   188 000007EE 55                  <1>     push rbp    ;DPB ptr for drive
   189 000007EF B901000000          <1>     mov ecx, 1  ;One sector to copy
   190 000007F4 E814650000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   191 000007F9 E848630000          <1>     call absDiskDriverCall    ;Make Driver Request
   192 000007FE 5D                  <1>     pop rbp
   193 000007FF 5E                  <1>     pop rsi
   194 00000800 5A                  <1>     pop rdx
   195 00000801 59                  <1>     pop rcx
   196 00000802 5B                  <1>     pop rbx
   197 00000803 58                  <1>     pop rax
   198                              <1> 
   199 00000804 751E                <1>     jnz .fbFail
   200                              <1> ;Now check if the buffer was a FAT, to write additional copies
   201 00000806 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   202 00000809 7411                <1>     jz .fbFreeExit  ;If not, exit
   203 0000080B FFC9                <1>     dec ecx
   204 0000080D 740D                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   205 0000080F 50                  <1>     push rax
   206 00000810 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   207 00000813 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   208 00000816 58                  <1>     pop rax
   209 00000817 E9CDFFFFFF          <1>     jmp .fbWriteDisk ;Make another request for the other FAT copy
   210                              <1> .fbFreeExit:
   211 0000081C F8                  <1>     clc
   212                              <1> .fbExitFail:
   213 0000081D 5D                  <1>     pop rbp
   214 0000081E 5E                  <1>     pop rsi
   215 0000081F 5A                  <1>     pop rdx
   216 00000820 59                  <1>     pop rcx
   217 00000821 5B                  <1>     pop rbx
   218 00000822 58                  <1>     pop rax
   219                              <1>     return
    13                              <2> %%_ret:
    14 00000823 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   220                              <1> .fbFail:
   221                              <1> ;Enter here only if the request failed
   222 00000824 FFCE                <1>     dec esi
   223 00000826 75C1                <1>     jnz .fbWriteDisk ;Try the request again!
   224                              <1> ;Request failed thrice, critical error call
   225                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   226 00000828 800D(67040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   227 0000082F E84B5B0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   228 00000834 3C01                <1>     cmp al, critRetry
   229 00000836 74A1                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   230                              <1>     ;Else we fail (Ignore=Fail here)
   231 00000838 F9                  <1>     stc ;Set error flag to indicate fail
   232 00000839 E9DFFFFFFF          <1>     jmp .fbExitFail
   233                              <1> 
   234                              <1> testDirtyBufferForDrive:    ;External linkage
   235                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   236                              <1> ;Input: al = Drive number (0 based)
   237                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   238                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   239 0000083E 53                  <1>     push rbx
   240 0000083F 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   241                              <1> .tdbfdCheckBuffer:
   242 00000846 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   243 00000849 7509                <1>     jne .tdbfdGotoNextBuffer
   244 0000084B F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   245 0000084F 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   246 00000851 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   247                              <1> .tdbfdExit:
   248 00000852 5B                  <1>     pop rbx
   249                              <1>     return
    13                              <2> %%_ret:
    14 00000853 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> .tdbfdGotoNextBuffer:
   251 00000854 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   252 00000857 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   253 0000085E 74F2                <1>     je .tdbfdExit
   254 00000860 EBE4                <1>     jmp short .tdbfdCheckBuffer
   255                              <1> 
   256                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   257                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   258                              <1> ; to have a drive number of -1, thus freeing it
   259                              <1> ;Given Drive number is in al
   260 00000862 57                  <1>     push rdi
   261 00000863 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   262                              <1> .i0:
   263 0000086A 4881FFFFFFFFFF      <1>     cmp rdi, -1
   264 00000871 7417                <1>     je .exit
   265 00000873 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   266 00000876 750D                <1>     jne .i1 ;If no, skip freeing
   267 00000878 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   268 0000087E E877FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   269 00000883 EBE5                <1>     jmp short .i0
   270                              <1> .i1:
   271 00000885 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   272 00000888 EBE0                <1>     jmp short .i0
   273                              <1> .exit:
   274 0000088A 5F                  <1>     pop rdi
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000088B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> markBufferDirty:
   278 0000088C 55                  <1>     push rbp
   279 0000088D 9C                  <1>     pushfq
   280 0000088E 488B2D(3D070000)    <1>     mov rbp, qword [currBuff]
   281 00000895 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   282 00000899 9D                  <1>     popfq
   283 0000089A 5D                  <1>     pop rbp
   284                              <1>     return
    13                              <2> %%_ret:
    14 0000089B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   285                              <1> 
   286                              <1> getBuffer: ;Internal Linkage ONLY
   287                              <1> ;
   288                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   289                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   290                              <1> ;Flushes if not in disk change mode. 
   291                              <1> ;If in disk change mode, will check to see if the selected buffer 
   292                              <1> ; has data referring a device using the same DPB as we are changing.
   293                              <1> ; If it is, skip flushing, if not, flush first!
   294                              <1> ;
   295                              <1> ;This function will return a pointer to the desired data sector OR 
   296                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   297                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   298                              <1> ;Entry: rax = Sector to read
   299                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   300                              <1> ;       rsi = DPB to use for transaction
   301                              <1> ;Exit:  CF=NC => 
   302                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   303                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   304 0000089C 51                  <1>     push rcx
   305 0000089D 52                  <1>     push rdx
   306 0000089E 56                  <1>     push rsi
   307 0000089F 57                  <1>     push rdi
   308 000008A0 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   309 000008A2 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   310 000008A7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   311 000008AE 741F                <1>     je .rbReadNewSector
   312 000008B0 48893D(3D070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   313 000008B7 E8EAFDFFFF          <1>     call makeBufferMostRecentlyUsed
   314 000008BC F8                  <1>     clc
   315                              <1> .rbExit:
   316 000008BD 5F                  <1>     pop rdi
   317 000008BE 5E                  <1>     pop rsi
   318 000008BF 5A                  <1>     pop rdx
   319 000008C0 59                  <1>     pop rcx
   320 000008C1 9C                  <1>     pushfq
   321 000008C2 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   322 000008C9 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   323 000008CD 9D                  <1>     popfq
   324                              <1>     return
    13                              <2> %%_ret:
    14 000008CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .rbReadNewSector:
   326 000008CF E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   327 000008D4 E8BDFEFFFF          <1>     call flushAndFreeBuffer
   328 000008D9 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   329                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   330                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   331                              <1>     ; is no longer owned by that File so we mark the owner as none
   332 000008DB 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   333 000008DE 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   334 000008E1 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   335 000008E5 80F902              <1>     cmp cl, fatBuffer
   336 000008E8 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   337 000008EA 7503                <1>     jne .rbNonFATbuffer
   338 000008EC 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   339                              <1> .rbNonFATbuffer:
   340 000008EF 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   341 000008F2 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   342 000008F5 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   343 000008F8 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   344 000008FC C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   345 00000900 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   346 00000905 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   347                              <1> 
   348                              <1> readSectorBuffer:   ;Internal Linkage
   349                              <1> ;Reads a sector into a built sector buffer
   350                              <1> ;Entry: rdi = Pointer to buffer header
   351                              <1> ;Exit:  CF=NC : Success
   352                              <1> ;       CF=CY : Fail, terminate the request
   353                              <1> ;       rbx pointing to buffer header
   354                              <1> ;First make request to device driver
   355 00000907 50                  <1>     push rax
   356 00000908 53                  <1>     push rbx
   357 00000909 51                  <1>     push rcx
   358 0000090A 52                  <1>     push rdx
   359 0000090B 56                  <1>     push rsi
   360 0000090C 55                  <1>     push rbp
   361                              <1> .rsRequest0:
   362 0000090D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   363 00000912 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   364 00000916 7406                <1>     jz .rsRequest1
   365 00000918 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   366                              <1> .rsRequest1:
   367 0000091E 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   368 00000921 B901000000          <1>     mov ecx, 1  ;One sector to copy
   369 00000926 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   370 0000092A 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   371 0000092E 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   372 00000932 E8E1630000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   373 00000937 E80A620000          <1>     call absDiskDriverCall    ;Make Driver Request
   374 0000093C 7508                <1>     jnz .rsFail
   375                              <1> .rsExit:
   376 0000093E F8                  <1>     clc
   377                              <1> .rsExitFail:
   378 0000093F 5D                  <1>     pop rbp
   379 00000940 5E                  <1>     pop rsi
   380 00000941 5A                  <1>     pop rdx
   381 00000942 59                  <1>     pop rcx
   382 00000943 5B                  <1>     pop rbx
   383 00000944 58                  <1>     pop rax
   384                              <1>     return
    13                              <2> %%_ret:
    14 00000945 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> .rsFail:
   386                              <1> ;Enter here only if the request failed
   387 00000946 FFCE                <1>     dec esi
   388 00000948 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   389                              <1> ;Request failed thrice, critical error call
   390                              <1> ;First free the buffer if we failed to read data into it. 
   391                              <1> ;We free this buffer to free the resource if the user aborts.
   392                              <1> ;This function is called in a critical section so the buffer pointer
   393                              <1> ; is under no thread of being reallocated.
   394                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   395 0000094A 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   396 00000950 C605(67040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   397 00000957 E8235A0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   398 0000095C 3C01                <1>     cmp al, critRetry
   399 0000095E 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   400 00000960 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   401 00000964 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   402 00000967 EBA4                <1>     jmp short .rsRequest0
   403                              <1> .fail:
   404 00000969 F9                  <1>     stc ;Set error flag to indicate fail
   405 0000096A E9D0FFFFFF          <1>     jmp .rsExitFail
   406                              <1>     
   407                              <1> findLRUBuffer: ;Internal Linkage
   408                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   409                              <1> ; in rbx and the currBuff variable
   410                              <1> ;Input: Nothing
   411                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   412                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   413 0000096F 52                  <1>     push rdx
   414 00000970 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   415 00000977 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   416 0000097B 7436                <1>     je .flbExit 
   417 0000097D 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   418 00000984 742D                <1>     je .flbExit
   419                              <1> .flbWalk:
   420 00000986 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   421 00000989 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   422 0000098C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   423 00000990 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   424 00000992 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   425 00000999 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   426 0000099B 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   427                              <1> .flbHeadLink:
   428 000009A2 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   429 000009A9 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   430 000009B0 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   431                              <1> .flbExit:
   432 000009B3 5A                  <1>     pop rdx
   433 000009B4 48893D(3D070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   434                              <1>     return
    13                              <2> %%_ret:
    14 000009BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> .flbFreeLink:
   436 000009BC 51                  <1>     push rcx
   437 000009BD 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   438 000009C0 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   439 000009C3 59                  <1>     pop rcx
   440 000009C4 EBDC                <1>     jmp short .flbHeadLink
   441                              <1> 
   442                              <1> findSectorInBuffer:     ;Internal linkage
   443                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   444                              <1> ;If the sector is not in a buffer, returns with a -1
   445                              <1> ;Input: rax = Sector number
   446                              <1> ;       dl = Drive number
   447                              <1> ;Output: rdi = Buffer hdr pointer or -1
   448 000009C6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   449                              <1> .fsiCheckBuffer:
   450 000009CD 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   451 000009D0 7507                <1>     jne .fsiGotoNextBuffer
   452 000009D2 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   453 000009D6 7501                <1>     jne .fsiGotoNextBuffer
   454                              <1> .fsiExit:
   455                              <1>     return
    13                              <2> %%_ret:
    14 000009D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .fsiGotoNextBuffer:
   457 000009D9 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   458 000009DC 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   459 000009E3 74F3                <1>     je .fsiExit
   460 000009E5 EBE6                <1>     jmp short .fsiCheckBuffer
   461                              <1> 
   462                              <1> ;-----------------------------------------------------------------------------
   463                              <1> ;SPECIAL BUFFER FUNCTIONS
   464                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   465                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   466                              <1> ;-----------------------------------------------------------------------------
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 000009E7 51                  <1>     push rcx
   473 000009E8 B101                <1>     mov cl, dosBuffer
   474 000009EA EB0D                <1>     jmp short getBufCommon
   475                              <1> getBufForFat:
   476                              <1> ;Returns a buffer to use for fat data in rbx
   477                              <1> ;Input: [workingDPB] = DPB to transact on
   478                              <1> ;       rax = Sector to transfer
   479                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   480 000009EC 51                  <1>     push rcx
   481 000009ED B102                <1>     mov cl, fatBuffer
   482 000009EF EB08                <1>     jmp short getBufCommon
   483                              <1> getBufForDir:
   484                              <1> ;Returns a buffer to use for disk directory data in rbx
   485                              <1> ;Input: [workingDPB] = File to manipulate
   486                              <1> ;       rax = Sector to transfer
   487                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   488 000009F1 51                  <1>     push rcx
   489 000009F2 B104                <1>     mov cl, dirBuffer
   490 000009F4 EB03                <1>     jmp short getBufCommon
   491                              <1> getBufForData:
   492                              <1> ;Returns a buffer to use for disk data in rbx
   493                              <1> ;Requires a File Handle.
   494                              <1> ;Input: [workingDPB] = File to manipulate
   495                              <1> ;       rax = Sector to transfer
   496                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   497 000009F6 51                  <1>     push rcx
   498 000009F7 B108                <1>     mov cl, dataBuffer
   499                              <1> getBufCommon:
   500 000009F9 56                  <1>     push rsi
   501 000009FA 57                  <1>     push rdi
   502 000009FB 488B35(09070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   503                              <1> .makeReq:
   504 00000A02 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   505 00000A07 5F                  <1>     pop rdi
   506 00000A08 5E                  <1>     pop rsi
   507 00000A09 59                  <1>     pop rcx
   508                              <1>     return
    13                              <2> %%_ret:
    14 00000A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    28                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A0B 53                  <1>     push rbx
     9 00000A0C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 00000A0F B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A14 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A1A 730C                <1>     jae .exit
    13 00000A1C FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A1E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A24 7302                <1>     jae .exit
    16 00000A26 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A28 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A2A 53                  <1>     push rbx
    29 00000A2B 55                  <1>     push rbp
    30 00000A2C 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A33 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000A36 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A3C 731E                <1>     jae .fat32
    34 00000A3E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A44 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A46 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A48 6801000000          <1>     push qword 1
    39 00000A4D EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A4F 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A51 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A53 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A55 6800000000          <1>     push qword 0
    45 00000A5A EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A5C 6802000000          <1>     push qword 2
    48 00000A61 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A64 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A68 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A6A F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A6C 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A70 01D8                <1>     add eax, ebx
    56 00000A72 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A73 5D                  <1>     pop rbp
    58 00000A74 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A76 51                  <1>     push rcx
    68 00000A77 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A79 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A7B 482D02000000        <1>     sub rax, 2
    72 00000A81 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000A84 48D3E0              <1>     shl rax, cl
    74 00000A87 31C9                <1>     xor ecx, ecx
    75 00000A89 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A8C 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A8F 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A91 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A94 E872FFFFFF          <1>     call getFATtype
    83 00000A99 81F902000000        <1>     cmp ecx, 2
    84 00000A9F 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AA1 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AA3 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA5 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AA7 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AA8 89C3                <1>     mov ebx, eax
   100 00000AAA E8C9010000          <1>     call readFAT
   101 00000AAF 7209                <1>     jc .exit
   102 00000AB1 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AB6 75F0                <1>     jne .lp
   104 00000AB8 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000ABA 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000ABC 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000ABE 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000AC0 51                  <1>     push rcx
   117 00000AC1 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AC3 FFC1                <1>     inc ecx
   120 00000AC5 E8AE010000          <1>     call readFAT
   121 00000ACA 7209                <1>     jc .exit
   122 00000ACC 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AD1 75F0                <1>     jne .lp
   124 00000AD3 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AD5 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AD7 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AD9 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000ADB 53                  <1>     push rbx
   140 00000ADC 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000ADF 89C3                <1>     mov ebx, eax
   143 00000AE1 E892010000          <1>     call readFAT
   144 00000AE6 7206                <1>     jc .exit
   145 00000AE8 FFC9                <1>     dec ecx
   146 00000AEA 75F3                <1>     jnz .lp
   147 00000AEC 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000AEE 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000AF0 53                  <1>     push rbx
   157 00000AF1 56                  <1>     push rsi
   158 00000AF2 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AF7 721A                <1>     jc .exit    ;Disk read error?
   160 00000AF9 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000AFE 7413                <1>     je .exit
   162 00000B00 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B05 89C3                <1>     mov ebx, eax
   164 00000B07 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000B0C 89D8                <1>     mov eax, ebx
   166 00000B0E E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000B13 5E                  <1>     pop rsi
   169 00000B14 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000B16 F8                  <1>     clc ;Always clear the flags before starting
   182 00000B17 53                  <1>     push rbx
   183 00000B18 56                  <1>     push rsi
   184 00000B19 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000B1A 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000B1D E837000000          <1>     call findFreeCluster
   188 00000B22 722B                <1>     jc .exit
   189 00000B24 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000B29 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000B2B BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000B30 50                  <1>     push rax
   195 00000B31 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000B36 58                  <1>     pop rax
   197 00000B37 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000B39 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000B3E 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000B40 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000B42 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000B47 7206                <1>     jc .exit
   205 00000B49 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000B4B FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000B4D 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000B4F 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000B50 9C                  <1>     pushfq
   211 00000B51 F7D9                <1>     neg ecx
   212 00000B53 01F1                <1>     add ecx, esi
   213 00000B55 9D                  <1>     popfq
   214 00000B56 5E                  <1>     pop rsi
   215 00000B57 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000B59 53                  <1>     push rbx
   224 00000B5A 52                  <1>     push rdx
   225 00000B5B 55                  <1>     push rbp
   226 00000B5C 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000B63 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000B68 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000B6A E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000B6F 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000B71 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000B73 7409                <1>     jz .exit    ;If yes, exit
   237 00000B75 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000B79 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000B7C 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000B7E 89D8                <1>     mov eax, ebx
   242 00000B80 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000B81 5D                  <1>     pop rbp
   245 00000B82 5A                  <1>     pop rdx
   246 00000B83 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000B85 53                  <1>     push rbx
   257 00000B86 52                  <1>     push rdx
   258 00000B87 55                  <1>     push rbp
   259 00000B88 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   260 00000B8F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000B93 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000B9A B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000B9F 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000BA2 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000BA4 E8CF000000          <1>     call readFAT
   271 00000BA9 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000BAB 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000BAD 750C                <1>     jne .fatProceed
   274 00000BAF 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000BB6 7413                <1>     je .fatFirst
   276 00000BB8 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000BBB 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000BBF 39D0                <1>     cmp eax, edx
   280 00000BC1 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000BC3 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000BC6 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000BC7 5D                  <1>     pop rbp
   286 00000BC8 5A                  <1>     pop rdx
   287 00000BC9 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000BCB 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000BCE 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000BD5 74E4                <1>     je .fatProceed
   294 00000BD7 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000BD9 8A05(5B070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000BDF 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000BE2 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000BE4 FE05(5B070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000BEA 48FF05(5C070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000BF1 488B05(5C070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000BF8 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000BF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000BFA 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000C00 E873000000          <1>     call readFAT
   323 00000C05 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000C07 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000C0C 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000C0E 8905(53070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000C14 FF05(4F070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000C1A E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000C1F 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000C26 C605(5B070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000C2D EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000C2F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000C30 56                  <1>     push rsi
   348 00000C31 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000C36 720E                <1>     jc .exit
   350 00000C38 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000C3A E8DA000000          <1>     call writeFAT
   352 00000C3F 7205                <1>     jc .exit
   353 00000C41 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000C46 5E                  <1>     pop rsi
   356 00000C47 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000C49 50                  <1>     push rax
   370 00000C4A 53                  <1>     push rbx
   371 00000C4B 51                  <1>     push rcx
   372 00000C4C 56                  <1>     push rsi
   373 00000C4D 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000C4F E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000C54 721D                <1>     jc .exit    ;Error exit
   377 00000C56 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000C58 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000C59 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000C5B E8B9000000          <1>     call writeFAT
   381 00000C60 7211                <1>     jc .exit    ;Error exit
   382 00000C62 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000C67 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000C6D 7404                <1>     je .exit
   385 00000C6F 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000C71 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000C73 5E                  <1>     pop rsi
   389 00000C74 59                  <1>     pop rcx
   390 00000C75 5B                  <1>     pop rbx
   391 00000C76 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000C78 53                  <1>     push rbx
   401 00000C79 51                  <1>     push rcx
   402 00000C7A 52                  <1>     push rdx
   403 00000C7B 57                  <1>     push rdi
   404 00000C7C 55                  <1>     push rbp
   405 00000C7D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000C7F E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000C84 E863FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000C89 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000C8B 85C9                <1>     test ecx, ecx
   412 00000C8D 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000C8F F7C101000000        <1>     test ecx, 1
   414 00000C95 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000C97 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000C9C 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000CA1 721E                <1>     jb .exit
   419 00000CA3 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000CA8 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000CAA 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000CAE 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000CB3 7207                <1>     jb .validCluster32   
   425 00000CB5 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000CBA EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000CBC 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000CC1 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000CC2 5D                  <1>     pop rbp
   433 00000CC3 5F                  <1>     pop rdi
   434 00000CC4 5A                  <1>     pop rdx
   435 00000CC5 59                  <1>     pop rcx
   436 00000CC6 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000CC8 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000CCE 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000CD0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000CD4 29D1                <1>     sub ecx, edx
   449 00000CD6 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000CD8 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000CDA 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000CDF FFC0                <1>     inc eax ;Get next FAT sector
   454 00000CE1 53                  <1>     push rbx
   455 00000CE2 E805FDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000CE7 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000CE8 72D8                <1>     jc .exitFail
   458 00000CEA 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000CEC 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000CEF C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000CF2 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000CF4 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000CF9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000CFC EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000CFE 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000D03 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000D08 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000D0D 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000D0F B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000D14 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000D19 53                  <1>     push rbx
   483 00000D1A 51                  <1>     push rcx
   484 00000D1B 52                  <1>     push rdx
   485 00000D1C 56                  <1>     push rsi
   486 00000D1D 57                  <1>     push rdi
   487 00000D1E 55                  <1>     push rbp
   488 00000D1F 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000D21 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000D26 E8C1FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000D2B 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000D2D 85C9                <1>     test ecx, ecx
   495 00000D2F 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000D31 F7C101000000        <1>     test ecx, 1
   497 00000D37 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000D39 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000D3E EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000D40 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000D46 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000D4A E83DFBFFFF          <1>     call markBufferDirty
   506 00000D4F F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000D50 5D                  <1>     pop rbp
   509 00000D51 5F                  <1>     pop rdi
   510 00000D52 5E                  <1>     pop rsi
   511 00000D53 5A                  <1>     pop rdx
   512 00000D54 59                  <1>     pop rcx
   513 00000D55 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000D56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000D57 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000D5D F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000D63 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000D65 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000D69 29D1                <1>     sub ecx, edx
   527 00000D6B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000D6D 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000D6F 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000D74 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000D7A C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000D7D 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000D7F C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000D82 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000D86 E801FBFFFF          <1>     call markBufferDirty
   539 00000D8B FFC0                <1>     inc eax ;Get next FAT sector
   540 00000D8D E85AFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000D92 72BC                <1>     jc .exitFail
   542 00000D94 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000D96 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000D99 EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000D9B 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000DA0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000DA5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000DA8 EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000DAA 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000DAF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000DB4 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000DB6 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000DBB E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000DC0 9C                  <1>     pushfq
   562 00000DC1 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000DC8 7403                <1>     je .exit
   564 00000DCA FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000DCD 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000DCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000DCF 9C                  <1>     pushfq
   571 00000DD0 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000DD7 7403                <1>     je .exit
   573 00000DD9 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000DDC 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000DDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000DDE 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000DE5 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000DE8 7408                <1>     jz .notNet
     6 00000DEA B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00000DEF CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000DF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000DF2 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000DF4 FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000DF6 E81C650000          <1>     call dosCrit1Enter
    13 00000DFB E823610000          <1>     call getCDS     ;Set CDS and current drive vars
    14 00000E00 720C                <1>     jc .critError   ;Return error if this fails
    15 00000E02 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000E09 E85D5D0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000E0E E80E650000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E13 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000E15 E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000E1B 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000E22 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    30 00000E29 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000E2C 8805(FB060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000E32 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000E35 8905(83070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000E3B 8905(7F070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000E41 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000E44 8905(89070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000E4A C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000E4D 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000E4F 813D(83070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000E57 0000                <1>
    43 00000E59 0F8496000000        <1>     je .oldFat
    44 00000E5F 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000E63 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000E67 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000E69 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000E6B 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000E6D 31D2                <1>     xor edx, edx
    50 00000E6F F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000E71 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000E73 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000E77 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000E79 31D2                <1>     xor edx, edx
    58 00000E7B F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000E7D 668905(87070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000E84 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000E8A 89D9                <1>     mov ecx, ebx
    65 00000E8C 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000E8F E8E4FDFFFF          <1>     call readFAT
    68 00000E94 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000E99 7477                <1>     je .errorExit
    70 00000E9B FFC9                <1>     dec ecx
    71 00000E9D 75F0                <1>     jnz .fatlp
    72 00000E9F 8905(83070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000EA5 488D05BA000000      <1>     lea rax, searchDir.nextEp
    75 00000EAC 50                  <1>     push rax    ;Push the return address onto stack
    76 00000EAD 8B05(83070000)      <1>     mov eax, dword [dirClustA]
    77 00000EB3 E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000EB8 0FB71D(87070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000EBF 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000EC2 E82AFBFFFF          <1>     call getBufForDir
    82 00000EC7 0F8234010000        <1>     jc searchDir.hardError
    83 00000ECD E832010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
    84 00000ED2 E8E6010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000ED7 8B05(89070000)      <1>     mov eax, dword [dirEntry]
    86 00000EDD 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000EE2 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000EE4 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000EE7 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000EEA 8A05(FB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000EF0 E975010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000EF5 488D05E9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000EFC 50                  <1>     push rax    ;Push return address onto the stack
   100 00000EFD 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000F01 31D2                <1>     xor edx, edx
   102 00000F03 96                  <1>     xchg esi, eax
   103 00000F04 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000F06 668905(87070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000F0D 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000F10 EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000F12 F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000F14 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000F1B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000F21 7408                <1>     jz .notNet
   125 00000F23 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000F28 CD2F                <1>     int 2fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000F2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129                              <1> ;vvvvvvvvvvvvvvvv NEW NEW NEW vvvvvvvvvvvvvvvv
   130 00000F2B 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   131 00000F32 F605(FB060000)08    <1>     test byte [searchAttr], dirVolumeID  ;Is vol id bit set (highest priority)?
   132 00000F39 7407                <1>     jz .notRoot    ;Skip the intervention if bit not set
   133                              <1> ;Here we do a volid search intervention. Always searches root dir.
   134 00000F3B 31C0                <1>     xor eax, eax ;Search the root dir. Must be the last path element
   135 00000F3D E80C060000          <1>     call prepSetupDirSearchVars
   136                              <1> .notRoot:
   137                              <1> ;^^^^^^^^^^^^^^^^ NEW NEW NEW ^^^^^^^^^^^^^^^^
   138 00000F42 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   139 00000F48 85C0                <1>     test eax, eax
   140 00000F4A 747E                <1>     jz .oldRoot
   141 00000F4C E825FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   142                              <1> .sectorLoop:
   143 00000F51 E89BFAFFFF          <1>     call getBufForDir
   144 00000F56 0F82A5000000        <1>     jc .hardError
   145 00000F5C E8A3000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   146                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   147 00000F61 E8AA000000          <1>     call findInBuffer
   148                              <1> .nextEp:
   149                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F66 73C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00000F68 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   151                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   152                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   153                              <1>     ;IF however, the next cluster is -1, then we return fail
   154 00000F6E 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   155 00000F74 8905(53070000)      <1>     mov dword [currClustD], eax
   156 00000F7A 668B05(87070000)    <1>     mov ax, word [dirSect]
   157 00000F81 8805(5B070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   158 00000F87 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   159 00000F8B 488905(5C070000)    <1>     mov qword [currSectD], rax  
   160 00000F92 C705(4F070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   160 00000F9A 0000                <1>
   161 00000F9C E838FCFFFF          <1>     call getNextSectorOfFile
   162 00000FA1 725E                <1>     jc .hardError
   163 00000FA3 3DFFFFFFFF          <1>     cmp eax, -1
   164 00000FA8 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   165 00000FAA 66FF05(87070000)    <1>     inc word [dirSect]  ;Goto next sector
   166 00000FB1 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   167 00000FB7 3B05(53070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   168 00000FBD 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   169 00000FBF 66C705(87070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   169 00000FC7 00                  <1>
   170 00000FC8 EB87                <1>     jmp short .sectorLoop 
   171                              <1> 
   172                              <1> .oldRoot:
   173                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   174                              <1> ; one large contiguous cluster.
   175                              <1> .oldSectorLp:
   176 00000FCA 0FB705(87070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   177 00000FD1 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   178 00000FD4 E818FAFFFF          <1>     call getBufForDir
   179 00000FD9 7226                <1>     jc .hardError
   180 00000FDB E824000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   181 00000FE0 E82B000000          <1>     call findInBuffer
   182                              <1> .oldNextEP:
   183                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000FE5 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000FE7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   184 00000FE8 7413                <1>     jz .fnfError
   185 00000FEA 66FF05(87070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   186 00000FF1 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   187 00000FF5 3905(89070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   188 00000FFB 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   189                              <1> .fnfError:
   190 00000FFD B012                <1>     mov al, errNoFil
   191 00000FFF F9                  <1>     stc
   192                              <1>     return
    13                              <2> %%_ret:
    14 00001000 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> .hardError:
   194 00001001 B0FF                <1>     mov al, -1
   195                              <1>     return
    13                              <2> %%_ret:
    14 00001003 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> prepSectorSearch:
   197                              <1> ;Input: rbx -> Buffer with Dir sector to search
   198                              <1> ;Output: rsi -> Start of the dir data area
   199                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   200 00001004 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   201 00001008 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   202 0000100C C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   203                              <1>     return
    13                              <2> %%_ret:
    14 0000100F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   204                              <1> 
   205                              <1> findInBuffer:
   206                              <1> ;Input:  rsi = Sector buffer data area
   207                              <1> ;Output: CF=CY => No entries found
   208                              <1> ;        ZF=NE => Keep searching in subsequent directories
   209                              <1> ;        ZF=ZE => End of directory reached early, stop
   210                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   211                              <1> ;        rsi = Points to start of the disk buffer directory entry
   212 00001010 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   213 00001015 8A05(FB060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   214 0000101B E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   215                              <1> .searchMainLp:
   216                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   217 00001020 8A25(07070000)      <1>     mov ah, byte [delChar]
   218 00001026 803E00              <1>     cmp byte [rsi], 00h
   219 00001029 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   220 0000102B 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   221 0000102D 750F                <1>     jne .notLookingForEmpty
   222                              <1> .emptySlot:
   223                              <1> ;Here we check if we are looking for an empty directory entry or
   224                              <1> ; we have reached the end of the file (if the first byte is 00h)
   225                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   226 0000102F 3A25(D8060000)      <1>     cmp ah, byte [fcbName] 
   227                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001035 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   228                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   229 00001037 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   230 0000103A 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   231 0000103C F9                  <1>     stc
   232                              <1>     return
    13                              <2> %%_ret:
    14 0000103D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> .notLookingForEmpty:
   234 0000103E 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   235 00001041 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   236 00001044 803D(68040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   237 0000104B 7434                <1>     je .exclusiveDir
   238 0000104D 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   239 0000104F 7437                <1>     je .volFile ;If so, go here
   240 00001051 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   241 00001054 7414                <1>     je .nextEntry
   242 00001056 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   243 00001058 7710                <1>     ja .nextEntry
   244                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   245                              <1> .scanName:
   246 0000105A 56                  <1>     push rsi
   247 0000105B 488D3D(D8060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   248 00001062 E83E000000          <1>     call .nameCompare
   249 00001067 5E                  <1>     pop rsi
   250 00001068 7424                <1>     je .searchEntryFound
   251                              <1> .nextEntry:
   252                              <1> ;Go to next entry
   253 0000106A 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   254 00001071 FF05(89070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   255 00001077 FFC9                <1>     dec ecx
   256 00001079 75A5                <1>     jnz .searchMainLp
   257                              <1> .badExit:
   258 0000107B 31C0                <1>     xor eax, eax
   259 0000107D FFC0                <1>     inc eax ;Clear ZF
   260 0000107F F9                  <1>     stc
   261                              <1>     return
    13                              <2> %%_ret:
    14 00001080 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   262                              <1> .exclusiveDir:
   263                              <1> ;Used when going down a path, dir bit simply need be set
   264 00001081 F6C410              <1>     test ah, dirDirectory
   265 00001084 75D4                <1>     jnz .scanName
   266 00001086 EBE2                <1>     jmp short .nextEntry
   267                              <1> 
   268                              <1> .volFile:
   269 00001088 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   270 0000108A 74CE                <1>     je .scanName       ;If so, scan the name agrees
   271 0000108C EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   272                              <1> 
   273                              <1> .searchEntryFound:
   274                              <1> ;Here a good entry was found!
   275 0000108E 56                  <1>     push rsi
   276 0000108F 57                  <1>     push rdi
   277 00001090 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   278 00001092 488D3D(59060000)    <1>     lea rdi, curDirCopy
   279 00001099 B904000000          <1>     mov ecx, 32/8
   280 0000109E F348A5              <1>     rep movsq   ;Copy the directory to SDA
   281 000010A1 5F                  <1>     pop rdi
   282 000010A2 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   283 000010A3 F8                  <1>     clc
   284                              <1>     return
    13                              <2> %%_ret:
    14 000010A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   285                              <1> 
   286                              <1> .nameCompare:
   287                              <1> ;Input: rsi = source string
   288                              <1> ;       rdi = string template to compare against
   289                              <1> ;Output: ZF=ZE => Strings are ok
   290                              <1> ;        ZF=NZ => Strings not ok
   291                              <1> ;Accepts wildcards. Trashes al
   292 000010A5 51                  <1>     push rcx
   293 000010A6 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   294                              <1> .ncLp:
   295 000010A8 81F90B000000        <1>     cmp ecx, 11
   296 000010AE 740B                <1>     je .ncExit
   297 000010B0 FFC1                <1>     inc ecx
   298 000010B2 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   299 000010B3 74F3                <1>     je .ncLp    ;If equal, keep going
   300 000010B5 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   301 000010B9 74ED                <1>     je .ncLp
   302                              <1> .ncExit:
   303 000010BB 59                  <1>     pop rcx
   304                              <1>     return
    13                              <2> %%_ret:
    14 000010BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .getNumberOfEntries:
   306 000010BD 55                  <1>     push rbp
   307 000010BE 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   308 000010C5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   309 000010C9 C1E905              <1>     shr ecx, 5  ;Divide by 32
   310 000010CC 5D                  <1>     pop rbp
   311                              <1>     return
    13                              <2> %%_ret:
    14 000010CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> adjustSearchAttr:
   313                              <1> ;Converts the byte to a system only if the bit is set
   314                              <1> ;Input: eax = User selected search mask
   315                              <1> ;Output: eax = Modified search mask
   316 000010CE 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   317 000010D3 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   318                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010D8 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319 000010DA B808000000          <1>     mov eax, dirVolumeID
   320                              <1>     return
    13                              <2> %%_ret:
    14 000010DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> asciiToFCB:
   323                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   324                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   325                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   326                              <1> ;Name is space padded.
   327                              <1> ;Input: rsi = ASCII string buffer
   328                              <1> ;       rdi = FCB name buffer
   329                              <1> ;Output: al = Char that terminated the source string 
   330 000010E0 53                  <1>     push rbx    
   331 000010E1 57                  <1>     push rdi
   332 000010E2 B90B000000          <1>     mov ecx, 11
   333 000010E7 B020                <1>     mov al, " "
   334 000010E9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   335 000010EB 5F                  <1>     pop rdi
   336 000010EC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   337                              <1> .processName:
   338 000010EF AC                  <1>     lodsb   ;Get the char in al
   339 000010F0 E8C75E0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   340 000010F5 84C0                <1>     test al, al
   341 000010F7 742D                <1>     jz .exit
   342 000010F9 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   343 000010FB 740E                <1>     je .extSpace
   344 000010FD 3C2E                <1>     cmp al, "."
   345 000010FF 7413                <1>     je .ext
   346                              <1>     ;Test if the char is valid
   347 00001101 E8F25F0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   348 00001106 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   349 00001108 AA                  <1>     stosb   ;Store the char
   350 00001109 EBE4                <1>     jmp short .processName
   351                              <1> .extSpace:
   352                              <1> ;Now we scan for a period in the name
   353 0000110B AC                  <1>     lodsb   ;Get a char and increase rsi
   354 0000110C 84C0                <1>     test al, al
   355 0000110E 7416                <1>     jz .exit
   356 00001110 3C2E                <1>     cmp al, "."     ;If al is not a period...
   357 00001112 75F7                <1>     jne .extSpace   ; keep searching
   358                              <1> .ext:
   359 00001114 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   360                              <1> .processExt:
   361 00001118 AC                  <1>     lodsb
   362 00001119 84C0                <1>     test al, al
   363 0000111B 7409                <1>     jz .exit
   364 0000111D 3C20                <1>     cmp al, " "
   365 0000111F 7405                <1>     je .exit
   366 00001121 AA                  <1>     stosb
   367 00001122 EBF4                <1>     jmp short .processExt
   368                              <1> .exitBadChar:
   369 00001124 30C0                <1>     xor al, al  ;Return a null terminator
   370                              <1> .exit:
   371 00001126 5B                  <1>     pop rbx
   372                              <1>     return
    13                              <2> %%_ret:
    14 00001127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> FCBToAsciiz:
   375                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   376                              <1> ;Name is space padded too
   377                              <1> ;Input: rsi = FCB name buffer
   378                              <1> ;       rdi = ASCIIZ string buffer
   379 00001128 B908000000          <1>     mov ecx, 8
   380 0000112D F3A4                <1>     rep movsb   ;Move the name over
   381                              <1> .scanNameSpace:
   382 0000112F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   383 00001133 750D                <1>     jne .ext
   384 00001135 48FFCF              <1>     dec rdi
   385 00001138 FFC1                <1>     inc ecx
   386 0000113A 81F908000000        <1>     cmp ecx, 8
   387 00001140 72ED                <1>     jb .scanNameSpace
   388                              <1> .ext:
   389 00001142 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   390 00001147 7506                <1>     jne .validExt
   391 00001149 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   392 0000114D 7415                <1>     je .exit
   393                              <1> .validExt:
   394 0000114F B02E                <1>     mov al, "." ;We have a valid extension, store a period
   395 00001151 AA                  <1>     stosb
   396 00001152 B903000000          <1>     mov ecx, 3
   397 00001157 F3A4                <1>     rep movsb   ;Move the three extension chars over
   398                              <1> .scanExtSpace:
   399 00001159 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   400 0000115D 7505                <1>     jne .exit
   401 0000115F 48FFCF              <1>     dec rdi
   402 00001162 EBF5                <1>     jmp short .scanExtSpace
   403                              <1> .exit:
   404 00001164 31C0                <1>     xor eax, eax
   405 00001166 AA                  <1>     stosb   ;Store a null at the end
   406                              <1>     return
    13                              <2> %%_ret:
    14 00001167 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> setupFFBlock:
   409                              <1> ;Sets up the find first block for the search
   410                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   411 00001168 50                  <1>     push rax
   412 00001169 53                  <1>     push rbx
   413 0000116A 56                  <1>     push rsi
   414 0000116B 57                  <1>     push rdi
   415 0000116C 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   416 0000116F 8A05(FB060000)      <1>     mov al, byte [searchAttr]
   417 00001175 243F                <1>     and al, 3Fh ;Clear upper two bits
   418 00001177 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   419 0000117A 0FB605(08070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   420 00001181 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   421 00001183 488D35(D8060000)    <1>     lea rsi, fcbName
   422 0000118A 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   423 0000118E 57                  <1>     push rdi
   424 0000118F 48B820202020202020- <1>     mov rax, "        "
   424 00001198 20                  <1>
   425 00001199 48AB                <1>     stosq
   426 0000119B 66AB                <1>     stosw
   427 0000119D AA                  <1>     stosb
   428 0000119E 5F                  <1>     pop rdi
   429 0000119F 48A5                <1>     movsq   ;Move 8 chars
   430 000011A1 66A5                <1>     movsw   ;Move 2 chars
   431 000011A3 A4                  <1>     movsb   ;Move the final char
   432                              <1> 
   433 000011A4 8B05(89070000)      <1>     mov eax, dword [dirEntry]
   434 000011AA 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   435 000011AD 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]
   436 000011B3 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   437 000011B6 8A05(64060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   438 000011BC 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   439 000011BF 8B05(6F060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   440 000011C5 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   441 000011C8 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   442 000011CE 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   443 000011D1 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   444 000011D5 488D35(59060000)    <1>     lea rsi, curDirCopy
   445 000011DC E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   446                              <1> 
   447 000011E1 5F                  <1>     pop rdi
   448 000011E2 5E                  <1>     pop rsi
   449 000011E3 5B                  <1>     pop rbx
   450 000011E4 58                  <1>     pop rax
   451                              <1>     return
    13                              <2> %%_ret:
    14 000011E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   452                              <1> 
   453                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   454                              <1> ;Gets the drive letter for the path in al
   455                              <1> ;Input: rsi = Buffer to process
   456                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   457                              <1> ;       ZF=ZE and al = 0 => Null path
   458                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   459                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   460                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   461 000011E6 30C0                <1>     xor al, al
   462 000011E8 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   463                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011EB 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   464 000011ED 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   465                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011F1 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   466 000011F3 66AD                <1>     lodsw   ;Get first word, rsi += 2
   467                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   468 000011F5 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   469 000011F7 2C60                <1>     sub al, 60h
   470                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011F9 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   471 000011FB B0FF                <1>     mov al, -1  ;Else not a valid drive number
   472                              <1>     return
    13                              <2> %%_ret:
    14 000011FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> getDirPath:
   475 000011FE 30C0                <1>     xor al, al   ;Set to Directory
   476 00001200 EB02                <1>     jmp short getPath
   477                              <1> getFilePath:
   478 00001202 B0FF                <1>     mov al, -1  ;Set to File
   479                              <1> getPath:
   480                              <1> ;Called with:
   481                              <1> ; rdi = SDA Buffer for filename
   482                              <1> ; rsi = Potentially unqualified filename
   483                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   484 00001204 50                  <1>     push rax
   485 00001205 57                  <1>     push rdi
   486 00001206 E876000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   487 0000120B 5F                  <1>     pop rdi
   488 0000120C 58                  <1>     pop rax
   489                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000120D 72EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   490                              <1>     ;Now our name is FQ, we can search the for it!
   491 0000120F 48813D(11070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   491 00001217 FFFFFF              <1>
   492 0000121A 0F8490010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   493 00001220 8805(68040000)      <1>     mov byte [fileDirFlag], al 
   494 00001226 B0FF                <1>     mov al, -1
   495 00001228 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   496 0000122E 8805(2D060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   497 00001234 C605(04070000)00    <1>     mov byte [parDirExist], 0   
   498 0000123B C605(03070000)00    <1>     mov byte [fileExist], 0     
   499 00001242 8A05(08070000)      <1>     mov al, byte [workingDrv]
   500 00001248 FEC0                <1>     inc al
   501 0000124A 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   502 0000124E 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   503 00001253 7424                <1>     je .net
   504 00001255 488B1D(1D060000)    <1>     mov rbx, qword [fname1Ptr]
   505 0000125C 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   506 00001263 488D7301            <1>     lea rsi, qword [rbx + 1]
   507 00001267 FF35(11070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   508 0000126D E88D010000          <1>     call pathWalk
   509 00001272 8F05(11070000)      <1>     pop qword [workingCDS]
   510                              <1>     return
    13                              <2> %%_ret:
    14 00001278 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> .net:
   512 00001279 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   513 0000127C E985010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   514                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   515                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   516                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   517                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   518                              <1>     ; so the redir can do it's job.
   519                              <1> 
   520                              <1> canonicaliseFileName:
   521                              <1> ;Always trying to build and qualify a full pathname
   522                              <1> ;Does getPath without hitting the disk
   523 00001281 B0FF                <1>     mov al, -1
   524 00001283 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   525 00001289 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   526 0000128F 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   527 00001296 FEC0                <1>     inc al  ;make al = 0
   528 00001298 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   529 0000129E E838000000          <1>     call getPathNoCanon.epAlt
   530                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012A3 72D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   531                              <1>     ;Check the last two chars to see if we have a null terminator.
   532                              <1>     ;If neither has a null terminator, add one
   533 000012A5 31C0                <1>     xor eax, eax
   534 000012A7 3807                <1>     cmp byte [rdi], al
   535                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012A9 74CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536 000012AB 3847FF              <1>     cmp byte [rdi - 1], al 
   537                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012AE 74C8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   538 000012B0 AA                  <1>     stosb
   539                              <1>     return
    13                              <2> %%_ret:
    14 000012B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> getDirPathNoCanon:
   542                              <1> ;FCB only
   543 000012B2 31C0                <1>     xor eax, eax
   544 000012B4 4889FE              <1>     mov rsi, rdi
   545 000012B7 EB07                <1>     jmp short getPathNoCanon
   546                              <1> getFilePathNoCanon:
   547                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   548                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   549 000012B9 B0FF                <1>     mov al, -1
   550 000012BB 4889FE              <1>     mov rsi, rdi
   551 000012BE EB00                <1>     jmp short getPathNoCanon
   552                              <1> getPathNoCanon:
   553                              <1> ;Called with:
   554                              <1> ; rdi = SDA Buffer for filename
   555                              <1> ; rsi = Potentially unqualified filename
   556                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   557 000012C0 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   558 000012C6 B0FF                <1>     mov al, -1
   559 000012C8 8805(00070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   560 000012CE 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   561 000012D5 8805(2D060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   562                              <1> .epAlt:
   563 000012DB C605(04070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   564 000012E2 C605(03070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   565 000012E9 F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   566 000012F0 7431                <1>     jz .notServer
   567 000012F2 E8EFFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   568 000012F7 E8275C0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   569 000012FC FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   570 000012FE 56                  <1>     push rsi
   571 000012FF 57                  <1>     push rdi
   572 00001300 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   573 00001307 50                  <1>     push rax
   574 00001308 E80A600000          <1>     call dosCrit1Enter
   575 0000130D E859580000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   576 00001312 E80A600000          <1>     call dosCrit1Exit
   577 00001317 58                  <1>     pop rax
   578 00001318 5F                  <1>     pop rdi
   579 00001319 5E                  <1>     pop rsi
   580 0000131A 0F83AA000000        <1>     jnc .driveOk
   581                              <1> .serverExit:
   582 00001320 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   583                              <1>     return
    13                              <2> %%_ret:
    14 00001322 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .notServer:
   585                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   586 00001323 48C705(11070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   586 0000132B FFFFFF              <1>
   587 0000132E B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   588 00001333 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   589                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001335 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   590 00001337 E8AAFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   591 0000133C 9C                  <1>     pushfq  ;Save the flag state on stack
   592 0000133D 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   593 0000133E 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   594 00001341 E86A5C0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   595 00001346 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   596 00001348 E8635C0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   597 0000134D 756B                <1>     jnz .notNet
   598 0000134F 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   599 00001351 7567                <1>     jne .notNet
   600 00001353 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   601 00001354 9D                  <1>     popfq
   602 00001355 66AD                <1>     lodsw
   603 00001357 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   604 0000135B 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   605                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   606                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   607                              <1> ; redirector Find First Without CDS
   608 0000135D 8A1D(2D060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   609 00001363 C605(2D060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   610 0000136A 53                  <1>     push rbx
   611                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   612 0000136B AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   613 0000136C E84B5C0000          <1>     call uppercaseChar  ;Make char in al uppercase
   614 00001371 84C0                <1>     test al, al
   615 00001373 7435                <1>     jz .netEnd
   616 00001375 E8365C0000          <1>     call swapPathSeparator  ;If path sep, swap it
   617 0000137A AA                  <1>     stosb
   618 0000137B 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   619                              <1>     ;Skip all following pathseps if there are any
   620                              <1> .moveNetSharePtr:
   621 0000137D AC                  <1>     lodsb
   622 0000137E E82D5C0000          <1>     call swapPathSeparator
   623 00001383 74F8                <1>     jz .moveNetSharePtr
   624 00001385 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   625 00001388 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   626 0000138B 84C0                <1>     test al, al ;Was this char null?
   627 0000138D 741B                <1>     jz .netEnd  ;Skip processing if so!
   628 0000138F 4889FB              <1>     mov rbx, rdi
   629 00001392 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   630 00001395 E86C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   631 0000139A 721C                <1>     jc .netExitBad
   632                              <1>     ;Now if we have a trailing backslash, throw it away
   633                              <1>     ;rdi points to the null char of the path
   634 0000139C 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   635 0000139F E80C5C0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   636 000013A4 7504                <1>     jnz .netEnd
   637 000013A6 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   638                              <1> .netEnd:
   639 000013AA 5B                  <1>     pop rbx
   640 000013AB 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   641                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000013AD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000013AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   642                              <1> .netFFnoCDS:
   643 000013B0 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   644 000013B5 CD2F                <1>     int 2Fh
   645                              <1>     return
    13                              <2> %%_ret:
    14 000013B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> .netExitBad:
   647 000013B8 5B                  <1>     pop rbx
   648                              <1>     return
    13                              <2> %%_ret:
    14 000013B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   649                              <1> .notNet:
   650                              <1> ;This is the normal case; paths can be relative, or absolute.
   651 000013BA 58                  <1>     pop rax ;Get the drive letter back
   652 000013BB 9D                  <1>     popfq   ;Get the flag state back
   653 000013BC 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   654                              <1> .pnfErr:
   655 000013BE B003                <1>     mov al, errPnf  ;Null path error
   656 000013C0 F9                  <1>     stc
   657                              <1>     return
    13                              <2> %%_ret:
    14 000013C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   658                              <1> .notNull:
   659 000013C2 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   660 000013C4 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   661 000013C6 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   662 000013C8 F9                  <1>     stc
   663                              <1>     return
    13                              <2> %%_ret:
    14 000013C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   664                              <1> .driveOk:
   665 000013CA 84C0                <1>     test al, al
   666 000013CC 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   667                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   668 000013CE 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   669 000013D1 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   670 000013D3 50                  <1>     push rax    ;Save the drive letter
   671 000013D4 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   672 000013D5 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   673 000013D8 E8D35B0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   674                              <1>     ;If al is a path separator, then this path is absolute.
   675 000013DD 58                  <1>     pop rax ;Get back the drive letter
   676 000013DE 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   677                              <1> .absoPath:
   678                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   679 000013E0 48FFC6              <1>     inc rsi
   680 000013E3 EB1A                <1>     jmp short .commonDir
   681                              <1> .curPath:
   682                              <1> ;This is only jumped to if we are relative the current drive
   683                              <1> ;rsi points to first char in path
   684                              <1> ;If this char is \ or /, then it is an absolute path.
   685 000013E5 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   686 000013EB FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   687 000013ED 50                  <1>     push rax    ;Save the current drive number
   688 000013EE 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   689 000013F0 E8BB5B0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   690 000013F5 58                  <1>     pop rax ;Get back the current drive number
   691 000013F6 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   692                              <1> .relMain:
   693 000013F8 C605(00070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   694                              <1> .commonDir:
   695                              <1> ;rsi points to the start of the string we will be appending
   696                              <1> ;Fall through now
   697                              <1> pathWalk:
   698                              <1> ;Input: rsi must point to source buffer for path to expand
   699                              <1> ;       rdi must point to a destination buffer
   700                              <1> ;       al must contain the drive 1 based number
   701 000013FF E8B6000000          <1>     call prepareDir    ;Prepare the start of the path
   702 00001404 727D                <1>     jc .badDriveExit 
   703                              <1> .netEp:
   704                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   705                              <1> ;For subst, resolution cannot go past backslash offset.
   706                              <1> ;For join, it is transparent.
   707 00001406 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   708 00001409 7512                <1>     jnz .mainlp
   709                              <1>     ;Setup dummy dir data for Root directory
   710 0000140B 31C0                <1>     xor eax, eax
   711 0000140D 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   712 00001414 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   713 0000141B EB6C                <1>     jmp short .exitGood
   714                              <1> .mainlp:
   715                              <1>     ;rbx must remain constant in this portion,
   716                              <1>     ; and is used to signify the first writable byte in the path
   717 0000141D 53                  <1>     push rbx
   718 0000141E E85D010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   719 00001423 5B                  <1>     pop rbx
   720 00001424 726A                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   721 00001426 84C0                <1>     test al, al
   722 00001428 7507                <1>     jnz .notFile
   723 0000142A C605(04070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   724                              <1> .notFile:
   725 00001431 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   726 00001432 E8C4040000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   727 00001437 58                  <1>     pop rax
   728 00001438 736B                <1>     jnc .deviceFound
   729 0000143A E827020000          <1>     call searchForPathspec  ;and search the directory
   730 0000143F 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   731 00001441 E876020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   732 00001446 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   733 00001448 84C0                <1>     test al, al ;Exit if this pathspec was a file
   734 0000144A 743D                <1>     jz .exitGood
   735                              <1>     ;Here I have to take the cluster data from the found directory entry
   736                              <1>     ; and setup the search for the next pathspec portion
   737                              <1>     ;Copy necessary data from the current directory copy
   738 0000144C 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   739 00001453 74C8                <1>     jz .mainlp
   740 00001455 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   741 0000145C C1E010              <1>     shl eax, 10h    ;Shift it high
   742 0000145F 668B05(73060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   743                              <1>     ;eax now has the cluster number of the search
   744 00001466 8905(83070000)      <1>     mov dword [dirClustA], eax
   745 0000146C 8905(7F070000)      <1>     mov dword [dirClustPar], eax
   746 00001472 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   747 00001474 8905(89070000)      <1>     mov dword [dirEntry], eax
   748 0000147A 668905(87070000)    <1>     mov word [dirSect], ax
   749 00001481 EB9A                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   750                              <1> .badDriveExit:
   751 00001483 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   752                              <1>     return
    13                              <2> %%_ret:
    14 00001488 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   753                              <1> .exitGood:
   754 00001489 C605(03070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   755                              <1> .exit:
   756                              <1>     return
    13                              <2> %%_ret:
    14 00001490 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> .checkDev:
   758                              <1> ;If the return code is errNoFil AND Int24Fail = 0, then we check to see if 
   759                              <1> ; we are in \DEV pseudo dir
   760 00001491 F605(69040000)FF    <1>     test byte [Int24Fail], -1   ;Make sure we are not returning from a FAIL
   761 00001498 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   762                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   763 0000149A 56                  <1>     push rsi
   764 0000149B 57                  <1>     push rdi
   765 0000149C E8E8030000          <1>     call checkDevPath
   766 000014A1 5F                  <1>     pop rdi
   767 000014A2 5E                  <1>     pop rsi
   768 000014A3 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   769                              <1> .deviceFound:
   770 000014A5 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   771 000014A7 C605(04070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   772 000014AE C605(03070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   773 000014B5 EBD9                <1>     jmp short .exit   
   774                              <1> .nodev:
   775 000014B7 F9                  <1>     stc
   776 000014B8 EBD6                <1>     jmp short .exit
   777                              <1> 
   778                              <1> prepareDir:
   779                              <1> ;Used to transfer the current directory if it is necessary.
   780                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   781                              <1> ; a relative path is specified.
   782                              <1> ;Input: al = 1-based drive letter
   783                              <1> ;Output: rdi = Pointing at where to place chars from source string
   784                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   785                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   786 000014BA 56                  <1>     push rsi    ;Push ptr to source string
   787 000014BB E8575E0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   788 000014C0 E8EE590000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   789 000014C5 730C                <1>     jnc .notJoin ;Very valid disk
   790 000014C7 F605(2D060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   791 000014CE 7544                <1>     jnz .joinEp                 ;If not, proceed. If so, fail.    
   792 000014D0 F9                  <1>     stc
   793 000014D1 EB0C                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   794                              <1> .notJoin:
   795 000014D3 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] 
   796 000014DA E88C560000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   797                              <1>     ;rbp = DPB ptr now
   798                              <1> .critExit:
   799 000014DF E83D5E0000          <1>     call dosCrit1Exit
   800 000014E4 7253                <1>     jc .badDriveExit 
   801 000014E6 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   802                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   803                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   804                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   805                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   806                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   807 000014ED 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   808 000014F4 4889FB              <1>     mov rbx, rdi
   809 000014F7 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   810 000014FB 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   811                              <1>     ;Now check if we have a subst to handle
   812 000014FE 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   813 00001504 7535                <1>     jnz .prepDirSubst
   814 00001506 F605(00070000)FF    <1>     test byte [spliceFlag], -1
   815 0000150D 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   816                              <1>     ;Else we copy the first two chars only (X:)
   817 0000150F 66A5                <1>     movsw  
   818 00001511 B05C                <1>     mov al, "\"
   819 00001513 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   820                              <1> .joinEp:
   821 00001514 31C0                <1>     xor eax, eax    ;Get cluster 0
   822 00001516 EB1B                <1>     jmp short .prepDirExitSkip
   823                              <1> .prepLoop:
   824 00001518 AC                  <1>     lodsb
   825 00001519 84C0                <1>     test al, al ;If al was null, then we stop
   826 0000151B 7403                <1>     jz .prepDirExit
   827 0000151D AA                  <1>     stosb
   828 0000151E EBF8                <1>     jmp short .prepLoop
   829                              <1> .prepDirExit:
   830 00001520 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   831 00001524 7403                <1>     je .prepDirExitSkipPathsep
   832 00001526 B05C                <1>     mov al, "\"
   833 00001528 AA                  <1>     stosb   ;Store the path separator and increment rdi
   834                              <1> .prepDirExitSkipPathsep:
   835 00001529 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   836 00001530 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   837                              <1> .prepDirExitSkip:
   838 00001533 E816000000          <1>     call prepSetupDirSearchVars
   839 00001538 F8                  <1>     clc ;Clear carry before exiting
   840                              <1> .badDriveExit:
   841 00001539 5E                  <1>     pop rsi
   842                              <1>     return
    13                              <2> %%_ret:
    14 0000153A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   843                              <1> .prepDirSubst:
   844 0000153B 51                  <1>     push rcx
   845 0000153C 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   846                              <1> .prepDirCopy1:
   847 00001540 F3A4                <1>     rep movsb   ;Copy the string over
   848 00001542 59                  <1>     pop rcx
   849 00001543 F605(00070000)FF    <1>     test byte [spliceFlag], -1
   850 0000154A 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   851 0000154C EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   852                              <1> prepSetupDirSearchVars:
   853                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   854                              <1> ;       rbp -> Working DPB
   855 0000154E 51                  <1>     push rcx
   856 0000154F 31C9                <1>     xor ecx, ecx
   857 00001551 66890D(87070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   858 00001558 890D(89070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   859 0000155E E8A8F4FFFF          <1>     call getFATtype ;Get type of fat
   860 00001563 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   861 00001569 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   862                              <1>     ;FAT 32 here
   863 0000156B 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   864 0000156D 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   865 0000156F 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   866                              <1> .psdsvExit:
   867 00001572 8905(83070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   868 00001578 8905(7F070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   869 0000157E 59                  <1>     pop rcx
   870                              <1>     return 
    13                              <2> %%_ret:
    14 0000157F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   871                              <1> 
   872                              <1> copyPathspec:
   873                              <1> ;1) Copies a path portion from the source buffer to the destination
   874                              <1> ;2) Advances rsi to the next null, \ or /
   875                              <1> ;3) Expands all * to ?'s
   876                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   877                              <1> ;    next path separator and rdi pointing to the previous pathsep
   878                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   879                              <1> ;    with rsi moving to path separator
   880                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   881                              <1> ;
   882                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   883                              <1> ;           rdi = Points to where to store it
   884                              <1> ;
   885                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   886                              <1> ;           rdi = First char of next space to store next pathspec
   887                              <1> ;           al = Last char stored (either \ or NULL)
   888                              <1> ;           CF=NC = OK path
   889                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   890                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   891 00001580 57                  <1>     push rdi    ;Save the pointer into the user buffer
   892 00001581 C605(8C040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   893 00001588 488D3D(D8060000)    <1>     lea rdi, fcbName
   894 0000158F 57                  <1>     push rdi
   895 00001590 B903000000          <1>     mov ecx, 3
   896 00001595 B820202020          <1>     mov eax, "    " ;Four spaces
   897 0000159A F3AB                <1>     rep stosd   ;Store 12 spaces
   898 0000159C 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   899                              <1> 
   900 0000159D 488D1D(E3060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   901 000015A4 AC                  <1>     lodsb   ;Get first char from user path in al
   902 000015A5 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   903 000015A7 746B                <1>     je .cpsDots
   904 000015A9 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   905                              <1> ;First char is not a dot, so now check if starts with E5h? 
   906                              <1> ;If so, store 05h in its place!
   907 000015AC 3CE5                <1>     cmp al, 0E5h
   908 000015AE 7506                <1>     jne .cpsMainLoop
   909 000015B0 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   910 000015B3 B005                <1>     mov al, 05h
   911 000015B5 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   912                              <1> .cpsMainLoop:
   913 000015B6 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   914 000015B7 84C0                <1>     test al, al ;Is it the null char?
   915 000015B9 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   916 000015BF E8EC590000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   917 000015C4 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   918 000015CA 3C2E                <1>     cmp al, "." ;Filename extension separator
   919 000015CC 7420                <1>     je .cpsExtension
   920                              <1>     ;If we have space in the filename, we check to see if the next char is *
   921 000015CE 3C2A                <1>     cmp al, "*" ;Wildcard?
   922 000015D0 7430                <1>     je .cpsWildcard
   923 000015D2 3C3F                <1>     cmp al, "?" ;Good wildcard?
   924 000015D4 740C                <1>     je .store
   925 000015D6 E8E1590000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   926 000015DB E8185B0000          <1>     call checkCharValid ; and check it is a valid char
   927 000015E0 7472                <1>     je .cpsExitError
   928                              <1> .store:
   929 000015E2 4839DF              <1>     cmp rdi, rbx
   930 000015E5 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   931 000015E7 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   932 000015E8 EBCC                <1>     jmp short .cpsMainLoop
   933                              <1> .cpsInvalidChar:
   934 000015EA 30C0                <1>     xor al, al
   935 000015EC EB3B                <1>     jmp short .cpsProcessName
   936                              <1> .cpsExtension:
   937                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   938 000015EE B903000000          <1>     mov ecx, 3 
   939 000015F3 488D3D(E0060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   940 000015FA 57                  <1>     push rdi
   941 000015FB B020                <1>     mov al, " "
   942 000015FD F3AA                <1>     rep stosb
   943 000015FF 5F                  <1>     pop rdi
   944 00001600 EBB4                <1>     jmp short .cpsMainLoop
   945                              <1> .cpsWildcard:
   946                              <1> ;Fill the entire FCB filespec with ?'s.
   947                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   948                              <1> ; *'s from crashing DOS :)
   949 00001602 AC                  <1>     lodsb   ;Get char, inc rsi
   950 00001603 3C2A                <1>     cmp al, "*"
   951 00001605 74FB                <1>     je short .cpsWildcard
   952 00001607 48FFCE              <1>     dec rsi ;Go back to the first non-star char
   953 0000160A B03F                <1>     mov al, "?"
   954                              <1> .cpsWildcardLp:
   955 0000160C AA                  <1>     stosb
   956 0000160D 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
   957 00001610 75FA                <1>     jne short .cpsWildcardLp
   958 00001612 EBA2                <1>     jmp short .cpsMainLoop
   959                              <1> 
   960                              <1> .cpsDots:
   961 00001614 AA                  <1>     stosb   ;Store the first dot
   962 00001615 8A06                <1>     mov al, byte [rsi]
   963 00001617 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   964 00001619 752E                <1>     jne .cpsStore
   965 0000161B A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   966 0000161C 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
   967 0000161E 84C0                <1>     test al, al
   968 00001620 7407                <1>     jz .cpsProcessName
   969 00001622 E889590000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
   970 00001627 752B                <1>     jnz .cpsExitError
   971                              <1> .cpsProcessName:
   972                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   973 00001629 84C0                <1>     test al, al 
   974 0000162B 741C                <1>     jz .cpsStore
   975 0000162D E87E590000          <1>     call swapPathSeparator
   976 00001632 7415                <1>     jz .cpsStore
   977                              <1> .cpsFindTerminator:
   978 00001634 AC                  <1>     lodsb
   979 00001635 84C0                <1>     test al, al 
   980 00001637 7410                <1>     jz .cpsStore
   981 00001639 E872590000          <1>     call swapPathSeparator
   982 0000163E 7409                <1>     jz .cpsStore
   983 00001640 E8B35A0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   984 00001645 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   985                              <1>     ;If we encounter a terminator, convert to 0
   986 00001647 30C0                <1>     xor al, al
   987                              <1> .cpsStore:
   988 00001649 488D3D(E3060000)    <1>     lea rdi, fcbName+11
   989 00001650 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   990 00001651 5F                  <1>     pop rdi
   991 00001652 F8                  <1>     clc
   992                              <1>     return
    13                              <2> %%_ret:
    14 00001653 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   993                              <1> .cpsExitError:
   994 00001654 5F                  <1>     pop rdi
   995 00001655 F9                  <1>     stc
   996                              <1>     return
    13                              <2> %%_ret:
    14 00001656 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   997                              <1> .cpsSkipPathseps:
   998 00001657 AC                  <1>     lodsb
   999 00001658 E853590000          <1>     call swapPathSeparator
  1000 0000165D 74F8                <1>     jz .cpsSkipPathseps
  1001 0000165F 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1002 00001662 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1003 00001664 EBE3                <1>     jmp short .cpsStore
  1004                              <1> 
  1005                              <1> searchForPathspec:
  1006                              <1>     ;Now search the current directory for this filename
  1007                              <1>     ;Find first using SDA ffBlock
  1008                              <1>     ;If al = 0, we have final file name or directory name
  1009                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1010                              <1>     ;Output: CF=CY => Error occured
  1011                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1012                              <1>     ;                 FF block somewhat setup
  1013                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1014 00001666 50                  <1>     push rax
  1015 00001667 53                  <1>     push rbx
  1016 00001668 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1017 00001669 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1018 0000166A 0FB61D(68040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1019 00001671 53                  <1>     push rbx    ;and push it onto the stack
  1020                              <1> ;Evaluate whether we are searching for a file for a directory
  1021 00001672 84C0                <1>     test al, al
  1022 00001674 741D                <1>     jz .sfpPNfile
  1023                              <1>     ;Fall if subdir
  1024 00001676 488D3D(D8060000)    <1>     lea rdi, fcbName
  1025 0000167D B03F                <1>     mov al, "?" ;Search for wildcard
  1026 0000167F B90B000000          <1>     mov ecx, 11
  1027 00001684 F2AE                <1>     repne scasb
  1028 00001686 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1029 00001688 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1030 0000168A C605(68040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1031 00001691 EB07                <1>     jmp short .sfpPNMain
  1032                              <1> .sfpPNfile:
  1033                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1034 00001693 0FB605(FB060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1035                              <1> .sfpPNMain:
  1036 0000169A 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1037 000016A1 7405                <1>     je .sfpPNNoDisk
  1038 000016A3 E86CF8FFFF          <1>     call searchDir
  1039                              <1> .sfpPNNoDisk:
  1040 000016A8 5B                  <1>     pop rbx
  1041 000016A9 881D(68040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1042 000016AF 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1043 000016B0 5E                  <1>     pop rsi
  1044 000016B1 5B                  <1>     pop rbx
  1045 000016B2 58                  <1>     pop rax
  1046                              <1>     return
    13                              <2> %%_ret:
    14 000016B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .sfpPnf:
  1048 000016B4 B803000000          <1>     mov eax, errPnf
  1049                              <1> .sfpErrExit:
  1050 000016B9 F9                  <1>     stc ;Set carry
  1051 000016BA EBEC                <1>     jmp short .sfpPNNoDisk
  1052                              <1> 
  1053                              <1> addPathspecToBuffer:
  1054                              <1> ;Input: fcbName = Qualified pathname portion
  1055                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1056                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1057                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1058                              <1> ;rbx points to the "head of the path"
  1059                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1060 000016BC F605(2D060000)FF    <1>     test byte [skipDisk], -1
  1061                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000016C3 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1062 000016C5 803D(D8060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1063 000016CC 7461                <1>     je .aptbDots
  1064                              <1>     ;Copy filename over to internal buffer
  1065                              <1> .aptbAddNull:
  1066 000016CE 56                  <1>     push rsi    ;Save source pointer position
  1067 000016CF 488D35(D8060000)    <1>     lea rsi, fcbName
  1068 000016D6 E84DFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1069 000016DB 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1070 000016DE 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1071 000016DF E8C4000000          <1>     call .aptbInterveneEnterJoin
  1072                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000016E4 72CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1073                              <1> .aptbHandleTerminator:
  1074 000016E6 8A05(E3060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1075 000016EC 84C0                <1>     test al, al
  1076 000016EE 741A                <1>     jz .aptbHandleNull
  1077 000016F0 E8BB580000          <1>     call swapPathSeparator
  1078 000016F5 0F85C5000000        <1>     jnz .aptbErrorExit
  1079                              <1> ;Handle path separator here directly
  1080 000016FB 50                  <1>     push rax    ;Preserve the terminator char
  1081 000016FC 8A47FF              <1>     mov al, byte [rdi - 1]
  1082 000016FF E8AC580000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1083 00001704 58                  <1>     pop rax
  1084 00001705 7426                <1>     jz .aptbExitOk 
  1085 00001707 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1086 00001708 EB23                <1>     jmp short .aptbExitOk
  1087                              <1> .aptbHandleNull:
  1088 0000170A E85B000000          <1>     call .aptbAtHeadOfPath
  1089 0000170F 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1090 00001711 50                  <1>     push rax
  1091 00001712 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1092 00001715 E896580000          <1>     call swapPathSeparator
  1093 0000171A 58                  <1>     pop rax
  1094 0000171B 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1095 0000171D 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1096 00001720 EB0B                <1>     jmp short .aptbExitOk
  1097                              <1> .aptbHandleNullNoOverwritePrim:
  1098 00001722 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1099 00001726 7403                <1>     je short .aptbHandleNullNoOverwrite
  1100                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1101 00001728 48FFCF              <1>     dec rdi
  1102                              <1> .aptbHandleNullNoOverwrite:
  1103 0000172B 8807                <1>     mov byte [rdi], al  ;Write in a null
  1104                              <1> .aptbExitOk:
  1105 0000172D F8                  <1>     clc
  1106                              <1>     return
    13                              <2> %%_ret:
    14 0000172E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1107                              <1> .aptbDots:
  1108                              <1> ;For one dot, we pull the terminating null to rdi
  1109                              <1> ;For two dots, we search backwards for the previous "\"
  1110 0000172F 803D(D9060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1111 00001736 7409                <1>     je .aptbMoreDots
  1112 00001738 C605(D8060000)20    <1>     mov byte [fcbName], " "
  1113 0000173F EB8D                <1>     jmp short .aptbAddNull
  1114                              <1> .aptbMoreDots:
  1115                              <1> ;Here we have two dots
  1116 00001741 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1117 00001746 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1118                              <1> ;Else, we are able to decrement.
  1119 00001748 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1120                              <1> .aptbDotsLp:
  1121 0000174F E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1122 00001754 7490                <1>     je .aptbHandleTerminator
  1123 00001756 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1124 00001759 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1125 0000175B E850580000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1126 00001760 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1127 00001762 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1128 00001765 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1129                              <1> .aptbAtHeadOfPath:
  1130                              <1> ;Returns ZF=ZE if at head of path.
  1131 0000176A 57                  <1>     push rdi
  1132 0000176B 48FFCF              <1>     dec rdi
  1133 0000176E 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1134 00001771 5F                  <1>     pop rdi
  1135                              <1>     return
    13                              <2> %%_ret:
    14 00001772 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1136                              <1> .aptbInterveneExitJoin:
  1137                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1138 00001773 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]
  1139 0000177A 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1140 00001780 753E                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1141                              <1>     ;Now we change the drive letter and return
  1142 00001782 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1143 00001785 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1144 00001788 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1145 0000178A E824570000          <1>     call getCDSNotJoin
  1146                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000178F 72E1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1147 00001791 56                  <1>     push rsi
  1148 00001792 57                  <1>     push rdi
  1149 00001793 53                  <1>     push rbx
  1150 00001794 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
  1151 0000179B E8CB530000          <1>     call getDiskDPB 
  1152 000017A0 5B                  <1>     pop rbx
  1153 000017A1 5F                  <1>     pop rdi
  1154 000017A2 5E                  <1>     pop rsi
  1155 000017A3 E93EFFFFFF          <1>     jmp .aptbHandleTerminator
  1156                              <1> .aptbInterveneEnterJoin:
  1157                              <1> ;Handles join paths.
  1158 000017A8 F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1159                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017AF 74C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1160 000017B1 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1161 000017B2 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
  1162 000017B9 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1163 000017BE 5E                  <1>     pop rsi
  1164                              <1>     return
    13                              <2> %%_ret:
    14 000017BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> .aptbErrorExit:
  1166 000017C0 B002                <1>     mov al, errFnf
  1167 000017C2 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1168 000017C9 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1169 000017D0 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1170 000017D7 F9                  <1>     stc
  1171                              <1>     return
    13                              <2> %%_ret:
    14 000017D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1172                              <1> 
  1173                              <1> handleJoin:
  1174                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1175                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1176                              <1> ;Input:
  1177                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1178                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1179                              <1> ; rax = 0
  1180                              <1> ;Output:
  1181                              <1> ;If no match, no effect.
  1182                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1183                              <1> ; join drive. rsi is advanced to the next path componant.
  1184                              <1> ;If CF=CY => Disk detection error
  1185 000017D9 51                  <1>     push rcx
  1186 000017DA 55                  <1>     push rbp
  1187 000017DB 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]
  1188 000017E2 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1189 000017E6 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1190 000017EC 740C                <1>     jz .okToGo
  1191 000017EE F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1192 000017F4 0F848C000000        <1>     jz .exitNoCrit
  1193                              <1> .okToGo:
  1194 000017FA E8185B0000          <1>     call dosCrit1Enter
  1195 000017FF 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1196 00001806 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1197                              <1> .checkCDS:
  1198 00001808 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1199 0000180E 7560                <1>     jne .gotoNextCDS
  1200                              <1> .scanCDSName:
  1201                              <1> ;Get the length of the CDS path componant to check
  1202 00001810 51                  <1>     push rcx
  1203 00001811 57                  <1>     push rdi
  1204 00001812 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1205 00001813 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1206 00001816 E8D3570000          <1>     call strlen     ;Get length of the path componant in ecx
  1207 0000181B FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1208 0000181D F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1209 0000181F 754C                <1>     jnz .notString
  1210                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1211 00001821 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1212 00001822 E889570000          <1>     call swapPathSeparator
  1213 00001827 7407                <1>     jz .goodString
  1214 00001829 84C0                <1>     test al, al
  1215 0000182B 7540                <1>     jnz .notString
  1216 0000182D 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1217                              <1> .goodString:
  1218                              <1>     ;Here we know we have the right string.
  1219 00001830 59                  <1>     pop rcx ;Trash original rsi
  1220 00001831 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1221 00001832 59                  <1>     pop rcx 
  1222                              <1>     ;Now store the path in the original CDS before intervening
  1223                              <1>     ; in the path
  1224 00001833 48892D(11070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1225 0000183A 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1226 0000183B 57                  <1>     push rdi
  1227 0000183C 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1228 0000183F 53                  <1>     push rbx    ;Preserve the head of the path
  1229 00001840 E826530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1230 00001845 5B                  <1>     pop rbx
  1231 00001846 5F                  <1>     pop rdi
  1232 00001847 5E                  <1>     pop rsi
  1233 00001848 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1234 0000184A 8A05(08070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1235 00001850 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1236 00001852 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1237 00001856 7403                <1>     je .notNet
  1238 00001858 F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1239 00001859 EB26                <1>     jmp short .exit
  1240                              <1> .notNet:
  1241                              <1> ; Join entry intervention occurs here.
  1242 0000185B 8843FE              <1>     mov byte [rbx - 2], al
  1243 0000185E 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1244                              <1> .pullLp:
  1245 00001862 AC                  <1>     lodsb
  1246 00001863 AA                  <1>     stosb
  1247 00001864 84C0                <1>     test al, al
  1248 00001866 75FA                <1>     jnz .pullLp
  1249 00001868 48FFCF              <1>     dec rdi
  1250 0000186B EB14                <1>     jmp short .exit
  1251                              <1> .notString:
  1252 0000186D 5E                  <1>     pop rsi
  1253 0000186E 5F                  <1>     pop rdi
  1254 0000186F 59                  <1>     pop rcx
  1255                              <1> .gotoNextCDS:
  1256 00001870 4881C55F000000      <1>     add rbp, cds_size
  1257 00001877 FFC1                <1>     inc ecx 
  1258 00001879 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1259 0000187F 7587                <1>     jnz .checkCDS
  1260                              <1> .exit:
  1261 00001881 E89B5A0000          <1>     call dosCrit1Exit
  1262                              <1> .exitNoCrit:
  1263 00001886 5D                  <1>     pop rbp
  1264 00001887 59                  <1>     pop rcx
  1265                              <1>     return
    13                              <2> %%_ret:
    14 00001888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1266                              <1> 
  1267                              <1> checkDevPath:
  1268                              <1> ;Called only if the file/directory was not found on disk.
  1269                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1270                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1271                              <1> ; and check to see if it is a char device. If it is, build a directory
  1272                              <1> ; If it is not, proceed with the request fail.
  1273                              <1> ;
  1274                              <1> ;Input: rsi = Pointer to the next path spec
  1275                              <1> ;Output: CF=NC => Char device found, directory built
  1276                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1277 00001889 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1278                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001890 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1279 00001892 803D(E3060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1280 00001899 7459                <1>     je .notOk                      
  1281                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1282 0000189B 50                  <1>     push rax
  1283 0000189C 48B844455620202020- <1>     mov rax, "DEV     "
  1283 000018A5 20                  <1>
  1284 000018A6 483905(D8060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1285 000018AD 58                  <1>     pop rax
  1286 000018AE 7544                <1>     jne .notOk
  1287 000018B0 813D(E0060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1287 000018B8 205C                <1>
  1288 000018BA 7538                <1>     jne .notOk
  1289                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1290                              <1>     ; looking for a device driver
  1291                              <1>     ;First append it to rdi 
  1292 000018BC B84445565C          <1>     mov eax, "DEV\" 
  1293 000018C1 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1294 000018C2 57                  <1>     push rdi
  1295 000018C3 488D3D(D8060000)    <1>     lea rdi, fcbName
  1296 000018CA E811F8FFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1297                              <1>     ;Returns in al the terminating char of the source string
  1298 000018CF 5F                  <1>     pop rdi
  1299                              <1>     ;If al is a pathsep, fail
  1300 000018D0 E8DB560000          <1>     call swapPathSeparator
  1301 000018D5 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1302 000018D7 30C0                <1>     xor al, al
  1303 000018D9 8805(E3060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1304 000018DF 53                  <1>     push rbx
  1305 000018E0 E844000000          <1>     call checkIfCharDevice
  1306 000018E5 5B                  <1>     pop rbx ;Don't need bh yet
  1307 000018E6 720C                <1>     jc .notOk
  1308 000018E8 E873000000          <1>     call buildCharDir
  1309                              <1>     ;Here the device was determined to be a char device.
  1310                              <1>     ;A dummy directory entry was built for it.
  1311                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1312                              <1>     ; Do not Find Next!
  1313                              <1> .copyName:
  1314 000018ED E836F8FFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1315 000018F2 F8                  <1>     clc
  1316                              <1>     return
    13                              <2> %%_ret:
    14 000018F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1317                              <1> .notOk:
  1318 000018F4 B802000000          <1>     mov eax, errFnf
  1319 000018F9 F9                  <1>     stc
  1320                              <1>     return
    13                              <2> %%_ret:
    14 000018FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1321                              <1> .charDevSearch:
  1322 000018FB 53                  <1>     push rbx
  1323 000018FC E828000000          <1>     call checkIfCharDevice
  1324 00001901 5B                  <1>     pop rbx ;Dont need bh yet
  1325 00001902 72F0                <1>     jc .notOk
  1326 00001904 E857000000          <1>     call buildCharDir
  1327 00001909 803D(E3060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1328 00001910 750C                <1>     jne .cds2
  1329 00001912 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1330 00001916 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1331 00001918 48FFCF              <1>     dec rdi
  1332 0000191B B02F                <1>     mov al, "/" ;Replace \ with "/"
  1333 0000191D AA                  <1>     stosb   ;Store that and let the dir write the filename
  1334                              <1> .cds2:
  1335 0000191E 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1336 00001925 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1337 00001927 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1338                              <1>     return
    13                              <2> %%_ret:
    14 00001928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1339                              <1> 
  1340                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1341                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1342                              <1> ; device driver chain. 
  1343                              <1> ;Output: CF=CY if not found
  1344                              <1> ;        CF=NC if found
  1345                              <1> ;           BH = Low byte of the device attribute word
  1346 00001929 50                  <1>     push rax
  1347 0000192A 57                  <1>     push rdi
  1348 0000192B 488B05(D8060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1349 00001932 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1350                              <1> .checkName:
  1351 00001939 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1352 0000193D 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1353 0000193F F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1354 00001942 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1355 00001944 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1356 00001947 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1357 0000194A 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1358 0000194E 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1359                              <1> .walkList:
  1360 00001950 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1361 00001953 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1362 0000195A 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1363 0000195C F9                  <1>     stc
  1364                              <1> .exit:
  1365 0000195D 5F                  <1>     pop rdi
  1366 0000195E 58                  <1>     pop rax
  1367                              <1>     return
    13                              <2> %%_ret:
    14 0000195F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1368                              <1> 
  1369                              <1> buildCharDir:
  1370                              <1> ;Build a dummy directory entry for the char device in FCBName
  1371                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1372 00001960 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1373                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001967 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1374 00001969 50                  <1>     push rax
  1375 0000196A 57                  <1>     push rdi
  1376 0000196B C605(E3060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1377 00001972 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1378                              <1>     ;Zero the directory copy (32 bytes)
  1379 00001979 50                  <1>     push rax
  1380 0000197A 51                  <1>     push rcx
  1381 0000197B 57                  <1>     push rdi
  1382 0000197C 31C0                <1>     xor eax, eax    ;Zero rax
  1383 0000197E B904000000          <1>     mov ecx, 4
  1384 00001983 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1385 00001986 5F                  <1>     pop rdi
  1386 00001987 59                  <1>     pop rcx
  1387 00001988 58                  <1>     pop rax
  1388 00001989 488B05(D8060000)    <1>     mov rax, qword [fcbName]
  1389 00001990 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1390 00001993 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1391 00001998 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1392 0000199B C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1393                              <1>     ;Get date and time and set the write time in the directory entry
  1394 0000199F E83A120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1395 000019A4 E820130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1396 000019A9 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1397 000019AC 31C0                <1>     xor eax, eax
  1398 000019AE 5F                  <1>     pop rdi
  1399 000019AF 58                  <1>     pop rax
  1400                              <1>     return
    13                              <2> %%_ret:
    14 000019B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1401                              <1> 
  1402                              <1> checkFailingComp:
  1403                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1404                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1405                              <1> ;Returns: ZF=ZE => Last path componant
  1406                              <1> ;         ZF=NZ => Not last path componant
  1407 000019B1 50                  <1>     push rax
  1408 000019B2 8A05(E3060000)      <1>     mov al, byte [fcbName + 11]
  1409 000019B8 84C0                <1>     test al, al
  1410 000019BA 58                  <1>     pop rax
  1411                              <1>     return
    13                              <2> %%_ret:
    14 000019BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 000019BC 4889D7              <1>     mov rdi, rdx
     8 000019BF E82A560000          <1>     call strlen
     9 000019C4 81F940000000        <1>     cmp ecx, 64
    10 000019CA 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 000019CC B003                <1>     mov al, errPnf
    13 000019CE E98F590000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 000019D3 4889D6              <1>     mov rsi, rdx
    16 000019D6 E876560000          <1>     call checkPathspecOK
    17 000019DB 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 000019DD E803570000          <1>     call scanPathWC
    20 000019E2 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 000019E4 C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive
    23 000019EB 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    24 000019F2 E80BF8FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    25                              <1>     ;If the path exists, exit error
    26 000019F7 0F8365590000        <1>     jnc extErrExit
    27                              <1>     ;-----------------------------
    28                              <1>     ;TEST THAT THE DRIVE IS VALID
    29                              <1>     ;This is clearly unnecessary
    30                              <1>     ;    Keep it for now...
    31                              <1>     ;-----------------------------
    32 000019FD 57                  <1>     push rdi
    33 000019FE 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
    34 00001A05 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    35 00001A0B 5F                  <1>     pop rdi
    36 00001A0C 0F8450590000        <1>     jz extErrExit  ;Exit access denied
    37                              <1>     ;-------------------------------------------
    38                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    39 00001A12 E89AFFFFFF          <1>     call checkFailingComp
    40 00001A17 0F8545590000        <1>     jnz extErrExit
    41                              <1>     ;So all is well, the new subdirectories name is in fcbName
    42                              <1>     ;The parent dir's directory entry is in the curDirCopy
    43 00001A1D E8E0530000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    44                              <1>     ;returns in rdi the working cds ptr
    45 00001A22 7312                <1>     jnc .notNet
    46 00001A24 B803110000          <1>     mov eax, 1103h
    47 00001A29 CD2F                <1>     int 2fh
    48 00001A2B 0F8231590000        <1>     jc extErrExit
    49 00001A31 E91E590000          <1>     jmp extGoodExit
    50                              <1> .notNet:
    51 00001A36 E8DC580000          <1>     call dosCrit1Enter
    52                              <1>     ;Current dpb ptr is already set
    53                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    54                              <1>     ;First we make a dummy dir in curDirCopy
    55 00001A3B 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
    56 00001A42 488D35(D8060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    57 00001A49 488D3D(59060000)    <1>     lea rdi, curDirCopy
    58 00001A50 48A5                <1>     movsq   ;Copy the name over
    59 00001A52 A5                  <1>     movsd
    60 00001A53 E886110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    61 00001A58 E86C120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    62 00001A5D 8905(67060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    63 00001A63 8905(6F060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    64 00001A69 31C0                <1>     xor eax, eax
    65 00001A6B 8905(75060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    66 00001A71 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    67 00001A78 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]
    68                              <1> .searchForDirSpace:
    69 00001A7E 8905(83070000)      <1>     mov dword [dirClustA], eax
    70 00001A84 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    71 00001A86 668905(87070000)    <1>     mov word [dirSect], ax
    72 00001A8D 8905(89070000)      <1>     mov dword [dirEntry], eax
    73 00001A93 E873050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    74 00001A98 7328                <1>     jnc .dirEntryFnd
    75 00001A9A 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    75 00001AA2 0000                <1>
    76 00001AA4 0F844A010000        <1>     je .bad ;Set CF and exit
    77 00001AAA E84F060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    78 00001AAF 0F823F010000        <1>     jc .bad
    79 00001AB5 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    80 00001ABA 0F8434010000        <1>     je .bad
    81                              <1>     ;Else eax = Newly allocated cluster
    82 00001AC0 EBBC                <1>     jmp short .searchForDirSpace
    83                              <1> .dirEntryFnd:
    84                              <1> ;rdi points to current directory copy
    85                              <1> ;rsi now points to offset in the buffer to write the entry to
    86                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    87 00001AC2 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]
    88 00001AC9 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    89                              <1>      
    90 00001ACD 488905(45070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    91 00001AD4 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    92 00001ADB 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    93 00001ADE 668935(4D070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    94                              <1> ;Must now request a cluster and sanitise it
    95 00001AE5 E806F0FFFF          <1>     call startNewChain  ;Get cluster number in eax
    96 00001AEA 0F8209010000        <1>     jc .badExit
    97 00001AF0 E83C060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    98 00001AF5 0F82FE000000        <1>     jc .badExit
    99                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   100 00001AFB 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   101 00001B02 C1E810              <1>     shr eax, 10h    ;Get high word low
   102 00001B05 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   103 00001B0C 488B05(45070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   104 00001B13 E8D9EEFFFF          <1>     call getBufForDir
   105 00001B18 0F82DB000000        <1>     jc .badExit
   106 00001B1E 0FB705(4D070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   107 00001B25 488D35(59060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   108 00001B2C 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   109 00001B31 B904000000          <1>     mov ecx, 4
   110 00001B36 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   111 00001B39 E84EEDFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   112                              <1>     ;Now need to read in data sector and make two entries . and ..
   113 00001B3E 57                  <1>     push rdi
   114 00001B3F 51                  <1>     push rcx
   115 00001B40 B90B000000          <1>     mov ecx, 11
   116 00001B45 488D3D(59060000)    <1>     lea rdi, curDirCopy
   117 00001B4C B020                <1>     mov al, " "
   118 00001B4E F3AA                <1>     rep stosb
   119 00001B50 59                  <1>     pop rcx
   120 00001B51 5F                  <1>     pop rdi
   121 00001B52 48B82E000000000000- <1>     mov rax, "."
   121 00001B5B 00                  <1>
   122 00001B5C 8805(59060000)      <1>     mov byte [curDirCopy], al
   123 00001B62 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   124 00001B69 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   125 00001B70 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   126 00001B77 C1E210              <1>     shl edx, 10h
   127 00001B7A 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   128 00001B7C E8F5EEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   129 00001B81 E86BEEFFFF          <1>     call getBufForDir
   130 00001B86 7271                <1>     jc .badExit
   131                              <1>     ;rbx has buffer pointer now
   132 00001B88 488D35(59060000)    <1>     lea rsi, curDirCopy
   133 00001B8F 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   134 00001B93 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   135 00001B98 F348A5              <1>     rep movsq
   136                              <1>     ;Now create .. entry
   137 00001B9B C605(5A060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   138 00001BA2 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   139 00001BA8 E85EEEFFFF          <1>     call getFATtype
   140 00001BAD 81F902000000        <1>     cmp ecx, 2
   141 00001BB3 7207                <1>     jb .notFAT32
   142 00001BB5 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   143 00001BB8 7502                <1>     jne .notFAT32
   144 00001BBA 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   145                              <1> .notFAT32:
   146 00001BBC 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   147 00001BC3 C1E810              <1>     shr eax, 10h
   148 00001BC6 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   149 00001BCD 488D35(59060000)    <1>     lea rsi, curDirCopy
   150 00001BD4 B904000000          <1>     mov ecx, 4
   151 00001BD9 F348A5              <1>     rep movsq
   152 00001BDC E8ABECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   153 00001BE1 E835EBFFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   154 00001BE6 7211                <1>     jc .badExit
   155                              <1> .okExit:
   156                              <1>     ;AND WE ARE DONE!
   157 00001BE8 E834570000          <1>     call dosCrit1Exit
   158 00001BED 31C0                <1>     xor eax, eax
   159 00001BEF E960570000          <1>     jmp extGoodExit
   160                              <1> .bad:
   161 00001BF4 B805000000          <1>     mov eax, errAccDen
   162                              <1> .badExit:
   163 00001BF9 E823570000          <1>     call dosCrit1Exit
   164 00001BFE E95F570000          <1>     jmp extErrExit
   165                              <1> 
   166                              <1> removeDIR:         ;ah = 3Ah
   167 00001C03 4889D7              <1>     mov rdi, rdx
   168 00001C06 E8E3530000          <1>     call strlen
   169 00001C0B 81F940000000        <1>     cmp ecx, 64
   170 00001C11 7607                <1>     jbe .okLength
   171                              <1> .badPath:
   172 00001C13 B003                <1>     mov al, errPnf
   173 00001C15 E948570000          <1>     jmp extErrExit
   174                              <1> .okLength:
   175 00001C1A 4889D6              <1>     mov rsi, rdx
   176 00001C1D E82F540000          <1>     call checkPathspecOK
   177 00001C22 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   178                              <1> .pathOk:
   179 00001C24 E8BC540000          <1>     call scanPathWC
   180 00001C29 72E8                <1>     jc .badPath ;Dont allow wildcards
   181                              <1>     ;Path is ok, now proceed
   182 00001C2B 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   183 00001C32 E8C7F5FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   184 00001C37 72DA                <1>     jc .badPath    ;Path Doesn't exist
   185 00001C39 E8C4510000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   186 00001C3E 7312                <1>     jnc .notNet
   187 00001C40 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   188 00001C45 CD2F                <1>     int 2fh
   189 00001C47 0F8215570000        <1>     jc extErrExit
   190 00001C4D E902570000          <1>     jmp extGoodExit
   191                              <1> .notNet:
   192 00001C52 E8C0560000          <1>     call dosCrit1Enter
   193 00001C57 488D3D(1D050000)    <1>     lea rdi, buffer1
   194 00001C5E E88B530000          <1>     call strlen ;Get the length of the full qualified name in ecx
   195 00001C63 66890D(4D070000)    <1>     mov word [pathLen], cx
   196                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   197 00001C6A 31C0                <1>     xor eax, eax
   198                              <1> .scanLoop:
   199 00001C6C E80D530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   200 00001C71 721A                <1>     jc .notCurrent
   201 00001C73 E8AD530000          <1>     call compareFileNames
   202 00001C78 7404                <1>     jz .cantDelCD
   203 00001C7A FFC0                <1>     inc eax
   204 00001C7C EBEE                <1>     jmp short .scanLoop
   205                              <1> .cantDelCD:
   206 00001C7E B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   207 00001C83 E899560000          <1>     call dosCrit1Exit
   208 00001C88 E9D5560000          <1>     jmp extErrExit
   209                              <1> .notCurrent:
   210 00001C8D 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   211                              <1>     ;Now let use check that our directory is not the CDS currentdir
   212 00001C94 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   213 00001C9B 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   214                              <1>     ;If the given path length is one more than the backslash offset
   215                              <1>     ; due to the terminating null, then the user is trying to delete the 
   216                              <1>     ; root dir. Fail this.
   217 00001C9E 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   218 00001CA2 FFC1                <1>     inc ecx
   219 00001CA4 663B0D(4D070000)    <1>     cmp cx, word [pathLen]
   220 00001CAB 0F8423010000        <1>     je .accessDenied
   221 00001CB1 E868030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   222                              <1>     ;for the entry in the sector we are hoping to delete
   223 00001CB6 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   224 00001CBD C1E010              <1>     shl eax, 10h
   225 00001CC0 0FB71D(73060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   226 00001CC7 09D8                <1>     or eax, ebx
   227 00001CC9 8905(7F070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   228 00001CCF E8A2EDFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   229 00001CD4 E818EDFFFF          <1>     call getBufForDir
   230 00001CD9 0F82FA000000        <1>     jc .exitBad
   231                              <1>     ;rbx points to buffer
   232 00001CDF 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   233 00001CE3 48B82E202020202020- <1>     mov rax, ".       "
   233 00001CEC 20                  <1>
   234 00001CED 483906              <1>     cmp qword [rsi], rax
   235 00001CF0 0F85DE000000        <1>     jne .accessDenied
   236 00001CF6 B42E                <1>     mov ah, "." ;Screw the partial stall
   237 00001CF8 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   238 00001CFC 0F85D2000000        <1>     jne .accessDenied
   239 00001D02 4881C620000000      <1>     add rsi, fatDirEntry_size
   240 00001D09 488D3D(59060000)    <1>     lea rdi, curDirCopy
   241 00001D10 B904000000          <1>     mov ecx, 4
   242 00001D15 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   243                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   244                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   245 00001D18 488D3D(D8060000)    <1>     lea rdi, fcbName
   246 00001D1F B03F                <1>     mov al, "?"
   247 00001D21 B90B000000          <1>     mov ecx, 11
   248 00001D26 F3AA                <1>     rep stosb   ;Store the pattern to search for
   249 00001D28 30C0                <1>     xor al, al  ;Store a terminating zero
   250 00001D2A AA                  <1>     stosb
   251 00001D2B 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   252 00001D31 50                  <1>     push rax    ;Save on stack temporarily
   253 00001D32 8905(83070000)      <1>     mov dword [dirClustA], eax
   254 00001D38 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   255 00001D3A 668905(87070000)    <1>     mov word [dirSect], ax
   256 00001D41 C705(89070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   256 00001D49 0000                <1>
   257 00001D4B C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   258 00001D52 58                  <1>     pop rax
   259 00001D53 E81EEDFFFF          <1>     call getStartSectorOfCluster
   260 00001D58 E894ECFFFF          <1>     call getBufForDir   
   261 00001D5D 727A                <1>     jc .exitBad
   262 00001D5F E8A0F2FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   263 00001D64 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   264 00001D6B 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   265 00001D71 C605(68040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   266 00001D78 E8E4F1FFFF          <1>     call searchDir.rmdirEP
   267 00001D7D 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   268                              <1>     ;Else, this is a empty dir, we can remove it
   269                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   270 00001D7F 488B05(45070000)    <1>     mov rax, qword [tempSect]
   271 00001D86 E866ECFFFF          <1>     call getBufForDir
   272 00001D8B 724C                <1>     jc .exitBad
   273 00001D8D E872F2FFFF          <1>     call prepSectorSearch
   274 00001D92 0FB705(4D070000)    <1>     movzx eax, word [entry]
   275 00001D99 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   276 00001D9D 4801C6              <1>     add rsi, rax    
   277 00001DA0 8A05(07070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   278 00001DA6 8806                <1>     mov byte [rsi], al  ;Store delchar there
   279 00001DA8 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   280 00001DAC 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   281 00001DB0 E8D7EAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   282 00001DB5 C1E210              <1>     shl edx, 10h
   283 00001DB8 09D0                <1>     or eax, edx
   284                              <1>     ;Now remove the FAT chain
   285 00001DBA E870EEFFFF          <1>     call unlinkFAT
   286 00001DBF 7218                <1>     jc .exitBad
   287 00001DC1 E855E9FFFF          <1>     call flushAllBuffersForDPB
   288 00001DC6 7211                <1>     jc .exitBad
   289 00001DC8 E854550000          <1>     call dosCrit1Exit
   290 00001DCD 31C0                <1>     xor eax, eax
   291 00001DCF E980550000          <1>     jmp extGoodExit
   292                              <1> .accessDenied:
   293 00001DD4 B805000000          <1>     mov eax, errAccDen
   294                              <1> .exitBad:
   295 00001DD9 F9                  <1>     stc
   296 00001DDA E842550000          <1>     call dosCrit1Exit
   297 00001DDF E97E550000          <1>     jmp extErrExit
   298                              <1> 
   299                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   300                              <1> ;Input: rdx = Pointer to ASCIIZ string
   301 00001DE4 4889D7              <1>     mov rdi, rdx
   302 00001DE7 E802520000          <1>     call strlen
   303 00001DEC 81F940000000        <1>     cmp ecx, 64
   304 00001DF2 7618                <1>     jbe .okLength
   305                              <1> .badPath:
   306 00001DF4 B003                <1>     mov al, errPnf
   307 00001DF6 E967550000          <1>     jmp extErrExit
   308                              <1> .badPathCrit:
   309 00001DFB E821550000          <1>     call dosCrit1Exit
   310 00001E00 EBF2                <1>     jmp short .badPath
   311                              <1> .badCrit:
   312 00001E02 E81A550000          <1>     call dosCrit1Exit
   313 00001E07 E956550000          <1>     jmp extErrExit
   314                              <1> .okLength:
   315 00001E0C 4889D6              <1>     mov rsi, rdx
   316 00001E0F E83D520000          <1>     call checkPathspecOK
   317 00001E14 72DE                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   318 00001E16 E834530000          <1>     call checkPathNet
   319 00001E1B 74D7                <1>     jz .badPath ;Or Net paths
   320                              <1>     ;Path is ok, now proceed
   321 00001E1D E8F5540000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   322 00001E22 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   323 00001E29 E8D0F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   324 00001E2E 72D2                <1>     jc .badCrit   ;Exit with error code in eax
   325                              <1>     ;Now we check to make sure the path provided is not past the maximum
   326                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   327                              <1>     ; moved the path past the end.
   328 00001E30 488D3D(1D050000)    <1>     lea rdi, buffer1
   329 00001E37 E8B2510000          <1>     call strlen ;Get the length of this path
   330 00001E3C 81F943000000        <1>     cmp ecx, 67
   331 00001E42 77B7                <1>     ja .badPathCrit
   332                              <1>     ;The path must've been ok, so now copy the path into the CDS
   333                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   334                              <1>     ;Copy the workingCDS to the tmpCDS
   335 00001E44 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   336 00001E4B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   337 00001E51 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   338 00001E57 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   339 00001E5D 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   340                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   341 00001E63 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   342 00001E66 E8E4000000          <1>     call .getFatCluster
   343 00001E6B 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   344                              <1>     ;ecx has the length of the path in the buffer
   345 00001E6E 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   346 00001E70 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   347 00001E75 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   348 00001E78 E871510000          <1>     call strlen
   349 00001E7D 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   350 00001E7F 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   351 00001E84 0F8771FFFFFF        <1>     ja .badPathCrit
   352 00001E8A 51                  <1>     push rcx
   353 00001E8B 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   354 00001E92 B95F000000          <1>     mov ecx, cds_size
   355 00001E97 F3A4                <1>     rep movsb   
   356 00001E99 59                  <1>     pop rcx
   357 00001E9A FFC9                <1>     dec ecx ;Remove the trailing null from the count
   358 00001E9C 488D3D(79060000)    <1>     lea rdi, tmpCDS
   359 00001EA3 57                  <1>     push rdi
   360 00001EA4 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   361 00001EA7 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   362 00001EAB F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   363 00001EAD 5F                  <1>     pop rdi
   364 00001EAE 4889FE              <1>     mov rsi, rdi
   365 00001EB1 31C0                <1>     xor eax, eax
   366 00001EB3 31C9                <1>     xor ecx, ecx
   367 00001EB5 FFC9                <1>     dec ecx
   368 00001EB7 F2AE                <1>     repne scasb   ;Search for the terminating null
   369 00001EB9 4881EF02000000      <1>     sub rdi, 2
   370 00001EC0 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   371 00001EC2 E8E9500000          <1>     call swapPathSeparator
   372 00001EC7 7503                <1>     jnz .notSlash
   373 00001EC9 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   374                              <1> .notSlash:
   375 00001ECC 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   376 00001ECF 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   377 00001ED1 E8A8500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   378 00001ED6 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   379 00001EDD 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   380 00001EE0 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   381                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   382                              <1>     ;Backslash offset must always be 2 on a join host
   383 00001EE7 B943000000          <1>     mov ecx, 67
   384 00001EEC F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   385 00001EEE EB41                <1>     jmp short .exitGood
   386                              <1> .notJoin:
   387                              <1> ;rsi -> workingCDS
   388                              <1> ;Lets first copy the working CDS into tmpCDS
   389 00001EF0 488D3D(79060000)    <1>     lea rdi, tmpCDS
   390 00001EF7 B95F000000          <1>     mov ecx, cds_size
   391 00001EFC F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   392 00001EFE E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   393 00001F03 8905(C6060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   394 00001F09 488D3D(79060000)    <1>     lea rdi, tmpCDS
   395 00001F10 488D35(1D050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   396 00001F17 E8E1500000          <1>     call strcpy
   397 00001F1C 488D35(79060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   398 00001F23 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   399 00001F2A B95F000000          <1>     mov ecx, cds_size
   400 00001F2F F3A4                <1>     rep movsb
   401                              <1> .exitGood:
   402 00001F31 E8EB530000          <1>     call dosCrit1Exit
   403 00001F36 31C0                <1>     xor eax, eax
   404 00001F38 E917540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   405                              <1> .net:
   406                              <1> ;SDA Vars are setup for this request
   407 00001F3D B805110000          <1>     mov eax, 1105h
   408 00001F42 CD2F                <1>     int 2fh
   409 00001F44 0F8218540000        <1>     jc extErrExit
   410 00001F4A E905540000          <1>     jmp extGoodExit
   411                              <1> .getFatCluster:
   412 00001F4F 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   413 00001F56 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   414 00001F5D C1E010              <1>     shl eax, 10h
   415 00001F60 09D0                <1>     or eax, edx ;Add low bits to eax
   416                              <1>     return
    13                              <2> %%_ret:
    14 00001F62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> 
   418                              <1> getCurrentDIR:     ;ah = 47h
   419                              <1> ;Returns the path for a drive with no X:\.
   420                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   421                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   422 00001F63 88D0                <1>     mov al, dl  ;Move drive number into al
   423 00001F65 E8AD530000          <1>     call dosCrit1Enter
   424 00001F6A E8444F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   425 00001F6F 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   426                              <1> .badDrvExit:
   427 00001F71 E8AB530000          <1>     call dosCrit1Exit
   428 00001F76 B80F000000          <1>     mov eax, errBadDrv
   429 00001F7B E9E2530000          <1>     jmp extErrExit
   430                              <1> .okDrive:
   431                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   432 00001F80 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   433 00001F81 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   434 00001F88 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   435 00001F89 488D3D(1D050000)    <1>     lea rdi, buffer1
   436 00001F90 E869F2FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   437 00001F95 5E                  <1>     pop rsi ;Get back the original workingCDS
   438 00001F96 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   439 00001F97 72D8                <1>     jc .badDrvExit
   440                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   441                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   442                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   443 00001F99 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   444 00001F9D 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   445 00001FA0 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   446 00001FA3 7503                <1>     jne .dontSkipChar
   447 00001FA5 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   448                              <1> .dontSkipChar:
   449 00001FA8 AC                  <1>     lodsb   ;Get char
   450 00001FA9 84C0                <1>     test al, al
   451 00001FAB 7406                <1>     jz .notSpecialChar
   452 00001FAD 3C05                <1>     cmp al, 05h     ;Special char case?
   453 00001FAF 7502                <1>     jne .notSpecialChar
   454 00001FB1 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   455                              <1> .notSpecialChar:
   456 00001FB3 AA                  <1>     stosb
   457 00001FB4 84C0                <1>     test al, al ;Did we store a terminator char?
   458 00001FB6 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   459 00001FB8 E864530000          <1>     call dosCrit1Exit
   460 00001FBD B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   461 00001FC2 E98D530000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   462                              <1> 
   463                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   464 00001FC7 50                  <1>     push rax
   465 00001FC8 B800600000          <1>     mov eax, 6000h
   466 00001FCD CD21                <1>     int 21h
   467 00001FCF 58                  <1>     pop rax
   468                              <1>     return
    13                              <2> %%_ret:
    14 00001FD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1>     
   470                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   471                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   472 00001FD1 E87B500000          <1>     call checkPathspecOK    ;This preserves rsi
   473 00001FD6 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   474 00001FD8 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   475                              <1> .badPath:
   476 00001FDA B803000000          <1>     mov eax, errPnf
   477 00001FDF E97E530000          <1>     jmp extErrExit
   478                              <1> .pathspecOk:
   479 00001FE4 57                  <1>     push rdi    ;Save the destination
   480 00001FE5 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   481 00001FEC E890F2FFFF          <1>     call canonicaliseFileName
   482 00001FF1 5F                  <1>     pop rdi
   483 00001FF2 0F826A530000        <1>     jc extErrExit
   484 00001FF8 488D35(1D050000)    <1>     lea rsi, buffer1
   485 00001FFF E8F94F0000          <1>     call strcpy
   486 00002004 31C0                <1>     xor eax, eax
   487 00002006 E949530000          <1>     jmp extGoodExit
   488                              <1> 
   489                              <1> ;-----------------------------------
   490                              <1> ;    General Directory Routines    :
   491                              <1> ;-----------------------------------
   492                              <1> 
   493                              <1> 
   494                              <1> findFreeDiskDirEntry:
   495                              <1> ;Find a space in the directory we are searching for a directory entry
   496                              <1> ;Accept first entry starting with a 0E5h or 00h
   497                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   498                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   499                              <1> ; be called for CDS's that are NOT net CDS's).
   500                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   501                              <1> ;       Directory vars must be set up for the directory we are searching in
   502                              <1> ;Output: CF=CY => Error, eax has error code
   503                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   504 0000200B 8A05(07070000)      <1>     mov al, byte [delChar]
   505 00002011 8805(D8060000)      <1>     mov byte [fcbName], al
   506 00002017 E8F8EEFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   507                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000201C 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   508                              <1> ;Free entry found, dir variables are set for the free entry. 
   509                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   510                              <1> getDiskDirectoryEntry:
   511                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   512                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   513                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   514                              <1> ;        qword [tempSect] = Disk sector number of directory
   515                              <1> ;        word [entry] = 32 byte offset into sector
   516                              <1> ;        CF=CY => Error, exit 
   517 0000201E 53                  <1>     push rbx
   518 0000201F 8B05(83070000)      <1>     mov eax, dword [dirClustA]  
   519                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   520                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   521 00002025 0FB71D(87070000)    <1>     movzx ebx, word [dirSect]
   522 0000202C 85C0                <1>     test eax, eax
   523 0000202E 7407                <1>     jz .skipCluster
   524 00002030 E841EAFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   525 00002035 EB1B                <1>     jmp short .skipOldFat
   526                              <1> .skipCluster:
   527 00002037 55                  <1>     push rbp
   528 00002038 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   529 0000203F 0FB705(87070000)    <1>     movzx eax, word [dirSect]
   530 00002046 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   531                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   532 00002049 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   533 0000204D 5D                  <1>     pop rbp
   534 0000204E 7202                <1>     jb .skipOldFat
   535 00002050 F9                  <1>     stc
   536                              <1>     return
    13                              <2> %%_ret:
    14 00002051 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> .skipOldFat:
   538 00002052 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   539 00002055 488905(45070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   540 0000205C E890E9FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   541 00002061 5B                  <1>     pop rbx
   542                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002062 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   543 00002064 53                  <1>     push rbx
   544 00002065 488B1D(3D070000)    <1>     mov rbx, qword [currBuff]
   545 0000206C E893EFFFFF          <1>     call prepSectorSearch
   546                              <1>     ;Above function gets data buffer ptr in rsi
   547 00002071 0FB705(87070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   548 00002078 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   549 0000207C F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   550                              <1>     ; the current sector
   551 0000207E C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   552 00002081 8B1D(89070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   553 00002087 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   554 00002089 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   555 0000208C 66891D(4D070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   556 00002093 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   557 00002096 5B                  <1>     pop rbx
   558                              <1>     return
    13                              <2> %%_ret:
    14 00002097 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> updateSFTDateTimeFields:    
   561                              <1> ;Updates the SFT time/date entries for disk files
   562                              <1> ;Called with:
   563                              <1> ;   [workingDPB] = DPB pointer for the disk device
   564                              <1> ;   [currentSFT] = Current SFT pointer
   565                              <1> ;   bx = attribute byte from the SFT
   566 00002098 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   567                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000209D 75F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   568 0000209F 66F7C30040          <1>     test bx, blokNoDTonClose
   569                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020A4 75F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   570 000020A6 50                  <1>     push rax
   571 000020A7 53                  <1>     push rbx
   572 000020A8 E8310B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   573                              <1>     ;Build date and time words
   574 000020AD E8170C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   575                              <1>     ;Update SFT fields
   576 000020B2 66894713            <1>     mov word [rdi + sft.wTime], ax
   577 000020B6 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   578 000020B9 66894715            <1>     mov word [rdi + sft.wDate], ax
   579 000020BD 31C0                <1>     xor eax, eax
   580 000020BF FF15(2F010000)      <1>     call qword [updateDirShare]
   581 000020C5 5B                  <1>     pop rbx
   582 000020C6 58                  <1>     pop rax
   583                              <1>     return
    13                              <2> %%_ret:
    14 000020C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> 
   585                              <1> getAndUpdateDirSectorForFile:
   586                              <1> ;Input: rdi -> SFT
   587                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   588                              <1> ;               rdi -> SFT
   589 000020C8 FF7727              <1>     push qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   590 000020CB E8EF2C0000          <1>     call setDPBfromSFT
   591 000020D0 58                  <1>     pop rax
   592                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020D1 72F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   593 000020D3 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   594 000020DA C605(67040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   595 000020E1 E80BE9FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   596                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020E6 72DF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   597 000020E8 488B3D(31070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   598 000020EF 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   599 000020F3 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   600 000020F7 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   601 000020FA 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   602                              <1>     return
    13                              <2> %%_ret:
    14 000020FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   603                              <1> 
   604                              <1> growDirectory:
   605                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   606                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   607                              <1> ;                 eax = New Cluster number
   608                              <1> ;               TWO NON CF ERROR CASES.
   609                              <1> ;               If eax = -1 => disk full!
   610                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   611                              <1> ;        CF=CY => Something went wrong. Rip. 
   612 000020FE 53                  <1>     push rbx
   613 000020FF 51                  <1>     push rcx
   614 00002100 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   615 00002106 85C0                <1>     test eax, eax
   616 00002108 7424                <1>     jz .exit
   617 0000210A E894E9FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   618 0000210F 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   619 00002111 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   620 00002116 E8FBE9FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   621 0000211B 7211                <1>     jc .exit
   622 0000211D 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   623 0000211F E854EBFFFF          <1>     call readFAT
   624 00002124 7208                <1>     jc .exit
   625 00002126 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   626 0000212B 7201                <1>     jc .exit
   627 0000212D F8                  <1>     clc
   628                              <1> .exit:
   629 0000212E 59                  <1>     pop rcx
   630 0000212F 5B                  <1>     pop rbx
   631                              <1>     return   
    13                              <2> %%_ret:
    14 00002130 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   632                              <1> sanitiseCluster:
   633                              <1> ;Sanitises the cluster in eax to all zeros
   634                              <1> ;Does not move file pointers
   635                              <1> ;Currently, is only called to sanitise subdirectory clusters
   636                              <1> ;Input: eax = Cluster number
   637                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   638                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   639                              <1> ;        If CF=CY => Error, exit
   640 00002131 50                  <1>     push rax
   641 00002132 53                  <1>     push rbx
   642 00002133 51                  <1>     push rcx
   643 00002134 52                  <1>     push rdx
   644 00002135 56                  <1>     push rsi
   645 00002136 55                  <1>     push rbp
   646 00002137 488B2D(09070000)    <1>     mov rbp, qword [workingDPB]
   647 0000213E E833E9FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   648 00002143 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   649 00002147 FFC2                <1>     inc edx ;Make it a count of sectors
   650                              <1> .getSectorInCluster:
   651 00002149 E8A3E8FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   652 0000214E 721E                <1>     jc .exitBad
   653 00002150 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   654 00002154 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   655 00002158 31C0                <1>     xor eax, eax
   656 0000215A F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   657 0000215C E82BE7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   658                              <1> 
   659 00002161 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   660 00002163 740A                <1>     jz .exit    ;Jump if we done
   661 00002165 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   662 00002169 48FFC0              <1>     inc rax ;Goto next sector in cluster
   663 0000216C EBDB                <1>     jmp short .getSectorInCluster
   664                              <1> .exitBad:
   665 0000216E F9                  <1>     stc
   666                              <1> .exit:
   667 0000216F 5D                  <1>     pop rbp
   668 00002170 5E                  <1>     pop rsi
   669 00002171 5A                  <1>     pop rdx
   670 00002172 59                  <1>     pop rcx
   671 00002173 5B                  <1>     pop rbx
   672 00002174 58                  <1>     pop rax
   673                              <1>     return
    13                              <2> %%_ret:
    14 00002175 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002176 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002177 488D1D(1B050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 0000217E 48891D(A4040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00002185 5B                  <1>     pop rbx
    60 00002186 C705(AC040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 0000218E 0000                <1>
    61 00002190 668905(1B050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00002197 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 0000219D 0F85A1000000        <1>     jnz .notChar
    64 000021A3 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 000021A9 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 000021AF E84C510000          <1>     call dosPushRegs    ;Save context here
    68 000021B4 488D1D5FDEFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 000021BB 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 000021BE C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 000021C1 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 000021C4 890D(96040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 000021CA 31C9                <1>     xor ecx, ecx
    75 000021CC 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 000021CF 7506                <1>     jne .skipBsySet
    77 000021D1 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 000021D7 66870D(99040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 000021DE 488D1D(96040000)    <1>     lea rbx, secdReqHdr
    82 000021E5 E80C480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 000021EA 668B3D(99040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 000021F1 F7C700800000        <1>     test edi, drvErrStatus
    85 000021F7 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 000021F9 803D(98040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00002200 750C                <1>     jne .notNDRead
    89 00002202 8A05(A3040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00002208 8805(1B050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 0000220E 8A25(9A040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00002214 F6D4                <1>     not ah
    94 00002216 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00002219 E8CB500000          <1>     call dosPopRegs ;Get back the context
    96 0000221E 668B05(1B050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00002225 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00002226 88CC                <1>     mov ah, cl
   101 00002228 E898410000          <1>     call charDevErr
   102 0000222D 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 0000222F 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00002231 E8B3500000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00002236 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 0000223B 8025(9A040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00002242 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00002244 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00002246 7409                <1>     jz .makeDiskNetReadReq
   115 00002248 FECC                <1>     dec ah
   116 0000224A 7421                <1>     jz .makeDiskNetNonDestReq
   117 0000224C FECC                <1>     dec ah
   118 0000224E 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00002250 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00002251 E833000000          <1>     call .prepDiskNetIO
   123 00002256 E8E9210000          <1>     call readBytes
   124 0000225B 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 0000225D E857000000          <1>     call .cleanDiskNetIO
   126 00002262 8A05(1B050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002268 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 0000226A B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 0000226C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 0000226D FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00002270 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00002275 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00002278 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002279 E80B000000          <1>     call .prepDiskNetIO
   138 0000227E E805250000          <1>     call writeBytes
   139 00002283 E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002288 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002289 8F05(EA040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 0000228F E86C500000          <1>     call dosPushRegs
   146 00002294 FF35(17040000)      <1>     push qword [currentDTA]
   147 0000229A 488D0D(1B050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 000022A1 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 000022A8 488935(31070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 000022AF 31C9                <1>     xor ecx, ecx
   151 000022B1 FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 000022B3 FF25(EA040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 000022B9 8F05(EA040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 000022BF 8F05(17040000)      <1>     pop qword [currentDTA]
   157 000022C5 E81F500000          <1>     call dosPopRegs
   158 000022CA EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 000022CC E82F500000          <1>     call dosPushRegs
   164 000022D1 B00D                <1>     mov al, drvOPEN
   165 000022D3 EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 000022D5 E826500000          <1>     call dosPushRegs
   169 000022DA B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 000022DC 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 000022E2 7469                <1>     jz .exit    ;Exit if so
   174 000022E4 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 000022E8 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 000022EC 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 000022EE 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 000022F5 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 000022F7 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 000022FA 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 000022FC 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 00002300 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 00002306 7445                <1>     jz .exit    ;No, exit!
   186 00002308 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 0000230B 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   188 00002312 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 00002315 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 00002318 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 0000231B 50                  <1>     push rax    ;Save the dword
   193 0000231C E8D9460000          <1>     call goDriver
   194 00002321 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   195 00002328 F7C700800000        <1>     test edi, drvErrStatus
   196 0000232E 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 00002330 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 00002336 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 00002338 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 0000233A EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 0000233C 88C8                <1>     mov al, cl  ;Move drive number into al
   205 0000233E B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 00002340 E880400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 00002345 B001                <1>     mov al, critRetry   ;al returns user response
   210 00002347 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 00002349 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 0000234A EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 0000234C 58                  <1>     pop rax    
   215                              <1> .exit:
   216 0000234D E8974F0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 00002352 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 00002353 E87D010000          <1>     call charIn_B
    17 00002358 50                  <1>     push rax
    18 00002359 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 0000235E 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 0000235F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 00002360 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 00002362 3C20                <1>     cmp al, asciiCaret
    27 00002364 0F8286000000        <1>     jb .control
    28 0000236A 3C7F                <1>     cmp al, DEL ;DEL char?
    29 0000236C 7406                <1>     je .skipCurs
    30 0000236E FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00002374 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 0000237A 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 00002381 56                  <1>     push rsi
    35 00002382 7507                <1>     jnz .skipErrorCheck
    36 00002384 50                  <1>     push rax
    37 00002385 E897020000          <1>     call vConCtrlCheck
    38 0000238A 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 0000238B E81F020000          <1>     call outputOnStdout
    41 00002390 5E                  <1>     pop rsi
    42 00002391 F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002398 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 0000239A 53                  <1>     push rbx
    45 0000239B 56                  <1>     push rsi
    46 0000239C BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000023A1 E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000023A6 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000023AC 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000023B0 F7C300800000        <1>     test ebx, devRedirDev
    52 000023B6 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 000023BC F7C380000000        <1>     test ebx, devCharDev
    54 000023C2 0F84B2000000        <1>     jz auxOutCmn.exit
    55 000023C8 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 000023CD E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 000023D2 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 000023D8 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 000023DE 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 000023E4 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 000023EB E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 000023F0 3C0D                <1>     cmp al, CR
    64 000023F2 7429                <1>     je .newline
    65 000023F4 3C08                <1>     cmp al, BSP
    66 000023F6 7431                <1>     je .back
    67 000023F8 3C09                <1>     cmp al, TAB
    68 000023FA 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 00002400 51                  <1>     push rcx
    72 00002401 0FB60D(CC020000)    <1>     movzx ecx, byte [vConCursPos]
    73 00002408 80C9F8              <1>     or cl, ~7
    74 0000240B F6D9                <1>     neg cl
    75 0000240D 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 00002410 B020                <1>     mov al, SPC
    78 00002412 E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00002417 FEC9                <1>     dec cl
    80 00002419 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 0000241B 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 0000241C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 0000241D C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 00002424 E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 00002429 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    89 0000242F E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 00002434 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 00002439 BB03000000          <1>     mov ebx, 3
    94 0000243E E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002443 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 00002445 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00002447 E82AFDFFFF          <1>     call mainCharIO
    99 0000244C 7408                <1>     jz .signalLoop
   100 0000244E 30E4                <1>     xor ah, ah  ;Read the char in
   101 00002450 E821FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 00002455 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00002456 E8A3010000          <1>     call callInt28h
   105 0000245B EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 0000245D 53                  <1>     push rbx
   109 0000245E BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 00002463 EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 00002465 53                  <1>     push rbx
   113 00002466 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 0000246B 88D0                <1>     mov al, dl  ;Get the char into al
   116 0000246D 50                  <1>     push rax
   117 0000246E E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 00002473 58                  <1>     pop rax
   119 00002474 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 00002475 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 0000247A 5E                  <1>     pop rsi
   125 0000247B 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 0000247C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 0000247D 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 0000247F 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 00002481 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 00002487 31DB                <1>     xor ebx, ebx    
   134 00002489 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000248E 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 00002490 488B2D(7A040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 00002497 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 00002499 E8D8FCFFFF          <1>     call mainCharIO
   139 0000249E E85B010000          <1>     call callInt28h ;This preserves flags so call here!
   140 000024A3 7507                <1>     jnz .readChar
   141 000024A5 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 000024A9 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 000024AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 000024AC 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 000024B0 31DB                <1>     xor ebx, ebx
   150 000024B2 E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024B7 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 000024B9 B401                <1>     mov ah, 01  ;ND read for char
   153 000024BB E8B6FCFFFF          <1>     call mainCharIO
   154 000024C0 750B                <1>     jnz .getChar
   155 000024C2 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 000024C4 CD2A                <1>     int 2Ah
   157 000024C6 E833010000          <1>     call callInt28h
   158 000024CB EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 000024CD 30E4                <1>     xor ah, ah
   162 000024CF E8A2FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 000024D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 000024D5 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 000024D6 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 000024DB 7543                <1>     jnz .pullChar
   171 000024DD 803D(E8190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 000024E4 7507                <1>     jne .skiplookahead
   173 000024E6 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 000024E8 E889FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 000024ED B484                <1>     mov ah, 84h
   177 000024EF CD2A                <1>     int 2ah ;Multitasking keyboard loop
   178 000024F1 66813D(CA1A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 000024F9 FF                  <1>
   179 000024FA 751B                <1>     jne .skipClockRead
   180 000024FC E8FF4D0000          <1>     call dosPushRegs
   181 00002501 F8                  <1>     clc ;Clear CF, write primary header to backup
   182 00002502 E882000000          <1>     call swapPrimaryHeader
   183 00002507 E8D2060000          <1>     call readDateTimeRecord
   184 0000250C F9                  <1>     stc ;Set CF, write backup to primary header
   185 0000250D E877000000          <1>     call swapPrimaryHeader
   186 00002512 E8D24D0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 00002517 66FF05(CA1A0000)    <1>     inc word [keybTicks]
   189 0000251E EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 00002520 30E4                <1>     xor ah, ah
   192 00002522 E84FFCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 00002527 5E                  <1>     pop rsi
   194 00002528 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 0000252A 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 0000252C C605(C91A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 00002533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 00002534 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 00002537 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 00002538 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000253A 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 0000253C E821FEFFFF          <1>     call charOut_B.in
   208 00002541 EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 00002543 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 00002548 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000254A 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 0000254C FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 0000254E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 0000254F 50                  <1>     push rax
   221 00002550 52                  <1>     push rdx
   222 00002551 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 00002553 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 00002558 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 0000255A B404                <1>     mov ah, 04h ;Flush input buffers
   226 0000255C E815FCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 00002561 5A                  <1>     pop rdx
   229 00002562 58                  <1>     pop rax
   230 00002563 88C4                <1>     mov ah, al  ;Move function number into ah
   231 00002565 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 00002567 7507                <1>     jne .others
   233 00002569 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 0000256C 7412                <1>     jz .bad ;Yes, exit
   235 0000256E EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 00002570 3C01                <1>     cmp al, 01h
   238 00002572 740F                <1>     je .callFunction
   239 00002574 3C07                <1>     cmp al, 07h
   240 00002576 740B                <1>     je .callFunction
   241 00002578 3C08                <1>     cmp al, 08h
   242 0000257A 7407                <1>     je .callFunction
   243 0000257C 3C0A                <1>     cmp al, 0Ah
   244 0000257E 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 00002580 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 00002582 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 00002583 FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 00002584 E98F4C0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 00002589 56                  <1>     push rsi
   261 0000258A 57                  <1>     push rdi
   262 0000258B 51                  <1>     push rcx
   263 0000258C 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 00002595 00                  <1>
   264 00002596 488D35(C0040000)    <1>     lea rsi, primReqHdr
   265 0000259D 488D3D(9C1A0000)    <1>     lea rdi, bkupReqHdr
   266 000025A4 7303                <1>     jnc .read
   267 000025A6 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000025A9 F3A4                <1>     rep movsb   ;Swap
   270 000025AB 59                  <1>     pop rcx
   271 000025AC 5F                  <1>     pop rdi
   272 000025AD 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000025AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000025AF 53                  <1>     push rbx
   278 000025B0 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000025B5 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000025BA 7217                <1>     jc .exit
   281 000025BC 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 000025C2 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 000025C4 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 000025C8 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   285 000025CE 7405                <1>     jz .notCharDevOrFast
   286 000025D0 CD29                <1>     int 29h ;Fast output
   287                              <1> .exitOk:
   288 000025D2 F8                  <1>     clc
   289                              <1> .exit:
   290 000025D3 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 000025D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 000025D5 E809000000          <1>     call outputOnSFT
   294 000025DA 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 000025DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 000025DC E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025E1 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 28h if device busy
   305 000025E3 50                  <1>     push rax
   306 000025E4 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 000025E6 E88BFBFFFF          <1>     call mainCharIO
   308 000025EB 58                  <1>     pop rax
   309 000025EC 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 000025EE B402                <1>     mov ah, 02h ;Output char in al
   311 000025F0 E881FBFFFF          <1>     call mainCharIO
   312 000025F5 F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 000025F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 000025F7 E802000000          <1>     call callInt28h
   316 000025FC EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt28h:
   319                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   320 000025FE 9C                  <1>     pushfq
   321 000025FF F605(94040000)FF    <1>     test byte [int28Flag], -1
   322 00002606 7417                <1>     jz .exit    ;If zero, not safe
   323 00002608 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 0000260F 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   326 00002611 FF35(94040000)      <1>     push qword [int28Flag] 
   327 00002617 CD28                <1>     int 28h
   328 00002619 8F05(94040000)      <1>     pop qword [int28Flag]    ;Return original value
   329                              <1> .exit:
   330 0000261F 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 00002620 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 00002621 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 00002626 53                  <1>     push rbx
   354 00002627 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 00002629 E8BA000000          <1>     call getCharDevSFT
   356 0000262E 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000262F 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 00002631 B401                <1>     mov ah, 01  ;Non destructively read CON
   359 00002633 E83EFBFFFF          <1>     call mainCharIO
   360 00002638 74C4                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 0000263A 3C13                <1>     cmp al, DC3 ;^S ?
   363 0000263C 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 0000263E 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 00002640 E831FBFFFF          <1>     call mainCharIO
   366 00002645 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 0000264A 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 0000264C 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 0000264E 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 00002650 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 00002652 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 00002653 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 00002659 53                  <1>     push rbx
   377 0000265A BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 0000265F E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 00002664 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002665 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00002667 57                  <1>     push rdi
   382 00002668 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 0000266B 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 00002671 741D                <1>     jz .notNet
   385 00002673 50                  <1>     push rax
   386 00002674 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 00002679 CD2F                <1>     int 2Fh
   388 0000267B 58                  <1>     pop rax
   389 0000267C 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 0000267E C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 00002685 50                  <1>     push rax
   393 00002686 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 0000268B CD2F                <1>     int 2Fh
   395 0000268D 58                  <1>     pop rax
   396 0000268E EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 00002690 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   401 00002697 7507                <1>     jnz .echoOn
   402 00002699 E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 0000269E EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000026A0 E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000026A5 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000026A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   410 000026A7 E852FFFFFF          <1>     call callInt28h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000026AC B401                <1>     mov ah, 01h ;ND read
   413 000026AE E8C3FAFFFF          <1>     call mainCharIO
   414 000026B3 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000026B5 53                  <1>     push rbx
   417 000026B6 31DB                <1>     xor ebx, ebx
   418 000026B8 E82B000000          <1>     call getCharDevSFT
   419 000026BD 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026BE 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 000026C0 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 000026C2 E8AFFAFFFF          <1>     call mainCharIO
   423 000026C7 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 000026C9 7514                <1>     jnz .checkBreak2
   425 000026CB 803D(C91A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 000026D2 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 000026D8 C605(C91A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 000026DF 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026E1 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 000026E3 E9633E0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 000026E8 F605(93040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 000026EF 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 000026F1 57                  <1>     push rdi
   443 000026F2 E83B260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 000026F7 4889FE              <1>     mov rsi, rdi
   445 000026FA 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 000026FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 000026FC 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 00002702 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 00002704 488B35(21070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 0000270B F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 0000270C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 0000270D 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 0000270F 0F834DFCFFFF        <1>     jae charOut_B.in
   464 00002715 3C09                <1>     cmp al, TAB
   465 00002717 0F8445FCFFFF        <1>     je charOut_B.in
   466 0000271D 3C15                <1>     cmp al, NAK
   467 0000271F 0F843DFCFFFF        <1>     je charOut_B.in
   468 00002725 3C14                <1>     cmp al, DC4
   469 00002727 0F8435FCFFFF        <1>     je charOut_B.in
   470 0000272D 50                  <1>     push rax
   471 0000272E B05E                <1>     mov al, "^" ;Get caret in place
   472 00002730 E82DFCFFFF          <1>     call charOut_B.in
   473 00002735 58                  <1>     pop rax
   474 00002736 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 00002738 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 0000273D B00D                <1>     mov al, CR
   478 0000273F E81EFCFFFF          <1>     call charOut_B.in
   479 00002744 B00A                <1>     mov al, LF
   480 00002746 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   485 0000274B 803D(08040000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002752 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 00002754 53                  <1>     push rbx
   490 00002755 56                  <1>     push rsi
   491 00002756 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 0000275D C705(EC040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 00002765 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 00002767 C605(EA040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 0000276E 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   497 00002775 E880420000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 0000277A 66F705(ED040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 00002782 02                  <1>
   500 00002783 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 00002785 30C0                <1>     xor al, al
   503 00002787 5E                  <1>     pop rsi
   504 00002788 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 00002789 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 0000278A 8A05(F7040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 00002790 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 00002792 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 00002794 C705(EC040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 0000279C 0000                <1>
   513 0000279E C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000027A5 C705(00050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000027AD 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000027AF 488D05(F7040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000027B6 488905(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 000027BD E838420000          <1>     call goDriver   ;RSI and RBX as before
   520 000027C2 E9843D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 000027C7 57                  <1>     push rdi
   525 000027C8 C605(93040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 000027CF 488B3D(31070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 000027D6 48893D(21070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 000027DD 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 000027DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 000027DF C605(93040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 000027E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 000027E7 4889D6              <1>     mov rsi, rdx
   553 000027EA 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 000027EC 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027EE 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 000027F0 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 000027F3 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 000027F5 7606                <1>     jbe .avoidcheck
   559 000027F7 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 000027FB 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 000027FD 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 000027FF 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 00002802 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 00002804 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 0000280A 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   569 00002810 56                  <1>     push rsi    ;Push user buffer address
   570 00002811 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   571 00002818 C605(02070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 0000281F E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   574 00002824 3C0A                <1>     cmp al, LF
   575 00002826 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 00002828 E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 0000282D 3C06                <1>     cmp al, ACK
   580 0000282F 74F7                <1>     je .mainLoop2   ;Get another char
   581 00002831 3A0503D8FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 00002837 0F8426010000        <1>     je .escape
   583 0000283D 3C7F                <1>     cmp al, DEL
   584 0000283F 0F8489000000        <1>     je .delete
   585 00002845 3C08                <1>     cmp al, BSP
   586 00002847 0F8481000000        <1>     je .delete
   587 0000284D 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 0000284F 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 00002854 3C15                <1>     cmp al, NAK
   591 00002856 9090909090          <1>     db 5 dup (90h)
   592 0000285B 3C0D                <1>     cmp al, CR
   593 0000285D 744C                <1>     je .carriageReturn
   594 0000285F 3C0A                <1>     cmp al, LF
   595 00002861 7461                <1>     je .lineFeed
   596 00002863 3A05D2D7FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 00002869 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 0000286B 38D6                <1>     cmp dh, dl
   600 0000286D 731C                <1>     jae .bufOflw
   601 0000286F AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 00002870 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 00002872 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 00002877 803D(02070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 0000287E 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 00002880 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 00002882 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 00002884 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 00002887 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 00002889 EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 0000288B B007                <1>     mov al, BEL ;Sound the bell
   617 0000288D E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 00002892 EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 00002894 B05C                <1>     mov al, "\"
   622 00002896 E8C7FAFFFF          <1>     call charOut_B.in
   623 0000289B 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 0000289C E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000028A1 E85AFBFFFF          <1>     call charOut_B.tab
   628 000028A6 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000028AB AA                  <1>     stosb
   631 000028AC E8B1FAFFFF          <1>     call charOut_B.in
   632 000028B1 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000028B2 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000028B5 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000028B7 488D35(CE020000)    <1>     lea rsi, vConBuffer
   637 000028BE 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 000028C1 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 000028C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 000028C4 E874FEFFFF          <1>     call printCRLF
   642 000028C9 E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 000028CE E805000000          <1>     call .removeChar
   645 000028D3 E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 000028D8 84F6                <1>     test dh, dh ;Is char count 0?
   648 000028DA 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 000028DC E868000000          <1>     call .vConErase
   650 000028E1 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 000028E3 3C20                <1>     cmp al, SPC
   652 000028E5 7311                <1>     jae .normalChar
   653 000028E7 3C09                <1>     cmp al, TAB
   654 000028E9 7420                <1>     je .eraTab
   655 000028EB 3C15                <1>     cmp al, NAK
   656 000028ED 7409                <1>     je .normalChar
   657 000028EF 3C14                <1>     cmp al, DC4
   658 000028F1 7405                <1>     je .normalChar
   659 000028F3 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 000028F8 803D(02070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000028FF 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 00002901 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002903 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 00002905 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 00002908 FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 0000290A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 0000290B 57                  <1>     push rdi
   672 0000290C 48FFCF              <1>     dec rdi
   673 0000290F FD                  <1>     std ;Go backwards
   674 00002910 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 00002913 B020                <1>     mov al, SPC
   676 00002915 53                  <1>     push rbx
   677 00002916 BB07000000          <1>     mov ebx, 7
   678 0000291B 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 0000291E AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 0000291F 7608                <1>     jbe .notChar    ;No, skip handling
   682 00002921 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 00002925 740A                <1>     je .tabChar
   684 00002927 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 00002929 E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 0000292B 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 00002931 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 00002933 00D9                <1>     add cl, bl
   692 00002935 80E107              <1>     and cl, 7
   693 00002938 5B                  <1>     pop rbx
   694 00002939 5F                  <1>     pop rdi
   695 0000293A FC                  <1>     cld
   696 0000293B 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 0000293D E80C000000          <1>     call .vConEraseNoDec
   700 00002942 E2F9                <1>     loop .vConDelTab
   701 00002944 E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 00002949 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 0000294C FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 0000294E B008                <1>     mov al, BSP ;Move cursor back
   709 00002950 E80DFAFFFF          <1>     call charOut_B.in
   710 00002955 B020                <1>     mov al, SPC ;Replace with a space
   711 00002957 E806FAFFFF          <1>     call charOut_B.in
   712 0000295C B008                <1>     mov al, BSP ;Move cursor back again
   713 0000295E E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 00002963 FF25C9D6FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 00002969 E846000000          <1>     call .fCommon2
   721 0000296E EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 00002970 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 00002973 28F9                <1>     sub cl, bh  ;Sub our current position
   725 00002975 EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 00002977 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 0000297C C605(02070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 00002983 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 00002985 0F849DFEFFFF        <1>     je .mainLoop2
   732 0000298B 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 0000298D 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 00002993 AC                  <1>     lodsb
   736 00002994 AA                  <1>     stosb
   737 00002995 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 0000299A FEC7                <1>     inc bh
   739 0000299C FEC6                <1>     inc dh
   740 0000299E E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000029A0 E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000029A5 E80A000000          <1>     call .fCommon2
   744 000029AA 4801CE              <1>     add rsi, rcx
   745 000029AD 00CF                <1>     add bh, cl
   746 000029AF E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000029B4 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000029B9 3A057BD6FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 000029BF 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 000029C1 E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 000029C6 59                  <1>     pop rcx ;Get original return address from stack
   756 000029C7 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 000029CC 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 000029CF 28F9                <1>     sub cl, bh
   760 000029D1 74F3                <1>     jz .fforceExit
   761 000029D3 FFC9                <1>     dec ecx
   762 000029D5 74EF                <1>     jz .fforceExit
   763 000029D7 57                  <1>     push rdi
   764 000029D8 4889F7              <1>     mov rdi, rsi
   765 000029DB 48FFC7              <1>     inc rdi
   766 000029DE F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 000029E0 5F                  <1>     pop rdi
   768 000029E1 75E3                <1>     jne .fforceExit ;If char not found, return
   769 000029E3 F6D1                <1>     not cl
   770 000029E5 00D9                <1>     add cl, bl
   771 000029E7 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 000029E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 000029EA B040                <1>     mov al, "@"
   775 000029EC E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 000029F1 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 000029F2 57                  <1>     push rdi
   778 000029F3 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 000029F8 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 000029F9 88F3                <1>     mov bl, dh
   781 000029FB E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 00002A00 B01A                <1>     mov al, EOF
   785 00002A02 E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002A07 8A052DD6FFFF        <1>     mov al, byte [extESC]
   789 00002A0D E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 00002A12 F615(02070000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002A18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 00002A19 38DF                <1>     cmp bh, bl
   795 00002A1B 0F8407FEFFFF        <1>     je .mainLoop2
   796 00002A21 FEC7                <1>     inc bh
   797 00002A23 48FFC6              <1>     inc rsi
   798 00002A26 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 00002A2B E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 00002A30 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 00002A35 57                  <1>     push rdi    ;Preserve rdi
   805 00002A36 488D3DFFD5FFFF      <1>     lea rdi, extKeyTbl
   806 00002A3D 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 00002A3E AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002A3F 740D                <1>     je .charFound
   812 00002A41 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 00002A43 7414                <1>     jz .notInTable
   814 00002A45 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002A4C EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 00002A4E 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002A4F 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 00002A53 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002A56 5F                  <1>     pop rdi
   821 00002A57 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002A59 59                  <1>     pop rcx ;Realign stack
   824 00002A5A 59                  <1>     pop rcx
   825 00002A5B E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    33                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002A60 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002A65 E825440000          <1>     call getUserRegs
     6 00002A6A 668B15(8D040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002A71 0FB60D(8F040000)    <1>     movzx ecx, byte [years]
     9 00002A78 8A05(92040000)      <1>     mov al, byte [dayOfWeek]
    10 00002A7E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 00002A82 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 00002A87 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 00002A8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 00002A8D E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 00002A92 E8F8430000          <1>     call getUserRegs
    22 00002A97 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 00002A9E 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 00002AA5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 00002AA9 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002AAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 00002AAE 80FD17              <1>     cmp ch, 23
    33 00002AB1 7749                <1>     ja .exitBad
    34 00002AB3 80F93B              <1>     cmp cl, 59
    35 00002AB6 7744                <1>     ja .exitBad
    36 00002AB8 80FE3B              <1>     cmp dh, 59
    37 00002ABB 773F                <1>     ja .exitBad
    38 00002ABD 80FA63              <1>     cmp dl, 99
    39 00002AC0 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 00002AC2 E817010000          <1>     call readDateTimeRecord
    42 00002AC7 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 00002ACE 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 00002AD5 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002AD8 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002ADC 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 00002AE0 B906000000          <1>     mov ecx, 6
    48 00002AE5 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002AE8 E820420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 00002AED 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 00002AF4 E8013F0000          <1>     call goDriver
    52 00002AF9 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 00002AFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002AFC B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 00002AFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002AFF 6681F97800          <1>     cmp cx, 120
    62 00002B04 0F83D1000000        <1>     jae .exitBad
    63 00002B0A 80FE0C              <1>     cmp dh, 12
    64 00002B0D 0F87C8000000        <1>     ja .exitBad
    65 00002B13 80FA1F              <1>     cmp dl, 31
    66 00002B16 0F87BF000000        <1>     ja .exitBad
    67 00002B1C 668915(8D040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 00002B23 880D(8F040000)      <1>     mov byte [years], cl    ;Save the years count
    70 00002B29 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 00002B2E 88CD                <1>     mov ch, cl ;Get years count in ch
    72 00002B30 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 00002B33 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002B36 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 00002B39 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 00002B3E F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 00002B40 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 00002B43 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002B46 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 00002B4B FFC9                <1>     dec ecx
    83 00002B4D 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 00002B50 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 00002B55 EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002B57 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002B5C 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 00002B5E 0FB60D(8E040000)    <1>     movzx ecx, byte [monthOfYear]
    92 00002B65 488D35F1D4FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 00002B6C FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 00002B6E 67E308              <1>     jecxz .addMonthOffset
    96 00002B71 AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 00002B72 0FB6C0              <1>     movzx eax, al
    98 00002B75 01C2                <1>     add edx, eax
    99 00002B77 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 00002B79 0FB60D(8D040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 00002B80 FFC9                <1>     dec ecx
   103 00002B82 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 00002B84 668915(90040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 00002B8B 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 00002B92 B906000000          <1>     mov ecx, 6
   109 00002B97 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 00002B9A E879410000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 00002B9F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 00002BA6 E84F3E0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 00002BAB 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 00002BB2 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 00002BB9 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 00002BBC B906000000          <1>     mov ecx, 6
   118 00002BC1 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 00002BC4 E844410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 00002BC9 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 00002BD0 E8253E0000          <1>     call goDriver
   122 00002BD5 E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002BDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002BDB B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002BDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002BDE 53                  <1>     push rbx
   132 00002BDF 51                  <1>     push rcx
   133 00002BE0 52                  <1>     push rdx
   134 00002BE1 56                  <1>     push rsi
   135 00002BE2 55                  <1>     push rbp
   136                              <1> 
   137 00002BE3 66C705(CA1A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002BEB 00                  <1>
   138 00002BEC 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 00002BF3 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002BF8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002BFB E818410000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 00002C00 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002C07 E8EE3D0000          <1>     call goDriver
   148 00002C0C 0FB705(15050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 00002C13 663B05(90040000)    <1>     cmp ax, word [daysOffset]
   155 00002C1A 7466                <1>     je .exit    ;Return if equal
   156 00002C1C 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 00002C21 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 00002C23 668905(90040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002C2A BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002C2F 31D2                <1>     xor edx, edx
   164 00002C31 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 00002C33 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 00002C35 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002C3A 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002C3C 7210                <1>     jb .foundBunch
   171 00002C3E 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 00002C40 FFC1                <1>     inc ecx
   173 00002C42 FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 00002C44 39DA                <1>     cmp edx, ebx
   176 00002C46 7206                <1>     jb .foundBunch
   177 00002C48 29DA                <1>     sub edx, ebx
   178 00002C4A FFC1                <1>     inc ecx
   179 00002C4C EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002C4E C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 00002C51 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 00002C53 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002C58 488D35FED3FFFF      <1>     lea rsi, monthsTbl
   190 00002C5F 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 00002C61 FFC1                <1>     inc ecx ;Start from 1
   193 00002C63 AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 00002C64 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002C67 39C2                <1>     cmp edx, eax
   196 00002C69 7204                <1>     jb .monthFound
   197 00002C6B 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 00002C6D EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 00002C6F FFC2                <1>     inc edx
   203 00002C71 880D(8E040000)      <1>     mov byte [monthOfYear], cl
   204 00002C77 8815(8D040000)      <1>     mov byte [dayOfMonth], dl
   205 00002C7D E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 00002C82 5D                  <1>     pop rbp
   208 00002C83 5E                  <1>     pop rsi
   209 00002C84 5A                  <1>     pop rdx
   210 00002C85 59                  <1>     pop rcx
   211 00002C86 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002C87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 00002C88 0FB705(90040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 00002C8F 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 00002C94 31D2                <1>     xor edx, edx
   220 00002C96 B907000000          <1>     mov ecx, 7   
   221 00002C9B F7F1                <1>     div ecx  ;Get remainder in dl
   222 00002C9D 8815(92040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 00002CA3 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002CA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 00002CA6 880D(8F040000)      <1>     mov byte [years], cl    ;Save this figure
   232 00002CAC F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 00002CAF 51                  <1>     push rcx
   234 00002CB0 57                  <1>     push rdi
   235 00002CB1 B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 00002CB6 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 00002CBB 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 00002CBE 488D3D99D3FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 00002CC5 AA                  <1>     stosb   ;Store the word in rdi
   240 00002CC6 5F                  <1>     pop rdi
   241 00002CC7 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 00002CC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 00002CC9 53                  <1>     push rbx
   257 00002CCA 0FB61D(1A050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 00002CD1 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 00002CD3 89D8                <1>     mov eax, ebx
   260 00002CD5 0FB61D(17050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002CDC C1E305              <1>     shl ebx, 5
   262 00002CDF 09D8                <1>     or eax, ebx
   263 00002CE1 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002CE8 C1E30B              <1>     shl ebx, 11
   265 00002CEB 09D8                <1>     or eax, ebx
   266 00002CED 0FB61D(8D040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002CF4 C1E310              <1>     shl ebx, 16
   268 00002CF7 09D8                <1>     or eax, ebx
   269 00002CF9 0FB61D(8E040000)    <1>     movzx ebx, byte [monthOfYear]
   270 00002D00 C1E315              <1>     shl ebx, 21
   271 00002D03 09D8                <1>     or eax, ebx
   272 00002D05 0FB61D(8F040000)    <1>     movzx ebx, byte [years]
   273 00002D0C C1E319              <1>     shl ebx, 25
   274 00002D0F 09D8                <1>     or eax, ebx
   275 00002D11 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002D12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;Int 2Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002D13 E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002D18 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002D1D 31D2                <1>     xor edx, edx
   284 00002D1F 6689C2              <1>     mov dx, ax  ;Save time
   285 00002D22 C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002D25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002D26 488915(19070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 00002D2D 4889D6              <1>     mov rsi, rdx
    36 00002D30 803EFF              <1>     cmp byte [rsi], -1
    37 00002D33 7407                <1>     je .notExt1
    38 00002D35 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002D3C 0FB606              <1>     movzx eax, byte [rsi]
    41 00002D3F 50                  <1>     push rax    ;Push on stack the drive number
    42 00002D40 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002D47 E810030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002D4C 7306                <1>     jnc .fcbOk
    45 00002D4E 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002D4F E9EE450000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002D54 488D3D(1D050000)    <1>     lea rdi, buffer1
    49 00002D5B E859E5FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 00002D60 7306                <1>     jnc .fileFound
    51 00002D62 5B                  <1>     pop rbx
    52 00002D63 E9DA450000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 00002D68 488D3D(2E060000)    <1>     lea rdi, dosffblock
    56 00002D6F 57                  <1>     push rdi
    57 00002D70 E8F3E3FFFF          <1>     call setupFFBlock
    58 00002D75 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 00002D76 488B3D(19070000)    <1>     mov rdi, qword [workingFCB]
    61 00002D7D F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
    62 00002D84 7407                <1>     jz .notExt2
    63 00002D86 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 00002D8D 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 00002D8E 85DB                <1>     test ebx, ebx
    67 00002D90 7509                <1>     jnz .notCurrentDrive
    68 00002D92 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    69 00002D99 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 00002D9B AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 00002D9C 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 00002D9F B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 00002DA4 A5                  <1>     movsd
    75 00002DA5 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 00002DA6 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 00002DAD 488D35(59060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 00002DB4 F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
    79 00002DBB 7412                <1>     jz .notExt3
    80 00002DBD B8FFFFFFFF          <1>     mov eax, -1
    81 00002DC2 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002DC3 FFC0                <1>     inc eax ;Make it zero
    83 00002DC5 AB                  <1>     stosd
    84 00002DC6 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 00002DC7 0FB605(FB060000)    <1>     movzx eax, byte [searchAttr]
    86 00002DCE AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002DCF 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002DD1 AA                  <1>     stosb
    90 00002DD2 B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002DD7 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 00002DDA E960450000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002DDF 488915(19070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002DE6 C605(FA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 00002DED C605(FB060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002DF4 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002DF7 803EFF              <1>     cmp byte [rsi], -1
   101 00002DFA 7514                <1>     jne .notExt
   102 00002DFC FE0D(FA060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002E02 4881C606000000      <1>     add rsi, exFcb.attribute
   104 00002E09 AC                  <1>     lodsb   ;Get search attr in al
   105 00002E0A 8805(FB060000)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002E10 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002E17 31C0                <1>     xor eax, eax
   110 00002E19 AC                  <1>     lodsb   ;Get the FCB drive letter
   111 00002E1A 50                  <1>     push rax    ;Push drive letter on the stack
   112 00002E1B 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 00002E1E AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002E1F B905000000          <1>     mov ecx, 5
   115 00002E24 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002E26 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002E2C 488D3D(2E060000)    <1>     lea rdi, dosffblock
   118 00002E33 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002E34 8F05(17040000)      <1>     pop qword [currentDTA]
   120 00002E3A E89FDFFFFF          <1>     call findNextMain
   121 00002E3F 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002E45 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 00002E4B 488B3D(19070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002E52 F607FF              <1>     test byte [rdi], -1
   125 00002E55 7407                <1>     jz .notExt2
   126 00002E57 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 00002E5E 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 00002E5F 881F                <1>     mov byte [rdi], bl
   130 00002E61 E9DC440000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 00002E66 488D3D(1D050000)    <1>     lea rdi, buffer1
   134 00002E6D 57                  <1>     push rdi
   135 00002E6E E8E9010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 00002E73 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 00002E74 0F82C8440000        <1>     jc fcbErrExit
   138 00002E7A E83AE4FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 00002E7F 0F82BD440000        <1>     jc fcbErrExit
   140 00002E85 E8B10F0000          <1>     call outerDeleteMain
   141 00002E8A 0F82B2440000        <1>     jc fcbErrExit
   142 00002E90 E9AA440000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 00002E95 488915(19070000)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 00002E9C 4889D6              <1>     mov rsi, rdx
   149 00002E9F 803EFF              <1>     cmp byte [rsi], -1
   150 00002EA2 7507                <1>     jne .notExt
   151 00002EA4 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 00002EAB 31C0                <1>     xor eax, eax
   154 00002EAD AC                  <1>     lodsb
   155 00002EAE 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 00002EAF 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 00002EB6 E8A1010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 00002EBB 723D                <1>     jc .badPop
   159 00002EBD FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002EC3 8F05(25060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002EC9 58                  <1>     pop rax ;Get drive letter back
   162 00002ECA 488D3D(9D050000)    <1>     lea rdi, buffer2
   163 00002ED1 E85A010000          <1>     call fcbInitName2
   164 00002ED6 7223                <1>     jc short .bad
   165 00002ED8 488B05(25060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002EDF 488705(1D060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002EE6 488905(25060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002EED E8400B0000          <1>     call renameMain
   169 00002EF2 0F8347440000        <1>     jnc fcbGoodExit
   170 00002EF8 EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002EFA 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002EFB E942440000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002F00 488915(19070000)    <1>     mov qword [workingFCB], rdx
   180 00002F07 488D3D(1D050000)    <1>     lea rdi, buffer1
   181 00002F0E 57                  <1>     push rdi
   182 00002F0F E848010000          <1>     call fcbInitRoutine
   183 00002F14 5F                  <1>     pop rdi
   184 00002F15 0F8227440000        <1>     jc fcbErrExit
   185 00002F1B E899E3FFFF          <1>     call getFilePathNoCanon
   186 00002F20 0F821C440000        <1>     jc fcbErrExit
   187 00002F26 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002F2C 488B35(19070000)    <1>     mov rsi, qword [workingFCB]
   190 00002F33 803EFF              <1>     cmp byte [rsi], -1
   191 00002F36 7507                <1>     jne .notExtended
   192 00002F38 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002F3F 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002F43 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002F45 85D2                <1>     test edx, edx
   198 00002F47 7402                <1>     jz .noRemainder
   199 00002F49 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002F4B 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002F4E E9EC430000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002F53 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   208 00002F5A 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002F5E 488915(17040000)    <1>     mov qword [currentDTA], rdx
   210 00002F65 C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002F66 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   214 00002F6D 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002F74 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002F78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002F79 E87E010000          <1>     call parseNameToFCB
   234 00002F7E 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002F7F E80B3F0000          <1>     call getUserRegs
   236 00002F84 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002F87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;   MUST BE EXTENDED. 
   242                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243                              <1> ; Using FCB's, one can only create a volume label on a volume.
   244                              <1> ;
   245                              <1> ;Deleting a volume label can be done using delete file (fcb and hdl)
   246                              <1> ;Renaming a volume label can be done using rename file (fcb and hdl)
   247                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   248                              <1> ;
   249                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   250                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   251                              <1> ;
   252 00002F88 488915(19070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   253 00002F8F 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   254 00002F92 7550                <1>     jne .exitErr
   255 00002F94 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   256 00002F98 754A                <1>     jne .exitErr
   257                              <1>     ;Here we proceed with creating a volume label
   258 00002F9A 488D3D(1D050000)    <1>     lea rdi, buffer1
   259 00002FA1 57                  <1>     push rdi
   260 00002FA2 E8B5000000          <1>     call fcbInitRoutine     ;Build path and find file to delete
   261 00002FA7 5E                  <1>     pop rsi                 ;Point rdi to the canonised path
   262 00002FA8 0F8294430000        <1>     jc fcbErrExit
   263 00002FAE 4889FE              <1>     mov rsi, rdi            ;Pass argument in rsi. rsi, rdi preserved
   264 00002FB1 E89B400000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   265 00002FB6 722C                <1>     jc .exitErr
   266 00002FB8 E8FCE2FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   267 00002FBD 488D1D(180D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 00002FC4 48891D(21070000)    <1>     mov qword [workingSFT], rbx
   269 00002FCB 0FB605(FB060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 00002FD2 E84E100000          <1>     call createMain
   271 00002FD7 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 00002FD9 E89D130000          <1>     call closeMain
   275 00002FDE 0F835B430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 00002FE4 B805000000          <1>     mov eax, errAccDen
   278 00002FE9 E954430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> ;=================================================================
   281                              <1> ;=================================================================
   282                              <1> ;These functions will be marked as reserved for future expansion.
   283                              <1> ; One idea will be to create a handle based record IO interface.
   284                              <1> ; We will be able to do IO on records of predefined length 
   285                              <1> ; on a file handle, thus removing the need for an FCB but still
   286                              <1> ; maintaining the usefulness of record based IO.
   287                              <1> ;=================================================================
   288                              <1> ;=================================================================
   289                              <1> openFileFCB:       ;ah = 0Fh
   290                              <1> closeFileFCB:      ;ah = 10h
   291                              <1> sequentialReadFCB: ;ah = 14h
   292                              <1> sequentialWriteFCB:;ah = 15h
   293                              <1> randomReadFCB:     ;ah = 21h
   294                              <1> randomWriteFCB:    ;ah = 22h
   295                              <1> setRelRecordFCB:   ;ah = 24h
   296                              <1> randBlockReadFCB:  ;ah = 27h
   297                              <1> randBlockWriteFCB: ;ah = 28h
   298 00002FEE B805000000          <1>     mov eax, errAccDen
   299 00002FF3 E94A430000          <1>     jmp fcbErrExit
   300                              <1> 
   301                              <1> 
   302                              <1> ;--------------------------------
   303                              <1> ;  Common FCB related Routines  :
   304                              <1> ;--------------------------------
   305                              <1> fcbCheckDriveType:
   306                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   307                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   308                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   309                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   310                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   311                              <1> ;If a net CDS, automatic fail (for now).
   312 00002FF8 C605(F8060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   313 00002FFF 51                  <1>     push rcx
   314 00003000 57                  <1>     push rdi
   315 00003001 55                  <1>     push rbp
   316 00003002 9C                  <1>     pushfq
   317 00003003 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   318 0000300A 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   319 0000300C E8F13D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   320 00003011 7218                <1>     jc .exit
   321                              <1>     ;rdi has cds ptr now
   322 00003013 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   323 00003017 E8EFD9FFFF          <1>     call getFATtype
   324 0000301C 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   325 00003022 7707                <1>     ja .exit
   326                              <1> .okToGo:
   327 00003024 C605(F8060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   328                              <1> .exit:
   329 0000302B 9D                  <1>     popfq
   330 0000302C 5D                  <1>     pop rbp
   331 0000302D 5F                  <1>     pop rdi
   332 0000302E 59                  <1>     pop rcx
   333                              <1>     return
    13                              <2> %%_ret:
    14 0000302F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   334                              <1> fcbInitName2:
   335                              <1> ;Must be called after fcbInitRoutine has been run once
   336                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   337                              <1> ;       rdx -> UserFCB
   338                              <1> ;       eax[0] = Drive number (0 based)
   339 00003030 55                  <1>     push rbp
   340 00003031 4889E5              <1>     mov rbp, rsp
   341 00003034 4881EC0F000000      <1>     sub rsp, 15
   342 0000303B 57                  <1>     push rdi
   343 0000303C 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   344 00003040 4889D6              <1>     mov rsi, rdx
   345 00003043 F605(FA060000)FF    <1>     test byte [extFCBFlag], -1
   346 0000304A 7407                <1>     jz .notExtended
   347 0000304C 4881C607000000      <1>     add rsi, exFcb.driveNum
   348                              <1> .notExtended:
   349                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   350 00003053 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   351 0000305A EB36                <1>     jmp short fcbInitRoutine.rename2EP
   352                              <1> fcbInitRoutine:
   353                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   354                              <1> ;Input: rdx -> User FCB
   355                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   356 0000305C 55                  <1>     push rbp
   357 0000305D 4889E5              <1>     mov rbp, rsp
   358 00003060 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   359                              <1>     ;This space is used to store X:FILENAME.EXT,0
   360 00003067 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   361 00003068 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   362 0000306C C605(FA060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   363 00003073 C605(FB060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   364 0000307A E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   365 0000307F 7410                <1>     jz .notExtended
   366 00003081 C605(FA060000)FF    <1>     mov byte [extFCBFlag], -1
   367 00003088 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   368 0000308B 8805(FB060000)      <1>     mov byte [searchAttr], al
   369                              <1> .notExtended:
   370 00003091 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   371                              <1> .rename2EP:
   372                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   373 00003092 E81C3E0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   374 00003097 723F                <1>     jc .badDisk
   375 00003099 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   376                              <1>     ;!!!! VOL ID CHECK BELOW !!!!
   377                              <1> ;    cmp byte [searchAttr], dirVolumeID  ;Are we initialising for a volume ID?
   378                              <1> ;    jne .notVolumeSearch
   379                              <1> ;    mov byte [rdi], "\" ;If so, indicate that we are working in the root dir.
   380                              <1> ;    inc rdi ;Go to the next char space
   381                              <1> ;.notVolumeSearch:
   382 0000309E 488D1DB7D3FFFF      <1>     lea rbx, asciiCharProperties
   383 000030A5 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   384 000030AA 56                  <1>     push rsi    ;rsi -> fcb.filename
   385                              <1> .nameCharCheck:
   386 000030AB AC                  <1>     lodsb   ;Get the char in al
   387 000030AC D7                  <1>     xlatb   ;Get the char signature in al
   388 000030AD A808                <1>     test al, 8  ;Make sure it is a valid FCB filename char
   389 000030AF 7427                <1>     jz .badDisk
   390 000030B1 FFC9                <1>     dec ecx
   391 000030B3 75F6                <1>     jnz .nameCharCheck
   392 000030B5 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   393 000030B6 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   394 000030B9 E86AE0FFFF          <1>     call FCBToAsciiz
   395 000030BE 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   396 000030BF 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   397 000030C2 7414                <1>     je .badDisk
   398 000030C4 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   399 000030C8 55                  <1>     push rbp
   400 000030C9 E8B3E1FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   401 000030CE 5D                  <1>     pop rbp
   402 000030CF 7207                <1>     jc .badDisk
   403 000030D1 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   404 000030D6 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   405                              <1> .badDisk:
   406 000030D8 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   407 000030DA F9                  <1>     stc
   408                              <1> .jiggleStack:
   409 000030DB 4889EC              <1>     mov rsp, rbp
   410 000030DE 5D                  <1>     pop rbp
   411                              <1> .exit:
   412                              <1>     return
    13                              <2> %%_ret:
    14 000030DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   413                              <1> 
   414                              <1> storeZeroBasedDriveNumber:
   415                              <1> ;Input: al => 0 based drive letter
   416                              <1> ;       rdi -> Points to buffer to store the X: in
   417 000030E0 FEC0                <1>     inc al
   418                              <1> storeOneBasedDriveNumber:
   419                              <1> ;Input: al => 1 based drive letter
   420                              <1> ;       rdi -> Points to buffer to store the X: in
   421 000030E2 0440                <1>     add al, "@"
   422 000030E4 B43A                <1>     mov ah, ":"
   423 000030E6 66AB                <1>     stosw
   424                              <1>     return
    13                              <2> %%_ret:
    14 000030E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> isFCBExtended:
   427                              <1> ;Input: rdx = FCB ptr
   428                              <1> ;Output: rsi -> Drive letter of FCB
   429                              <1> ;        rdx -> FCB first byte
   430                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   431 000030E9 4889D6              <1>     mov rsi, rdx
   432 000030EC 803EFF              <1>     cmp byte [rsi], -1
   433 000030EF 7507                <1>     jne .notExtended
   434 000030F1 4881C607000000      <1>     add rsi, exFcb.driveNum
   435                              <1> .notExtended:
   436 000030F8 4839F2              <1>     cmp rdx, rsi
   437                              <1>     return
    13                              <2> %%_ret:
    14 000030FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> parseNameToFCB:
   440                              <1> ;rsi points to a command line to parse
   441                              <1> ;rdi points to a future unopened FCB
   442                              <1> ;al = parsing control bits. 
   443                              <1> ; al[0] = If set, leading filename separators are scanned off
   444                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   445                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   446                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   447                              <1> ;
   448                              <1> ;Separators include : . ; , = + TAB SPACE
   449                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   450                              <1> 
   451 000030FC C605(8C040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00003103 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 00003105 A802                <1>     test al, 2  ;Set drive letter>
   454 00003107 7402                <1>     jz .skipDriveLetter
   455 00003109 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 0000310B 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 0000310E B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 00003113 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 00003115 93                  <1>     xchg eax, ebx
   461 00003116 B020                <1>     mov al, " " ;Clear the field
   462 00003118 7405                <1>     jz .clearFilenameField
   463 0000311A 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 0000311D 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 0000311F F3AA                <1>     rep stosb
   467 00003121 B903000000          <1>     mov ecx, 3
   468 00003126 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 00003129 7405                <1>     jz .clearExtensionField
   470 0000312B 4801CF              <1>     add rdi, rcx
   471 0000312E 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 00003130 F3AA                <1>     rep stosb
   474 00003132 91                  <1>     xchg eax, ecx
   475 00003133 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 00003134 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 0000313B F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 0000313E 740F                <1>     jz .dontScanOff
   479 00003140 E8DC3F0000          <1>     call skipSpacesAndTabs
   480 00003145 E8E33F0000          <1>     call isCharDelimType
   481 0000314A 7508                <1>     jnz .skipIfDelim
   482 0000314C 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOff:
   484 0000314F E8CD3F0000          <1>     call skipSpacesAndTabs  ;Skip a char
   485                              <1> .skipIfDelim:
   486 00003154 E8623E0000          <1>     call uppercaseCharAtPtr 
   487 00003159 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 0000315B 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 0000315E 7519                <1>     jne .skipSettingDriveLetter
   490 00003160 48FFC6              <1>     inc rsi ;Goto next char
   491 00003163 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 00003165 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 00003167 50                  <1>     push rax    ;Save the 1 based drive letter
   494 00003168 E8463D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   495 0000316D 58                  <1>     pop rax
   496 0000316E 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 00003170 B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 00003172 AA                  <1>     stosb
   501 00003173 48FFC6              <1>     inc rsi ;Align pointers...
   502 00003176 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 00003179 48FFCE              <1>     dec rsi
   505 0000317C 48FFC7              <1>     inc rdi
   506                              <1>     
   507                              <1> getFCBFilename:
   508                              <1> ;Input: rsi points to first char of filename
   509                              <1> ;       rdi points to storage buffer for filename
   510                              <1> ;       dl contains the signature if drive invalid
   511                              <1> ;Output:
   512                              <1> ;       Fields filled
   513                              <1> ;       al = Return signature
   514 0000317F B908000000          <1>     mov ecx, 8
   515 00003184 E815000000          <1>     call getFCBNameField
   516 00003189 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   517 0000318C 750D                <1>     jne .noExt
   518 0000318E B903000000          <1>     mov ecx, 3
   519 00003193 48FFC6              <1>     inc rsi ;Skip this char
   520 00003196 E814000000          <1>     call forceFCBNameField
   521                              <1> .noExt:
   522 0000319B 88D0                <1>     mov al, dl  ;Store the return signature
   523                              <1>     return
    13                              <2> %%_ret:
    14 0000319D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> getFCBNameField:
   526                              <1> ;Checks if the field is appropriate before copying it
   527 0000319E E8183E0000          <1>     call uppercaseCharAtPtr
   528 000031A3 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   529 000031A5 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   530 000031A8 48FFCE              <1>     dec rsi ;Point to previous char
   531                              <1>     return
    13                              <2> %%_ret:
    14 000031AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> .okName:
   533 000031AC 48FFCE              <1>     dec rsi ;Go back now a char
   534                              <1> forceFCBNameField:
   535                              <1> ;Forcefully copies the name from rsi to rdi
   536 000031AF E8073E0000          <1>     call uppercaseCharAtPtr
   537 000031B4 7226                <1>     jc .terminatingSpace
   538 000031B6 750D                <1>     jnz .notSep
   539 000031B8 F605(8C040000)FF    <1>     test byte [fcbSpaceOk], -1
   540 000031BF 741B                <1>     jz .terminatingSpace
   541 000031C1 3C20                <1>     cmp al, " "
   542 000031C3 7517                <1>     jne .terminatingSpace
   543                              <1> .notSep:
   544 000031C5 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   545 000031C8 FFC9                <1>     dec ecx
   546 000031CA 3C2A                <1>     cmp al, "*" ;Big wildcard?
   547 000031CC 7504                <1>     jne .notBigWildcard
   548 000031CE B03F                <1>     mov al, "?"
   549 000031D0 F3AA                <1>     rep stosb
   550                              <1> .notBigWildcard:
   551 000031D2 AA                  <1>     stosb   ;Stores the uppercased char
   552 000031D3 3C3F                <1>     cmp al, "?"
   553 000031D5 75D8                <1>     jne forceFCBNameField
   554 000031D7 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   555 000031DA EBD3                <1>     jmp short forceFCBNameField
   556                              <1> .terminatingSpace:
   557 000031DC B020                <1>     mov al, " "
   558 000031DE AA                  <1>     stosb
   559 000031DF 48FFCE              <1>     dec rsi ;Point to this trailing space
   560                              <1>     return
    13                              <2> %%_ret:
    14 000031E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 000031E3 51                  <1>     push rcx    ;Save file attributes on stack
    11 000031E4 488D0D3A0E0000      <1>     lea rcx, createMain
    12 000031EB C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 000031F2 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 000031F4 BB16000000          <1>     mov ebx, dirInclusive
    21 000031F9 F605(01070000)FF    <1>     test byte [dosInvoke], -1
    22 00003200 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003203 880D(FB060000)      <1>     mov byte [searchAttr], cl
    24 00003209 488D0DEB0C0000      <1>     lea rcx, openMain  
    25 00003210 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003211 4889D6              <1>     mov rsi, rdx
    28 00003214 E8383E0000          <1>     call checkPathspecOK
    29 00003219 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 0000321B 58                  <1>     pop rax
    32 0000321C B803000000          <1>     mov eax, errPnf
    33 00003221 E93C410000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003226 E8EC400000          <1>     call dosCrit1Enter
    36 0000322B E8091A0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00003230 E8EC400000          <1>     call dosCrit1Exit
    38 00003235 0F82B8000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 0000323B E831190000          <1>     call setCurrentSFT
    41 00003240 66891D(39070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00003247 E8B61A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 0000324C 0F82A1000000        <1>     jc .exitBad
    44 00003252 66891D(3B070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00003259 48893D(29070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00003260 0FB71D(39070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00003267 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00003269 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 0000326C 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00003273 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00003274 E889DFFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00003279 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 0000327A 488D057A0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00003281 488B35(31070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00003288 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 0000328A 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 0000328D 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 0000328F F605(04070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00003296 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 00003298 58                  <1>     pop rax
    68 00003299 B802000000          <1>     mov eax, errFnf
    69 0000329E E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 000032A3 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 000032A5 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 000032A8 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 000032A9 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 000032AB A880                <1>     test al, 80h    ;No Inherit bit set?
    78 000032AD 7407                <1>     jz .callProc
    79 000032AF 247F                <1>     and al, 7Fh     ;Clear this bit
    80 000032B1 B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 000032B6 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 000032BC 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 000032C2 51                  <1>     push rcx    ;Save the device word 
    85 000032C3 FFD3                <1>     call rbx    ;Enter with open mode in 
    86 000032C5 59                  <1>     pop rcx
    87 000032C6 488B35(31070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 000032CD 7228                <1>     jc .exitBad2
    89 000032CF 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 000032D4 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 000032D8 0FB705(3B070000)    <1>     movzx eax, word [currentHdl]
    92 000032DF FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 000032E5 66C705(39070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
    93 000032ED FF                  <1>
    94 000032EE E961400000          <1>     jmp extGoodExit ;Save ax and return OK
    95                              <1> .exitBad:
    96 000032F3 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    97 000032F4 5B                  <1>     pop rbx ;Pop the word from the stack
    98 000032F5 EB16                <1>     jmp short .exitBadCommon
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 000032F7 488B35(29070000)    <1>     mov rsi, qword [curHdlPtr]
   102 000032FE C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00003301 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
   104 00003308 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105                              <1> .exitBadCommon:
   106 0000330D 66C705(39070000)FF- <1>     mov word [currentNdx], -1
   106 00003315 FF                  <1>
   107 00003316 E947400000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   108                              <1> 
   109                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   110                              <1> ;Input: bx = file handle to close
   111 0000331B E8F8190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   112 00003320 0F823C400000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   113 00003326 E846180000          <1>     call setCurrentSFT  ;Set this as the current SFT
   114 0000332B 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1
   115 00003330 7406                <1>     je .killHdl
   116                              <1>     ;Now check sharing mode
   117 00003332 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   118 00003336 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   119                              <1> .killHdl:
   120 00003338 3C70                <1>     cmp al, netFCBShare ;If this is a NetFile, skip nuking the JFT entry
   121 0000333A 7408                <1>     je .skipShareCheck
   122 0000333C E88C190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   123 00003341 C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   124                              <1> .skipShareCheck:
   125 00003344 E832100000          <1>     call closeMain  ;Call close main!
   126 00003349 0F8213400000        <1>     jc extErrExit   ;If an error, exit through error exit
   127 0000334F B8003E0000          <1>     mov eax, 3E00h    ;Return value
   128 00003354 E9FB3F0000          <1>     jmp extGoodExit
   129                              <1> 
   130                              <1> readFileHdl:       ;ah = 3Fh, handle function
   131 00003359 488D35E4100000      <1>     lea rsi, readBytes
   132                              <1> .common:
   133 00003360 E8B3190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   134 00003365 0F82F73F0000        <1>     jc extErrExit   ;Error code in al and exit
   135 0000336B E801180000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   136 00003370 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   137 00003372 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   138 00003378 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   139 0000337F FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   140 00003381 8F05(17040000)      <1>     pop qword [currentDTA]
   141 00003387 0F82D53F0000        <1>     jc extErrExit   ;Error code in al and exit
   142 0000338D 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   143 0000338F E9B73F0000          <1>     jmp extGoodExit2    ;and exit!
   144                              <1> 
   145                              <1> writeFileHdl:      ;ah = 40h, handle function
   146 00003394 488D35ED130000      <1>     lea rsi, writeBytes
   147 0000339B E9C0FFFFFF          <1>     jmp readFileHdl.common
   148                              <1> 
   149                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   150                              <1> ;Here don't allow malformed chars unless it is a network CDS
   151                              <1> ;Allows deleting volume labels.
   152 000033A0 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   153 000033A5 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   154 000033AC 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   155 000033AF 880D(FB060000)      <1>     mov byte [searchAttr], cl
   156 000033B5 4889D6              <1>     mov rsi, rdx
   157 000033B8 E8943C0000          <1>     call checkPathspecOK
   158 000033BD 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   159 000033BF 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   160                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   161 000033C1 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   162 000033C8 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   163                              <1> .badPath:
   164 000033CA B803000000          <1>     mov eax, errPnf
   165 000033CF E98E3F0000          <1>     jmp extErrExit
   166                              <1> .pathOk:
   167 000033D4 488D3D(1D050000)    <1>     lea rdi, buffer1
   168 000033DB 52                  <1>     push rdx
   169 000033DC E821DEFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   170 000033E1 5A                  <1>     pop rdx
   171 000033E2 0F827A3F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   172                              <1>     ;In the case of a wildcard, recall this will return the first file
   173 000033E8 803D(03070000)FF    <1>     cmp byte [fileExist], -1
   174 000033EF 0F856D3F0000        <1>     jnz extErrExit
   175 000033F5 E8410A0000          <1>     call outerDeleteMain
   176 000033FA 0F82623F0000        <1>     jc extErrExit
   177 00003400 E94F3F0000          <1>     jmp extGoodExit
   178                              <1> 
   179                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   180                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   181 00003405 E80E190000          <1>     call getSFTPtr
   182 0000340A 0F82523F0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   183 00003410 3C03                <1>     cmp al, 3
   184 00003412 720A                <1>     jb .validFunction
   185 00003414 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   186 00003419 E9443F0000          <1>     jmp extErrExit
   187                              <1> .validFunction:
   188 0000341E 3C01                <1>     cmp al, 1
   189 00003420 7718                <1>     ja .seekend
   190 00003422 7203                <1>     jb .seekset
   191                              <1> ;Here we are at seekcur, seek from current (signed)
   192 00003424 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   193                              <1> .seekset:
   194                              <1> ;Seek from the start (unsigned)
   195 00003427 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   196 0000342A E8603A0000          <1>     call getUserRegs    ;Get user regs in rsi
   197 0000342F 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   198                              <1> .seekExit:
   199 00003432 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   200 00003435 E9113F0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   201                              <1> .seekend:
   202                              <1> ;Here we are at seekend, seek from end (signed)
   203 0000343A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   204 00003440 7505                <1>     jnz .netCheck
   205                              <1> .proceedDisk:
   206 00003442 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   207 00003445 EBE0                <1>     jmp short .seekset
   208                              <1> .netCheck:
   209 00003447 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   210 0000344D 75F3                <1>     jnz .proceedDisk
   211 0000344F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   212                              <1>     ;Check it's share mode
   213 00003453 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   214 00003458 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   215 0000345D 7407                <1>     je .netSeek
   216 0000345F 3D30000000          <1>     cmp eax, denyReadShare
   217 00003464 75DC                <1>     jne .proceedDisk
   218                              <1> .netSeek:
   219 00003466 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   220 0000346B CD2F                <1>     int 2Fh
   221 0000346D 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   222 0000346F E9EE3E0000          <1>     jmp extErrExit
   223                              <1> 
   224                              <1> 
   225                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   226 00003474 3C01                <1>     cmp al, 1
   227 00003476 761F                <1>     jbe .subFuncOk
   228 00003478 B801000000          <1>     mov eax, errInvFnc
   229                              <1> .chmodError:
   230                              <1> ;Call with ax = errorcode
   231 0000347D C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   232 00003484 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   233 0000348B C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   234 00003492 E9CB3E0000          <1>     jmp extErrExit
   235                              <1> .subFuncOk:
   236 00003497 4889D6              <1>     mov rsi, rdx
   237 0000349A 89C3                <1>     mov ebx, eax    ;Store function code in bl
   238 0000349C 53                  <1>     push rbx
   239 0000349D 51                  <1>     push rcx
   240 0000349E E8AE3B0000          <1>     call checkPathspecOK
   241 000034A3 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   242                              <1> .badPath:
   243 000034A5 59                  <1>     pop rcx
   244 000034A6 5B                  <1>     pop rbx
   245 000034A7 B803000000          <1>     mov eax, errPnf
   246 000034AC EBCF                <1>     jmp short .chmodError
   247                              <1> .pathOk:
   248 000034AE E89C3C0000          <1>     call checkPathNet 
   249 000034B3 74F0                <1>     jz .badPath ;Or Net paths
   250 000034B5 E82B3C0000          <1>     call scanPathWC
   251 000034BA 72E9                <1>     jc .badPath ;Dont allow wildcards
   252 000034BC 488D3D(1D050000)    <1>     lea rdi, buffer1
   253 000034C3 52                  <1>     push rdx
   254 000034C4 C605(FB060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   255 000034CB E832DDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   256 000034D0 5A                  <1>     pop rdx
   257 000034D1 59                  <1>     pop rcx
   258 000034D2 5B                  <1>     pop rbx
   259 000034D3 0F82893E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   260                              <1>     ;In the case of a wildcard, recall this will return the first file
   261 000034D9 803D(03070000)FF    <1>     cmp byte [fileExist], -1
   262 000034E0 759B                <1>     jnz .chmodError
   263                              <1> 
   264 000034E2 E81B390000          <1>     call testCDSNet
   265 000034E7 730C                <1>     jnc .notNet
   266 000034E9 750A                <1>     jnz .notNet ;This type of net ok
   267 000034EB B805000000          <1>     mov eax, errAccDen
   268 000034F0 E96D3E0000          <1>     jmp extErrExit
   269                              <1> .notNet:
   270 000034F5 84DB                <1>     test bl, bl
   271 000034F7 7526                <1>     jnz .setAttribs
   272                              <1>     ;Get attribs here
   273 000034F9 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   274 000034FF 7412                <1>     jz .getDiskAttribs
   275 00003501 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   276 00003506 CD2F                <1>     int 2Fh
   277 00003508 0F82543E0000        <1>     jc extErrExit
   278 0000350E E9413E0000          <1>     jmp extGoodExit
   279                              <1> .getDiskAttribs:
   280 00003513 0FB605(64060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   281 0000351A E9353E0000          <1>     jmp extGoodExit
   282                              <1> 
   283                              <1> .setAttribs:
   284                              <1>     ;Set attribs here
   285 0000351F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   286 00003525 7417                <1>     jz .setDiskAttribs
   287 00003527 0FB7C9              <1>     movzx ecx, cx
   288 0000352A 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   289 0000352B B80E110000          <1>     mov eax, 110Eh
   290 00003530 CD2F                <1>     int 2Fh
   291 00003532 59                  <1>     pop rcx
   292 00003533 0F82293E0000        <1>     jc extErrExit
   293 00003539 E9163E0000          <1>     jmp extGoodExit
   294                              <1> .setDiskAttribs:
   295 0000353E E886080000          <1>     call checkNoOpenHandlesForShareAction
   296 00003543 730A                <1>     jnc .okToSet
   297 00003545 B820000000          <1>     mov eax, errShrVio
   298 0000354A E9133E0000          <1>     jmp extErrExit
   299                              <1> .okToSet:
   300 0000354F E8C33D0000          <1>     call dosCrit1Enter
   301 00003554 E8C5EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   302 00003559 722D                <1>     jc .setErrorNoFlush
   303 0000355B F6C118              <1>     test cl, volLabelFile | directoryFile
   304 0000355E 740A                <1>     jz .set
   305 00003560 B805000000          <1>     mov eax, errAccDen
   306 00003565 E91E000000          <1>     jmp .setErrorNoFlush
   307                              <1> .set:
   308 0000356A 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   309 0000356D 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   310 00003570 08E9                <1>     or cl, ch
   311 00003572 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   312 00003575 E8A1D1FFFF          <1>     call flushAllBuffersForDPB
   313 0000357A 720C                <1>     jc .setError
   314 0000357C E8A03D0000          <1>     call dosCrit1Exit
   315 00003581 31C0                <1>     xor eax, eax
   316 00003583 E9CC3D0000          <1>     jmp extGoodExit
   317                              <1> .setError:
   318                              <1> 
   319                              <1> .setErrorNoFlush:
   320 00003588 E8943D0000          <1>     call dosCrit1Exit
   321 0000358D E9D03D0000          <1>     jmp extErrExit
   322                              <1> 
   323                              <1> duplicateHandle:   ;ah = 45h, handle function
   324                              <1> ;Input: bx = Handle to duplicate
   325                              <1> ;Output: If ok then ax = New handle
   326 00003592 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   327 00003595 E868170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   328                              <1> .duplicateCommon:
   329 0000359A 0F82C23D0000        <1>     jc extErrExit   ;Exit if no space
   330 000035A0 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   331 000035A3 93                  <1>     xchg eax, ebx
   332 000035A4 E86F170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   333 000035A9 0F82B33D0000        <1>     jc extErrExit
   334 000035AF 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   335 000035B2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   336 000035B8 7505                <1>     jnz .netFile
   337 000035BA E8F3090000          <1>     call openDriverMux
   338                              <1> .netFile:
   339 000035BF E809170000          <1>     call getJFTPtr
   340 000035C4 8A1F                <1>     mov bl, byte [rdi]
   341 000035C6 881E                <1>     mov byte [rsi], bl
   342 000035C8 E9873D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   343                              <1> 
   344                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   345                              <1> ;Input: bx = Handle to duplicate
   346                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   347                              <1>     ;First we close cx if it exists
   348 000035CD 0FB7C9              <1>     movzx ecx, cx
   349 000035D0 53                  <1>     push rbx
   350 000035D1 51                  <1>     push rcx
   351 000035D2 89CB                <1>     mov ebx, ecx
   352 000035D4 E842FDFFFF          <1>     call closeFileHdl   ;Close handle 
   353 000035D9 5B                  <1>     pop rbx
   354 000035DA 58                  <1>     pop rax
   355 000035DB E8ED160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   356 000035E0 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   357                              <1> 
   358                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   359                              <1> ;Input: cx = Search Attributes, cl only used
   360                              <1> ;       rdx = Ptr to path to file to look for
   361                              <1> ;       al = Document as needing to be 0 for now
   362                              <1> ;Return:
   363                              <1> ;Data in the DTA or error through AX with CF=CY
   364                              <1> ;CAVEATS!
   365                              <1> ;DTA:attribFnd = 40h => Char dev
   366                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   367 000035E2 880D(FB060000)      <1>     mov byte [searchAttr], cl
   368 000035E8 4889D6              <1>     mov rsi, rdx
   369 000035EB E8613A0000          <1>     call checkPathspecOK
   370 000035F0 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   371 000035F2 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   372                              <1> .badPath:
   373 000035F4 B803000000          <1>     mov eax, errPnf
   374 000035F9 E9643D0000          <1>     jmp extErrExit
   375                              <1> .pathspecOk:
   376 000035FE FF35(17040000)      <1>     push qword [currentDTA]
   377 00003604 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   378 0000360B 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   379 00003612 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   380 00003619 E8E4DBFFFF          <1>     call getFilePath
   381                              <1> .findfileExit:
   382 0000361E 8F05(17040000)      <1>     pop qword [currentDTA]
   383 00003624 0F82383D0000        <1>     jc extErrExit
   384 0000362A 488D3D(2E060000)    <1>     lea rdi, dosffblock
   385 00003631 57                  <1>     push rdi
   386 00003632 E831DBFFFF          <1>     call setupFFBlock
   387 00003637 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   388 00003638 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   389 0000363F B92B000000          <1>     mov ecx, ffBlock_size
   390 00003644 F3A4                <1>     rep movsb   ;Copy the whole block. 
   391                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   392 00003646 31C0                <1>     xor eax, eax    ;Return value
   393 00003648 E9073D0000          <1>     jmp extGoodExit ;Exit well
   394                              <1> 
   395                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   396                              <1> ;Input: DTA has the find first block from the previous search
   397 0000364D 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   398 00003654 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   399 0000365B B92B000000          <1>     mov ecx, ffBlock_size
   400 00003660 F3A4                <1>     rep movsb
   401 00003662 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   402 00003668 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   403 0000366F 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   404 00003676 E863D7FFFF          <1>     call findNextMain
   405 0000367B EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   406                              <1> 
   407                              <1> renameFile:        ;ah = 56h
   408                              <1> ;Input: rdx -> Filespec to rename
   409                              <1> ;       rdi -> New filespec
   410                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   411 0000367D 4889D6              <1>     mov rsi, rdx
   412 00003680 BB16000000          <1>     mov ebx, dirInclusive
   413 00003685 F605(01070000)FF    <1>     test byte [dosInvoke], -1
   414 0000368C 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   415 0000368F 880D(FB060000)      <1>     mov byte [searchAttr], cl
   416                              <1>     ;Step 0, verify both paths provided are valid
   417 00003695 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   418 0000369A 7249                <1>     jc .pnfError
   419 0000369C 56                  <1>     push rsi
   420 0000369D 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   421 000036A0 E84A000000          <1>     call .renamePathCheck
   422 000036A5 5E                  <1>     pop rsi
   423 000036A6 723D                <1>     jc .pnfError
   424                              <1>     ;Now we canonicalise the filenames to make life easy
   425 000036A8 56                  <1>     push rsi
   426 000036A9 4889FE              <1>     mov rsi, rdi
   427 000036AC 488D3D(9D050000)    <1>     lea rdi, buffer2
   428 000036B3 E8C9DBFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   429 000036B8 5E                  <1>     pop rsi
   430 000036B9 722A                <1>     jc .pnfError
   431                              <1>     ;Now test if first file exists.
   432 000036BB FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   433 000036C1 8F05(25060000)      <1>     pop qword [fname2Ptr]
   434 000036C7 488D3D(1D050000)    <1>     lea rdi, buffer1
   435 000036CE E8AEDBFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   436 000036D3 7210                <1>     jc .pnfError 
   437 000036D5 E858030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   438 000036DA 0F82823C0000        <1>     jc extErrExit
   439 000036E0 E96F3C0000          <1>     jmp extGoodExit
   440                              <1> .pnfError:
   441 000036E5 B803000000          <1>     mov eax, errPnf
   442 000036EA E9733C0000          <1>     jmp extErrExit
   443                              <1> .renamePathCheck:
   444                              <1> ;Checks if the pathspec in rsi is OK
   445 000036EF 56                  <1>     push rsi
   446 000036F0 57                  <1>     push rdi
   447 000036F1 E85B390000          <1>     call checkPathspecOK
   448 000036F6 5F                  <1>     pop rdi
   449 000036F7 5E                  <1>     pop rsi
   450 000036F8 730D                <1>     jnc .pathOk     ;Path ok 
   451 000036FA 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   452                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   453 000036FC F605(01070000)FF    <1>     test byte [dosInvoke], -1
   454 00003703 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   455                              <1> .badPath:
   456 00003705 F9                  <1>     stc
   457                              <1>     return
    13                              <2> %%_ret:
    14 00003706 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> .pathOk:
   459 00003707 F8                  <1>     clc
   460                              <1>     return
    13                              <2> %%_ret:
    14 00003708 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> getSetFileDateTime:;ah = 57h
   463 00003709 3C01                <1>     cmp al, 1
   464 0000370B 760A                <1>     jbe .oksubfun
   465 0000370D B801000000          <1>     mov eax, errInvFnc
   466 00003712 E94B3C0000          <1>     jmp extErrExit
   467                              <1> .oksubfun:
   468 00003717 E8FC150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   469 0000371C 0F82403C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   470 00003722 3C01                <1>     cmp al, 1
   471 00003724 741C                <1>     je .setTimeDate
   472                              <1>     ;Here we get the Time/Date
   473 00003726 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   474 0000372A 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   475 0000372E E85C370000          <1>     call getUserRegs
   476 00003733 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   477 00003737 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   478 0000373B 31C0                <1>     xor eax, eax
   479 0000373D E9123C0000          <1>     jmp extGoodExit
   480                              <1> .setTimeDate:
   481                              <1>     ;Here we set the Time/Date
   482 00003742 66894F13            <1>     mov word [rdi + sft.wTime], cx
   483 00003746 66895715            <1>     mov word [rdi + sft.wDate], dx
   484 0000374A 31C0                <1>     xor eax, eax
   485 0000374C E9033C0000          <1>     jmp extGoodExit
   486                              <1> 
   487                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   488                              <1> ;Uses the clock to do it's bidding
   489                              <1> ;cx = file attribute 
   490                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   491                              <1> ;       filename
   492 00003751 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   493 00003756 740A                <1>     jz .validAttribs
   494 00003758 B805000000          <1>     mov eax, errAccDen
   495 0000375D E9003C0000          <1>     jmp extErrExit
   496                              <1> .validAttribs:
   497 00003762 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   498 00003766 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   499 00003769 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   500 0000376E 31C0                <1>     xor eax, eax
   501 00003770 4889D7              <1>     mov rdi, rdx
   502 00003773 F2AE                <1>     repne scasb
   503 00003775 85C9                <1>     test ecx, ecx
   504 00003777 750A                <1>     jnz .nullFnd
   505                              <1>     ;Bad path
   506 00003779 B803000000          <1>     mov eax, errPnf
   507 0000377E E9DF3B0000          <1>     jmp extErrExit
   508                              <1> .nullFnd:
   509 00003783 48FFCF              <1>     dec rdi
   510 00003786 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   511 0000378A E821380000          <1>     call swapPathSeparator
   512 0000378F 7403                <1>     jz .pathsepFnd
   513                              <1>     ;If no pathsep found, force one at rdi
   514 00003791 B05C                <1>     mov al, "\"
   515 00003793 AA                  <1>     stosb
   516                              <1> .pathsepFnd:
   517 00003794 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   518                              <1> .fileCreateLoop:
   519 00003797 55                  <1>     push rbp
   520 00003798 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   521 0000379D 5D                  <1>     pop rbp
   522 0000379E 0FB7C1              <1>     movzx eax, cx
   523 000037A1 0FB7D2              <1>     movzx edx, dx
   524 000037A4 C1E010              <1>     shl eax, 10h
   525 000037A7 09D0                <1>     or eax, edx  ;Add the bits of dx too
   526 000037A9 E831000000          <1>     call .writeNybbles
   527 000037AE 31C0                <1>     xor eax, eax
   528 000037B0 AA                  <1>     stosb   ;Store terminating null
   529 000037B1 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   530 000037B4 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   531 000037B7 55                  <1>     push rbp
   532 000037B8 E85C000000          <1>     call createNewFile
   533 000037BD 5D                  <1>     pop rbp
   534 000037BE 0F83903B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   535 000037C4 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   536 000037CB 3D05000000          <1>     cmp eax, errAccDen
   537 000037D0 74C5                <1>     je .fileCreateLoop
   538 000037D2 3D50000000          <1>     cmp eax, errFilExist
   539 000037D7 74BE                <1>     je .fileCreateLoop
   540 000037D9 F9                  <1>     stc
   541 000037DA E9833B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   542                              <1> .writeNybbles:
   543                              <1> ;Write the nybbles of eax at rdi
   544 000037DF B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   545                              <1> .wnLp:
   546 000037E4 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   547 000037E7 50                  <1>     push rax
   548 000037E8 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   549 000037ED 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   550 000037F2 3D39000000          <1>     cmp eax, '9'
   551 000037F7 7605                <1>     jbe .notExtDigit
   552 000037F9 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   553                              <1> .notExtDigit:
   554 000037FE AA                  <1>     stosb   ;Store the digit
   555 000037FF 58                  <1>     pop rax
   556 00003800 FFC9                <1>     dec ecx
   557 00003802 75E0                <1>     jnz .wnLp
   558                              <1>     return
    13                              <2> %%_ret:
    14 00003804 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> .uniqueTimeGet:
   561 00003805 E8D4F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   562 0000380A 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   563 00003811 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   564                              <1>     return
    13                              <2> %%_ret:
    14 00003818 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> createNewFile:     ;ah = 5Bh
   567 00003819 51                  <1>     push rcx    ;Save file attributes on stack
   568 0000381A 488D0DEF070000      <1>     lea rcx, createNewMain
   569 00003821 C605(FB060000)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   570 00003828 E9E4F9FFFF          <1>     jmp openFileHdl.openCommon
   571                              <1> 
   572                              <1> lockUnlockFile:    ;ah = 5Ch
   573                              <1> ;ah = 5Ch
   574                              <1> ;al = subfunction
   575                              <1> ;       00h lock region of file
   576                              <1> ;       01h unlock region of file
   577                              <1> ;ebx = file handle
   578                              <1> ;ecx = start offset of region within file
   579                              <1> ;edi = length of region in bytes
   580 0000382D 3C01                <1>     cmp al, 1
   581 0000382F 7757                <1>     ja .badFunction
   582 00003831 57                  <1>     push rdi
   583 00003832 E8FB140000          <1>     call derefSFTPtr
   584 00003837 730B                <1>     jnc .validHdl
   585 00003839 58                  <1>     pop rax ;Discard the qword on the stack
   586 0000383A B806000000          <1>     mov eax, errBadHdl
   587 0000383F E91E3B0000          <1>     jmp extErrExit
   588                              <1> .validHdl:
   589 00003844 84C0                <1>     test al, al ;Check if al = 0
   590 00003846 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   591 00003847 7424                <1>     jz .lockFileRegion
   592 00003849 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   593 0000384F 740B                <1>     jz .unlockShare ;Jump if a local file only
   594 00003851 50                  <1>     push rax
   595 00003852 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   596 00003857 CD2F                <1>     int 2Fh
   597 00003859 5B                  <1>     pop rbx
   598 0000385A EB06                <1>     jmp short .exitSelect
   599                              <1> .unlockShare:
   600 0000385C FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   601                              <1> .exitSelect:
   602 00003862 0F82FA3A0000        <1>     jc extErrExit
   603 00003868 E9E73A0000          <1>     jmp extGoodExit
   604                              <1> .lockFileRegion:
   605 0000386D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   606 00003873 740B                <1>     jz .lockShare   ;Jump if a local file only
   607 00003875 50                  <1>     push rax
   608 00003876 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   609 0000387B CD2F                <1>     int 2Fh
   610 0000387D 5B                  <1>     pop rbx
   611 0000387E EBE2                <1>     jmp short .exitSelect
   612                              <1> .lockShare:
   613 00003880 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   614 00003886 EBDA                <1>     jmp short .exitSelect
   615                              <1> .badFunction:
   616 00003888 B801000000          <1>     mov eax, errInvFnc
   617 0000388D 668905(0B040000)    <1>     mov word [errorExCde], ax
   618 00003894 E9C93A0000          <1>     jmp extErrExit
   619                              <1> 
   620                              <1> setHandleCount:    ;ah = 67h
   621                              <1> ;Input: bx = Size of new file handle table for process
   622                              <1> ;Output: CF=NC -> Ok to make more handles
   623                              <1> ;        CF=CY -> ax = Error code
   624                              <1> ;Five cases to consider:
   625                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   626                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   627                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   628                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   629                              <1> ;   Special case below, cannot be enacted directly by caller.
   630                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   631 00003899 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   632 0000389C 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   633 000038A3 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   634 000038A7 7765                <1>     ja short .moreHdlsReq
   635 000038A9 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   636 000038AE 771A                <1>     ja short .reduceExternal
   637                              <1>     ;Here if 20 handles or less requested
   638 000038B0 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   639 000038B6 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   640 000038B8 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   641 000038BA 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   642                              <1> .exitGood:
   643 000038C0 E98F3A0000          <1>     jmp extGoodExit
   644                              <1> .exitBad:
   645 000038C5 E9983A0000          <1>     jmp extErrExit
   646                              <1> .reduceExternal:
   647                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   648                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   649                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   650                              <1> ; and failing that, it will free it and then allocate a new block.
   651 000038CA 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   652 000038CE E8E8000000          <1>     call .checkOpenHandles
   653 000038D3 72F0                <1>     jc short .exitBad
   654                              <1>     ;Recall ebx has the numebr of handles here
   655 000038D5 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   656 000038DA 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   657 000038DE EBE0                <1>     jmp short .exitGood
   658                              <1> .reduceFree:
   659                              <1> ;Entered once we know that we have an external block
   660                              <1> ;Now we close all handles above JFT size
   661 000038E0 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   662 000038E4 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   663 000038E7 E8CF000000          <1>     call .checkOpenHandles
   664 000038EC 72D7                <1>     jc short .exitBad
   665 000038EE BB14000000          <1>     mov ebx, dfltJFTsize
   666 000038F3 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   667                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   668 000038F5 E8B8000000          <1>     call .copyBlock
   669                              <1>     ;Now we can free the old block
   670 000038FA 4989F0              <1>     mov r8, rsi
   671 000038FD 53                  <1>     push rbx
   672 000038FE E86E1B0000          <1>     call freeMemory
   673 00003903 5B                  <1>     pop rbx
   674 00003904 72BF                <1>     jc short .exitBad
   675 00003906 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   676 0000390A 31C0                <1>     xor eax, eax
   677                              <1> .exitGood2:
   678 0000390C EBB2                <1>     jmp short .exitGood
   679                              <1> .moreHdlsReq:
   680 0000390E 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   681 00003914 7507                <1>     jne short .okToExpand
   682 00003916 B801000000          <1>     mov eax, errInvFnc
   683                              <1> .exitBad2:
   684 0000391B EBA8                <1>     jmp short .exitBad
   685                              <1> .okToExpand:
   686                              <1> ;Need to check if we are external and reallocating. 
   687                              <1> ;   If we are, can we realloc or do we need to free and save?
   688 0000391D 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   689 00003923 762E                <1>     jbe short .moreFromJFT
   690 00003925 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   691 00003929 E83C000000          <1>     call .reallocBlock
   692 0000392E 7390                <1>     jnc short .exitGood
   693 00003930 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   694 00003935 728E                <1>     jc short .exitBad
   695 00003937 4989F0              <1>     mov r8, rsi ;Free the source block
   696 0000393A 53                  <1>     push rbx
   697 0000393B 57                  <1>     push rdi    ;Save the new pointer here
   698 0000393C 55                  <1>     push rbp
   699 0000393D E82F1B0000          <1>     call freeMemory
   700 00003942 5D                  <1>     pop rbp
   701 00003943 5F                  <1>     pop rdi
   702 00003944 5B                  <1>     pop rbx
   703 00003945 7317                <1>     jnc short .freeOk ;Free'd the original block
   704 00003947 50                  <1>     push rax    ;Save error code on stack
   705 00003948 4989F8              <1>     mov r8, rdi ;Free the new block
   706 0000394B E8211B0000          <1>     call freeMemory
   707 00003950 58                  <1>     pop rax
   708 00003951 EBC8                <1>     jmp short .exitBad2
   709                              <1> .moreFromJFT:
   710 00003953 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   711 00003957 E826000000          <1>     call .getBlock
   712 0000395C 72BD                <1>     jc short .exitBad2
   713                              <1> .freeOk:
   714 0000395E 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   715 00003962 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   716 00003966 31C0                <1>     xor eax, eax
   717 00003968 EBA2                <1>     jmp short .exitGood2
   718                              <1> .reallocBlock:
   719                              <1> ;Input:
   720                              <1> ;   rsi -> Source block to reallocate
   721                              <1> ;   ebx = Number of handles
   722                              <1> ;   rbp -> Current PSP
   723                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   724                              <1> ;                 ebx = Number of handles
   725                              <1> ;        CF=CY => Error, EAX has error code
   726 0000396A 56                  <1>     push rsi ;Save external pointer on stack
   727 0000396B 53                  <1>     push rbx    ;Save number of handles on stack
   728 0000396C 55                  <1>     push rbp
   729 0000396D 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   730 00003973 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   731 00003976 4989F0              <1>     mov r8, rsi
   732 00003979 E8FB1B0000          <1>     call reallocMemory
   733 0000397E 5D                  <1>     pop rbp
   734 0000397F 5B                  <1>     pop rbx
   735 00003980 5E                  <1>     pop rsi ;Get external pointer back in rsi
   736                              <1>     return
    13                              <2> %%_ret:
    14 00003981 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> .getBlock:
   738                              <1> ;rsi -> Source block for copy 
   739                              <1> ;ebx = Number of new handles
   740                              <1> ;Output: rsi and ebx as before
   741                              <1> ;        rdi -> New block
   742                              <1> ;IF CF=CY, bad exit
   743 00003982 53                  <1>     push rbx    ;bx has the number of handles we want
   744 00003983 56                  <1>     push rsi
   745 00003984 55                  <1>     push rbp
   746 00003985 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   747 0000398B C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   748 0000398E 89D9                <1>     mov ecx, ebx
   749 00003990 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   750 00003993 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   751 00003994 E8D4180000          <1>     call allocateMemory ;Allocate memory 
   752 00003999 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   753 0000399A 5D                  <1>     pop rbp ;Get the PSP pointer back
   754 0000399B 5E                  <1>     pop rsi ;Get the source pointer back
   755 0000399C 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   756                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000399D 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   757 0000399F 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   758 000039A2 57                  <1>     push rdi
   759 000039A3 31C0                <1>     xor eax, eax
   760 000039A5 FFC8                <1>     dec eax
   761 000039A7 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   762 000039A9 5F                  <1>     pop rdi
   763 000039AA 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   764 000039AC E801000000          <1>     call .copyBlock ;Copy all the handles over
   765                              <1>     return
    13                              <2> %%_ret:
    14 000039B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> .copyBlock:
   767                              <1> ;Input: rsi -> Source block
   768                              <1> ;       rdi -> Destination block
   769                              <1> ;       ecx = Number of handles to copy
   770 000039B2 56                  <1>     push rsi
   771 000039B3 57                  <1>     push rdi
   772 000039B4 51                  <1>     push rcx
   773 000039B5 F3A4                <1>     rep movsb
   774 000039B7 59                  <1>     pop rcx
   775 000039B8 5F                  <1>     pop rdi
   776 000039B9 5E                  <1>     pop rsi
   777                              <1>     return
    13                              <2> %%_ret:
    14 000039BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   778                              <1> .checkOpenHandles:
   779                              <1> ;Checks for open handles in the range that is to be freed.
   780                              <1> ;If any found, error exit
   781                              <1> ;Input: rsi -> Where to start searching
   782 000039BB 56                  <1>     push rsi
   783 000039BC 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   784                              <1> .cohLoop:
   785 000039C0 803EFF              <1>     cmp byte [rsi], -1
   786 000039C3 7509                <1>     jne .checkOpenHandlesBadExit
   787 000039C5 48FFC6              <1>     inc rsi
   788 000039C8 FFC9                <1>     dec ecx
   789 000039CA 75F4                <1>     jnz .cohLoop
   790 000039CC 5E                  <1>     pop rsi
   791                              <1>     return
    13                              <2> %%_ret:
    14 000039CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .checkOpenHandlesBadExit:
   793 000039CE B804000000          <1>     mov eax, errNhl
   794 000039D3 F9                  <1>     stc
   795 000039D4 5E                  <1>     pop rsi
   796                              <1>     return
    13                              <2> %%_ret:
    14 000039D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   797                              <1> 
   798                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   799                              <1>     ;Input: bx = File to flush
   800 000039D6 E83D130000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   801 000039DB 0F8281390000        <1>     jc extErrExit
   802 000039E1 E88B110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   803                              <1>     ;Now we check if the device is a char, disk or net file and commit
   804 000039E6 E811000000          <1>     call commitMain
   805 000039EB 0F8271390000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   806                              <1> .exitOk:
   807 000039F1 30C0                <1>     xor al, al
   808 000039F3 E897340000          <1>     call getUserRegs
   809 000039F8 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   810                              <1>     return
    13                              <2> %%_ret:
    14 000039FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   811                              <1> 
   812                              <1> ;-----------------------------------:
   813                              <1> ;       Main File IO Routines       :
   814                              <1> ;-----------------------------------:
   815                              <1> commitMain:
   816                              <1> ;Commits the current SFT 
   817 000039FC E878110000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   818 00003A01 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   819 00003A05 F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   820                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A0B 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   821 00003A0D F7C300800000        <1>     test ebx, devRedirDev
   822 00003A13 7508                <1>     jnz .notNet
   823                              <1>     ;Commit file net redir call and exit
   824 00003A15 B807110000          <1>     mov eax, 1107h
   825 00003A1A CD2F                <1>     int 2Fh
   826                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003A1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   827                              <1> .notNet:
   828 00003A1D E8F5380000          <1>     call dosCrit1Enter
   829 00003A22 E871E6FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   830 00003A27 B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   831 00003A2C E87D090000          <1>     call flushFile      ;Now the file gets flushed and we exit critical section
   832                              <1> .exit:
   833                              <1> ;Propagate CF and AL if needed due to error
   834                              <1>     return
    13                              <2> %%_ret:
    14 00003A31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   835                              <1> renameMain:
   836                              <1> ;Now, creates a special find first block for the source file
   837                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   838                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   839                              <1> ; block. 
   840                              <1> ;Then we search for that file name specifically (again), replacing 
   841                              <1> ; the filename portion of the destination buffer. If it exists or the 
   842                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   843                              <1> ; the new directory entry and delete the original file. 
   844                              <1> ;Input:
   845                              <1> ; filenamePtr1 -> Source path + filename pattern
   846                              <1> ; filenamePtr2 -> New path + filename pattern
   847                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   848                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   849 00003A32 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   850 00003A39 E8C4330000          <1>     call testCDSNet ;CF=NC => Not net
   851 00003A3E 7308                <1>     jnc .notNet
   852 00003A40 B811110000          <1>     mov eax, 1111h
   853 00003A45 CD2F                <1>     int 2Fh
   854                              <1>     return
    13                              <2> %%_ret:
    14 00003A47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   855                              <1> .notNet:
   856                              <1> ;First check if both drives are on the same disk
   857 00003A48 8A05(1D050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   858 00003A4E 8A25(9D050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   859 00003A54 38E0                <1>     cmp al, ah
   860 00003A56 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   861 00003A58 B811000000          <1>     mov eax, errDevUnk
   862 00003A5D F9                  <1>     stc
   863                              <1>     return
    13                              <2> %%_ret:
    14 00003A5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   864                              <1> .sameDrive:
   865                              <1> ;Now we check if either pathsepc is simply X:\,0
   866                              <1> ; If they are, return fail as we cannot rename the root dir
   867 00003A5F E8B3380000          <1>     call dosCrit1Enter
   868 00003A64 8B05(1D050000)      <1>     mov eax, dword [buffer1]
   869 00003A6A 30C0                <1>     xor al, al
   870 00003A6C 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   871 00003A71 750B                <1>     jne .checkpath2
   872                              <1> .accDen:
   873 00003A73 B805000000          <1>     mov eax, errAccDen
   874                              <1> .errorExit:
   875 00003A78 F9                  <1>     stc
   876 00003A79 E900030000          <1>     jmp .exit2
   877                              <1> .checkpath2:
   878 00003A7E 8B05(9D050000)      <1>     mov eax, dword [buffer2]
   879 00003A84 30C0                <1>     xor al, al
   880 00003A86 3D003A5C00          <1>     cmp eax, 005C3A00h
   881 00003A8B 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   882                              <1>     ;Now ensure hte two paths are not equal
   883 00003A8D 488D35(1D050000)    <1>     lea rsi, buffer1
   884 00003A94 488D3D(9D050000)    <1>     lea rdi, buffer2
   885 00003A9B E885350000          <1>     call compareFileNames
   886 00003AA0 74D1                <1>     jz .accDen
   887                              <1> ;Now we find first the source file
   888 00003AA2 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
   889 00003AA9 4889F7              <1>     mov rdi, rsi
   890 00003AAC E808D8FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   891 00003AB1 0F82C7020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   892 00003AB7 488D35(59060000)    <1>     lea rsi, curDirCopy
   893 00003ABE 488D3D(C1070000)    <1>     lea rdi, renameDir
   894 00003AC5 B904000000          <1>     mov ecx, fatDirEntry_size/8
   895 00003ACA F348A5              <1>     rep movsq   ;Copy directory over
   896 00003ACD 488D3D(96070000)    <1>     lea rdi, renameFFBlk
   897 00003AD4 E88FD6FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   898                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   899                              <1>     ; dir for any CDS.
   900 00003AD9 F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   901 00003AE0 7447                <1>     jz .notDirCheck
   902 00003AE2 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   903 00003AE9 57                  <1>     push rdi
   904 00003AEA E8FF340000          <1>     call strlen ;Get asciiz length in ecx
   905 00003AEF 5B                  <1>     pop rbx
   906 00003AF0 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   907 00003AF2 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   908 00003AF9 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   909                              <1> .dirCheck:
   910 00003B00 4889DF              <1>     mov rdi, rbx
   911 00003B03 51                  <1>     push rcx    ;Save the char count to check!
   912 00003B04 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   913 00003B05 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   914 00003B07 AC                  <1>     lodsb   ;Get the last char to check in al
   915 00003B08 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   916 00003B09 59                  <1>     pop rcx
   917 00003B0A 7512                <1>     jne .neqDir
   918                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   919 00003B0C 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   920 00003B0E 7404                <1>     je .curDirChangeErr
   921 00003B10 84C0                <1>     test al, al
   922 00003B12 750A                <1>     jne .neqDir ;Proceed as normal if not null
   923                              <1> .curDirChangeErr:
   924                              <1>     ;Here we are trying to change a current directory. Fail it!
   925                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   926                              <1>     ; we initially had programmed in (with access denied error instead).
   927 00003B14 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   928 00003B19 E95AFFFFFF          <1>     jmp .errorExit
   929                              <1> .neqDir:
   930 00003B1E 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   931 00003B25 FFCA                <1>     dec edx
   932 00003B27 75D7                <1>     jnz .dirCheck
   933                              <1> .notDirCheck:
   934                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   935 00003B29 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   936 00003B2E 31C0                <1>     xor eax, eax
   937 00003B30 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   938 00003B37 F2AE                <1>     repne scasb   ;Search for terminating null
   939 00003B39 FD                  <1>     std ;Go backwards now, to find the path sep
   940 00003B3A B05C                <1>     mov al, "\"
   941 00003B3C F2AE                <1>     repne scasb   ;Now rsi points one before
   942 00003B3E FC                  <1>     cld ;Go normal ways now
   943 00003B3F 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   944 00003B46 57                  <1>     push rdi
   945 00003B47 4889FE              <1>     mov rsi, rdi
   946 00003B4A 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
   947 00003B51 E88AD5FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   948 00003B56 5F                  <1>     pop rdi
   949 00003B57 57                  <1>     push rdi    ;Save rdi on stack again
   950 00003B58 488D35(B4070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   951                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   952 00003B5F 48A5                <1>     movsq
   953 00003B61 A5                  <1>     movsd
   954 00003B62 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   955 00003B63 5F                  <1>     pop rdi ;rdi points to first char position
   956 00003B64 E860020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   957 00003B69 0F8209FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   958                              <1>     ;Else return the pattern back to its original position
   959 00003B6F 488D35(E4060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   960 00003B76 E8ADD5FFFF          <1>     call FCBToAsciiz
   961                              <1>     ;Delete the original directory entry
   962 00003B7B 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   963 00003B7F FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   964 00003B81 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   965 00003B85 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   966 00003B87 8B0D(A3070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   967 00003B8D C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   968 00003B90 91                  <1>     xchg ecx, eax
   969 00003B91 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   970 00003B93 89C3                <1>     mov ebx, eax
   971 00003B95 8B05(83070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   972 00003B9B E8D6CEFFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   973 00003BA0 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   974 00003BA3 E849CEFFFF          <1>     call getBufForDir ;Get buffer pointer in rbx
   975 00003BA8 0F82DB010000        <1>     jc .badExit
   976 00003BAE 488D741320          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   977                              <1>     ;rsi points to the file entry
   978 00003BB3 8A05(07070000)      <1>     mov al, byte [delChar]
   979 00003BB9 8806                <1>     mov byte [rsi], al
   980 00003BBB E8CCCCFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   981                              <1> 
   982                              <1>     ;Now we use the destination filename pattern to build the new filename
   983 00003BC0 488B3D(25060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   984 00003BC7 31C0                <1>     xor eax, eax
   985 00003BC9 B943000000          <1>     mov ecx, 67
   986 00003BCE F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   987                              <1> .findPattern:
   988 00003BD0 48FFCF              <1>     dec rdi
   989 00003BD3 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   990 00003BD6 75F8                <1>     jne .findPattern
   991                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   992 00003BD8 C605(FD060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   993 00003BDF 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   994 00003BE3 750D                <1>     jne .notRoot
   995                              <1>     ;The root dir always exists on a volume so can skip the check.
   996 00003BE5 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   997 00003BE8 57                  <1>     push rdi
   998 00003BE9 800D(FD060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   999 00003BF0 EB29                <1>     jmp short .skipCheck
  1000                              <1> .notRoot:
  1001 00003BF2 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1002 00003BF3 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1003                              <1>     ;Now check if the parent directory exists for the destination
  1004 00003BF4 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1005 00003BF5 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1006 00003BFB 488D35(9D050000)    <1>     lea rsi, buffer2
  1007 00003C02 4889F7              <1>     mov rdi, rsi
  1008 00003C05 E8A8D6FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1009 00003C0A 8F05(1D060000)      <1>     pop qword [fname1Ptr]
  1010 00003C10 5F                  <1>     pop rdi
  1011 00003C11 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1012 00003C17 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1013                              <1> .skipCheck:
  1014                              <1>     ;rdi now points to the first char of the pattern
  1015 00003C1B 4889FE              <1>     mov rsi, rdi
  1016 00003C1E 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
  1017 00003C25 E8B6D4FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1018                              <1>     ;Ensure the destination pattern is not all question marks
  1019 00003C2A 813D(E4060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1019 00003C32 3F3F                <1>
  1020 00003C34 7524                <1>     jne .validRenPattern
  1021 00003C36 813D(E8060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1021 00003C3E 3F3F                <1>
  1022 00003C40 7518                <1>     jne .validRenPattern
  1023 00003C42 66813D(EC060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1023 00003C4A 3F                  <1>
  1024 00003C4B 750D                <1>     jne .validRenPattern
  1025 00003C4D 803D(EE060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1026 00003C54 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1027                              <1> .validRenPattern:
  1028                              <1>     ;curDirCopy has information for the destination directory file we will 
  1029                              <1>     ; write to. The cluster points to the directory file itself to search in
  1030                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1031                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1032 00003C5A 488D35(C1070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1033 00003C61 488D3D(D8060000)    <1>     lea rdi, fcbName
  1034 00003C68 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1035 00003C69 B90B000000          <1>     mov ecx, 11
  1036 00003C6E F3A4                <1>     rep movsb
  1037 00003C70 5F                  <1>     pop rdi
  1038 00003C71 488D35(E4060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1039                              <1> .mnnLp:
  1040 00003C78 AC                  <1>     lodsb
  1041 00003C79 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1042 00003C7B 7404                <1>     je .mnnWC   ;Skip overriding this char
  1043 00003C7D AA                  <1>     stosb   ;Store new char and go forwards by one
  1044 00003C7E 48FFCF              <1>     dec rdi ;Now go back by one
  1045                              <1> .mnnWC:
  1046 00003C81 48FFC7              <1>     inc rdi ;Goto next letter
  1047 00003C84 FFC1                <1>     inc ecx
  1048 00003C86 81F90B000000        <1>     cmp ecx, 11
  1049 00003C8C 75EA                <1>     jne .mnnLp
  1050 00003C8E 488D35(D8060000)    <1>     lea rsi, fcbName
  1051 00003C95 488D3D(C1070000)    <1>     lea rdi, renameDir
  1052 00003C9C B90B000000          <1>     mov ecx, 11
  1053 00003CA1 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1054 00003CA3 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1055 00003CA4 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1056 00003CA5 488D35(D8060000)    <1>     lea rsi, fcbName
  1057 00003CAC E877D4FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1058 00003CB1 488B35(25060000)    <1>     mov rsi, qword [fname2Ptr]
  1059 00003CB8 4889F7              <1>     mov rdi, rsi
  1060 00003CBB E8F9D5FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1061 00003CC0 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1062 00003CC6 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1063 00003CCB 0F85B8000000        <1>     jne .badExit
  1064                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1065                              <1>     ;If the parent is root, deal with special case
  1066 00003CD1 488D1D(59060000)    <1>     lea rbx, curDirCopy
  1067 00003CD8 F605(FD060000)02    <1>     test byte [fileFDflg], 2
  1068 00003CDF C605(FD060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1069 00003CE6 7416                <1>     jz .notRoot2
  1070 00003CE8 488D35(D8060000)    <1>     lea rsi, fcbName
  1071 00003CEF 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1072 00003CF6 48A5                <1>     movsq
  1073 00003CF8 A5                  <1>     movsd
  1074 00003CF9 A4                  <1>     movsb
  1075 00003CFA 31C0                <1>     xor eax, eax    ;Dir to search
  1076 00003CFC EB13                <1>     jmp short .getSpace
  1077                              <1> .notRoot2:
  1078 00003CFE 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1079 00003D05 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1080 00003D0C C1E210              <1>     shl edx, 10h
  1081 00003D0F 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1082                              <1> .getSpace:
  1083 00003D11 E877000000          <1>     call .searchForDirSpace
  1084 00003D16 726C                <1>     jc .bad
  1085                              <1> ;dir Entry found, rsi points to space in buffer
  1086 00003D18 4889F7              <1>     mov rdi, rsi
  1087 00003D1B 488D35(C1070000)    <1>     lea rsi, renameDir
  1088 00003D22 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1089 00003D27 F348A5              <1>     rep movsq   ;Copy dir over
  1090 00003D2A E85DCBFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1091                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1092                              <1>     ;If it does, we find next. If not, we exit
  1093 00003D2F B03F                <1>     mov al, "?"
  1094 00003D31 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1095 00003D38 E8B1320000          <1>     call strlen ;Get in rcx to get the length of the string
  1096 00003D3D F2AE                <1>     repne scasb
  1097 00003D3F 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1098 00003D41 B90B000000          <1>     mov ecx, 11
  1099 00003D46 488D3D(E4060000)    <1>     lea rdi, wcdFcbName
  1100 00003D4D F2AE                <1>     repne scasb
  1101 00003D4F 7525                <1>     jne .exit
  1102                              <1>     ;Here we gotta do a find next now!
  1103 00003D51 FF35(17040000)      <1>     push qword [currentDTA]
  1104 00003D57 488D3D(96070000)    <1>     lea rdi, renameFFBlk
  1105 00003D5E 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1106 00003D65 E874D0FFFF          <1>     call findNextMain
  1107 00003D6A 8F05(17040000)      <1>     pop qword [currentDTA]
  1108 00003D70 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1109                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1110                              <1> .exit:
  1111 00003D76 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1112 00003D77 E89FC9FFFF          <1>     call flushAllBuffersForDPB
  1113 00003D7C 720B                <1>     jc .badExit
  1114                              <1> .exit2: ;Bad exit before we push qword on stack 
  1115 00003D7E E89E350000          <1>     call dosCrit1Exit
  1116                              <1>     return
    13                              <2> %%_ret:
    14 00003D83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1117                              <1> .bad:
  1118 00003D84 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1119                              <1> .badExit:
  1120 00003D89 F9                  <1>     stc
  1121 00003D8A 5F                  <1>     pop rdi
  1122 00003D8B EBF1                <1>     jmp short .exit2
  1123                              <1> 
  1124                              <1> .searchForDirSpace:
  1125                              <1> ;Input: eax = First directory to search 
  1126 00003D8D 8905(83070000)      <1>     mov dword [dirClustA], eax
  1127 00003D93 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1128 00003D95 668905(87070000)    <1>     mov word [dirSect], ax
  1129 00003D9C 8905(89070000)      <1>     mov dword [dirEntry], eax
  1130 00003DA2 E864E2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1131 00003DA7 731C                <1>     jnc .dirEntryFnd
  1132 00003DA9 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1132 00003DB1 0000                <1>
  1133 00003DB3 7412                <1>     je .searchBad ;Set CF and exit
  1134 00003DB5 E844E3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1135 00003DBA 720B                <1>     jc .searchBad
  1136 00003DBC 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1137 00003DC1 7404                <1>     je .searchBad
  1138                              <1>     ;Else eax = Newly allocated cluster
  1139 00003DC3 EBC8                <1>     jmp short .searchForDirSpace
  1140                              <1> .dirEntryFnd:
  1141 00003DC5 F8                  <1>     clc
  1142                              <1>     return
    13                              <2> %%_ret:
    14 00003DC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1143                              <1> .searchBad:
  1144 00003DC7 F9                  <1>     stc
  1145                              <1>     return
    13                              <2> %%_ret:
    14 00003DC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1146                              <1> 
  1147                              <1> 
  1148                              <1> checkNoOpenHandlesForShareAction:
  1149                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1150                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1151                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1152                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1153                              <1> ; proceeding.
  1154                              <1> ;
  1155                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1156                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1157                              <1> ;       currDirCopy = Directory entry for the file
  1158 00003DC9 E832350000          <1>     call dosPushRegs    ;Save the context completely
  1159 00003DCE 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1160 00003DD5 740C                <1>     jz .noOpenFileCheckHandler
  1161 00003DD7 FF15(BF000000)      <1>     call qword [openFileCheck]
  1162 00003DDD 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1163 00003DDF 7447                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1164 00003DE1 EB4C                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1165                              <1> .noOpenFileCheckHandler:
  1166                              <1>     ;The following closes most recent shared handles referencing it
  1167                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1168                              <1>     ; mode and if there is precisely 1  
  1169 00003DE3 FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1170                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1171 00003DE9 488D3D(180D0000)    <1>     lea rdi, scratchSFT
  1172 00003DF0 48893D(31070000)    <1>     mov qword [currentSFT], rdi
  1173 00003DF7 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1174 00003DFC C605(06070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1175                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1176 00003E03 57                  <1>     push rdi    ;Save the SFT ptr
  1177 00003E04 E8DE020000          <1>     call buildSFTEntry
  1178 00003E09 5F                  <1>     pop rdi
  1179 00003E0A 7223                <1>     jc .errorMain
  1180 00003E0C 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1181 00003E11 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1182 00003E17 E8873D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1183 00003E1C 7211                <1>     jc .errorMain
  1184 00003E1E 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1185 00003E23 E8123D0000          <1>     call closeShareCallWrapper
  1186                              <1> .exit:
  1187 00003E28 E8BC340000          <1>     call dosPopRegs
  1188 00003E2D F8                  <1>     clc
  1189                              <1>     return
    13                              <2> %%_ret:
    14 00003E2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1190                              <1> .errorMain:
  1191 00003E2F E8B5340000          <1>     call dosPopRegs
  1192 00003E34 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1193 00003E39 F9                  <1>     stc
  1194                              <1>     return
    13                              <2> %%_ret:
    14 00003E3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1195                              <1> 
  1196                              <1> outerDeleteMain:
  1197                              <1> ;Internal current dir must be populated with dir entry
  1198                              <1> ; and internal DOS directory variables now point to this entry.
  1199                              <1> ;Checks if the file is a char device or read only.
  1200                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1201                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1202                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1203                              <1> ;         CF=NC => File deleted
  1204 00003E3B 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
  1205 00003E42 E8BB2F0000          <1>     call testCDSNet ;CF=NC => Not net
  1206 00003E47 7308                <1>     jnc .notNet
  1207 00003E49 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1208 00003E4E CD2F                <1>     int 2Fh
  1209                              <1>     return
    13                              <2> %%_ret:
    14 00003E50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .notNet:
  1211 00003E51 B805000000          <1>     mov eax, errAccDen  
  1212 00003E56 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1213 00003E5D 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1214 00003E5F F605(64060000)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1215 00003E66 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1216 00003E68 E843000000          <1>     call deleteMain
  1217 00003E6D 723F                <1>     jc .exitBad
  1218                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1219 00003E6F B03F                <1>     mov al, "?"
  1220 00003E71 488D3D(D8060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1221 00003E78 B90B000000          <1>     mov ecx, 11
  1222 00003E7D F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1223 00003E7F 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1224 00003E81 F8                  <1>     clc
  1225                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003E82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1226                              <1> .serverWCloop:
  1227 00003E83 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1228 00003E89 488D3D(2E060000)    <1>     lea rdi, dosffblock
  1229 00003E90 57                  <1>     push rdi    ;Push this address onto the stack
  1230 00003E91 E8D2D2FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1231 00003E96 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1232 00003E9C E83DCFFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1233 00003EA1 8F05(17040000)      <1>     pop qword [currentDTA]
  1234 00003EA7 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1235 00003EAC 73D5                <1>     jnc .serverWCloop     
  1236                              <1> ;Stop as soon as an error occurs
  1237                              <1> .exitBad:
  1238 00003EAE F9                  <1>     stc
  1239                              <1>     return
    13                              <2> %%_ret:
    14 00003EAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1240                              <1> 
  1241                              <1> deleteMain:
  1242                              <1> ;Now unlink FAT chain and then clear directory entry
  1243                              <1> ;Get the start cluster of this file
  1244                              <1> ;Input:
  1245                              <1> ; The file must have NOT be read-only.
  1246                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1247                              <1> ;     - curDirCopy must be filled with the file directory information
  1248                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1249                              <1> ;Output: CF=NC => Success, 
  1250                              <1> ; If not net CDS:
  1251                              <1> ;   rsi keeps pointing to directory entry.
  1252                              <1> ;   al = First char of the file that was deleted.
  1253                              <1> ;        CF=CY => Error
  1254                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1255 00003EB0 E814FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1256                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003EB5 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1257 00003EB7 52                  <1>     push rdx
  1258 00003EB8 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1259 00003EBF 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1260 00003EC6 C1E010              <1>     shl eax, 10h
  1261 00003EC9 09D0                <1>     or eax, edx ;Add low bits to eax
  1262 00003ECB 5A                  <1>     pop rdx
  1263 00003ECC 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1264 00003ECE 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1265 00003ED0 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1266 00003ED7 E853CDFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1267 00003EDC 721B                <1>     jc .exitBad
  1268                              <1> .skipUnlink:
  1269                              <1>     ;Now replace the first char of the directory to 0E5h
  1270                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1271 00003EDE E83BE1FFFF          <1>     call getDiskDirectoryEntry
  1272 00003EE3 7214                <1>     jc .exitBad
  1273 00003EE5 8A05(07070000)      <1>     mov al, byte [delChar]
  1274 00003EEB 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1275 00003EED E89AC9FFFF          <1>     call markBufferDirty
  1276                              <1>     ;CF must be clear
  1277 00003EF2 E824C8FFFF          <1>     call flushAllBuffersForDPB
  1278                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003EF7 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1279                              <1> .exitBad:
  1280 00003EF9 F9                  <1>     stc
  1281                              <1>     return
    13                              <2> %%_ret:
    14 00003EFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1282                              <1> 
  1283                              <1> openMain:
  1284                              <1> ;Input: ax (formally al) = Open mode
  1285                              <1> ;       [currentSFT] = SFT we are building
  1286                              <1> ;       [workingCDS] = CDS of drive to access
  1287                              <1> ;       [workingDPB] = DPB of drive to access
  1288                              <1> ;Ouput: CF=CY => Error, eax has error code
  1289 00003EFB E8D3000000          <1>     call setOpenMode
  1290                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003F00 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1291 00003F02 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1292 00003F09 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
  1293 00003F10 30E4                <1>     xor ah, ah  ;al has the access mode
  1294 00003F12 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1295 00003F19 750A                <1>     jne .notNet
  1296                              <1> .redirOpen:
  1297 00003F1B 50                  <1>     push rax    ;Push open mode onto stack
  1298 00003F1C B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1299 00003F21 CD2F                <1>     int 2Fh
  1300 00003F23 58                  <1>     pop rax
  1301                              <1>     return
    13                              <2> %%_ret:
    14 00003F24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1302                              <1> .notNet:
  1303 00003F25 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1304 00003F2B 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1305 00003F2D E8E5330000          <1>     call dosCrit1Enter
  1306                              <1> ;Ensure our disk attributes permit opening
  1307 00003F32 8A15(64060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1308 00003F38 F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1309 00003F3B 752C                <1>     jnz .accDenExit
  1310 00003F3D F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1311 00003F40 7439                <1>     jz short .openFile      ;If not, proceed.
  1312                              <1> ;Else, we check if we are permitted to open this file.
  1313 00003F42 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1314 00003F46 F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1315 00003F4C 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1316 00003F4E 89CA                <1>     mov edx, ecx
  1317 00003F50 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1318 00003F56 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1319 00003F5C 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1320 00003F5E 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1321 00003F64 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1322 00003F67 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1323                              <1> .accDenExit:
  1324 00003F69 B805000000          <1>     mov eax, errAccDen
  1325 00003F6E EB27                <1>     jmp short .errorExit
  1326                              <1> .fcbOpen:
  1327                              <1> ;FCB calls are depreciated, so this is lined up for removal already. Kept in
  1328                              <1> ; the event that we introduce a 64-bit FCB equivalent interface for net use.
  1329                              <1> ;Since FCB calls cannot set the open mode, we set the FCB open of a RO file
  1330                              <1> ; to only allow reading of the file. 
  1331 00003F70 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1332 00003F75 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1333 00003F79 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1334                              <1> .openFile:
  1335 00003F7B C605(06070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1336 00003F82 C605(07070000)E5    <1>     mov byte [delChar], 0E5h
  1337 00003F89 E859010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1338 00003F8E 7207                <1>     jc .errorExit
  1339 00003F90 E80E3C0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1340 00003F95 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1341                              <1> .errorExit:
  1342 00003F97 E885330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1343                              <1>     return
    13                              <2> %%_ret:
    14 00003F9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1344                              <1> .fileSharedOk:
  1345 00003F9D B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1346 00003FA2 E8D20B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1347 00003FA7 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1348 00003FAD E86F330000          <1>     call dosCrit1Exit
  1349                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1350 00003FB2 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1351 00003FB9 E80EE3FFFF          <1>     call openSFT
  1352 00003FBE 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1353 00003FC4 7501                <1>     jnz .netOpen
  1354                              <1>     return
    13                              <2> %%_ret:
    14 00003FC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .netOpen:
  1356 00003FC7 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1357 00003FCE 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1358                              <1>     return
    13                              <2> %%_ret:
    14 00003FD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1359                              <1> 
  1360                              <1> setOpenMode:
  1361                              <1> ;Input: al = Open mode for the file open
  1362 00003FD3 8805(FC060000)      <1>     mov byte [fileOpenMd], al
  1363 00003FD9 53                  <1>     push rbx
  1364                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1365 00003FDA F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1366 00003FE1 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1367 00003FE3 88C3                <1>     mov bl, al
  1368 00003FE5 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1369 00003FE8 803D(01070000)FF    <1>     cmp byte [dosInvoke], -1    
  1370 00003FEF 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1371 00003FF1 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1372 00003FF4 7405                <1>     je .s2
  1373                              <1> .s1:
  1374 00003FF6 80FB40              <1>     cmp bl, denyNoneShare
  1375 00003FF9 770D                <1>     ja .somBad
  1376                              <1> .s2:
  1377 00003FFB 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1378 00003FFD 80E30F              <1>     and bl, 0Fh
  1379 00004000 80FB02              <1>     cmp bl, RWAccess
  1380 00004003 7703                <1>     ja .somBad
  1381 00004005 5B                  <1>     pop rbx
  1382 00004006 F8                  <1>     clc
  1383                              <1>     return
    13                              <2> %%_ret:
    14 00004007 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1384                              <1> .somBad:
  1385 00004008 5B                  <1>     pop rbx
  1386 00004009 B80C000000          <1>     mov eax, errAccCde
  1387 0000400E F9                  <1>     stc
  1388                              <1>     return
    13                              <2> %%_ret:
    14 0000400F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1389                              <1> 
  1390                              <1> createNewMain:
  1391                              <1> ;Input: ax (formally al) = File attributes
  1392                              <1> ;       [currentSFT] = SFT we are building
  1393                              <1> ;       [workingCDS] = CDS of drive to access
  1394                              <1> ;       [workingDPB] = DPB of drive to access
  1395 00004010 0FB6C0              <1>     movzx eax, al
  1396 00004013 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1397 00004015 F605(03070000)FF    <1>     test byte [fileExist], -1
  1398 0000401C 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1399 0000401E B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1400 00004023 F9                  <1>     stc
  1401                              <1>     return
    13                              <2> %%_ret:
    14 00004024 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1402                              <1> createMain:
  1403                              <1> ;Input: ax (formally al) = File attributes
  1404                              <1> ;       [currentSFT] = SFT we are building
  1405                              <1> ;       [workingCDS] = CDS of drive to access
  1406                              <1> ;       [workingDPB] = DPB of drive to access
  1407 00004025 0FB6C0              <1>     movzx eax, al
  1408                              <1> .createNewEP:
  1409 00004028 A880                <1>     test al, 80h    ; Is this invalid bit set?
  1410 0000402A 750C                <1>     jnz .invalidAttrib
  1411 0000402C A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1412 0000402E 7502                <1>     jnz .notVol
  1413 00004030 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1414                              <1> .notVol:
  1415 00004032 0C20                <1>     or al, archiveFile   ;Set archive bit
  1416 00004034 A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1417 00004036 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1418                              <1> .invalidAttrib:
  1419 00004038 B805000000          <1>     mov eax, errAccDen
  1420 0000403D F9                  <1>     stc
  1421                              <1>     return
    13                              <2> %%_ret:
    14 0000403E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1422                              <1> .validAttr:
  1423                              <1> ;Check we are not creating a directory.
  1424 0000403F 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1425 00004046 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
  1426 0000404D 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1427 00004054 750A                <1>     jne .diskFile
  1428 00004056 50                  <1>     push rax    ;Save the new attributes
  1429 00004057 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1430 0000405C CD2F                <1>     int 2Fh
  1431 0000405E 5B                  <1>     pop rbx
  1432                              <1>     return
    13                              <2> %%_ret:
    14 0000405F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1433                              <1> .diskFile:
  1434 00004060 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1435 00004066 740A                <1>     jz .hardFile
  1436 00004068 50                  <1>     push rax    ;Save the new attributes
  1437 00004069 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1438 0000406E CD2F                <1>     int 2Fh
  1439 00004070 5B                  <1>     pop rbx
  1440                              <1>     return
    13                              <2> %%_ret:
    14 00004071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1441                              <1> .hardFile:
  1442 00004072 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1443 00004078 C605(06070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1444 0000407F C605(07070000)E5    <1>     mov byte [delChar], 0E5h
  1445 00004086 E88C320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1446 0000408B 57                  <1>     push rdi    ;Save the sft handle
  1447 0000408C 50                  <1>     push rax    ;Save the file attributes on stack
  1448 0000408D B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1449 00004092 E850000000          <1>     call buildSFTEntry
  1450 00004097 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1451 00004098 5F                  <1>     pop rdi
  1452 00004099 7246                <1>     jc .errorExit
  1453 0000409B E8033B0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1454 000040A0 723F                <1>     jc .errorExit
  1455 000040A2 8A05(FB060000)      <1>     mov al, byte [searchAttr]   ;Get the attr we created with.
  1456 000040A8 3C08                <1>     cmp al, volLabelFile
  1457 000040AA 7520                <1>     jne .notVolLabel    ;If not vol label, skip.
  1458                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1459 000040AC 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1460 000040B3 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1461 000040B5 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1462 000040B7 8805(E9190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1463 000040BD E855320000          <1>     call dosCrit1Enter
  1464 000040C2 E8A42A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1465 000040C7 E855320000          <1>     call dosCrit1Exit
  1466                              <1> .notVolLabel:
  1467 000040CC B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1468 000040D1 FF15(2F010000)      <1>     call qword [updateDirShare]
  1469 000040D7 E845320000          <1>     call dosCrit1Exit
  1470 000040DC E9D1FEFFFF          <1>     jmp openDriverMux
  1471                              <1> .errorExit:
  1472 000040E1 E83B320000          <1>     call dosCrit1Exit
  1473                              <1>     return
    13                              <2> %%_ret:
    14 000040E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1474                              <1> buildSFTEntry:
  1475                              <1> ;Called in a critical section.
  1476                              <1> ;Input: al = Open mode
  1477                              <1> ;       STACK: File attributes if creating a file
  1478                              <1> ;       [currentSFT] = SFT we are building
  1479                              <1> ;       [workingCDS] = CDS of drive to access
  1480                              <1> ;       [workingDPB] = DPB of drive to access
  1481                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1482                              <1> ;
  1483                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1484                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1485                              <1> ;        If CF=CY: - Return fail
  1486                              <1> ;
  1487                              <1> ;
  1488                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1489                              <1> ;   If not, create disk entry.
  1490                              <1> ;Check if the device was a char device by checking curDirCopy.
  1491                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1492                              <1> 
  1493                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1494                              <1> ; to start of file fields of the SFT
  1495 000040E7 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1496 000040E8 4889E5              <1>     mov rbp, rsp
  1497 000040EB 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  1498                              <1> ;Set the open mode
  1499 000040F2 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1500                              <1> ;Get current time
  1501 000040F6 E8E3EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1502 000040FB E8C9EBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1503 00004100 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1504                              <1> ;Set current Owner
  1505 00004103 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1506 0000410A 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1507                              <1> ;Set file pointer to first byte
  1508 0000410E C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1509                              <1> ;Common fields set
  1510 00004115 F605(06070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1511 0000411C 0F84AB010000        <1>     jz .openProc
  1512                              <1>     ;Here if Creating a file.
  1513                              <1>     ;First check if we are handling a volume label
  1514                              <1> ;vvvvvvvvvvvvvvvv NEW NEW NEW vvvvvvvvvvvvvvvv
  1515 00004122 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1516 0000412A 0F85FC010000        <1>     jnz .createVolLabel
  1517                              <1> ;^^^^^^^^^^^^^^^^ NEW NEW NEW ^^^^^^^^^^^^^^^^
  1518 00004130 F605(03070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1519 00004137 0F84D9000000        <1>     jz .createFile
  1520 0000413D F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1521 00004144 0F858C010000        <1>     jnz .charDev
  1522 0000414A F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1523 00004151 0F85CD010000        <1>     jnz .bad    ;Make sure we are not recreating a directory as a file!
  1524                              <1>     ;Here disk file exists, so recreating the file.
  1525 00004157 55                  <1>     push rbp
  1526 00004158 FF35(31070000)      <1>     push qword [currentSFT]
  1527 0000415E E84DFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1528 00004163 8F05(31070000)      <1>     pop qword [currentSFT]
  1529 00004169 5D                  <1>     pop rbp
  1530 0000416A 0F82B4010000        <1>     jc .bad
  1531                              <1>     ;al has the char for the filename
  1532                              <1>     ;Sets vars for the sector/offset into the sector
  1533 00004170 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1534 00004177 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1535 00004179 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1536                              <1>     ;al has file attributes.
  1537 0000417D 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1538 0000417F 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1539 00004182 31C0                <1>     xor eax, eax
  1540                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1541 00004184 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1542 00004188 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1543 0000418C 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1544 0000418F 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1545 00004192 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1546 00004195 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1547 00004198 57                  <1>     push rdi    ;Save SFT pointer
  1548 00004199 488D3D(59060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1549 000041A0 B920000000          <1>     mov ecx, fatDirEntry_size
  1550 000041A5 F3A4                <1>     rep movsb
  1551 000041A7 E8E0C6FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1552 000041AC 5F                  <1>     pop rdi
  1553                              <1> .createCommon:  ;rdi must point to the current SFT 
  1554                              <1>     ;Now populate the remaining SFT fields 
  1555 000041AD 488D35(59060000)    <1>     lea rsi, curDirCopy
  1556 000041B4 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1557 000041B7 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1558 000041BA 488B05(45070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1559 000041C1 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1560 000041C5 0FB705(4D070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1561 000041CC C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1562 000041CF 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1563 000041D2 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1564 000041D5 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1565 000041D8 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1566 000041DC 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1567 000041E0 C1E210              <1>     shl edx, 10h
  1568 000041E3 09D0                <1>     or eax, edx
  1569 000041E5 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1570                              <1> 
  1571 000041E8 31C0                <1>     xor eax, eax
  1572                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1573 000041EA 8A05(08070000)      <1>     mov al, byte [workingDrv]
  1574 000041F0 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1575 000041F2 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1576 000041F6 488B05(09070000)    <1>     mov rax, qword [workingDPB]
  1577 000041FD 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1578                              <1>     ;Last thing, copy the filename over
  1579                              <1>     ;Now save the name
  1580                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1581 00004201 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1582 00004205 488D35(59060000)    <1>     lea rsi, curDirCopy
  1583 0000420C 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1584 0000420E 66A5                <1>     movsw
  1585 00004210 A4                  <1>     movsb
  1586                              <1>     ;SFT filled
  1587 00004211 E905010000          <1>     jmp .exit
  1588                              <1> .createFile:
  1589                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1590                              <1>     ;rsi points to current sft entry
  1591 00004216 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1592                              <1>     ;Clear out the dir entry
  1593 0000421D 57                  <1>     push rdi
  1594 0000421E B904000000          <1>     mov ecx, 4
  1595 00004223 31C0                <1>     xor eax, eax
  1596 00004225 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1597 00004228 5F                  <1>     pop rdi
  1598                              <1>     ;Copy the FCB name over    
  1599 00004229 56                  <1>     push rsi
  1600 0000422A 57                  <1>     push rdi
  1601 0000422B B90B000000          <1>     mov ecx, 11
  1602 00004230 488D35(D8060000)    <1>     lea rsi, fcbName
  1603 00004237 F3A4                <1>     rep movsb   ;Move over the FCB name
  1604 00004239 5F                  <1>     pop rdi
  1605 0000423A 5E                  <1>     pop rsi
  1606                              <1> 
  1607 0000423B 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1608                              <1>     ;al has file attributes.
  1609 0000423F 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1610 00004241 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1611 00004244 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1612 00004247 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1613 0000424A 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1614 0000424D 8B05(7F070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1615                              <1> .searchForDirSpace:
  1616 00004253 8905(83070000)      <1>     mov dword [dirClustA], eax
  1617 00004259 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1618 0000425B 668905(87070000)    <1>     mov word [dirSect], ax
  1619 00004262 8905(89070000)      <1>     mov dword [dirEntry], eax
  1620 00004268 57                  <1>     push rdi
  1621 00004269 E89DDDFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1622 0000426E 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1623 0000426F 7328                <1>     jnc .dirEntryFnd
  1624 00004271 813D(7F070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1624 00004279 0000                <1>
  1625 0000427B 0F84A3000000        <1>     je .bad ;Set CF and exit
  1626 00004281 E878DEFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1627 00004286 0F828F000000        <1>     jc .exit
  1628 0000428C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1629 00004291 0F848D000000        <1>     je .bad
  1630                              <1>     ;Else eax = Newly allocated cluster
  1631 00004297 EBBA                <1>     jmp short .searchForDirSpace
  1632                              <1> .dirEntryFnd:
  1633 00004299 4887FE              <1>     xchg rdi, rsi
  1634 0000429C B904000000          <1>     mov ecx, 4
  1635 000042A1 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1636 000042A4 E8E3C5FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1637 000042A9 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1638 000042B0 E9F8FEFFFF          <1>     jmp .createCommon
  1639                              <1> .open:
  1640                              <1> ;curdircopy has a copy of the disk file directory
  1641                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1642 000042B5 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1643 000042BC 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1644                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1645 000042C3 E856DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1646 000042C8 E9E0FEFFFF          <1>     jmp .createCommon
  1647                              <1> .openProc:
  1648                              <1>     ;Here if Opening a file. 
  1649                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1650                              <1>     ;This is taken care of by openMain.
  1651 000042CD F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1652 000042D4 74DF                <1>     jz .open
  1653                              <1> .charDev:
  1654 000042D6 488B05(59060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1655 000042DD E87F2E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1656 000042E2 7307                <1>     jnc .notBadCharDevName
  1657 000042E4 B805000000          <1>     mov eax, errAccDen
  1658 000042E9 EB30                <1>     jmp short .exit ;CF already set
  1659                              <1> .notBadCharDevName:
  1660 000042EB 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  1661 000042F2 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1662 000042F6 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1663 000042FA 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1664 000042FD 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1665 00004300 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1666 00004304 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1667 0000430B 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1668 0000430F B820202020          <1>     mov eax, "    "
  1669 00004314 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1670 00004318 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1671                              <1> .exit:
  1672 0000431B E86F0A0000          <1>     call writeThroughBuffersForHandle
  1673 00004320 7207                <1>     jc .bad2
  1674 00004322 5D                  <1>     pop rbp
  1675                              <1>     return
    13                              <2> %%_ret:
    14 00004323 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1676                              <1> .bad:   ;Set Access Denied
  1677 00004324 B805000000          <1>     mov eax, errAccDen
  1678                              <1> .bad2:  ;Error propagating error code
  1679 00004329 F9                  <1>     stc
  1680 0000432A 5D                  <1>     pop rbp
  1681                              <1>     return
    13                              <2> %%_ret:
    14 0000432B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1682                              <1> ;vvvvvvvvvv INCOMPLETE INCOMPLETE INCOMPLETE INCOMPLETE vvvvvvvvvv
  1683                              <1> .createVolLabel:
  1684                              <1> ;Handles the creation of a volume label. 
  1685                              <1> ;Uses the final part of a pathspec to use as a volume label.
  1686                              <1> ;Procedure as follows:
  1687                              <1> ;1) Search for the existence of any volume label. Fail if exists. Proceed if not.
  1688                              <1> ;2) Set up vars (such as [dirClustPar]) to build entry in root dir of disk.
  1689                              <1> ;3) Goto create new file subroutine
  1690 0000432C 55                  <1>     push rbp
  1691 0000432D 4889E5              <1>     mov rbp, rsp
  1692 00004330 4881EC0A000000      <1>     sub rsp, 10    ;Make 11 (8.3) char space on stack
  1693 00004337 488D35(D8060000)    <1>     lea rsi, fcbName
  1694 0000433E 488D7DF6            <1>     lea rdi, qword [rbp - 10]   ;Store the FCB filename here
  1695 00004342 56                  <1>     push rsi
  1696 00004343 48A5                <1>     movsq
  1697 00004345 66A5                <1>     movsw
  1698 00004347 A4                  <1>     movsb
  1699 00004348 5F                  <1>     pop rdi
  1700 00004349 B90B000000          <1>     mov ecx, 11
  1701 0000434E B03F                <1>     mov al, "?"
  1702 00004350 F3AA                <1>     rep stosb   ;Store all question marks
  1703 00004352 C605(FB060000)08    <1>     mov byte [searchAttr], volLabelFile ;Set to search for volume labels
  1704 00004359 488D75F6            <1>     lea rsi, qword [rbp - 10]   ;Get the FCB filename back
  1705 0000435D 488D3D(D8060000)    <1>     lea rdi, fcbName            ;and place it back in the fcbName field
  1706 00004364 48A5                <1>     movsq
  1707 00004366 66A5                <1>     movsw
  1708 00004368 A4                  <1>     movsb
  1709 00004369 4889EC              <1>     mov rsp, rbp    ;Return the stack ptr home
  1710 0000436C 5D                  <1>     pop rbp
  1711 0000436D E9A4FEFFFF          <1>     jmp .createFile
  1712                              <1> .createVolLabelError:
  1713 00004372 4889EC              <1>     mov rsp, rbp    ;Return the stack ptr home
  1714 00004375 5D                  <1>     pop rbp
  1715 00004376 E9A9FFFFFF          <1>     jmp .bad        ;Set access denied error code and exit!
  1716                              <1> ;^^^^^^^^^^ INCOMPLETE INCOMPLETE INCOMPLETE INCOMPLETE ^^^^^^^^^^
  1717                              <1> closeMain: ;Int 2Fh AX=1201h
  1718                              <1> ;Gets the directory entry for a file
  1719                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1720                              <1> ;If CF=CY on return: Error, return error with al = error code
  1721                              <1> ;Preserve all regs except eax and rdi
  1722                              <1> ; If CF=NC on return: eax = Unknown
  1723                              <1> ;                     rdi = current SFT ptr
  1724 0000437B 488B3D(31070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1725 00004382 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1726 00004386 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1727 0000438C 7408                <1>     jz .physical
  1728                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1729 0000438E B806110000          <1>     mov eax, 1106h  ;Make request
  1730 00004393 CD2F                <1>     int 2Fh ;Beep!
  1731                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004395 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1732                              <1> .physical:  
  1733                              <1> ; We make a request to the dev dir to close the device
  1734                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1735 00004396 E87C2F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1736 0000439B E8F8DCFFFF          <1>     call updateSFTDateTimeFields
  1737 000043A0 E8DB090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1738 000043A5 50                  <1>     push rax
  1739 000043A6 53                  <1>     push rbx
  1740 000043A7 E88E370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1741 000043AC 5B                  <1>     pop rbx
  1742 000043AD 58                  <1>     pop rax
  1743                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1744                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1745                              <1> ;Closes the handle properly if only one reference to file remains.
  1746                              <1> ;Input: ax = Initial open handle count
  1747                              <1> ;       bx = attribute byte from the SFT
  1748                              <1> ;       rdi -> Current SFT
  1749 000043AE 50                  <1>     push rax    ;Save the handle count for later
  1750 000043AF 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1751 000043B4 7573                <1>     jnz .notDiskBitsSet
  1752 000043B6 E80DDDFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1753 000043BB B805000000          <1>     mov eax, errAccDen
  1754 000043C0 7268                <1>     jc .accDenExit
  1755 000043C2 56                  <1>     push rsi    ; -> Buffer dir entry
  1756 000043C3 57                  <1>     push rdi    ; -> SFT ptr
  1757 000043C4 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1758 000043C8 E8D8CCFFFF          <1>     call findInBuffer.nameCompare
  1759 000043CD 5F                  <1>     pop rdi     ; -> SFT ptr
  1760 000043CE 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1761 000043CF 7408                <1>     jz .dirEntryForUs
  1762                              <1> .badFileFound:
  1763 000043D1 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1764 000043D6 F9                  <1>     stc
  1765 000043D7 EB51                <1>     jmp short .accDenExit
  1766                              <1> .dirEntryForUs:
  1767 000043D9 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1768 000043DD 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1769 000043E1 F6D0                <1>     not al  ;Reverse the bits
  1770 000043E3 20C8                <1>     and al, cl  ;These should be equal
  1771 000043E5 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1772 000043E7 75E8                <1>     jnz .badFileFound
  1773 000043E9 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1774 000043EC 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1775 000043EF 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1776 000043F3 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1777 000043F7 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1778 000043FB 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1779 000043FF 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax    ;And update final field
  1780 00004403 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1781 00004406 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1782 0000440A C1E810              <1>     shr eax, 10h
  1783 0000440D 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1784 00004411 E876C4FFFF          <1>     call markBufferDirty
  1785 00004416 0FB605(08070000)    <1>     movzx eax, byte [workingDrv]
  1786 0000441D E80BC3FFFF          <1>     call flushAllBuffersForDrive
  1787 00004422 B805000000          <1>     mov eax, errAccDen
  1788 00004427 7201                <1>     jc .accDenExit
  1789                              <1> .notDiskBitsSet:
  1790 00004429 F8                  <1>     clc
  1791                              <1> .accDenExit:
  1792 0000442A 9C                  <1>     pushfq
  1793 0000442B E8A5DEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1794 00004430 9D                  <1>     popfq
  1795 00004431 59                  <1>     pop rcx ;Get back the initial open handle count
  1796 00004432 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1797 00004435 9C                  <1>     pushfq
  1798 00004436 FFC9                <1>     dec ecx ;Decrement count
  1799 00004438 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1800 0000443A 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1801                              <1> .exit:
  1802 0000443D E8DF2E0000          <1>     call dosCrit1Exit
  1803 00004442 9D                  <1>     popfq
  1804                              <1>     return
    13                              <2> %%_ret:
    14 00004443 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1805                              <1> 
  1806                              <1> readBytes:
  1807                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1808                              <1> ;Input: ecx = Number of bytes to read
  1809                              <1> ;Output: ecx = Number of bytes read
  1810                              <1> ;Number of bytes read 
  1811                              <1> ;If CF=CY, return with error code in ax
  1812 00004444 E830070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1813 00004449 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1814 0000444D 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1815 0000444F 3C01                <1>     cmp al, WriteAccess
  1816 00004451 7509                <1>     jne .readable
  1817 00004453 B805000000          <1>     mov eax, errAccDen
  1818 00004458 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1819 0000445A F9                  <1>     stc
  1820                              <1>     return
    13                              <2> %%_ret:
    14 0000445B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1821                              <1> .readable:
  1822 0000445C E85A070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1823 00004461 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1824 00004464 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1825 0000446A 740A                <1>     jz .notRedir
  1826 0000446C B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1827 00004471 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1828                              <1>     return 
    13                              <2> %%_ret:
    14 00004473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1829                              <1> .exitOk:
  1830 00004474 F8                  <1>     clc
  1831                              <1>     return 
    13                              <2> %%_ret:
    14 00004475 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1832                              <1> .notRedir:
  1833 00004476 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1834 0000447C 7510                <1>     jnz readCharDev
  1835 0000447E E8942E0000          <1>     call dosCrit1Enter
  1836 00004483 E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1837 00004488 E8942E0000          <1>     call dosCrit1Exit
  1838                              <1>     return 
    13                              <2> %%_ret:
    14 0000448D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1839                              <1> readCharDev:
  1840                              <1> ;rdi points to sft for char dev to read
  1841                              <1> ;ecx has the number of bytes to transfer
  1842                              <1> ;Vars have been set up and DTA has the transfer address
  1843                              <1> ;Returns in ecx, the actual bytes transferred
  1844                              <1> ;If CF=CY, return with error code in ax
  1845 0000448E C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1846 00004495 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1847 00004499 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1848 000044A0 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1849 000044A3 0F84D3020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1850 000044A9 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1851 000044AC 7407                <1>     jz .notNul
  1852                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1853                              <1>     ;NUL never transfers bytes 
  1854 000044AE 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1855 000044B0 E9C7020000          <1>     jmp readExitOk    ;Goto exit
  1856                              <1> .notNul:
  1857 000044B5 F6C320              <1>     test bl, charDevBinary
  1858 000044B8 0F857F000000        <1>     jnz .binary
  1859                              <1>     ;Here if the device is in ASCII mode
  1860 000044BE F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1861 000044C1 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1862                              <1> .consoleInput:
  1863                              <1>     ;Console input here
  1864 000044C7 E8FBE2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1865                              <1>     ;Get current offset into buffer (if one exists)
  1866 000044CC 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1867 000044D3 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1868 000044D6 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1869 000044D8 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1870 000044DF 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1871                              <1>     ;Else, reset the buffer
  1872 000044E1 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1872 000044E9 FF                  <1>
  1873                              <1> .oldBuf:
  1874                              <1> ;Preserve the dta and number of chars to tfr
  1875 000044EA 51                  <1>     push rcx
  1876 000044EB 57                  <1>     push rdi
  1877 000044EC 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1878 000044F3 E8EFE2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1879 000044F8 5F                  <1>     pop rdi
  1880 000044F9 59                  <1>     pop rcx
  1881 000044FA 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1882 00004501 803E1A              <1>     cmp byte [rsi], EOF
  1883 00004504 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1884 00004506 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1885 00004509 B00A                <1>     mov al, LF
  1886 0000450B E852DEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1887 00004510 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1888 00004512 EB18                <1>     jmp short .exit
  1889                              <1> .tfrBuf:
  1890 00004514 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1891 00004515 AA                  <1>     stosb
  1892 00004516 3C0D                <1>     cmp al, CR 
  1893 00004518 7503                <1>     jne .noCRLF
  1894 0000451A C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1895                              <1> .noCRLF:
  1896 0000451D 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1897 0000451F E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1898 00004521 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1899                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1900 00004523 E83ADEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1901 00004528 31F6                <1>     xor esi, esi
  1902 0000452A 0C01                <1>     or al, 1    ;Set ZF = NZ
  1903                              <1> .exit:
  1904 0000452C E8AEE2FFFF          <1>     call vConRetDriver
  1905 00004531 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1906 00004538 E93F020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1907                              <1> 
  1908                              <1> .binary:
  1909                              <1>     ;Setup registers for transfer
  1910 0000453D 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1911 00004540 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1912                              <1>     ;ecx has the number of bytes to transfer directly
  1913 00004543 E8D0270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1914 00004548 488B35(09070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1915 0000454F E8A6240000          <1>     call goDriver   ;Make the request
  1916 00004554 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1917 00004557 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1918 0000455E F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1919 00004564 7422                <1>     jz .binNoError
  1920                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1921 00004566 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1922 00004568 E8581E0000          <1>     call charDevErr   ;ah = has part of the error 
  1923                              <1>     ;al now has the response
  1924 0000456D 3C00                <1>     cmp al, critIgnore
  1925 0000456F 7417                <1>     je .binNoError ;Simply proceed as normal
  1926 00004571 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1927 00004574 3C03                <1>     cmp al, critFail
  1928 00004576 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1929                              <1>     ;Fallthrough here for fail!
  1930                              <1> .failExit:
  1931 00004578 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  1932 0000457F 31C9                <1>     xor ecx, ecx
  1933 00004581 B805000000          <1>     mov eax, errAccDen
  1934 00004586 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1935                              <1>     return
    13                              <2> %%_ret:
    14 00004587 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1936                              <1> .binNoError:
  1937                              <1>     ;Get number of bytes transferred into 
  1938 00004588 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1939 0000458E F7D8                <1>     neg eax ;make it into -eax
  1940 00004590 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1941                              <1>     ;ecx now has bytes left to transfer
  1942 00004594 50                  <1>     push rax    ;Save value on stack
  1943 00004595 31C0                <1>     xor eax, eax ;Set ZF
  1944 00004597 FFC0                <1>     inc eax ;Clear ZF
  1945 00004599 58                  <1>     pop rax ;Get back the original value
  1946 0000459A E9DD010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1947                              <1> .generalASCII:
  1948                              <1>     ;ecx has bytes to transfer here
  1949                              <1>     ;Setup registers for transfer
  1950 0000459F 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1951 000045A2 51                  <1>     push rcx
  1952 000045A3 B901000000          <1>     mov ecx, 1  ;Get one char
  1953 000045A8 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1954 000045AB E868270000          <1>     call primReqReadSetup   ;Setup request
  1955 000045B0 59                  <1>     pop rcx
  1956                              <1>     ;rbx now has request header ptr
  1957 000045B1 488B35(09070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1958                              <1> .asciiReadChar:
  1959 000045B8 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1960 000045BB E88BE1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1961 000045C0 E835240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1962 000045C5 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1963 000045CC F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1964 000045D2 7420                <1>     jz .asciiNoError
  1965 000045D4 B486                <1>     mov ah, critCharDev | critData
  1966 000045D6 E8EA1D0000          <1>     call charDevErr    ;Call Int 24h
  1967                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1968 000045DB C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1968 000045E3 0000                <1>
  1969 000045E5 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1970 000045E8 3C03                <1>     cmp al, critFail
  1971 000045EA 748C                <1>     je .failExit
  1972 000045EC 3C01                <1>     cmp al, critRetry
  1973 000045EE 74C8                <1>     je .asciiReadChar
  1974                              <1>     ;Ignore here, pretend NULL CHAR was read
  1975 000045F0 30C0                <1>     xor al, al
  1976 000045F2 EB15                <1>     jmp short .asciiIgnoreEP
  1977                              <1> .asciiNoError:
  1978                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1979                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1980                              <1> ;Preserve RBX, RSI
  1981                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1982 000045F4 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1983 000045F7 813D(D6040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1983 000045FF 0000                <1>
  1984 00004601 0F8575010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1985 00004607 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1986                              <1> .asciiIgnoreEP:
  1987 00004609 48FF05(CE040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1988 00004610 48FFC7              <1>     inc rdi ;Also advance register pointer
  1989 00004613 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1990 00004615 0F8461010000        <1>     je readExitOk
  1991 0000461B 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1992 0000461D E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1993                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1994 0000461F FEC0                <1>     inc al  ;make ZF=NZ
  1995 00004621 E956010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1996                              <1> 
  1997                              <1> readDiskFile:
  1998                              <1> ;rdi = Current SFT
  1999                              <1> ;rbp = WorkingDPB
  2000                              <1> ;ecx = Bytes to transfer
  2001 00004626 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2002 0000462D C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2003                              <1>     ;We have the following vars setup:
  2004                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2005                              <1>     ;currClustF
  2006                              <1>     ;Now convert currSectC to disk sector by using currClustF
  2007                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  2008 00004634 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  2009 00004637 85D2                <1>     test edx, edx
  2010 00004639 0F843D010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  2011 0000463F 8B15(4F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2012 00004645 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2013 00004648 8905(53070000)      <1>     mov dword [currClustD], eax
  2014 0000464E 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2015 00004650 0F8426010000        <1>     jz readExitOk
  2016 00004656 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2017 0000465B 0F841B010000        <1>     jz readExitOk   
  2018 00004661 8B0D(77070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2019                              <1>     ;Check if we have opened a volume label (should never happen)
  2020 00004667 F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2021 0000466B 7407                <1>     jz .shareCheck
  2022 0000466D B805000000          <1>     mov eax, errAccDen
  2023 00004672 F9                  <1>     stc
  2024                              <1>     return
    13                              <2> %%_ret:
    14 00004673 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2025                              <1> .shareCheck:
  2026                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2027 00004674 E8C8340000          <1>     call retryShareIODelay
  2028 00004679 7308                <1>     jnc .shareOk
  2029 0000467B E85E350000          <1>     call shareCheckReadLockViolation
  2030 00004680 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2031                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2032                              <1> .shareOk:
  2033 00004683 E850C0FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2034 00004688 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2035 0000468A 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2036 0000468C 7426                <1>     jz .skipWalk
  2037                              <1> .goToCurrentCluster:
  2038 0000468E E8E5C5FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2039 00004693 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  2040 00004699 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2041 0000469E 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  2042 000046A4 8905(53070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2043 000046AA FFCA                <1>     dec edx ;Decrement counter
  2044 000046AC 75E0                <1>     jnz .goToCurrentCluster
  2045                              <1> ;Now we fall out with ebx = Current cluster
  2046 000046AE 8B05(53070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2047                              <1>     ;mov eax, ebx
  2048                              <1> .skipWalk:
  2049 000046B4 E8BDC3FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2050                              <1>     ;Now we add the offset to this
  2051 000046B9 0FB61D(5B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2052 000046C0 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2053 000046C3 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2054                              <1> ;Main
  2055                              <1> .mainRead:
  2056 000046CA F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2057 000046D1 7407                <1>     jz .mainReadNoBreak
  2058 000046D3 50                  <1>     push rax
  2059 000046D4 E872E0FFFF          <1>     call checkBreak
  2060 000046D9 58                  <1>     pop rax
  2061                              <1> .mainReadNoBreak:
  2062 000046DA E817C3FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2063 000046DF 0F8288000000        <1>     jc .badExit
  2064 000046E5 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2065 000046E9 0FB71D(64070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2066 000046F0 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2067                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2068                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  2069                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  2070                              <1> 
  2071 000046F3 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2072 000046F6 2B0D(66070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2073 000046FC 8B1D(7B070000)      <1>     mov ebx, dword [tfrCntr]
  2074 00004702 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2075 00004704 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2076 00004707 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2077 0000470B 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2078 0000470D 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2079                              <1>     
  2080 00004710 57                  <1>     push rdi
  2081 00004711 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2082 00004718 51                  <1>     push rcx
  2083 00004719 F3A4                <1>     rep movsb
  2084 0000471B 59                  <1>     pop rcx
  2085 0000471C 010D(66070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2086 00004722 290D(7B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2087 00004728 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2088 0000472F 8B05(66070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2089 00004735 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2090 00004739 31D2                <1>     xor edx, edx    ;Zero rdx
  2091 0000473B F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2092 0000473D 668915(64070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2093 00004744 5F                  <1>     pop rdi
  2094 00004745 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2095 0000474B 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2096 0000474D 742D                <1>     jz readExitOk ;Exit if so!
  2097 0000474F E885C4FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2098 00004754 7217                <1>     jc .badExit
  2099                              <1>     ;If ZF=ZE then currClustF has last cluster
  2100 00004756 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2101                              <1>     ;Else repeat
  2102                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2103 00004758 66C705(64070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2103 00004760 00                  <1>
  2104 00004761 488B05(5C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2105 00004768 E95DFFFFFF          <1>     jmp .mainRead
  2106                              <1> .badExit:
  2107                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2108                              <1>     ; we need to update the SFT before returning
  2109 0000476D 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2110 00004773 30C0                <1>     xor al, al  ;Set ZF flag
  2111 00004775 E802000000          <1>     call readExitOk   ;We call this
  2112 0000477A F9                  <1>     stc ;All calls which end up here return Fail!
  2113 0000477B C3                  <1>     ret
  2114                              <1> 
  2115                              <1> readExitOk:
  2116                              <1> ;Input: ecx = Number of bytes left to transfer!
  2117                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2118 0000477C 890D(7B070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2119                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2120                              <1>     ;jnz .skipbitClear
  2121                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2122                              <1>     ;The disk transfer must've flushed by now. 
  2123                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2124                              <1> .skipbitClear:  ;Or skip that entirely
  2125 00004782 E8FA030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2126                              <1>     return 
    13                              <2> %%_ret:
    14 00004787 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2127                              <1> 
  2128                              <1> writeBytes:
  2129                              <1> ;Writes the bytes from the user buffer
  2130                              <1> ;Input: ecx = Bytes to xfr
  2131                              <1> ;Returns number of bytes written in ecx if CF=NC
  2132 00004788 E8EC030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2133 0000478D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2134 00004791 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2135 00004793 3C00                <1>     cmp al, ReadAccess
  2136 00004795 7509                <1>     jne .writeable
  2137                              <1> .noWrite:
  2138 00004797 B805000000          <1>     mov eax, errAccDen
  2139 0000479C 31C9                <1>     xor ecx, ecx
  2140 0000479E F9                  <1>     stc
  2141 0000479F C3                  <1>     ret
  2142                              <1> .writeable:
  2143 000047A0 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2144 000047A6 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2145 000047A8 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2146 000047AC 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2147                              <1> .skipAttribCheck:
  2148 000047AE E808040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2149 000047B3 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2150 000047B9 7408                <1>     jz .notRedir
  2151 000047BB B809110000          <1>     mov eax, 1109h  ;Write to redir
  2152 000047C0 CD2F                <1>     int 2Fh
  2153                              <1>     return
    13                              <2> %%_ret:
    14 000047C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2154                              <1> .notRedir:
  2155 000047C3 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2156 000047C9 7510                <1>     jnz writeCharDev
  2157 000047CB E8472B0000          <1>     call dosCrit1Enter
  2158 000047D0 E84C010000          <1>     call writeDiskFile
  2159 000047D5 E8472B0000          <1>     call dosCrit1Exit
  2160                              <1>     return
    13                              <2> %%_ret:
    14 000047DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2161                              <1> writeCharDev:
  2162 000047DB C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2163                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2164 000047E2 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2165 000047E8 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2166                              <1>     ;If ecx = 0, we exit
  2167 000047EC 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2168 000047EE 85C9                <1>     test ecx, ecx
  2169 000047F0 0F846B030000        <1>     jz writeExitChar
  2170 000047F6 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2171 000047FD 4889DF              <1>     mov rdi, rbx
  2172 00004800 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2173 00004802 A820                <1>     test al, charDevBinary
  2174 00004804 744A                <1>     jz .asciiDev
  2175                              <1> ;Write binary transfer here
  2176                              <1> .binaryLp:
  2177 00004806 31C0                <1>     xor eax, eax
  2178 00004808 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2179 0000480B E8FD240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2180 00004810 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2181 00004817 E8DA210000          <1>     call goDriverChar
  2182 0000481C 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2183 0000481F B487                <1>     mov ah, critCharDev | critData | critWrite
  2184 00004821 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2185 00004828 F7C700800000        <1>     test edi, drvErrStatus
  2186 0000482E 7415                <1>     jz .binXfrOk
  2187 00004830 E8901B0000          <1>     call charDevErr ;Invoke Int 24h
  2188 00004835 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2189 00004838 3C00                <1>     cmp al, critIgnore
  2190 0000483A 7409                <1>     je .binXfrOk
  2191 0000483C 3C01                <1>     cmp al, critRetry
  2192 0000483E 74C6                <1>     je .binaryLp
  2193 00004840 E9D5000000          <1>     jmp .exitFail
  2194                              <1> .binXfrOk:
  2195 00004845 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2196 0000484B E911030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2197                              <1> .asciiDev:
  2198 00004850 A802                <1>     test al, charDevConOut
  2199 00004852 0F859E000000        <1>     jnz .conDev
  2200 00004858 A804                <1>     test al, charDevNulDev
  2201 0000485A 0F858F000000        <1>     jnz .nulDev
  2202                              <1>     ;Here we transfer for a generic character device in ascii mode
  2203 00004860 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2204 00004862 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2205 00004865 0F84F6020000        <1>     je writeExitChar
  2206 0000486B 51                  <1>     push rcx
  2207 0000486C B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2208 00004871 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2209 00004874 E894240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2210 00004879 59                  <1>     pop rcx
  2211 0000487A 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2212 00004881 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2213                              <1> .asciiLp:
  2214 00004885 E8C1DEFFFF          <1>     call checkBreak
  2215 0000488A E86B210000          <1>     call goDriver
  2216 0000488F 57                  <1>     push rdi
  2217 00004890 B487                <1>     mov ah, critCharDev | critData | critWrite
  2218 00004892 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2219 00004899 F7C700800000        <1>     test edi, drvErrStatus
  2220 0000489F 741D                <1>     jz .asciiNoError
  2221 000048A1 E81F1B0000          <1>     call charDevErr ;Invoke Int 24h
  2222 000048A6 5F                  <1>     pop rdi
  2223 000048A7 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2223 000048AF 0000                <1>
  2224 000048B1 3C01                <1>     cmp al, critRetry
  2225 000048B3 74D0                <1>     je .asciiLp
  2226 000048B5 3C00                <1>     cmp al, critIgnore
  2227 000048B7 7412                <1>     je .ignoreEp
  2228 000048B9 E95C000000          <1>     jmp .exitFail
  2229                              <1> .asciiNoError:
  2230 000048BE 5F                  <1>     pop rdi
  2231 000048BF 813D(D6040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2231 000048C7 0000                <1>
  2232 000048C9 741D                <1>     je .bytesXfrdOk
  2233                              <1> .ignoreEp:
  2234 000048CB FFC2                <1>     inc edx ;One more char has been xfrd
  2235 000048CD FF05(CE040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2236 000048D3 48FFC7              <1>     inc rdi ;And our copy... 
  2237 000048D6 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2238 000048D9 740D                <1>     je .bytesXfrdOk
  2239 000048DB 66C705(C3040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2239 000048E3 00                  <1>
  2240 000048E4 FFC9                <1>     dec ecx
  2241 000048E6 759D                <1>     jnz .asciiLp
  2242                              <1> .bytesXfrdOk:
  2243 000048E8 89D0                <1>     mov eax, edx
  2244 000048EA E972020000          <1>     jmp writeExitChar
  2245                              <1> .nulDev:
  2246 000048EF 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2247 000048F1 E96B020000          <1>     jmp writeExitChar
  2248                              <1> .conDev:
  2249 000048F6 E8CCDEFFFF          <1>     call vConSwapDriver
  2250 000048FB 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2251 000048FE 51                  <1>     push rcx
  2252                              <1> .conDevLp:
  2253 000048FF AC                  <1>     lodsb
  2254 00004900 3C1A                <1>     cmp al, EOF
  2255 00004902 7409                <1>     je .conDevExit
  2256 00004904 E859DAFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2257 00004909 FFC9                <1>     dec ecx
  2258 0000490B 75F2                <1>     jnz .conDevLp
  2259                              <1> .conDevExit:
  2260 0000490D 58                  <1>     pop rax ;Get initial ecx back into eax
  2261 0000490E 29C8                <1>     sub eax, ecx
  2262 00004910 E8CADEFFFF          <1>     call vConRetDriver
  2263 00004915 E947020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2264                              <1> .exitFail:
  2265 0000491A B805000000          <1>     mov eax, errAccDen
  2266 0000491F F9                  <1>     stc
  2267                              <1>     return
    13                              <2> %%_ret:
    14 00004920 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2268                              <1> writeDiskFile:
  2269                              <1>     ;rdi has SFT ptr
  2270 00004921 8B0D(77070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2271 00004927 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2272 0000492E C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2273 00004935 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2274 0000493B 0F85D7010000        <1>     jnz .badExit
  2275 00004941 85C9                <1>     test ecx, ecx
  2276 00004943 7505                <1>     jnz .nonZeroWrite
  2277 00004945 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2278                              <1> .nonZeroWrite:
  2279                              <1>     ;Now do share check here
  2280 0000494A E8F2310000          <1>     call retryShareIODelay
  2281 0000494F 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2282 00004951 E87F320000          <1>     call shareCheckWriteLockViolation
  2283 00004956 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2284                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004958 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2285                              <1> .proceedWithWrite:
  2286                              <1> ;Ensure that all buffers are now unreferenced
  2287 00004959 E87ABDFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2288 0000495E 31DB                <1>     xor ebx, ebx
  2289 00004960 891D(73070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2290 00004966 881D(72070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2291 0000496C 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2292                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2293 0000496F 85C0                <1>     test eax, eax
  2294 00004971 751C                <1>     jnz .notStart
  2295 00004973 E878C1FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2296                              <1>     ;jc .exitPrepHardErr
  2297                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004978 72DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2298 0000497A 3DFFFFFFFF          <1>     cmp eax, -1
  2299 0000497F 0F84A5010000        <1>     je writeExit
  2300                              <1>     ;Now eax has the first cluster of chain
  2301 00004985 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2302 00004988 C605(72070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2303                              <1> .notStart:
  2304                              <1> ;eax has the start cluster of the file
  2305                              <1> ;Now we go to CurntOff
  2306 0000498F 8905(53070000)      <1>     mov dword [currClustD], eax ;Store in var
  2307 00004995 31DB                <1>     xor ebx, ebx
  2308 00004997 8B15(4F070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2309 0000499D 85D2                <1>     test edx, edx
  2310 0000499F 744D                <1>     jz .skipWalk
  2311                              <1> .goToCurrentCluster:
  2312 000049A1 E8D2C2FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2313                              <1>     ;jc .exitPrepHardErr
  2314                              <1>     retc   ;This can only return Fail
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000049A6 72B0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2315 000049A8 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2316 000049AD 752F                <1>     jne .stillInFile
  2317                              <1> .addCluster:
  2318                              <1>     ;Here we extend by one cluster
  2319 000049AF 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2320 000049B5 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2321 000049B7 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2322 000049BC E855C1FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2323                              <1>     ;jc .exitPrepHardErr
  2324                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000049C1 7295                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2325 000049C3 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2326 000049C5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2327 000049C9 010D(73070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2328 000049CF C605(72070000)FF    <1>     mov byte [fileGrowing], -1
  2329 000049D6 E89DC2FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2330                              <1>     ;jc .exitPrepHardErr
  2331                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000049DB 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000049DD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2332                              <1> .stillInFile:
  2333 000049DE 8905(53070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2334 000049E4 FFCA                <1>     dec edx ;Decrement counter
  2335 000049E6 75B9                <1>     jnz .goToCurrentCluster
  2336                              <1> ;Now we fall out
  2337 000049E8 8B05(53070000)      <1>     mov eax, dword [currClustD]
  2338                              <1> .skipWalk:
  2339 000049EE E883C0FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2340                              <1>     ;Now we add the offset to this
  2341 000049F3 0FB61D(5B070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2342 000049FA 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2343 000049FD 488905(5C070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2344 00004A04 8B0D(77070000)      <1>     mov ecx, dword [tfrLen]
  2345 00004A0A 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2346 00004A0C 751F                <1>     jnz .mainWrite  
  2347                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2348 00004A0E F605(72070000)FF    <1>     test byte [fileGrowing], -1
  2349 00004A15 750B                <1>     jnz .extend
  2350                              <1> ;Here we truncate where needed
  2351 00004A17 8B05(53070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2352 00004A1D E827C2FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2353                              <1> .extend:
  2354 00004A22 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2355 00004A25 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2356 00004A28 E9F2000000          <1>     jmp .noByteExit ;Exit ok!
  2357                              <1> .mainWrite:
  2358 00004A2D F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2359 00004A34 7407                <1>     jz .mainWriteNoBreak
  2360 00004A36 50                  <1>     push rax
  2361 00004A37 E80FDDFFFF          <1>     call checkBreak
  2362 00004A3C 58                  <1>     pop rax
  2363                              <1> .mainWriteNoBreak:
  2364                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2365 00004A3D E8B4BFFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2366 00004A42 0F82D0000000        <1>     jc .badExit
  2367 00004A48 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2368 00004A4C 0FB71D(64070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2369 00004A53 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2370                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2371                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2372                              <1>     ; 3) Number of bytes left free in the sector
  2373 00004A56 31C0                <1>     xor eax, eax
  2374 00004A58 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2375 00004A5C 89D8                <1>     mov eax, ebx
  2376 00004A5E 662B05(64070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2377 00004A65 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]
  2378                              <1> 
  2379 00004A6B 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2380 00004A6D 0F47CB              <1>     cmova ecx, ebx
  2381 00004A70 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2382 00004A72 0F47C8              <1>     cmova ecx, eax
  2383                              <1> 
  2384 00004A75 56                  <1>     push rsi
  2385 00004A76 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2386 00004A7D 51                  <1>     push rcx
  2387 00004A7E F3A4                <1>     rep movsb
  2388 00004A80 59                  <1>     pop rcx
  2389 00004A81 E806BEFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2390                              <1> 
  2391 00004A86 010D(66070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2392 00004A8C 290D(7B070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2393 00004A92 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2394 00004A99 5E                  <1>     pop rsi
  2395                              <1> 
  2396 00004A9A 8B05(77070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2397 00004AA0 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2398 00004AA6 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2399 00004AA8 0F847C000000        <1>     jz writeExit
  2400 00004AAE E826C1FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2401                              <1>     ;jc .exitPrepHardErr
  2402                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004AB3 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004AB5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2403 00004AB6 3DFFFFFFFF          <1>     cmp eax, -1
  2404 00004ABB 7535                <1>     jne .noExtend
  2405                              <1>     ;Here we need to extend by a cluster
  2406 00004ABD 8B05(53070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2407 00004AC3 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2408 00004AC5 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2409 00004ACA E847C0FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2410                              <1>     ;jc .exitPrepHardErr
  2411                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004ACF 72E4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2412 00004AD1 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2413 00004AD3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2414 00004AD7 011D(73070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2415 00004ADD C605(72070000)FF    <1>     mov byte [fileGrowing], -1
  2416 00004AE4 E8F0C0FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2417                              <1>     ;jc .exitPrepHardErr
  2418                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004AE9 72CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2419 00004AEB 3DFFFFFFFF          <1>     cmp eax, -1
  2420 00004AF0 7415                <1>     je .noMoreClusters
  2421                              <1> .noExtend:
  2422 00004AF2 66C705(64070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2422 00004AFA 00                  <1>
  2423 00004AFB 488B05(5C070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2424 00004B02 E926FFFFFF          <1>     jmp .mainWrite
  2425                              <1> .noMoreClusters:
  2426 00004B07 56                  <1>     push rsi
  2427 00004B08 488B35(31070000)    <1>     mov rsi, qword [currentSFT]
  2428 00004B0F 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2429 00004B15 5E                  <1>     pop rsi
  2430 00004B16 74DA                <1>     jz .noExtend    ;If no trigger Int 24h, return success
  2431                              <1>     ;Here we future proof for triggering Int 24h.
  2432                              <1> .badExit:
  2433 00004B18 B805000000          <1>     mov eax, errAccDen
  2434                              <1> ;.exitPrepHardErr:
  2435 00004B1D F9                  <1>     stc
  2436                              <1>     return
    13                              <2> %%_ret:
    14 00004B1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2437                              <1> .noByteExit:
  2438 00004B1F B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2439 00004B24 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2440                              <1> writeExit:
  2441                              <1> ;Advances the bytes on the file pointer
  2442                              <1> ;Return: ecx = Number of bytes transferred
  2443 00004B2A 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2444 00004B31 E84B000000          <1>     call updateCurrentSFT
  2445 00004B36 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2446 00004B38 7404                <1>     jz .noFlush
  2447 00004B3A 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2448                              <1> .noFlush:
  2449 00004B3E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2450 00004B44 750E                <1>     jnz .exit
  2451 00004B46 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2452 00004B49 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2453 00004B4C 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2454 00004B4E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2455 00004B51 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2456                              <1> .exit:
  2457 00004B54 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2458 00004B59 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2459 00004B5F F8                  <1>     clc
  2460                              <1>     return
    13                              <2> %%_ret:
    14 00004B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2461                              <1> writeExitChar:
  2462                              <1> ;Input: eax = Number of chars transferred
  2463 00004B61 8B0D(77070000)      <1>     mov ecx, dword [tfrLen]
  2464 00004B67 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2465 00004B69 890D(7B070000)      <1>     mov dword [tfrCntr], ecx
  2466 00004B6F EBB9                <1>     jmp short writeExit
  2467                              <1> ;-----------------------------------:
  2468                              <1> ;        File Handle routines       :
  2469                              <1> ;-----------------------------------:
  2470                              <1> 
  2471                              <1> setCurrentSFT:
  2472                              <1> ;Set the pointer in rdi as current SFT 
  2473 00004B71 48893D(31070000)    <1>     mov qword [currentSFT], rdi
  2474                              <1>     return 
    13                              <2> %%_ret:
    14 00004B78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2475                              <1> getCurrentSFT:
  2476                              <1> ;Get the current SFT pointer in rdi
  2477 00004B79 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2478                              <1>     return 
    13                              <2> %%_ret:
    14 00004B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2479                              <1> updateCurrentSFT:
  2480                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2481                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2482 00004B81 57                  <1>     push rdi
  2483 00004B82 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2484 00004B89 E8BF010000          <1>     call getBytesTransferred
  2485 00004B8E 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2486                              <1>     ;ecx has bytes transferred
  2487 00004B91 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2488 00004B97 751F                <1>     jnz .exit
  2489 00004B99 50                  <1>     push rax
  2490 00004B9A 8B05(53070000)      <1>     mov eax, dword [currClustD]
  2491 00004BA0 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2492 00004BA3 8B05(4F070000)      <1>     mov eax, dword [currClustF]
  2493 00004BA9 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2494 00004BAC 58                  <1>     pop rax
  2495 00004BAD 51                  <1>     push rcx
  2496 00004BAE 8B0D(66070000)      <1>     mov ecx, dword [currByteF]
  2497 00004BB4 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2498 00004BB7 59                  <1>     pop rcx
  2499                              <1> .exit:
  2500 00004BB8 5F                  <1>     pop rdi
  2501 00004BB9 F8                  <1>     clc
  2502                              <1>     return 
    13                              <2> %%_ret:
    14 00004BBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2503                              <1> 
  2504                              <1> setupVarsForTransfer:
  2505                              <1> ;Computes the actual bytes to be transferred and 
  2506                              <1> ; sets up internal variables for the transfer. 
  2507                              <1> ;Works for both reading and writing
  2508                              <1> ;Input: ecx = User desired Bytes to transfer
  2509                              <1> ;       rdi = SFT pointer for the file
  2510                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2511                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2512                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2513                              <1> ;
  2514                              <1> ;Note: Does not account for a FULL disk. When writing,
  2515                              <1> ; if the disk will get full as a result of the write,
  2516                              <1> ; stop at the last byte before the transfer. If the 
  2517                              <1> ; file pointer is past the last free byte, write 0
  2518 00004BBB 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2519 00004BBF 488935(09070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2520 00004BC6 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2521 00004BC9 8905(66070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2522 00004BCF 890D(77070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2523 00004BD5 890D(7B070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2524 00004BDB 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2525 00004BE1 7402                <1>     jz setupVarsForDiskTransfer
  2526 00004BE3 F8                  <1>     clc
  2527                              <1>     return
    13                              <2> %%_ret:
    14 00004BE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2528                              <1> setupVarsForDiskTransfer:
  2529                              <1> ;Extension of the above, but for Disk files only
  2530                              <1> ;Input: ecx = User desired Bytes to transfer
  2531                              <1> ;       rdi = SFT pointer for the file
  2532                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2533                              <1> ;        CF=CY: Error exit
  2534 00004BE5 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2535 00004BE8 8905(66070000)      <1>     mov dword [currByteF], eax
  2536 00004BEE 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2537                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2538 00004BF2 48892D(09070000)    <1>     mov qword [workingDPB], rbp
  2539 00004BF9 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2540 00004BFC 881D(08070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2541 00004C02 8B05(66070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2542 00004C08 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2543 00004C0C 31D2                <1>     xor edx, edx    ;Zero rdx
  2544 00004C0E F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2545                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2546                              <1>     ;edx has the offset into that sector
  2547 00004C10 8905(57070000)      <1>     mov dword [currSectF], eax
  2548 00004C16 668915(64070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2549 00004C1D 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2550 00004C1F 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2551 00004C22 8805(5B070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2552 00004C28 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2553 00004C2A 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2554 00004C2D D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2555 00004C2F 8915(4F070000)      <1>     mov dword [currClustF], edx ;Save in var
  2556 00004C35 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2557                              <1> .exit:
  2558 00004C37 F8                  <1>     clc
  2559                              <1>     return 
    13                              <2> %%_ret:
    14 00004C38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2560                              <1> findFreeSFT:
  2561                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2562                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2563                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2564                              <1> ;        CF=CY => eax = errNhl, error exit
  2565 00004C39 31DB                <1>     xor ebx, ebx
  2566                              <1> .mainLp:
  2567 00004C3B 53                  <1>     push rbx    ;Save the sft ndx
  2568 00004C3C E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2569 00004C41 5B                  <1>     pop rbx
  2570 00004C42 7307                <1>     jnc .sftExists
  2571 00004C44 B804000000          <1>     mov eax, errNhl
  2572 00004C49 F9                  <1>     stc
  2573                              <1>     return
    13                              <2> %%_ret:
    14 00004C4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2574                              <1> .sftExists:
  2575 00004C4B 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2576 00004C50 7427                <1>     je .sftFound
  2577 00004C52 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2578 00004C57 751C                <1>     jne .gotoNextNdx
  2579                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2580 00004C59 53                  <1>     push rbx
  2581 00004C5A 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2582 00004C61 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2583 00004C65 750B                <1>     jne .netGoToNextNdx
  2584 00004C67 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2585 00004C6E 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2586                              <1> .netGoToNextNdx:
  2587 00004C72 5B                  <1>     pop rbx
  2588 00004C73 7404                <1>     je .sftFound
  2589                              <1> .gotoNextNdx:
  2590 00004C75 FFC3                <1>     inc ebx
  2591 00004C77 EBC2                <1>     jmp short .mainLp
  2592                              <1> .sftFound:
  2593 00004C79 53                  <1>     push rbx
  2594 00004C7A 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2595 00004C7F 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2596 00004C86 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2597 00004C8A 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2598 00004C91 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2599 00004C95 5B                  <1>     pop rbx
  2600 00004C96 F8                  <1>     clc
  2601                              <1>     return
    13                              <2> %%_ret:
    14 00004C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2602                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2603                              <1> ;Return a pointer to the SFT entry in rdi
  2604                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2605                              <1> ;Output: rdi = SFT pointer
  2606 00004C98 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2607                              <1> .walk:
  2608 00004C9F 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2609 00004CA3 7212                <1>     jb .thisTable
  2610 00004CA5 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2611 00004CA9 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2612 00004CAC 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2613 00004CB3 75EA                <1>     jne .walk
  2614 00004CB5 F9                  <1>     stc
  2615                              <1>     return
    13                              <2> %%_ret:
    14 00004CB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2616                              <1> .thisTable:
  2617 00004CB7 50                  <1>     push rax
  2618 00004CB8 52                  <1>     push rdx
  2619 00004CB9 B84F000000          <1>     mov eax, sft_size
  2620 00004CBE F7E3                <1>     mul ebx
  2621 00004CC0 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2622 00004CC3 5A                  <1>     pop rdx
  2623 00004CC4 58                  <1>     pop rax
  2624 00004CC5 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2625                              <1>     return
    13                              <2> %%_ret:
    14 00004CCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2626                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2627                              <1> ;Return a zero extended value in rdi for the SFT entry
  2628                              <1> ;Input: bx = JFT handle (we zero extend)
  2629                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2630                              <1> ;        CF=CY => al = Error code, Fail
  2631 00004CCD 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2632 00004CD0 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2633 00004CD7 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2634 00004CDB 7204                <1>     jb .ok
  2635 00004CDD B006                <1>     mov al, errBadHdl
  2636 00004CDF F9                  <1>     stc
  2637                              <1>     return
    13                              <2> %%_ret:
    14 00004CE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2638                              <1> .ok:
  2639 00004CE1 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2640 00004CE7 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2641 00004CE9 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2642 00004CEB 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2643 00004CEF 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2644 00004CF3 EB0B                <1>     jmp short .pspOkExit
  2645                              <1> .pspJftBelow:
  2646 00004CF5 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2647                              <1> .pspJftOk:
  2648 00004CFB 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2649                              <1> .pspOkExit:
  2650 00004D00 F8                  <1>     clc
  2651                              <1>     return
    13                              <2> %%_ret:
    14 00004D01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2652                              <1> findFreeJFTEntry:
  2653                              <1> ;Finds a free JFT entry in the currentPSP.
  2654                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2655                              <1> ;        CF=CY => al=errNhl
  2656 00004D02 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2657                              <1> .searchLp:
  2658 00004D04 E8C4FFFFFF          <1>     call getJFTPtr
  2659 00004D09 7209                <1>     jc .badExit
  2660 00004D0B 803FFF              <1>     cmp byte [rdi], -1
  2661                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D0E 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2662 00004D10 FFC3                <1>     inc ebx
  2663 00004D12 EBF0                <1>     jmp short .searchLp
  2664                              <1> .badExit:
  2665 00004D14 B004                <1>     mov al, errNhl
  2666 00004D16 F9                  <1>     stc
  2667                              <1>     return
    13                              <2> %%_ret:
    14 00004D17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2668                              <1> getSFTPtr:
  2669                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2670                              <1> ;Input: bx = JFT handle
  2671                              <1> ;Output: CF=NC: rdi = SFT pointer
  2672                              <1> ;        CF=CY: Error, ax=Error code
  2673 00004D18 E815000000          <1>     call derefSFTPtr
  2674                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D1D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2675 00004D1F 50                  <1>     push rax
  2676 00004D20 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2677 00004D27 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2678 00004D2B 58                  <1>     pop rax
  2679                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004D2C 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2680 00004D2E B006                <1>     mov al, errBadHdl   ;Error code
  2681 00004D30 F9                  <1>     stc         ;Reset CF
  2682                              <1>     return
    13                              <2> %%_ret:
    14 00004D31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2683                              <1> 
  2684                              <1> derefSFTPtr:
  2685                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2686                              <1> ;Input: bx = File handle (gets zero extended)
  2687                              <1> ;Output: CF=NC: rdi = SFT pointer
  2688                              <1> ;        CF=CY: Error, ax=Error code
  2689 00004D32 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2690 00004D37 7205                <1>     jb .fail
  2691 00004D39 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2692 00004D3C 7504                <1>     jne .ok
  2693                              <1> .fail:
  2694 00004D3E B006                <1>     mov al, errBadHdl
  2695 00004D40 F9                  <1>     stc
  2696                              <1>     return
    13                              <2> %%_ret:
    14 00004D41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2697                              <1> .ok:
  2698 00004D42 53                  <1>     push rbx    ;Preserve the JFT handle
  2699 00004D43 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2700 00004D46 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2701 00004D4B 5B                  <1>     pop rbx 
  2702                              <1>     return
    13                              <2> %%_ret:
    14 00004D4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2703                              <1> 
  2704                              <1> getBytesTransferred:
  2705 00004D4D 8B0D(7B070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2706 00004D53 F7D9                <1>     neg ecx ;Multiply by -1
  2707 00004D55 030D(77070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2708                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004D5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2709                              <1> 
  2710                              <1> getSFTndxInheritable:
  2711                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2712                              <1> ;Input: ebx = SFTndx (word)
  2713                              <1> ;Output: 
  2714                              <1> ;   ZF=ZE => Inheritable
  2715                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2716 00004D5C 57                  <1>     push rdi
  2717 00004D5D E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2718 00004D62 7208                <1>     jc .badNdx
  2719 00004D64 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2720 00004D6A 5F                  <1>     pop rdi
  2721                              <1>     return
    13                              <2> %%_ret:
    14 00004D6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2722                              <1> .badNdx:
  2723 00004D6C 31FF                <1>     xor edi, edi
  2724 00004D6E FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2725 00004D70 F8                  <1>     clc
  2726 00004D71 5F                  <1>     pop rdi
  2727                              <1>     return
    13                              <2> %%_ret:
    14 00004D72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2728                              <1> 
  2729                              <1> incrementOpenCount:
  2730                              <1> ;Given a SFTndx, this function will increment it's open count
  2731                              <1> ;Output:
  2732                              <1> ;   CF=NC => sftndx ok, count incremented
  2733                              <1> ;   CF=CY => Bad ndx
  2734 00004D73 57                  <1>     push rdi
  2735 00004D74 E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2736 00004D79 7203                <1>     jc .exit
  2737 00004D7B 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2738                              <1> .exit:
  2739 00004D7E 5F                  <1>     pop rdi
  2740                              <1>     return
    13                              <2> %%_ret:
    14 00004D7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2741                              <1> 
  2742                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2743                              <1> ;Input: rdi = SFT pointer
  2744                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2745 00004D80 9C                  <1>     pushfq
  2746 00004D81 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2747 00004D84 FFC8                <1>     dec eax     ;Decrement count
  2748 00004D86 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2749 00004D88 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2750                              <1> .exit:
  2751 00004D8A 9D                  <1>     popfq
  2752 00004D8B 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2753                              <1>     return
    13                              <2> %%_ret:
    14 00004D8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2754                              <1> 
  2755                              <1> ;Buffer Wrapper
  2756                              <1> writeThroughBuffersForHandle:
  2757                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2758 00004D8F 57                  <1>     push rdi
  2759 00004D90 55                  <1>     push rbp
  2760 00004D91 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
  2761 00004D98 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2762 00004D9E 751C                <1>     jnz .exit
  2763 00004DA0 FF35(09070000)      <1>     push qword [workingDPB]
  2764 00004DA6 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2765 00004DAA 48892D(09070000)    <1>     mov qword [workingDPB], rbp
  2766 00004DB1 E865B9FFFF          <1>     call flushAllBuffersForDPB
  2767 00004DB6 8F05(09070000)      <1>     pop qword [workingDPB]
  2768                              <1> .exit:
  2769 00004DBC 5D                  <1>     pop rbp
  2770 00004DBD 5F                  <1>     pop rdi
  2771                              <1>     return
    13                              <2> %%_ret:
    14 00004DBE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2772                              <1> 
  2773                              <1> setDPBfromSFT:
  2774                              <1> ;Sets and updates the DPB from an SFT ptr
  2775                              <1> ;Input: rdi -> sft
  2776                              <1> ;Output: CF=NC: workingDPB set
  2777                              <1> ;        CF=CY: Error fail, exit
  2778 00004DBF 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2779 00004DC3 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
  2780 00004DC7 8805(08070000)      <1>     mov byte [workingDrv], al
  2781 00004DCD E828200000          <1>     call setWorkingDPB
  2782 00004DD2 E8E51D0000          <1>     call ensureDiskValid
  2783                              <1>     return
    13                              <2> %%_ret:
    14 00004DD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004DD8 3C0F                <1>     cmp al, 15
    36 00004DDA 7747                <1>     ja .invalidFunction
    37 00004DDC 84C0                <1>     test al, al
    38 00004DDE 745B                <1>     jz .getDevWord
    39 00004DE0 3C01                <1>     cmp al, 1
    40 00004DE2 746E                <1>     je .setDevWord
    41 00004DE4 2C02                <1>     sub al, 2
    42 00004DE6 3C03                <1>     cmp al, 3
    43 00004DE8 7673                <1>     jbe .ioctlStringFunctions
    44 00004DEA 2C04                <1>     sub al, 4
    45 00004DEC 3C01                <1>     cmp al, 1
    46 00004DEE 0F8644010000        <1>     jbe .ioStatusFunctions
    47 00004DF4 2C02                <1>     sub al, 2
    48 00004DF6 3C02                <1>     cmp al, 2
    49 00004DF8 0F86CD010000        <1>     jbe .devControl
    50 00004DFE 2C03                <1>     sub al, 3
    51 00004E00 0F8498020000        <1>     jz .setSharingCount
    52 00004E06 FEC8                <1>     dec al
    53 00004E08 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 00004E0E FEC8                <1>     dec al
    55 00004E10 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 00004E16 FEC8                <1>     dec al
    57 00004E18 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 00004E1E E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004E23 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004E28 E935250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004E2D B805000000          <1>     mov eax, errAccDen
    65 00004E32 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004E34 B806000000          <1>     mov eax, errBadHdl
    68 00004E39 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004E3B E8F2FEFFFF          <1>     call derefSFTPtr
    74 00004E40 72F2                <1>     jc .badHandle
    75 00004E42 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004E46 30C0                <1>     xor al, al
    77 00004E48 E842200000          <1>     call getUserRegs
    78 00004E4D 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004E51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004E52 E8DBFEFFFF          <1>     call derefSFTPtr
    84 00004E57 72DB                <1>     jc .badHandle 
    85 00004E59 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004E5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004E5D 0FB6F3              <1>     movzx esi, bl
    96 00004E60 488D1D(C0040000)    <1>     lea rbx, primReqHdr
    97 00004E67 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004E6E C605(67040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004E75 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00004E78 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00004E7B 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004E7F 51                  <1>     push rcx
   105 00004E80 52                  <1>     push rdx
   106 00004E81 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00004E86 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00004E8B A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004E8D 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004E90 7507                <1>     jnz .notWrite
   111 00004E92 800D(67040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00004E99 5A                  <1>     pop rdx
   114 00004E9A 59                  <1>     pop rcx
   115 00004E9B 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004E9E 3C01                <1>     cmp al, 1
   117 00004EA0 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004EA2 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004EA5 E888FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00004EAA 7288                <1>     jc .badHandle 
   122 00004EAC C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00004EB3 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00004EB9 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004EBF 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004EC3 800D(67040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00004ECA 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004ECD 31C0                <1>     xor eax, eax
   130 00004ECF EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004ED1 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004ED8 89F0                <1>     mov eax, esi
   136 00004EDA 53                  <1>     push rbx
   137 00004EDB E843200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004EE0 5B                  <1>     pop rbx
   139 00004EE1 730A                <1>     jnc .okDrive
   140 00004EE3 B80F000000          <1>     mov eax, errBadDrv
   141 00004EE8 E975240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004EED 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   144 00004EF4 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004EF8 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004EFB 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004EFE 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004F02 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004F05 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004F09 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004F0C 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004F12 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 00004F18 51                  <1>     push rcx    ;Push xfrctr
   159 00004F19 52                  <1>     push rdx    ;Buffer Ptr
   160 00004F1A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 00004F20 E8D51A0000          <1>     call goDriver
   162 00004F25 5A                  <1>     pop rdx
   163 00004F26 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 00004F27 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 00004F2D 0F8421240000        <1>     jz extGoodExit
   167 00004F33 E91A030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00004F38 E8F5FDFFFF          <1>     call derefSFTPtr
   173 00004F3D 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00004F43 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   175 00004F4A C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 00004F4D C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00004F54 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00004F5A 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 00004F60 C605(67040000)00    <1>     mov byte [Int24bitfld], 0
   180 00004F67 B906000000          <1>     mov ecx, drvINSTATUS
   181 00004F6C BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 00004F71 84C0                <1>     test al, al
   183 00004F73 0F45CA              <1>     cmovnz ecx, edx
   184 00004F76 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00004F79 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 00004F7F 7416                <1>     jz .ioStatDisk
   187 00004F81 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00004F88 800D(67040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 00004F8F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00004F93 30C0                <1>     xor al, al
   191 00004F95 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00004F97 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 00004F9E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00004FA2 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00004FA5 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00004FA8 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 00004FAC E8491A0000          <1>     call goDriver
   200 00004FB1 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00004FB7 0F8595020000        <1>     jnz failIOCTLCall
   202 00004FBD 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00004FC3 7403                <1>     jz .notBusyExit
   204 00004FC5 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 00004FC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 00004FC8 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00004FCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 00004FCB 84C0                <1>     test al, al
   216 00004FCD 746D                <1>     jz .remTest
   217 00004FCF A801                <1>     test al, 1
   218 00004FD1 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 00004FD3 E85AFDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 00004FD8 0F8256FEFFFF        <1>     jc .badHandle 
   222 00004FDE 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 00004FE2 E8A81E0000          <1>     call getUserRegs
   225 00004FE7 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 00004FEB 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 00004FED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 00004FEE 88D8                <1>     mov al, bl
   233 00004FF0 E82E1F0000          <1>     call getCDS
   234 00004FF5 730A                <1>     jnc .devTestOkDrive
   235 00004FF7 B80F000000          <1>     mov eax, errBadDrv
   236 00004FFC E961230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 00005001 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   239 00005008 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 0000500C 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 00005011 7513                <1>     jnz .remoteDrive
   242 00005013 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 00005017 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 0000501B 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 0000501F 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 00005024 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 00005026 6689D3              <1>     mov bx, dx
   249 00005029 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 0000502E 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 00005033 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 00005035 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 0000503A EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 0000503C 88D8                <1>     mov al, bl
   258 0000503E E8E01E0000          <1>     call getCDS
   259 00005043 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 00005045 B80F000000          <1>     mov eax, errBadDrv
   262 0000504A E913230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 0000504F 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 00005056 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 0000505C 75E7                <1>     jnz .remTestBadDrv
   267 0000505E 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   268 00005065 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005069 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 0000506C 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 00005070 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 00005076 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 0000507C C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 0000507F C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005083 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005089 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 0000508C E869190000          <1>     call goDriver
   278 00005091 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005095 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 0000509A C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000509D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 0000509E 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 000050A5 6685D2              <1>     test dx, dx
   288 000050A8 0F8475FDFFFF        <1>     jz .invalidFunction
   289 000050AE 668915(21000000)    <1>     mov word [shareDelay], dx
   290 000050B5 31C0                <1>     xor eax, eax
   291 000050B7 E998220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 000050BC E857FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 000050C1 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 000050C3 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 000050CA B806000000          <1>     mov eax, errBadHdl
   299 000050CF E98E220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 000050D4 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 000050DA 75E7                <1>     jnz .ioctrlBadHandle
   303 000050DC 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000050E2 74DF                <1>     jz .ioctrlBadHandle
   305 000050E4 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000050E8 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000050EA 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000050EC 51                  <1>     push rcx
   310 000050ED 52                  <1>     push rdx
   311 000050EE E8301E0000          <1>     call getCDS ;Sets the current CDS
   312 000050F3 5A                  <1>     pop rdx
   313 000050F4 59                  <1>     pop rcx
   314 000050F5 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000050F7 488B35(11070000)    <1>     mov rsi, qword [workingCDS]
   317 000050FE 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 00005102 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 00005106 7406                <1>     jz .badDrv
   320 00005108 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 0000510C 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 0000510E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 00005115 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 0000511A E943220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 0000511F 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 00005123 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 00005127 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 0000512A 8805(C1040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   332 00005130 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 00005133 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005139 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 0000513B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 00005142 B801000000          <1>     mov eax, errInvFnc
   340 00005147 E916220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 0000514C 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   344 00005153 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 00005156 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 0000515A 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 00005160 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005164 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005168 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 0000516B E81F1D0000          <1>     call getUserRegs
   351 00005170 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005174 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005178 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 0000517C 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 00005180 4889FE              <1>     mov rsi, rdi
   356 00005183 E872180000          <1>     call goDriver
   357 00005188 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 0000518E 0F84C0210000        <1>     jz extGoodExit
   359 00005194 E9B9000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005199 88D8                <1>     mov al, bl
   363 0000519B 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   364 000051A2 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 000051A6 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 000051A9 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 000051AF 53                  <1>     push rbx
   368 000051B0 E86E1D0000          <1>     call getCDS
   369 000051B5 8805(08070000)      <1>     mov byte [workingDrv], al
   370 000051BB 5B                  <1>     pop rbx
   371 000051BC 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 000051C2 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   373 000051C9 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 000051CD 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 000051D1 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 000051D4 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 000051D7 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000051DD 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000051E3 E812180000          <1>     call goDriver
   381 000051E8 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000051EE 7405                <1>     jz .getDrvOk
   383 000051F0 E95D000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000051F5 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000051F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000051F9 88D8                <1>     mov al, bl
   389 000051FB 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   390 00005202 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 00005206 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 00005209 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 0000520F 53                  <1>     push rbx
   394 00005210 E80E1D0000          <1>     call getCDS
   395 00005215 8805(08070000)      <1>     mov byte [workingDrv], al
   396 0000521B 5B                  <1>     pop rbx
   397 0000521C 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 00005222 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
   399 00005229 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 0000522D 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 00005231 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 00005234 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 00005237 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 0000523D 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 00005243 E8B2170000          <1>     call goDriver
   406 00005248 30C0                <1>     xor al, al
   407 0000524A 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005250 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005252 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 00005256 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 0000525C E838110000          <1>     call xlatHardError
   415 00005261 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005268 E9F5200000          <1>     jmp extErrExit
   417                              <1> 
    37                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 0000526D E8A5200000          <1>     call dosCrit1Enter
    15 00005272 B806000000          <1>     mov eax, 6
    16 00005277 39C3                <1>     cmp ebx, eax
    17 00005279 0F42D8              <1>     cmovb ebx, eax
    18 0000527C 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 0000527E 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005285 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 0000528C 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005293 31ED                <1>     xor ebp, ebp    
    24 00005295 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005297 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000529E 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 000052A1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 000052A4 7409                <1>     je .walk1
    30 000052A6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 000052A9 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 000052AF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 000052B7 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 000052BD 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 000052C0 744A                <1>     je .det0    ;Determine if this block is useful
    41 000052C2 31C9                <1>     xor ecx, ecx
    42 000052C4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 000052C7 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 000052CE 48C1E104            <1>     shl rcx, 4
    46 000052D2 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 000052D5 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 000052D8 7409                <1>     je .cons1
    49 000052DA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000052DD 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000052E3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000052EB 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000052ED 31C9                <1>     xor ecx, ecx
    56 000052EF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000052F2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000052F8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000052FB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000052FD 31D2                <1>     xor edx, edx
    61 000052FF 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00005302 48895608            <1>     mov qword [rsi + 8], rdx
    63 00005306 3C5A                <1>     cmp al, mcbMarkEnd
    64 00005308 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 0000530A 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 0000530C 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 0000530F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00005312 39D9                <1>     cmp ecx, ebx
    72 00005314 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 00005316 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 0000531D 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00005324 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00005327 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005329 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00005330 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00005332 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00005334 7209                <1>     jb .walk2
    83 00005336 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005338 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 0000533F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005342 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005344 31C9                <1>     xor ecx, ecx
    89 00005346 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005349 48C1E104            <1>     shl rcx, 4
    91 0000534D 4881C610000000      <1>     add rsi, mcb.program
    92 00005354 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005357 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 0000535C 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005363 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005365 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 0000536C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000536F 0F84A8000000        <1>     jz .allocFail
   102 00005375 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005377 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 0000537A 31C9                <1>     xor ecx, ecx
   105 0000537C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000537F 29D9                <1>     sub ecx, ebx
   107 00005381 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005387 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 0000538A 48C1E104            <1>     shl rcx, 4
   110 0000538E 4881C610000000      <1>     add rsi, mcb.program
   111 00005395 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005398 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 0000539A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000539D EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000539F 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 000053A6 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 000053AD 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 000053B5 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 000053B8 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 000053BA 31C9                <1>     xor ecx, ecx
   123 000053BC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 000053BF 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 000053C1 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 000053C3 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 000053C9 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 000053CC 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 000053CE C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 000053D1 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 000053D4 4881C710000000      <1>     add rdi, mcb.program
   133 000053DB 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000053E1 48C1E304            <1>     shl rbx, 4
   135 000053E5 4801DF              <1>     add rdi, rbx
   136 000053E8 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000053EA 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000053F2 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000053F5 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000053FC 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 00005400 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   144 00005407 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 0000540B 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 0000540E 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00005412 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00005417 E8051F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 0000541C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 0000541D 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 00005424 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 00005426 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005429 7409                <1>     je .af1
   157 0000542B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 0000542E 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00005434 31C9                <1>     xor ecx, ecx
   161 00005436 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005439 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005441 7505                <1>     jne .af2
   164 00005443 39D9                <1>     cmp ecx, ebx
   165 00005445 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005448 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 0000544B 7410                <1>     je .afExit
   169 0000544D 48C1E104            <1>     shl rcx, 4
   170 00005451 4881C610000000      <1>     add rsi, mcb.program
   171 00005458 4801CE              <1>     add rsi, rcx
   172 0000545B EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 0000545D B808000000          <1>     mov eax, errNoMem
   175 00005462 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   176 00005469 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 0000546C E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005471 E8A11E0000          <1>     call dosCrit1Enter
   183 00005476 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 0000547D 31C9                <1>     xor ecx, ecx
   185 0000547F 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005486 4889F7              <1>     mov rdi, rsi
   187 00005489 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 0000548C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005490 4881C610000000      <1>     add rsi, mcb.program
   190 00005497 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 0000549A 31C9                <1>     xor ecx, ecx
   193 0000549C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000549F 7409                <1>     je .valid
   195 000054A1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 000054A4 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 000054AA 4939F0              <1>     cmp r8, rsi
   199 000054AD 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 000054AF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 000054B2 0F84A5000000        <1>     je .blockError
   203 000054B8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 000054BB 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 000054BF 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 000054C6 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 000054C9 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 000054CB 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 000054D3 0F8484000000        <1>     je .blockError
   213 000054D9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000054E1 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000054E9 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000054EB 31C9                <1>     xor ecx, ecx
   218 000054ED 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000054F0 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000054F6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000054F9 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000054FB 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000054FD 31C9                <1>     xor ecx, ecx
   225 000054FF 48890E              <1>     mov qword [rsi], rcx
   226 00005502 48894E08            <1>     mov qword [rsi + 8], rcx
   227 00005506 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00005509 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 0000550C 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 0000550E 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 00005511 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00005514 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00005518 4881C110000000      <1>     add rcx, mcb.program
   236 0000551F 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005522 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 0000552A 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 0000552C 31C9                <1>     xor ecx, ecx
   241 0000552E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005531 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005537 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 0000553A 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 0000553C 8807                <1>     mov byte [rdi + mcb.marker], al
   247 0000553E 31C9                <1>     xor ecx, ecx
   248 00005540 48890E              <1>     mov qword [rsi], rcx
   249 00005543 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005547 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 0000554C E8D01D0000          <1>     call dosCrit1Exit
   253 00005551 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   254 00005558 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 0000555C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 0000555D C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005564 B809000000          <1>     mov eax, errMemAddr
   259 00005569 E8F41D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 0000556E E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005573 E8A91D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005578 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005579 E8991D0000          <1>     call dosCrit1Enter
   268 0000557E 85DB                <1>     test ebx, ebx
   269 00005580 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005586 B806000000          <1>     mov eax, 6
   271 0000558B 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 0000558D 0F42D8              <1>     cmovb ebx, eax
   273 00005590 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005597 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 0000559A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000559D 7409                <1>     je .ctn
   277 0000559F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 000055A2 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 000055A8 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 000055B0 74AB                <1>     je freeMemory.blockError
   284 000055B2 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 000055B5 31C9                <1>     xor ecx, ecx
   286 000055B7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 000055BA 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 000055BC 0F8791000000        <1>     ja .growth
   289 000055C2 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 000055C8 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 000055CA 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 000055D0 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 000055D3 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000055D9 48C1E304            <1>     shl rbx, 4
   296 000055DD 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000055E4 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000055E7 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000055E9 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000055EC 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000055EE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000055F6 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000055F9 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000055FB 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 00005601 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 00005604 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 00005608 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 0000560F 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005612 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 00005615 7409                <1>     je .shrinkAbsorb
   312 00005617 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 0000561A 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 00005620 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005628 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 0000562E 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005630 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005632 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005635 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005638 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 0000563B 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 0000563E 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005642 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005645 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005647 48890E              <1>     mov qword [rsi], rcx
   329 0000564A 48894E08            <1>     mov qword [rsi + 8], rcx
   330 0000564E E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005653 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005656 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 0000565C 31C9                <1>     xor ecx, ecx
   337 0000565E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005661 48C1E104            <1>     shl rcx, 4
   339 00005665 4889F7              <1>     mov rdi, rsi    
   340 00005668 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 0000566F 4801CE              <1>     add rsi, rcx
   342 00005672 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005675 7409                <1>     je .growthOK
   344 00005677 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 0000567A 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005680 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005688 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 0000568A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 0000568C 31C9                <1>     xor ecx, ecx
   353 0000568E 31D2                <1>     xor edx, edx
   354 00005690 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005693 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005699 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 0000569C 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 0000569E 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 000056A0 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 000056A3 775E                <1>     ja .notEnuffMem1
   361 000056A5 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 000056A7 81FA01000000        <1>     cmp edx, 1
   363 000056AD 744E                <1>     je .notEnuffMem2
   364 000056AF 31C9                <1>     xor ecx, ecx
   365 000056B1 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 000056B4 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 000056B8 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 000056BB 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 000056BE 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 000056C5 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 000056C9 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 000056CC 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 000056D0 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 000056D2 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 000056D4 7411                <1>     jz .exit
   378 000056D6 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000056DC 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000056DF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000056E7 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000056EC E8301C0000          <1>     call dosCrit1Exit
   384 000056F1 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   385 000056F8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000056FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000056FD FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000056FF EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005701 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005703 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005708 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   395 0000570F 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005712 E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005717 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 0000571C E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005721 84C0                <1>     test al, al
   402 00005723 741F                <1>     jz .get
   403 00005725 3C02                <1>     cmp al, 2
   404 00005727 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005729 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   407 00005730 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005734 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 0000573A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 0000573E E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005744 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   414 0000574B 31C0                <1>     xor eax, eax
   415 0000574D 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005753 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005756 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 0000575A E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 0000575F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005760 B801000000          <1>     mov eax, errInvFnc
   422 00005765 EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005767 50                  <1>     push rax
   428 00005768 53                  <1>     push rbx
   429 00005769 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005770 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005773 7408                <1>     je .ok1
   433 00005775 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005778 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 0000577A 5B                  <1>     pop rbx
   437 0000577B 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 0000577C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 0000577D 31C0                <1>     xor eax, eax
   441 0000577F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005782 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005786 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 0000578D 4801C3              <1>     add rbx, rax
   445 00005790 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005792 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005793 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005794 B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 00005796 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 0000579D E8C01B0000          <1>     call extErrExit ;Error thru the unified error handler
   455 000057A2 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000057A4 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 000057A6 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    38                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 000057A8 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 000057AA E9E0190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 000057AF 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 000057B5 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 000057B8 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 000057BD E9CD190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 000057C2 C605(14050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 000057C9 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 000057D0 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000057D2 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000057D3 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000057D5 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 000057DC 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000057E0 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000057E1 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000057E8 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000057EC 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000057F0 4C89C6              <1>     mov rsi, r8
    52 000057F3 4889D7              <1>     mov rdi, rdx
    53 000057F6 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000057FB F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000057FE 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005806 F605(14050000)FF    <1>     test byte [pspCopyFlg], -1
    57 0000580D 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 0000580F 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005817 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 0000581B 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 0000581F 31C9                <1>     xor ecx, ecx
    64 00005821 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005826 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 0000582A B0FF                <1>     mov al, -1
    67 0000582C F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 0000582E 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005830 E898F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005835 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005838 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 0000583C 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005840 67E31C              <1>     jecxz .copy
    77 00005843 FFC9                <1>     dec ecx
    78 00005845 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005846 0FB6D8              <1>     movzx ebx, al
    80 00005849 53                  <1>     push rbx
    81 0000584A E80DF5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 0000584F 58                  <1>     pop rax
    83 00005850 7508                <1>     jnz .badJFT
    84 00005852 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005853 E81BF5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005858 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 0000585A 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 0000585D EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 0000585F C605(14050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005866 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005867 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 0000586A 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 0000586E B022                <1>     mov al, 22h
    97 00005870 E8EC150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005875 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005878 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 0000587A B023                <1>     mov al, 23h
   101 0000587C E8E0150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005881 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005884 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005886 B024                <1>     mov al, 24h
   105 00005888 E8D4150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 0000588D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005890 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005892 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005897 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 0000589D C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 000058A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 000058A2 C605(05070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 000058A9 81FA06000000        <1>     cmp edx, 6
   120 000058AF 7305                <1>     jae .aboveMinimum
   121 000058B1 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 000058B6 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 000058BD 89D3                <1>     mov ebx, edx
   129 000058BF 50                  <1>     push rax    ;Preserve errorlevel across call
   130 000058C0 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 000058C1 E8B3FCFFFF          <1>     call reallocMemory
   132 000058C6 5B                  <1>     pop rbx
   133 000058C7 58                  <1>     pop rax
   134 000058C8 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 000058CA 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 000058CE EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 000058D0 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ; Step 0
   143                              <1> ;For now, just adjust error level in var
   144 000058D2 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   145 000058D4 8625(05070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   146 000058DA F605(8B040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   147 000058E1 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   148 000058E3 8625(8B040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   149 000058E9 C605(05070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   150                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   151 000058F0 8A25(05070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   152                              <1> .storeELvl:
   153 000058F6 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   154                              <1>     
   155                              <1> ; Step 1
   156 000058FD B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   157 000058FF CD2A                <1>     int 2Ah
   158 00005901 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   159 00005906 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   160 0000590D CD2F                <1>     int 2Fh
   161                              <1> ; Step 2
   162                              <1> .step1:
   163 0000590F 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   164 00005916 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   165 00005919 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   166 0000591D 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   167 00005920 0F84BC000000        <1>     je .exit
   168                              <1> ; Step 3
   169 00005926 E8B4CEFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   170                              <1> ; Step 3.5
   171 0000592B 803D(05070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   172 00005932 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   173                              <1> ; Step 4
   174 00005934 803D(05070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   175 0000593B 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   176 0000593D B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   177 00005942 CD2F                <1>     int 2Fh
   178                              <1> .skipAbortNetClose:
   179 00005944 FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   180 0000594A FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   181                              <1> 
   182 00005950 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   183 00005957 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   184 0000595B 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   185                              <1> .s4lp:
   186 0000595D 53                  <1>     push rbx
   187 0000595E 51                  <1>     push rcx
   188 0000595F E8B7D9FFFF          <1>     call closeFileHdl
   189 00005964 59                  <1>     pop rcx
   190 00005965 5B                  <1>     pop rbx
   191 00005966 FFC3                <1>     inc ebx ;Goto next handle to close
   192 00005968 39CB                <1>     cmp ebx, ecx
   193 0000596A 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   194                              <1> ;Step 5
   195                              <1> .step5:
   196 0000596C 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   197                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   198                              <1>     ; with the currentPSP signature and free them.
   199 00005973 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   200                              <1> .s5lp:  ;And walk the chain
   201                              <1> ;First verify the address in rsi is a valid mcb
   202 0000597A 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   203 0000597C 80F94D              <1>     cmp cl, mcbMarkCtn
   204 0000597F 7405                <1>     je .checkToFree
   205 00005981 80F95A              <1>     cmp cl, mcbMarkEnd
   206 00005984 7528                <1>     jne .step6  ;Something wrong so stop freeing
   207                              <1> .checkToFree:
   208 00005986 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   209 0000598A 750F                <1>     jne .noFree
   210 0000598C 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   211 00005990 53                  <1>     push rbx
   212 00005991 51                  <1>     push rcx
   213 00005992 56                  <1>     push rsi
   214 00005993 E8D9FAFFFF          <1>     call freeMemory ;Free this memory block
   215 00005998 5E                  <1>     pop rsi
   216 00005999 59                  <1>     pop rcx
   217 0000599A 5B                  <1>     pop rbx
   218                              <1>     ;If an error occured, the internal vars will be set.
   219                              <1> .noFree:
   220 0000599B 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   221 0000599E 740E                <1>     je .step6   ;Skip if we are
   222 000059A0 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   223 000059A3 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   224 000059A7 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   225 000059AC EBCC                <1>     jmp short .s5lp
   226                              <1> ;Step 6
   227                              <1> .step6:
   228                              <1> 
   229 000059AE FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   230                              <1> 
   231 000059B4 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   232 000059B8 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   233                              <1> ;Step 7
   234                              <1>     ;rbx points to current PSP, the old parent task
   235                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   236 000059BF 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   237 000059C3 B024                <1>     mov al, 24h
   238 000059C5 E8CC1B0000          <1>     call setIntVector
   239 000059CA 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   240 000059CE B023                <1>     mov al, 23h
   241 000059D0 E8C11B0000          <1>     call setIntVector
   242 000059D5 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   243 000059D9 B022                <1>     mov al, 22h
   244 000059DB 52                  <1>     push rdx
   245 000059DC E8B51B0000          <1>     call setIntVector
   246 000059E1 5A                  <1>     pop rdx
   247                              <1> ;Step 8
   248                              <1> .exit:
   249 000059E2 B0FF                <1>     mov al, -1  ;Flush all drive buffers
   250 000059E4 E82E190000          <1>     call dosCrit1Enter
   251 000059E9 E83FADFFFF          <1>     call flushAllBuffersForDrive
   252 000059EE E82E190000          <1>     call dosCrit1Exit
   253                              <1> 
   254 000059F3 FA                  <1>     cli
   255 000059F4 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   256 000059FB 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   257                              <1>     ;Make the parent register frame the current one
   258                              <1>     ;Make RSP point to user stack from parent entry to exec
   259 000059FF 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   260                              <1> 
   261 00005A03 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   262 00005A08 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   263                              <1> 
   264 00005A11 C605(95040000)00    <1>     mov byte [Int24Trans], 0    ;Clear this flag
   265 00005A18 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   266 00005A1F C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   267 00005A26 E8BE180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   268 00005A2B 48CF                <1>     iretq   ;and return to address that was in rdx
    39                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005A2D 55                  <1>     push rbp
   100 00005A2E 4889E5              <1>     mov rbp, rsp
   101 00005A31 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005A38 31C9                <1>     xor ecx, ecx
   104 00005A3A 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 00005A3E 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 00005A42 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 00005A46 B403                <1>     mov ah, execOverlay
   112 00005A48 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 00005A4F 7402                <1>     jz short .noMulti
   114 00005A51 B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 00005A53 38E0                <1>     cmp al, ah
   117 00005A55 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 00005A57 B801000000          <1>     mov eax, errInvFnc
   120 00005A5C C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 00005A63 4889EC              <1>     mov rsp, rbp
   123 00005A66 5D                  <1>     pop rbp
   124 00005A67 E9F6180000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 00005A6C 3C02                <1>     cmp al, execInvld
   128 00005A6E 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 00005A70 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 00005A74 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 00005A78 0FB6C0              <1>     movzx eax, al
   133 00005A7B 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 00005A7F 4889D7              <1>     mov rdi, rdx
   135 00005A82 E867150000          <1>     call strlen ;Get string length in cx
   136 00005A87 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 00005A8B 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 00005A8D 55                  <1>     push rbp    ;Preserve local frame ptr
   140 00005A8E E861D7FFFF          <1>     call openFileHdl
   141 00005A93 5D                  <1>     pop rbp
   142 00005A94 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005A96 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005A9A 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 00005A9D E890F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 00005AA2 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005AA6 F7C280000000        <1>     test edx, devCharDev
   149 00005AAC 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 00005AAE B002                <1>     mov al, errFnf
   151 00005AB0 E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005AB5 31C0                <1>     xor eax, eax
   154 00005AB7 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005ABB 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 00005ABF 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005AC7 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 00005ACD 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 00005AD1 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00005AD4 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 00005AD7 7514                <1>     jnz short .copyEnvironmentBlock
   162 00005AD9 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 00005AE0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 00005AE4 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 00005AE8 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 00005AEB 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 00005AED 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 00005AF0 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 00005AF5 31C0                <1>     xor eax, eax
   172 00005AF7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 00005AFA F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 00005AFC 7531                <1>     jnz short .invalidEnvironmentError
   176 00005AFE 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 00005B01 FFC9                <1>     dec ecx
   178 00005B03 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 00005B04 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 00005B06 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 00005B09 57                  <1>     push rdi     ;Save the length of the environment block
   183 00005B0A 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 00005B10 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 00005B14 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 00005B16 89FB                <1>     mov ebx, edi
   187 00005B18 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 00005B1B 55                  <1>     push rbp
   189 00005B1C E84CF7FFFF          <1>     call allocateMemory
   190 00005B21 5D                  <1>     pop rbp
   191 00005B22 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 00005B23 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 00005B25 B808000000          <1>     mov eax, errNoMem
   196 00005B2A E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 00005B2F B80A000000          <1>     mov eax, errBadEnv
   199 00005B34 E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005B39 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005B3C 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 00005B40 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 00005B44 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005B47 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005B49 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 00005B4E 66AB                <1>     stosw       ;Away you go!
   211 00005B50 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 00005B54 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005B58 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005B5A B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 00005B5F 488D15(EA190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005B66 E898050000          <1>     call .readDataFromHdl
   219 00005B6B 0F8271050000        <1>     jc .badFmtErr
   220 00005B71 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 00005B73 0F8469050000        <1>     jz .badFmtErr
   222 00005B79 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 00005B7E 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 00005B84 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005B89 740B                <1>     je .proceedEXE
   227 00005B8B 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 00005B90 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005B96 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005B97 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005B9A 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 00005B9D 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 00005B9F 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 00005BA1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005BA5 E85BD8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005BAA 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005BAB B918000000          <1>     mov ecx, imageFileHeader_size
   240 00005BB0 E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005BB5 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005BB7 0F8425050000        <1>     jz .badFmtErr
   243 00005BBD 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 00005BC2 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005BC8 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005BCE 0F850E050000        <1>     jne .badFmtErr
   248 00005BD4 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005BDA 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 00005BE0 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 00005BE4 66A90200            <1>     test ax, imageFileExecutable
   253 00005BE8 0F84F4040000        <1>     jz .badFmtErr
   254 00005BEE 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 00005BF2 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 00005BF8 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 00005BFE 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 00005C02 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 00005C04 0F84D8040000        <1>     jz .badFmtErr
   262 00005C0A 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 00005C0E B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 00005C13 E8EB040000          <1>     call .readDataFromHdl
   267 00005C18 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 00005C1A 0F84C2040000        <1>     jz .badFmtErr
   269 00005C20 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 00005C25 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 00005C2B 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 00005C32 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00005C3A 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00005C3C 8B1D(221A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 00005C42 488B05(321A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005C49 4885C0              <1>     test rax, rax
   280 00005C4C 750A                <1>     jnz .notDefaultStackAlloc
   281 00005C4E 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005C57 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005C58 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005C5A 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 00005C60 031D(0A1A0000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005C66 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005C69 81C311000000        <1>     add ebx, 11h
   291 00005C6F C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 00005C72 55                  <1>     push rbp
   293 00005C73 E8F5F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005C78 5D                  <1>     pop rbp
   295 00005C79 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00005C7F 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 00005C83 480500010000        <1>     add rax, psp_size
   298 00005C89 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00005C8D 813D(EE190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 00005C95 0000                <1>
   302 00005C97 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00005C9D EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00005C9F 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 00005CA3 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005CA6 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005CAA 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 00005CB0 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 00005CB3 31C9                <1>     xor ecx, ecx
   347 00005CB5 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005CB9 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005CBB E845D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 00005CC0 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 00005CC3 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005CC7 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005CCB 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 00005CCD 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 00005CD1 51                  <1>     push rcx    ;Save # of segments left on stack
   360 00005CD2 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 00005CD3 B928000000          <1>     mov ecx, imageSectionHdr_size
   362 00005CD8 488D15(5A1A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 00005CDF E81F040000          <1>     call .readDataFromHdl
   364 00005CE4 5F                  <1>     pop rdi
   365 00005CE5 59                  <1>     pop rcx
   366 00005CE6 85C0                <1>     test eax, eax
   367 00005CE8 0F84F4030000        <1>     jz .badFmtErr
   368 00005CEE 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 00005CF3 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 00005CF9 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 00005D00 8B15(6E1A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 00005D06 85D2                <1>     test edx, edx
   376 00005D08 744B                <1>     jz short .skipRawPtrMove
   377 00005D0A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 00005D0E 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 00005D10 51                  <1>     push rcx
   380 00005D11 57                  <1>     push rdi
   381 00005D12 E8EED6FFFF          <1>     call lseekHdl
   382 00005D17 5F                  <1>     pop rdi
   383 00005D18 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 00005D19 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 00005D21 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 00005D23 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 00005D27 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 00005D2F 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 00005D31 51                  <1>     push rcx
   396 00005D32 57                  <1>     push rdi
   397 00005D33 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00005D37 8B0D(661A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 00005D3D 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 00005D40 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 00005D44 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005D48 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005D4C 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00005D4F 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005D53 5F                  <1>     pop rdi
   406 00005D54 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005D55 51                  <1>     push rcx
   409 00005D56 31FF                <1>     xor edi, edi
   410 00005D58 8B3D(661A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00005D5E 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 00005D62 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005D66 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005D69 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005D6B 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 00005D72 31C9                <1>     xor ecx, ecx
   420 00005D74 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005D77 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005D7B 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 00005D82 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005D85 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005D88 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005D8A F705(7E1A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 00005D92 0000                <1>
   430 00005D94 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005D9A 59                  <1>     pop rcx
   435 00005D9B EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00005D9D 8B0D(621A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005DA3 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005DA6 57                  <1>     push rdi    ;Save section in memory locally
   440 00005DA7 E857030000          <1>     call .readDataFromHdl
   441 00005DAC 5F                  <1>     pop rdi
   442 00005DAD 59                  <1>     pop rcx
   443 00005DAE 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005DB4 3B05(621A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005DBA 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 00005DC0 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005DC3 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005DC4 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005DC7 8B0D(0A1A0000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 00005DCD FFC9                <1>     dec ecx ;Turn into a mask
   455 00005DCF 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 00005DD2 FFC1                <1>     inc ecx
   457 00005DD4 4829C1              <1>     sub rcx, rax
   458 00005DD7 31C0                <1>     xor eax, eax
   459 00005DD9 F3AA                <1>     rep stosb
   460 00005DDB 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 00005DDC FFC9                <1>     dec ecx ;Decrement our section counter
   463 00005DDE 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 00005DE0 51                  <1>     push rcx
   466 00005DE1 57                  <1>     push rdi
   467 00005DE2 30C0                <1>     xor al, al  ;Move rel start of file
   468 00005DE4 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 00005DE7 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 00005DEB 31C9                <1>     xor ecx, ecx
   471 00005DED E813D6FFFF          <1>     call lseekHdl
   472 00005DF2 5F                  <1>     pop rdi
   473 00005DF3 59                  <1>     pop rcx
   474 00005DF4 E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 00005DF9 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 00005DFD 483B15(021A0000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 00005E04 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 00005E0A 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 00005E0E 66A90100            <1>     test ax, imageFileRelocsStripped
   491 00005E12 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 00005E18 8B15(561A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 00005E1E 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 00005E24 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00005E2A 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00005E2D 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005E33 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005E37 31C0                <1>     xor eax, eax
   502 00005E39 E8C7D5FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00005E3E 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 00005E41 B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005E46 488D15(5A1A0000)    <1>     lea rdx, sectHdr
   507 00005E4D E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 00005E52 85C0                <1>     test eax, eax
   509 00005E54 0F8488020000        <1>     jz .badFmtErr
   510 00005E5A 39C8                <1>     cmp eax, ecx
   511 00005E5C 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 00005E62 8B35(5A1A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005E68 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005E6A 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005E6C 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 00005E70 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005E74 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005E7B 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005E83 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005E85 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005E89 482B05(021A0000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 00005E90 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005E94 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005E97 8B0D(5E1A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00005E9D 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00005E9F 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 00005EA1 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 00005EA2 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005EA4 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005EA8 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005EAB 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00005EAE 67E31E              <1>     jecxz .blockDone    
   547 00005EB1 81E908000000        <1>     sub ecx, 8
   548 00005EB7 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00005EBE D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 00005EC0 66AD                <1>     lodsw   ;Get the next page offset word
   552 00005EC2 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005EC7 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005ECB FFC9                <1>     dec ecx
   556 00005ECD 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 00005ECF 59                  <1>     pop rcx
   559 00005ED0 FFC9                <1>     dec ecx
   560 00005ED2 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 00005ED4 8B05(FA190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 00005EDA 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 00005EDE 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 00005EE2 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 00005EE8 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 00005EEE E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 00005EF3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 00005EFB 7450                <1>     je .comOverlay
   575 00005EFD BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 00005F02 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 00005F05 55                  <1>     push rbp
   578 00005F06 E862F3FFFF          <1>     call allocateMemory
   579 00005F0B 5D                  <1>     pop rbp
   580 00005F0C 734C                <1>     jnc .comallocOk
   581 00005F0E 3C08                <1>     cmp al, errNoMem
   582 00005F10 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 00005F16 53                  <1>     push rbx    ;Save new minimum size
   586 00005F17 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 00005F1C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005F20 31D2                <1>     xor edx, edx    ;Go to end of file
   589 00005F22 E8DED4FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 00005F27 5B                  <1>     pop rbx ;Get back max alloc size
   592 00005F28 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 00005F2A 29C2                <1>     sub edx, eax
   594 00005F2C 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 00005F32 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005F38 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005F3B 55                  <1>     push rbp
   598 00005F3C E82CF3FFFF          <1>     call allocateMemory
   599 00005F41 5D                  <1>     pop rbp
   600 00005F42 0F829F010000        <1>     jc .cleanAndFail
   601 00005F48 E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005F4D 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005F51 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005F54 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005F58 EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005F5A 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005F5E 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005F64 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005F68 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005F6D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005F71 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005F73 E88DD4FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005F78 50                  <1>     push rax    ;Save filesize
   621 00005F79 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005F7B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005F7F 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005F81 E87FD4FFFF          <1>     call lseekHdl
   625 00005F86 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005F87 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005F8B E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005F90 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005F94 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005F98 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005F9C 55                  <1>     push rbp
   634 00005F9D E879D3FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005FA2 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005FA3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005FAB 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005FB1 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005FB4 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005FB8 52                  <1>     push rdx
   644 00005FB9 55                  <1>     push rbp
   645 00005FBA E803F8FFFF          <1>     call createPSP
   646 00005FBF 5D                  <1>     pop rbp
   647 00005FC0 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00005FC1 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 00005FC5 4885DB              <1>     test rbx, rbx
   652 00005FC8 7404                <1>     jz short .skipEnvCopy
   653 00005FCA 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00005FCE 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   657 00005FD5 E83D130000          <1>     call dosCrit1Enter
   658 00005FDA E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00005FDF 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 00005FE6 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00005FED 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00005FF1 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 00005FF5 B925000000          <1>     mov ecx, fcb_size
   669 00005FFA 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00005FFE 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00006000 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00006002 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 00006006 B925000000          <1>     mov ecx, fcb_size
   674 0000600B 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 0000600F 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00006011 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 00006013 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 00006017 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 0000601E B980000000          <1>     mov ecx, 80h
   680 00006023 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 00006025 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 00006027 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 0000602A B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 0000602F 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00006031 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 00006035 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 00006037 E8530E0000          <1>     call getUserRegs    ;Need to get Int 22h address from stack
   692 0000603C 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00006040 4889470A            <1>     mov qword [rdi + psp.oldInt22h], rax    ;and save it in PSP
   694 00006044 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 00006047 B022                <1>     mov al, 22h
   696 00006049 E848150000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 0000604E 88D8                <1>     mov al, bl
   700 00006050 30DB                <1>     xor bl, bl
   701 00006052 E85C0E0000          <1>     call getCDSNotJoin
   702 00006057 7302                <1>     jnc .drive1Ok
   703 00006059 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 0000605B 88F8                <1>     mov al, bh
   706 0000605D 30FF                <1>     xor bh, bh
   707 0000605F E84F0E0000          <1>     call getCDSNotJoin
   708 00006064 7302                <1>     jnc .drive2Ok
   709 00006066 B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 00006068 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 0000606B 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 00006070 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 00006079 FF                  <1>
   717 0000607A 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 0000607D 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 00006081 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 00006083 56                  <1>     push rsi
   728 00006084 E8060E0000          <1>     call getUserRegs
   729 00006089 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 0000608D 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 0000608E FF15(9F000000)      <1>     call qword [launchTask]
   733 00006094 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 00006096 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 0000609A 742C                <1>     je .xfrProgram
   737 0000609C 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 000060A0 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 000060A2 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 000060A6 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 000060AA 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 000060AE 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 000060B1 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 000060B4 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 000060BB 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 000060BF 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 000060C2 5D                  <1>     pop rbp ;Point rsp to the return address
   749 000060C3 E98C120000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 000060C8 FA                  <1>     cli
   752 000060C9 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 000060CC C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 000060D3 FB                  <1>     sti
   755                              <1> 
   756 000060D4 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 000060D5 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 000060D8 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 000060DB 4989F9              <1>     mov r9, rdi
   760 000060DE 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000060E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 000060E2 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 000060E7 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 000060EC E830120000          <1>     call dosCrit1Exit
   772 000060F1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 000060F5 50                  <1>     push rax    ;Save error code
   774 000060F6 55                  <1>     push rbp
   775 000060F7 E81FD2FFFF          <1>     call closeFileHdl
   776 000060FC 5D                  <1>     pop rbp
   777 000060FD 58                  <1>     pop rax
   778 000060FE E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 00006103 52                  <1>     push rdx
   784 00006104 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 00006109 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 0000610D 55                  <1>     push rbp
   787 0000610E E846D2FFFF          <1>     call readFileHdl
   788 00006113 5D                  <1>     pop rbp
   789 00006114 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 00006119 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 0000611A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 0000611B 53                  <1>     push rbx
   794 0000611C 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 0000611E E8F4110000          <1>     call dosCrit1Enter
   796 00006123 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 00006128 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 00006129 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 0000612A 53                  <1>     push rbx
   802 0000612B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   803 00006132 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 00006137 E8E5110000          <1>     call dosCrit1Exit
   805 0000613C 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 0000613D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 0000613E 9C                  <1>     pushfq
   810 0000613F 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00006140 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 00006144 E80C000000          <1>     call .writeArenaHeaderOwner
   815 00006149 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 0000614D E803000000          <1>     call .writeArenaHeaderOwner
   817 00006152 58                  <1>     pop rax
   818 00006153 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 00006154 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 00006155 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006158 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 0000615A 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 00006160 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 00006164 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00006165 3C01                <1>     cmp al, 01
    12 00006167 740B                <1>     je .setSC
    13 00006169 7210                <1>     jb .getSC
    14 0000616B 3C03                <1>     cmp al, 03
    15 0000616D 7214                <1>     jb .getDev
    16 0000616F 741C                <1>     je .setDev
    17 00006171 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00006173 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00006174 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 0000617A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 0000617B 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006181 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00006183 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00006185 E8050D0000          <1>     call getUserRegs
    29 0000618A 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 0000618D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 0000618E 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006191 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00006194 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 00006196 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006199 31ED                <1>     xor ebp, ebp    ;Get country table
    57 0000619B B901000000          <1>     mov ecx, 1      ;Set country table
    58 000061A0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 000061A7 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 000061A9 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 000061AB 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 000061AD 488D354CA0FFFF      <1>     lea rsi, ctryTbl
    65 000061B4 B926000000          <1>     mov ecx, countryStruc_size
    66 000061B9 F3A4                <1>     rep movsb
    67 000061BB 0FB71D3AA0FFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 000061C2 E8C80C0000          <1>     call getUserRegs
    70 000061C7 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 000061CB 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 000061CD E982110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 000061D2 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 000061D4 E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000061D9 0F8283110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000061DF 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000061E1 75E8                <1>     jnz .exitNoCountryCode 
    81 000061E3 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000061E5 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000061E7 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000061E9 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000061EB 663B1D0AA0FFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000061F2 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 000061F4 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000061F6 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000061F8 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000061FD CD2F                <1>     int 2fh
   105 000061FF 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 00006201 751F                <1>     jne .errNotInstalled
   107 00006203 488D357F9FFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 0000620A B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 0000620F B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 00006214 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 00006216 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 00006219 CD2F                <1>     int 2fh
   113 0000621B 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000621D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000621F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 00006220 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 00006221 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 00006222 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 00006224 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 00006226 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 0000622C 7250                <1>     jb .invFuncExit
   143 0000622E 488D35549FFFFF      <1>     lea rsi, dosNLSPtr
   144 00006235 6681FAFFFF          <1>     cmp dx, -1
   145 0000623A 660F4415BA9FFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006242 6681FBFFFF          <1>     cmp bx, -1
   147 00006247 660F441DAF9FFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 0000624F 663B15A69FFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 00006256 7569                <1>     jne .nlsReq
   150 00006258 663B1D9F9FFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 0000625F 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 00006261 488D356D9FFFFF      <1>     lea rsi, charTableArray
   155 00006268 0FB72D649FFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 0000626F 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 00006271 7515                <1>     jne .tblFound
   159 00006273 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 0000627A FFCD                <1>     dec ebp
   161 0000627C 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 0000627E B801000000          <1>     mov eax, 1
   165 00006283 E9DA100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 00006288 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 00006289 3C01                <1>     cmp al, 1
   169 0000628B 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 0000628D B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 00006292 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 00006297 F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 00006299 E8F10B0000          <1>     call getUserRegs
   177 0000629E 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 000062A1 89D8                <1>     mov eax, ebx    
   181 000062A3 E9AC100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 000062A8 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 000062AE 31C0                <1>     xor eax, eax    ;Clear eax
   186 000062B0 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 000062B2 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 000062B4 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 000062B7 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 000062B9 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 000062BB 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 000062BF EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 000062C1 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 000062C4 B800140000          <1>     mov eax, 1400h  ;Install check!
   199 000062C9 CD2F                <1>     int 2fh
   200 000062CB 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 000062CD 75AF                <1>     jne .invFuncExit    
   202 000062CF B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 000062D4 CD2F                <1>     int 2fh
   204 000062D6 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 000062D8 0F8584100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000062DE 0FB705EC9EFFFF      <1>     movzx eax, word [defaultCP]
   210 000062E5 E96A100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000062EA 3C01                <1>     cmp al, 1
   220 000062EC 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000062EE E89C0B0000          <1>     call getUserRegs
   223 000062F3 0FB71D049FFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000062FA 0FB715D09EFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 00006301 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 00006304 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 00006307 E948100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 0000630C B801000000          <1>     mov eax, errInvFnc
   230 00006311 E94C100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 00006316 3C02                <1>     cmp al, 2
   233 00006318 75F2                <1>     jne .exitBadFunc
   234 0000631A 0FB715709EFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 00006321 B800140000          <1>     mov eax, 1400h
   236 00006326 CD2F                <1>     int 2Fh
   237 00006328 3CFF                <1>     cmp al, -1
   238 0000632A 75E0                <1>     jne .exitBadFunc
   239 0000632C 488D35569EFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 00006333 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 00006338 CD2F                <1>     int 2Fh
   242 0000633A 84C0                <1>     test al, al
   243 0000633C 0F8412100000        <1>     jz extGoodExit
   244 00006342 3C41                <1>     cmp al, errNLSAcDen
   245 00006344 0F8518100000        <1>     jne extErrExit
   246 0000634A 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 0000634C 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 00006353 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 0000635A C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 00006361 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 00006368 E902100000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 0000636D 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000636F 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00006371 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00006372 53                  <1>     push rbx
   259 00006373 488D1DAE9EFFFF      <1>     lea rbx, ucTbl
   260 0000637A 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 0000637C D7                  <1>     xlatb
   262 0000637D 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 0000637E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 0000637F 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006381 7510                <1>     jne .doReq
    10 00006383 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 00006384 488B05(E2040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume label ptr
    12 0000638B 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006392 58                  <1>     pop rax
    15                              <1> .doReq:
    16 00006393 E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 00006398 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006399 50                  <1>     push rax    ;Wanna preserve ax
    24 0000639A 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 0000639F 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 000063A2 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 000063A4 53                  <1>     push rbx
    28 000063A5 488D1DBD9CFFFF      <1>     lea rbx, hardXlatTbl
    29 000063AC D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 000063AD 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 000063AE 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 000063B5 58                  <1>     pop rax
    34 000063B6 56                  <1>     push rsi
    35 000063B7 488D35579DFFFF      <1>     lea rsi, extErrTbl
    36 000063BE E8F80F0000          <1>     call setErrorVars
    37 000063C3 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 000063C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 000063C5 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 000063C8 8825(67040000)      <1>     mov byte [Int24bitfld], ah
    48 000063CE 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 000063D5 56                  <1>     push rsi
    50 000063D6 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 000063DA E87C000000          <1>     call hardErrorCommon
    52 000063DF 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000063E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000063E1 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000063E3 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000063E6 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000063E8 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000063EB 57                  <1>     push rdi        ;Save the buffer pointer
    68 000063EC 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000063EF 81FF00000000        <1>     cmp edi, drvWPErr
    70 000063F5 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000063F7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000063FA 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 00006400 8A25(67040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 00006406 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 00006409 F6C301              <1>     test bl, dosBuffer
    79 0000640C 7505                <1>     jnz .df0
    80 0000640E 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 00006411 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 00006413 F6C302              <1>     test bl, fatBuffer
    84 00006416 750C                <1>     jnz .df1
    85 00006418 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 0000641B C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Invalidate the count!
    87 00006422 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 00006424 F6C304              <1>     test bl, dirBuffer
    90 00006427 7505                <1>     jnz .df2
    91 00006429 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 0000642C EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 0000642E 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006431 8025(FF060000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 00006438 0A25(FF060000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 0000643E 0A25(67040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 00006444 E802000000          <1>     call diskDevErrBitfield
   101 00006449 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 0000644A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 0000644B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 0000644E 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 00006455 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006459 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 0000645B E839FFFFFF          <1>     call xlatHardError
   117 00006460 50                  <1>     push rax
   118 00006461 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 00006466 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 00006468 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 0000646B 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 0000646C 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 00006473 7204                <1>     jb .noIntError  ;If not 0, enter
   153 00006475 B003                <1>     mov al, critFail    ;Else, return Fail always
   154 00006477 EB6F                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 00006479 488925(5F040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 00006480 66813D(39070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 00006488 FF                  <1>
   158 00006489 740C                <1>     je .notOpeningFile
   159 0000648B 57                  <1>     push rdi
   160 0000648C 488B3D(29070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 00006493 C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 00006496 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 00006497 FA                  <1>     cli ;Disable Interrupts
   165 00006498 FE05(07040000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   166 0000649E FE0D(08040000)      <1>     dec byte [inDOS]    ;Exiting DOS
   167 000064A4 488B25(7A040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   168 000064AB 31ED                <1>     xor ebp, ebp    ;Always zeroed
   169 000064AD CD24                <1>     int 24h ;Call critical error handler, sets interrupts on again
   170 000064AF 488B25(5F040000)    <1>     mov rsp, qword [xInt24hRSP] ;Return to the stack of the function that failed
   171 000064B6 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 000064BD FE05(08040000)      <1>     inc byte [inDOS]    ;Reenter DOS
   173 000064C3 488B2D(8D070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 000064CA FB                  <1>     sti ;Reenable Interrupts
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176                              <1> .checkResponse:
   177 000064CB 3C00                <1>     cmp al, critIgnore
   178 000064CD 743F                <1>     je .checkIgnore
   179 000064CF 3C01                <1>     cmp al, critRetry
   180 000064D1 7446                <1>     je .checkRetry
   181 000064D3 3C03                <1>     cmp al, critFail
   182 000064D5 754D                <1>     jne .abort   ;Must be abort
   183                              <1> .setFail:   ;Here is for fail
   184 000064D7 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   185 000064D9 FE05(69040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   186 000064DF F605(67040000)08    <1>     test byte [Int24bitfld], critFailOK
   187 000064E6 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   188                              <1> .exit:
   189 000064E8 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   190 000064EF 803D(39070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   191                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000064F6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000064F8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   192                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   193 000064F9 50                  <1>     push rax
   194 000064FA 57                  <1>     push rdi
   195 000064FB 0FB705(39070000)    <1>     movzx eax, word [currentNdx]
   196 00006502 488B3D(29070000)    <1>     mov rdi, qword [curHdlPtr]
   197 00006509 8807                <1>     mov byte [rdi], al
   198 0000650B 5F                  <1>     pop rdi
   199 0000650C 58                  <1>     pop rax
   200                              <1>     return
    13                              <2> %%_ret:
    14 0000650D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> .checkIgnore:
   202 0000650E F605(67040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   203 00006515 75D1                <1>     jnz .exit
   204 00006517 EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   205                              <1> .checkRetry:
   206 00006519 F605(67040000)10    <1>     test byte [Int24bitfld], critRetryOK
   207 00006520 75C6                <1>     jnz .exit   
   208 00006522 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   209                              <1> .abort:
   210                              <1> ;Prepare to abort. We abort from within!
   211                              <1> ;If a network request requests abort, translate to fail
   212 00006524 803D(01070000)FF    <1>     cmp byte [dosInvoke], -1
   213 0000652B 7509                <1>     jne .kill   ;If this is zero, local invokation
   214 0000652D C605(95040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   215 00006534 EBB2                <1>     jmp short .exit
   216                              <1> .kill:
   217 00006536 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   218 0000653D 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   219 0000653F C605(05070000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   220 00006546 E9A5F3FFFF          <1>     jmp terminateClean.altEP
   221                              <1> 
   222                              <1> ctrlBreakHdlr:
   223 0000654B B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   224 0000654D E8BBC1FFFF          <1>     call printCaretASCII
   225 00006552 E8E6C1FFFF          <1>     call printCRLF
   226                              <1>     ;Reset the console back to 0
   227 00006557 C605(93040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   228                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   229                              <1> .exceptEP:
   230                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   231                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   232                              <1> ;   interrupted DOS call is restarted
   233 0000655E FA                  <1> 	cli
   234 0000655F 488B25(7A040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   235 00006566 E87E0D0000          <1> 	call dosPopRegs ;Get user state back
   236 0000656B C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   237 00006572 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   238 00006579 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp
   239 00006580 F8                  <1>     clc
   240 00006581 CD23                <1>     int 23h ;Call critical error handler
   241 00006583 FA                  <1>     cli ;Clear interrupts again
   242 00006584 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   243 0000658B 9C                  <1>     pushfq  ;Get flags in rax
   244 0000658C 58                  <1>     pop rax 
   245 0000658D 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   246 00006594 750C                <1>     jne .checkCF
   247                              <1> .returnToDOS:
   248 00006596 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   249 0000659D E9ED0B0000          <1>     jmp functionDispatch    ;Goto int 21h
   250                              <1> .checkCF:
   251 000065A2 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   252 000065A9 A801                <1>     test al, 1  ;CF set?
   253 000065AB 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   254 000065AD B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   255 000065B2 C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   256 000065B9 E9D10B0000          <1>     jmp functionDispatch
   257                              <1> 
   258                              <1> ;CPU Exception handlers
   259                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   260                              <1> ; CTRL+C exit.
   261                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   262                              <1> ; system.
   263                              <1> ; Also halt if the application is it's own parent.
   264                              <1> ;An application should hook these interupts if they wish to not 
   265                              <1> ; CTRL+C exit, and instead return to DOS.
   266                              <1> i0:
   267 000065BE 31C0                <1>     xor eax, eax
   268 000065C0 E9AB000000          <1>     jmp cpu_2args
   269                              <1> i1:
   270 000065C5 B801000000          <1>     mov eax, 1
   271 000065CA E9A1000000          <1>     jmp cpu_2args
   272                              <1> i2:
   273 000065CF B802000000          <1>     mov eax, 2
   274 000065D4 E997000000          <1>     jmp cpu_2args
   275                              <1> i3:
   276 000065D9 B803000000          <1>     mov eax, 3
   277 000065DE E98D000000          <1>     jmp cpu_2args
   278                              <1> i4:
   279 000065E3 B804000000          <1>     mov eax, 4
   280 000065E8 E983000000          <1>     jmp cpu_2args
   281                              <1> i5:
   282 000065ED B805000000          <1>     mov eax, 5
   283 000065F2 EB7C                <1>     jmp short cpu_2args
   284                              <1> i6:
   285 000065F4 B806000000          <1>     mov eax, 6
   286 000065F9 EB75                <1>     jmp short cpu_2args
   287                              <1> i7:
   288 000065FB B807000000          <1>     mov eax, 7
   289 00006600 EB6E                <1>     jmp short cpu_2args
   290                              <1> i8:
   291 00006602 B808000000          <1>     mov eax, 8
   292 00006607 EB60                <1>     jmp short cpu_3args
   293                              <1> i9:
   294 00006609 B809000000          <1>     mov eax, 9
   295 0000660E EB60                <1>     jmp short cpu_2args
   296                              <1> i10:
   297 00006610 B80A000000          <1>     mov eax, 0Ah
   298 00006615 EB52                <1>     jmp short cpu_3args
   299                              <1> i11:
   300 00006617 B80B000000          <1>     mov eax, 0Bh
   301 0000661C EB4B                <1>     jmp short cpu_3args
   302                              <1> i12:
   303 0000661E B80C000000          <1>     mov eax, 0Ch
   304 00006623 EB44                <1>     jmp short cpu_3args
   305                              <1> i13:
   306 00006625 B80D000000          <1>     mov eax, 0Dh
   307 0000662A EB3D                <1>     jmp short cpu_3args
   308                              <1> i14:
   309 0000662C B80E000000          <1>     mov eax, 0Eh
   310 00006631 EB2F                <1>     jmp short cpu_4args
   311                              <1> i15:
   312 00006633 B80F000000          <1>     mov eax, 0Fh
   313 00006638 EB36                <1>     jmp short cpu_2args
   314                              <1> i16:
   315 0000663A B810000000          <1>     mov eax, 10h
   316 0000663F EB2F                <1>     jmp short cpu_2args
   317                              <1> i17:
   318 00006641 B811000000          <1>     mov eax, 11h
   319 00006646 EB21                <1>     jmp short cpu_3args
   320                              <1> i18:
   321 00006648 B812000000          <1>     mov eax, 12h
   322 0000664D EB21                <1>     jmp short cpu_2args
   323                              <1> i19:
   324 0000664F B813000000          <1>     mov eax, 13h
   325 00006654 EB1A                <1>     jmp short cpu_2args
   326                              <1> i20:
   327 00006656 B814000000          <1>     mov eax, 14h
   328 0000665B EB13                <1>     jmp short cpu_2args
   329                              <1> i21:
   330 0000665D B815000000          <1>     mov eax, 15h
   331                              <1> cpu_4args:
   332 00006662 B903000000          <1>     mov ecx, 3
   333 00006667 EB0C                <1>     jmp short cpu_exception
   334                              <1> cpu_3args:
   335 00006669 B902000000          <1>     mov ecx, 2
   336 0000666E EB05                <1>     jmp short cpu_exception
   337                              <1> cpu_2args:
   338 00006670 B901000000          <1>     mov ecx, 1
   339                              <1> cpu_exception:
   340                              <1> ;Enter with:
   341                              <1> ; eax = Exception number in binary
   342                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   343 00006675 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   344 0000667C BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   345 00006681 E81B020000          <1>     call .writeExceptionMessage
   346                              <1> 
   347 00006686 803D(08040000)01    <1>     cmp byte [inDOS], 1
   348 0000668D 7327                <1>     jae .introStop
   349 0000668F 3D02000000          <1>     cmp eax, 2
   350 00006694 7420                <1>     je .introStop
   351                              <1> 
   352 00006696 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   353 0000669D 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   354 000066A1 7413                <1>     je .introStop
   355                              <1> 
   356 000066A3 488D3568020000      <1>     lea rsi, .fatal1
   357 000066AA BBC1000000          <1>     mov ebx, fatal1L
   358 000066AF E8ED010000          <1>     call .writeExceptionMessage
   359 000066B4 EB18                <1>     jmp short .introEnd
   360                              <1> .introStop:
   361 000066B6 C605(921A0000)FF    <1>     mov byte [haltDOS], -1
   362 000066BD 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   363 000066C4 BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   364 000066C9 E8D3010000          <1>     call .writeExceptionMessage
   365                              <1> .introEnd:
   366 000066CE 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   367 000066D5 E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   368 000066DA 488D35(821A0000)    <1>     lea rsi, byteBuffer
   369 000066E1 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   370 000066E6 E8B6010000          <1>     call .writeExceptionMessage
   371                              <1> 
   372 000066EB 488D35E1020000      <1>     lea rsi, .fatal2
   373 000066F2 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   374 000066F7 E8A5010000          <1>     call .writeExceptionMessage
   375                              <1> 
   376 000066FC 80F901              <1>     cmp cl, 1
   377 000066FF 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   378                              <1> .cpurollprint:
   379 00006705 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   380 0000670C 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   381                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   382 00006710 B108                <1>     mov cl, 8    ;8 bytes
   383                              <1> .cpurollprint1:
   384 00006712 48C1C208            <1>     rol rdx, 8
   385 00006716 88D0                <1>     mov al, dl
   386 00006718 52                  <1>     push rdx
   387 00006719 E851010000          <1>     call .printbyte
   388 0000671E 5A                  <1>     pop rdx
   389 0000671F FEC9                <1>     dec cl
   390 00006721 75EF                <1>     jnz .cpurollprint1
   391                              <1> 
   392 00006723 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   393 00006728 488D35(821A0000)    <1>     lea rsi, byteBuffer
   394 0000672F E86D010000          <1>     call .writeExceptionMessage
   395                              <1> 
   396 00006734 BB03000000          <1>     mov ebx, crlfL
   397 00006739 488D35AF020000      <1>     lea rsi, .crlf
   398 00006740 E85C010000          <1>     call .writeExceptionMessage    
   399                              <1> 
   400 00006745 F605(921A0000)FF    <1>     test byte [haltDOS], -1
   401 0000674C 7534                <1>     jnz .fatalStop
   402 0000674E E839010000          <1>     call .readInputChar
   403                              <1>     ;Set error code to General Failure
   404 00006753 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   404 0000675B 00                  <1>
   405 0000675C C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   406 00006763 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   407 0000676A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   408 00006771 B8FF4C0000          <1>     mov eax, 4cFFh
   409 00006776 C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1
   410                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   411                              <1>     ; setup as above, chances are it was a CPU error
   412 0000677D E90D0A0000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   413                              <1> .fatalStop:
   414                              <1> ;This is called if inDOS > 1 or NMI occured
   415                              <1> ;Waits 1 minute then reboots
   416 00006782 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   417 00006787 CD2A                <1>     int 2Ah
   418 00006789 E8890B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   419 0000678E E8980B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   420 00006793 E87BC5FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   421 00006798 89D3                <1>     mov ebx, edx
   422 0000679A 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   423                              <1> .loopForNextSecond:
   424 000067A0 E820000000          <1>     call .getTimeDateCompare
   425 000067A5 74F9                <1>     je .loopForNextSecond
   426                              <1> .loopTillTimeElapsed:
   427 000067A7 E819000000          <1>     call .getTimeDateCompare
   428 000067AC 75F9                <1>     jne .loopTillTimeElapsed
   429                              <1>     ;Now we triple fault
   430 000067AE 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   431 000067B5 EB00                <1>     jmp short .toHell
   432                              <1> .toHell:
   433 000067B7 CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   434 000067B9 EBFC                <1>     jmp short .toHell
   435                              <1> .resetIDT:
   436 000067BB 0000                <1>     dw 0
   437 000067BD 0000000000000000    <1>     dq 0
   438                              <1> .getTimeDateCompare:
   439 000067C5 53                  <1>     push rbx
   440 000067C6 E848C5FFFF          <1>     call getDateAndTimeOld
   441 000067CB 5B                  <1>     pop rbx
   442 000067CC 81E21F000000        <1>     and edx, 1Fh
   443 000067D2 39DA                <1>     cmp edx, ebx
   444                              <1>     return
    13                              <2> %%_ret:
    14 000067D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> 
   446                              <1> .cpuextendederror:
   447 000067D5 5A                  <1>     pop rdx
   448 000067D6 48FFC9              <1>     dec rcx
   449 000067D9 51                  <1>     push rcx
   450 000067DA 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   451 000067E1 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   452 000067E3 86D6                <1>     xchg dl, dh   
   453                              <1> .pr1:
   454 000067E5 88D0                <1>     mov al, dl
   455 000067E7 52                  <1>     push rdx
   456 000067E8 E882000000          <1>     call .printbyte
   457 000067ED 5A                  <1>     pop rdx
   458 000067EE C1CA08              <1>     ror edx, 8    ;Print just dx for now
   459 000067F1 FEC9                <1>     dec cl
   460 000067F3 75F0                <1>     jnz .pr1
   461                              <1> 
   462 000067F5 488D35(821A0000)    <1>     lea rsi, byteBuffer
   463 000067FC BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   464 00006801 E89B000000          <1>     call .writeExceptionMessage
   465                              <1> 
   466 00006806 488D35C6010000      <1>     lea rsi, .fatal2
   467 0000680D BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   468 00006812 E88A000000          <1>     call .writeExceptionMessage
   469                              <1> 
   470 00006817 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   471 00006818 48FFC9              <1>     dec rcx
   472 0000681B 0F84E4FEFFFF        <1>     jz .cpurollprint
   473                              <1> 
   474 00006821 B108                <1>     mov cl, 8   ;16 nybbles
   475 00006823 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   476 00006826 488D3D(821A0000)    <1>     lea rdi, byteBuffer
   477                              <1> .pr2:
   478 0000682D 48C1C208            <1>     rol rdx, 8    ;Print rdx
   479 00006831 88D0                <1>     mov al, dl
   480 00006833 52                  <1>     push rdx
   481 00006834 E836000000          <1>     call .printbyte
   482 00006839 5A                  <1>     pop rdx
   483 0000683A FEC9                <1>     dec cl
   484 0000683C 75EF                <1>     jnz .pr2
   485                              <1> 
   486 0000683E 488D35(821A0000)    <1>     lea rsi, byteBuffer
   487 00006845 BB10000000          <1>     mov ebx, 16
   488 0000684A E852000000          <1>     call .writeExceptionMessage
   489                              <1> 
   490 0000684F 488D357D010000      <1>     lea rsi, .fatal2
   491 00006856 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   492 0000685B E841000000          <1>     call .writeExceptionMessage
   493                              <1> 
   494 00006860 E9A0FEFFFF          <1>     jmp .cpurollprint
   495                              <1> 
   496                              <1> 
   497                              <1> .char:    ;Print a single character
   498 00006865 488D1D6D000000      <1>     lea rbx, .ascii
   499 0000686C D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   500 0000686D AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   501 0000686E C3                  <1>     ret
   502                              <1> .printbyte:
   503 0000686F 88C2                <1>     mov dl, al            ;save byte in dl
   504 00006871 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   505 00006875 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   506 0000687A 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   507 0000687E E8E2FFFFFF          <1>     call .char
   508 00006883 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   509 00006886 E8DAFFFFFF          <1>     call .char
   510 0000688B C3                  <1>     ret        
   511                              <1> 
   512                              <1> 
   513                              <1> .readInputChar:
   514 0000688C C605(EC040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   515 00006893 488D35(1B050000)    <1>     lea rsi, singleIObyt
   516 0000689A BB01000000          <1>     mov ebx, 1  ;Read one char
   517 0000689F EB07                <1>     jmp short .ioException
   518                              <1> .writeExceptionMessage:
   519                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   520 000068A1 C605(EC040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   521                              <1> .ioException:
   522 000068A8 C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   523 000068AF 66C705(ED040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   523 000068B7 00                  <1>
   524 000068B8 891D(00050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   525 000068BE 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   526 000068C5 488935(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   527 000068CC 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   528 000068D3 E822010000          <1>     call goDriver
   529                              <1>     return
    13                              <2> %%_ret:
    14 000068D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> 
   532                              <1> ;Error messages
   533 000068D9 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   533 000068E2 39414243444546      <1>
   534 000068E9 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   534 000068F2 20205343502F444F53- <1>
   534 000068FB 20455843455054494F- <1>
   534 00006904 4E2044455445435445- <1>
   534 0000690D 44210D0A0A          <1>
   535                              <1> fatalt0L   equ $ - .fatalt0
   536                              <1> 
   537                              <1> .fatal1:   
   538 00006912 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   538 0000691B 656E7469616C6C7920- <1>
   538 00006924 666174616C20657272- <1>
   538 0000692D 6F7220686173206265- <1>
   538 00006936 656E20646574656374- <1>
   538 0000693F 65640D0A            <1>
   539 00006943 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   539 0000694C 68652063757272656E- <1>
   539 00006955 74206170706C696361- <1>
   539 0000695E 74696F6E206D757374- <1>
   539 00006967 206265207465726D69- <1>
   539 00006970 6E617465642E0D0A0A  <1>
   540 00006979 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   540 00006982 20616E79206B657920- <1>
   540 0000698B 746F20636F6E74696E- <1>
   540 00006994 7565206F7220435452- <1>
   540 0000699D 4C2B414C542B44454C- <1>
   540 000069A6 20746F207265737461- <1>
   540 000069AF 727420746865206D61- <1>
   540 000069B8 6368696E652E        <1>
   541 000069BE 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   541 000069C7 5354454D204552524F- <1>
   541 000069D0 523A20              <1>
   542                              <1> fatal1L equ $ - .fatal1
   543                              <1> 
   544 000069D3 203A20              <1> .fatal2:   db " : "
   545                              <1> fatal2L    equ $ - .fatal2
   546                              <1> 
   547                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   548 000069D6 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   548 000069DF 4F532053595354454D- <1>
   548 000069E8 2053544F503A20      <1>
   549                              <1> fatalHaltL equ $ - .fatalHalt
   550 000069EF 0D0A0A              <1> .crlf:  db CR,LF,LF
   551                              <1> crlfL  equ $ - .crlf
    42                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 000069F2 B003                <1>     mov al, critFail
     7 000069F4 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 000069F6 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 000069FA E82C090000          <1>     call dosCrit2Enter
    16 000069FF FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006A02 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006A05 E82B090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006A0B 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006A11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006A12 84C0                <1>     test al, al
    33 00006A14 723F                <1>     jc .diskError
    34 00006A16 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006A1C 7337                <1>     jae .diskError
    36 00006A1E 50                  <1>     push rax
    37 00006A1F FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006A21 E8FD040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006A26 58                  <1>     pop rax
    40 00006A27 7235                <1>     jc .error
    41 00006A29 8805(08070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006A2F 488B2D(11070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006A36 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006A3E 750A                <1>     jnz .netError
    45 00006A40 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006A44 E8B1030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006A49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006A4A 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006A52 00                  <1>
    50 00006A53 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006A55 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006A5D 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006A5E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006A65 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006A6C C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006A73 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006A74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006A75 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006A7B FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006A7C FC                  <1>     cld ;Set string ops in the right direction
    65 00006A7D E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006A82 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 00006A84 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006A8B 56                  <1>     push rsi
    69 00006A8C 50                  <1>     push rax
    70 00006A8D 488D35(1D050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006A94 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006A96 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006A99 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006A9F F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006AA0 B800030000          <1>     mov eax, 0300h  
    79 00006AA5 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006AA7 58                  <1>     pop rax
    82 00006AA8 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006AA9 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006AAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006AAC FA                  <1>     cli
    93 00006AAD 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006AB4 488D25(E0190000)    <1>     lea rsp, DiskStakTop
    95 00006ABB 55                  <1>     push rbp
    96 00006ABC 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006ABD E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006AC2 7252                <1>     jc absDiskExit
    99 00006AC4 E844020000          <1>     call primReqWriteSetup
   100 00006AC9 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006ACB FA                  <1>     cli 
   107 00006ACC 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006AD3 488D25(E0190000)    <1>     lea rsp, DiskStakTop
   109 00006ADA 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006ADB 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006ADC E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006AE1 7233                <1>     jc absDiskExit
   113 00006AE3 E830020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006AE8 E859000000          <1>     call absDiskDriverCall
   118 00006AED 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006AEF 8A05(C3040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006AF5 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006AF7 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006AF9 741A                <1>     je .absExit
   125 00006AFB B440                <1>     mov ah, 40h ;Seek error
   126 00006AFD 3C06                <1>     cmp al, 06h
   127 00006AFF 7414                <1>     je .absExit
   128 00006B01 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006B03 3C04                <1>     cmp al, 04h
   130 00006B05 740E                <1>     je .absExit
   131 00006B07 B404                <1>     mov ah, 04h ;Sector not found
   132 00006B09 3C08                <1>     cmp al, 08h
   133 00006B0B 7408                <1>     je .absExit
   134 00006B0D 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006B0F 84C0                <1>     test al, al
   136 00006B11 7402                <1>     je .absExit
   137 00006B13 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006B15 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006B16 5B                  <1>     pop rbx
   142 00006B17 5D                  <1>     pop rbp
   143 00006B18 FA                  <1>     cli
   144 00006B19 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]
   145 00006B20 FB                  <1>     sti ;Reenable interrupts
   146 00006B21 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006B28 9C                  <1>     pushfq
   148 00006B29 5A                  <1>     pop rdx ;Get the current flags
   149 00006B2A 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006B2E 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006B33 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006B35 FA                  <1>     cli
   154 00006B36 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006B37 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006B38 9C                  <1>     pushfq
   157 00006B39 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006B3B 89CA                <1>     mov edx, ecx
   159 00006B3D FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006B43 9D                  <1>     popfq
   161 00006B44 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006B45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006B46 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006B47 8B0D(D6040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006B4D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006B51 E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 00006B56 5E                  <1>     pop rsi
   177 00006B57 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006B5D 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006B5F 0FB705(C3040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 00006B66 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006B6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006B6B 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006B6F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006B72 8805(08070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006B78 E87D020000          <1>     call setWorkingDPB
   192 00006B7D 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006B7E E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006B83 5F                  <1>     pop rdi
   195 00006B84 7235                <1>     jc .exitBad ;Preserve CF
   196 00006B86 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006B88 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006B8F 31C0                <1>     xor eax, eax
   200 00006B91 FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006B93 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006B97 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006B9E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006BA4 7509                <1>     jnz .next
   207 00006BA6 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006BAA 7503                <1>     jne .next   ;Else, goto next
   209 00006BAC 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006BAF 4881C75F000000      <1>     add rdi, cds_size
   212 00006BB6 FFC9                <1>     dec ecx
   213 00006BB8 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006BBA F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224 00006BBC E8A0010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   225                              <1> ;Return in rbx the req hdr address
   226 00006BC1 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   227 00006BC5 E830FEFFFF          <1>     call goDriver   ;Request!
   228 00006BCA 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   229 00006BCE F7C700800000        <1>     test edi, drvErrStatus
   230 00006BD4 0F85C4000000        <1>     jnz .diskDrvCritErr
   231 00006BDA 0FB605(08070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   232 00006BE1 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   233 00006BE4 3805(E9190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   234 00006BEA 750C                <1>     jne .notForce
   235                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   236                              <1>     ; not changed but the new volume needs to be updated. 
   237                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   238                              <1>     ; new label.  
   239 00006BEC C605(E9190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   240 00006BF3 E95E000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   241                              <1> .notForce:
   242 00006BF8 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   243 00006BFB 7854                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   244                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006BFD 75BC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   245                              <1>     ;Here we check for any dirty buffers
   246                              <1>     ;If dirty buffer found, dont get new DPB
   247 00006BFF 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   248                              <1> .checkBuffer:
   249 00006C06 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   250 00006C09 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   251 00006C0B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   252 00006C0F 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   253 00006C11 F8                  <1>     clc 
   254                              <1>     return
    13                              <2> %%_ret:
    14 00006C12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .gotoNextBuffer:
   256 00006C13 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   257 00006C16 4881FFFFFFFFFF      <1>     cmp rdi, -1
   258 00006C1D 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   259                              <1>     ;If we get here, we found no dirty buffers for our drive
   260                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   261 00006C1F C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset number of free to unknown
   262 00006C26 E8B59AFFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   263                              <1> .dirtyLoop:
   264 00006C2B 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   265 00006C2F 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   266 00006C32 7515                <1>     jne .skipDirtyCheck
   267 00006C34 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   268 00006C38 0F8490000000        <1>     je .dirtyBufferError
   269                              <1>     ;Set reference bit and drive to free
   270 00006C3E 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   271 00006C44 E8B19AFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   272                              <1> .skipDirtyCheck:
   273 00006C49 E8BA9AFFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   274 00006C4E 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   275                              <1> .exit:
   276                              <1>     return
    13                              <2> %%_ret:
    14 00006C50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   278 00006C51 E80C9CFFFF          <1>     call freeBuffersForDrive    ;Free all the buffers with the DPB in rbp
   279                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   280 00006C56 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   281                              <1>     ;Get a buffer to read BPB into in rdi
   282 00006C5A 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   283 00006C5C E8869DFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   284 00006C61 723A                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   285 00006C63 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   286                              <1> .repeatEP:
   287 00006C67 E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   288 00006C6C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   289 00006C70 E885FDFFFF          <1>     call goDriver   ;Request!
   290 00006C75 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   291 00006C79 F7C700800000        <1>     test edi, drvErrStatus
   292 00006C7F 751D                <1>     jnz .diskDrvCritErr
   293                              <1>     ;Now rebuild the dpb fields for this drive
   294 00006C81 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   295 00006C85 53                  <1>     push rbx
   296 00006C86 E82C0A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   297 00006C8B 5B                  <1>     pop rbx
   298                              <1>     ;Adjust the buffer header information
   299 00006C8C 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   300 00006C8F 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   301 00006C92 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   302 00006C95 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   303 00006C98 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   304 00006C9A 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   305                              <1> .exitBad:
   306                              <1>     return
    13                              <2> %%_ret:
    14 00006C9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> .diskDrvCritErr:
   308                              <1> ;Critical Errors fall through here
   309                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   310 00006C9E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset freecluster count
   311 00006CA5 48892D(8D070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   312 00006CAC B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   313 00006CAE 8825(67040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   314 00006CB4 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   315 00006CB8 E88EF7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   316 00006CBD 488B2D(8D070000)    <1>     mov rbp, qword [tmpDPBPtr]
   317 00006CC4 3C01                <1>     cmp al, critRetry
   318 00006CC6 0F849FFEFFFF        <1>     je getDiskDPB
   319                              <1> .errorExitBad:
   320 00006CCC F9                  <1>     stc     ;Set error flag to indicate fail
   321                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00006CCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .dirtyBufferError:
   324 00006CCE 55                  <1>     push rbp
   325 00006CCF 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   326 00006CD3 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   327 00006CD9 5D                  <1>     pop rbp
   328 00006CDA 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   329                              <1>     ;rbp points to the dpb still
   330 00006CDC 57                  <1>     push rdi
   331 00006CDD 488B3D(CF040000)    <1>     mov rdi, qword [primReqHdr + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   332 00006CE4 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   333 00006CEB 5F                  <1>     pop rdi ;Get back the buffer pointer
   334 00006CEC C605(67040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   335 00006CF3 C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   336 00006CFA B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   337 00006CFF E8DDF6FFFF          <1>     call diskDevErr
   338 00006D04 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   339 00006D06 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   340 00006D08 E95EFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;           Primitive Driver Requests
   343                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   344                              <1> ;First are Disk requests, then Char device requests
   345                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   346                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   347                              <1> 
   348                              <1> primReqWriteSetup:
   349 00006D0D 50                  <1>     push rax
   350 00006D0E B408                <1>     mov ah, drvWRITE    ;Command code
   351 00006D10 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   352 00006D16 EB03                <1>     jmp short primReqRWCommon
   353                              <1> primReqReadSetup:
   354 00006D18 50                  <1>     push rax
   355 00006D19 B404                <1>     mov ah, drvREAD
   356                              <1> primReqRWCommon:
   357                              <1> ;Sets up the IO request packet with:
   358                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   359                              <1> ; rbx = Data storage buffer ptr
   360                              <1> ; ecx = Number of sectors to transfer
   361                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   362                              <1> ; ~~~~ Set by entry function ~~~~ 
   363                              <1> ; ah = Command code
   364                              <1> ; All regs preserved EXCEPT rbx.
   365                              <1> ; Return: rbx = Transfer Address
   366 00006D1B 48891D(CE040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   367 00006D22 890D(D6040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   368 00006D28 C605(C0040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   369 00006D2F 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   370 00006D34 8905(C1040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   371 00006D3A 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   372 00006D3D 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   373                              <1>     ;Disk operations only here!
   374 00006D3F 488915(DA040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   375 00006D46 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 00006D49 8805(CD040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   377 00006D4F 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   378 00006D52 8805(C1040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   379                              <1> primReqCommonExit:
   380                              <1> ;Returns in rbx the primary request header as these functions
   381                              <1> ; setup the request in the primary request header space
   382 00006D58 58                  <1>     pop rax
   383 00006D59 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   384                              <1>     return
    13                              <2> %%_ret:
    14 00006D60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> primReqMedCheckSetup:
   387                              <1> ;Prepare the diskIO packet for mediacheck
   388                              <1> ;rbp has DPB pointer for device to check media on
   389 00006D61 50                  <1>     push rax
   390 00006D62 C605(C0040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   391 00006D69 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   392 00006D6C 8805(CD040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   393 00006D72 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   394 00006D75 8805(C1040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   395 00006D7B C605(C2040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   396 00006D82 66C705(C3040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   396 00006D8A 00                  <1>
   397 00006D8B EBCB                <1>     jmp short primReqCommonExit
   398                              <1> 
   399                              <1> primReqGetBPBSetup:
   400                              <1> ;rbp has DPB pointer for device
   401                              <1> ;rdi has sector buffer header pointer for transfer
   402 00006D8D 50                  <1>     push rax
   403 00006D8E 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   404 00006D92 48893D(CE040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   405 00006D99 C605(C0040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   406 00006DA0 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   407 00006DA3 8805(CD040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   408 00006DA9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   409 00006DAC 8805(C1040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   410 00006DB2 C605(C2040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   411 00006DB9 66C705(C3040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   411 00006DC1 00                  <1>
   412 00006DC2 EB94                <1>     jmp short primReqCommonExit
   413                              <1> 
   414                              <1> primReqOpenSetup:
   415                              <1> ;al = unit number if a disk device. Undefined otherwise
   416 00006DC4 50                  <1>     push rax
   417 00006DC5 B40D                <1>     mov ah, drvOPEN
   418 00006DC7 EB03                <1>     jmp short primReqOCcommon
   419                              <1> primReqCloseSetup:
   420                              <1> ;al = unit number if a disk device. Undefined otherwise
   421 00006DC9 50                  <1>     push rax
   422 00006DCA B40E                <1>     mov ah, drvCLOSE
   423                              <1> primReqOCcommon:
   424 00006DCC C605(C0040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   425 00006DD3 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   426 00006DD4 8905(C1040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   427                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   428 00006DDA E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   429                              <1> 
   430                              <1> secdReqCharIOReq:
   431                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   432                              <1> ;Input:
   433                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   434                              <1> ; ecx = Length of buffer
   435                              <1> ; rdi = Buffer pointer
   436                              <1> ;Output: 
   437                              <1> ; rbx = Transfer Address 
   438 00006DDF 488D1D(96040000)    <1>     lea rbx, secdReqHdr
   439 00006DE6 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   440 00006DE9 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   441 00006DEC 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   442 00006DF2 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   443 00006DF6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   444                              <1>     return
    13                              <2> %%_ret:
    14 00006DF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> ;If the device which will process this request is a disk device
   446                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   447                              <1> ;Then we will read the appropriate byte from that buffer to the 
   448                              <1> ; singleIOByt buffer.
   449                              <1> ;Such a request will require additional setup with the following fields:
   450                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    43                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006DFA 48892D(09070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006E01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006E02 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]
    21 00006E09 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006E10 7409                <1>     je .net
    23 00006E12 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006E18 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006E1B F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006E1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006E1D E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006E22 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006E24 B80C110000          <1>     mov eax, 110Ch 
    43 00006E29 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006E2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006E2C C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006E33 E8DF040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00006E38 E82EFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006E3D 721C                <1>     jc .exit
    51 00006E3F E8419DFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00006E44 7215                <1>     jc .exit
    53 00006E46 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 00006E49 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006E4B 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006E4E 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006E51 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006E53 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00006E57 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006E5A F8                  <1>     clc
    61                              <1> .exit:
    62 00006E5B E8C1040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006E60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006E61 50                  <1>     push rax    ;Preserve rax
    69 00006E62 FA                  <1>     cli ;Halt interrupts
    70 00006E63 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006E6A 0FB6C0              <1>     movzx eax, al
    72 00006E6D 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006E71 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 00006E78 31DB                <1>     xor ebx, ebx
    75 00006E7A 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006E7D 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006E81 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00006E85 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 00006E89 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 00006E8C FB                  <1>     sti
    81 00006E8D 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 00006E8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 00006E8F 488B35(7A040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00006E96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00006E97 488B35(43000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 00006E9E 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00006EA5 740A                <1>     je .exitBad
    96 00006EA7 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 00006EA9 7407                <1>     je .exit    ;Drive found
    98 00006EAB 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 00006EAF EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 00006EB1 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 00006EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00006EB3 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 00006EB8 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 00006EBA 56                  <1>     push rsi
   114 00006EBB 488B35(11070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 00006EC2 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 00006EC8 5E                  <1>     pop rsi
   117 00006EC9 7401                <1>     jz .exit
   118 00006ECB F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 00006ECC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 00006ECD 50                  <1>     push rax
   132 00006ECE 2C40                <1>     sub al, "A"-1
   133 00006ED0 3A05(77000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 00006ED6 488B3D(11070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 00006EDD 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 00006EE3 58                  <1>     pop rax
   137 00006EE4 723C                <1>     jb .exit    ;Exit with CF=CY
   138 00006EE6 50                  <1>     push rax
   139 00006EE7 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006EEC 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006EEE 58                  <1>     pop rax
   142 00006EEF 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 00006EF5 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006EFC 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   145 00006F04 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   146 00006F0B 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   147                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   148 00006F11 50                  <1>     push rax
   149 00006F12 56                  <1>     push rsi
   150 00006F13 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   151 00006F15 E87DFFFFFF          <1>     call walkDPBchain
   152 00006F1A 7204                <1>     jb .skipSettingDPB
   153 00006F1C 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   154                              <1> .skipSettingDPB:
   155 00006F20 5E                  <1>     pop rsi
   156 00006F21 58                  <1>     pop rax
   157                              <1> .exit:
   158                              <1>     return
    13                              <2> %%_ret:
    14 00006F22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> 
   160                              <1> getCDS:     ;Int 2Fh AX=1219h
   161                              <1> ;Gets the device DPB and saves it in the DOS variable
   162                              <1> ;This can be called to get CDS for network drives too!
   163                              <1> ;Input: al = 1 based drive number
   164                              <1> ;Sets workingCDS var with the CDS for the device. 
   165                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   166 00006F23 84C0                <1>     test al, al
   167 00006F25 7508                <1>     jnz .skip
   168 00006F27 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   169 00006F2D FEC0                <1>     inc al
   170                              <1> .skip:
   171 00006F2F FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   172 00006F31 56                  <1>     push rsi
   173 00006F32 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   174 00006F39 F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   175 00006F40 7423                <1>     jz .localCall
   176                              <1>     ;Invokation via 21/5D00
   177 00006F42 50                  <1>     push rax
   178 00006F43 57                  <1>     push rdi
   179 00006F44 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   180 00006F4B 48893D(11070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   181 00006F52 0441                <1>     add al, "A" ;Convert to a drive letter
   182 00006F54 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   183 00006F59 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   184 00006F5F 5F                  <1>     pop rdi
   185 00006F60 58                  <1>     pop rax
   186 00006F61 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   187 00006F63 EB17                <1>     jmp short .exitOk   ;All oki
   188                              <1> .localCall:
   189 00006F65 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   190 00006F6A 7208                <1>     jc .exitBad
   191 00006F6C 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   192 00006F72 7508                <1>     jnz .exitOk ;Exit with flag cleared
   193                              <1>     ;Else Return to unknown error locus
   194                              <1> .exitBad:
   195 00006F74 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   196                              <1> .exitBad1:
   197 00006F7B F9                  <1>     stc
   198                              <1> .exitOk:
   199 00006F7C 5E                  <1>     pop rsi
   200                              <1>     return
    13                              <2> %%_ret:
    14 00006F7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   203                              <1>     ;Gets the CDS for the current drive in al
   204                              <1>     ;Input: al = Drive number, 0 = A ...
   205                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   206                              <1>     ;        CF=CY => al not valid
   207 00006F7E 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   208 00006F84 7202                <1>     jb .ctn
   209 00006F86 F9                  <1>     stc 
   210                              <1>     return
    13                              <2> %%_ret:
    14 00006F87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .ctn:
   212 00006F88 50                  <1>     push rax
   213 00006F89 52                  <1>     push rdx
   214 00006F8A 0FB6C0              <1>     movzx eax, al
   215 00006F8D 48BE5F000000000000- <1>     mov rsi, cds_size
   215 00006F96 00                  <1>
   216 00006F97 31D2                <1>     xor edx, edx
   217 00006F99 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   218 00006F9B 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   219 00006FA2 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   220 00006FA5 488935(11070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   221 00006FAC 5A                  <1>     pop rdx
   222 00006FAD 58                  <1>     pop rax
   223 00006FAE F8                  <1>     clc
   224                              <1>     return
    13                              <2> %%_ret:
    14 00006FAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> 
   226                              <1> 
   227                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   228                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   229                              <1> ;Input: AL = Char to normalise.
   230                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   231                              <1> ;If path separator, set ZF=ZE
   232 00006FB0 3C5C                <1>     cmp al, "\"
   233 00006FB2 7406                <1>     je .exit
   234 00006FB4 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   235 00006FB6 7502                <1>     jne .exit
   236 00006FB8 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   237                              <1> .exit:
   238                              <1>     return
    13                              <2> %%_ret:
    14 00006FBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> uppercaseCharAtPtr:
   241                              <1> ;Get the char pointed to by rsi and then fall
   242 00006FBB AC                  <1>     lodsb
   243                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   244                              <1> ;Convert a lowercase char to uppercase
   245                              <1> ; Leave alone uppercase chars and invalid chars
   246                              <1> ;Input: al = Char to convert to uppercase
   247                              <1> ;Output: al = Processed char
   248 00006FBC 53                  <1>     push rbx
   249 00006FBD 3C61                <1>     cmp al, "a"
   250 00006FBF 7214                <1>     jb .exit
   251 00006FC1 3C7A                <1>     cmp al, "z"
   252 00006FC3 7702                <1>     ja .checkExt
   253 00006FC5 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   254                              <1> .checkExt:
   255 00006FC7 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   256 00006FC9 720A                <1>     jb .exit
   257 00006FCB 2C80                <1>     sub al, 80h ;Turn into table offset
   258 00006FCD 488D1DD692FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   259 00006FD4 D7                  <1>     xlatb   ;Get converted extended byte into al
   260                              <1> .exit:
   261 00006FD5 50                  <1>     push rax    ;Save al temporarily
   262 00006FD6 488D1D7F94FFFF      <1>     lea rbx, asciiCharProperties
   263 00006FDD D7                  <1>     xlatb   ;Get the signature in al
   264 00006FDE A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   265 00006FE0 58                  <1>     pop rax
   266 00006FE1 5B                  <1>     pop rbx
   267                              <1>     return
    13                              <2> %%_ret:
    14 00006FE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> strlen2:    ;Int 2Fh, AX=1212h
   270                              <1> ;Entry point for Multiplex
   271 00006FE3 57                  <1>     push rdi
   272 00006FE4 4889F7              <1>     mov rdi, rsi
   273 00006FE7 E802000000          <1>     call strlen
   274 00006FEC 5F                  <1>     pop rdi
   275                              <1>     return
    13                              <2> %%_ret:
    14 00006FED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> strlen: 
   277                              <1> ;Gets the length of a ASCIIZ string
   278                              <1> ;Input: rdi = Source buffer
   279                              <1> ;Output: ecx = Length of string
   280 00006FEE 50                  <1>     push rax
   281 00006FEF 57                  <1>     push rdi
   282 00006FF0 30C0                <1>     xor al, al
   283 00006FF2 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   284 00006FF4 FFC9                <1>     dec ecx ;rcx = -1
   285 00006FF6 F2AE                <1>     repne scasb
   286 00006FF8 F7D1                <1>     not ecx
   287 00006FFA 5F                  <1>     pop rdi
   288 00006FFB 58                  <1>     pop rax
   289                              <1>     return
    13                              <2> %%_ret:
    14 00006FFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> 
   291                              <1> strcpy:
   292                              <1> ;Copies a null terminated string from rsi to rdi
   293 00006FFD AC                  <1>     lodsb
   294 00006FFE AA                  <1>     stosb
   295 00006FFF 84C0                <1>     test al, al
   296                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007001 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   297 00007003 EBF8                <1>     jmp short strcpy
   298                              <1> 
   299                              <1> strcmp:
   300                              <1> ;Compares two ASCIIZ strings for equality.
   301                              <1> ;Input: rsi = First string
   302                              <1> ;       rdi = Second string
   303                              <1> ;       ecx = Number of bytes to compare
   304                              <1> ;Output: ZF=ZE => Equal
   305                              <1> ;        ZF=NZ => Not equal
   306 00007005 56                  <1>     push rsi
   307 00007006 57                  <1>     push rdi
   308 00007007 F3A6                <1>     repe cmpsb
   309 00007009 5F                  <1>     pop rdi
   310 0000700A 5E                  <1>     pop rsi
   311                              <1>     return
    13                              <2> %%_ret:
    14 0000700B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> 
   314                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   315                              <1> ;Converts lowercase to uppercase and / to "\"
   316                              <1> ;Input: rsi = Source buffer
   317                              <1> ;       rdi = Buffer to place normalised path
   318 0000700C 50                  <1>     push rax
   319 0000700D 56                  <1>     push rsi
   320 0000700E 57                  <1>     push rdi
   321                              <1> .scan:
   322 0000700F AC                  <1>     lodsb
   323 00007010 84C0                <1>     test al, al
   324 00007012 740D                <1>     jz .exit
   325 00007014 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   326 00007019 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   327 0000701E AA                  <1>     stosb
   328 0000701F EBEE                <1>     jmp short .scan
   329                              <1> .exit:
   330 00007021 5F                  <1>     pop rdi
   331 00007022 5E                  <1>     pop rsi
   332 00007023 58                  <1>     pop rax
   333                              <1>     return
    13                              <2> %%_ret:
    14 00007024 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   334                              <1> 
   335                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   336                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   337                              <1> ;Input: rsi = One ASCIIZ pathname
   338                              <1> ;       rdi = Second ASCIIZ pathname
   339                              <1> ;Return:
   340                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   341 00007025 50                  <1>     push rax
   342 00007026 56                  <1>     push rsi
   343 00007027 57                  <1>     push rdi
   344                              <1> .scan:
   345 00007028 AC                  <1>     lodsb
   346 00007029 E818000000          <1>     call .normaliseChar
   347 0000702E 88C4                <1>     mov ah, al  ;Save normalised char in ah
   348 00007030 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   349 00007032 48FFC7              <1>     inc rdi ;And goto next char
   350 00007035 E80C000000          <1>     call .normaliseChar
   351 0000703A 38E0                <1>     cmp al, ah  ;Are they equal?
   352 0000703C 7504                <1>     jne .exit   ;If not equal, exit
   353 0000703E 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   354 00007040 75E6                <1>     jnz .scan
   355                              <1> .exit:
   356 00007042 5F                  <1>     pop rdi
   357 00007043 5E                  <1>     pop rsi
   358 00007044 58                  <1>     pop rax
   359                              <1>     return
    13                              <2> %%_ret:
    14 00007045 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .normaliseChar:
   361 00007046 E871FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   362 0000704B E860FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   363                              <1>     return
    13                              <2> %%_ret:
    14 00007050 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> checkPathspecOK:
   365                              <1> ;Input:
   366                              <1> ;rsi -> points to a path to verify if it is ok.
   367                              <1> ;Output:
   368                              <1> ;CF=NC => The path is totally clean and ok to use.
   369                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   370                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   371                              <1> ; and depending on method of invokation and caller, may be permissable.
   372                              <1> ;We accept lc and uc characters in this check function.
   373 00007051 50                  <1>     push rax
   374 00007052 53                  <1>     push rbx    ;Use rbx as the return flag status
   375 00007053 56                  <1>     push rsi
   376 00007054 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   377                              <1>     ;Start by getting the length of the ASCIIZ string.
   378 00007056 51                  <1>     push rcx
   379 00007057 57                  <1>     push rdi
   380 00007058 4889F7              <1>     mov rdi, rsi
   381 0000705B E88EFFFFFF          <1>     call strlen
   382 00007060 81F940000000        <1>     cmp ecx, 64    ;Check
   383 00007066 5F                  <1>     pop rdi
   384 00007067 59                  <1>     pop rcx
   385 00007068 7770                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   386                              <1>     ;First we verify if our path is relative or canonical (absolute)
   387 0000706A 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   388 0000706D 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   389 00007071 7416                <1>     je .netName
   390 00007073 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   391 00007077 7410                <1>     je .netName
   392 00007079 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   393 0000707C 7414                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   394                              <1>     ;Here if relative
   395 0000707E F605(01070000)FF    <1>     test byte [dosInvoke], -1
   396 00007085 7553                <1>     jnz .badExit    ;If this is -1, server invoke.
   397 00007087 EB21                <1>     jmp short .okToScan
   398                              <1> .netName:
   399 00007089 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   400 00007090 EB18                <1>     jmp short .okToScan
   401                              <1> .diskPath:
   402 00007092 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   403 00007099 F605(01070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   404 000070A0 7408                <1>     jz .okToScan
   405 000070A2 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   406 000070A3 E808FFFFFF          <1>     call swapPathSeparator
   407 000070A8 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   408                              <1> .okToScan:
   409 000070AA AC                  <1>     lodsb   
   410 000070AB 84C0                <1>     test al, al ;End of path char?
   411 000070AD 7430                <1>     jz .exit
   412 000070AF E8FCFEFFFF          <1>     call swapPathSeparator
   413 000070B4 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   414 000070B6 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   415 000070B8 7411                <1>     je .wcFound
   416 000070BA 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   417 000070BC 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   418                              <1>     ;Else we check that the char in al is an acceptable char
   419 000070BE 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   420 000070C0 74E8                <1>     je .okToScan
   421 000070C2 E831000000          <1>     call checkCharValid
   422 000070C7 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   423 000070C9 EBDF                <1>     jmp short .okToScan
   424                              <1> .wcFound:
   425 000070CB BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   426 000070D0 EBD8                <1>     jmp short .okToScan
   427                              <1> .wcCheck:
   428                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   429 000070D2 F7C340000000        <1>     test ebx, 40h
   430 000070D8 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   431                              <1>     ;Else fall through in error
   432                              <1> .badExit:
   433 000070DA BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   434                              <1> .exit:
   435 000070DF 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   436 000070E0 9D                  <1>     popfq
   437 000070E1 5E                  <1>     pop rsi
   438 000070E2 5B                  <1>     pop rbx
   439 000070E3 58                  <1>     pop rax
   440                              <1>     return
    13                              <2> %%_ret:
    14 000070E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> scanPathWC:
   443                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   444                              <1> ; even in the final path componant.
   445                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   446                              <1> ;Output: CF=NC => No wildcards present
   447                              <1> ;        CF=CY => Wildcards found
   448 000070E5 50                  <1>     push rax
   449 000070E6 56                  <1>     push rsi
   450                              <1> .scan:
   451 000070E7 AC                  <1>     lodsb
   452 000070E8 84C0                <1>     test al, al
   453 000070EA 7409                <1>     jz .exit
   454 000070EC 3C3F                <1>     cmp al, "?"
   455 000070EE 7404                <1>     je .wcFnd
   456 000070F0 3C2A                <1>     cmp al, "*"
   457 000070F2 75F3                <1>     jne .scan
   458                              <1> .wcFnd:
   459 000070F4 F9                  <1>     stc
   460                              <1> .exit:
   461 000070F5 5E                  <1>     pop rsi
   462 000070F6 58                  <1>     pop rax
   463                              <1>     return
    13                              <2> %%_ret:
    14 000070F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> checkCharValid:
   466                              <1> ;If ZF=ZE => Invalid Char
   467                              <1> ;If ZF=NZ => Valid Char
   468 000070F8 51                  <1>     push rcx
   469 000070F9 57                  <1>     push rdi
   470 000070FA 3A053092FFFF        <1>     cmp al, byte [fileTermTblExt.startBadRange]
   471 00007100 721B                <1>     jb .setZeroFlag
   472 00007102 3A052992FFFF        <1>     cmp al, byte [fileTermTblExt.endBadRange] 
   473 00007108 7613                <1>     jbe .setZeroFlag
   474 0000710A 0FB60D2292FFFF      <1>     movzx ecx, byte [fileTermTbl]
   475 00007111 488D3D1C92FFFF      <1>     lea rdi, fileTermTbl + 1
   476 00007118 F2AE                <1>     repne scasb
   477                              <1> .exit:
   478 0000711A 5F                  <1>     pop rdi
   479 0000711B 59                  <1>     pop rcx
   480                              <1>     return
    13                              <2> %%_ret:
    14 0000711C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   481                              <1> .setZeroFlag:
   482 0000711D 31C9                <1>     xor ecx, ecx    ;Clear CF too
   483 0000711F EBF9                <1>     jmp short .exit
   484                              <1> 
   485                              <1> skipSpacesAndTabs:
   486                              <1> ;Input: rsi -> String 
   487                              <1> ;Output: rsi -> First non Space or Tab type char
   488 00007121 AC                  <1>     lodsb
   489 00007122 E815000000          <1>     call isCharSpaceType
   490 00007127 74F8                <1>     jz skipSpacesAndTabs
   491 00007129 48FFCE              <1>     dec rsi
   492                              <1>     return
    13                              <2> %%_ret:
    14 0000712C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> isCharDelimType:
   495                              <1> ;Input: al = Char to check properties of
   496                              <1> ;Output:    ZF=NZ => Char not name delimiter
   497                              <1> ;           ZF=ZE => Char delimiter
   498 0000712D 50                  <1>     push rax
   499 0000712E 53                  <1>     push rbx
   500 0000712F 488D1D2693FFFF      <1>     lea rbx, asciiCharProperties
   501 00007136 D7                  <1>     xlatb
   502 00007137 A802                <1>     test al, 2
   503 00007139 5B                  <1>     pop rbx
   504 0000713A 58                  <1>     pop rax
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000713B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> isCharSpaceType:
   508                              <1> ;Input: al = Char to check properties of
   509                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   510                              <1> ;           ZF=ZE => Char Space or Tab
   511 0000713C 50                  <1>     push rax
   512 0000713D 53                  <1>     push rbx
   513 0000713E 488D1D1793FFFF      <1>     lea rbx, asciiCharProperties
   514 00007145 D7                  <1>     xlatb
   515 00007146 A804                <1>     test al, 4
   516 00007148 5B                  <1>     pop rbx
   517 00007149 58                  <1>     pop rax
   518                              <1>     return
    13                              <2> %%_ret:
    14 0000714A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   521                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   522                              <1> ;Input: rsi = One pointer
   523                              <1> ;       rdi = Second pointer
   524                              <1> ;Output: ZF=ZE if equal
   525                              <1> ;        ZF=NZ if not
   526 0000714B 4839FE              <1>     cmp rsi, rdi
   527                              <1>     return
    13                              <2> %%_ret:
    14 0000714E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   528                              <1> 
   529                              <1> checkPathNet:
   530                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   531                              <1> ;Output: ZF=ZE => Path is a net path
   532                              <1> ;        ZF=NZ => Path is not a net path
   533 0000714F 50                  <1>     push rax
   534 00007150 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   535 00007153 E858FEFFFF          <1>     call swapPathSeparator
   536 00007158 7505                <1>     jnz .exit
   537 0000715A E851FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   538                              <1> .exit:
   539 0000715F 58                  <1>     pop rax
   540                              <1>     return
    13                              <2> %%_ret:
    14 00007160 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getCharDevDriverPtr:
   543                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   544                              <1> ;Input: rax = Device Driver name (space padded)
   545                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   546 00007161 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   547                              <1> .lp:
   548 00007168 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   549                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000716C 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   550 0000716E 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   551 00007171 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   552 00007178 75EE                <1>     jne .lp ;If not loop
   553 0000717A F9                  <1>     stc ;Else bad exit
   554                              <1>     return
    13                              <2> %%_ret:
    14 0000717B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   557                              <1> ;Pointer to the first non-null device driver in the chain.
   558                              <1> ;Returns the value in rax only
   559 0000717C 488D05(7A000000)    <1>     lea rax, nulDevHdr
   560 00007183 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   561                              <1>     return
    13                              <2> %%_ret:
    14 00007186 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   564                              <1> ;Gets the extended error code in ax and returns
   565 00007187 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   566                              <1>     return
    13                              <2> %%_ret:
    14 0000718E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 0000718F FA                  <1>     cli ;Halt external interrupts
    19 00007190 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00007191 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00007194 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 0000719A 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 0000719D 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 0000719F 0F847C020000        <1>     je ctrlBreakCheck
    26 000071A5 80FC64              <1>     cmp ah, 64h
    27 000071A8 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    28 000071AE 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    29 000071B0 80FC51              <1>     cmp ah, 51h
    30 000071B3 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 000071B9 80FC62              <1>     cmp ah, 62h
    32 000071BC 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    33 000071C2 80FC50              <1>     cmp ah, 50h
    34 000071C5 0F84A0020000        <1>     je setCurrProcessID
    35 000071CB 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 000071CE 0F84BA020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 000071D4 E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 000071D9 48891D(82040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 000071E0 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 000071E8 00                  <1>
    41 000071E9 488B05(7A040000)    <1>     mov rax, qword [oldRSP]
    42 000071F0 488905(6A040000)    <1>     mov qword [oldoldRSP], rax
    43 000071F7 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 000071FD 488925(7A040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 00007204 C605(01070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 0000720B 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 00007212 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 00007216 58                  <1>     pop rax     ;Get old rax back
    51 00007217 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 00007218 488D25(100D0000)    <1>     lea rsp, critStakTop
    56 0000721F FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 00007220 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 00007222 881D(93040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 00007228 C605(94040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    61 0000722F 881D(69040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    62 00007235 881D(8A040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 0000723B 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 0000723C 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 0000723E D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 00007240 488D051593FFFF      <1>     lea rax, kDispTbl
    68 00007247 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 0000724A 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 0000724E 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00007251 58                  <1>     pop rax
    72                              <1> 
    73 00007252 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 00007254 741C                <1>     jz .fddiskOp
    75 00007256 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00007259 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 0000725B 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 0000725E 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00007260 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 00007267 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00007269 488D25(A0130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00007270 EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00007272 488905(33040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00007279 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00007280 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 00007287 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 0000728E 50                  <1>     push rax
    94 0000728F B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00007291 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    96 00007293 58                  <1>     pop rax
    97                              <1> 
    98 00007294 C605(94040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    99 0000729B 488D25(E0190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 000072A2 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 000072A9 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 000072AB 50                  <1>     push rax
   104 000072AC E89AB4FFFF          <1>     call checkBreak   ; Check for a ^C
   105 000072B1 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 000072B2 48871D(82040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 000072B9 FF15(82040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 000072BF FA                  <1>     cli     ;Redisable interrupts
   138 000072C0 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 000072C6 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 000072CD 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 000072D0 488B05(6A040000)    <1>     mov rax, qword [oldoldRSP]
   142 000072D7 488905(7A040000)    <1>     mov qword [oldRSP], rax
   143 000072DE E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 000072E3 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 000072E5 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 000072E7 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 000072E9 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 000072EF 58                  <1>     pop rax
   152 000072F0 5B                  <1>     pop rbx
   153 000072F1 59                  <1>     pop rcx
   154 000072F2 5A                  <1>     pop rdx
   155 000072F3 5E                  <1>     pop rsi
   156 000072F4 5F                  <1>     pop rdi
   157 000072F5 5D                  <1>     pop rbp
   158 000072F6 4158                <1>     pop r8
   159 000072F8 4159                <1>     pop r9
   160 000072FA FF25(72040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00007300 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 00007306 4151                <1>     push r9
   164 00007308 4150                <1>     push r8
   165 0000730A 55                  <1>     push rbp
   166 0000730B 57                  <1>     push rdi
   167 0000730C 56                  <1>     push rsi
   168 0000730D 52                  <1>     push rdx
   169 0000730E 51                  <1>     push rcx
   170 0000730F 53                  <1>     push rbx
   171 00007310 50                  <1>     push rax
   172 00007311 FF25(72040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00007317 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00007318 B801800000          <1>     mov eax, 8001h
   176 0000731D CD2A                <1>     int 2ah
   177 0000731F 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 00007320 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 00007321 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 00007322 B801810000          <1>     mov eax, 8101h
   182 00007327 CD2A                <1>     int 2ah
   183 00007329 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 0000732A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 0000732B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 0000732C B802800000          <1>     mov eax, 8002h
   188 00007331 CD2A                <1>     int 2ah
   189 00007333 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 00007334 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 00007335 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 00007336 B802810000          <1>     mov eax, 8102h
   194 0000733B CD2A                <1>     int 2ah
   195 0000733D 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 0000733E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 0000733F 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 00007341 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 00007342 E836000000          <1>     call xLatError
   207 00007347 B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00007349 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 0000734A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 0000734B E83FFBFFFF          <1>     call getUserRegs
   216 00007350 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 00007352 EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 00007354 E836FBFFFF          <1>     call getUserRegs
   222 00007359 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 0000735C 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 00007360 F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 00007361 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 00007362 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 00007365 E813000000          <1>     call xLatError
   237 0000736A E891000000          <1>     call checkFail
   238                              <1> .noXlat:
   239 0000736F E81BFBFFFF          <1>     call getUserRegs
   240 00007374 668906              <1>     mov word [rsi + callerFrame.rax], ax
   241 00007377 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   242 0000737B F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   243                              <1>     return
    13                              <2> %%_ret:
    14 0000737C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> xLatError:
   245                              <1> ;Translates the error code given in ax and sets error code in the var
   246                              <1> ; Input: ax = Extended Error Code
   247                              <1> ; Output: ax = Potentially translated Error Code
   248                              <1> ;         [errorExCde] = Original Error Code
   249                              <1> ;Preserves all registers except ax
   250                              <1> ;AH is always returned as 0
   251 0000737D 53                  <1>     push rbx
   252 0000737E 51                  <1>     push rcx
   253 0000737F 56                  <1>     push rsi
   254 00007380 668905(0B040000)    <1>     mov word [errorExCde], ax
   255 00007387 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   256 00007389 488D35E98CFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   257                              <1> .readEntry:
   258 00007390 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   259 00007392 3CFF                <1>     cmp al, -1
   260 00007394 741F                <1>     je .skipXlat
   261 00007396 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   262 0000739C 7408                <1>     je .found
   263                              <1>     ;Here, entry not found, goto next entry
   264 0000739E 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   265 000073A1 4801C6              <1>     add rsi, rax    ;Goto next entry
   266 000073A4 EBEA                <1>     jmp short .readEntry
   267                              <1> .found:
   268                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   269 000073A6 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   270                              <1> .mainSearch:
   271 000073A9 AC                  <1>     lodsb   ;Get one byte into al
   272 000073AA 38C3                <1>     cmp bl, al  ;Check against the error code
   273 000073AC 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   274 000073AE FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   275 000073B0 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   276                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   277 000073B2 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   278                              <1> .skipXlat:
   279 000073B5 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   280 000073B7 5E                  <1>     pop rsi
   281 000073B8 59                  <1>     pop rcx
   282 000073B9 5B                  <1>     pop rbx
   283                              <1>     return
    13                              <2> %%_ret:
    14 000073BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   285                              <1> ;Looks up the error code in the variable and sets the other error vars
   286                              <1> ;Called with the lookup table in rsi
   287                              <1> ;All regs preserved
   288 000073BB 50                  <1>     push rax
   289 000073BC 53                  <1>     push rbx
   290 000073BD 51                  <1>     push rcx
   291 000073BE 56                  <1>     push rsi
   292 000073BF 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   293 000073C6 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   294                              <1> .readEntry:
   295 000073CB AD                  <1>     lodsd   ;Read the dword table entry into eax
   296 000073CC 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   297 000073D1 7428                <1>     je .exit    
   298 000073D3 38D8                <1>     cmp al, bl  ;Compare the error codes
   299 000073D5 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   300 000073D7 D3E8                <1>     shr eax, cl
   301 000073D9 3CFF                <1>     cmp al, -1
   302 000073DB 7406                <1>     je .skipClass
   303 000073DD 8805(0E040000)      <1>     mov byte [errorClass], al
   304                              <1> .skipClass:
   305 000073E3 D3E8                <1>     shr eax, cl
   306 000073E5 3CFF                <1>     cmp al, -1
   307 000073E7 7406                <1>     je .skipAct
   308 000073E9 8805(0D040000)      <1>     mov byte [errorAction], al
   309                              <1> .skipAct:
   310 000073EF D3E8                <1>     shr eax, cl
   311 000073F1 3CFF                <1>     cmp al, -1
   312 000073F3 7406                <1>     je .exit
   313 000073F5 8805(0A040000)      <1>     mov byte [errorLocus], al
   314                              <1> .exit:
   315 000073FB 5E                  <1>     pop rsi
   316 000073FC 59                  <1>     pop rcx
   317 000073FD 5B                  <1>     pop rbx
   318 000073FE 58                  <1>     pop rax
   319                              <1>     return
    13                              <2> %%_ret:
    14 000073FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> checkFail:
   321                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   322                              <1> ; and swaps the var error code if so
   323 00007400 803D(69040000)00    <1>     cmp byte [Int24Fail], 0
   324 00007407 7509                <1>     jnz .skipFail
   325 00007409 66C705(0B040000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 24h"
   325 00007411 00                  <1>
   326                              <1> .skipFail:
   327 00007412 56                  <1>     push rsi
   328 00007413 488D35FB8CFFFF      <1>     lea rsi, extErrTbl
   329 0000741A E89CFFFFFF          <1>     call setErrorVars
   330 0000741F 5E                  <1>     pop rsi
   331                              <1>     return
    13                              <2> %%_ret:
    14 00007420 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> ;========================================:
   333                              <1> ;      Reentrant Kernel Functions        :
   334                              <1> ;========================================:
   335                              <1> ctrlBreakCheck:    ;ah = 33h
   336 00007421 3C06                <1>     cmp al, 6
   337 00007423 743C                <1>     je .trueVer
   338 00007425 3C05                <1>     cmp al, 5
   339 00007427 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   340 00007429 84C0                <1>     test al, al
   341 0000742B 7508                <1>     jnz .cbcget     ;Get the state or other functions
   342 0000742D 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   343 00007433 48CF                <1>     iretq
   344                              <1> .cbcget:
   345 00007435 3C02                <1>     cmp al, 02h
   346 00007437 771A                <1>     ja .cbcBad
   347 00007439 740D                <1>     jz .cbcxchg ;Function 2
   348 0000743B 52                  <1>     push rdx
   349 0000743C 80E201              <1>     and dl, 1   ;Get only the bottom bit
   350 0000743F 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   351 00007445 5A                  <1>     pop rdx
   352 00007446 48CF                <1>     iretq
   353                              <1> .cbcxchg:
   354 00007448 80E201              <1>     and dl, 1
   355 0000744B 8615(32040000)      <1>     xchg byte [breakFlag], dl
   356 00007451 48CF                <1>     iretq
   357                              <1> .cbcBad:
   358 00007453 B0FF                <1>     mov al, -1
   359 00007455 48CF                <1>     iretq
   360                              <1> .getBtDrv:
   361                              <1> ;Undocumented.
   362                              <1> ;Might be unreliable so dont document yet.
   363                              <1> ;Return 1 based boot drive in dl
   364 00007457 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   365 0000745D FEC2                <1>     inc dl  ;Return a 1 based drive number
   366 0000745F 48CF                <1>     iretq
   367                              <1> .trueVer:
   368                              <1> ;Undocumented.
   369                              <1> ;bx returns true DOS number.
   370                              <1> ;dl has "revision" number in bits 0-2. 
   371                              <1> ;dh has various flags. All reserved for future use.
   372 00007461 66BB0060            <1>     mov bx, dosVerMac
   373 00007465 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   374 00007469 48CF                <1>     iretq
   375                              <1> 
   376                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   377 0000746B 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   378 00007472 48CF                <1>     iretq
   379                              <1> 
   380                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   381 00007474 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   382 0000747B 48CF                <1>     iretq
   383                              <1> 
   384                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   385 0000747D 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   386 00007484 48CF                <1>     iretq
   387                              <1> 
   388                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   389 00007486 8805(E8190000)      <1>     mov byte [lookahead], al    
   390 0000748C 48CF                <1>     iretq
   391                              <1> 
   392                              <1> systemServices: ;ah = 61h
   393                              <1> ;All pointers returned in rdx
   394                              <1> ;al = 0 -> Get Environment pointer in rdx
   395                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   396                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   397                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   398                              <1> ;                        Else, rdx -> Filename
   399 0000748E 3C01                <1>     cmp al, 1
   400 00007490 7453                <1>     je short .getCmdLineArgs
   401 00007492 3C02                <1>     cmp al, 2
   402 00007494 760C                <1>     jbe .getEnvPtr
   403 00007496 B801000000          <1>     mov eax, errInvFnc
   404                              <1> .exitBad:
   405 0000749B 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   406 000074A0 48CF                <1>     iretq
   407                              <1> .getEnvPtr:
   408                              <1>     ;Gets the environment pointer in rdx
   409 000074A2 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   410 000074A9 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   411 000074AD 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   412                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   413                              <1> ; pass the ptr to the word after.
   414 000074AF FA                  <1>     cli
   415 000074B0 51                  <1>     push rcx
   416 000074B1 31C9                <1>     xor ecx, ecx
   417 000074B3 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   418                              <1> .gep0:
   419 000074B8 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   420 000074BD 740D                <1>     je short .gep1
   421 000074BF 48FFC2              <1>     inc rdx         ;Go to the next byte
   422 000074C2 FFC9                <1>     dec ecx
   423 000074C4 75F2                <1>     jnz short .gep0
   424                              <1> .gep00:
   425                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   426 000074C6 59                  <1>     pop rcx
   427 000074C7 FB                  <1>     sti
   428 000074C8 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   429 000074CA EBCF                <1>     jmp short .exitBad
   430                              <1> .gep1:
   431 000074CC 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   432 000074D3 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   433 000074D8 75EC                <1>     jne .gep00
   434 000074DA 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   435 000074E1 59                  <1>     pop rcx
   436 000074E2 FB                  <1>     sti
   437 000074E3 EB0B                <1>     jmp short .exitOk
   438                              <1> .getCmdLineArgs:
   439 000074E5 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   440 000074EC 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   441                              <1> .exitOk:
   442 000074F0 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   443 000074F5 48CF                <1>     iretq
   444                              <1> 
   445                              <1> 
   446                              <1> ;========================================:
   447                              <1> ;            Kernel Functions            :
   448                              <1> ;========================================:
   449                              <1> diskReset:         ;ah = 0Dh
   450                              <1> ;Flush all dirty buffers to disk
   451 000074F7 E81BFEFFFF          <1>     call dosCrit1Enter
   452 000074FC B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   453 000074FE E82A92FFFF          <1>     call flushAllBuffersForDrive  
   454                              <1>     ;Now we free all buffers and set their referenced bit
   455 00007503 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   456                              <1> .drBufferLp:
   457 0000750A 4881FFFFFFFFFF      <1>     cmp rdi, -1
   458 00007511 740B                <1>     je .drExit
   459 00007513 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   460 00007519 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   461 0000751C EBEC                <1>     jmp short .drBufferLp
   462                              <1> .drExit:
   463 0000751E E8FEFDFFFF          <1>     call dosCrit1Exit
   464 00007523 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   465 00007528 CD2F                <1>     int 2fh
   466                              <1>     return
    13                              <2> %%_ret:
    14 0000752A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> 
   468                              <1> selectDisk:        ;ah = 0Eh
   469                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   470 0000752B 88D0                <1>     mov al, dl
   471 0000752D FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   472 0000752F E87FF9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   473 00007534 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   474 00007536 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   475                              <1> .skipSettingCurrent:
   476 0000753C 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   477                              <1>     return
    13                              <2> %%_ret:
    14 00007543 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   480 00007544 8A05(31040000)      <1>     mov al, byte [currentDrv]
   481                              <1>     return
    13                              <2> %%_ret:
    14 0000754A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> FATinfoDefault:    ;ah = 1Bh
   484 0000754B 30D2                <1>     xor dl, dl
   485                              <1> FATinfoDevice:     ;ah = 1Ch
   486                              <1> ;Input: dl = 1 based drive number
   487                              <1> ;Output:
   488                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   489                              <1> ;cx = bytes per sector
   490                              <1> ;edx = total number of clusters
   491                              <1> ;rbx = Ptr to media ID byte
   492 0000754D 88D0                <1>     mov al, dl  ;Move drive number into al
   493 0000754F E8CFF9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   494 00007554 7307                <1>     jnc .fidCDSFound
   495 00007556 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   496 0000755B EB2E                <1>     jmp short .error 
   497                              <1> .fidCDSFound:
   498 0000755D E8BBF8FFFF          <1>     call getDiskData
   499 00007562 7227                <1>     jc .error
   500                              <1> ;Now we have that:
   501                              <1> ;al = sectors per cluster
   502                              <1> ;ah = media ID byte
   503                              <1> ;ebx = total clusters
   504                              <1> ;cx = bytes per sector
   505                              <1> ;edx = number of available clusters
   506 00007564 E826F9FFFF          <1>     call getUserRegs
   507 00007569 8825(95070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   508 0000756F 30E4                <1>     xor ah, ah
   509 00007571 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   510 00007574 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   511 00007578 488D1D(95070000)    <1>     lea rbx, mediaByte
   512 0000757F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   513 00007583 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   514                              <1> .badExit:
   515 00007587 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   516                              <1>     return
    13                              <2> %%_ret:
    14 0000758A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   517                              <1> .error:
   518 0000758B E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   519 00007590 66B8FFFF            <1>     mov ax, -1
   520 00007594 EBF1                <1>     jmp short .badExit
   521                              <1> 
   522                              <1> setIntVector:      ;ah = 25h
   523                              <1> ;Called with:
   524                              <1> ;   rdx = Pointer to interrupt handler
   525                              <1> ;   al = Interrupt number
   526 00007596 FA                  <1>     cli ;Halt interrupts
   527 00007597 0F010D(CC1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   528 0000759E 0FB6C0              <1>     movzx eax, al
   529 000075A1 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   530 000075A5 480305(CE1A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   531 000075AC 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   532 000075AF 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   533 000075B3 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   534 000075B7 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   535 000075BB 895008              <1>     mov dword [rax + 8], edx
   536 000075BE FB                  <1>     sti
   537                              <1>     return
    13                              <2> %%_ret:
    14 000075BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   538                              <1> 
   539                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   540 000075C0 8805(D0030000)      <1>     mov byte [verifyFlag], al
   541 000075C6 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   542                              <1>     return
    13                              <2> %%_ret:
    14 000075CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> getDOSversion:     ;ah = 30h
   544 000075CE E8BCF8FFFF          <1>     call getUserRegs
   545 000075D3 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   546 000075D5 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   547 000075D8 668B05218AFFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   548 000075DF 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   549                              <1>     return
    13                              <2> %%_ret:
    14 000075E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   550                              <1> 
   551                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   552                              <1> ;Input: dx = Version number. Value of 0 means true value.
   553 000075E3 6685D2              <1>     test dx, dx
   554 000075E6 750A                <1>     jnz .newVal
   555 000075E8 66C7050F8AFFFF0060  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   556                              <1>     return
    13                              <2> %%_ret:
    14 000075F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> .newVal:
   558 000075F2 668915078AFFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   559                              <1>     return
    13                              <2> %%_ret:
    14 000075F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   562                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   563 000075FA 30D2                <1>     xor dl, dl
   564                              <1> getDeviceDPBptr:   ;ah = 32h
   565                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   566                              <1> ;On exit: rbx = DPB pointer
   567 000075FC 88D0                <1>     mov al, dl
   568 000075FE E820F9FFFF          <1>     call getCDS
   569 00007603 722C                <1>     jc .bad
   570 00007605 488B3D(11070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   571 0000760C 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   572 00007612 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   573                              <1>     ;Here ONLY if accessing critical Disk data structures
   574 00007614 E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   575 00007619 E84DF5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   576 0000761E E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   577 00007623 720C                <1>     jc .bad
   578 00007625 E865F8FFFF          <1>     call getUserRegs
   579 0000762A 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   580 0000762E 30C0                <1>     xor al, al
   581                              <1>     return
    13                              <2> %%_ret:
    14 00007630 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   582                              <1> .bad:
   583 00007631 B0FF                <1>     mov al, -1
   584                              <1>     return
    13                              <2> %%_ret:
    14 00007633 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> getInDOSflagPtr:   ;ah = 34h
   587 00007634 488D15(08040000)    <1>     lea rdx, inDOS
   588 0000763B E84FF8FFFF          <1>     call getUserRegs
   589 00007640 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   590                              <1>     return
    13                              <2> %%_ret:
    14 00007644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   591                              <1> 
   592                              <1> getIntVector:      ;ah = 35h
   593                              <1> ;Called with:
   594                              <1> ;   al = Interrupt Number
   595                              <1> ;Returns:
   596                              <1> ;   rbx = Pointer to interrupt handler
   597 00007645 E817F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   598 0000764A E840F8FFFF          <1>     call getUserRegs
   599 0000764F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   600                              <1>     return
    13                              <2> %%_ret:
    14 00007653 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> getDiskFreeSpace:  ;ah = 36h
   603                              <1> ;Input: Drive number in dl (0 = Current)
   604                              <1> ;Output:    ax = sectors per cluster
   605                              <1> ;           ebx = number of free clusters
   606                              <1> ;           cx = bytes per sector
   607                              <1> ;           edx = total clusters on drive
   608 00007654 88D0                <1>     mov al, dl
   609 00007656 E8C8F8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   610 0000765B 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   611                              <1> ;Else, we at an error.
   612                              <1> ;Simply return with CY set and error code in al with extended error info
   613 0000765D B80F000000          <1>     mov eax, errBadDrv
   614 00007662 E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   615                              <1>     ;extErrExit sets rsi to caller regs
   616 00007667 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   617                              <1>     return
    13                              <2> %%_ret:
    14 0000766C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   618                              <1> .gdfsCDSFound:
   619 0000766D E8ABF7FFFF          <1>     call getDiskData
   620 00007672 7219                <1>     jc .error
   621                              <1> ;Now we have that:
   622                              <1> ;al = sectors per cluster
   623                              <1> ;ah = media ID byte
   624                              <1> ;ebx = total clusters
   625                              <1> ;cx = bytes per sector
   626                              <1> ;edx = number of available clusters
   627 00007674 E816F8FFFF          <1>     call getUserRegs
   628 00007679 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   629 0000767B 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   630 0000767E 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   631 00007682 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   632 00007685 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   633                              <1> .badExit:
   634 00007689 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   635                              <1>     return
    13                              <2> %%_ret:
    14 0000768C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   636                              <1> .error:
   637 0000768D E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   638 00007692 66B8FFFF            <1>     mov ax, -1
   639 00007696 EBF1                <1>     jmp short .badExit
   640                              <1> 
   641                              <1> 
   642                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   643 00007698 31C0                <1>     xor eax, eax
   644 0000769A 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   645 000076A1 E9AEFCFFFF          <1>     jmp extGoodExit
   646                              <1> 
   647                              <1> getSysVarsPtr:     ;ah = 52h
   648 000076A6 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   649 000076AD E8DDF7FFFF          <1>     call getUserRegs
   650 000076B2 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   651                              <1>     return
    13                              <2> %%_ret:
    14 000076B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> 
   654                              <1> ;AH = 53h - CREATE DPB
   655                              <1> createDPB:         ;generates a DPB from a given BPB
   656                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   657                              <1> ;This is done so that the other fields of the DPB can be recycled
   658                              <1> ;Input: rsi = ptr to the BPB
   659                              <1> ;       rbp = ptr to the DPB
   660                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   661                              <1> ;bMediaDescriptor
   662 000076B7 8A4615              <1>     mov al, byte [rsi + bpb.media]
   663 000076BA 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   664                              <1> ;dFirstFreeCluster
   665 000076BD C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   666                              <1> ;dNumberOfFreeClusters
   667 000076C4 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   668                              <1> ;wBytesPerSector
   669 000076CB 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   670 000076CF 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   671                              <1> ;bMaxSectorInCluster
   672 000076D3 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   673 000076D6 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   674 000076D8 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   675                              <1> ;bSectorsPerClusterShift
   676 000076DB FEC0                <1>     inc al
   677 000076DD 30C9                <1>     xor cl, cl
   678                              <1> .cd2:
   679 000076DF D0E8                <1>     shr al, 1
   680 000076E1 7404                <1>     jz .cd3
   681 000076E3 FEC1                <1>     inc cl
   682 000076E5 EBF8                <1>     jmp short .cd2
   683                              <1> .cd3:
   684 000076E7 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   685                              <1> ;wFAToffset, number of reserved sectors in partition
   686 000076EA 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   687 000076EE 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   688                              <1> ;bNumberOfFATs
   689 000076F2 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   690 000076F5 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   691                              <1> ;wNumberRootDirEntries
   692                              <1> ;Gets the number of 32 byte entries in the root directory
   693                              <1> ;Only valid for FAT 12/16
   694 000076F8 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   695 000076FC 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   696                              <1> ;dFATlength, get the FAT length
   697 00007700 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   698 00007704 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   699 00007707 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   700 00007709 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   701 0000770C 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   702                              <1> ;Complex cases below...
   703                              <1> ;dClusterHeapOffset, start sector of the data area
   704 0000770F 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   705 00007713 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   706 00007716 85C0                <1>     test eax, eax
   707 00007718 0F44C3              <1>     cmovz eax, ebx
   708                              <1> ;eax = FATsz
   709 0000771B 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   710 0000771F 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   711 00007722 85DB                <1>     test ebx, ebx
   712 00007724 0F44D9              <1>     cmovz ebx, ecx 
   713                              <1> ;ebx = TotSec
   714 00007727 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   715 0000772A 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   716                              <1> .cd4:
   717 0000772C 01C2                <1>     add edx, eax
   718 0000772E FEC9                <1>     dec cl
   719 00007730 75FA                <1>     jnz .cd4
   720 00007732 89D0                <1>     mov eax, edx    ;Store product in eax
   721 00007734 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   722 00007738 01D0                <1>     add eax, edx
   723                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   724 0000773A 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   725 0000773E C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   726 00007741 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   727 00007745 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   728 00007746 89D0                <1>     mov eax, edx
   729 00007748 31D2                <1>     xor edx, edx
   730 0000774A F7F1                <1>     div ecx
   731 0000774C 89C2                <1>     mov edx, eax
   732 0000774E 58                  <1>     pop rax
   733 0000774F 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   734                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   735                              <1>     ;aka eax = Start sector of the data area in volume
   736 00007751 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   737                              <1> ;dClusterCount
   738 00007754 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   739 00007756 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   740 00007758 31D2                <1>     xor edx, edx
   741 0000775A BB01000000          <1>     mov ebx, 1
   742 0000775F 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   743 00007762 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   744 00007764 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   745 00007766 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   746 00007768 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   747                              <1> ;dFirstUnitOfRootDir
   748 0000776B 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   749 00007770 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   750 00007773 770F                <1>     ja .cd5
   751                              <1>     ;Else, we need to find the first sector of the root directory
   752                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   753 00007775 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   754 00007779 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   755                              <1> .cd51:
   756 0000777D 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   757 00007780 FFC9                <1>     dec ecx
   758 00007782 75F9                <1>     jnz .cd51
   759                              <1> .cd5:
   760 00007784 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   761 00007787 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   762                              <1> ;Exit epilogue
   763 0000778B 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   764 00007792 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   765                              <1>     %if DEBUG && DPBINFO
   766                              <1>     ;Print DPB 
   767                              <1>     debugEnterM
   768                              <1>     push rbp
   769                              <1>     lea rbp, .l0000
   770                              <1>     call debPrintNullString
   771                              <1>     pop rbp
   772                              <1>     call debDPBBPBptr
   773                              <1>     call debMakeDebuggerRespond
   774                              <1>     jmp short .l0001
   775                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   776                              <1> .l0001:
   777                              <1>     debugExitM
   778                              <1>     %endif
   779                              <1>     return
    13                              <2> %%_ret:
    14 00007794 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   780                              <1> 
   781                              <1> getVerifySetting:  ;ah = 54h
   782 00007795 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   783                              <1>     return
    13                              <2> %%_ret:
    14 0000779B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   784                              <1> 
   785                              <1> getExtendedError:  ;ah = 59h
   786 0000779C E8EEF6FFFF          <1>     call getUserRegs
   787 000077A1 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   788 000077A8 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   789 000077AE 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   790 000077B4 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   791 000077BA 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   792 000077C1 668906              <1>     mov word [rsi + callerFrame.rax], ax
   793 000077C4 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   794 000077C8 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   795 000077CB 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   796                              <1> noOp:
   797                              <1>     return
    13                              <2> %%_ret:
    14 000077CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> ;At some point we will implement the below function but that is
   799                              <1> ; a low priority as it is not a DOS 3.3 function. 
   800                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    45                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 000077D0 3C07                <1>     cmp al, 07h
     8 000077D2 7204                <1>     jb .skip
     9 000077D4 3C09                <1>     cmp al, 09h
    10 000077D6 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 000077D8 4889D6              <1>     mov rsi, rdx
    13 000077DB 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 000077DF 66891D(43040000)    <1>     mov word [machineNum], bx
    15 000077E6 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 000077EA 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 000077F1 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000077F8 53                  <1>     push rbx
    20 000077F9 488B1D(931A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007800 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007801 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00007802 E856010000          <1>     call serverFunctionSelect
    24 00007807 B801000000          <1>     mov eax, eLocUnk
    25 0000780C 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 00007812 E94BFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007817 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007818 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007819 5F                  <1>     pop rdi
    33 0000781A E870F6FFFF          <1>     call getUserRegs
    34 0000781F 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00007822 56                  <1>     push rsi
    36 00007823 B906000000          <1>     mov ecx, 6
    37 00007828 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 0000782B 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007832 48A5                <1>     movsq   ;Transfer r8...
    40 00007834 48A5                <1>     movsq   ;... and r9
    41 00007836 5E                  <1>     pop rsi
    42 00007837 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 0000783A 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 0000783E 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007842 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007846 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 0000784A 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 0000784E 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007852 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007856 48891D(82040000)    <1>     mov qword [oldRBX], rbx
    51 0000785D C605(01070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007864 E9AFF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007869 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007870 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007875 740A                <1>     je .validTask
    62 00007877 B805000000          <1>     mov eax, errAccDen
    63 0000787C E9E1FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007881 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007883 E88FFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007888 53                  <1>     push rbx
    70 00007889 E8A4D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 0000788E 7227                <1>     jc .exit
    72 00007890 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007895 741B                <1>     je .gotoNextFile
    74 00007897 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 0000789C 7414                <1>     je .gotoNextFile
    76 0000789E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 000078A4 750C                <1>     jnz .gotoNextFile
    78 000078A6 48893D(31070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 000078AD E84AC1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 000078B2 5B                  <1>     pop rbx
    83 000078B3 FFC3                <1>     inc ebx
    84 000078B5 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 000078B7 E865FAFFFF          <1>     call dosCrit1Exit
    87 000078BC 5B                  <1>     pop rbx ;Align stack
    88 000078BD E992FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 000078C2 FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 000078C8 0F8294FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 000078CE E981FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 000078D3 FF15(D7000000)      <1>     call qword [closeCompShare]
   100 000078D9 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 000078DB FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 000078E1 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 000078E3 FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 000078E9 72DD                <1>     jc closeFilesByName.shareExitBad
   109 000078EB E89FF5FFFF          <1>     call getUserRegs
   110 000078F0 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 000078F4 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 000078F8 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 000078FC EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 000078FE 488D3D(07040000)    <1>     lea rdi, sda
   124 00007905 48B98C160000000000- <1>     mov rcx, sdaLen
   124 0000790E 00                  <1>
   125 0000790F 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007918 00                  <1>
   126 00007919 E871F5FFFF          <1>     call getUserRegs
   127 0000791E 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007922 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007926 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007928 50                  <1>     push rax
   133 00007929 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 0000792E CD2F                <1>     int 2Fh
   135 00007930 5B                  <1>     pop rbx
   136 00007931 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007933 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007935 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007937 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 0000793E 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007942 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007949 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 0000794C 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007953 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007956 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 0000795C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 0000795D 55                  <1>     push rbp
   156 0000795E 4889E5              <1>     mov rbp, rsp
   157 00007961 53                  <1>     push rbx
   158 00007962 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007966 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007969 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 0000796C 7621                <1>     jbe short .argumentTooBig
   162 0000796E 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007972 D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007974 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007976 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 0000797A 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 0000797D 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007981 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007985 5B                  <1>     pop rbx
   170 00007986 5D                  <1>     pop rbp
   171 00007987 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000798E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 0000798F 5B                  <1>     pop rbx
   175 00007990 5D                  <1>     pop rbp
   176 00007991 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007994 3C01                <1>     cmp al, 01
   181 00007996 7214                <1>     jb .getName
   182 00007998 7437                <1>     jz .setName
   183 0000799A 3C06                <1>     cmp al, 6
   184 0000799C 724C                <1>     jb .netRedir
   185 0000799E C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 000079A5 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 000079A7 E9B6F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 000079AC 4889D7              <1>     mov rdi, rdx
   198 000079AF 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 000079B6 E8D4F4FFFF          <1>     call getUserRegs
   200 000079BB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 000079BF 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 000079C6 31C0                <1>     xor eax, eax
   204 000079C8 48A5                <1>     movsq
   205 000079CA A5                  <1>     movsd
   206 000079CB 66A5                <1>     movsw
   207 000079CD A4                  <1>     movsb
   208 000079CE AA                  <1>     stosb   ;Store terminating null
   209 000079CF EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 000079D1 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 000079D8 4889D6              <1>     mov rsi, rdx
   217 000079DB FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 000079E1 488D3D(D6030000)    <1>     lea rdi, machineName
   219 000079E8 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 000079EA 50                  <1>     push rax
   223 000079EB B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 000079F0 CD2F                <1>     int 2Fh
   225 000079F2 5A                  <1>     pop rdx
   226 000079F3 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000079F5 E95AF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000079FA 80FC07              <1>     cmp ah, 07h
   233 000079FD 7419                <1>     je .driveAction
   234 000079FF 80FC08              <1>     cmp ah, 08h
   235 00007A02 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007A04 50                  <1>     push rax
   238 00007A05 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007A0A CD2F                <1>     int 2Fh
   240 00007A0C 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007A0D 0F824FF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007A13 E93CF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007A18 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007A1A E85FF5FFFF          <1>     call getCDSforDrive
   249 00007A1F 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007A21 80EA07              <1>     sub dl, 7
   252 00007A24 7408                <1>     jz .enable
   253 00007A26 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007A2C EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007A2E 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007A34 EBDD                <1>     jmp short .goodExit
    46                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007A36 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007A39 7411                <1>     je .installCheck
    23 00007A3B 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007A3E 740C                <1>     je .installCheck
    25 00007A40 80FC12              <1>     cmp ah, 12h
    26 00007A43 741E                <1>     je .goMplx
    27 00007A45 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007A48 7402                <1>     je .installCheck
    29 00007A4A 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007A4C 84C0                <1>     test al, al
    38 00007A4E 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007A50 B801000000          <1>     mov eax, errInvFnc
    41 00007A55 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007A5C 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007A61 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007A63 3C30                <1>     cmp al, mDispTblL / 2
    48 00007A65 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 00007A67 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007A68 53                  <1>     push rbx    ;Storage for DOS function
    52 00007A69 53                  <1>     push rbx    ;Stores rbx value
    53 00007A6A 488D1D30000000      <1>     lea rbx, .retAddr
    54 00007A71 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 00007A76 51                  <1>     push rcx
    57 00007A77 488D1DB08BFFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 00007A7E 53                  <1>     push rbx
    59 00007A7F 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 00007A82 488B442450          <1>     mov rax, qword [rsp + 10*8]  ;Pick the word pushed on the stack before call 
    61 00007A87 D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007A89 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007A8C 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00007A90 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00007A91 4801CB              <1>     add rbx, rcx
    66 00007A94 59                  <1>     pop rcx
    67 00007A95 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007A9A 5B                  <1>     pop rbx
    69 00007A9B 488B442438          <1>     mov rax, qword [rsp + 7*8]  ;Get qword that may be passed on stack
    70                              <1>     return
    13                              <2> %%_ret:
    14 00007AA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    71                              <1> 
    72                              <1> .retAddr:
    73 00007AA1 53                  <1>     push rbx
    74 00007AA2 9C                  <1>     pushfq
    75 00007AA3 5B                  <1>     pop rbx
    76 00007AA4 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    77 00007AA9 5B                  <1>     pop rbx
    78 00007AAA 48CF                <1>     iretq
    79                              <1> 
    80                              <1> multiplexTest:
    81 00007AAC B0FF                <1>     mov al, -1
    82 00007AAE C3                  <1>     ret
    83                              <1> 
    84                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    85                              <1> ;Return: r8 = Dos Data Segment Pointer
    86 00007AAF 4C8D05(00000000)    <1>     lea r8, dosDataArea
    87                              <1>     return
    13                              <2> %%_ret:
    14 00007AB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    90                              <1> ;Input: cl = open mode
    91                              <1> ;       rdx -> Ptr to filename to open
    92                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    93 00007AB7 88C8                <1>     mov al, cl
    94 00007AB9 E836B7FFFF          <1>     call openFileHdl
    95                              <1>     return
    13                              <2> %%_ret:
    14 00007ABE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    96                              <1> 
    97                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    98                              <1> ;Input:  
    99                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   100                              <1> ;   ebx = Handle to move (lower word only)
   101                              <1> ;   ecx = Number of bytes to move
   102                              <1> ;   edx = 0 (upper dword, reserved for now)
   103                              <1> ;Return:
   104                              <1> ;   eax = New pointer location
   105                              <1> ;   edx = 0
   106 00007ABF FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   107 00007AC5 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   108 00007ACC 488905(7A040000)    <1>     mov qword [oldRSP], rax
   109 00007AD3 89E8                <1>     mov eax, ebp
   110 00007AD5 E82BB9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   111 00007ADA 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   112                              <1>     return
    13                              <2> %%_ret:
    14 00007AE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   115                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   116                              <1> ; low byte of bp.
   117 00007AE1 FF35(7A040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   118 00007AE7 488D05(D61A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   119 00007AEE 488905(7A040000)    <1>     mov qword [oldRSP], rax
   120 00007AF5 89E8                <1>     mov eax, ebp
   121 00007AF7 E8DCD2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   122 00007AFC 8F05(7A040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   123                              <1>     return  
    13                              <2> %%_ret:
    14 00007B02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> mpxChecksum:
   126                              <1> ;Computes the checksum of a number of bytes in memory
   127                              <1> ;Input: edx = Start value for checksum
   128                              <1> ;       ecx = number of bytes to sum
   129                              <1> ;       rsi -> Ptr to byte array to perform sum on
   130 00007B03 31C0                <1>     xor eax, eax
   131 00007B05 67E307              <1>     jecxz .exit
   132                              <1> .lp:
   133 00007B08 AC                  <1>     lodsb
   134 00007B09 01C2                <1>     add edx, eax
   135 00007B0B FFC9                <1>     dec ecx
   136 00007B0D 75F9                <1>     jnz .lp
   137                              <1> .exit:
   138                              <1>     return
    13                              <2> %%_ret:
    14 00007B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   139                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   140                              <1> ;Sums the values in a number of bytes in memory
   141                              <1> ;Input: rsi -> Byte array to sum values of
   142                              <1> ;       edx = Value limit (for the sum)
   143                              <1> ;       ecx = 0
   144 00007B10 31C0                <1>     xor eax, eax
   145                              <1> .lp:
   146 00007B12 AC                  <1>     lodsb
   147 00007B13 39C2                <1>     cmp edx, eax
   148                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B15 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   149 00007B17 29C2                <1>     sub edx, eax
   150 00007B19 FFC1                <1>     inc ecx
   151 00007B1B EBF5                <1>     jmp short .lp
    47                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007B1D B801000000          <1>     mov eax, errInvFnc
     6 00007B22 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007B29 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007B2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007B2B E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007B30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007B31 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007B32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007B33 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007B39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007B3A FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007B40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007B41 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007B48 53                  <1>     push rbx
    34 00007B49 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007B4F 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B50 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007B52 E806000000          <1>     call shareRetryCountdown
    38 00007B57 FFCB                <1>     dec ebx
    39 00007B59 75ED                <1>     jnz .mainLoop
    40 00007B5B F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007B5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007B5D F605(01070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B64 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007B66 51                  <1>     push rcx
    49 00007B67 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007B6E 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007B71 51                  <1>     push rcx
    53 00007B72 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007B74 66FFC9              <1>     dec cx
    56 00007B77 75FB                <1>     jnz .mainLoop
    57 00007B79 59                  <1>     pop rcx
    58 00007B7A FFC9                <1>     dec ecx
    59 00007B7C 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007B7E 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007B7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007B80 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007B86 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007B88 50                  <1>     push rax
    69 00007B89 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007B8D 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007B92 58                  <1>     pop rax
    72 00007B93 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007B95 E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007B9A 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 00007B9C B820000000          <1>     mov eax, errShrVio
    78 00007BA1 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007BA3 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007BA4 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007BAB 488B3D(31070000)    <1>     mov rdi, qword [currentSFT]
    93 00007BB2 31C0                <1>     xor eax, eax
    94 00007BB4 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007BBA 51                  <1>     push rcx
    96 00007BBB E873FFFFFF          <1>     call openShareCallWrapper
    97 00007BC0 59                  <1>     pop rcx
    98 00007BC1 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007BC3 E895FFFFFF          <1>     call shareRetryCountdown
   100 00007BC8 FFC9                <1>     dec ecx
   101 00007BCA 75DF                <1>     jnz .keepLooping
   102 00007BCC E841000000          <1>     call shareCriticalError
   103 00007BD1 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007BD3 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007BD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007BD5 C605(FF060000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007BDC EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007BDE C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007BE5 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007BEB 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007BED 50                  <1>     push rax
   119 00007BEE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007BF2 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007BF7 58                  <1>     pop rax
   122 00007BF8 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007BFA E80B000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007BFF 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   126                              <1> .notInCompatMode:
   127 00007C01 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007C03 B821000000          <1>     mov eax, errLokVio
   129 00007C08 F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007C0A 57                  <1>     push rdi
   135 00007C0B B821000000          <1>     mov eax, errLokVio
   136 00007C10 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007C12 57                  <1>     push rdi
   141 00007C13 C605(FF060000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007C1A C605(67040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00007C21 488B2D(09070000)    <1>     mov rbp, qword [workingDPB] 
   145 00007C28 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00007C2A E8B2E7FFFF          <1>     call diskDevErr
   147 00007C2F 5F                  <1>     pop rdi
   148 00007C30 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007C32 74D5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00007C34 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00007C35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  ;These driver files are to be written by an OEM.
    49                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00007C36 [587C000000000000]  <1>     dq auxHdr
     7 00007C3E 1380                <1>     dw 08013h
     8 00007C40 [D67D000000000000]  <1>     dq commonStrat
     9 00007C48 [DE7D000000000000]  <1>     dq conDriver
    10 00007C50 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007C58 [7A7C000000000000]  <1>     dq prnHdr
    13 00007C60 0080                <1>     dw 08000h
    14 00007C62 [D67D000000000000]  <1>     dq commonStrat
    15 00007C6A [D380000000000000]  <1>     dq com1Intr
    16 00007C72 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007C7A [9C7C000000000000]  <1>     dq clkHdr
    19 00007C82 40A0                <1>     dw 0A040h
    20 00007C84 [0B6A000000000000]  <1>     dq nulStrat
    21 00007C8C [116A000000000000]  <1>     dq nulIntr
    22 00007C94 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007C9C [BE7C000000000000]  <1>     dq msdHdr
    25 00007CA4 0880                <1>     dw 08008h
    26 00007CA6 [D67D000000000000]  <1>     dq commonStrat
    27 00007CAE [497F000000000000]  <1>     dq clkDriver
    28 00007CB6 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007CBE [E07C000000000000]  <1>     dq com1Hdr
    31 00007CC6 4008                <1>     dw 00840h   
    32 00007CC8 [D67D000000000000]  <1>     dq commonStrat
    33 00007CD0 [5B82000000000000]  <1>     dq msdDriver
    34 00007CD8 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007CE0 [027D000000000000]  <1>     dq com2Hdr
    37 00007CE8 0080                <1>     dw 08000h
    38 00007CEA [D67D000000000000]  <1>     dq commonStrat
    39 00007CF2 [D380000000000000]  <1>     dq com1Intr
    40 00007CFA 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007D02 [247D000000000000]  <1>     dq com3Hdr
    43 00007D0A 0080                <1>     dw 08000h
    44 00007D0C [D67D000000000000]  <1>     dq commonStrat
    45 00007D14 [DC80000000000000]  <1>     dq com2Intr
    46 00007D1C 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 00007D24 [467D000000000000]  <1>     dq com4Hdr
    49 00007D2C 0080                <1>     dw 08000h
    50 00007D2E [D67D000000000000]  <1>     dq commonStrat
    51 00007D36 [E580000000000000]  <1>     dq com3Intr
    52 00007D3E 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007D46 [687D000000000000]  <1>     dq lpt1Hdr
    55 00007D4E 0080                <1>     dw 08000h
    56 00007D50 [D67D000000000000]  <1>     dq commonStrat
    57 00007D58 [EE80000000000000]  <1>     dq com4Intr
    58 00007D60 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007D68 [8A7D000000000000]  <1>     dq lpt2Hdr
    61 00007D70 40A0                <1>     dw 0A040h
    62 00007D72 [0B6A000000000000]  <1>     dq nulStrat
    63 00007D7A [116A000000000000]  <1>     dq nulIntr
    64 00007D82 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007D8A [AC7D000000000000]  <1>     dq lpt3Hdr
    67 00007D92 40A0                <1>     dw 0A040h
    68 00007D94 [0B6A000000000000]  <1>     dq nulStrat
    69 00007D9C [116A000000000000]  <1>     dq nulIntr
    70 00007DA4 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007DAC FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007DB4 40A0                <1>     dw 0A040h
    74 00007DB6 [0B6A000000000000]  <1>     dq nulStrat
    75 00007DBE [116A000000000000]  <1>     dq nulIntr
    76 00007DC6 4C50543320202020    <1>     dq "LPT3    "
    77 00007DCE 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    50                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007DD6 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007DDD C3                  <1>     ret
     5                              <1> conDriver:
     6 00007DDE 50                  <1>     push rax
     7 00007DDF 53                  <1>     push rbx
     8 00007DE0 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007DE7 B003                <1>     mov al, 03h ;Unknown Command
    10 00007DE9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007DED 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007DEF 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007DF2 84C0                <1>     test al, al
    15 00007DF4 7445                <1>     jz .conInit
    16 00007DF6 3C04                <1>     cmp al, 4
    17 00007DF8 745B                <1>     jz .conRead
    18 00007DFA 3C05                <1>     cmp al, 5
    19 00007DFC 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007E02 3C06                <1>     cmp al, 6
    21 00007E04 0F84C2000000        <1>     jz .conInputStatus
    22 00007E0A 3C07                <1>     cmp al, 7
    23 00007E0C 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007E12 3C08                <1>     cmp al, 8
    25 00007E14 0F84E4000000        <1>     jz .conWrite
    26 00007E1A 3C09                <1>     cmp al, 9
    27 00007E1C 0F84DC000000        <1>     jz .conWrite
    28 00007E22 3C0A                <1>     cmp al, 0Ah
    29 00007E24 0F84FD000000        <1>     jz .conOutputStatus
    30 00007E2A EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007E2C B480                <1>     mov ah, 80h ;Set error bit
    33 00007E2E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 00007E32 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00007E38 5B                  <1>     pop rbx
    37 00007E39 58                  <1>     pop rax
    38 00007E3A C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00007E3B B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00007E3D F60510000000FF      <1>     test byte [.conInitDone], -1
    42 00007E44 75EC                <1>     jnz short .conExit
    43 00007E46 E8F60B0000          <1>     call conInit
    44 00007E4B C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 00007E52 EBDE                <1>     jmp short .conExit
    46 00007E54 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 00007E55 B005                <1>     mov al, 05h ;Bad request structure length?
    50 00007E57 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00007E5A 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00007E5C 57                  <1>     push rdi
    54 00007E5D 51                  <1>     push rcx
    55 00007E5E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 00007E62 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 00007E64 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00007E67 741C                <1>     je .cre2
    60 00007E69 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 00007E70 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 00007E72 31C0                <1>     xor eax, eax
    63 00007E74 CD36                <1>     int 36h
    64                              <1> .cre11:
    65 00007E76 AA                  <1>     stosb
    66 00007E77 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00007E79 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00007E7B 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 00007E81 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 00007E83 EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 00007E85 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00007E88 59                  <1>     pop rcx
    75 00007E89 5F                  <1>     pop rdi
    76 00007E8A EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00007E8C 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 00007E92 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007E99 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007E9B B005                <1>     mov al, 05h ;Bad request structure length?
    84 00007E9D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00007EA0 758A                <1>     jne .conWriteErrorCode
    86 00007EA2 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007EA9 7519                <1>     jnz .cnr2
    88 00007EAB B401                <1>     mov ah, 01h     ;Get key if exists
    89 00007EAD CD36                <1>     int 36h
    90 00007EAF 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 00007EB1 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 00007EB4 E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007EB9 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00007EBF E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 00007EC4 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007ECA EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00007ECC B005                <1>     mov al, 05h ;Bad request structure length?
   104 00007ECE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 00007ED1 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007ED7 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 00007EDC B005                <1>     mov al, 05h ;Bad request structure length?
   110 00007EDE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 00007EE1 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007EE7 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 00007EEE B401                <1>     mov ah, 01      ;Get buffer status
   115 00007EF0 CD36                <1>     int 36h
   116 00007EF2 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007EF8 30E4                <1>     xor ah, ah
   118 00007EFA CD36                <1>     int 36h ;Read key to flush from buffer
   119 00007EFC EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 00007EFE B005                <1>     mov al, 05h ;Bad request structure length?
   123 00007F00 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 00007F03 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007F09 56                  <1>     push rsi
   127 00007F0A 51                  <1>     push rcx
   128 00007F0B 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 00007F0F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 00007F11 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 00007F14 7407                <1>     je .cw2
   133 00007F16 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007F17 CD29                <1>     int 29h ;Fast print char
   135 00007F19 FFC1                <1>     inc ecx
   136 00007F1B EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 00007F1D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 00007F20 59                  <1>     pop rcx
   140 00007F21 5E                  <1>     pop rsi
   141 00007F22 E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 00007F27 B005                <1>     mov al, 05h ;Bad request structure length?
   144 00007F29 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 00007F2C 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 00007F32 E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00007F37 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00007F38 50                  <1>     push rax
   152 00007F39 B40E                <1>     mov ah, 0Eh
   153 00007F3B CD30                <1>     int 30h
   154 00007F3D 58                  <1>     pop rax
   155 00007F3E 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 00007F40 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00007F47 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00007F49 50                  <1>     push rax
   163 00007F4A 53                  <1>     push rbx
   164 00007F4B 51                  <1>     push rcx
   165 00007F4C 52                  <1>     push rdx
   166 00007F4D 56                  <1>     push rsi
   167 00007F4E 55                  <1>     push rbp
   168 00007F4F 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 00007F56 B003                <1>     mov al, 03h ;Unknown Command
   170 00007F58 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00007F5C 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00007F5E 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 00007F61 84C0                <1>     test al, al
   175 00007F63 743B                <1>     jz .clkInit
   176 00007F65 3C04                <1>     cmp al, 04h
   177 00007F67 7451                <1>     jz .clkRead
   178 00007F69 3C06                <1>     cmp al, 06h
   179 00007F6B 0F84AE000000        <1>     jz .clkInputStatus
   180 00007F71 3C07                <1>     cmp al, 07h
   181 00007F73 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00007F79 3C08                <1>     cmp al, 08h
   183 00007F7B 0F84BE000000        <1>     jz .clkWrite
   184 00007F81 3C09                <1>     cmp al, 09h
   185 00007F83 0F84B6000000        <1>     jz .clkWrite
   186 00007F89 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00007F8B B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00007F8D B480                <1>     mov ah, 80h ;Set error bit
   191 00007F8F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 00007F93 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007F99 5D                  <1>     pop rbp
   195 00007F9A 5E                  <1>     pop rsi
   196 00007F9B 5A                  <1>     pop rdx
   197 00007F9C 59                  <1>     pop rcx
   198 00007F9D 5B                  <1>     pop rbx
   199 00007F9E 58                  <1>     pop rax
   200 00007F9F C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00007FA0 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 00007FA2 F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007FA9 75E8                <1>     jnz short .clkExit
   205 00007FAB E8F20A0000          <1>     call clockInit
   206 00007FB0 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007FB7 EBDA                <1>     jmp short .clkExit
   208 00007FB9 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007FBA B005                <1>     mov al, 05h ;Bad request structure length?
   212 00007FBC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00007FBF 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 00007FC1 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00007FC4 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00007FC8 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00007FCF 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00007FD3 30E4                <1>     xor ah, ah
   220 00007FD5 CD3A                <1>     int 3Ah         ;Read the system timer
   221 00007FD7 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00007FD9 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00007FDB 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 00007FDD 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 00007FE1 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00007FE8 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00007FEB 0FB7D2              <1>     movzx edx, dx
   230 00007FEE 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 00007FF0 89D0                <1>     mov eax, edx
   232 00007FF2 31D2                <1>     xor edx, edx
   233 00007FF4 89D8                <1>     mov eax, ebx
   234 00007FF6 B944040000          <1>     mov ecx, 1092   
   235 00007FFB F7F1                <1>     div ecx
   236 00007FFD 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 00008000 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 00008002 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00008006 31D2                <1>     xor edx, edx
   240 00008008 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 0000800D F7F1                <1>     div ecx
   242 0000800F 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 00008012 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00008014 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00008017 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 0000801A E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 0000801F B005                <1>     mov al, 05h ;Bad request structure length?
   253 00008021 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 00008024 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 0000802A E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 0000802F B005                <1>     mov al, 05h ;Bad request structure length?
   259 00008031 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 00008034 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 0000803A E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 0000803F B005                <1>     mov al, 05h ;Bad request structure length?
   265 00008041 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 00008044 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 0000804A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 0000804D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 00008051 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 00008055 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 0000805C 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 0000805E 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 00008062 B105                <1>     mov cl, 5
   276 00008064 F6F1                <1>     div cl          ;Divide al by 5
   277 00008066 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 00008068 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 0000806A 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 0000806D B912000000          <1>     mov ecx, 18
   283 00008072 F7E1                <1>     mul ecx  
   284 00008074 01C3                <1>     add ebx, eax
   285                              <1> 
   286 00008076 31D2                <1>     xor edx, edx
   287 00008078 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 0000807C B944040000          <1>     mov ecx, 1092
   289 00008081 F7E1                <1>     mul ecx
   290 00008083 01C3                <1>     add ebx, eax
   291 00008085 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 00008087 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 0000808B B401                <1>     mov ah, 01h     ;Set the system time
   294 0000808D CD3A                <1>     int 3Ah
   295                              <1> 
   296 0000808F 4889F3              <1>     mov rbx, rsi
   297 00008092 E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00008097 51                  <1>     push rcx
   303 00008098 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 0000809B 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 0000809D 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 000080A2 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 000080A8 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 000080AB 050A000000          <1>     add eax, 10
   310 000080B0 E2F9                <1>     loop .cbth0
   311 000080B2 59                  <1>     pop rcx
   312 000080B3 C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 000080B4 51                  <1>     push rcx
   318 000080B5 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 000080B8 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 000080BA 3D0A000000          <1>     cmp eax, 10
   322 000080BF 7209                <1>     jb .chtb1
   323 000080C1 2D0A000000          <1>     sub eax, 10
   324 000080C6 FFC1                <1>     inc ecx
   325 000080C8 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 000080CA C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 000080CD 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 000080CF 59                  <1>     pop rcx
   330 000080D0 C3                  <1>     ret
   331 000080D1 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 000080D3 C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 000080DA EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 000080DC C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 000080E3 EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 000080E5 C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 000080EC EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 000080EE C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 000080F5 50                  <1>     push rax
   347 000080F6 53                  <1>     push rbx
   348 000080F7 51                  <1>     push rcx
   349 000080F8 52                  <1>     push rdx
   350 000080F9 56                  <1>     push rsi
   351 000080FA 57                  <1>     push rdi
   352 000080FB 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 00008102 B003                <1>     mov al, 03h ;Unknown Command
   354 00008104 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 00008108 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 0000810A 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 0000810D 84C0                <1>     test al, al
   359 0000810F 745B                <1>     jz short .comExit
   360 00008111 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 00008113 7464                <1>     jz .comRead
   362 00008115 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 00008117 0F849D000000        <1>     jz .comNondestructiveRead   
   364 0000811D 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 0000811F 0F8486000000        <1>     jz .comReadInputStatus
   366 00008125 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 00008127 0F849C000000        <1>     jz .comFlushInputBuffers
   368 0000812D 3C08                <1>     cmp al, 8
   369 0000812F 0F84BA000000        <1>     jz .comWrite
   370 00008135 3C09                <1>     cmp al, 9
   371 00008137 0F84B2000000        <1>     jz .comWrite
   372 0000813D 3C0A                <1>     cmp al, 0Ah
   373 0000813F 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 00008145 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00008147 B002                <1>     mov al, 02h ;Unknown device
   377 00008149 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 0000814B BA0B000000          <1>     mov edx, 0Bh
   380 00008150 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 00008152 BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00008157 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 0000815A B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 0000815F 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 00008161 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 00008164 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 00008166 B480                <1>     mov ah, 80h ;Set error bit
   391 00008168 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 0000816C 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 00008172 5F                  <1>     pop rdi
   395 00008173 5E                  <1>     pop rsi
   396 00008174 5A                  <1>     pop rdx
   397 00008175 59                  <1>     pop rcx
   398 00008176 5B                  <1>     pop rbx
   399 00008177 58                  <1>     pop rax
   400 00008178 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 00008179 B005                <1>     mov al, 05h ;Bad request structure length?
   404 0000817B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 0000817E 75E6                <1>     jne .comWriteErrorCode
   406 00008180 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 00008184 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 00008186 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 00008189 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 0000818B B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 00008190 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00008197 F8                  <1>     clc
   415 00008198 CD34                <1>     int 34h ;Recieve Char
   416 0000819A 72BB                <1>     jc .comError
   417 0000819C 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 0000819F 74EA                <1>     je .cr11
   419 000081A1 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 000081A2 FFC1                <1>     inc ecx
   421 000081A4 EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 000081A6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 000081A9 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 000081AB B005                <1>     mov al, 05h ;Bad request structure length?
   428 000081AD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 000081B0 75B4                <1>     jne .comWriteErrorCode
   430 000081B2 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 000081B8 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 000081BA B005                <1>     mov al, 05h ;Bad request structure length?
   436 000081BC 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 000081BF 75A5                <1>     jne .comWriteErrorCode
   438 000081C1 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 000081C7 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 000081C9 B005                <1>     mov al, 05h ;Bad request structure length?
   443 000081CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 000081CE 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 000081D0 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 000081D7 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 000081DC F8                  <1>     clc
   449 000081DD CD34                <1>     int 34h
   450 000081DF 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 000081E5 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 000081E8 75E6                <1>     jne .cfib0
   453 000081EA E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 000081EF B005                <1>     mov al, 05h ;Bad request structure length?
   457 000081F1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 000081F4 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 000081FA 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 000081FE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 00008200 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 00008203 7417                <1>     je .cw2
   465 00008205 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 00008206 B401                <1>     mov ah, 01h ;Move function number into ah
   467 00008208 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 0000820F F8                  <1>     clc
   469 00008210 CD34                <1>     int 34h ;Transmit char
   470 00008212 0F823FFFFFFF        <1>     jc .comError
   471 00008218 FFC1                <1>     inc ecx
   472 0000821A EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 0000821C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 0000821F E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 00008224 B005                <1>     mov al, 05h ;Bad request structure length?
   480 00008226 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 00008229 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 0000822F 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 00008236 B403                <1>     mov ah, 03h     ;Get status
   485 00008238 F8                  <1>     clc
   486 00008239 CD34                <1>     int 34h
   487 0000823B 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 00008241 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 00008246 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00008249 F7D0                <1>     not eax      ;Bitwise inversion
   491 0000824B 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00008250 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 00008255 E912FFFFFF          <1>     jmp .comExit
   494 0000825A 00                  <1> .comDevice   db 0
    51                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 0000825B 50                  <1>     push rax
     3 0000825C 53                  <1>     push rbx
     4 0000825D 51                  <1>     push rcx
     5 0000825E 52                  <1>     push rdx
     6 0000825F 56                  <1>     push rsi
     7 00008260 57                  <1>     push rdi
     8 00008261 55                  <1>     push rbp
     9 00008262 4150                <1>     push r8
    10 00008264 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 0000826B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 0000826F B003                <1>     mov al, drvBadCmd
    13 00008271 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 00008277 B001                <1>     mov al, drvBadUnit 
    15 00008279 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 0000827D 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00008283 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 0000828A 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 0000828E C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 00008291 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00008295 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00008299 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 0000829B 488D0DA1000000      <1>     lea rcx, .msdTable
    24 000082A2 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 000082A6 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 000082A8 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 000082AA 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 000082AD FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 000082AF 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 000082B5 4158                <1>     pop r8
    32 000082B7 5D                  <1>     pop rbp
    33 000082B8 5F                  <1>     pop rdi
    34 000082B9 5E                  <1>     pop rsi
    35 000082BA 5A                  <1>     pop rdx
    36 000082BB 59                  <1>     pop rcx
    37 000082BC 5B                  <1>     pop rbx
    38 000082BD 58                  <1>     pop rax
    39 000082BE C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 000082BF 4889FB              <1>     mov rbx, rdi
    43 000082C2 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 000082C5 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 000082C7 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 000082CA 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 000082D1 B401                <1>     mov ah, 01h
    50 000082D3 CD33                <1>     int 33h ;Read status of last operation
    51 000082D5 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 000082D8 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 000082DA 7460                <1>     je .msdWriteErrorCode 
    54 000082DC B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 000082DE 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 000082E1 7459                <1>     je .msdWriteErrorCode 
    57 000082E3 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 000082E6 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 000082E8 B002                <1>     mov al, 02h  ;Device not ready code
    61 000082EA 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 000082ED 744D                <1>     je .msdWriteErrorCode
    63 000082EF 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 000082F3 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 000082F7 30C0                <1>     xor al, al
    67 000082F9 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 000082FE 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 00008300 B004                <1>     mov al, 04h     ;CRC error code
    71 00008302 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 00008307 7433                <1>     je .msdWriteErrorCode
    73 00008309 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 0000830E 742C                <1>     je .msdWriteErrorCode
    75 00008310 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 00008315 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 00008317 B006                <1>     mov al, 06h     ;Seek error code
    79 00008319 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 0000831C 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 0000831E B007                <1>     mov al, 07h
    84 00008320 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 00008323 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 00008325 B008                <1>     mov al, 08h     ;Sector not found code
    88 00008327 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 0000832A 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 0000832C B00A                <1>     mov al, 0Ah     ;Write fault
    92 0000832E 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 00008331 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 00008333 B00B                <1>     mov al, 0Bh     ;Read fault
    96 00008335 80F911              <1>     cmp cl, 11h     ;Read error
    97 00008338 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 0000833A B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 0000833C B480                <1>     mov ah, 80h ;Set error bit
   102 0000833E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00008342 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00008343 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 00008345 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 00008347 AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 00008349 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 0000834B 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 0000834D 0000                <1>     dw 0                            ;Function 5
   111 0000834F 0000                <1>     dw 0                            ;Function 6
   112 00008351 0000                <1>     dw 0                            ;Function 7
   113 00008353 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 00008355 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 00008357 0000                <1>     dw 0                            ;Function 10
   116 00008359 0000                <1>     dw 0                            ;Function 11
   117 0000835B D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 0000835D DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 0000835F F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 00008361 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00008363 0000                <1>     dw 0                            ;Function 16
   122 00008365 0000                <1>     dw 0                            ;Function 17
   123 00008367 0000                <1>     dw 0                            ;Function 18
   124 00008369 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 0000836B 0000                <1>     dw 0                            ;Function 20
   126 0000836D 0000                <1>     dw 0                            ;Function 21
   127 0000836F 0000                <1>     dw 0                            ;Function 22
   128 00008371 E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00008373 F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 00008375 53                  <1>     push rbx
   132 00008376 4157                <1>     push r15
   133 00008378 E8A3070000          <1>     call msdInit
   134 0000837D 415F                <1>     pop r15
   135 0000837F 5B                  <1>     pop rbx
   136 00008380 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 00008389 C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 0000838A B005                <1>     mov al, 05h ;Bad request structure length
   141 0000838C 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 0000838F 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 00008391 E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 00008396 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 00008398 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 0000839D 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 000083A4 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 000083A7 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 000083AA 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 000083AC B416                <1>     mov ah, 16h 
   153 000083AE CD33                <1>     int 33h
   154 000083B0 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 000083B6 80FC80              <1>     cmp ah, 80h
   156 000083B9 740E                <1>     je .mmcNoChangeLine
   157 000083BB 80FC86              <1>     cmp ah, 86h
   158 000083BE 7409                <1>     je .mmcNoChangeLine
   159 000083C0 84E4                <1>     test ah, ah ;No change?
   160 000083C2 7427                <1>     jz .mmcNoChange
   161 000083C4 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 000083C7 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 000083C9 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 000083CE 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 000083D1 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 000083D4 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 000083D6 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 000083DA 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 000083E1 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 000083E5 C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 000083E6 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 000083EA C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 000083EB C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 000083EF C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 000083F0 B005                <1>     mov al, 05h ;Bad request structure length
   186 000083F2 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 000083F5 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 000083FB 4889DE              <1>     mov rsi, rbx
   190 000083FE 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 00008403 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 0000840A 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 0000840D 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 00008411 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 00008413 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 00008416 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 0000841B CD33                <1>     int 33h
   198 0000841D 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 00008423 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 00008427 7418                <1>     je .mbbpb0
   202 00008429 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 0000842D 7412                <1>     je .mbbpb0
   204 0000842F 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 00008433 740C                <1>     je .mbbpb0
   206 00008435 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 00008439 B007                <1>     mov al, 07h ;Unknown media error code
   208 0000843B 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00008441 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 00008444 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 00008447 B90F000000          <1>     mov ecx, bpbEx_size/8
   213 0000844C F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 0000844F C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00008450 B005                <1>     mov al, drvBadDrvReq
   217 00008452 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 00008455 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 0000845B C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 0000845C B005                <1>     mov al, 05h ;Bad request structure length
   223 0000845E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 00008461 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 00008467 E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 0000846C 4889DF              <1>     mov rdi, rbx
   229 0000846F 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 00008471 B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 00008473 E8D7010000          <1>     call .msdBlkIOCommon
   233 00008478 0F8241FEFFFF        <1>     jc .msdIOError
   234 0000847E 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 00008482 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 00008486 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 0000848A FFC6                <1>     inc esi
   238 0000848C 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 0000848F 75E0                <1>     jne .msdr0
   240 00008491 4889FB              <1>     mov rbx, rdi
   241 00008494 C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 00008495 B005                <1>     mov al, 05h ;Bad request structure length
   245 00008497 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 0000849A 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 000084A0 E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 000084A5 4889DF              <1>     mov rdi, rbx
   251 000084A8 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 000084AA B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 000084AC E89E010000          <1>     call .msdBlkIOCommon
   255 000084B1 0F8208FEFFFF        <1>     jc .msdIOError
   256 000084B7 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 000084BB 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 000084BF 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 000084C3 FFC6                <1>     inc esi
   260 000084C5 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 000084C8 75E0                <1>     jne .msdw0
   262 000084CA 4889FB              <1>     mov rbx, rdi
   263 000084CD C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 000084CE B005                <1>     mov al, 05h ;Bad request structure length
   267 000084D0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 000084D3 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 000084D9 E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 000084DE 4889DF              <1>     mov rdi, rbx
   273 000084E1 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 000084E3 B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 000084E5 E865010000          <1>     call .msdBlkIOCommon
   277 000084EA 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 000084F0 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 000084F2 E858010000          <1>     call .msdBlkIOCommon
   280 000084F7 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 000084FD 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 00008501 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 00008505 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 00008509 FFC6                <1>     inc esi
   285 0000850B 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 0000850E 75D3                <1>     jne .msdwv0
   287 00008510 4889FB              <1>     mov rbx, rdi
   288 00008513 C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 00008514 B005                <1>     mov al, drvBadDrvReq
   291 00008516 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00008519 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 0000851F C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 00008520 B005                <1>     mov al, drvBadDrvReq
   297 00008522 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 00008525 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 0000852B 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 00008530 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 00008537 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 0000853A C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 0000853B B005                <1>     mov al, drvBadDrvReq
   306 0000853D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00008540 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 00008546 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 0000854B 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00008552 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 00008555 C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 00008556 B005                <1>     mov al, drvBadDrvReq
   315 00008558 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 0000855B 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 00008561 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 00008566 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 0000856D 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 00008571 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 00008576 C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 00008579 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 0000857D C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 0000857E B005                <1>     mov al, drvBadDrvReq
   327 00008580 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 00008583 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 00008589 B003                <1>     mov al, drvBadCmd
   332 0000858B 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 0000858F 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 00008592 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 00008598 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 0000859B 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 000085A1 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 000085A4 80F941              <1>     cmp cl, 41h     
   339 000085A7 743F                <1>     je .msdGIOCTLWrite
   340 000085A9 80F942              <1>     cmp cl, 42h
   341 000085AC 7451                <1>     je .msdGIOCTLFormat
   342 000085AE 80F960              <1>     cmp cl, 60h
   343 000085B1 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 000085B7 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 000085BB 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 000085C2 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 000085C5 B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 000085C7 53                  <1>     push rbx
   350 000085C8 CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 000085CA 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 000085CD 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 000085CE 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 000085D4 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 000085D8 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 000085DF 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 000085E3 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 000085E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 000085E8 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 000085ED 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 000085F1 B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 000085F3 CD33                <1>     int 33h
   380 000085F5 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 000085FB 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 000085FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 000085FF E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 00008604 B485                <1>     mov ah, 85h
   392 00008606 EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 00008608 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 0000860C 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 00008613 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 00008616 4889DE              <1>     mov rsi, rbx
   405 00008619 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 0000861D 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 00008620 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 00008624 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 00008625 B005                <1>     mov al, drvBadDrvReq
   412 00008627 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 0000862A 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 00008630 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 00008636 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 00008639 C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 0000863A B005                <1>     mov al, drvBadDrvReq
   420 0000863C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 0000863F 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 00008645 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 00008648 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 0000864E C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 0000864F 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 00008654 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 0000865B 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 0000865E 31C9                <1>     xor ecx, ecx
   437 00008660 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 00008663 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 00008667 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 0000866B 88F4                <1>     mov ah, dh
   441 0000866D B001                <1>     mov al, 01h ;Do one sector at a time 
   442 0000866F CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 00008671 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 00008672 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 00008676 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000867C 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 0000867E 3C02                <1>     cmp al, 2
   456 00008680 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 00008682 F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 00008689 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 0000868B 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 00008691 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 00008693 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 00008699 0441                <1>     add al, "A" ;Convert to a letter
   464 0000869B 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 000086A1 488D3520000000      <1>     lea rsi, .msdStrike
   466 000086A8 B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 000086AD AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 000086AE CD29                <1>     int 29h ;Print char in al
   470 000086B0 FFC9                <1>     dec ecx
   471 000086B2 75F9                <1>     jnz .msdCDTprintMessage
   472 000086B4 31C0                <1>     xor eax, eax
   473 000086B6 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 000086B8 E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 000086BD FFC0                <1>     inc eax ;Clear ZF
   477 000086BF C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 000086C0 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 000086C5 31C0                <1>     xor eax, eax
   481 000086C7 C3                  <1>     ret
   482                              <1> 
   483 000086C8 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 000086D1 666F72206472697665- <1>
   483 000086DA 20                  <1>
   484 000086DB 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 000086E4 72696B650D0A616E79- <1>
   484 000086ED 206B6579207768656E- <1>
   484 000086F6 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 000086FF 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 00008708 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 00008709 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 0000870A 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 0000870B 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 00008710 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 00008715 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 0000871E 000000000000000000- <1>
   497 00008727 000000000000000000- <1>
   497 00008730 000000000000000000- <1>
   497 00008739 00000000            <1>
   498 0000873D 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 00008746 000000000000000000- <1>
   498 0000874F 000000000000000000- <1>
   498 00008758 000000000000000000- <1>
   498 00008761 000000000000000000- <1>
   498 0000876A 000000000000000000- <1>
   498 00008773 000000000000000000- <1>
   498 0000877C 000000000000000000- <1>
   498 00008785 000000000000000000- <1>
   498 0000878E 000000000000000000- <1>
   498 00008797 000000000000000000- <1>
   498 000087A0 000000000000000000- <1>
   498 000087A9 000000000000000000- <1>
   498 000087B2 000000000000000000- <1>
   498 000087BB 000000000000000000- <1>
   498 000087C4 000000000000000000- <1>
   498 000087CD 000000000000000000- <1>
   498 000087D6 000000000000000000- <1>
   498 000087DF 000000000000000000- <1>
   498 000087E8 000000000000000000- <1>
   498 000087F1 000000000000000000- <1>
   498 000087FA 000000000000000000- <1>
   498 00008803 000000000000000000- <1>
   498 0000880C 000000000000000000- <1>
   498 00008815 000000000000000000- <1>
   498 0000881E 000000000000000000- <1>
   498 00008827 000000000000000000- <1>
   498 00008830 000000000000000000- <1>
   498 00008839 000000000000000000- <1>
   498 00008842 000000000000000000- <1>
   498 0000884B 000000000000000000- <1>
   498 00008854 000000000000000000- <1>
   498 0000885D 000000000000000000- <1>
   498 00008866 000000000000000000- <1>
   498 0000886F 000000000000000000- <1>
   498 00008878 000000000000000000- <1>
   498 00008881 000000000000000000- <1>
   498 0000888A 000000000000000000- <1>
   498 00008893 000000000000000000- <1>
   498 0000889C 000000000000000000- <1>
   498 000088A5 000000000000000000- <1>
   498 000088AE 000000000000000000- <1>
   498 000088B7 000000000000000000- <1>
   498 000088C0 000000000000000000- <1>
   498 000088C9 000000000000000000- <1>
   498 000088D2 000000000000000000- <1>
   498 000088DB 000000000000000000- <1>
   498 000088E4 000000000000000000- <1>
   498 000088ED 000000000000000000- <1>
   498 000088F6 000000000000000000- <1>
   498 000088FF 000000000000000000- <1>
   498 00008908 000000000000000000- <1>
   498 00008911 000000000000000000- <1>
   498 0000891A 000000000000000000- <1>
   498 00008923 000000000000000000- <1>
   498 0000892C 000000000000000000- <1>
   498 00008935 000000000000000000- <1>
   498 0000893E 000000000000000000- <1>
   498 00008947 000000000000000000- <1>
   498 00008950 000000000000000000- <1>
   498 00008959 000000000000000000- <1>
   498 00008962 000000000000000000- <1>
   498 0000896B 000000000000000000- <1>
   498 00008974 000000000000000000- <1>
   498 0000897D 000000000000000000- <1>
   498 00008986 000000000000000000- <1>
   498 0000898F 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 00008995 E9                  <2>  db 0E9h
   175 00008996 00                  <2>  db 00h
   176 00008997 90                  <2>  db 90h
   177 00008998 534350444F537631    <2>  db 'SCPDOSv1'
   178 000089A0 0002                <2>  dw 0200h
   179 000089A2 01                  <2>  db 01h
   180 000089A3 0100                <2>  dw 0001h
   181 000089A5 02                  <2>  db 02h
   182 000089A6 E000                <2>  dw 00E0h
   183 000089A8 400B                <2>  dw 0B40h
   184 000089AA F0                  <2>  db 0F0h
   185 000089AB 0900                <2>  dw 0009h
   186 000089AD 1200                <2>  dw 0012h
   187 000089AF 0200                <2>  dw 0002h
   188 000089B1 00000000            <2>  dd 0
   189 000089B5 00000000            <2>  dd 0
   190 000089B9 00                  <2>  db 00h
   191 000089BA 00                  <2>  db 00h
   192 000089BB 29                  <2>  db 29h
   193 000089BC 00000000            <2>  dd 0
   194 000089C0 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 000089C9 2020                <2>
   195 000089CB 4641543132202020    <2>  db 'FAT12   '
   196 000089D3 000000000000000000- <2>  db 58 dup 0
   196 000089DC 000000000000000000- <2>
   196 000089E5 000000000000000000- <2>
   196 000089EE 000000000000000000- <2>
   196 000089F7 000000000000000000- <2>
   196 00008A00 000000000000000000- <2>
   196 00008A09 00000000            <2>
   500                              <1> endptr equ $
    52                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00008A0D 0F010D23000000      <1>     sidt [myIdt]
     8 00008A14 0FB6C0              <1>     movzx eax, al
     9 00008A17 4892                <1>     xchg rdx, rax
    10 00008A19 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00008A1D 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00008A24 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00008A27 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00008A2B 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00008A2F 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00008A33 894208              <1>     mov dword [rdx + 8], eax
    17 00008A36 C3                  <1>     ret
    18                              <1> myIdt:
    19 00008A37 0000                <1> .limit  dw 0
    20 00008A39 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00008A41 50                  <1>     push rax
    25 00008A42 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00008A43 51                  <1>     push rcx
    27 00008A44 52                  <1>     push rdx
    28 00008A45 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00008A4C B829000000          <1>     mov eax, 29h
    30 00008A51 E8B7FFFFFF          <1>     call installInterrupt
    31 00008A56 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00008A5D B83B000000          <1>     mov eax, 3Bh
    33 00008A62 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00008A67 B401                <1>     mov ah, 01      ;Get buffer status
    36 00008A69 CD36                <1>     int 36h
    37 00008A6B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00008A6D 30E4                <1>     xor ah, ah
    39 00008A6F CD36                <1>     int 36h ;Read key to flush from buffer
    40 00008A71 EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00008A73 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00008A78 CD30                <1>     int 30h
    44 00008A7A B402                <1>     mov ah, 02h
    45 00008A7C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00008A7E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00008A80 CD30                <1>     int 30h
    48 00008A82 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00008A84 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00008A89 CD30                <1>     int 30h
    51 00008A8B 5A                  <1>     pop rdx
    52 00008A8C 59                  <1>     pop rcx
    53 00008A8D 5B                  <1>     pop rbx
    54 00008A8E 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00008A8F 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00008A94 50                  <1>     push rax
    58 00008A95 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00008A9C 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00008AA0 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00008AA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00008AA2 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00008AA3 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00008AA5 CD3A                <1>     int 3Ah
    70 00008AA7 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008AA9 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00008AAC E84D000000          <1>     call .bcd2Bin
    74 00008AB1 88C5                <1>     mov ch, al
    75 00008AB3 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00008AB6 E843000000          <1>     call .bcd2Bin
    77 00008ABB 88C1                <1>     mov cl, al
    78 00008ABD 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008AC0 E839000000          <1>     call .bcd2Bin
    80 00008AC5 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008AC7 89C2                <1>     mov edx, eax
    82 00008AC9 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008ACB CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008ACD B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008ACF CD3A                <1>     int 3Ah
    90 00008AD1 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008AD3 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00008AD6 E823000000          <1>     call .bcd2Bin
    94 00008ADB 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008ADE 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 00008AE4 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008AE7 E812000000          <1>     call .bcd2Bin
    98 00008AEC 88C6                <1>     mov dh, al  
    99 00008AEE 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00008AF1 E808000000          <1>     call .bcd2Bin
   101 00008AF6 88C2                <1>     mov dl, al
   102 00008AF8 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008AFA CD21                <1>     int 21h
   104 00008AFC EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008AFE 51                  <1>     push rcx
   108 00008AFF 89C1                <1>     mov ecx, eax
   109 00008B01 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00008B06 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008B0C 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008B0F C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008B12 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00008B14 FFC9                <1>     dec ecx
   116 00008B16 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008B18 59                  <1>     pop rcx
   119 00008B19 C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008B1A 5B                  <1>     pop rbx ;Get the pointer back
   122 00008B1B E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 00008B20 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 00008B21 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 00008B23 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 00008B27 664489C0            <1>     mov ax, r8w
   139 00008B2B 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 00008B31 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 00008B37 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 00008B3E 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 00008B45 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 00008B4C 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 00008B52 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 00008B5B 00                  <1>
   147 00008B5C B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 00008B5E 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 00008B65 7467                <1>     je .remInit
   151 00008B67 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 00008B69 E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 00008B6E 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 00008B70 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 00008B79 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 00008B7B 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 00008B7D 8A6302              <1>     mov ah, byte [rbx + 2]
   160 00008B80 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 00008B84 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 00008B86 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 00008B8D B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 00008B8F 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 00008B92 3C01                <1>     cmp al, 01
   169 00008B94 7421                <1>     je .primaryFound
   170 00008B96 3C04                <1>     cmp al, 04
   171 00008B98 741D                <1>     je .primaryFound
   172 00008B9A 3C06                <1>     cmp al, 06
   173 00008B9C 7419                <1>     je .primaryFound
   174 00008B9E 3C0B                <1>     cmp al, 0Bh
   175 00008BA0 7415                <1>     je .primaryFound
   176 00008BA2 3C0C                <1>     cmp al, 0Ch
   177 00008BA4 7411                <1>     je .primaryFound
   178 00008BA6 3C0E                <1>     cmp al, 0Eh
   179 00008BA8 740D                <1>     je .primaryFound
   180 00008BAA 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 00008BB1 FEC9                <1>     dec cl
   182 00008BB3 740A                <1>     jz .primaryEpilog
   183 00008BB5 EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 00008BB7 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008BBA E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 00008BBF FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 00008BC1 88D6                <1>     mov dh, dl
   191 00008BC3 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 00008BC6 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 00008BCC 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 00008BCE 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 00008BD5 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 00008BDC 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 00008BDF 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 00008BE3 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 00008BE6 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 00008BE8 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008BEB 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 00008BF2 7508                <1>     jnz .removables
   216 00008BF4 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008BFB C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 00008BFC 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 00008BFE E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 00008C03 FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 00008C05 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008C0B 7412                <1>     je .end
   225 00008C0D 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 00008C14 7503                <1>     jne .re0
   227 00008C16 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 00008C19 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 00008C1D 72DD                <1>     jb .removables
   231                              <1> .end:
   232 00008C1F 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 00008C26 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 00008C28 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 00008C29 50                  <1>     push rax
   238 00008C2A 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 00008C31 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 00008C34 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 00008C3B 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 00008C3F 58                  <1>     pop rax
   243 00008C40 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 00008C45 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 00008C4C 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 00008C52 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 00008C55 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 00008C5C 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 00008C5F 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 00008C63 C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 00008C6A C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 00008C71 FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 00008C77 EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 00008C79 B482                <1>     mov ah, 82h ;Read
   259 00008C7B B001                <1>     mov al, 1   ;One sector
   260 00008C7D 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 00008C84 CD33                <1>     int 33h
   262 00008C86 C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 00008C87 E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00008C8C 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00008C8E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 00008C8F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 00008C91 8A6302              <1>     mov ah, byte [rbx + 2]
   274 00008C94 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008C98 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 00008C9A 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 00008C9D 51                  <1>     push rcx
   279 00008C9E B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 00008CA3 4C89FF              <1>     mov rdi, r15
   281 00008CA6 F348A5              <1>     rep movsq   ;Copy the BPB
   282 00008CA9 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 00008CAA 488D1D5AFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   285 00008CB1 4C01C3              <1>     add rbx, r8
   286                              <1>     ;Add device count to rbx to point to correct entry
   287 00008CB4 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   288 00008CB6 488D1D58FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   289 00008CBD 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   290 00008CC1 4C893B              <1>     mov qword [rbx], r15
   291 00008CC4 49FFC0              <1>     inc r8  ;Goto next logical drive
   292 00008CC7 FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   293 00008CCD 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   294                              <1>     return
    13                              <2> %%_ret:
    14 00008CD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    54                                  Segment drvbss follows=resSeg align=1 nobits
    55                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    56 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    57                                  dosEnd: ;Used to compute the size of resident DOS
    57          ------------------       info: assembly required 1+19+2 passes

