     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date, not 100% supported (consider later)
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E876150000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F8260190000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3D4D0C0000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D310C0000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[891A0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B9DC110000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;           Sanitise the data area               ;
    27                              <1> ;------------------------------------------------;
    28                              <1> ; This call initialises ALL fields in the DOS    ;
    29                              <1> ; data area with 0's. Thus any fields, which     ;
    30                              <1> ; need to be initialised with a 0 value, are     ;
    31                              <1> ; initialised for free.                          ;
    32                              <1> ;------------------------------------------------;
    33 0000026D 488B3D160C0000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    34 00000274 B9[891A0000]        <1>     mov ecx, dSegLen
    35 00000279 30C0                <1>     xor al, al
    36 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    37                              <1> ;------------------------------------------------;
    38                              <1> ;          Kernel inits and adjustments          ;
    39                              <1> ;------------------------------------------------;
    40                              <1> ;Adjust Interrupt Entries Int 00h-15h
    41                              <1> ;Assumes rbp points to DOSSEG
    42 0000027D 0F010DFC0B0000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    43                              <1> adjExceptions:
    44 00000284 488D3DA30A0000      <1>     lea rdi, exceptData
    45 0000028B 31C0                <1>     xor eax, eax             ;Start with interrupt 0
    46 0000028D B915000000          <1>     mov ecx, 21
    47 00000292 E8D0090000          <1>     call setupInterruptBlock
    48                              <1> ;Adjust Interrupt Entries Int 20h-2Fh
    49                              <1> adjInts:
    50 00000297 488D3D400B0000      <1>     lea rdi, intData
    51 0000029E B820000000          <1>     mov eax, 20h            ;Start with interrupt 20h
    52 000002A3 B930000000          <1>     mov ecx, 30h
    53 000002A8 E8BA090000          <1>     call setupInterruptBlock
    54                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    55                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    56                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    57                              <1> ;
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Driver Adjustments and inits          ;
    60                              <1> ;------------------------------------------------;
    61                              <1> ;Modify the pointers in nData before putting them in the data area
    62 000002AD 48012DB40B0000      <1>     add qword [nData + drvHdr.strPtr], rbp
    63 000002B4 48012DB50B0000      <1>     add qword [nData + drvHdr.intPtr], rbp
    64                              <1> ;Copy the Null driver header to its location in Sysvars
    65 000002BB B922000000          <1>     mov ecx, drvHdr_size
    66 000002C0 488D35970B0000      <1>     lea rsi, qword [nData]
    67 000002C7 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    68 000002CE F3A4                <1>     rep movsb   
    69                              <1> 
    70                              <1> ;Adjust the addresses in the other driver headers 
    71 000002D0 488B35D00B0000      <1>     mov rsi, qword [OEMDRVCHAIN]
    72 000002D7 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    73                              <1> adjDrivers:
    74                              <1> ;Input: rsi = Effective address of driver in DOS segment
    75                              <1> ;       rbp = Ptr to the start of the DOS segment
    76                              <1> ;Output: rsi = EA of next header in DOS segment
    77 000002DE 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    78 000002E2 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    79 000002E6 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    80 000002ED 7408                <1>     je short .exit
    81 000002EF 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    82 000002F2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    83 000002F5 EBE7                <1>     jmp short adjDrivers
    84                              <1> .exit:
    85                              <1> ;------------------------------------------------;
    86                              <1> ;                   MCB inits                    ;
    87                              <1> ;------------------------------------------------;
    88                              <1> makeMCBChain:
    89                              <1> ;Fill in Anchor MCB first
    90 000002F7 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
    91 000002FE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
    92 00000305 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
    93 00000308 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
    94 0000030E C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
    95 00000311 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
    96 00000317 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
    96 0000031F 000000              <1>
    97 00000322 C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
    98                              <1> 
    99 00000329 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   100 00000330 488905630B0000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   101 00000337 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   101 0000033C [33000000]          <1>
   102                              <1> 
   103 00000340 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   104 00000341 E89D150000          <1>     call OEMMCBINIT ;Build MCB chain, kernel drvs can allocate... undoc :)
   105 00000346 5D                  <1>     pop rbp
   106 00000347 0F8244180000        <1>     jc OEMHALT
   107                              <1> ;------------------------------------------------;
   108                              <1> ;             Set Default Time/Date              ;
   109                              <1> ;------------------------------------------------;
   110 0000034D C685[8E040000]01    <1>     mov byte [rbp + dayOfMonth], 01     ;Set 1st of Jan
   111 00000354 C685[8F040000]01    <1>     mov byte [rbp + monthOfYear], 01
   112                              <1> ;------------------------------------------------;
   113                              <1> ;              Kernel Driver inits               ;
   114                              <1> ;------------------------------------------------;
   115                              <1> kernDrvInit:
   116                              <1>     ;rbp and fs point to DOSSEG
   117                              <1>     ;Set the CON pointer and the CLOCK pointers.
   118                              <1>     ;The standard defines that kernel drivers are such that the 
   119                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   120                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   121                              <1>     ;GET/SET TIME and GET/SET DATE
   122 0000035B 488B35450B0000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   123 00000362 4889F3              <1>     mov rbx, rsi
   124 00000365 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   125 0000036C 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   126 0000036F 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   127 00000372 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   128 00000375 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   129 0000037C 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   130 0000037F 488D1D350B0000      <1>     lea rbx, initDrvBlk
   131                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   132 00000386 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   132 0000038E 000000              <1>
   133                              <1> .init:
   134 00000391 E81E080000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   135 00000396 0F82F5170000        <1>     jc OEMHALT
   136 0000039C E8DD060000          <1>     call addDriverMarkers   ;Preserves all registers
   137 000003A1 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   138 000003A7 750B                <1>     jnz short .notMSD
   139 000003A9 E874080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   140 000003AE 0F82DD170000        <1>     jc OEMHALT
   141                              <1> .notMSD:
   142 000003B4 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   143 000003B7 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   144 000003BE 75D1                <1>     jne short .init ;If not, goto next driver
   145                              <1> ;Finally, Eject the init routine if so desired by the implementers
   146 000003C0 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   147 000003C7 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   148 000003CE E890070000          <1>     call ejectKernelInit
   149 000003D3 0F82B8170000        <1>     jc OEMHALT
   150                              <1> ;----------------------------------------:
   151                              <1> ;           End of driver inits.         :
   152                              <1> ;----------------------------------------:
   153                              <1> ;
   154                              <1> ;----------------------------------------:
   155                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   156                              <1> ;      So called the OEM BIOS INIT       :
   157                              <1> ;----------------------------------------:
   158                              <1> ;
   159                              <1> ;----------------------------------------:
   160                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   161                              <1> ;----------------------------------------:
   162                              <1> ;
   163                              <1> ;------------------------------------------------;
   164                              <1> ;     Set up general PSP areas and DOS vars      ;
   165                              <1> ;------------------------------------------------;
   166                              <1> ;Ensure to link the default DOS vCON edit key
   167                              <1> ; controller routines before proceeding
   168 000003D9 488D85[822B0000]    <1>     lea rax, qword [rbp + editKeys]
   169 000003E0 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   169 000003E5 [32000000]          <1>
   170                              <1> 
   171                              <1> ;Additional DOS Vars init and fixups
   172 000003E9 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   172 000003F1 FF                  <1>
   173 000003F2 6466C70425-         <1>     mov word fs:[currentNdx], -1    ;Has to be -1 initially
   173 000003F7 [3A070000]FFFF      <1>
   174 000003FD 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   174 00000405 00                  <1>
   175 00000406 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   175 0000040E 00                  <1>
   176 0000040F 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   176 00000417 2F                  <1>
   177 00000418 488DBD[4D650000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   178 0000041F 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   178 00000424 [12020000]          <1>
   179 00000428 4801AD[D6010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   180 0000042F 4801AD[DF010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   181 00000436 4801AD[E8010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   182 0000043D 4801AD[F1010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   183                              <1> 
   184                              <1> ;Server Table setup
   185 00000444 488DBD[8F060000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   186 0000044B 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   186 00000450 [EA190000]          <1>
   187                              <1> 
   188                              <1> ;Set network machine name to... nothing!
   189 00000454 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   190 0000045B B910000000          <1>     mov ecx, 10h    ;16 chars long
   191 00000460 B020                <1>     mov al, SPC ;Space char
   192 00000462 F3AA                <1>     rep stosb   ;Fill with space chars
   193                              <1> 
   194                              <1> ;Patch Data Table init
   195 00000464 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   196 0000046B 488D85[E5740000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   197 00000472 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   198 00000474 488D85[EF740000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   199 0000047B 48AB                <1>     stosq
   200 0000047D 488D85[F9740000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   201 00000484 48AB                <1>     stosq
   202 00000486 488D85[03750000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   203 0000048D 48AB                <1>     stosq
   204                              <1> 
   205                              <1> ;Initial PSP pointer fields
   206 0000048F 488D1D440A0000      <1>     lea rbx, qword [tempPSP]
   207 00000496 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   207 0000049B [1F040000]          <1>
   208 0000049F 53                  <1>     push rbx
   209 000004A0 4881C380000000      <1>     add rbx, psp.dta
   210 000004A7 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   210 000004AC [17040000]          <1>
   211 000004B0 5B                  <1>     pop rbx
   212 000004B1 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   213 000004B5 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   214 000004B9 4889DA              <1>     mov rdx, rbx
   215 000004BC B822350000          <1>     mov eax, 3522h  ;Get pointer for Int 22h in rbx
   216 000004C1 CD21                <1>     int 21h
   217 000004C3 48895A0A            <1>     mov qword [rdx + psp.oldInt22h], rbx
   218 000004C7 B823350000          <1>     mov eax, 3523h
   219 000004CC CD21                <1>     int 21h
   220 000004CE 48895A12            <1>     mov qword [rdx + psp.oldInt23h], rbx
   221 000004D2 B824350000          <1>     mov eax, 3524h
   222 000004D7 CD21                <1>     int 21h
   223 000004D9 48895A1A            <1>     mov qword [rdx + psp.oldInt24h], rbx
   224                              <1> ;------------------------------------------------;
   225                              <1> ;              Setup DOSMGR Hooks                ;
   226                              <1> ;------------------------------------------------;   
   227 000004DD 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   228 000004E4 488D85[FA7C0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   229 000004EB 48AB                <1>     stosq   ;Store ptr for LaunchTask
   230 000004ED 48AB                <1>     stosq   ;Store ptr for TerminateTask
   231                              <1> ;------------------------------------------------;
   232                              <1> ;              Setup DLLMGR Hooks                ;
   233                              <1> ;------------------------------------------------;   
   234 000004EF 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   235 000004F6 488D85[FA7C0000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   236 000004FD 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   237 000004FF 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   238                              <1> ;------------------------------------------------;
   239                              <1> ;               Setup Share Hooks                ;
   240                              <1> ;------------------------------------------------;
   241 00000501 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   242 00000508 488D9D[FA7C0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   243 0000050F 488D85[F47C0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   244 00000516 48AB                <1>     stosq   ;Store bad for openFileCheck
   245 00000518 4893                <1>     xchg rax, rbx
   246 0000051A 48AB                <1>     stosq   ;Store good for open
   247 0000051C 48AB                <1>     stosq   ;Store good for close
   248 0000051E 4893                <1>     xchg rax, rbx
   249                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   250 00000520 B905000000          <1>     mov ecx, 5
   251 00000525 F348AB              <1>     rep stosq
   252 00000528 4893                <1>     xchg rax, rbx
   253 0000052A 48AB                <1>     stosq   ;Store good for check file lock exists
   254 0000052C 4893                <1>     xchg rax, rbx
   255                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   256 0000052E B903000000          <1>     mov ecx, 3
   257 00000533 F348AB              <1>     rep stosq
   258 00000536 4893                <1>     xchg rax, rbx
   259 00000538 48AB                <1>     stosq   ;Store good for close dup file share
   260 0000053A 4893                <1>     xchg rax, rbx
   261 0000053C 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   262 0000053E 48AB                <1>     stosq   ;Store bad for update dir information
   263                              <1> 
   264                              <1> ;Finish by setting up internal DOS vars from OEM passed arguments.
   265 00000540 0FB6055F090000      <1>     movzx eax, byte [OEMBIOS]
   266 00000547 85C0                <1>     test eax, eax
   267 00000549 741B                <1>     jz short skipOEMName
   268 0000054B 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   269 00000552 48B8494F0000000000- <1>     mov rax, "IO"
   269 0000055B 00                  <1>
   270 0000055C 488906              <1>     mov qword [rsi], rax
   271 0000055F C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   272                              <1> skipOEMName:
   273 00000566 8B054B090000        <1>     mov eax, dword [OEMVERSION]
   274 0000056C 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   275                              <1> 
   276 00000572 488B0536090000      <1>     mov rax, qword [OEMPTR]
   277 00000579 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   278                              <1> 
   279 00000580 0FB6051D090000      <1>     movzx eax, byte [DFLTDRIVE]
   280 00000587 31DB                <1>     xor ebx, ebx
   281 00000589 3D19000000          <1>     cmp eax, 25
   282 0000058E 0F47C3              <1>     cmova eax, ebx
   283 00000591 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   284                              <1> 
   285 00000597 0FB60504090000      <1>     movzx eax, byte [FILES]
   286 0000059E BB14000000          <1>     mov ebx, filesDefault
   287 000005A3 3D05000000          <1>     cmp eax, 5
   288 000005A8 0F42C3              <1>     cmovb eax, ebx
   289 000005AB 3DFE000000          <1>     cmp eax, 254
   290 000005B0 0F47C3              <1>     cmova eax, ebx
   291 000005B3 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   292                              <1> 
   293 000005B9 0FB605E3080000      <1>     movzx eax, byte [BUFFERS]
   294 000005C0 BB1E000000          <1>     mov ebx, buffersDefault
   295 000005C5 85C0                <1>     test eax, eax
   296 000005C7 0F44C3              <1>     cmovz eax, ebx
   297 000005CA 3D63000000          <1>     cmp eax, 99
   298 000005CF 0F47C3              <1>     cmova eax, ebx
   299 000005D2 8805CB080000        <1>     mov byte [BUFFERS], al
   300                              <1> 
   301 000005D8 0FB605C6080000      <1>     movzx eax, byte [LASTDRIVE]
   302 000005DF BB05000000          <1>     mov ebx, lastDriveDeflt
   303 000005E4 39D8                <1>     cmp eax, ebx
   304 000005E6 0F42C3              <1>     cmovb eax, ebx
   305 000005E9 3D19000000          <1>     cmp eax, 25
   306 000005EE 0F47C3              <1>     cmova eax, ebx
   307 000005F1 8805AE080000        <1>     mov byte [LASTDRIVE], al
   308 000005F7 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   309                              <1> 
   310                              <1> ;------------------------------------------------;
   311                              <1> ;          Find largest sector size              ;
   312                              <1> ;------------------------------------------------;
   313                              <1> sectorSizeSearch:
   314                              <1> ;Done by reading DPB's for each drive
   315 000005FD 31C0                <1>     xor eax, eax
   316 000005FF 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   316 00000604 [3B000000]          <1>
   317                              <1>     ;Go thru each block individually
   318                              <1> .findLargest:
   319 00000608 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   320 0000060C 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   321 00000611 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   322 00000615 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   323 0000061C 75EA                <1>     jne short .findLargest  ;If not, keep checking
   324 0000061E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   324 00000623 [5B000000]          <1>
   325                              <1> ;------------------------------------------------;
   326                              <1> ;                CDS array inits                 ;
   327                              <1> ;------------------------------------------------;
   328 00000627 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   329 0000062E E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   330 00000633 E995000000          <1>     jmp initialCDSWritten ;Go past the function
   331                              <1> makeCDSArray:
   332                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   333                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   334                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   335 00000638 B85F000000          <1>     mov eax, cds_size
   336 0000063D F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   337 0000063F 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   338 00000644 C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   339 00000647 31DB                <1>     xor ebx, ebx
   340 00000649 89C3                <1>     mov ebx, eax
   341 0000064B B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   342 00000650 CD21                <1>     int 21h
   343                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 00000652 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000654 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   344 00000655 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   345 00000658 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   346 0000065E C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   347 00000662 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   348                              <1> 
   349 0000066A 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   349 0000066F [65000000]          <1>
   350 00000673 57                  <1>     push rdi
   351 00000674 51                  <1>     push rcx
   352 00000675 89C8                <1>     mov eax, ecx
   353 00000677 B95F000000          <1>     mov ecx, cds_size
   354 0000067C F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   355 0000067E 89C1                <1>     mov ecx, eax
   356 00000680 31C0                <1>     xor eax, eax
   357 00000682 F3AA                <1>     rep stosb
   358 00000684 59                  <1>     pop rcx
   359 00000685 5F                  <1>     pop rdi
   360 00000686 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   360 0000068B [3B000000]          <1>
   361 0000068F B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   362                              <1> .tempCDS:
   363 00000694 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   364 00000696 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   365 0000069A C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   366 000006A1 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   367 000006A7 31D2                <1>     xor edx, edx    ;Use edx for flags
   368 000006A9 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   369 000006B0 7409                <1>     je .skipValidCDS
   370 000006B2 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   371 000006B7 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   372                              <1> .skipValidCDS:
   373 000006BB 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   374 000006BF FFC0                <1>     inc eax ;Increment the drive letter
   375 000006C1 4881C75F000000      <1>     add rdi, cds_size   ;Goto next array entry
   376 000006C8 FFC9                <1>     dec ecx
   377 000006CA 75C8                <1>     jnz .tempCDS
   378 000006CC C3                  <1>     ret
   379                              <1> initialCDSWritten:
   380                              <1> ;------------------------------------------------;
   381                              <1> ;        Create a Default Temporary Buffer       ;
   382                              <1> ;------------------------------------------------;
   383 000006CD 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   383 000006D2 [5B000000]          <1>
   384 000006D6 81C320000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   385 000006DC 81C30F000000        <1>     add ebx, 0Fh
   386 000006E2 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   387 000006E5 B800480000          <1>     mov eax, 4800h
   388 000006EA CD21                <1>     int 21h
   389 000006EC 0F829F140000        <1>     jc OEMHALT
   390 000006F2 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   390 000006F7 [5D000000]          <1>
   391 000006FB 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   392 00000702 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   393 00000708 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   394 0000070E 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   395 00000716 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   396                              <1> ;------------------------------------------------;
   397                              <1> ;          Default File Handle Creation          ;
   398                              <1> ;                                                ;
   399                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   400                              <1> ;------------------------------------------------;
   401                              <1> defaultFileHandles:
   402 0000071A 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   403 00000721 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   403 00000726 [43000000]          <1>
   404 0000072A 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   405 00000731 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   406                              <1> 
   407 00000737 E8E5020000          <1>     call openStreams
   408 0000073C 0F824F140000        <1>     jc OEMHALT
   409                              <1> ;------------------------------------------------;
   410                              <1> ;             Print Welcome Message              ;
   411                              <1> ;------------------------------------------------;
   412 00000742 488D1564050000      <1>     lea rdx, strtmsg
   413 00000749 B409                <1>     mov ah, 09h
   414 0000074B CD21                <1>     int 21h    
   415                              <1> ;------------------------------------------------;
   416                              <1> ;               Load CONFIG.SYS                  ;
   417                              <1> ;------------------------------------------------;
   418                              <1> ;Setup stackframe, workout base 
   419                              <1> setupFrame:
   420 0000074D 55                  <1>     push rbp
   421 0000074E 4889E5              <1>     mov rbp, rsp
   422 00000751 4881EC68000000      <1>     sub rsp, cfgFrame_size
   423 00000758 0FB60544070000      <1>     movzx eax, byte [BUFFERS]
   424 0000075F 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   425 00000763 0FB60538070000      <1>     movzx eax, byte [FILES]
   426 0000076A 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   427 0000076E 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   428 00000776 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   429 0000077E 0FB60520070000      <1>     movzx eax, byte [LASTDRIVE]
   430 00000785 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   431                              <1> 
   432 00000789 0FB61514070000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   433 00000790 B40E                <1>     mov ah, 0Eh ;Select drive
   434 00000792 CD21                <1>     int 21h
   435 00000794 488D1559050000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   436 0000079B B43D                <1>     mov ah, 3Dh ;Open file for reading
   437 0000079D B000                <1>     mov al, ReadAccess
   438 0000079F CD21                <1>     int 21h
   439 000007A1 7205                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   440 000007A3 E832080000          <1>     call configParse ;Else, parse the config file
   441                              <1> ;------------------------------------------------;
   442                              <1> ;   Setup Final Data Areas With Overrides from   ;
   443                              <1> ;                  CONFIG.SYS                    ;
   444                              <1> ;------------------------------------------------;
   445                              <1> ;Add additional buffers.
   446                              <1> ;Add additional SFT entries.
   447                              <1> ;Add additional FCBS.
   448                              <1> ;Create a larger CDS if needed.
   449                              <1> noCfg:
   450                              <1> ;Start with buffers:
   451 000007A8 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
   452 000007AC 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
   453 000007B2 0F849D000000        <1>     je .skipBuffers
   454 000007B8 FFC9                <1>     dec ecx  ;Minus one now
   455 000007BA 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   456                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   457 000007C2 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
   457 000007C7 [5B000000]          <1>
   458 000007CB 0520000000          <1>     add eax, bufferHdr_size ;eax has the size to add
   459 000007D0 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
   460 000007D1 F7E1                <1>     mul ecx ;Get total size to allocate in eax
   461 000007D3 5A                  <1>     pop rdx     ;and get the total value back in rdx
   462 000007D4 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
   463 000007D6 81C30F000000        <1>     add ebx, 0Fh
   464 000007DC C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
   465 000007DF B800480000          <1>     mov eax, 4800h  ;ALLOC
   466 000007E4 CD21                <1>     int 21h
   467 000007E6 726D                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
   468                              <1>     ;Each buffer has no flags, drive number must be -1
   469 000007E8 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
   470 000007EB 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
   471 000007EE 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
   472 000007F4 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   473 000007FC C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
   474 00000800 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
   474 00000805 [5D000000]          <1>
   475 00000809 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
   476 0000080C 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   477 0000080F 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   478 00000811 FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
   479 00000813 67E321              <1>     jecxz .lastBuffer
   480                              <1> .bufferLoop:
   481 00000816 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   482 00000819 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   483 0000081C 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   484 00000822 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   485 00000826 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   486 00000829 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   487 0000082C 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   488 00000830 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   489 00000833 FFC9                <1>     dec ecx
   490 00000835 75DF                <1>     jnz .bufferLoop
   491                              <1> .lastBuffer:
   492 00000837 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   493 0000083A 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   494 00000841 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   495 00000847 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   496 0000084B 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   497 0000084E 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   498 00000851 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   499                              <1> .skipBuffers:
   500                              <1> ;Now build a new SFT header for the number of files specified by user
   501 00000855 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
   502 00000859 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   503 0000085F 7663                <1>     jbe short .skipSFT
   504                              <1>     ;First compute how big this new arena needs to be
   505 00000861 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
   506 00000867 B84F000000          <1>     mov eax, sft_size
   507 0000086C F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   508 0000086E 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   509 00000873 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   510 00000875 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   511 0000087B C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   512 0000087E B800480000          <1>     mov eax, 4800h
   513 00000883 CD21                <1>     int 21h
   514 00000885 723D                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
   515 00000887 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
   515 0000088C [43000000]          <1>
   516 00000890 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
   517 00000893 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
   518 00000897 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
   519 0000089E 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   520 000008A4 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   521 000008AC C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
   522                              <1>     ;Point rdi to first sft in this arena
   523 000008B0 488D781A            <1>     lea rdi, qword [rax + sfth_size + mcb_size]
   524                              <1> .initExtraSFTs:
   525 000008B4 66C7070000          <1>     mov word [rdi], 0
   526 000008B9 4881C74F000000      <1>     add rdi, sft_size   ;Goto next SFT
   527 000008C0 FFC9                <1>     dec ecx
   528 000008C2 75F0                <1>     jnz .initExtraSFTs  ;Remember uop hybridisation (don't use loop)
   529                              <1> .skipSFT:
   530                              <1> ;FCBS now
   531 000008C4 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
   532 000008C8 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
   533 000008CB B84F000000          <1>     mov eax, sft_size
   534 000008D0 F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
   535 000008D2 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
   536 000008D7 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
   537 000008D9 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
   538 000008DF C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
   539 000008E2 B800480000          <1>     mov eax, 4800h
   540 000008E7 CD21                <1>     int 21h
   541 000008E9 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
   542 000008EB 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
   542 000008F0 [6D000000]          <1>
   543 000008F4 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
   544 000008F8 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
   545 000008FF 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
   546 00000905 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
   547 0000090D C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
   548                              <1> .skipFCBS:
   549                              <1> ;And CDS now
   550 00000911 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
   551 00000915 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
   552 0000091D 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
   553                              <1>     ;Else, we first free the old CDS and then reallocate
   554 0000091F 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
   554 00000924 [65000000]          <1>
   555 00000928 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
   556 0000092D CD21                <1>     int 21h
   557 0000092F 720D                <1>     jc short .skipCDS
   558 00000931 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   559 00000939 E8FAFCFFFF          <1>     call makeCDSArray
   560                              <1> .skipCDS:
   561 0000093E 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   562 00000941 5D                  <1>     pop rbp ;Stack frame no longer needed
   563                              <1> ;Now we close all five default handles and open AUX, CON and PRN
   564                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
   565 00000942 31DB                <1>     xor ebx, ebx
   566                              <1> closeHandlesLoop:
   567 00000944 B8003E0000          <1>     mov eax, 3e00h  ;Close
   568 00000949 CD21                <1>     int 21h
   569 0000094B FFC3                <1>     inc ebx ;Goto next handle
   570 0000094D 81FB06000000        <1>     cmp ebx, 6
   571 00000953 75EF                <1>     jne closeHandlesLoop
   572 00000955 E8C7000000          <1>     call openStreams
   573                              <1> l1:
   574 0000095A BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
   575 0000095F B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
   576 00000964 CD21                <1>     int 21h         ;Malloc and get pointer in rbx
   577 00000966 0F828F000000        <1>     jc badMem
   578 0000096C 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
   579 0000096F 4881EB10000000      <1>     sub rbx, mcb_size
   580 00000976 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   581 0000097E 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
   582 00000985 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
   583 0000098C 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
   584                              <1>     ;Input: r8 = PSP
   585                              <1>     ;       r9 = Memory Arena Pointer
   586                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
   587 0000098F E841120000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
   588 00000994 720E                <1>     jc short l2 
   589 00000996 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
   590 0000099D B800490000          <1>     mov eax, 4900h  ;Free the memory block
   591 000009A2 CD21                <1>     int 21h
   592                              <1> l2:
   593                              <1>     ;Load COMMAND.COM
   594                              <1>     ;Get currentPSP ptr
   595 000009A4 B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
   596 000009A6 CD21                <1>     int 21h
   597 000009A8 B419                <1>     mov ah, 19h ;Get current Drive letter in al
   598 000009AA CD21                <1>     int 21h
   599 000009AC 0441                <1>     add al, "A"
   600 000009AE 88054B030000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
   601                              <1> 
   602 000009B4 488D1D53030000      <1>     lea rbx, cmdBlock
   603 000009BB 488D3518050000      <1>     lea rsi, tempPSP
   604 000009C2 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
   605 000009C6 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   606 000009CA 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
   607 000009CE 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   608 000009D2 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
   609 000009D9 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
   610 000009DD 488D151B030000      <1>     lea rdx, cmdLine
   611 000009E4 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
   612 000009E9 CD21                <1>     int 21h
   613 000009EB 488D15D1020000      <1>     lea rdx, badCom
   614 000009F2 B409                <1>     mov ah, 09h ;Print message
   615 000009F4 CD21                <1>     int 21h
   616                              <1> hltLbl:
   617 000009F6 F4                  <1>     hlt
   618 000009F7 F390                <1>     pause
   619 000009F9 EBFB                <1>     jmp short hltLbl
   620                              <1> badMem:
   621 000009FB 488D1509000000      <1>     lea rdx, memErr
   622 00000A02 B800090000          <1>     mov eax, 0900h
   623 00000A07 CD21                <1>     int 21h
   624 00000A09 EBEB                <1>     jmp short hltLbl
   625 00000A0B 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
   625 00000A14 6D6F7279204572726F- <1>
   625 00000A1D 720A0D24            <1>
   626                              <1> 
   627                              <1> openStreams:
   628                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
   629 00000A21 488D15C4020000      <1>     lea rdx, auxName
   630 00000A28 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
   631 00000A2D CD21                <1>     int 21h
   632                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000A2F 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000A31 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   633 00000A32 89C3                <1>     mov ebx, eax
   634 00000A34 B903000000          <1>     mov ecx, 3  ;
   635 00000A39 B800460000          <1>     mov eax, 4600h  ;DUP2
   636 00000A3E CD21                <1>     int 21h
   637                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A40 72(31)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   638 00000A42 B8003E0000          <1>     mov eax, 3e00h
   639 00000A47 CD21                <1>     int 21h ;Close the original handle
   640                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A49 72(31)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   641 00000A4B B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   642 00000A50 488D1591020000      <1>     lea rdx, conName
   643 00000A57 CD21                <1>     int 21h
   644                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A59 72(31)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   645 00000A5B 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   646 00000A5D B800450000          <1>     mov eax, 4500h  ;DUP
   647 00000A62 CD21                <1>     int 21h
   648                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A64 72(31)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   649 00000A66 B800450000          <1>     mov eax, 4500h  ;DUP
   650 00000A6B CD21                <1>     int 21h
   651                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A6D 72(31)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   652 00000A6F 488D157A020000      <1>     lea rdx, prnName
   653 00000A76 B8023D0000          <1>     mov eax, 3D02h
   654 00000A7B CD21                <1>     int 21h       ;Open file
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000A7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> 
   657                              <1> addDriverMarkers:
   658                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
   659                              <1> ; information and owner to each memory block. Used for drivers that allocate
   660                              <1> ; their own memory using ALLOC.
   661                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
   662                              <1> ;       fs -> Dos Data Area
   663                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
   664                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
   665                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
   666 00000A7E 50                  <1>     push rax
   667 00000A7F 53                  <1>     push rbx
   668 00000A80 51                  <1>     push rcx
   669 00000A81 56                  <1>     push rsi
   670 00000A82 57                  <1>     push rdi
   671 00000A83 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
   672 00000A8A 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
   673 00000A91 B844000000          <1>     mov eax, mcbSubDriver
   674 00000A96 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
   675 00000A9B 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
   676 00000AA2 0F44C3              <1>     cmove eax, ebx
   677 00000AA5 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
   678                              <1> .checkSubsystem:
   679 00000AA7 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
   680 00000AAB 7512                <1>     jne short .gotoNextBlock
   681 00000AAD 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
   682 00000AB0 39D8                <1>     cmp eax, ebx
   683 00000AB2 0F45C3              <1>     cmovne eax, ebx
   684 00000AB5 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
   685 00000AB9 7504                <1>     jne short .gotoNextBlock
   686 00000ABB C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
   687                              <1> .gotoNextBlock:
   688 00000ABF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   689 00000AC2 7415                <1>     je short .exit
   690 00000AC4 31C9                <1>     xor ecx, ecx
   691 00000AC6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   692 00000AC9 48C1E104            <1>     shl rcx, 4
   693 00000ACD 4881C610000000      <1>     add rsi, mcb.program    
   694 00000AD4 4801CE              <1>     add rsi, rcx
   695 00000AD7 EBCE                <1>     jmp short .checkSubsystem
   696                              <1> .exit:
   697 00000AD9 5F                  <1>     pop rdi
   698 00000ADA 5E                  <1>     pop rsi
   699 00000ADB 59                  <1>     pop rcx
   700 00000ADC 5B                  <1>     pop rbx
   701 00000ADD 58                  <1>     pop rax
   702                              <1>     return
    13                              <2> %%_ret:
    14 00000ADE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   703                              <1> 
   704                              <1> 
   705                              <1> convertBPBArray:
   706                              <1> ;rsi -> BPB array
   707                              <1> ;rbp -> Space for cl consecutive DPB's
   708                              <1> ;rdi -> Driver header
   709                              <1> ;cl = Number of BPBs to process
   710                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
   711 00000ADF E852000000          <1>     call .findLastDPB
   712 00000AE4 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
   713                              <1> .buildNext:
   714 00000AE7 56                  <1>     push rsi
   715 00000AE8 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
   716 00000AEB B453                <1>     mov ah, 53h ;Build DPB
   717 00000AED CD21                <1>     int 21h
   718 00000AEF 5E                  <1>     pop rsi
   719 00000AF0 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
   719 00000AF5 [77000000]          <1>
   720 00000AF9 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
   721 00000AFC 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
   722 00000B04 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
   723 00000B07 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
   724 00000B0B FEC5                <1>     inc ch  ;Goto next unit number
   725 00000B0D 38E9                <1>     cmp cl, ch  ;When equal, exit!
   726 00000B0F 7414                <1>     jz short .exit
   727 00000B11 488D4535            <1>     lea rax, qword [rbp + dpb_size]
   728 00000B15 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   729 00000B19 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
   730 00000B1C 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
   731 00000B23 EBC2                <1>     jmp short .buildNext
   732                              <1> .exit:
   733                              <1>     ;Now set next DPB as -1 i.e end of chain!
   734 00000B25 31C0                <1>     xor eax, eax
   735 00000B27 48FFC8              <1>     dec rax
   736 00000B2A 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
   737 00000B2E 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
   738 00000B35 C3                  <1>     ret
   739                              <1> .findLastDPB:
   740                              <1> ;Finds the last DPB and links the next DPB to it
   741 00000B36 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   741 00000B3B [3B000000]          <1>
   742 00000B3F 4885C0              <1>     test rax, rax
   743 00000B42 7415                <1>     jz short .first 
   744                              <1> .lp:
   745 00000B44 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
   746 00000B4C 7406                <1>     je short .lastFound
   747 00000B4E 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
   748 00000B52 EBF0                <1>     jmp short .lp   ;And go again
   749                              <1> .lastFound:
   750 00000B54 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
   751 00000B58 C3                  <1>     ret
   752                              <1> .first:
   753                              <1> ;If this is the first DPB array, set the dpbHeadPtr
   754 00000B59 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
   754 00000B5E [3B000000]          <1>
   755 00000B62 C3                  <1>     ret
   756                              <1> 
   757                              <1> ejectKernelInit:
   758                              <1> ;Reallocates the space allocated to the driver file after 
   759                              <1> ; init was called.
   760                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
   761                              <1> ;       r8 -> Points to the mcb header for reallocation
   762                              <1> ;Uses the sysinit init drive block. 
   763                              <1> ;rax, rbx, rflags trashed
   764                              <1> ;If returns CF=CY, error in reallocation.
   765 00000B63 53                  <1>     push rbx
   766 00000B64 488D1D50030000      <1>     lea rbx, initDrvBlk
   767 00000B6B 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
   768 00000B6F 5B                  <1>     pop rbx
   769                              <1>     ;If this endptr is zero or -1 ignore it. 
   770                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
   771 00000B70 4885C0              <1>     test rax, rax
   772                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000B73 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000B75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   773 00000B76 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
   774                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000B79 74(75)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   775 00000B7B 48FFC8              <1>     dec rax ;Return to original value
   776 00000B7E 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
   777 00000B84 48C1E804            <1>     shr rax, 4
   778 00000B88 48C1E004            <1>     shl rax, 4
   779 00000B8C 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
   780 00000B8F 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
   781 00000B91 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
   782 00000B98 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
   783 00000B9A 4981C010000000      <1>     add r8, mcb.program ;Goto program
   784 00000BA1 C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
   785 00000BA4 29D8                <1>     sub eax, ebx
   786 00000BA6 89C3                <1>     mov ebx, eax
   787 00000BA8 B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
   788 00000BAD CD21                <1>     int 21h
   789 00000BAF 4158                <1>     pop r8
   790                              <1>     return
    13                              <2> %%_ret:
    14 00000BB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   791                              <1> .exit:
   792 00000BB2 F8                  <1>     clc ;Make sure to clear the CF flag before returning
   793                              <1>     return
    13                              <2> %%_ret:
    14 00000BB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> initDriver:
   796                              <1> ;Initialises one driver and adjusts the DOS data appropriately
   797                              <1> ;If on return CF=CY then the driver didnt want to be loaded
   798                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
   799                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
   800                              <1> ; arguments are to be passed to the driver
   801                              <1> ;Input: rsi -> driver pointer
   802                              <1> ;       rbx -> sysinit request pointer
   803                              <1> ;       rbp -> DOSSEG pointer
   804 00000BB4 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   805 00000BB7 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
   806 00000BBB 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
   807 00000BC1 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
   808 00000BC7 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
   809                              <1>     ;Protect the important registers. All others trashable
   810 00000BCA 53                  <1>     push rbx
   811 00000BCB 56                  <1>     push rsi
   812 00000BCC 55                  <1>     push rbp
   813 00000BCD FF560A              <1>     call qword [rsi + drvHdr.strPtr]
   814 00000BD0 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
   815 00000BD3 5D                  <1>     pop rbp
   816 00000BD4 5E                  <1>     pop rsi
   817 00000BD5 5B                  <1>     pop rbx
   818                              <1>     ;Check if a driver wants to not load.
   819                              <1>     ;If a kernel driver wants to stop, halt boot.
   820 00000BD6 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
   821 00000BDC 750C                <1>     jnz short .errExit
   822 00000BDE 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
   823 00000BE2 7508                <1>     jne short .notHalt
   824 00000BE4 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
   825 00000BE8 7502                <1>     jne short .notHalt
   826                              <1> .errExit:
   827 00000BEA F9                  <1>     stc
   828 00000BEB C3                  <1>     ret
   829                              <1> .notHalt:
   830                              <1>     ;Now check if the drivers were con/clock before exiting
   831 00000BEC 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
   832 00000BF0 66250300            <1>     and ax, devDrvConIn | devDrvConOut
   833 00000BF4 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
   834 00000BF6 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
   835 00000BFA 7507                <1>     jne short .checkClock
   836 00000BFC 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
   837                              <1> .checkClock:
   838 00000C03 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
   839 00000C09 7407                <1>     jz short .notClock
   840 00000C0B 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
   841                              <1> .notClock:
   842                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
   843 00000C12 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   844                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C18 75(B3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   845                              <1>     ;Else, store the number of units as reported live by driver
   846 00000C1A 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
   847 00000C1E 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
   848 00000C21 C3                  <1>     ret
   849                              <1> 
   850                              <1> buildDPBs:
   851                              <1>     ;Here we specially handle MSD drivers, building DPBs
   852                              <1>     ;If return with CF=CY, fail. Else, all done and setup
   853                              <1>     ;Input: rbx -> Points to sysinit request packet
   854                              <1>     ;       rsi -> Driver header
   855                              <1>     ;       rbp -> DOSSEG pointer
   856                              <1>     ;Preserves those registers
   857 00000C22 53                  <1>     push rbx
   858 00000C23 55                  <1>     push rbp
   859 00000C24 56                  <1>     push rsi
   860 00000C25 57                  <1>     push rdi
   861 00000C26 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
   862 00000C29 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
   863 00000C2D 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
   864 00000C31 B835000000          <1>     mov eax, dpb_size
   865 00000C36 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
   866 00000C38 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
   867 00000C3D C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   868 00000C40 89C3                <1>     mov ebx, eax
   869 00000C42 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
   870 00000C47 CD21                <1>     int 21h
   871 00000C49 7219                <1>     jc short .badExit
   872 00000C4B 4889C5              <1>     mov rbp, rax    
   873 00000C4E C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
   874 00000C52 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
   875                              <1>     ;rsi -> Ptr to BPB
   876                              <1> 	;rbp -> Ptr to buffer to hold first DPB
   877                              <1>     ;rdi -> Ptr to the driver header
   878 00000C5A E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
   879                              <1> .exit:
   880 00000C5F 5F                  <1>     pop rdi
   881 00000C60 5E                  <1>     pop rsi
   882 00000C61 5D                  <1>     pop rbp
   883 00000C62 5B                  <1>     pop rbx
   884                              <1>     return
    13                              <2> %%_ret:
    14 00000C63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .badExit:
   886 00000C64 F9                  <1>     stc
   887 00000C65 EBF8                <1>     jmp short .exit
   888                              <1> 
   889                              <1> setupInterruptBlock:
   890                              <1> ;Sets up a block of interrupts with pointers provided in a table
   891                              <1> ;Input:
   892                              <1> ; al = Start interrupt
   893                              <1> ; rdi -> Start of pointer table
   894                              <1> ; cl = Last interrupt + 1
   895                              <1> ;Assumes rbp points to DOSSEG
   896 00000C67 0FB6C0              <1>     movzx eax, al
   897 00000C6A 0FB6C9              <1>     movzx ecx, cl
   898                              <1> .lp:
   899 00000C6D 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   900 00000C70 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   901 00000C73 E80E000000          <1>     call writeIDTEntry
   902 00000C78 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
   903 00000C7F FFC0                <1>     inc eax     ;Goto next interrupt number
   904 00000C81 39C8                <1>     cmp eax, ecx
   905 00000C83 75E8                <1>     jne .lp
   906                              <1>     return
    13                              <2> %%_ret:
    14 00000C85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   907                              <1> 
   908                              <1> writeIDTEntry:
   909                              <1> ;Writes the interrupt in the right place in the table
   910                              <1>     ;al = Interrupt number
   911                              <1>     ;rbx -> Handler to install
   912 00000C86 50                  <1>     push rax
   913 00000C87 53                  <1>     push rbx
   914 00000C88 0FB6C0              <1>     movzx eax, al
   915 00000C8B 4893                <1>     xchg rbx, rax
   916 00000C8D 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
   917 00000C91 48031DEA010000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
   918 00000C98 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
   919 00000C9B 48C1E810            <1>     shr rax, 10h    ;Bring next word low
   920 00000C9F 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
   921 00000CA3 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
   922 00000CA7 894308              <1>     mov dword [rbx + 8], eax
   923 00000CAA 5B                  <1>     pop rbx
   924 00000CAB 58                  <1>     pop rax
   925 00000CAC C3                  <1>     ret
   926                              <1> 
   927                              <1> ;--------------------------------
   928                              <1> ;       DATA FOR SYSINIT        :
   929                              <1> ;--------------------------------
   930 00000CAD 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   930 00000CB6 5343502F444F532E2E- <1>
   930 00000CBF 2E0A0D24            <1>
   931 00000CC3 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
   931 00000CCC 7373696E6720436F6D- <1>
   931 00000CD5 6D616E6420696E7465- <1>
   931 00000CDE 727072657465720A0D- <1>
   931 00000CE7 24                  <1>
   932 00000CE8 434F4E00            <1> conName db "CON",0
   933 00000CEC 41555800            <1> auxName db "AUX",0
   934 00000CF0 50524E00            <1> prnName db "PRN",0
   935                              <1> 
   936 00000CF4 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   936 00000CFD 5300                <1>
   937 00000CFF 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
   937 00000D08 442E434F4D00        <1>
   938                              <1> 
   939                              <1> cmdBlock:   ;Used also for overlay block
   940                              <1>     istruc execProg
   941 00000D0E 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
   942 00000D16 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
   943 00000D1E 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
   944 00000D26 0000000000000000    <1>     at execProg.pfcb2,      dq 0
   945                              <1>     iend
   946                              <1> exceptData:
   947 00000D2E [C667000000000000]  <1>     dq i0
   948 00000D36 [CD67000000000000]  <1>     dq i1
   949 00000D3E [D767000000000000]  <1>     dq i2
   950 00000D46 [E167000000000000]  <1>     dq i3
   951 00000D4E [EB67000000000000]  <1>     dq i4
   952 00000D56 [F567000000000000]  <1>     dq i5
   953 00000D5E [FC67000000000000]  <1>     dq i6
   954 00000D66 [0368000000000000]  <1>     dq i7
   955 00000D6E [0A68000000000000]  <1>     dq i8
   956 00000D76 [1168000000000000]  <1>     dq i9
   957 00000D7E [1868000000000000]  <1>     dq i10
   958 00000D86 [1F68000000000000]  <1>     dq i11
   959 00000D8E [2668000000000000]  <1>     dq i12
   960 00000D96 [2D68000000000000]  <1>     dq i13
   961 00000D9E [3468000000000000]  <1>     dq i14
   962 00000DA6 [3B68000000000000]  <1>     dq i15
   963 00000DAE [4268000000000000]  <1>     dq i16
   964 00000DB6 [4968000000000000]  <1>     dq i17
   965 00000DBE [5068000000000000]  <1>     dq i18
   966 00000DC6 [5768000000000000]  <1>     dq i19
   967 00000DCE [5E68000000000000]  <1>     dq i20
   968 00000DD6 [6568000000000000]  <1>     dq i21
   969                              <1> 
   970                              <1> intData:
   971 00000DDE [7D59000000000000]  <1>     dq terminateProcess ;Int 20h
   972 00000DE6 [5D73000000000000]  <1>     dq functionDispatch ;Int 21h
   973 00000DEE [911B000000000000]  <1>     dq OEMHALT          ;Int 22h, If sysinit terminates, halt system
   974 00000DF6 [B574000000000000]  <1>     dq defaultIretq     ;Int 23h, ignore any CTRL+C during init
   975 00000DFE [C46B000000000000]  <1>     dq dosDefCritErrHdlr    ;Int 24h, return fail, CF=CY, leading to OEMHALT
   976 00000E06 [9D6C000000000000]  <1>     dq absDiskRead      ;Int 25h
   977 00000E0E [7E6C000000000000]  <1>     dq absDiskWrite     ;Int 26h
   978 00000E16 [8459000000000000]  <1>     dq terminateRes     ;Int 27h
   979 00000E1E [B574000000000000]  <1>     dq defaultIretq     ;Int 28h
   980 00000E26 [B574000000000000]  <1>     dq defaultIretq     ;Int 29h
   981 00000E2E [B574000000000000]  <1>     dq defaultIretq     ;Int 2Ah
   982 00000E36 [B574000000000000]  <1>     dq defaultIretq     ;Int 2Bh
   983 00000E3E [B574000000000000]  <1>     dq defaultIretq     ;Int 2Ch
   984 00000E46 [B574000000000000]  <1>     dq defaultIretq     ;Int 2Dh
   985 00000E4E [B574000000000000]  <1>     dq defaultIretq     ;Int 2Eh
   986 00000E56 [047C000000000000]  <1>     dq multiplexHdlr    ;Int 2Fh, multiplex default handler
   987                              <1> nData:
   988 00000E5E 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
   989 00000E66 0480                <1>     dw 08004h
   990 00000E68 [DD6B000000000000]  <1>     dq nulStrat
   991 00000E70 [E36B000000000000]  <1>     dq nulIntr
   992 00000E78 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   993                              <1> 
   994                              <1> localIDTpointer: ;Local IDT pointer
   995 00000E80 0000                <1>     .Limit  dw 0
   996 00000E82 0000000000000000    <1>     .Base   dq 0
   997                              <1> 
   998 00000E8A 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
   999 00000E92 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1000 00000E9A 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1001                              <1> 
  1002                              <1> ;DOS Data given by OEM
  1003 00000EA2 00                  <1> FILES       db 0    ;Default number of FILES
  1004 00000EA3 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1005 00000EA4 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1006 00000EA5 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1007 00000EA6 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1008                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1009 00000EA7 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1010 00000EAF 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1011 00000EB7 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1012                              <1> 
  1013 00000EBB 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1013 00000EC4 000000000000000000- <1>
  1013 00000ECD 000000000000000000- <1>
  1013 00000ED6 00000000            <1>
  1014                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1015                              <1>     istruc psp
  1016 00000EDA CD20                <1>     at psp.return,      db 0CDh, 20h
  1017 00000EDC 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1018 00000EE4 0000000000000000    <1>     at psp.oldInt22h,   dq 0
  1019 00000EEC 0000000000000000    <1>     at psp.oldInt23h,   dq 0
  1020 00000EF4 0000000000000000    <1>     at psp.oldInt24h,   dq 0
  1021 00000EFC 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1022 00000F04 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1022 00000F0D FFFFFFFFFFFFFFFFFF- <1>
  1022 00000F16 FFFF                <1>
  1023 00000F18 0000000000000000    <1>     at psp.envPtr,      dq 0
  1024 00000F20 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1025 00000F28 1400                <1>     at psp.jftSize,     dw 20 
  1026 00000F2A CD21C3              <1>     at psp.unixEntry,   db 0CDh, 21h, 0C3h
  1027 00000F2D 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1028 00000F35 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1028 00000F3E 0000000000000000    <1>
  1029 00000F46 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1029 00000F4F 000000000000000000- <1>
  1029 00000F58 0000                <1>
  1030 00000F5A 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1030 00000F63 000000000000000000- <1>
  1030 00000F6C 000000000000000000- <1>
  1030 00000F75 000000000000000000- <1>
  1030 00000F7E 000000000000000000- <1>
  1030 00000F87 000000000000000000- <1>
  1030 00000F90 000000000000000000- <1>
  1030 00000F99 000000000000000000- <1>
  1030 00000FA2 000000000000000000- <1>
  1030 00000FAB 000000000000000000- <1>
  1030 00000FB4 000000000000000000- <1>
  1030 00000FBD 000000000000000000- <1>
  1030 00000FC6 000000000000000000- <1>
  1030 00000FCF 000000000000000000- <1>
  1030 00000FD8 0000                <1>
  1031                              <1>     iend
    17                                  %include "./src/Sysinit/cfginit.asm"
     1                              <1> ;------------------------------------------------;
     2                              <1> ;              Process CONFIG.SYS                ;
     3                              <1> ;------------------------------------------------;
     4                              <1> ;Create a stack frame with the following order.
     5                              <1> ;Values greater than max are set to max. Values less than min are set to min.
     6                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
     7                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
     8                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
     9                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
    10                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
    11                              <1> ;
    12                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
    13                              <1> ;-------------------------------------------------------------------------;
    14                              <1> ; CONFIG.SYS processing pseudocode:-
    15                              <1> ;
    16                              <1> ; _START:
    17                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
    18                              <1> ; If (EOF encountered)
    19                              <1> ;   Insert a terminating ^Z to the end of the line. 
    20                              <1> ;   Close handle.
    21                              <1> ; Parse the line from beginning looking for a DOS terminating char.
    22                              <1> ;   If (CR or EOF encoutered before terminating char)
    23                              <1> ;       Bad line error msg. 
    24                              <1> ;       If (CR encountered)
    25                              <1> ;           Goto _START
    26                              <1> ;       Else
    27                              <1> ;           Goto _EXIT
    28                              <1> ;   Else 
    29                              <1> ;       If (Keyword AND not DEVICE) 
    30                              <1> ;           Store it's value on stack or change internal variable value
    31                              <1> ;       If (DEVICE)
    32                              <1> ;           Move endPtr after end of line and try load the driver.
    33                              <1> ;           If (driver doesn't exist or fails to init)
    34                              <1> ;               print bad driver error msg.
    35                              <1> ;       Else 
    36                              <1> ;           Bad line error msg
    37                              <1> ;       If (line terminated by CR)
    38                              <1> ;           Goto _START
    39                              <1> ; _EXIT:
    40                              <1> ;-------------------------------------------------------------------------;
    41                              <1> ; Note:
    42                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
    43                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
    44                              <1> ;   adjust the memory pointer and start loading next line.
    45                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
    46                              <1> ;   data structures according to the values on the stack frame.
    47                              <1> ;-------------------------------------------------------------------------;
    48                              <1> ;Start CONFIG.SYS parsing here
    49                              <1> configParse:
    50 00000FDA 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
    51 00000FDE 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
    52 00000FE6 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
    53 00000FEE B800480000          <1>     mov eax, 4800h
    54 00000FF3 BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
    55 00000FF8 CD21                <1>     int 21h
    56 00000FFA 0F825A010000        <1>     jc .stopProcessError
    57 00001000 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
    58 00001004 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
    59 00001007 482D10000000        <1>     sub rax, mcb_size 
    60 0000100D 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
    61 00001015 31C0                <1>     xor eax, eax
    62                              <1> .nextChar:
    63 00001017 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
    64 0000101B 6681FBFFFF          <1>     cmp bx, -1
    65 00001020 0F8434010000        <1>     je .stopProcessError
    66 00001026 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
    67 0000102B B901000000          <1>     mov ecx, 1  ;Read one byte
    68 00001030 CD21                <1>     int 21h
    69 00001032 0F8222010000        <1>     jc .stopProcessError
    70 00001038 85C0                <1>     test eax, eax	;If this is zero, EOF reached, take command
    71 0000103A 741B                <1>     jz .endOfFile
    72                              <1> .notEOF:
    73 0000103C 0FB602              <1>     movzx eax, byte [rdx]
    74 0000103F 3C0D                <1>     cmp al, CR
    75 00001041 741F                <1>     je short .endOfLine
    76 00001043 3C0A                <1>     cmp al, LF
    77 00001045 7418                <1>     je short .endOfLineChange   ;Continue, but replace with standard EOL char (CR)
    78 00001047 3C1A                <1>     cmp al, EOF
    79 00001049 740C                <1>     je short .endOfFile
    80 0000104B E83F070000          <1>     call .ucChar    ;Uppercase the char
    81 00001050 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
    82                              <1> .notChar:
    83 00001052 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
    84 00001055 EBC0                <1>     jmp short .nextChar
    85                              <1> .endOfFile:
    86 00001057 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
    87                              <1> .endOfLineChange:
    88 0000105F C6020D              <1>     mov byte [rdx], CR  ;Store a terminating char at the end of the command
    89                              <1> .endOfLine:
    90                              <1> ;rdx points to terminating char
    91                              <1> ;First find the length of the instruction word
    92 00001062 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
    93                              <1> ;If this is a 1 char line, skip processing (as it is CR), and goto next line
    94 00001066 4839F2              <1>     cmp rdx, rsi
    95 00001069 7473                <1>     je .cmdPrepNew
    96 0000106B E8D2000000          <1>     call .skipSeparators  ;Skip any standard leading separators
    97 00001070 31C9                <1>     xor ecx, ecx
    98                              <1> .cmdNameLenGet:
    99 00001072 AC                  <1>     lodsb
   100 00001073 E8B6000000          <1>     call .isCharSeparator
   101 00001078 740A                <1>     jz short .endOfCommandFound
   102 0000107A FFC1                <1>     inc ecx
   103 0000107C 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   104 00001082 72EE                <1>     jb short .cmdNameLenGet
   105                              <1> ;Else, fall through in error
   106                              <1> .endOfCommandFound:
   107                              <1> ;ecx has the length of the command
   108 00001084 81F90A000000        <1>     cmp ecx, 10
   109 0000108A 0F84C0000000        <1>     je .badLineHandle
   110 00001090 488D3D66010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   111                              <1> .cmdSearch:
   112 00001097 803FFF              <1>     cmp byte [rdi], -1
   113 0000109A 0F84B0000000        <1>     je .badLineHandle
   114 000010A0 380F                <1>     cmp byte [rdi], cl
   115 000010A2 757A                <1>     jne short .gotoNextCmd
   116                              <1>     ;Candidate command found, check said command is the command we want
   117 000010A4 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   118 000010A8 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   119 000010AF 0F84A5000000        <1>     je .stopProcessError
   120 000010B5 57                  <1>     push rdi
   121 000010B6 51                  <1>     push rcx
   122 000010B7 48FFC7              <1>     inc rdi ;Go to next char
   123 000010BA F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   124 000010BC 59                  <1>     pop rcx
   125 000010BD 5F                  <1>     pop rdi
   126 000010BE 755E                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   127                              <1>     ;Else, rdi points to the table entry from the head of the table
   128                              <1>     ;      rcx has the length of the name field
   129                              <1>     ;rdx points to the terminating char of the line 
   130 000010C0 488D3536010000      <1>     lea rsi, .keyTbl
   131 000010C7 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   132 000010CA 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   133 000010D0 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   134 000010D3 F8                  <1>     clc ;Ensure flags are happy before entering
   135 000010D4 55                  <1>     push rbp
   136 000010D5 FFD6                <1>     call rsi    ;Call this function
   137 000010D7 5D                  <1>     pop rbp
   138 000010D8 0F8281000000        <1>     jc .stopProcessErrorNoPrint    ;If the function returns CF=CY, error exit
   139                              <1> .cmdPrepNew:
   140 000010DE 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   141 000010E6 0F858C060000        <1>     jnz .cfgExit
   142 000010EC 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   143                              <1>     ;Read the next char. 
   144                              <1>     ;If EOF, exit.
   145                              <1>     ;Else if, LF, proceed to read line routine.
   146                              <1>     ;Else, advance ptr by one and proceed to process char
   147                              <1> .endCommandClear:
   148 000010F0 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   149 000010F4 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   150 000010F9 B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   151 000010FE CD21                <1>     int 21h
   152 00001100 7258                <1>     jc .stopProcessError
   153 00001102 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   154 00001104 0F846E060000        <1>     jz .cfgExit
   155                              <1>     ;Do a trash check
   156 0000110A 8A02                <1>     mov al, byte [rdx]
   157 0000110C 3C1A                <1>     cmp al, EOF
   158 0000110E 0F8464060000        <1>     je .cfgExit
   159 00001114 3C0A                <1>     cmp al, LF
   160 00001116 0F84FBFEFFFF        <1>     je .nextChar
   161 0000111C EBD2                <1>     jmp short .endCommandClear  ;Loop out trailing spaces, crap chars and CR
   162                              <1> ;CONFIG.SYS utility functions
   163                              <1> .gotoNextCmd:
   164 0000111E 0FB607              <1>     movzx eax, byte [rdi]
   165 00001121 0503000000          <1>     add eax, 3
   166 00001126 4801C7              <1>     add rdi, rax
   167 00001129 E969FFFFFF          <1>     jmp .cmdSearch
   168                              <1> .isCharSeparator:
   169                              <1> ;Input: AL = Char to check
   170                              <1> ;Output: ZF=ZE -> Char terminal
   171                              <1> ;        ZF=NZ -> Char not terminal
   172 0000112E 3C3D                <1>     cmp al, "="
   173                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001130 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001132 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   174 00001133 3C20                <1>     cmp al, SPC
   175                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001135 74(32)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00001137 3C09                <1>     cmp al, TAB
   177                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001139 74(32)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   178 0000113B 3C3B                <1>     cmp al, ";"
   179                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000113D 74(32)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   180 0000113F 3C2C                <1>     cmp al, ","
   181                              <1>     return
    13                              <2> %%_ret:
    14 00001141 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> .skipSeparators:
   183                              <1> ;Input: rsi -> Start of string
   184                              <1> ;Output: rsi -> First non-terminator char after string of terminators
   185 00001142 50                  <1>     push rax
   186                              <1> .stl1:
   187 00001143 AC                  <1>     lodsb   ;Get char
   188 00001144 E8E5FFFFFF          <1>     call .isCharSeparator    ;Is it terminal?
   189 00001149 74F8                <1>     jz .stl1    ;Yes, keep going
   190 0000114B 58                  <1>     pop rax
   191 0000114C 48FFCE              <1>     dec rsi
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000114F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> .badLineHandle:
   195                              <1> ;If the command was unrecognised, goto next line! Do not halt!
   196 00001150 E84B000000          <1>     call .badLineErrorMsg
   197 00001155 E984FFFFFF          <1>     jmp  .cmdPrepNew
   198                              <1> 
   199                              <1> .stopProcessError:
   200                              <1> ;Print the hard error message and reset the system values
   201 0000115A E836000000          <1>     call .hardErrorMsg
   202                              <1> .stopProcessErrorNoPrint:
   203                              <1> ;Reset all values to OEM defaults
   204 0000115F 0FB6053DFDFFFF      <1>     movzx eax, byte [BUFFERS]
   205 00001166 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   206 0000116A 0FB60531FDFFFF      <1>     movzx eax, byte [FILES]
   207 00001171 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   208 00001175 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   209 0000117D 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   210 00001185 0FB60519FDFFFF      <1>     movzx eax, byte [LASTDRIVE]
   211 0000118C 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   212 00001190 E9E3050000          <1>     jmp .cfgExit
   213                              <1> .hardErrorMsg:
   214                              <1> ;Prints an error message and TERMINATE parsing
   215 00001195 50                  <1>     push rax
   216 00001196 52                  <1>     push rdx
   217 00001197 488D1515000000      <1>     lea rdx, .hdLine
   218 0000119E EB09                <1>     jmp short .errorCmn
   219                              <1> .badLineErrorMsg:
   220                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   221 000011A0 50                  <1>     push rax
   222 000011A1 52                  <1>     push rdx
   223 000011A2 488D152D000000      <1>     lea rdx, .speLine
   224                              <1> .errorCmn:
   225 000011A9 B800090000          <1>     mov eax, 0900h
   226 000011AE CD21                <1>     int 21h
   227 000011B0 5A                  <1>     pop rdx
   228 000011B1 58                  <1>     pop rax
   229                              <1>     return
    13                              <2> %%_ret:
    14 000011B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   230 000011B3 0D0A4572726F722069- <1> .hdLine:    db CR,LF,"Error in processing CONFIG.SYS",CR,LF,"$"
   230 000011BC 6E2070726F63657373- <1>
   230 000011C5 696E6720434F4E4649- <1>
   230 000011CE 472E5359530D0A24    <1>
   231 000011D6 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   231 000011DF 6E6973656420636F6D- <1>
   231 000011E8 6D616E6420696E2043- <1>
   231 000011F1 4F4E4649472E535953- <1>
   231 000011FA 0D0A24              <1>
   232                              <1> .keyTbl: 
   233 000011FD 05425245414B        <1>     db 5, "BREAK"           ;DONE
   234 00001203 6300                <1> 	dw .breakHandler - .keyTbl
   235 00001205 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   236 0000120D 9900                <1> 	dw .bufHandler - .keyTbl
   237 0000120F 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   238 00001217 7A05                <1> 	dw .countryScan - .keyTbl
   239 00001219 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   240 00001220 2001                <1> 	dw .drvLoader - .keyTbl
   241 00001222 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   242 00001227 7A05                <1> 	dw .fcbHandler - .keyTbl
   243 00001229 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   244 0000122F 6B04                <1> 	dw .sftHandler - .keyTbl
   245 00001231 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   245 0000123A 45                  <1>
   246 0000123B 2E05                <1> 	dw .lastdriveHandler - .keyTbl
   247 0000123D 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   248 00001243 7A05                <1> 	dw .shellHandler - .keyTbl
   249 00001245 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   250 0000124C 7A05                <1> 	dw .stacksHandler - .keyTbl
   251 0000124E 08445249565041524D  <1>     db 8, "DRIVPARM"
   252 00001257 7A05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   253                              <1>     ;The following three are to not cause issues with empty lines/EOF chars
   254 00001259 0352454D            <1>     db 3, "REM"
   255 0000125D 7A05                <1>     dw .comment - .keyTbl
   256 0000125F FF                  <1> 	db -1	;End of table marker
   257                              <1> 
   258                              <1> .breakHandler:
   259 00001260 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   260 00001264 4881C605000000      <1>     add rsi, 5  ;Go past BREAK
   261                              <1>     ;This must be the word ON or OFF 
   262 0000126B E8D2FEFFFF          <1>     call .skipSeparators
   263 00001270 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   264 00001272 66813E4F4E          <1>     cmp word [rsi], "ON"
   265 00001277 7413                <1>     je .breakOn
   266 00001279 66813E4F46          <1>     cmp word [rsi], "OF"
   267 0000127E 7506                <1>     jne .breakBad
   268 00001280 807E0246            <1>     cmp byte [rsi + 2], "F"
   269 00001284 7408                <1>     je .breakCommon
   270                              <1> .breakBad:
   271 00001286 E815FFFFFF          <1>     call .badLineErrorMsg
   272                              <1>     return
    13                              <2> %%_ret:
    14 0000128B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   273                              <1> .breakOn:
   274 0000128C FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   275                              <1> .breakCommon:
   276 0000128E B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   277 00001293 CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00001295 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> .bufHandler:
   281 00001296 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   282 0000129A 4881C607000000      <1>     add rsi, 7  ;Go past BUFFERS=
   283                              <1>     ;This must be at most three digits, anything else is a failure
   284 000012A1 E89CFEFFFF          <1>     call .skipSeparators
   285 000012A6 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   286 000012A9 31C9                <1>     xor ecx, ecx
   287 000012AB AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   288 000012AC 3C30                <1>     cmp al, "0"
   289 000012AE 7256                <1>     jb .bufHandlerErr
   290 000012B0 3C39                <1>     cmp al, "9"
   291 000012B2 7752                <1>     ja .bufHandlerErr
   292 000012B4 FFC1                <1>     inc ecx ;Increment char counter
   293 000012B6 AC                  <1>     lodsb   ;Get second char
   294 000012B7 E850000000          <1>     call .bufHandlerTermCheck
   295 000012BC 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   296 000012BE 3C30                <1>     cmp al, "0"
   297 000012C0 7244                <1>     jb .bufHandlerErr
   298 000012C2 3C39                <1>     cmp al, "9"
   299 000012C4 7740                <1>     ja .bufHandlerErr
   300 000012C6 AC                  <1>     lodsb   ;Check no more chars!
   301 000012C7 E840000000          <1>     call .bufHandlerTermCheck
   302 000012CC 7538                <1>     jne .bufHandlerErr
   303                              <1> .bufHandlerProcess:
   304 000012CE 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   305 000012D0 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   306                              <1> .bufHandlerLp:
   307 000012D3 AC                  <1>     lodsb   ;Get the digit
   308 000012D4 2C30                <1>     sub al, "0" ;Convert to ASCII
   309 000012D6 0FB6C0              <1>     movzx eax, al
   310 000012D9 67E30E              <1>     jecxz .bufHandlerPrepExit   ;Exit if this is the only digit
   311 000012DC D1E0                <1>     shl eax, 1  ;Multiply by 2
   312 000012DE 678D1480            <1>     lea edx, dword [4*eax + eax]    ;Multiply (2*eax) by 5
   313 000012E2 AC                  <1>     lodsb   ;Get the next digit
   314 000012E3 2C30                <1>     sub al, "0"
   315 000012E5 0FB6C0              <1>     movzx eax, al
   316 000012E8 01D0                <1>     add eax, edx    ;Add the tens to the unit
   317                              <1> .bufHandlerPrepExit:
   318 000012EA 0FB60DB2FBFFFF      <1>     movzx ecx, byte [BUFFERS]
   319 000012F1 85C0                <1>     test eax, eax
   320 000012F3 0F44C1              <1>     cmovz eax, ecx  ;Replace zero with default if the user specified 0 buffers
   321 000012F6 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   322 000012FA F8                  <1>     clc
   323                              <1>     return
    13                              <2> %%_ret:
    14 000012FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .bufHandlerMul:
   325 000012FC 2C30                <1>     sub al, "0" ;Convert to a binary value
   326 000012FE F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   327 00001300 0FB7C0              <1>     movzx eax, ax
   328 00001303 01C2                <1>     add edx, eax
   329                              <1>     return
    13                              <2> %%_ret:
    14 00001305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   330                              <1> .bufHandlerErr:
   331 00001306 E895FEFFFF          <1>     call .badLineErrorMsg
   332                              <1>     return
    13                              <2> %%_ret:
    14 0000130B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> .bufHandlerTermCheck:
   334 0000130C 3C20                <1>     cmp al, SPC
   335                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000130E 74(0B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 00001310 3C09                <1>     cmp al, TAB
   337                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001312 74(0B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   338 00001314 3C0D                <1>     cmp al, CR
   339                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001316 74(0B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   340 00001318 3C0A                <1>     cmp al, LF
   341                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000131A 74(0B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     return
    13                              <2> %%_ret:
    14 0000131C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> 
   344                              <1> ;===============================
   345                              <1> ;   Device Driver Loader here  :
   346                              <1> ;===============================
   347                              <1> .drvLoader:
   348 0000131D 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   349 00001321 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE= to the pathname
   350 00001328 E815FEFFFF          <1>     call .skipSeparators
   351 0000132D 4889F7              <1>     mov rdi, rsi
   352 00001330 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   353                              <1> ;Now search for the first char after pathname. 
   354                              <1> .drvFindEndOfFileName:
   355 00001333 AC                  <1>     lodsb ;Get char from string name
   356                              <1>     ;Was the char a primitive string terminator?
   357 00001334 3C20                <1>     cmp al, SPC
   358 00001336 740C                <1>     je short .fileNameFound
   359 00001338 3C1A                <1>     cmp al, EOF
   360 0000133A 7408                <1>     je short .fileNameFound
   361 0000133C 3C0D                <1>     cmp al, CR
   362 0000133E 7404                <1>     je short .fileNameFound
   363 00001340 3C0A                <1>     cmp al, LF
   364 00001342 75EF                <1>     jne short .drvFindEndOfFileName
   365                              <1> .fileNameFound:
   366 00001344 48FFCE              <1>     dec rsi ;Point rsi to the space itself
   367 00001347 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   368 0000134B 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   369 0000134E 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   370 00001352 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   371                              <1>     ;rdx -> Filename
   372                              <1>     ;Here open the file to attempt to see how much space to 
   373                              <1>     ; allocate to the file for loading. 
   374                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   375                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   376                              <1>     ; which would allow for opening of files independently of calling programs'
   377                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   378 00001355 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   379 0000135A CD21                <1>     int 21h
   380 0000135C 0F82CA020000        <1>     jc .drvBad
   381 00001362 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   382 00001365 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   383 00001367 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   384 0000136C CD21                <1>     int 21h
   385 0000136E 89C6                <1>     mov esi, eax    ;Save the file size in esi
   386 00001370 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   387 00001372 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   388 00001377 CD21                <1>     int 21h
   389 00001379 53                  <1>     push rbx        ;Push the file handle on the stack
   390 0000137A BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   391 0000137F B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   392 00001384 CD21                <1>     int 21h
   393 00001386 5B                  <1>     pop rbx         ;Get the handle back in rbx
   394 00001387 0F82AF020000        <1>     jc .drvMemClose
   395 0000138D 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   396 00001390 B940000000          <1>     mov ecx, imageDosHdr_size
   397 00001395 B8003F0000          <1>     mov eax, 3F00h  ;READ
   398 0000139A CD21                <1>     int 21h
   399 0000139C 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   400 0000139F 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   401 000013A2 730C                <1>     jnc short .headerReadOK
   402                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   403                              <1>     ;r8 must point to the block to free
   404 000013A4 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   405 000013A9 CD21                <1>     int 21h
   406 000013AB E975020000          <1>     jmp .drvBadClose
   407                              <1> .headerReadOK:
   408                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   409 000013B0 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   410                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   411 000013B3 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   412 000013B8 7430                <1>     je short .exeDrivers
   413 000013BA 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   414 000013BF 7429                <1>     je short .exeDrivers
   415                              <1> ;.COM drivers come down here
   416                              <1>     ;Get File Image Allocation Size in ecx here.
   417                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   418 000013C1 31C9                <1>     xor ecx, ecx
   419 000013C3 31D2                <1>     xor edx, edx
   420 000013C5 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   421 000013CA CD21                <1>     int 21h
   422                              <1>     ;eax now has the filesize. 
   423 000013CC 89C1                <1>     mov ecx, eax
   424 000013CE 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   425 000013D4 81C101000000        <1>     add ecx, 1h     ;... and round up!
   426 000013DA C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   427 000013DD 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   428 000013E3 73BF                <1>     jae .drvFreeMemAndHdl
   429 000013E5 E97C000000          <1>     jmp .loadCont
   430                              <1> .exeDrivers:
   431                              <1>     ;Get the file pointer for file header
   432 000013EA 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   433 000013ED 31C9                <1>     xor ecx, ecx
   434 000013EF B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   435 000013F4 CD21                <1>     int 21h
   436                              <1>     ;Now read in imageFileHeader here
   437 000013F6 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   438 000013F9 B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   439 000013FE B8003F0000          <1>     mov eax, 3F00h  ;READ
   440 00001403 CD21                <1>     int 21h
   441 00001405 729D                <1>     jc short .drvFreeMemAndHdl
   442 00001407 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   443 0000140C 7296                <1>     jb short .drvFreeMemAndHdl
   444 0000140E 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   445 00001414 758E                <1>     jne .drvFreeMemAndHdl
   446 00001416 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   447 0000141C 7586                <1>     jne .drvFreeMemAndHdl
   448 0000141E 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   449 00001424 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   450                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   451 0000142A B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   452 0000142F B8003F0000          <1>     mov eax, 3F00h  ;READ
   453 00001434 CD21                <1>     int 21h
   454 00001436 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   455 0000143C 3D38000000          <1>     cmp eax, 56
   456 00001441 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   457                              <1>     ;Round up size requirement.
   458                              <1>     ;If .EXE, round up to nearest section alignment
   459 00001447 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   460 0000144A 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   461 0000144D 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   462 0000144F FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   463 00001451 F7D0                <1>     not eax         ;Flip the set and clear bits
   464 00001453 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   465 00001455 01F1                <1>     add ecx, esi    ;Now round upwards!
   466 00001457 C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   467 0000145A 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   468 00001460 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   469                              <1> .loadCont:
   470 00001466 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   471 0000146B CD21                <1>     int 21h ;r8 has the pointer to the block for freeing
   472                              <1>     ;Now close the file
   473 0000146D B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   474 00001472 CD21                <1>     int 21h
   475 00001474 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   476 00001476 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   477 0000147B CD21                <1>     int 21h         ;rax gets the pointer to load the program into
   478 0000147D 0F82B9010000        <1>     jc .drvMemClose
   479                              <1>     ;Now set the subsystem marker and the owner to DOS
   480 00001483 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   481 00001487 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   482                              <1>     ;Build the overlay command block
   483 0000148F 488D1D78F8FFFF      <1>     lea rbx, cmdBlock
   484 00001496 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   485 00001499 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   486 0000149D 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   487 000014A1 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE= to the null terminated pathname
   488 000014A8 E895FCFFFF          <1>     call .skipSeparators
   489 000014AD 4889F2              <1>     mov rdx, rsi
   490 000014B0 B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   491 000014B5 CD21                <1>     int 21h
   492 000014B7 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   493                              <1> .badDriverLoad:
   494 000014B9 4C8B054EF8FFFF      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   495 000014C0 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   496 000014C5 CD21                <1>     int 21h
   497 000014C7 488D1508000000      <1>     lea rdx, .drvMemMsg
   498 000014CE B800090000          <1>     mov eax, 0900h
   499 000014D3 CD21                <1>     int 21h
   500                              <1>     return
    13                              <2> %%_ret:
    14 000014D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501 000014D6 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   501 000014DF 756768206D656D6F72- <1>
   501 000014E8 7920666F7220647269- <1>
   501 000014F1 7665720D0A24        <1>
   502                              <1> .loadOk:
   503                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   504 000014F7 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   505 000014FA 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   506                              <1>     ;Reset the command line to have a space at the null terminator
   507 000014FD 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   508 00001501 53                  <1>     push rbx
   509 00001502 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   510 00001505 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   511 00001507 5B                  <1>     pop rbx
   512                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   513                              <1>     ;Hence, rsi points to that byte!
   514                              <1>     ;Pointers of each header need adjustment relative to their load address,
   515                              <1>     ; and linking into the main driver chain after NUL.
   516                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   517                              <1>     ;                 Else, free using kernel eject routine.
   518 00001508 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   519                              <1> .driverPtrAdjustment:
   520 00001509 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   521 0000150D 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   522 00001511 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   523 00001518 7408                <1>     je short .driverPtrAdjustmentDone
   524 0000151A 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   525 0000151D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   526 00001520 EBE7                <1>     jmp short .driverPtrAdjustment
   527                              <1> .driverPtrAdjustmentDone:
   528 00001522 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   529                              <1>     ;Prepare for initialising the drivers in the arena
   530                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   531 00001523 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   532 00001526 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   532 0000152F 00                  <1>
   533 00001530 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   533 00001535 [1F040000]          <1>
   534 00001539 488D1D7BF9FFFF      <1>     lea rbx, initDrvBlk
   535 00001540 56                  <1>     push rsi
   536 00001541 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   537 00001545 4881C606000000      <1>     add rsi, 6  ;Go past DEVICE
   538 0000154C E8F1FBFFFF          <1>     call .skipSeparators    ;Go past equals and any following spaces
   539 00001551 48897316            <1>     mov qword [rbx + initReqPkt.optptr], rsi ;and pass to driver!
   540 00001555 5E                  <1>     pop rsi
   541 00001556 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   542                              <1> .driverInit:
   543 0000155A 4C87E5              <1>     xchg r12, rbp
   544 0000155D E852F6FFFF          <1>     call initDriver
   545 00001562 725E                <1>     jc short .driverBadRbpAdjust
   546 00001564 E815F5FFFF          <1>     call addDriverMarkers
   547 00001569 4C87E5              <1>     xchg r12, rbp
   548 0000156C 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   549 00001572 7507                <1>     jnz short .driverInitialised
   550 00001574 E8A9F6FFFF          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   551 00001579 724A                <1>     jc short .driverBad
   552                              <1> .driverInitialised:
   553 0000157B 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   554 00001582 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   555 00001586 75D2                <1>     jne short .driverInit ;If not, goto next driver
   556                              <1> ;Now we eject the init routines for the driver
   557                              <1> ;r8 points to the MCB data area already
   558 00001588 31DB                <1>     xor ebx, ebx
   559 0000158A 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   560 0000158E 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   561 00001592 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   562 00001599 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   563 0000159E E8C0F5FFFF          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   564                              <1>     ;Link into main driver chain, 
   565                              <1>     ;r9 points to first driver in block
   566                              <1>     ;rsi points to last driver in block
   567 000015A3 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   568 000015A7 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   569 000015AE 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   570 000015B1 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   571 000015B4 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   572                              <1> .driverExit:
   573                              <1> ;Exit the init routine if it all works out, WOO!
   574                              <1> ;Return values to original registers/memory locations
   575 000015B7 644C891C25-         <1>     mov qword fs:[currentPSP], r11
   575 000015BC [1F040000]          <1>
   576 000015C0 F8                  <1>     clc
   577                              <1>     return
    13                              <2> %%_ret:
    14 000015C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> .driverBadRbpAdjust:
   579 000015C2 4C89E5              <1>     mov rbp, r12
   580                              <1> .driverBad:
   581                              <1>     ;Form the string to print
   582 000015C5 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
   583 000015CC 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
   584 000015D2 750C                <1>     jnz short .driverCharBad    ;If not, exit
   585                              <1>     ;MSD devices need to have something placed in there
   586 000015D4 48B84D534420646576- <1>     mov rax, "MSD dev "
   586 000015DD 20                  <1>
   587 000015DE 48AB                <1>     stosq   ;Store the 8 chars here
   588                              <1> .driverCharBad:
   589 000015E0 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
   590 000015E4 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
   591                              <1> .driverBadPrint:
   592 000015E6 488D1510000000      <1>     lea rdx, .driverBad1
   593 000015ED B800090000          <1>     mov eax, 0900h  ;Print the string!
   594 000015F2 CD21                <1>     int 21h
   595 000015F4 B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
   596 000015F9 CD21                <1>     int 21h
   597 000015FB EBBA                <1>     jmp short .driverExit
   598 000015FD 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
   598 00001606 6E697469616C697369- <1>
   598 0000160F 6E6720647269766572- <1>
   598 00001618 3A20                <1>
   599 0000161A 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
   599 00001623 0A24                <1>
   600                              <1> ;------------------
   601                              <1> ;Bad exit cases
   602                              <1> ;------------------
   603                              <1> .drvBadClose:
   604 00001625 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   605 0000162A CD21                <1>     int 21h
   606                              <1> .drvBad:
   607 0000162C 488D1519000000      <1>     lea rdx, .drvBadMsg
   608                              <1> .drvBad2:
   609 00001633 B800090000          <1>     mov eax, 0900h
   610 00001638 CD21                <1>     int 21h
   611 0000163A F8                  <1>     clc ;Never return with CF=CY
   612                              <1>     return
    13                              <2> %%_ret:
    14 0000163B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> .drvMemClose:
   614 0000163C B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   615 00001641 CD21                <1>     int 21h
   616 00001643 488D158CFEFFFF      <1>     lea rdx, .drvMemMsg
   617 0000164A EBE7                <1>     jmp short .drvBad2
   618                              <1> 
   619 0000164C 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
   619 00001655 6D697373696E672066- <1>
   619 0000165E 696C656E616D650D0A- <1>
   619 00001667 24                  <1>
   620                              <1> 
   621                              <1> .sftHandler:
   622                              <1> ;This reads the line to set the number of FILE to between 1 and 254
   623 00001668 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   624 0000166C 4881C605000000      <1>     add rsi, 5  ;Go past FILES=
   625 00001673 E8CAFAFFFF          <1>     call .skipSeparators
   626                              <1>     ;This must be at most three digits, anything else is a failure
   627 00001678 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   628 0000167B 31C9                <1>     xor ecx, ecx
   629 0000167D AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   630 0000167E 3C30                <1>     cmp al, "0"
   631 00001680 0F828E000000        <1>     jb .sftHandlerErr
   632 00001686 3C39                <1>     cmp al, "9"
   633 00001688 0F8786000000        <1>     ja .sftHandlerErr
   634 0000168E FFC1                <1>     inc ecx ;Increment char counter
   635 00001690 AC                  <1>     lodsb   ;Get second char
   636 00001691 E884000000          <1>     call .sftHandlerTermCheck
   637 00001696 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   638 00001698 3C30                <1>     cmp al, "0"
   639 0000169A 7278                <1>     jb .sftHandlerErr
   640 0000169C 3C39                <1>     cmp al, "9"
   641 0000169E 7774                <1>     ja .sftHandlerErr
   642 000016A0 FFC1                <1>     inc ecx ;Increment char counter
   643 000016A2 AC                  <1>     lodsb   ;Get third char
   644 000016A3 E872000000          <1>     call .sftHandlerTermCheck
   645 000016A8 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
   646 000016AA 3C30                <1>     cmp al, "0"
   647 000016AC 7266                <1>     jb .sftHandlerErr
   648 000016AE 3C39                <1>     cmp al, "9"
   649 000016B0 7762                <1>     ja .sftHandlerErr
   650 000016B2 AC                  <1>     lodsb   ;Check no more chars!
   651 000016B3 E862000000          <1>     call .sftHandlerTermCheck
   652 000016B8 755A                <1>     jne .sftHandlerErr
   653 000016BA FFC1                <1>     inc ecx ;Increment char counter
   654                              <1> .sftHandlerProcess:
   655 000016BC 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   656 000016BE 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   657                              <1> .sftHandlerLp:
   658 000016C1 FFC9                <1>     dec ecx
   659 000016C3 AC                  <1>     lodsb   ;Get the digit
   660 000016C4 E823000000          <1>     call .sftHandlerMul
   661 000016C9 67E302              <1>     jecxz .sftHandlerPrepExit
   662 000016CC EBF3                <1>     jmp short .sftHandlerLp 
   663                              <1> .sftHandlerPrepExit:
   664                              <1> ;edx has the value now, so place it in stack
   665 000016CE 81FAFE000000        <1>     cmp edx, 254
   666 000016D4 773E                <1>     ja .sftHandlerErr       ;DOS maximum number of files
   667 000016D6 0FB60DC5F7FFFF      <1>     movzx ecx, byte [FILES] ;Get default if the user specifies less than min
   668 000016DD 81FA08000000        <1>     cmp edx, 8              ;DOS minimum number of files
   669 000016E3 0F42D1              <1>     cmovb edx, ecx
   670 000016E6 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
   671 000016EA F8                  <1>     clc
   672                              <1>     return
    13                              <2> %%_ret:
    14 000016EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> .sftHandlerMul:
   674                              <1> ;Input:
   675                              <1> ;al = digit to add to result (ASCII digit)
   676                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
   677                              <1> ;rdx = Accumulated sum
   678                              <1> ;Output:
   679                              <1> ;rdx = Accumulated sum with al added
   680                              <1> ;eax is destroyed
   681                              <1> ;All other registers preserved
   682 000016EC 51                  <1>     push rcx
   683 000016ED 52                  <1>     push rdx
   684 000016EE 0FB6C0              <1>     movzx eax, al
   685 000016F1 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
   686 000016F6 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
   687 000016FB 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
   688 000016FD BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
   689 00001702 B964000000          <1>     mov ecx, 100
   690 00001707 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
   691 0000170A 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
   692 0000170D F7E3                <1>     mul ebx    ;Multiply the base offset to eax
   693 0000170F 5A                  <1>     pop rdx ;Get the accumulated value back
   694 00001710 01C2                <1>     add edx, eax    ;Add this result over
   695 00001712 59                  <1>     pop rcx
   696                              <1>     return
    13                              <2> %%_ret:
    14 00001713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> .sftHandlerErr:
   698 00001714 E887FAFFFF          <1>     call .badLineErrorMsg
   699                              <1>     return
    13                              <2> %%_ret:
    14 00001719 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   700                              <1> .sftHandlerTermCheck:
   701 0000171A 3C20                <1>     cmp al, SPC
   702                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000171C 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   703 0000171E 3C09                <1>     cmp al, TAB
   704                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001720 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   705 00001722 3C0D                <1>     cmp al, CR
   706                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001724 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   707 00001726 3C0A                <1>     cmp al, LF
   708                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001728 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   709                              <1>     return
    13                              <2> %%_ret:
    14 0000172A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   710                              <1> 
   711                              <1> .lastdriveHandler:
   712 0000172B 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   713 0000172F 4881C609000000      <1>     add rsi, 9  ;Go past LASTDRIVE=
   714 00001736 E807FAFFFF          <1>     call .skipSeparators
   715 0000173B AC                  <1>     lodsb   ;Get this char
   716 0000173C 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
   717 0000173F E84B000000          <1>     call .ucChar
   718 00001744 3C5A                <1>     cmp al, "Z"
   719 00001746 77CC                <1>     ja .sftHandlerErr
   720 00001748 3C41                <1>     cmp al, "A"
   721 0000174A 72C8                <1>     jb .sftHandlerErr
   722 0000174C 803E0D              <1>     cmp byte [rsi], CR
   723 0000174F 740F                <1>     je .ldProceed
   724 00001751 803E0A              <1>     cmp byte [rsi], LF
   725 00001754 740A                <1>     je .ldProceed
   726 00001756 803E09              <1>     cmp byte [rsi], TAB
   727 00001759 7405                <1>     je .ldProceed
   728 0000175B 803E20              <1>     cmp byte [rsi], SPC
   729 0000175E 75B4                <1>     jne .sftHandlerErr
   730                              <1> .ldProceed:
   731 00001760 2C40                <1>     sub al, "@"     ;Convert into a number 1-26 
   732 00001762 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
   733 00001765 0FB61539F7FFFF      <1>     movzx edx, byte [LASTDRIVE]
   734 0000176C 39D0                <1>     cmp eax, edx
   735 0000176E 0F42C2              <1>     cmovb eax, edx
   736 00001771 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   737 00001775 F8                  <1>     clc
   738                              <1>     return
    13                              <2> %%_ret:
    14 00001776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   739                              <1> .countryScan:
   740                              <1> .fcbHandler:
   741                              <1> .shellHandler:
   742                              <1> .stacksHandler:
   743                              <1> .drivParm:
   744                              <1> .comment:
   745                              <1>     return
    13                              <2> %%_ret:
    14 00001777 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   746                              <1> 
   747                              <1> .cfgExit:
   748 00001778 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
   749 0000177C B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
   750 00001781 CD21                <1>     int 21h ;bx already has the handle
   751 00001783 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
   752 00001787 B800490000          <1>     mov eax, 4900h  ;FREE
   753 0000178C CD21                <1>     int 21h
   754                              <1>     return
    13                              <2> %%_ret:
    14 0000178E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> .ucChar:
   756                              <1> ;Input: al = Char to UC
   757                              <1> ;Output: al = UC'd char
   758 0000178F 53                  <1>     push rbx    ;Save on original stack
   759 00001790 4889E3              <1>     mov rbx, rsp    ;Save across the call.
   760 00001793 50                  <1>     push rax    ;Push two copies in case we get aligned (since we 8byte)
   761 00001794 50                  <1>     push rax
   762 00001795 B813120000          <1>     mov eax, 1213h  ;Uppercase the char in al
   763 0000179A CD2F                <1>     int 2fh
   764 0000179C 4889DC              <1>     mov rsp, rbx    ;Bring back stack
   765 0000179F 5B                  <1>     pop rbx         ;Get back original rbx
   766                              <1>     return
    13                              <2> %%_ret:
    14 000017A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 000017A1 31C0                <1>     xor eax, eax    ;Drive A:
    14 000017A3 BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 000017A8 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 000017AC 0F45C3              <1>     cmovnz eax, ebx
    17 000017AF 8805EFF6FFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 000017B5 4889351A040000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 000017BC C605DFF6FFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 000017C3 C605D9F6FFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 000017CA C605D4F6FFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 000017D1 C705DCF6FFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 000017DA 00                  <1>
    24 000017DB 48C705C9F6FFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 000017E4 0000                <1>
    25 000017E6 C605B9F6FFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 000017ED CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 000017EF 49C1E818            <1>     shr r8, 3*8
    29 000017F3 4584C0              <1>     test r8b, r8b
    30 000017F6 0F8495030000        <1>     jz OEMHALT
    31 000017FC 4889F7              <1>     mov rdi, rsi
    32 000017FF 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 00001806 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 0000180D B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 00001812 57                  <1>     push rdi        ;rdi points to the APT space
    42 00001813 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 0000181C 00                  <1>
    43                              <1> pdtLoop:
    44 0000181D 48AB                <1>     stosq
    45 0000181F 480500002000        <1>     add rax, 200000h
    46 00001825 FFC9                <1>     dec ecx
    47 00001827 75F4                <1>     jnz pdtLoop
    48 00001829 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 0000182A 48893D59F6FFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 00001831 57                  <1>     push rdi
    53 00001832 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 00001835 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 00001838 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 0000183F 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 00001846 B93C000000          <1>     mov ecx, 60
    58 0000184B 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 00001851 48AB                <1>     stosq
    61 00001853 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 00001859 FFC9                <1>     dec ecx
    63 0000185B 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 0000185D 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 00001860 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 00001863 48B8-               <1>     mov rax, driverChain
    71 00001865 [FF7D000000000000]  <1>
    72 0000186D 5F                  <1>     pop rdi
    73 0000186E 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 00001871 4889052FF6FFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75                              <1> 
    76                              <1> ;----------------------------------------------------------------
    77                              <1> ;                       PIC Remap procedure                     :
    78                              <1> ;----------------------------------------------------------------
    79                              <1> ;Remapping the IRQ lines to Interrupts 0F0h - 0FFh
    80 00001878 FA                  <1>     cli
    81 00001879 B0FF                <1>     mov al, 0FFh    ;Mask all interrupts 
    82 0000187B E621                <1>     out 021h, al
    83 0000187D E6A1                <1>     out 0A1h, al
    84 0000187F 0F010D68030000      <1>     sidt [oemIDTptr]    ;Get the idt here
    85 00001886 488B3563030000      <1>     mov rsi, qword [oemIDTptr.Base] ;Get the base ptr
    86 0000188D 4889F7              <1>     mov rdi, rsi
    87 00001890 4881C600020000      <1>     add rsi, 020h*10h
    88 00001897 4881C7000F0000      <1>     add rdi, 0F0h*10h
    89 0000189E B920000000          <1>     mov ecx, 2*10h    ;Copy the hardware IRQ pointers high!
    90 000018A3 F348A5              <1>     rep movsq
    91                              <1> 
    92 000018A6 B011                <1>     mov al, 11h        ;bit 10h and 1h = Start initialisation
    93 000018A8 E620                <1>     out 020h, al
    94 000018AA E680                <1>     out 080h, al    
    95 000018AC E6A0                <1>     out 0A0h, al
    96 000018AE E680                <1>     out 080h, al    
    97 000018B0 B0F0                <1>     mov al, 0F0h       ;PIC1 to take Int 0F0h - F7h
    98 000018B2 E621                <1>     out 021h, al
    99 000018B4 E680                <1>     out 080h, al    
   100 000018B6 0408                <1>     add al, 8        ;PIC2 to take Int  F8h - FFh
   101 000018B8 E6A1                <1>     out 0A1h, al 
   102 000018BA E680                <1>     out 080h, al    
   103 000018BC B004                <1>     mov al, 4
   104 000018BE E621                <1>     out 021h, al    ;Tell PIC 1 that there is a PIC 2 at IRQ2 (00000100)
   105 000018C0 E680                <1>     out 080h, al    
   106 000018C2 FEC8                <1>     dec al
   107 000018C4 FEC8                <1>     dec al
   108 000018C6 E6A1                <1>     out 0A1h, al    ;Tell PIC 2 its cascade identity (00000010)
   109 000018C8 E680                <1>     out 080h, al
   110 000018CA B001                <1>     mov al, 01h        ;Initialise in 8086 mode
   111 000018CC E621                <1>     out 021h, al
   112 000018CE E680                <1>     out 080h, al    
   113 000018D0 E6A1                <1>     out 0A1h, al
   114 000018D2 E680                <1>     out 080h, al    
   115 000018D4 0F011D13030000      <1>     lidt [oemIDTptr] 
   116 000018DB 31C0                <1>     xor eax, eax    ;Unmask all interrupts 
   117 000018DD E621                <1>     out 021h, al
   118 000018DF E6A1                <1>     out 0A1h, al
   119 000018E1 FB                  <1>     sti
   120                              <1> ;Ensure that interrupts are still masked
   121 000018E2 C3                  <1>     ret
   122                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
   123                              <1> OEMINIT ENDP
   124                              <1> 
   125                              <1> OEMMCBINIT PROC NEAR
   126 000018E3 B820E80000          <1>     mov eax, 0E820h ;Get memory map
   127 000018E8 CD35                <1>     int 35h ; rsi has pointer to memory map
   128 000018EA 488B05E5020000      <1>     mov rax, qword [biosUBase]
   129 000018F1 E8F6000000          <1>     call .mcbFindAddress
   130 000018F6 7341                <1>     jnc .mcbi1  ;If found, proceed
   131                              <1>     ;Here, we try use E801h
   132 000018F8 B801E80000          <1>     mov eax, 0E801h
   133 000018FD CD35                <1>     int 35h
   134 000018FF 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   135 00001902 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   136 00001905 85C0                <1>     test eax, eax
   137 00001907 7417                <1>     jz .worst
   138 00001909 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   139 0000190C C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   140 0000190F 8905C9020000        <1>     mov dword [loProtMem], eax
   141 00001915 891DC7020000        <1>     mov dword [hiProtMem], ebx
   142 0000191B E919010000          <1>     jmp mcbBuild
   143                              <1> .worst:
   144                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   145 00001920 B800002000          <1>     mov eax, 200000h
   146 00001925 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   147 0000192C 29D8                <1>     sub eax, ebx
   148 0000192E 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   149 00001934 E900010000          <1>     jmp mcbBuild 
   150                              <1> .mcbi1:
   151 00001939 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   152 0000193C 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   152 00001945 00                  <1>
   153 00001946 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   154 0000194A 0F85BC000000        <1>     jne .mcbFail
   155 00001950 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   156                              <1>     ;PCI hole always exists so this value will always be a dword
   157 00001954 890584020000        <1>     mov dword [loProtMem], eax
   158 0000195A 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   159 0000195D 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   160 00001960 4881FB00000001      <1>     cmp rbx, 1000000h  
   161 00001967 773A                <1>     ja .skipISA
   162                              <1> ;Here we deal with ISA hole issues
   163 00001969 B820E80000          <1>     mov eax, 0E820h
   164 0000196E CD35                <1>     int 35h
   165 00001970 48B800000001000000- <1>     mov rax, 1000000h
   165 00001979 00                  <1>
   166 0000197A E86D000000          <1>     call .mcbFindAddress
   167 0000197F 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   168 00001985 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   168 0000198E 00                  <1>
   169 0000198F 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   170 00001993 0F85A0000000        <1>     jne mcbBuild  
   171 00001999 488B5808            <1>     mov rbx, qword [rax + 8]
   172 0000199D 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   173                              <1> .skipISA:
   174 000019A3 B820E80000          <1>     mov eax, 0E820h
   175 000019A8 CD35                <1>     int 35h
   176 000019AA 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   176 000019B3 00                  <1>
   177 000019B4 E833000000          <1>     call .mcbFindAddress
   178 000019B9 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   179 000019BB 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   179 000019C4 00                  <1>
   180 000019C5 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   181 000019C9 756E                <1>     jne mcbBuild   
   182 000019CB 488B5808            <1>     mov rbx, qword [rax + 8]
   183                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   184 000019CF 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   184 000019D8 00                  <1>
   185 000019D9 4839CB              <1>     cmp rbx, rcx
   186 000019DC 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   187 000019E0 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   188 000019E7 E94D000000          <1>     jmp mcbBuild
   189                              <1> .mcbFindAddress:
   190                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   191                              <1> ;Entry: rax = Address of arena to search for
   192                              <1> ;       rsi = Pointer to memory map
   193                              <1> ;       ecx = Number of 24 byte entries
   194                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   195                              <1> ;       CF=CY : value in rax not found
   196 000019EC 56                  <1>     push rsi
   197 000019ED 51                  <1>     push rcx
   198 000019EE 50                  <1>     push rax
   199                              <1> .mfa0:
   200 000019EF 483B06              <1>     cmp rax, qword [rsi]
   201 000019F2 7410                <1>     je .mcbAddressFound
   202 000019F4 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   203 000019FB FFC9                <1>     dec ecx
   204 000019FD 79F0                <1>     jns .mfa0
   205                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   206 000019FF 58                  <1>     pop rax
   207 00001A00 59                  <1>     pop rcx
   208 00001A01 5E                  <1>     pop rsi
   209 00001A02 F9                  <1>     stc
   210 00001A03 C3                  <1>     ret
   211                              <1> .mcbAddressFound:
   212 00001A04 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   213 00001A07 59                  <1>     pop rcx ;Pop old rax value off
   214 00001A08 59                  <1>     pop rcx
   215 00001A09 5E                  <1>     pop rsi
   216 00001A0A F8                  <1>     clc
   217 00001A0B C3                  <1>     ret
   218                              <1> .mcbFail:
   219 00001A0C 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   220 00001A13 B804130000          <1>     mov eax, 1304h
   221 00001A18 CD30                <1>     int 30h
   222 00001A1A E972010000          <1>     jmp OEMHALT
   223 00001A1F 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   223 00001A28 6C6F636174696F6E20- <1>
   223 00001A31 4572726F720A0D00    <1>
   224                              <1> 
   225                              <1> mcbBuild:
   226                              <1> ;Actually build the MCB chain here
   227                              <1> ;Start by computing the difference between userbase and DOS area
   228 00001A39 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   229 00001A40 488B3553F4FFFF      <1>     mov rsi, qword [MCBANCHOR]  
   230 00001A47 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   231 00001A4A 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   232 00001A4E 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   233 00001A54 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   234 00001A57 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   235 00001A5A 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   236 00001A5D 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   237 00001A63 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   238 00001A69 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   238 00001A72 00                  <1>
   239 00001A73 0F8218010000        <1>     jb OEMHALT
   240 00001A79 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   241 00001A7C 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   242 00001A7F C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   243 00001A82 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   244 00001A8A 31F6                <1>     xor esi, esi
   245 00001A8C 8B354C010000        <1>     mov esi, dword [loProtMem]
   246 00001A92 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   247 00001A98 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   248 00001A9B 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   249                              <1> 
   250                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   251 00001A9E 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   251 00001AA7 00                  <1>
   252 00001AA8 746C                <1>     jz .skipISA
   253                              <1>     ;Here if an ISA hole exists, place a MCB around it
   254 00001AAA 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   255                              <1>     ;Remove one MCB worth of space from alloc
   256 00001AB1 31C9                <1>     xor ecx, ecx
   257 00001AB3 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   258 00001AB6 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   259 00001ABC C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   260 00001ABF C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   261 00001AC2 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   262 00001AC5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   263 00001AC8 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   264 00001AD0 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   264 00001AD9 00                  <1>
   265 00001ADA 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   266 00001ADD 480510000000        <1>     add rax, mcb_size
   267 00001AE3 4829C1              <1>     sub rcx, rax    ;Take their difference
   268 00001AE6 C1E904              <1>     shr ecx, 4
   269 00001AE9 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   270 00001AEC C1E104              <1>     shl ecx, 4  ;Get bytes again
   271 00001AEF 4881C310000000      <1>     add rbx, mcb_size
   272 00001AF6 4801CB              <1>     add rbx, rcx
   273                              <1>     ;RBX should now be at 16Mb
   274 00001AF9 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   275 00001AFC 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   276 00001B04 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   277 00001B0A C1E904              <1>     shr ecx, 4  ;Get paragraphs
   278 00001B0D 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   279 00001B13 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   280                              <1> .skipISA:
   281                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   282                              <1>     ;rbx points to a block with "Z" marker
   283 00001B16 813DC6000000000000- <1>     cmp dword [longMem], 0
   283 00001B1F 00                  <1>
   284 00001B20 746E                <1>     jz .exit
   285                              <1>     ;Add PCI hole MCB
   286 00001B22 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   287                              <1>     ;Remove one MCB worth of space from alloc
   288 00001B29 31C9                <1>     xor ecx, ecx
   289 00001B2B 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   290 00001B2E 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   291 00001B34 C1E104              <1>     shl ecx, 4  ;Get bytes
   292 00001B37 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   293 00001B3A 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   294 00001B3D C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   295 00001B40 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   296 00001B48 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   296 00001B51 00                  <1>
   297 00001B52 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   298 00001B55 480510000000        <1>     add rax, mcb_size
   299 00001B5B 4829C1              <1>     sub rcx, rax    ;Take their difference
   300 00001B5E C1E904              <1>     shr ecx, 4
   301 00001B61 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   302 00001B64 C1E104              <1>     shl ecx, 4  ;Get bytes again
   303 00001B67 4881C310000000      <1>     add rbx, mcb_size
   304 00001B6E 4801CB              <1>     add rbx, rcx
   305                              <1>     ;RBX should now be at 4Gb
   306 00001B71 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   307 00001B74 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   308 00001B7C 488B0D63000000      <1>     mov rcx, qword [longMem]
   309 00001B83 48C1E904            <1>     shr rcx, 4
   310 00001B87 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   311 00001B8D 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   312                              <1> .exit:
   313 00001B90 C3                  <1>     ret
   314                              <1> OEMMCBINIT ENDP
   315                              <1> 
   316                              <1> OEMHALT PROC    NEAR
   317                              <1> ;If a critical error occurs during sysinit, fail through here
   318                              <1> ;Int 22h, 23h and 24h point here during sysinit
   319 00001B91 488D2D0C000000      <1>     lea rbp, hltmsg
   320 00001B98 B804130000          <1>     mov eax, 1304h
   321 00001B9D CD30                <1>     int 30h
   322                              <1> .ei0:
   323 00001B9F F4                  <1>     hlt
   324 00001BA0 F390                <1>     pause
   325 00001BA2 EBFB                <1>     jmp short .ei0
   326 00001BA4 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   326 00001BAD 7469616C6973696E67- <1>
   326 00001BB6 20534350444F532E53- <1>
   326 00001BBF 59532E205379737465- <1>
   326 00001BC8 6D2068616C74696E67- <1>
   326 00001BD1 2E2E2E00            <1>
   327                              <1> OEMHALT ENDP
   328                              <1> 
   329                              <1> OEMCALLBK PROC NEAR
   330 00001BD5 C3                  <1>     ret
   331                              <1> OEMCALLBK ENDP
   332                              <1> 
   333                              <1> ;OEM Only variables are permitted in this file. They are not 
   334                              <1> ; visible to SYSINIT
   335 00001BD6 0000000000000000    <1> biosUBase   dq 0
   336 00001BDE 00000000            <1> loProtMem   dd 0
   337 00001BE2 00000000            <1> hiProtMem   dd 0
   338 00001BE6 0000000000000000    <1> longMem     dq 0
   339                              <1> oemIDTptr:      ;Local IDT pointer
   340 00001BEE 0000                <1>     .Limit  dw 0
   341 00001BF0 0000000000000000    <1>     .Base   dq 0
    19                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    20                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare dq ?  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   dq ?  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   dq ?  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  dq ?  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  dq ?  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  dq ?  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  dq ?  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   dq ?  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare dq ?  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   149 00000141 <res 4Fh>           <1>     firstSft    db sft_size dup (?)
   150 00000190 <res 4Fh>           <1>     secondSft   db sft_size dup (?)
   151 000001DF <res 4Fh>           <1>     thirdSft    db sft_size dup (?)
   152 0000022E <res 4Fh>           <1>     fourthSft   db sft_size dup (?)
   153 0000027D <res 4Fh>           <1>     fifthSft    db sft_size dup (?)
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 db ?  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   207 0000045F ??                  <1>     volIdFlag   db ?    ;If set, we are searching for a volume ID
   208 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   209 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   210 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   211 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   212                              <1> 
   213 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   214 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   215 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   216 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   217 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   218                              <1> ;The below flag tells DOS to print ^C in the termination function
   219 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   220 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   221                              <1> ;Time stuff
   222                              <1> ;Read the below two as a word
   223 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   224 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   225 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   226 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   227 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   228                              <1> 
   229 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   230 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   231 00000496 ??                  <1>     Int24Trans  db ?  ;Set to -1 if Abort translated to Fail
   232                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   233                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   234                              <1> ; without forcing to re-build the whole primary request block.
   235                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   236                              <1> ; with secondary char output going through the secondary header
   237                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   238                              <1> ; for output)
   239                              <1> ;ioReqPkt is the largest possible packet
   240 00000497 <res 2Ah>           <1>     secdReqHdr  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   241 000004C1 <res 2Ah>           <1>     primReqHdr  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   242                              <1> altRet: ;Accessed as a qword
   243 000004EB <res 2Ah>           <1>     critReqHdr  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   244 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   245                              <1> ;Swappable Buffers
   246 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   247                              <1>     ;We add an additional byte to save ah too
   248 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   249                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   250                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   251 0000051E <res 80h>           <1>     buffer1     db 128 dup (?)  ;Space for one path and file name
   252                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   253 0000059E <res 80h>           <1>     buffer2     db 128 dup (?) ;Space for a second path and file name
   254 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   255 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   256 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   257                              <1> ;Misc bookkeeping flags and vars
   258 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   259 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   260 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;Temp CDS for Server calls that need a tmp CDS
   261 000006D9 <res Ch>            <1>     fcbName     db 11+1 dup (?)   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   262 000006E5 <res Ch>            <1>     wcdFcbName  db 11+1 dup (?)  ;Used to expand any wildcards for rename
   263 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   264 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   265 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   266 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   267 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   268 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   269 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   270 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   271 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   272 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   273 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   274                              <1> 
   275 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   276 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   277 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   278 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   279 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   280 00000708 ??                  <1>     delChar     db ?  ;Char to replace first byte of deleted file's name
   281 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   282                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   283                              <1> workingDD:  ;Create a symbol for the working device driver too
   284 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   285 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   286 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   287                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   288                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   289 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   290 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   291 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   292 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   293 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   294 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   295                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   296                              <1> ; and 32 byte offset into the sector for directory
   297 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   298                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   299                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   300 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   301                              <1> ;***************************************************|
   302                              <1> ; Needs to be set up before any file access         |
   303                              <1> ; These vars keep track of file access properties   |
   304                              <1> ;   and must be used only for such purposes.        |
   305                              <1> ;***************************************************|
   306 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   307 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   308                              <1> 
   309 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   310 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   311 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   312                              <1> 
   313 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   314 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   315                              <1> ;***************************************************|
   316 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   317 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   318 00000773 ??                  <1>     fileGrowing db ?  ;Flag to indicate the file is growing
   319 00000774 ????????            <1>     bytesAppend dd ?  ;Number of bytes by which a file has been extended by
   320 00000778 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   321 0000077C ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   322                              <1> ;Directory stuff
   323 00000780 ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   324 00000784 ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   325 00000788 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   326 0000078A ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   327                              <1> ;Error DPB 
   328 0000078E ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   329                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   330                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   331                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   332                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   333                              <1> ; anything anymore.
   334                              <1> haltDOS:
   335 00000796 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   336                              <1>     
   337 00000797 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   338 000007C2 <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   339                              <1> ;Stacks and scratch SFT
   340 000007E2 ????????????        <1>     alignb  8
   341 000007E8 <res 528h>          <1>     critStack   dq 165 dup (?)
   342 00000D10 ????????????????    <1>     critStakTop dq ?
   343                              <1> 
   344 00000D18 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   345                              <1>     
   346 00000D67 ??                  <1>     alignb  8
   347 00000D68 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   348 000013A0 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   349 000013A8 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   350 000019E0 ????????????????    <1>     DiskStakTop dq ?
   351                              <1> 
   352 000019E8 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   353                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   354 000019E9 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   355                              <1>     sdaLen      equ     $ - sda 
   356                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   357                              <1> 
   358                              <1> ;Additional variables NOT in the SDA
   359 000019EA ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   360 000019F2 <res 2Ah>           <1>     bkupReqHdr  db ioReqPkt_size dup (?)  ;A backup header to allow copying to
   361                              <1>     ;for saving the current header when quickly doing a second request
   362                              <1> 
   363                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   364                              <1> inExtASCII:
   365 00001A1C ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   366 00001A1D ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   367                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   368                              <1>     ; copy of the date/time record
   369                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   370                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   371                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   372                              <1>     ; to the read IDT routine".
   373                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   374 00001A1F ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   375 00001A21 ????????????????    <1>     .base   dq ?
   376                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   377                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   378                              <1>     ; were allowed to write to original callers register stack. 
   379                              <1>     ; So we have this structure below that is used by these functions to 
   380                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   381                              <1>     ; through the multiplexer we never will read this structure. 
   382                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   383 00001A29 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
   384                              <1>     dSegLen     equ     $
    21                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    22                                  %define currSegVBase section.resSeg.vstart
    23                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 98 ;.98
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0062                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic. The table below is NOT patched
    37                              <1> ; but instead, the function below gets replaced. By default, it points to 
    38                              <1> ; the function editKeys in charFunc.asm. 
    39 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    40 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    41 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    42                              <1> ;Extended ASCII keys with special meanings
    43 0000003C 3B                  <1> extKeyTbl   db eF1
    44 0000003D 922A                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    45 0000003F 3C                  <1>             db eF2
    46 00000040 842A                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    47 00000042 3D                  <1>             db eF3
    48 00000043 8B2A                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    49 00000045 3E                  <1>             db eF4
    50 00000046 C02A                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    51 00000048 3F                  <1>             db eF5
    52 00000049 052B                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    53 0000004B 40                  <1>             db eF6
    54 0000004C 1B2B                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    55 0000004E 41                  <1>             db eF7
    56 0000004F 222B                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    57 00000051 4B                  <1>             db eCursL
    58 00000052 E929                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    59 00000054 4D                  <1>             db eCursR
    60 00000055 922A                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    61 00000057 52                  <1>             db eIns
    62 00000058 2D2B                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    63 0000005A 53                  <1>             db eDel
    64 0000005B 342B                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    65                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    66                              <1> 
    67                              <1> ;When counting the number of days, first compute the number of years since
    68                              <1> ; 1980 and your year. 
    69                              <1> ;Then, using the table below, find the number of leap years between 1980
    70                              <1> ; and (YourYear - 1). 
    71                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    72                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    73                              <1> ;
    74                              <1> ;Use the months table to get the number of days in a normal month as leap 
    75                              <1> ; years are added using the previous comment.
    76                              <1> 
    77                              <1> ;This table is the number of days in the month
    78                              <1> ;The function which updates the days in Feb writes the number to this table
    79                              <1> monthsTbl:  
    80 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    80 00000066 1F1E1F              <1>
    81                              <1> 
    82                              <1> ;Error tables
    83                              <1> hardXlatTbl:
    84                              <1> ;Hard error xlat table. Used so that it can be patched by 
    85                              <1> ; multitaskers and network tools as opposed to having a static
    86                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    87 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    88 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    89 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    90 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    91 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    92 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    93 0000006F 19                  <1>     db errSekErr    ;Seek error
    94 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    95 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    96 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    97 00000073 1D                  <1>     db errWF        ;Write fault
    98 00000074 1E                  <1>     db errRF        ;Read fault
    99 00000075 1F                  <1>     db errGF        ;General fault
   100                              <1>     ;The following two adjust for share errors
   101 00000076 1F                  <1>     db errGF        ;Sharing violations
   102 00000077 1F                  <1>     db errGF        ;File Lock violation
   103 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   104                              <1> hardXlatTblL equ $ - hardXlatTbl
   105                              <1> errXlatTbl:
   106                              <1> ;Each entry is n bytes long, defined as
   107                              <1> ; Byte 0      : DOS function number for which translation will occur
   108                              <1> ; Byte 1      : Length of the table entry - 2
   109                              <1> ; Bytes n - 3 : Acceptable Error codes
   110                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   111                              <1> ;The table is terminated with a single -1 byte
   112                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   113                              <1> ; only on entry to a disk function
   114 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   115 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   116 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   117 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   118 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   119 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   120 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   121 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   122 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   123 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   124 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   125 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   126 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   127 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   128 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   129 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   130 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   131 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   132 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   133 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   134 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   135 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   136 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   137 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   138 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   139 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   140 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   141 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   142 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   143 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   144 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   145 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   146 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   147 00000114 FF                  <1>     db -1   ;End Of Table marker
   148                              <1> 
   149                              <1> 
   150                              <1> extErrTbl:
   151                              <1> ;This table contains the default values for how to respond
   152                              <1> ; to particular errors. Fields with -1 need to be filled in before
   153                              <1> ; setting variables using this table.
   154                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   155                              <1> ; Byte 0: Extended Error Code as a byte
   156                              <1> ; Byte 1: Error Class
   157                              <1> ; Byte 2: Error Suggested Action
   158                              <1> ; Byte 3: Error Locus
   159                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   160                              <1> ;
   161                              <1> ;Error 01: Invalid function number
   162 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   163                              <1> ;Error 02: File not found
   164 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   165                              <1> ;Error 03: Path not found
   166 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   167                              <1> ;Error 04: Too many open handles, and no handles are left
   168 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   169                              <1> ;Error 05: Access being denied
   170 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   171                              <1> ;Error 06: Invalid File handle being provided
   172 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   173                              <1> ;Error 07: MCB chain destroyed
   174 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   175                              <1> ;Error 08: No Memory remaining
   176 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   177                              <1> ;Error 09: Invalid MCB block Address
   178 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0A: Bad Environment block
   180 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   181                              <1> ;Error 0B: Data provided in a bad format
   182 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   183                              <1> ;Error 0C: Access Code Invalid
   184 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   185                              <1> ;Error 0D: Error due to Invalid Data provided
   186 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   187                              <1> ;Error 0F: Error due to a bad drive letter being provided
   188 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   189                              <1> ;Error 10: Error due to attempting to delete the CWD
   190 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   191                              <1> ;Error 11: Error due to a unknown device being used
   192 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   193                              <1> ;Error 12: No more file handles available
   194 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 50: Network request not supported
   196 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   197                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   198 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 21: File Locking Violation
   200 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   201                              <1> ;Error 54: Too many levels of redirection error
   202 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   203                              <1> ;Error 56: Bad resource password provided
   204 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   205                              <1> ;Error 52: Directory already exists
   206 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   207                              <1> ;Error 32: Network request not supported by DOS
   208 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   209                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   210 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   211                              <1> ;Error 57: Bad parameter in request
   212 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   213                              <1> ;Error 53: Fail was returned from Int 24h
   214 0000017D 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   215                              <1> ;Error 24: Sharing Buffer Full
   216 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   217 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   218                              <1> 
   219                              <1> ;Nationalisation stuff
   220                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   221 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   222 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   222 0000019A 535953000000000000- <1>
   222 000001A3 000000000000000000- <1>
   222 000001AC 000000000000000000- <1>
   222 000001B5 000000000000000000- <1>
   222 000001BE 000000000000000000- <1>
   222 000001C7 000000000000000000- <1>
   222 000001D0 00                  <1>
   223 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   224 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   225                              <1> charTableArray: ;All the qwords need fixing up here
   226                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   227 000001D5 02                  <1>     db 2
   228 000001D6 [2602000000000000]  <1>     dq ucTblExt
   229                              <1> .filenameUCTable:
   230 000001DE 04                  <1>     db 4
   231 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   232                              <1> .filenameTerminatingTable:
   233 000001E7 05                  <1>     db 5
   234 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   235                              <1> .collatingTable:
   236 000001F0 06                  <1>     db 6
   237 000001F1 [5A03000000000000]  <1>     dq collTblExt
   238                              <1> ;Extended country table
   239                              <1> extCtryTbl:
   240 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   241                              <1>     ;Below: Length of structure (not including this word and above byte)
   242 000001FA 2A00                <1>     dw extCtryTblL
   243                              <1> .countryCode:
   244 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   245                              <1> .activeCP:
   246 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   247                              <1> ;Regular country table
   248                              <1> ctryTbl:
   249                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   250 00000200 0100                <1>     dw 1    ;Date format, UK style
   251 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   252 00000207 2C00                <1>     db ",",0    ;Thousand separator
   253 00000209 2E00                <1>     db ".",0    ;Decimal separator
   254 0000020B 2D00                <1>     db "-",0    ;Date separator
   255 0000020D 3A00                <1>     db ":",0    ;Time separator
   256 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   257 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   258 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   259 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   260 0000021A 2C00                <1>     db ",",0    ;Data list separator
   261 0000021C 000000000000000000- <1>     db 10 dup (0)
   261 00000225 00                  <1>
   262                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   263                              <1> 
   264                              <1> ucTblExt:   ;External pointer to the uppercase table
   265 00000226 8000                <1>     dw 80h
   266                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   267 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   268 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   269 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   270 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   271 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   272 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   273 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   274 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   275 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   276 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   277 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   278 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   279 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   280 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   281 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   282 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   283                              <1> 
   284                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   285 000002A8 8000                <1>     dw 80h
   286                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   287 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   288 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   289 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   290 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   291 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   292 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   293 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   294 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   295 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   296 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   297 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   298 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   299 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   300 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   301 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   302 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   303                              <1> 
   304                              <1> fileTermTblExt:
   305 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   306 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   307 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   308 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   309 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   310                              <1> .startBadRange:
   311 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   312                              <1> .endBadRange:
   313 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   314 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   315                              <1> fileTermTbl:
   316 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   317 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   318 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   319                              <1>     fileTermTbl_len equ $ - fileTermTbl
   320                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   321                              <1>     ;Buffer space
   322 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   322 0000034B 000000000000000000- <1>
   322 00000354 000000000000        <1>
   323                              <1> 
   324                              <1> collTblExt:  ;Collating sequence table, for sorting
   325 0000035A 0001                <1>     dw 0100h
   326                              <1> collTbl:
   327 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   328 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   329 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   330 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   331 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   332 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   333 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   334 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   335 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   336 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   337 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   338 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   339 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   340 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   341 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   342 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   343 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   344 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   345 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   346 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   347 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   348 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   349 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   350 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   351 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   352 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   353 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   354 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   355 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   356 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   357 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   358 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   359                              <1> 
   360                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   361                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   362                              <1> ;Bit[1]=Clear if the char of a terminating type.
   363                              <1> ;Bit[2]=Clear if the char is of separator type.
   364                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   365                              <1> ;Bit[4-7]=Unused.    
   366                              <1> 
   367 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   368 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   369 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   370 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   371 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   372 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   373 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   374 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   375 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   376 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   377 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   378 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   379 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   380 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   381 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   382 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   383 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   383 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   383 000004EE FFFFFFFFFFFFFFFFFF- <1>
   383 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   383 00000500 FFFFFFFFFFFFFFFFFF- <1>
   383 00000509 FFFFFFFFFFFFFFFFFF- <1>
   383 00000512 FFFFFFFFFFFFFFFFFF- <1>
   383 0000051B FFFFFFFFFFFFFFFFFF- <1>
   383 00000524 FFFFFFFFFFFFFFFFFF- <1>
   383 0000052D FFFFFFFFFFFFFFFFFF- <1>
   383 00000536 FFFFFFFFFFFFFFFFFF- <1>
   383 0000053F FFFFFFFFFFFFFFFFFF- <1>
   383 00000548 FFFFFFFFFFFFFFFFFF- <1>
   383 00000551 FFFFFFFFFFFFFFFFFF- <1>
   383 0000055A FFFF                <1>
    24                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 4955                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E 431F                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 501F                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 2520                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 4E20                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 5620                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 6E20                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A A120                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C C620                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 2521                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 D823                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 3421                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 4021                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 6971                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 9D71                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A B12B                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C 262C                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E 4C29                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 082A                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 8F2A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 262C                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 262C                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 B12B                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A BE2A                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 4174                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E B671                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 7C2B                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 BD71                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 BF71                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 4174                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 4174                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 6C72                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 4174                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E 262C                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 262C                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 292B                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 262C                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 0872                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 4E54                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA 262C                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC 262C                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE A22B                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 5B26                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 8826                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 9726                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 B826                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 3272                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA 8F2B                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 4072                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 1B55                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 6E72                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 9370                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 A672                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 B772                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 C672                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA E95D                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC 125E                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE 7715                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 D817                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 CC19                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 282E                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 392E                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 7B2F                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA B92F                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC F42F                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE 0030                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 6530                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 D630                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 494A                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 F431                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 2F32                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 541B                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC DE4E                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE E250                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 EA51                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 B056                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 4B55                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 0A73                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 4432                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA AF32                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC DD70                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE E670                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 1873                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 2973                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 0774                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 3B54                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 DF32                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A 6B33                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 9253                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E 0E74                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 DB33                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 A334                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 B734                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 4274                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 0676                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 6C76                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C C91B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E 0071                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 EF70                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 4174                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 F870                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 AA5E                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 6E5F                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A 2335                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C 6036                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 4776                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 003F                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 056A                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 4A76                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 546B                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 801E                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 1E60                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 1F49                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 6A01                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 AD77                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 1B77                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 6C3B                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 6728                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B200                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CC00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DA00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 CE6B                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 B06B                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 606B                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 E96C                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 3E01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B 3748                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 226B                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 336A                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 C76A                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 5E0C                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 FA27                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 9E76                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 AB76                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B E76B                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 716A                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 6C48                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 ED1A                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 5B6F                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 1114                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 F876                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 A56B                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 5276                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D A92E                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 5A76                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 E72E                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 6F73                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 7C76                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 1C6D                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 276D                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B 6F73                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D 8371                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 5673                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 A873                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 0174                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 1274                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 1A74                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 2274                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 3D74                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 6774                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 6774                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 6774                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 7474                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    25                                  %if DEBUG
    26                                  %include "./src/Debug/debug.asm"
    27                                  %endif
    28                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 000006AD 7428                <1>     je .exit
    13 000006AF 56                  <1>     push rsi
    14 000006B0 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B7 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BA 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BC 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006BF EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C1 57                  <1>     push rdi
    22 000006C2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C5 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C8 5F                  <1>     pop rdi ;Get original buf back
    25 000006C9 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CC 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D3 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D6 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 000006D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> markBuffersAsUnreferencedWrapper:
    33                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    34                              <1> ; and preserves rdi
    35 000006D8 57                  <1>     push rdi
    36 000006D9 E802000000          <1>     call markBuffersAsUnreferenced
    37 000006DE 5F                  <1>     pop rdi
    38                              <1>     return
    13                              <2> %%_ret:
    14 000006DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    41                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    42                              <1> ;Output: rdi = First disk buffer
    43 000006E0 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    44 000006E7 57                  <1>     push rdi
    45                              <1> .lp:
    46 000006E8 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    47 000006EC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    48 000006EF 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    49 000006F6 75F0                <1>     jne .lp
    50 000006F8 5F                  <1>     pop rdi
    51                              <1>     return
    13                              <2> %%_ret:
    14 000006F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    54                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    55                              <1> ; second buffer in the chain in rdi
    56                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    57                              <1> ;Output: rdi = Second buffer in the chain
    58 000006FA 52                  <1>     push rdx
    59 000006FB 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    60 000006FE E8A3FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    61 00000703 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    62 00000706 5A                  <1>     pop rdx
    63                              <1>     return
    13                              <2> %%_ret:
    14 00000707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    66                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    67                              <1> ;Input: rdi = Buffer header to start searching at
    68                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    69                              <1> ;        ZF=ZE => No unreferenced buffer found
    70 00000708 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    71 0000070C 750C                <1>     jnz .exit
    72 0000070E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 00000711 4881FFFFFFFFFF      <1>     cmp rdi, -1
    74 00000718 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    75                              <1> .exit:
    76                              <1>     return
    13                              <2> %%_ret:
    14 0000071A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> flushAllBuffersForDPB:  ;External linkage
    79                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    80 0000071B 50                  <1>     push rax
    81 0000071C 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    82 00000723 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    83 00000726 E802000000          <1>     call flushAllBuffersForDrive
    84 0000072B 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000072C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    88                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    89                              <1> ; Used also to allow flushing all buffers
    90                              <1> ; Input: al = 0-based physical drive number we are xacting on
    91                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    92                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    93 0000072D 57                  <1>     push rdi
    94 0000072E 50                  <1>     push rax
    95 0000072F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    96 00000736 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
    97                              <1> .mainLp:
    98 00000738 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
    99 0000073F 741E                <1>     je .exit   
   100 00000741 E826000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   101 00000746 50                  <1>     push rax
   102 00000747 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   103 0000074B 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   104 00000751 58                  <1>     pop rax
   105 00000752 7405                <1>     je .errDrv    ;If not, goto next buffer
   106                              <1> .nextBuffer:
   107 00000754 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   108 00000757 EBDF                <1>     jmp short .mainLp
   109                              <1> .errDrv:
   110 00000759 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   111 0000075D EBF5                <1>     jmp short .nextBuffer
   112                              <1> .exit:
   113 0000075F 58                  <1>     pop rax
   114 00000760 5F                  <1>     pop rdi
   115 00000761 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   116                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000768 74C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   117 0000076A F9                  <1>     stc ;If so, return CF=CY
   118                              <1>     return
    13                              <2> %%_ret:
    14 0000076B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   119                              <1> 
   120                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   121                              <1> ;Flushes and cleans the dirty bit from the buffer
   122                              <1> ;Input: AH = Drives to ignore flush for
   123                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   124                              <1> ;       rdi -> Buffer in question
   125 0000076C 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   126                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000076F 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   127 00000771 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   128 00000773 7406                <1>     je .takeThisBuffer
   129 00000775 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   130 00000778 F8                  <1>     clc
   131                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000779 75F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   132                              <1> .takeThisBuffer:
   133 0000077B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   134                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000077F 74EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   135 00000781 50                  <1>     push rax    ;Save the drive number
   136 00000782 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   137 00000786 50                  <1>     push rax    ;Save the buffer flags
   138 00000787 E80C000000          <1>     call flushAndFreeBuffer
   139 0000078C 58                  <1>     pop rax     ;Get back the flags
   140 0000078D 7207                <1>     jc .exit
   141 0000078F 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   142 00000792 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   143                              <1> .exit:  
   144 00000796 58                  <1>     pop rax     ;Get back the drive number
   145                              <1>     return
    13                              <2> %%_ret:
    14 00000797 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   148                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   149                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   150                              <1> ;Exit:  CF=NC : Success
   151                              <1> ;       CF=CY : Fail, terminate the request
   152 00000798 50                  <1>     push rax
   153 00000799 53                  <1>     push rbx
   154 0000079A 51                  <1>     push rcx
   155 0000079B 52                  <1>     push rdx
   156 0000079C 56                  <1>     push rsi
   157 0000079D 55                  <1>     push rbp
   158                              <1> ;If the buffer is freed, skip flushing to avoid issues
   159 0000079E B8FF000000          <1>     mov eax, freeBuffer
   160 000007A3 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   161                              <1>     ;ah = Flags, al = Drive number
   162 000007A7 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   163 000007A9 7470                <1>     je .fbFreeExit  ;If it was free, exit
   164 000007AB F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   165 000007AE 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   166 000007B0 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   167 000007B6 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   168 000007B8 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   169 000007BF F6C408              <1>     test ah, dataBuffer
   170 000007C2 7407                <1>     jz .fbWriteSetup
   171 000007C4 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   172                              <1> .fbWriteSetup:
   173 000007CB BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   174 000007D0 F6C402              <1>     test ah, fatBuffer
   175 000007D3 7406                <1>     jz .fbWriteNotFat
   176 000007D5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   177                              <1> .fbWriteNotFat:
   178 000007DB 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   179 000007DF 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   180 000007E3 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   181 000007E7 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   182                              <1> .fbWriteDisk:
   183 000007EB 50                  <1>     push rax    ;Save the drive number and flags
   184 000007EC 53                  <1>     push rbx    ;Has pointer to buffer data area
   185 000007ED 51                  <1>     push rcx    ;# of FAT sectors
   186 000007EE 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   187 000007EF 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   188 000007F0 55                  <1>     push rbp    ;DPB ptr for drive
   189 000007F1 B901000000          <1>     mov ecx, 1  ;One sector to copy
   190 000007F6 E8E4660000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   191 000007FB E818650000          <1>     call absDiskDriverCall    ;Make Driver Request
   192 00000800 5D                  <1>     pop rbp
   193 00000801 5E                  <1>     pop rsi
   194 00000802 5A                  <1>     pop rdx
   195 00000803 59                  <1>     pop rcx
   196 00000804 5B                  <1>     pop rbx
   197                              <1>     ;Don't pop rax here to carry the error code if error!
   198 00000805 751C                <1>     jnz .fbFail
   199                              <1> ;Now check if the buffer was a FAT, to write additional copies
   200 00000807 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   201 00000808 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   202 0000080B 740E                <1>     jz .fbFreeExit  ;If not, exit
   203 0000080D FFC9                <1>     dec ecx
   204 0000080F 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   205 00000811 50                  <1>     push rax
   206 00000812 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   207 00000815 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   208 00000818 58                  <1>     pop rax
   209 00000819 EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   210                              <1> .fbFreeExit:
   211 0000081B F8                  <1>     clc
   212                              <1> .fbExitFail:
   213 0000081C 5D                  <1>     pop rbp
   214 0000081D 5E                  <1>     pop rsi
   215 0000081E 5A                  <1>     pop rdx
   216 0000081F 59                  <1>     pop rcx
   217 00000820 5B                  <1>     pop rbx
   218 00000821 58                  <1>     pop rax
   219                              <1>     return
    13                              <2> %%_ret:
    14 00000822 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   220                              <1> .fbFail:
   221                              <1> ;Enter here only if the request failed
   222 00000823 FFCE                <1>     dec esi
   223 00000825 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   224 00000827 58                  <1>     pop rax     ;Else pop back the drive number and flags
   225 00000828 EBC1                <1>     jmp short .fbWriteDisk ;Try the request again!
   226                              <1> .fbHardError:
   227                              <1> ;Request failed thrice, critical error call
   228                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   229 0000082A 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   230 00000831 E8295D0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   231 00000836 3C01                <1>     cmp al, critRetry
   232 00000838 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   233 00000839 7490                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   234                              <1>     ;Else we fail (Ignore=Fail here)
   235 0000083B F9                  <1>     stc ;Set error flag to indicate fail
   236 0000083C EBDE                <1>     jmp short .fbExitFail
   237                              <1> 
   238                              <1> testDirtyBufferForDrive:    ;External linkage
   239                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   240                              <1> ;Input: al = Drive number (0 based)
   241                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   242                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   243 0000083E 53                  <1>     push rbx
   244 0000083F 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   245                              <1> .tdbfdCheckBuffer:
   246 00000846 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   247 00000849 7509                <1>     jne .tdbfdGotoNextBuffer
   248 0000084B F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   249 0000084F 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   250 00000851 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   251                              <1> .tdbfdExit:
   252 00000852 5B                  <1>     pop rbx
   253                              <1>     return
    13                              <2> %%_ret:
    14 00000853 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   254                              <1> .tdbfdGotoNextBuffer:
   255 00000854 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   256 00000857 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   257 0000085E 74F2                <1>     je .tdbfdExit
   258 00000860 EBE4                <1>     jmp short .tdbfdCheckBuffer
   259                              <1> 
   260                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   261                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   262                              <1> ; to have a drive number of -1, thus freeing it
   263                              <1> ;Given Drive number is in al
   264 00000862 57                  <1>     push rdi
   265 00000863 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   266                              <1> .i0:
   267 0000086A 4881FFFFFFFFFF      <1>     cmp rdi, -1
   268 00000871 7417                <1>     je .exit
   269 00000873 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   270 00000876 750D                <1>     jne .i1 ;If no, skip freeing
   271 00000878 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   272 0000087E E877FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   273 00000883 EBE5                <1>     jmp short .i0
   274                              <1> .i1:
   275 00000885 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   276 00000888 EBE0                <1>     jmp short .i0
   277                              <1> .exit:
   278 0000088A 5F                  <1>     pop rdi
   279                              <1>     return
    13                              <2> %%_ret:
    14 0000088B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> markBufferDirty:
   282 0000088C 55                  <1>     push rbp
   283 0000088D 9C                  <1>     pushfq
   284 0000088E 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   285 00000895 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   286 00000899 9D                  <1>     popfq
   287 0000089A 5D                  <1>     pop rbp
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000089B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> 
   290                              <1> getBuffer: ;Internal Linkage ONLY
   291                              <1> ;
   292                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   293                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   294                              <1> ;Flushes if not in disk change mode. 
   295                              <1> ;If in disk change mode, will check to see if the selected buffer 
   296                              <1> ; has data referring a device using the same DPB as we are changing.
   297                              <1> ; If it is, skip flushing, if not, flush first!
   298                              <1> ;
   299                              <1> ;This function will return a pointer to the desired data sector OR 
   300                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   301                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   302                              <1> ;Entry: rax = Sector to read
   303                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   304                              <1> ;       rsi = DPB to use for transaction
   305                              <1> ;Exit:  CF=NC => 
   306                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   307                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   308 0000089C 51                  <1>     push rcx
   309 0000089D 52                  <1>     push rdx
   310 0000089E 56                  <1>     push rsi
   311 0000089F 57                  <1>     push rdi
   312 000008A0 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   313 000008A2 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   314 000008A7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   315 000008AE 741F                <1>     je .rbReadNewSector
   316 000008B0 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   317 000008B7 E8EAFDFFFF          <1>     call makeBufferMostRecentlyUsed
   318 000008BC F8                  <1>     clc
   319                              <1> .rbExit:
   320 000008BD 5F                  <1>     pop rdi
   321 000008BE 5E                  <1>     pop rsi
   322 000008BF 5A                  <1>     pop rdx
   323 000008C0 59                  <1>     pop rcx
   324 000008C1 9C                  <1>     pushfq
   325 000008C2 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   326 000008C9 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   327 000008CD 9D                  <1>     popfq
   328                              <1>     return
    13                              <2> %%_ret:
    14 000008CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> .rbReadNewSector:
   330 000008CF E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   331 000008D4 E8BFFEFFFF          <1>     call flushAndFreeBuffer
   332 000008D9 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   333                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   334                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   335                              <1>     ; is no longer owned by that File so we mark the owner as none
   336 000008DB 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   337 000008DE 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   338 000008E1 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   339 000008E5 80F902              <1>     cmp cl, fatBuffer
   340 000008E8 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   341 000008EA 7503                <1>     jne .rbNonFATbuffer
   342 000008EC 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   343                              <1> .rbNonFATbuffer:
   344 000008EF 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   345 000008F2 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   346 000008F5 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   347 000008F8 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   348 000008FC C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   349 00000900 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   350 00000905 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   351                              <1> 
   352                              <1> readSectorBuffer:   ;Internal Linkage
   353                              <1> ;Reads a sector into a built sector buffer
   354                              <1> ;Entry: rdi = Pointer to buffer header
   355                              <1> ;Exit:  CF=NC : Success
   356                              <1> ;       CF=CY : Fail, terminate the request
   357                              <1> ;       rbx pointing to buffer header
   358                              <1> ;First make request to device driver
   359 00000907 50                  <1>     push rax
   360 00000908 53                  <1>     push rbx
   361 00000909 51                  <1>     push rcx
   362 0000090A 52                  <1>     push rdx
   363 0000090B 56                  <1>     push rsi
   364 0000090C 55                  <1>     push rbp
   365                              <1> .rsRequest0:
   366 0000090D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   367 00000912 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   368 00000916 7406                <1>     jz .rsRequest1
   369 00000918 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   370                              <1> .rsRequest1:
   371 0000091E 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   372 00000921 B901000000          <1>     mov ecx, 1  ;One sector to copy
   373 00000926 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   374 0000092A 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   375 0000092E 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   376 00000932 E8B3650000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   377 00000937 E8DC630000          <1>     call absDiskDriverCall    ;Make Driver Request
   378 0000093C 7508                <1>     jnz .rsFail
   379                              <1> .rsExit:
   380 0000093E F8                  <1>     clc
   381                              <1> .rsExitFail:
   382 0000093F 5D                  <1>     pop rbp
   383 00000940 5E                  <1>     pop rsi
   384 00000941 5A                  <1>     pop rdx
   385 00000942 59                  <1>     pop rcx
   386 00000943 5B                  <1>     pop rbx
   387 00000944 58                  <1>     pop rax
   388                              <1>     return
    13                              <2> %%_ret:
    14 00000945 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .rsFail:
   390                              <1> ;Enter here only if the request failed
   391 00000946 FFCE                <1>     dec esi
   392 00000948 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   393                              <1> ;Request failed thrice, critical error call
   394                              <1> ;First free the buffer if we failed to read data into it. 
   395                              <1> ;We free this buffer to free the resource if the user aborts.
   396                              <1> ;This function is called in a critical section so the buffer pointer
   397                              <1> ; is under no thread of being reallocated.
   398                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   399 0000094A 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   400 00000950 C605(68040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   401 00000957 E8035C0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   402 0000095C 3C01                <1>     cmp al, critRetry
   403 0000095E 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   404 00000960 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   405 00000964 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   406 00000967 EBA4                <1>     jmp short .rsRequest0
   407                              <1> .fail:
   408 00000969 F9                  <1>     stc ;Set error flag to indicate fail
   409 0000096A E9D0FFFFFF          <1>     jmp .rsExitFail
   410                              <1>     
   411                              <1> findLRUBuffer: ;Internal Linkage
   412                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   413                              <1> ; in rbx and the currBuff variable
   414                              <1> ;Input: Nothing
   415                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   416                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   417 0000096F 52                  <1>     push rdx
   418 00000970 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   419 00000977 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   420 0000097B 7436                <1>     je .flbExit 
   421 0000097D 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   422 00000984 742D                <1>     je .flbExit
   423                              <1> .flbWalk:
   424 00000986 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   425 00000989 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   426 0000098C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   427 00000990 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   428 00000992 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   429 00000999 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   430 0000099B 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   431                              <1> .flbHeadLink:
   432 000009A2 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   433 000009A9 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   434 000009B0 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   435                              <1> .flbExit:
   436 000009B3 5A                  <1>     pop rdx
   437 000009B4 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   438                              <1>     return
    13                              <2> %%_ret:
    14 000009BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .flbFreeLink:
   440 000009BC 51                  <1>     push rcx
   441 000009BD 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   442 000009C0 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   443 000009C3 59                  <1>     pop rcx
   444 000009C4 EBDC                <1>     jmp short .flbHeadLink
   445                              <1> 
   446                              <1> findSectorInBuffer:     ;Internal linkage
   447                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   448                              <1> ;If the sector is not in a buffer, returns with a -1
   449                              <1> ;Input: rax = Sector number
   450                              <1> ;       dl = Drive number
   451                              <1> ;Output: rdi = Buffer hdr pointer or -1
   452 000009C6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   453                              <1> .fsiCheckBuffer:
   454 000009CD 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   455 000009D0 7507                <1>     jne .fsiGotoNextBuffer
   456 000009D2 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   457 000009D6 7501                <1>     jne .fsiGotoNextBuffer
   458                              <1> .fsiExit:
   459                              <1>     return
    13                              <2> %%_ret:
    14 000009D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> .fsiGotoNextBuffer:
   461 000009D9 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   462 000009DC 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   463 000009E3 74F3                <1>     je .fsiExit
   464 000009E5 EBE6                <1>     jmp short .fsiCheckBuffer
   465                              <1> 
   466                              <1> ;-----------------------------------------------------------------------------
   467                              <1> ;SPECIAL BUFFER FUNCTIONS
   468                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   469                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   470                              <1> ;-----------------------------------------------------------------------------
   471                              <1> getBufForDOS:
   472                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   473                              <1> ;Input: [workingDPB] = DPB to transact on
   474                              <1> ;       rax = Sector to transfer
   475                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   476 000009E7 51                  <1>     push rcx
   477 000009E8 B101                <1>     mov cl, dosBuffer
   478 000009EA EB0D                <1>     jmp short getBufCommon
   479                              <1> getBufForFat:
   480                              <1> ;Returns a buffer to use for fat data in rbx
   481                              <1> ;Input: [workingDPB] = DPB to transact on
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 000009EC 51                  <1>     push rcx
   485 000009ED B102                <1>     mov cl, fatBuffer
   486 000009EF EB08                <1>     jmp short getBufCommon
   487                              <1> getBufForDir:
   488                              <1> ;Returns a buffer to use for disk directory data in rbx
   489                              <1> ;Input: [workingDPB] = File to manipulate
   490                              <1> ;       rax = Sector to transfer
   491                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   492 000009F1 51                  <1>     push rcx
   493 000009F2 B104                <1>     mov cl, dirBuffer
   494 000009F4 EB03                <1>     jmp short getBufCommon
   495                              <1> getBufForData:
   496                              <1> ;Returns a buffer to use for disk data in rbx
   497                              <1> ;Requires a File Handle.
   498                              <1> ;Input: [workingDPB] = File to manipulate
   499                              <1> ;       rax = Sector to transfer
   500                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   501 000009F6 51                  <1>     push rcx
   502 000009F7 B108                <1>     mov cl, dataBuffer
   503                              <1> getBufCommon:
   504 000009F9 56                  <1>     push rsi
   505 000009FA 57                  <1>     push rdi
   506 000009FB 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   507                              <1> .makeReq:
   508 00000A02 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   509 00000A07 5F                  <1>     pop rdi
   510 00000A08 5E                  <1>     pop rsi
   511 00000A09 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00000A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A0B 53                  <1>     push rbx
     9 00000A0C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 00000A0F B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A14 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A1A 730C                <1>     jae .exit
    13 00000A1C FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A1E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A24 7302                <1>     jae .exit
    16 00000A26 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A28 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A2A 53                  <1>     push rbx
    29 00000A2B 55                  <1>     push rbp
    30 00000A2C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A33 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000A36 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A3C 731E                <1>     jae .fat32
    34 00000A3E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A44 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A46 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A48 6801000000          <1>     push qword 1
    39 00000A4D EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A4F 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A51 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A53 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A55 6800000000          <1>     push qword 0
    45 00000A5A EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A5C 6802000000          <1>     push qword 2
    48 00000A61 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A64 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A68 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A6A F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A6C 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A70 01D8                <1>     add eax, ebx
    56 00000A72 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A73 5D                  <1>     pop rbp
    58 00000A74 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A76 51                  <1>     push rcx
    68 00000A77 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A79 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A7B 482D02000000        <1>     sub rax, 2
    72 00000A81 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000A84 48D3E0              <1>     shl rax, cl
    74 00000A87 31C9                <1>     xor ecx, ecx
    75 00000A89 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A8C 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A8F 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A91 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A94 E872FFFFFF          <1>     call getFATtype
    83 00000A99 81F902000000        <1>     cmp ecx, 2
    84 00000A9F 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AA1 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AA3 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA5 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000AA7 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AA8 89C3                <1>     mov ebx, eax
   100 00000AAA E8C9010000          <1>     call readFAT
   101 00000AAF 7209                <1>     jc .exit
   102 00000AB1 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AB6 75F0                <1>     jne .lp
   104 00000AB8 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000ABA 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000ABC 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000ABE 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000AC0 51                  <1>     push rcx
   117 00000AC1 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AC3 FFC1                <1>     inc ecx
   120 00000AC5 E8AE010000          <1>     call readFAT
   121 00000ACA 7209                <1>     jc .exit
   122 00000ACC 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AD1 75F0                <1>     jne .lp
   124 00000AD3 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AD5 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AD7 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AD9 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000ADB 53                  <1>     push rbx
   140 00000ADC 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000ADF 89C3                <1>     mov ebx, eax
   143 00000AE1 E892010000          <1>     call readFAT
   144 00000AE6 7206                <1>     jc .exit
   145 00000AE8 FFC9                <1>     dec ecx
   146 00000AEA 75F3                <1>     jnz .lp
   147 00000AEC 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000AEE 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000AF0 53                  <1>     push rbx
   157 00000AF1 56                  <1>     push rsi
   158 00000AF2 E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AF7 721A                <1>     jc .exit    ;Disk read error?
   160 00000AF9 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000AFE 7413                <1>     je .exit
   162 00000B00 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B05 89C3                <1>     mov ebx, eax
   164 00000B07 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000B0C 89D8                <1>     mov eax, ebx
   166 00000B0E E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000B13 5E                  <1>     pop rsi
   169 00000B14 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000B15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000B16 F8                  <1>     clc ;Always clear the flags before starting
   182 00000B17 53                  <1>     push rbx
   183 00000B18 56                  <1>     push rsi
   184 00000B19 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000B1A 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000B1D E837000000          <1>     call findFreeCluster
   188 00000B22 722B                <1>     jc .exit
   189 00000B24 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000B29 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000B2B BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000B30 50                  <1>     push rax
   195 00000B31 E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000B36 58                  <1>     pop rax
   197 00000B37 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000B39 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000B3E 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000B40 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000B42 E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000B47 7206                <1>     jc .exit
   205 00000B49 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000B4B FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000B4D 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000B4F 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000B50 9C                  <1>     pushfq
   211 00000B51 F7D9                <1>     neg ecx
   212 00000B53 01F1                <1>     add ecx, esi
   213 00000B55 9D                  <1>     popfq
   214 00000B56 5E                  <1>     pop rsi
   215 00000B57 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000B59 53                  <1>     push rbx
   224 00000B5A 52                  <1>     push rdx
   225 00000B5B 55                  <1>     push rbp
   226 00000B5C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000B63 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000B68 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000B6A E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000B6F 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000B71 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000B73 7409                <1>     jz .exit    ;If yes, exit
   237 00000B75 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000B79 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000B7C 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000B7E 89D8                <1>     mov eax, ebx
   242 00000B80 F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000B81 5D                  <1>     pop rbp
   245 00000B82 5A                  <1>     pop rdx
   246 00000B83 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000B84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000B85 53                  <1>     push rbx
   257 00000B86 52                  <1>     push rdx
   258 00000B87 55                  <1>     push rbp
   259 00000B88 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   260 00000B8F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000B93 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000B9A B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000B9F 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000BA2 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000BA4 E8CF000000          <1>     call readFAT
   271 00000BA9 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000BAB 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000BAD 750C                <1>     jne .fatProceed
   274 00000BAF 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000BB6 7413                <1>     je .fatFirst
   276 00000BB8 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000BBB 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000BBF 39D0                <1>     cmp eax, edx
   280 00000BC1 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000BC3 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000BC6 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000BC7 5D                  <1>     pop rbp
   286 00000BC8 5A                  <1>     pop rdx
   287 00000BC9 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000BCB 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000BCE 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000BD5 74E4                <1>     je .fatProceed
   294 00000BD7 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000BD9 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000BDF 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000BE2 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000BE4 FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000BEA 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000BF1 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000BF8 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000BF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000BFA 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000C00 E873000000          <1>     call readFAT
   323 00000C05 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000C07 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000C0C 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000C0E 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000C14 FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000C1A E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000C1F 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000C26 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000C2D EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000C2F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000C30 56                  <1>     push rsi
   348 00000C31 E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000C36 720E                <1>     jc .exit
   350 00000C38 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000C3A E8DA000000          <1>     call writeFAT
   352 00000C3F 7205                <1>     jc .exit
   353 00000C41 E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000C46 5E                  <1>     pop rsi
   356 00000C47 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000C49 50                  <1>     push rax
   370 00000C4A 53                  <1>     push rbx
   371 00000C4B 51                  <1>     push rcx
   372 00000C4C 56                  <1>     push rsi
   373 00000C4D 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000C4F E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000C54 721D                <1>     jc .exit    ;Error exit
   377 00000C56 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000C58 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000C59 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000C5B E8B9000000          <1>     call writeFAT
   381 00000C60 7211                <1>     jc .exit    ;Error exit
   382 00000C62 E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000C67 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000C6D 7404                <1>     je .exit
   385 00000C6F 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000C71 EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000C73 5E                  <1>     pop rsi
   389 00000C74 59                  <1>     pop rcx
   390 00000C75 5B                  <1>     pop rbx
   391 00000C76 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000C78 53                  <1>     push rbx
   401 00000C79 51                  <1>     push rcx
   402 00000C7A 52                  <1>     push rdx
   403 00000C7B 57                  <1>     push rdi
   404 00000C7C 55                  <1>     push rbp
   405 00000C7D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000C7F E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000C84 E863FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000C89 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000C8B 85C9                <1>     test ecx, ecx
   412 00000C8D 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000C8F F7C101000000        <1>     test ecx, 1
   414 00000C95 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000C97 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000C9C 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000CA1 721E                <1>     jb .exit
   419 00000CA3 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000CA8 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000CAA 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000CAE 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000CB3 7207                <1>     jb .validCluster32   
   425 00000CB5 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000CBA EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000CBC 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000CC1 F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000CC2 5D                  <1>     pop rbp
   433 00000CC3 5F                  <1>     pop rdi
   434 00000CC4 5A                  <1>     pop rdx
   435 00000CC5 59                  <1>     pop rcx
   436 00000CC6 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000CC8 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000CCE 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000CD0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000CD4 29D1                <1>     sub ecx, edx
   449 00000CD6 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000CD8 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000CDA 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000CDF FFC0                <1>     inc eax ;Get next FAT sector
   454 00000CE1 53                  <1>     push rbx
   455 00000CE2 E805FDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000CE7 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000CE8 72D8                <1>     jc .exitFail
   458 00000CEA 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000CEC 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000CEF C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000CF2 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000CF4 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000CF9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000CFC EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000CFE 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000D03 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000D08 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000D0D 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000D0F B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000D14 E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000D19 53                  <1>     push rbx
   483 00000D1A 51                  <1>     push rcx
   484 00000D1B 52                  <1>     push rdx
   485 00000D1C 56                  <1>     push rsi
   486 00000D1D 57                  <1>     push rdi
   487 00000D1E 55                  <1>     push rbp
   488 00000D1F 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000D21 E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000D26 E8C1FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000D2B 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000D2D 85C9                <1>     test ecx, ecx
   495 00000D2F 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000D31 F7C101000000        <1>     test ecx, 1
   497 00000D37 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000D39 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000D3E EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000D40 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000D46 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000D4A E83DFBFFFF          <1>     call markBufferDirty
   506 00000D4F F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000D50 5D                  <1>     pop rbp
   509 00000D51 5F                  <1>     pop rdi
   510 00000D52 5E                  <1>     pop rsi
   511 00000D53 5A                  <1>     pop rdx
   512 00000D54 59                  <1>     pop rcx
   513 00000D55 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000D56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000D57 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000D5D F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000D63 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000D65 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000D69 29D1                <1>     sub ecx, edx
   527 00000D6B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000D6D 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531 00000D6F 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   532 00000D74 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   533 00000D7A C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   534 00000D7D 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   535 00000D7F C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   536 00000D82 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   537 00000D86 E801FBFFFF          <1>     call markBufferDirty
   538 00000D8B FFC0                <1>     inc eax ;Get next FAT sector
   539 00000D8D E85AFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   540 00000D92 72BC                <1>     jc .exitFail
   541 00000D94 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   542 00000D96 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   543 00000D99 EBAF                <1>     jmp short .exit
   544                              <1> .gotoNextClusterFat12NoCross:
   545 00000D9B 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   546 00000DA0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   547 00000DA5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   548 00000DA8 EB0A                <1>     jmp short .fat12common
   549                              <1> .gotoNextClusterFat12Even:
   550                              <1>     ;Here the cluster is even and can't cross a sector boundary
   551 00000DAA 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   552 00000DAF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   553                              <1> .fat12common:
   554 00000DB4 09F0                <1>     or eax, esi     ;Add the new entry bits
   555 00000DB6 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   556 00000DBB E98AFFFFFF          <1>     jmp .exit
   557                              <1> 
   558                              <1> incrementFreeClusterCount:
   559                              <1> ;Cluster Deallocated Function
   560 00000DC0 9C                  <1>     pushfq
   561 00000DC1 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   562 00000DC8 7403                <1>     je .exit
   563 00000DCA FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   564                              <1> .exit:
   565 00000DCD 9D                  <1>     popfq
   566                              <1>     return
    13                              <2> %%_ret:
    14 00000DCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> decrementFreeClusterCount:
   568                              <1> ;Cluster Allocated Function
   569 00000DCF 9C                  <1>     pushfq
   570 00000DD0 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   571 00000DD7 7403                <1>     je .exit
   572 00000DD9 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   573                              <1> .exit:
   574 00000DDC 9D                  <1>     popfq
   575                              <1>     return
    13                              <2> %%_ret:
    14 00000DDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000DDE 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000DE5 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000DE8 7408                <1>     jz .notNet
     6 00000DEA B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00000DEF CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000DF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000DF2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 00000DF9 E8E7660000          <1>     call dosCrit1Enter
    12 00000DFE 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 00000E05 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 00000E0C 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 00000E0E 0440                <1>     add al, "@"  ;Convert into letter
    16 00000E10 E88A620000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 00000E15 723C                <1>     jc .critError   ;Return error if this fails
    18 00000E17 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 00000E1E 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 00000E22 E8A5610000          <1>     call setWorkingDPB
    21 00000E27 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 00000E2B 8805(09070000)      <1>     mov byte [workingDrv], al
    23 00000E31 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    24 00000E38 C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 00000E3F C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 00000E46 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 00000E4B 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 00000E4D E89D660000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 00000E52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 00000E53 B812000000          <1>     mov eax, errNoFil
    33 00000E58 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 00000E5A 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 00000E61 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 00000E68 57                  <1>     push rdi
    43 00000E69 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 00000E6D 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 00000E74 B90B000000          <1>     mov ecx, 11
    46 00000E79 F3A4                <1>     rep movsb   ;Get copy the search template!
    47 00000E7B 5F                  <1>     pop rdi
    48 00000E7C F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 00000E80 0F85EF000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 00000E86 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 00000E89 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 00000E8F 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 00000E92 8905(84070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 00000E98 8905(80070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 00000E9E 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 00000EA1 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 00000EA6 0F84C9000000        <1>     je .errorExit
    59 00000EAC 8905(8A070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 00000EB2 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 00000EB5 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 00000EB7 813D(84070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 00000EBF 0000                <1>
    65 00000EC1 0F8491000000        <1>     je .oldFat
    66 00000EC7 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 00000ECB 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    68 00000ECF D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00000ED1 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00000ED3 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00000ED5 31D2                <1>     xor edx, edx
    72 00000ED7 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 00000ED9 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 00000EDB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00000EDF 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00000EE1 31D2                <1>     xor edx, edx
    80 00000EE3 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00000EE5 668905(88070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 00000EEC 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00000EF2 89D9                <1>     mov ecx, ebx
    87 00000EF4 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00000EF7 E87CFDFFFF          <1>     call readFAT
    90 00000EFC 3DFFFFFFFF          <1>     cmp eax, -1
    91 00000F01 7472                <1>     je .errorExit
    92 00000F03 FFC9                <1>     dec ecx
    93 00000F05 75F0                <1>     jnz .fatlp
    94 00000F07 8905(84070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 00000F0D 488D05BB000000      <1>     lea rax, searchDir.nextEp
    97 00000F14 50                  <1>     push rax    ;Push the return address onto stack
    98 00000F15 8B05(84070000)      <1>     mov eax, dword [dirClustA]
    99 00000F1B E856FBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 00000F20 0FB71D(88070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00000F27 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 00000F2A E8C2FAFFFF          <1>     call getBufForDir
   104 00000F2F 0F826E010000        <1>     jc searchDir.fnfError
   105 00000F35 E86D010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 00000F3A 8B05(8A070000)      <1>     mov eax, dword [dirEntry]
   108 00000F40 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
   109 00000F45 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   110 00000F47 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   111 00000F4A 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   112                              <1>     ;We continue AS IF this entry was bad
   113                              <1>     ;Now setup al as upon normal entry 
   114 00000F4D 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   115 00000F53 E9C7010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   116                              <1>     ;The return address on the stack will return to the ep's pushed
   117                              <1> .oldFat:
   118                              <1> ;Old FAT 12/16 root dirs fall thru here only
   119                              <1> ;esi = byte ptr in root dir of entry
   120 00000F58 488D050D010000      <1>     lea rax, searchDir.oldNextEP
   121 00000F5F 50                  <1>     push rax    ;Push return address onto the stack
   122 00000F60 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   123 00000F64 31D2                <1>     xor edx, edx
   124 00000F66 96                  <1>     xchg esi, eax
   125 00000F67 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   126                              <1>     ;eax = Sector number 
   127                              <1>     ;edx = Byte offset within the sector
   128 00000F69 668905(88070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   129 00000F70 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   130 00000F73 EBB5                <1>     jmp short .common
   131                              <1> .errorExit:
   132 00000F75 F9                  <1>     stc
   133                              <1>     return
    13                              <2> %%_ret:
    14 00000F76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   134                              <1> searchDir:
   135                              <1> ;Called in a level 1 critical section. 
   136                              <1> ;The directory variables are set and fcbName has the pattern to match
   137                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   138                              <1> ;All registers can be trashed
   139                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   140                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   141                              <1> 
   142 00000F77 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   143 00000F7E 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   144 00000F85 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   145 00000F8C 7509                <1>     jnz .volIdSearch
   146 00000F8E F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   147 00000F95 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   148                              <1> .volIdSearch:
   149                              <1> ;Here we do a volid search intervention. Always searches root dir.
   150 00000F97 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   151 00000F9E 7407                <1>     jz .notVolSearch
   152 00000FA0 31C0                <1>     xor eax, eax ;Search the root dir.
   153 00000FA2 E894060000          <1>     call prepSetupDirSearchVars
   154                              <1> .notVolSearch:
   155 00000FA7 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   156 00000FAD 85C0                <1>     test eax, eax
   157 00000FAF 0F849C000000        <1>     jz .oldRoot
   158 00000FB5 E8BCFAFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   159                              <1> .sectorLoop:
   160 00000FBA E832FAFFFF          <1>     call getBufForDir
   161 00000FBF 0F82DE000000        <1>     jc .fnfError
   162 00000FC5 E8DD000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   163                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   164 00000FCA E8E4000000          <1>     call findInBuffer
   165                              <1> .nextEp:
   166                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FCF 73A5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   167 00000FD1 0F84AD000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   168                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   169                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   170                              <1>     ;IF however, the next cluster is -1, then we return fail
   171 00000FD7 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   172 00000FDD 8905(54070000)      <1>     mov dword [currClustD], eax
   173 00000FE3 668B05(88070000)    <1>     mov ax, word [dirSect]
   174 00000FEA 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   175 00000FF0 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   176 00000FF4 488905(5D070000)    <1>     mov qword [currSectD], rax  
   177 00000FFB C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   177 00001003 0000                <1>
   178 00001005 E8CFFBFFFF          <1>     call getNextSectorOfFile
   179 0000100A 0F8293000000        <1>     jc .fnfError
   180 00001010 3DFFFFFFFF          <1>     cmp eax, -1
   181 00001015 746D                <1>     je .chardev    ;We are at the end of the directory and didnt find the file
   182 00001017 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   183 0000101E 66FF05(88070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   184 00001025 50                  <1>     push rax    ;Save the next sector we need to read
   185 00001026 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   186 0000102C 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   187 00001032 58                  <1>     pop rax
   188 00001033 7485                <1>     je .sectorLoop  ;If not, we advanced sectors only
   189 00001035 66C705(88070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   189 0000103D 00                  <1>
   190 0000103E 50                  <1>     push rax
   191 0000103F 8B05(54070000)      <1>     mov eax, dword [currClustD]
   192 00001045 8905(84070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   193 0000104B 58                  <1>     pop rax
   194 0000104C E969FFFFFF          <1>     jmp .sectorLoop
   195                              <1> 
   196                              <1> .oldRoot:
   197                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   198                              <1> ; one large contiguous cluster.
   199                              <1> .oldSectorLp:
   200 00001051 0FB705(88070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   201 00001058 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   202 0000105B E891F9FFFF          <1>     call getBufForDir
   203 00001060 7241                <1>     jc .fnfError
   204 00001062 E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   205 00001067 E847000000          <1>     call findInBuffer
   206                              <1> .oldNextEP:
   207                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000106C 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000106E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   208 0000106F 7413                <1>     jz .chardev
   209 00001071 66FF05(88070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   210 00001078 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   211 0000107C 3905(8A070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   212 00001082 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   213                              <1> .chardev:
   214                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   215                              <1> ;If exclusive dir on, fail!
   216 00001084 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   217 0000108B 7416                <1>     jz .fnfError    
   218 0000108D E8AD090000          <1>     call checkIfCharDevice
   219 00001092 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   220 00001094 E8DD090000          <1>     call buildCharDir
   221 00001099 31F6                <1>     xor esi, esi        ;Clear the CF flag
   222 0000109B 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   223                              <1>     return
    13                              <2> %%_ret:
    14 000010A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .fnfError:
   225 000010A3 F9                  <1>     stc
   226 000010A4 B012                <1>     mov al, errNoFil
   227                              <1>     return
    13                              <2> %%_ret:
    14 000010A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> prepSectorSearch:
   229                              <1> ;Input: rbx -> Buffer with Dir sector to search
   230                              <1> ;Output: rsi -> Start of the dir data area
   231                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   232 000010A7 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   233 000010AB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   234 000010AF C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   235                              <1>     return
    13                              <2> %%_ret:
    14 000010B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> 
   237                              <1> findInBuffer:
   238                              <1> ;Input:  rsi = Sector buffer data area
   239                              <1> ;        cx = Number of entries to check in the sector
   240                              <1> ;Output: CF=CY => No entries found
   241                              <1> ;        ZF=NE => Keep searching in subsequent directories
   242                              <1> ;        ZF=ZE => End of directory reached early, stop
   243                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   244                              <1> ;        rsi = Points to start of the disk buffer directory entry
   245 000010B3 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   246 000010B9 E8B4000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   247                              <1> .searchMainLp:
   248                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   249 000010BE 8A25(08070000)      <1>     mov ah, byte [delChar]
   250 000010C4 803E00              <1>     cmp byte [rsi], 00h
   251 000010C7 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   252 000010C9 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   253 000010CB 750F                <1>     jne .notLookingForEmpty
   254                              <1> .emptySlot:
   255                              <1> ;Here we check if we are looking for an empty directory entry or
   256                              <1> ; we have reached the end of the file (if the first byte is 00h)
   257                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   258 000010CD 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   259                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010D3 74DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   260                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   261 000010D5 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   262 000010D8 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   263 000010DA F9                  <1>     stc
   264                              <1>     return
    13                              <2> %%_ret:
    14 000010DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   265                              <1> .notLookingForEmpty:
   266 000010DC 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   267 000010DF 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   268 000010E2 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   269 000010E9 7406                <1>     jz .notVolIdExclusive
   270 000010EB F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   271 000010EE 742F                <1>     jz .nextEntry
   272                              <1>     return
    13                              <2> %%_ret:
    14 000010F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   273                              <1> .notVolIdExclusive:
   274                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   275 000010F1 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   276 000010F8 743C                <1>     je .exclusiveDir
   277 000010FA 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   278 000010FC 743F                <1>     je .volFile ;If so, go here
   279 000010FE F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   280 00001101 751C                <1>     jnz .nextEntry
   281 00001103 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   282 00001105 7408                <1>     jz .scanName
   283 00001107 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   284 00001109 7404                <1>     je .scanName            ;If so, we accept this file!
   285 0000110B 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   286 0000110D 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   287                              <1> .scanName:
   288                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   289 0000110F 56                  <1>     push rsi
   290 00001110 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   291 00001117 E83E000000          <1>     call .nameCompare
   292 0000111C 5E                  <1>     pop rsi
   293 0000111D 7424                <1>     je .searchEntryFound
   294                              <1> .nextEntry:
   295                              <1> ;Go to next entry
   296 0000111F 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   297 00001126 FF05(8A070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   298 0000112C FFC9                <1>     dec ecx
   299 0000112E 758E                <1>     jnz .searchMainLp
   300                              <1> .badExit:
   301 00001130 31C0                <1>     xor eax, eax
   302 00001132 FFC0                <1>     inc eax ;Clear ZF
   303 00001134 F9                  <1>     stc
   304                              <1>     return
    13                              <2> %%_ret:
    14 00001135 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .exclusiveDir:
   306                              <1> ;Used when going down a path, dir bit simply need be set
   307 00001136 F6C410              <1>     test ah, dirDirectory
   308 00001139 75D4                <1>     jnz .scanName
   309 0000113B EBE2                <1>     jmp short .nextEntry
   310                              <1> 
   311                              <1> .volFile:
   312 0000113D 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   313 0000113F 74CE                <1>     je .scanName       ;If so, scan the name agrees
   314 00001141 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   315                              <1> 
   316                              <1> .searchEntryFound:
   317                              <1> ;Here a good entry was found!
   318 00001143 56                  <1>     push rsi
   319 00001144 57                  <1>     push rdi
   320 00001145 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   321 00001147 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   322 0000114E B904000000          <1>     mov ecx, 32/8
   323 00001153 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   324 00001156 5F                  <1>     pop rdi
   325 00001157 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   326 00001158 F8                  <1>     clc
   327                              <1>     return
    13                              <2> %%_ret:
    14 00001159 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> 
   329                              <1> .nameCompare:
   330                              <1> ;Input: rsi = source string
   331                              <1> ;       rdi = string template to compare against
   332                              <1> ;Output: ZF=ZE => Strings are ok
   333                              <1> ;        ZF=NZ => Strings not ok
   334                              <1> ;Accepts wildcards. Trashes al
   335 0000115A 51                  <1>     push rcx
   336 0000115B 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   337                              <1> .ncLp:
   338 0000115D 81F90B000000        <1>     cmp ecx, 11
   339 00001163 740B                <1>     je .ncExit
   340 00001165 FFC1                <1>     inc ecx
   341 00001167 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   342 00001168 74F3                <1>     je .ncLp    ;If equal, keep going
   343 0000116A 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   344 0000116E 74ED                <1>     je .ncLp
   345                              <1> .ncExit:
   346 00001170 59                  <1>     pop rcx
   347                              <1>     return
    13                              <2> %%_ret:
    14 00001171 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   348                              <1> adjustSearchAttr:
   349                              <1> ;Converts the byte to a system only if the bit is set
   350                              <1> ;Input: eax = User selected search mask
   351                              <1> ;Output: eax = Modified search mask
   352 00001172 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   353 00001177 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   354                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000117C 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   355 0000117E B808000000          <1>     mov eax, dirVolumeID
   356                              <1>     return
    13                              <2> %%_ret:
    14 00001183 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   357                              <1> 
   358                              <1> asciiToFCB:
   359                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   360                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   361                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   362                              <1> ;Name is space padded.
   363                              <1> ;Input: rsi = ASCII string buffer
   364                              <1> ;       rdi = FCB name buffer
   365                              <1> ;Output: al = Char that terminated the source string 
   366 00001184 53                  <1>     push rbx    
   367 00001185 57                  <1>     push rdi
   368 00001186 B90B000000          <1>     mov ecx, 11
   369 0000118B B020                <1>     mov al, " "
   370 0000118D F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   371 0000118F 5F                  <1>     pop rdi
   372 00001190 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   373                              <1> .processName:
   374 00001193 AC                  <1>     lodsb   ;Get the char in al
   375 00001194 E8F55F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   376 00001199 84C0                <1>     test al, al
   377 0000119B 742D                <1>     jz .exit
   378 0000119D 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   379 0000119F 740E                <1>     je .extSpace
   380 000011A1 3C2E                <1>     cmp al, "."
   381 000011A3 7413                <1>     je .ext
   382                              <1>     ;Test if the char is valid
   383 000011A5 E865610000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   384 000011AA 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   385 000011AC AA                  <1>     stosb   ;Store the char
   386 000011AD EBE4                <1>     jmp short .processName
   387                              <1> .extSpace:
   388                              <1> ;Now we scan for a period in the name
   389 000011AF AC                  <1>     lodsb   ;Get a char and increase rsi
   390 000011B0 84C0                <1>     test al, al
   391 000011B2 7416                <1>     jz .exit
   392 000011B4 3C2E                <1>     cmp al, "."     ;If al is not a period...
   393 000011B6 75F7                <1>     jne .extSpace   ; keep searching
   394                              <1> .ext:
   395 000011B8 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   396                              <1> .processExt:
   397 000011BC AC                  <1>     lodsb
   398 000011BD 84C0                <1>     test al, al
   399 000011BF 7409                <1>     jz .exit
   400 000011C1 3C20                <1>     cmp al, " "
   401 000011C3 7405                <1>     je .exit
   402 000011C5 AA                  <1>     stosb
   403 000011C6 EBF4                <1>     jmp short .processExt
   404                              <1> .exitBadChar:
   405 000011C8 30C0                <1>     xor al, al  ;Return a null terminator
   406                              <1> .exit:
   407 000011CA 5B                  <1>     pop rbx
   408                              <1>     return
    13                              <2> %%_ret:
    14 000011CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> FCBToAsciiz:
   411                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   412                              <1> ;Name is space padded too
   413                              <1> ;Input: rsi = FCB name buffer
   414                              <1> ;       rdi = ASCIIZ string buffer
   415 000011CC B908000000          <1>     mov ecx, 8
   416 000011D1 F3A4                <1>     rep movsb   ;Move the name over
   417                              <1> .scanNameSpace:
   418 000011D3 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   419 000011D7 750D                <1>     jne .ext
   420 000011D9 48FFCF              <1>     dec rdi
   421 000011DC FFC1                <1>     inc ecx
   422 000011DE 81F908000000        <1>     cmp ecx, 8
   423 000011E4 72ED                <1>     jb .scanNameSpace
   424                              <1> .ext:
   425 000011E6 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   426 000011EB 7506                <1>     jne .validExt
   427 000011ED 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   428 000011F1 7415                <1>     je .exit
   429                              <1> .validExt:
   430 000011F3 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   431 000011F5 AA                  <1>     stosb
   432 000011F6 B903000000          <1>     mov ecx, 3
   433 000011FB F3A4                <1>     rep movsb   ;Move the three extension chars over
   434                              <1> .scanExtSpace:
   435 000011FD 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   436 00001201 7505                <1>     jne .exit
   437 00001203 48FFCF              <1>     dec rdi
   438 00001206 EBF5                <1>     jmp short .scanExtSpace
   439                              <1> .exit:
   440 00001208 31C0                <1>     xor eax, eax
   441 0000120A AA                  <1>     stosb   ;Store a null at the end
   442                              <1>     return
    13                              <2> %%_ret:
    14 0000120B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> setupFFBlock:
   445                              <1> ;Sets up the find first block for the search
   446                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   447 0000120C 50                  <1>     push rax
   448 0000120D 53                  <1>     push rbx
   449 0000120E 56                  <1>     push rsi
   450 0000120F 57                  <1>     push rdi
   451 00001210 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   452 00001213 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   453 00001219 243F                <1>     and al, 3Fh ;Clear upper two bits
   454 0000121B 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   455 0000121E 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   456 00001225 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   457 00001227 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   458 00001229 488D35(D9060000)    <1>     lea rsi, fcbName
   459 00001230 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   460 00001234 57                  <1>     push rdi
   461 00001235 48B820202020202020- <1>     mov rax, "        "
   461 0000123E 20                  <1>
   462 0000123F 48AB                <1>     stosq
   463 00001241 66AB                <1>     stosw
   464 00001243 AA                  <1>     stosb
   465 00001244 5F                  <1>     pop rdi
   466 00001245 48A5                <1>     movsq   ;Move 8 chars
   467 00001247 66A5                <1>     movsw   ;Move 2 chars
   468 00001249 A4                  <1>     movsb   ;Move the final char
   469                              <1> 
   470 0000124A 8B05(8A070000)      <1>     mov eax, dword [dirEntry]
   471 00001250 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   472 00001253 8B05(80070000)      <1>     mov eax, dword [dirClustPar]
   473 00001259 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   474 0000125C 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   475 00001262 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   476 00001265 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   477 0000126B 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   478 0000126E 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   479 00001274 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   480 00001277 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   481 0000127B 488D35(5A060000)    <1>     lea rsi, curDirCopy
   482 00001282 E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   483                              <1> 
   484 00001287 5F                  <1>     pop rdi
   485 00001288 5E                  <1>     pop rsi
   486 00001289 5B                  <1>     pop rbx
   487 0000128A 58                  <1>     pop rax
   488                              <1>     return
    13                              <2> %%_ret:
    14 0000128B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   491                              <1> ;Gets the drive letter for the path in al
   492                              <1> ;Input: rsi = Buffer to process
   493                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   494                              <1> ;       ZF=ZE and al = 0 => Null path
   495                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   496                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   497                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   498 0000128C 30C0                <1>     xor al, al
   499 0000128E 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   500                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001291 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   501 00001293 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   502                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001297 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   503 00001299 66AD                <1>     lodsw   ;Get first word, rsi += 2
   504                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   505 0000129B 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   506 0000129D 2C60                <1>     sub al, 60h
   507                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000129F 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   508 000012A1 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   509                              <1>     return
    13                              <2> %%_ret:
    14 000012A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> getDirPath:
   512 000012A4 30C0                <1>     xor al, al   ;Set to Directory
   513 000012A6 EB02                <1>     jmp short getPath
   514                              <1> getFilePath:
   515 000012A8 B0FF                <1>     mov al, -1  ;Set to File
   516                              <1> getPath:
   517                              <1> ;Called with:
   518                              <1> ; rdi = SDA Buffer for filename
   519                              <1> ; rsi = Potentially unqualified filename
   520                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   521 000012AA 50                  <1>     push rax
   522 000012AB 57                  <1>     push rdi
   523 000012AC E876000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   524 000012B1 5F                  <1>     pop rdi
   525 000012B2 58                  <1>     pop rax
   526                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012B3 72EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527                              <1>     ;Now our name is FQ, we can search the for it!
   528 000012B5 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   528 000012BD FFFFFF              <1>
   529 000012C0 0F8497010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   530 000012C6 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   531 000012CC B0FF                <1>     mov al, -1
   532 000012CE 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   533 000012D4 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   534 000012DA C605(05070000)00    <1>     mov byte [parDirExist], 0   
   535 000012E1 C605(04070000)00    <1>     mov byte [fileExist], 0     
   536 000012E8 8A05(09070000)      <1>     mov al, byte [workingDrv]
   537 000012EE FEC0                <1>     inc al
   538 000012F0 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   539 000012F4 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   540 000012F9 7424                <1>     je .net
   541 000012FB 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   542 00001302 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   543 00001309 488D7301            <1>     lea rsi, qword [rbx + 1]
   544 0000130D FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   545 00001313 E894010000          <1>     call pathWalk
   546 00001318 8F05(12070000)      <1>     pop qword [workingCDS]
   547                              <1>     return
    13                              <2> %%_ret:
    14 0000131E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> .net:
   549 0000131F 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   550 00001322 E990010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   551                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   552                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   553                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   554                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   555                              <1>     ; so the redir can do it's job.
   556                              <1> 
   557                              <1> canonicaliseFileName:
   558                              <1> ;Always trying to build and qualify a full pathname
   559                              <1> ;Does getPath without hitting the disk
   560 00001327 B0FF                <1>     mov al, -1
   561 00001329 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   562 0000132F 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   563 00001335 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   564 0000133C FEC0                <1>     inc al  ;make al = 0
   565 0000133E 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   566 00001344 E836000000          <1>     call getPathNoCanon.epAlt
   567                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001349 72D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   568                              <1>     ;Check the last two chars to see if we have a null terminator.
   569                              <1>     ;If neither has a null terminator, add one
   570 0000134B 31C0                <1>     xor eax, eax
   571 0000134D 3807                <1>     cmp byte [rdi], al
   572                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000134F 74CD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   573 00001351 3847FF              <1>     cmp byte [rdi - 1], al 
   574                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001354 74C8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   575 00001356 AA                  <1>     stosb
   576                              <1>     return
    13                              <2> %%_ret:
    14 00001357 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> getDirPathNoCanon:
   579                              <1> ;FCB only
   580 00001358 31C0                <1>     xor eax, eax
   581 0000135A 4889FE              <1>     mov rsi, rdi
   582 0000135D EB05                <1>     jmp short getPathNoCanon
   583                              <1> getFilePathNoCanon:
   584                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   585                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   586 0000135F B0FF                <1>     mov al, -1
   587 00001361 4889FE              <1>     mov rsi, rdi
   588                              <1> getPathNoCanon:
   589                              <1> ;Called with:
   590                              <1> ; rdi = SDA Buffer for filename
   591                              <1> ; rsi = Potentially unqualified filename
   592                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   593 00001364 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   594 0000136A B0FF                <1>     mov al, -1
   595 0000136C 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   596 00001372 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   597 00001379 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   598                              <1> .epAlt:
   599 0000137F C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   600 00001386 C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   601 0000138D F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   602 00001394 7431                <1>     jz .notServer
   603 00001396 E8F1FEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   604 0000139B E8555D0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   605 000013A0 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   606 000013A2 56                  <1>     push rsi
   607 000013A3 57                  <1>     push rdi
   608 000013A4 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   609 000013AB 50                  <1>     push rax
   610 000013AC E834610000          <1>     call dosCrit1Enter
   611 000013B1 E887590000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   612 000013B6 E834610000          <1>     call dosCrit1Exit
   613 000013BB 58                  <1>     pop rax
   614 000013BC 5F                  <1>     pop rdi
   615 000013BD 5E                  <1>     pop rsi
   616 000013BE 0F83B3000000        <1>     jnc .driveOk
   617                              <1> .serverExit:
   618 000013C4 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   619                              <1>     return
    13                              <2> %%_ret:
    14 000013C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> .notServer:
   621                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   622                              <1>     ; and only in truename mode
   623 000013C7 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   624 000013CE 7514                <1>     jnz .skipRemoteQualify      ;So skip!
   625 000013D0 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   625 000013D8 FFFFFF              <1>
   626 000013DB B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   627 000013E0 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   628                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013E2 73E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   629                              <1> .skipRemoteQualify:
   630 000013E4 E8A3FEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   631 000013E9 9C                  <1>     pushfq  ;Save the flag state on stack
   632 000013EA 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   633 000013EB 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   634 000013EE E88F5D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   635 000013F3 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   636 000013F5 E8885D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   637 000013FA 756B                <1>     jnz .notNet
   638 000013FC 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   639 000013FE 7567                <1>     jne .notNet
   640 00001400 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   641 00001401 9D                  <1>     popfq
   642 00001402 66AD                <1>     lodsw
   643 00001404 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   644 00001408 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   645                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   646                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   647                              <1> ; redirector Find First Without CDS
   648 0000140A 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   649 00001410 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   650 00001417 53                  <1>     push rbx
   651                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   652 00001418 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   653 00001419 E8705D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   654 0000141E 84C0                <1>     test al, al
   655 00001420 7435                <1>     jz .netEnd
   656 00001422 E85B5D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   657 00001427 AA                  <1>     stosb
   658 00001428 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   659                              <1>     ;Skip all following pathseps if there are any
   660                              <1> .moveNetSharePtr:
   661 0000142A AC                  <1>     lodsb
   662 0000142B E8525D0000          <1>     call swapPathSeparator
   663 00001430 74F8                <1>     jz .moveNetSharePtr
   664 00001432 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   665 00001435 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   666 00001438 84C0                <1>     test al, al ;Was this char null?
   667 0000143A 741B                <1>     jz .netEnd  ;Skip processing if so!
   668 0000143C 4889FB              <1>     mov rbx, rdi
   669 0000143F 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   670 00001442 E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   671 00001447 721C                <1>     jc .netExitBad
   672                              <1>     ;Now if we have a trailing backslash, throw it away
   673                              <1>     ;rdi points to the null char of the path
   674 00001449 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   675 0000144C E8315D0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   676 00001451 7504                <1>     jnz .netEnd
   677 00001453 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   678                              <1> .netEnd:
   679 00001457 5B                  <1>     pop rbx
   680 00001458 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   681                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000145A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000145C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   682                              <1> .netFFnoCDS:
   683 0000145D B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   684 00001462 CD2F                <1>     int 2Fh
   685                              <1>     return
    13                              <2> %%_ret:
    14 00001464 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   686                              <1> .netExitBad:
   687 00001465 5B                  <1>     pop rbx
   688                              <1>     return
    13                              <2> %%_ret:
    14 00001466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .notNet:
   690                              <1> ;This is the normal case; paths can be relative, or absolute.
   691 00001467 58                  <1>     pop rax ;Get the drive letter back
   692 00001468 9D                  <1>     popfq   ;Get the flag state back
   693 00001469 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   694                              <1> .pnfErr:
   695 0000146B B003                <1>     mov al, errPnf  ;Null path error
   696 0000146D F9                  <1>     stc
   697                              <1>     return
    13                              <2> %%_ret:
    14 0000146E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   698                              <1> .notNull:
   699 0000146F 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   700 00001471 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   701 00001473 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   702 00001475 F9                  <1>     stc
   703                              <1>     return
    13                              <2> %%_ret:
    14 00001476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   704                              <1> .driveOk:
   705 00001477 84C0                <1>     test al, al
   706 00001479 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   707                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   708 0000147B 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   709 0000147E 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   710 00001480 50                  <1>     push rax    ;Save the drive letter
   711 00001481 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   712 00001482 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   713 00001485 E8F85C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   714                              <1>     ;If al is a path separator, then this path is absolute.
   715 0000148A 58                  <1>     pop rax ;Get back the drive letter
   716 0000148B 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   717                              <1> .absoPath:
   718                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   719 0000148D 48FFC6              <1>     inc rsi
   720 00001490 EB1A                <1>     jmp short .commonDir
   721                              <1> .curPath:
   722                              <1> ;This is only jumped to if we are relative the current drive
   723                              <1> ;rsi points to first char in path
   724                              <1> ;If this char is \ or /, then it is an absolute path.
   725 00001492 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   726 00001498 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   727 0000149A 50                  <1>     push rax    ;Save the current drive number
   728 0000149B 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   729 0000149D E8E05C0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   730 000014A2 58                  <1>     pop rax ;Get back the current drive number
   731 000014A3 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   732                              <1> .relMain:
   733 000014A5 C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   734                              <1> .commonDir:
   735                              <1> ;rsi points to the start of the string we will be appending
   736                              <1> ;Fall through now
   737                              <1> pathWalk:
   738                              <1> ;Input: rsi must point to source buffer for path to expand
   739                              <1> ;       rdi must point to a destination buffer
   740                              <1> ;       al must contain the drive 1 based number
   741 000014AC E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   742 000014B1 0F82D5000000        <1>     jc .badDriveExit 
   743                              <1> .netEp:
   744                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   745                              <1> ;For subst, resolution cannot go past backslash offset.
   746                              <1> ;For join, it is transparent.
   747 000014B7 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   748 000014BE 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   749                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   750                              <1> ;If it is a network cds we make findfirst req. 
   751 000014C0 57                  <1>     push rdi
   752 000014C1 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   753 000014C8 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   754 000014CE 5F                  <1>     pop rdi
   755 000014CF 740F                <1>     jz .notNet
   756 000014D1 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   757 000014D8 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   758 000014DD CD2F                <1>     int 2fh 
   759                              <1>     return
    13                              <2> %%_ret:
    14 000014DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   760                              <1> .notNet:
   761 000014E0 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   762 000014E3 7543                <1>     jnz .mainlp
   763                              <1>     ;Setup dummy dir data for Root directory
   764 000014E5 31C0                <1>     xor eax, eax
   765 000014E7 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   766 000014EE 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   767 000014F5 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   768                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   769                              <1>     ; join host! Only when hitting the disk though.
   770 000014FC F605(2E060000)FF    <1>     test byte [skipDisk], -1
   771 00001503 0F8489000000        <1>     jz .exitGood
   772 00001509 57                  <1>     push rdi
   773 0000150A 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   774 00001511 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   775 00001517 5F                  <1>     pop rdi
   776 00001518 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   777 0000151A 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   778 00001521 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   779 00001523 E93CFEFFFF          <1>     jmp getPathNoCanon
   780                              <1> .mainlp:
   781                              <1>     ;rbx must remain constant in this portion,
   782                              <1>     ; and is used to signify the first writable byte in the path
   783 00001528 53                  <1>     push rbx
   784 00001529 E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   785 0000152E 5B                  <1>     pop rbx
   786 0000152F 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   787 00001531 84C0                <1>     test al, al
   788 00001533 7507                <1>     jnz .notFile
   789 00001535 C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   790                              <1> .notFile:
   791 0000153C 53                  <1>     push rbx                ;The below messes up rbx
   792 0000153D E860040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   793 00001542 5B                  <1>     pop rbx
   794 00001543 E80B020000          <1>     call searchForPathspec  ;Now search the directory
   795 00001548 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   796 0000154A E87E020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   797 0000154F 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   798 00001551 84C0                <1>     test al, al ;Exit if this pathspec was a file
   799 00001553 743D                <1>     jz .exitGood
   800                              <1>     ;Here I have to take the cluster data from the found directory entry
   801                              <1>     ; and setup the search for the next pathspec portion
   802                              <1>     ;Copy necessary data from the current directory copy
   803 00001555 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   804 0000155C 74CA                <1>     jz .mainlp
   805 0000155E 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   806 00001565 C1E010              <1>     shl eax, 10h    ;Shift it high
   807 00001568 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   808                              <1>     ;eax now has the cluster number of the search
   809 0000156F 8905(84070000)      <1>     mov dword [dirClustA], eax
   810 00001575 8905(80070000)      <1>     mov dword [dirClustPar], eax
   811 0000157B 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   812 0000157D 8905(8A070000)      <1>     mov dword [dirEntry], eax
   813 00001583 668905(88070000)    <1>     mov word [dirSect], ax
   814 0000158A EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   815                              <1> .badDriveExit:
   816 0000158C B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   817                              <1>     return
    13                              <2> %%_ret:
    14 00001591 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .exitGood:
   819 00001592 C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   820                              <1> .exit:
   821                              <1>     return
    13                              <2> %%_ret:
    14 00001599 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   822                              <1> 
   823                              <1> prepareDir:
   824                              <1> ;Used to transfer the current directory if it is necessary.
   825                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   826                              <1> ; a relative path is specified.
   827                              <1> ;Input: al = 1-based drive letter
   828                              <1> ;Output: rdi = Pointing at where to place chars from source string
   829                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   830                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   831 0000159A 56                  <1>     push rsi    ;Push ptr to source string
   832 0000159B E8455F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   833 000015A0 E8E05A0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   834 000015A5 7320                <1>     jnc .notJoin ;Very valid disk
   835 000015A7 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   836 000015AE 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   837 000015B0 F9                  <1>     stc
   838 000015B1 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   839                              <1> .getDPB: 
   840 000015B3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   841 000015BA E87E570000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   842                              <1>     return
    13                              <2> %%_ret:
    14 000015BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   843                              <1> .okJoin:
   844 000015C0 E8EEFFFFFF          <1>     call .getDPB
   845 000015C5 EB3A                <1>     jmp short .joinEp
   846                              <1> .notJoin:
   847 000015C7 E8E7FFFFFF          <1>     call .getDPB
   848                              <1>     ;rbp = DPB ptr now
   849                              <1> .critExit:
   850 000015CC E81E5F0000          <1>     call dosCrit1Exit
   851 000015D1 7253                <1>     jc .badDriveExit 
   852 000015D3 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   853                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   854                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   855                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   856                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   857                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   858 000015DA 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   859 000015E1 4889FB              <1>     mov rbx, rdi
   860 000015E4 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   861 000015E8 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   862                              <1>     ;Now check if we have a subst to handle
   863 000015EB 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   864 000015F1 7535                <1>     jnz .prepDirSubst
   865 000015F3 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   866 000015FA 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   867                              <1>     ;Else we copy the first two chars only (X:)
   868 000015FC 66A5                <1>     movsw  
   869 000015FE B05C                <1>     mov al, "\"
   870 00001600 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   871                              <1> .joinEp:
   872 00001601 31C0                <1>     xor eax, eax    ;Get cluster 0
   873 00001603 EB1B                <1>     jmp short .prepDirExitSkip
   874                              <1> .prepLoop:
   875 00001605 AC                  <1>     lodsb
   876 00001606 84C0                <1>     test al, al ;If al was null, then we stop
   877 00001608 7403                <1>     jz .prepDirExit
   878 0000160A AA                  <1>     stosb
   879 0000160B EBF8                <1>     jmp short .prepLoop
   880                              <1> .prepDirExit:
   881 0000160D 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   882 00001611 7403                <1>     je .prepDirExitSkipPathsep
   883 00001613 B05C                <1>     mov al, "\"
   884 00001615 AA                  <1>     stosb   ;Store the path separator and increment rdi
   885                              <1> .prepDirExitSkipPathsep:
   886 00001616 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   887 0000161D 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   888                              <1> .prepDirExitSkip:
   889 00001620 E816000000          <1>     call prepSetupDirSearchVars
   890 00001625 F8                  <1>     clc ;Clear carry before exiting
   891                              <1> .badDriveExit:
   892 00001626 5E                  <1>     pop rsi
   893                              <1>     return
    13                              <2> %%_ret:
    14 00001627 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   894                              <1> .prepDirSubst:
   895 00001628 51                  <1>     push rcx
   896 00001629 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   897                              <1> .prepDirCopy1:
   898 0000162D F3A4                <1>     rep movsb   ;Copy the string over
   899 0000162F 59                  <1>     pop rcx
   900 00001630 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   901 00001637 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   902 00001639 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   903                              <1> prepSetupDirSearchVars:
   904                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   905                              <1> ;       rbp -> Working DPB
   906 0000163B 51                  <1>     push rcx
   907 0000163C 31C9                <1>     xor ecx, ecx
   908 0000163E 66890D(88070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   909 00001645 890D(8A070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   910 0000164B E8BBF3FFFF          <1>     call getFATtype ;Get type of fat
   911 00001650 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   912 00001656 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   913                              <1>     ;FAT 32 here
   914 00001658 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   915 0000165A 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   916 0000165C 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   917                              <1> .psdsvExit:
   918 0000165F 8905(84070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   919 00001665 8905(80070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   920 0000166B 59                  <1>     pop rcx
   921                              <1>     return 
    13                              <2> %%_ret:
    14 0000166C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> copyPathspec:
   924                              <1> ;1) Copies a path portion from the source buffer to the destination
   925                              <1> ;2) Advances rsi to the next null, \ or /
   926                              <1> ;3) Expands all * to ?'s
   927                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   928                              <1> ;    next path separator and rdi pointing to the previous pathsep
   929                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   930                              <1> ;    with rsi moving to path separator
   931                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   932                              <1> ;
   933                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   934                              <1> ;           rdi = Points to where to store it
   935                              <1> ;
   936                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   937                              <1> ;           rdi = First char of next space to store next pathspec
   938                              <1> ;           al = Last char stored (either \ or NULL)
   939                              <1> ;           CF=NC = OK path
   940                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   941                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   942 0000166D 57                  <1>     push rdi    ;Save the pointer into the user buffer
   943 0000166E C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   944 00001675 488D3D(D9060000)    <1>     lea rdi, fcbName
   945 0000167C 57                  <1>     push rdi
   946 0000167D B903000000          <1>     mov ecx, 3
   947 00001682 B820202020          <1>     mov eax, "    " ;Four spaces
   948 00001687 F3AB                <1>     rep stosd   ;Store 12 spaces
   949 00001689 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   950                              <1> 
   951 0000168A 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   952 00001691 AC                  <1>     lodsb   ;Get first char from user path in al
   953 00001692 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   954 00001694 746B                <1>     je .cpsDots
   955 00001696 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   956                              <1> ;First char is not a dot, so now check if starts with E5h? 
   957                              <1> ;If so, store 05h in its place!
   958 00001699 3CE5                <1>     cmp al, 0E5h
   959 0000169B 7506                <1>     jne .cpsMainLoop
   960 0000169D 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   961 000016A0 B005                <1>     mov al, 05h
   962 000016A2 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   963                              <1> .cpsMainLoop:
   964 000016A3 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   965 000016A4 84C0                <1>     test al, al ;Is it the null char?
   966 000016A6 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   967 000016AC E8D15A0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   968 000016B1 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   969 000016B7 3C2E                <1>     cmp al, "." ;Filename extension separator
   970 000016B9 7420                <1>     je .cpsExtension
   971                              <1>     ;If we have space in the filename, we check to see if the next char is *
   972 000016BB 3C2A                <1>     cmp al, "*" ;Wildcard?
   973 000016BD 7430                <1>     je .cpsWildcard
   974 000016BF 3C3F                <1>     cmp al, "?" ;Good wildcard?
   975 000016C1 740C                <1>     je .store
   976 000016C3 E8C65A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   977 000016C8 E8425C0000          <1>     call checkCharValid ; and check it is a valid char
   978 000016CD 7472                <1>     je .cpsExitError
   979                              <1> .store:
   980 000016CF 4839DF              <1>     cmp rdi, rbx
   981 000016D2 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   982 000016D4 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   983 000016D5 EBCC                <1>     jmp short .cpsMainLoop
   984                              <1> .cpsInvalidChar:
   985 000016D7 30C0                <1>     xor al, al
   986 000016D9 EB3B                <1>     jmp short .cpsProcessName
   987                              <1> .cpsExtension:
   988                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   989 000016DB B903000000          <1>     mov ecx, 3 
   990 000016E0 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   991 000016E7 57                  <1>     push rdi
   992 000016E8 B020                <1>     mov al, " "
   993 000016EA F3AA                <1>     rep stosb
   994 000016EC 5F                  <1>     pop rdi
   995 000016ED EBB4                <1>     jmp short .cpsMainLoop
   996                              <1> .cpsWildcard:
   997                              <1> ;Fill the entire FCB filespec with ?'s.
   998                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   999                              <1> ; *'s from crashing DOS :)
  1000 000016EF AC                  <1>     lodsb   ;Get char, inc rsi
  1001 000016F0 3C2A                <1>     cmp al, "*"
  1002 000016F2 74FB                <1>     je short .cpsWildcard
  1003 000016F4 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1004 000016F7 B03F                <1>     mov al, "?"
  1005                              <1> .cpsWildcardLp:
  1006 000016F9 AA                  <1>     stosb
  1007 000016FA 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1008 000016FD 75FA                <1>     jne short .cpsWildcardLp
  1009 000016FF EBA2                <1>     jmp short .cpsMainLoop
  1010                              <1> 
  1011                              <1> .cpsDots:
  1012 00001701 AA                  <1>     stosb   ;Store the first dot
  1013 00001702 8A06                <1>     mov al, byte [rsi]
  1014 00001704 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1015 00001706 752E                <1>     jne .cpsStore
  1016 00001708 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1017 00001709 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1018 0000170B 84C0                <1>     test al, al
  1019 0000170D 7407                <1>     jz .cpsProcessName
  1020 0000170F E86E5A0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1021 00001714 752B                <1>     jnz .cpsExitError
  1022                              <1> .cpsProcessName:
  1023                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1024 00001716 84C0                <1>     test al, al 
  1025 00001718 741C                <1>     jz .cpsStore
  1026 0000171A E8635A0000          <1>     call swapPathSeparator
  1027 0000171F 7415                <1>     jz .cpsStore
  1028                              <1> .cpsFindTerminator:
  1029 00001721 AC                  <1>     lodsb
  1030 00001722 84C0                <1>     test al, al 
  1031 00001724 7410                <1>     jz .cpsStore
  1032 00001726 E8575A0000          <1>     call swapPathSeparator
  1033 0000172B 7409                <1>     jz .cpsStore
  1034 0000172D E8DD5B0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1035 00001732 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1036                              <1>     ;If we encounter a terminator, convert to 0
  1037 00001734 30C0                <1>     xor al, al
  1038                              <1> .cpsStore:
  1039 00001736 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1040 0000173D AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1041 0000173E 5F                  <1>     pop rdi
  1042 0000173F F8                  <1>     clc
  1043                              <1>     return
    13                              <2> %%_ret:
    14 00001740 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1044                              <1> .cpsExitError:
  1045 00001741 5F                  <1>     pop rdi
  1046 00001742 F9                  <1>     stc
  1047                              <1>     return
    13                              <2> %%_ret:
    14 00001743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1048                              <1> .cpsSkipPathseps:
  1049 00001744 AC                  <1>     lodsb
  1050 00001745 E8385A0000          <1>     call swapPathSeparator
  1051 0000174A 74F8                <1>     jz .cpsSkipPathseps
  1052 0000174C 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1053 0000174F B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1054 00001751 EBE3                <1>     jmp short .cpsStore
  1055                              <1> 
  1056                              <1> searchForPathspec:
  1057                              <1>     ;Now search the current directory for this filename
  1058                              <1>     ;Find first using SDA ffBlock
  1059                              <1>     ;If al = 0, we have final file name or directory name
  1060                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1061                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1062                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1063                              <1>     ;                 FF block somewhat setup
  1064                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1065 00001753 50                  <1>     push rax
  1066 00001754 53                  <1>     push rbx
  1067 00001755 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1068 00001756 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1069 00001757 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1070 0000175E 53                  <1>     push rbx    ;and push it onto the stack
  1071                              <1> ;Evaluate whether we are searching for a file for a directory
  1072 0000175F 84C0                <1>     test al, al
  1073 00001761 741D                <1>     jz .sfpPNfile
  1074                              <1>     ;Fall if subdir
  1075 00001763 488D3D(D9060000)    <1>     lea rdi, fcbName
  1076 0000176A B03F                <1>     mov al, "?" ;Search for wildcard
  1077 0000176C B90B000000          <1>     mov ecx, 11
  1078 00001771 F2AE                <1>     repne scasb
  1079 00001773 7450                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1080 00001775 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1081 00001777 C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1082 0000177E EB07                <1>     jmp short .sfpPNMain
  1083                              <1> .sfpPNfile:
  1084                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1085 00001780 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1086                              <1> .sfpPNMain:
  1087 00001787 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1088 0000178E 7418                <1>     je .sfpPNNoDisk
  1089 00001790 E8E2F7FFFF          <1>     call searchDir
  1090 00001795 7211                <1>     jc .sfpPNNoDisk
  1091 00001797 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1092 0000179E 7507                <1>     jne .noAdjust
  1093                              <1>     ;Readjust when the start of a dir entry name is 05h
  1094 000017A0 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1095                              <1> .noAdjust:
  1096 000017A7 F8                  <1>     clc ;Ensure the carry flag is clear here!
  1097                              <1> .sfpPNNoDisk:
  1098 000017A8 5B                  <1>     pop rbx
  1099 000017A9 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1100 000017AF 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1101 000017B0 5E                  <1>     pop rsi
  1102 000017B1 5B                  <1>     pop rbx
  1103 000017B2 58                  <1>     pop rax ;Get back the original al value
  1104                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017B3 738E                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1105 000017B5 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1106 000017B7 F9                  <1>     stc         ;Dont forget to set CF again!!
  1107 000017B8 B802000000          <1>     mov eax, errFnf
  1108                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017BD 7484                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1109 000017BF B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1110                              <1>     return
    13                              <2> %%_ret:
    14 000017C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1111                              <1> .sfpPnf:
  1112 000017C5 B803000000          <1>     mov eax, errPnf
  1113                              <1> .sfpErrExit:
  1114 000017CA F9                  <1>     stc ;Set carry
  1115 000017CB EBDB                <1>     jmp short .sfpPNNoDisk
  1116                              <1> 
  1117                              <1> addPathspecToBuffer:
  1118                              <1> ;Input: fcbName = Qualified pathname portion
  1119                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1120                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1121                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1122                              <1> ;rbx points to the "head of the path"
  1123                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1124                              <1> ;Converts the special char if the filename starts with it!
  1125 000017CD F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1126                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017D4 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1127 000017D6 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1128 000017DD 7469                <1>     je .aptbDots
  1129                              <1>     ;Copy filename over to internal buffer
  1130                              <1> .aptbAddNull:
  1131 000017DF 56                  <1>     push rsi    ;Save source pointer position
  1132 000017E0 488D35(D9060000)    <1>     lea rsi, fcbName
  1133 000017E7 803E05              <1>     cmp byte [rsi], 05h
  1134 000017EA 7503                <1>     jne .notSpecialChar
  1135 000017EC C606E5              <1>     mov byte [rsi], 0E5h
  1136                              <1> .notSpecialChar:
  1137 000017EF E8D8F9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1138 000017F4 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1139 000017F7 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1140 000017F8 E8C4000000          <1>     call .aptbInterveneEnterJoin
  1141                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000017FD 72C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1142                              <1> .aptbHandleTerminator:
  1143 000017FF 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1144 00001805 84C0                <1>     test al, al
  1145 00001807 741A                <1>     jz .aptbHandleNull
  1146 00001809 E874590000          <1>     call swapPathSeparator
  1147 0000180E 0F85C5000000        <1>     jnz .aptbErrorExit
  1148                              <1> ;Handle path separator here directly
  1149 00001814 50                  <1>     push rax    ;Preserve the terminator char
  1150 00001815 8A47FF              <1>     mov al, byte [rdi - 1]
  1151 00001818 E865590000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1152 0000181D 58                  <1>     pop rax
  1153 0000181E 7426                <1>     jz .aptbExitOk 
  1154 00001820 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1155 00001821 EB23                <1>     jmp short .aptbExitOk
  1156                              <1> .aptbHandleNull:
  1157 00001823 E85B000000          <1>     call .aptbAtHeadOfPath
  1158 00001828 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1159 0000182A 50                  <1>     push rax
  1160 0000182B 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1161 0000182E E84F590000          <1>     call swapPathSeparator
  1162 00001833 58                  <1>     pop rax
  1163 00001834 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1164 00001836 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1165 00001839 EB0B                <1>     jmp short .aptbExitOk
  1166                              <1> .aptbHandleNullNoOverwritePrim:
  1167 0000183B 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1168 0000183F 7403                <1>     je short .aptbHandleNullNoOverwrite
  1169                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1170 00001841 48FFCF              <1>     dec rdi
  1171                              <1> .aptbHandleNullNoOverwrite:
  1172 00001844 8807                <1>     mov byte [rdi], al  ;Write in a null
  1173                              <1> .aptbExitOk:
  1174 00001846 F8                  <1>     clc
  1175                              <1>     return
    13                              <2> %%_ret:
    14 00001847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1176                              <1> .aptbDots:
  1177                              <1> ;For one dot, we pull the terminating null to rdi
  1178                              <1> ;For two dots, we search backwards for the previous "\"
  1179 00001848 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1180 0000184F 7409                <1>     je .aptbMoreDots
  1181 00001851 C605(D9060000)20    <1>     mov byte [fcbName], " "
  1182 00001858 EB85                <1>     jmp short .aptbAddNull
  1183                              <1> .aptbMoreDots:
  1184                              <1> ;Here we have two dots
  1185 0000185A E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1186 0000185F 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1187                              <1> ;Else, we are able to decrement.
  1188 00001861 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1189                              <1> .aptbDotsLp:
  1190 00001868 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1191 0000186D 7490                <1>     je .aptbHandleTerminator
  1192 0000186F 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1193 00001872 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1194 00001874 E809590000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1195 00001879 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1196 0000187B 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1197 0000187E E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1198                              <1> .aptbAtHeadOfPath:
  1199                              <1> ;Returns ZF=ZE if at head of path.
  1200 00001883 57                  <1>     push rdi
  1201 00001884 48FFCF              <1>     dec rdi
  1202 00001887 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1203 0000188A 5F                  <1>     pop rdi
  1204                              <1>     return
    13                              <2> %%_ret:
    14 0000188B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1205                              <1> .aptbInterveneExitJoin:
  1206                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1207 0000188C 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1208 00001893 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1209 00001899 753E                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1210                              <1>     ;Now we change the drive letter and return
  1211 0000189B 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1212 0000189E 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1213 000018A1 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1214 000018A3 E8DD570000          <1>     call getCDSNotJoin
  1215                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018A8 72E1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1216 000018AA 56                  <1>     push rsi
  1217 000018AB 57                  <1>     push rdi
  1218 000018AC 53                  <1>     push rbx
  1219 000018AD 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1220 000018B4 E884540000          <1>     call getDiskDPB 
  1221 000018B9 5B                  <1>     pop rbx
  1222 000018BA 5F                  <1>     pop rdi
  1223 000018BB 5E                  <1>     pop rsi
  1224 000018BC E93EFFFFFF          <1>     jmp .aptbHandleTerminator
  1225                              <1> .aptbInterveneEnterJoin:
  1226                              <1> ;Handles join paths.
  1227 000018C1 F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1228                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018C8 74C1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1229 000018CA 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1230 000018CB 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1231 000018D2 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1232 000018D7 5E                  <1>     pop rsi
  1233                              <1>     return
    13                              <2> %%_ret:
    14 000018D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1234                              <1> .aptbErrorExit:
  1235 000018D9 B002                <1>     mov al, errFnf
  1236 000018DB C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1237 000018E2 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1238 000018E9 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1239 000018F0 F9                  <1>     stc
  1240                              <1>     return
    13                              <2> %%_ret:
    14 000018F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1241                              <1> 
  1242                              <1> handleJoin:
  1243                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1244                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1245                              <1> ;Input:
  1246                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1247                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1248                              <1> ; rax = 0
  1249                              <1> ;Output:
  1250                              <1> ;If no match, no effect.
  1251                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1252                              <1> ; join drive. rsi is advanced to the next path componant.
  1253                              <1> ;If CF=CY => Disk detection error
  1254 000018F2 51                  <1>     push rcx
  1255 000018F3 55                  <1>     push rbp
  1256 000018F4 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1257 000018FB 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1258 000018FF F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1259 00001905 740C                <1>     jz .okToGo
  1260 00001907 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1261 0000190D 0F848C000000        <1>     jz .exitNoCrit
  1262                              <1> .okToGo:
  1263 00001913 E8CD5B0000          <1>     call dosCrit1Enter
  1264 00001918 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1265 0000191F 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1266                              <1> .checkCDS:
  1267 00001921 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1268 00001927 7560                <1>     jne .gotoNextCDS
  1269                              <1> .scanCDSName:
  1270                              <1> ;Get the length of the CDS path componant to check
  1271 00001929 51                  <1>     push rcx
  1272 0000192A 57                  <1>     push rdi
  1273 0000192B 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1274 0000192C 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1275 0000192F E8AA580000          <1>     call strlen     ;Get length of the path componant in ecx
  1276 00001934 FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1277 00001936 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1278 00001938 754C                <1>     jnz .notString
  1279                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1280 0000193A AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1281 0000193B E842580000          <1>     call swapPathSeparator
  1282 00001940 7407                <1>     jz .goodString
  1283 00001942 84C0                <1>     test al, al
  1284 00001944 7540                <1>     jnz .notString
  1285 00001946 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1286                              <1> .goodString:
  1287                              <1>     ;Here we know we have the right string.
  1288 00001949 59                  <1>     pop rcx ;Trash original rsi
  1289 0000194A 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1290 0000194B 59                  <1>     pop rcx 
  1291                              <1>     ;Now store the path in the original CDS before intervening
  1292                              <1>     ; in the path
  1293 0000194C 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1294 00001953 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1295 00001954 57                  <1>     push rdi
  1296 00001955 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1297 00001958 53                  <1>     push rbx    ;Preserve the head of the path
  1298 00001959 E8DF530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1299 0000195E 5B                  <1>     pop rbx
  1300 0000195F 5F                  <1>     pop rdi
  1301 00001960 5E                  <1>     pop rsi
  1302 00001961 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1303 00001963 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1304 00001969 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1305 0000196B 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1306 0000196F 7403                <1>     je .notNet
  1307 00001971 F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1308 00001972 EB26                <1>     jmp short .exit
  1309                              <1> .notNet:
  1310                              <1> ; Join entry intervention occurs here.
  1311 00001974 8843FE              <1>     mov byte [rbx - 2], al
  1312 00001977 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1313                              <1> .pullLp:
  1314 0000197B AC                  <1>     lodsb
  1315 0000197C AA                  <1>     stosb
  1316 0000197D 84C0                <1>     test al, al
  1317 0000197F 75FA                <1>     jnz .pullLp
  1318 00001981 48FFCF              <1>     dec rdi
  1319 00001984 EB14                <1>     jmp short .exit
  1320                              <1> .notString:
  1321 00001986 5E                  <1>     pop rsi
  1322 00001987 5F                  <1>     pop rdi
  1323 00001988 59                  <1>     pop rcx
  1324                              <1> .gotoNextCDS:
  1325 00001989 4881C55F000000      <1>     add rbp, cds_size
  1326 00001990 FFC1                <1>     inc ecx 
  1327 00001992 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1328 00001998 7587                <1>     jnz .checkCDS
  1329                              <1> .exit:
  1330 0000199A E8505B0000          <1>     call dosCrit1Exit
  1331                              <1> .exitNoCrit:
  1332 0000199F 5D                  <1>     pop rbp
  1333 000019A0 59                  <1>     pop rcx
  1334                              <1>     return
    13                              <2> %%_ret:
    14 000019A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1335                              <1> 
  1336                              <1> checkDevPath:
  1337                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1338                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1339                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1340                              <1> ; and the next componant we are searching for is a char device, we 
  1341                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1342                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1343                              <1> ;Input: rsi = Pointer to the next path spec
  1344                              <1> ;       rdi = Buffer where to add it
  1345                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1346                              <1> ;        If devicename in the root dir, then replace pathsep
  1347 000019A2 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1348                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000019A9 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1349                              <1> ;First check we are searching in the root dir!
  1350 000019AB 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1351                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000019B1 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1352                              <1> ;Now check to see if fcbname is DEV
  1353 000019B3 50                  <1>     push rax
  1354 000019B4 48B844455620202020- <1>     mov rax, "DEV     "
  1354 000019BD 20                  <1>
  1355 000019BE 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1356 000019C5 58                  <1>     pop rax
  1357 000019C6 7565                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1358 000019C8 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1358 000019D0 205C                <1>
  1359 000019D2 7559                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1360                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1361 000019D4 F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1362                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000019DB 74C4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1363                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1364 000019DD 56                  <1>     push rsi    ;Save if not followed by dev!
  1365 000019DE 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1366 000019DF 488D3D(D9060000)    <1>     lea rdi, fcbName
  1367 000019E6 E899F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1368                              <1>     ;Returns in al the terminating char of the source string
  1369 000019EB 5F                  <1>     pop rdi
  1370 000019EC 5E                  <1>     pop rsi
  1371                              <1>     ;If al is a pathsep, fail 
  1372 000019ED E890570000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1373 000019F2 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1374                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1375 000019F4 53                  <1>     push rbx
  1376 000019F5 E845000000          <1>     call checkIfCharDevice
  1377 000019FA 5B                  <1>     pop rbx ;Don't need bh yet
  1378 000019FB 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1379                              <1> .repDev:
  1380                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1381 000019FD C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1381 00001A05 5620                <1>
  1382 00001A07 C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1382 00001A0F 2020                <1>
  1383 00001A11 C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1383 00001A19 205C                <1>
  1384 00001A1B B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1385 00001A1D EB0C                <1>     jmp short .exit
  1386                              <1> .pathSepExit:
  1387                              <1> ;Here only if the device was determined to be a char device.
  1388 00001A1F 30C0                <1>     xor al, al
  1389 00001A21 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1390 00001A27 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1391                              <1> .exit:
  1392 00001A2B F8                  <1>     clc
  1393                              <1>     return
    13                              <2> %%_ret:
    14 00001A2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394                              <1> .checkDevice:
  1395 00001A2D E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1396 00001A32 72F7                <1>     jc .exit                ;If not a device, silently return
  1397 00001A34 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1398 00001A3B 74E2                <1>     je .pathSepExit
  1399 00001A3D EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1400                              <1> 
  1401                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1402                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1403                              <1> ; device driver chain. 
  1404                              <1> ;Output: CF=CY if not found
  1405                              <1> ;        CF=NC if found
  1406                              <1> ;           BH = Low byte of the device attribute word
  1407 00001A3F 50                  <1>     push rax
  1408 00001A40 57                  <1>     push rdi
  1409 00001A41 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1410 00001A48 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1411                              <1> .checkName:
  1412 00001A4F 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1413 00001A53 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1414 00001A55 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1415 00001A58 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1416 00001A5A 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1417 00001A5D 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1418 00001A60 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1419 00001A64 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1420                              <1> .walkList:
  1421 00001A66 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1422 00001A69 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1423 00001A70 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1424 00001A72 F9                  <1>     stc
  1425                              <1> .exit:
  1426 00001A73 5F                  <1>     pop rdi
  1427 00001A74 58                  <1>     pop rax
  1428                              <1>     return
    13                              <2> %%_ret:
    14 00001A75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> 
  1430                              <1> buildCharDir:
  1431                              <1> ;Build a dummy directory entry for the char device in FCBName
  1432                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1433 00001A76 50                  <1>     push rax
  1434 00001A77 57                  <1>     push rdi
  1435 00001A78 C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1436 00001A7F 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1437                              <1>     ;Zero the directory copy (32 bytes)
  1438 00001A86 50                  <1>     push rax
  1439 00001A87 51                  <1>     push rcx
  1440 00001A88 57                  <1>     push rdi
  1441 00001A89 31C0                <1>     xor eax, eax    ;Zero rax
  1442 00001A8B B904000000          <1>     mov ecx, 4
  1443 00001A90 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1444 00001A93 5F                  <1>     pop rdi
  1445 00001A94 59                  <1>     pop rcx
  1446 00001A95 58                  <1>     pop rax
  1447 00001A96 C705(8A070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1447 00001A9E FFFF                <1>
  1448 00001AA0 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1449 00001AA7 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1450 00001AAA B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1451 00001AAF 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1452 00001AB2 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1453                              <1>     ;Get date and time and set the write time in the directory entry
  1454 00001AB6 E8A5120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1455 00001ABB E88B130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1456 00001AC0 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1457 00001AC3 31C0                <1>     xor eax, eax
  1458 00001AC5 5F                  <1>     pop rdi
  1459 00001AC6 58                  <1>     pop rax
  1460                              <1>     return
    13                              <2> %%_ret:
    14 00001AC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1461                              <1> 
  1462                              <1> checkFailingComp:
  1463                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1464                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1465                              <1> ;Returns: ZF=ZE => Last path componant
  1466                              <1> ;         ZF=NZ => Not last path componant
  1467 00001AC8 50                  <1>     push rax
  1468 00001AC9 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1469 00001ACF 84C0                <1>     test al, al
  1470 00001AD1 58                  <1>     pop rax
  1471                              <1>     return
    13                              <2> %%_ret:
    14 00001AD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001AD3 4889D7              <1>     mov rdi, rdx
     8 00001AD6 E803570000          <1>     call strlen
     9 00001ADB 81F940000000        <1>     cmp ecx, 64
    10 00001AE1 760E                <1>     jbe .okLength
    11                              <1> .badFile:
    12 00001AE3 B002                <1>     mov al, errFnf
    13 00001AE5 E9465A0000          <1>     jmp extErrExit
    14                              <1> .badPath:
    15 00001AEA B003                <1>     mov al, errPnf
    16 00001AEC E93F5A0000          <1>     jmp extErrExit
    17                              <1> .okLength:
    18 00001AF1 4889D6              <1>     mov rsi, rdx
    19 00001AF4 E848570000          <1>     call checkPathspecOK
    20 00001AF9 0F8226020000        <1>     jc .bad  ;Don't allow any malformed chars, exit Acc den
    21                              <1> .pathOk:
    22 00001AFF E8F8570000          <1>     call scanPathWC
    23 00001B04 72E4                <1>     jc .badPath ;Dont allow wildcards
    24                              <1>     ;Path is ok, now proceed
    25 00001B06 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    26 00001B0D 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    27 00001B14 E88FF7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    28                              <1>     ;If the path exists, exit error
    29 00001B19 0F83115A0000        <1>     jnc extErrExit
    30                              <1>     ;Handle resolved null paths here!!!
    31 00001B1F 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    32 00001B25 30C0                <1>     xor al, al
    33 00001B27 3D003A5C00          <1>     cmp eax, 005C3A00h
    34 00001B2C 74B5                <1>     je .badFile
    35                              <1>     ;-----------------------------
    36                              <1>     ;TEST THAT THE DRIVE IS VALID
    37                              <1>     ;This is clearly unnecessary
    38                              <1>     ;    Keep it for now...
    39                              <1>     ;-----------------------------
    40 00001B2E 57                  <1>     push rdi
    41 00001B2F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    42 00001B36 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    43 00001B3C 5F                  <1>     pop rdi
    44 00001B3D 0F84ED590000        <1>     jz extErrExit  ;Exit access denied
    45                              <1>     ;-------------------------------------------
    46                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    47 00001B43 E880FFFFFF          <1>     call checkFailingComp
    48 00001B48 0F85E2590000        <1>     jnz extErrExit
    49                              <1>     ;So all is well, the new subdirectories name is in fcbName
    50                              <1>     ;The parent dir's directory entry is in the curDirCopy
    51 00001B4E E881540000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    52                              <1>     ;returns in rdi the working cds ptr
    53 00001B53 7312                <1>     jnc .notNet
    54 00001B55 B803110000          <1>     mov eax, 1103h
    55 00001B5A CD2F                <1>     int 2fh
    56 00001B5C 0F82CE590000        <1>     jc extErrExit
    57 00001B62 E9BB590000          <1>     jmp extGoodExit
    58                              <1> .notNet:
    59 00001B67 E879590000          <1>     call dosCrit1Enter
    60                              <1>     ;Current dpb ptr is already set
    61                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    62                              <1>     ;First we make a dummy dir in curDirCopy
    63 00001B6C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    64 00001B73 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    65 00001B7A 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    66 00001B81 48A5                <1>     movsq   ;Copy the name over
    67 00001B83 A5                  <1>     movsd
    68 00001B84 E8D7110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    69 00001B89 E8BD120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    70 00001B8E 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    71 00001B94 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    72 00001B9A 31C0                <1>     xor eax, eax
    73 00001B9C 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    74 00001BA2 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    75 00001BA9 8B05(80070000)      <1>     mov eax, dword [dirClustPar]
    76                              <1> .searchForDirSpace:
    77 00001BAF 8905(84070000)      <1>     mov dword [dirClustA], eax
    78 00001BB5 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    79 00001BB7 668905(88070000)    <1>     mov word [dirSect], ax
    80 00001BBE 8905(8A070000)      <1>     mov dword [dirEntry], eax
    81 00001BC4 E896050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    82 00001BC9 7328                <1>     jnc .dirEntryFnd
    83 00001BCB 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    83 00001BD3 0000                <1>
    84 00001BD5 0F844A010000        <1>     je .bad ;Set CF and exit
    85 00001BDB E868060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    86 00001BE0 0F823F010000        <1>     jc .bad
    87 00001BE6 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    88 00001BEB 0F8434010000        <1>     je .bad
    89                              <1>     ;Else eax = Newly allocated cluster
    90 00001BF1 EBBC                <1>     jmp short .searchForDirSpace
    91                              <1> .dirEntryFnd:
    92                              <1> ;rdi points to current directory copy
    93                              <1> ;rsi now points to offset in the buffer to write the entry to
    94                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    95 00001BF3 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
    96 00001BFA 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    97                              <1>      
    98 00001BFE 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    99 00001C05 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   100 00001C0C 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   101 00001C0F 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   102                              <1> ;Must now request a cluster and sanitise it
   103 00001C16 E8D5EEFFFF          <1>     call startNewChain  ;Get cluster number in eax
   104 00001C1B 0F8209010000        <1>     jc .badExit
   105 00001C21 E857060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   106 00001C26 0F82FE000000        <1>     jc .badExit
   107                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   108 00001C2C 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   109 00001C33 C1E810              <1>     shr eax, 10h    ;Get high word low
   110 00001C36 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   111 00001C3D 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   112 00001C44 E8A8EDFFFF          <1>     call getBufForDir
   113 00001C49 0F82DB000000        <1>     jc .badExit
   114 00001C4F 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   115 00001C56 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   116 00001C5D 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   117 00001C62 B904000000          <1>     mov ecx, 4
   118 00001C67 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   119 00001C6A E81DECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   120                              <1>     ;Now need to read in data sector and make two entries . and ..
   121 00001C6F 57                  <1>     push rdi
   122 00001C70 51                  <1>     push rcx
   123 00001C71 B90B000000          <1>     mov ecx, 11
   124 00001C76 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   125 00001C7D B020                <1>     mov al, " "
   126 00001C7F F3AA                <1>     rep stosb
   127 00001C81 59                  <1>     pop rcx
   128 00001C82 5F                  <1>     pop rdi
   129 00001C83 48B82E000000000000- <1>     mov rax, "."
   129 00001C8C 00                  <1>
   130 00001C8D 8805(5A060000)      <1>     mov byte [curDirCopy], al
   131 00001C93 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001C9A 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001CA1 C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   134 00001CA8 C1E210              <1>     shl edx, 10h
   135 00001CAB 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001CAD E8C4EDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001CB2 E83AEDFFFF          <1>     call getBufForDir
   138 00001CB7 7271                <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001CB9 488D35(5A060000)    <1>     lea rsi, curDirCopy
   141 00001CC0 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001CC4 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001CC9 F348A5              <1>     rep movsq
   144                              <1>     ;Now create .. entry
   145 00001CCC C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   146 00001CD3 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   147 00001CD9 E82DEDFFFF          <1>     call getFATtype
   148 00001CDE 81F902000000        <1>     cmp ecx, 2
   149 00001CE4 7207                <1>     jb .notFAT32
   150 00001CE6 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   151 00001CE9 7502                <1>     jne .notFAT32
   152 00001CEB 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   153                              <1> .notFAT32:
   154 00001CED 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   155 00001CF4 C1E810              <1>     shr eax, 10h
   156 00001CF7 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   157 00001CFE 488D35(5A060000)    <1>     lea rsi, curDirCopy
   158 00001D05 B904000000          <1>     mov ecx, 4
   159 00001D0A F348A5              <1>     rep movsq
   160 00001D0D E87AEBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   161 00001D12 E804EAFFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   162 00001D17 7211                <1>     jc .badExit
   163                              <1> .okExit:
   164                              <1>     ;AND WE ARE DONE!
   165 00001D19 E8D1570000          <1>     call dosCrit1Exit
   166 00001D1E 31C0                <1>     xor eax, eax
   167 00001D20 E9FD570000          <1>     jmp extGoodExit
   168                              <1> .bad:
   169 00001D25 B805000000          <1>     mov eax, errAccDen
   170                              <1> .badExit:
   171 00001D2A E8C0570000          <1>     call dosCrit1Exit
   172 00001D2F E9FC570000          <1>     jmp extErrExit
   173                              <1> 
   174                              <1> removeDIR:         ;ah = 3Ah
   175 00001D34 4889D7              <1>     mov rdi, rdx
   176 00001D37 E8A2540000          <1>     call strlen
   177 00001D3C 81F940000000        <1>     cmp ecx, 64
   178 00001D42 7613                <1>     jbe .okLength
   179                              <1> .badPath:
   180 00001D44 B005                <1>     mov al, errAccDen
   181 00001D46 E9E5570000          <1>     jmp extErrExit
   182                              <1> .pnf:
   183 00001D4B E89F570000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   184 00001D50 B003                <1>     mov al, errPnf
   185 00001D52 E9D9570000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001D57 4889D6              <1>     mov rsi, rdx
   188 00001D5A E8E2540000          <1>     call checkPathspecOK
   189 00001D5F 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001D61 E896550000          <1>     call scanPathWC
   192 00001D66 72DC                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001D68 E878570000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   195 00001D6D C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   196 00001D74 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   197 00001D7B E824F5FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   198 00001D80 72C9                <1>     jc .pnf             ;Path Doesn't exist
   199 00001D82 E84D520000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   200 00001D87 7312                <1>     jnc .notNet
   201 00001D89 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   202 00001D8E CD2F                <1>     int 2fh
   203 00001D90 0F829A570000        <1>     jc extErrExit
   204 00001D96 E987570000          <1>     jmp extGoodExit
   205                              <1> .notNet:
   206 00001D9B 488D3D(1E050000)    <1>     lea rdi, buffer1
   207 00001DA2 E837540000          <1>     call strlen ;Get the length of the full qualified name in ecx
   208 00001DA7 66890D(4E070000)    <1>     mov word [pathLen], cx
   209                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   210 00001DAE 31C0                <1>     xor eax, eax
   211                              <1> .scanLoop:
   212 00001DB0 E89B530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   213 00001DB5 721A                <1>     jc .notCurrent
   214 00001DB7 E859540000          <1>     call compareFileNames
   215 00001DBC 7404                <1>     jz .cantDelCD
   216 00001DBE FFC0                <1>     inc eax
   217 00001DC0 EBEE                <1>     jmp short .scanLoop
   218                              <1> .cantDelCD:
   219 00001DC2 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   220 00001DC7 E823570000          <1>     call dosCrit1Exit
   221 00001DCC E95F570000          <1>     jmp extErrExit
   222                              <1> .notCurrent:
   223 00001DD1 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   224                              <1>     ;Now let use check that our directory is not the CDS currentdir
   225 00001DD8 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   226 00001DDF 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   227                              <1>     ;If the given path length is one more than the backslash offset
   228                              <1>     ; due to the terminating null, then the user is trying to delete the 
   229                              <1>     ; root dir. Fail this.
   230 00001DE2 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   231 00001DE6 FFC1                <1>     inc ecx
   232 00001DE8 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   233 00001DEF 0F8423010000        <1>     je .accessDenied
   234 00001DF5 E878030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   235                              <1>     ;for the entry in the sector we are hoping to delete
   236 00001DFA 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   237 00001E01 C1E010              <1>     shl eax, 10h
   238 00001E04 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   239 00001E0B 09D8                <1>     or eax, ebx
   240 00001E0D 8905(80070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   241 00001E13 E85EECFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   242 00001E18 E8D4EBFFFF          <1>     call getBufForDir
   243 00001E1D 0F82FA000000        <1>     jc .exitBad
   244                              <1>     ;rbx points to buffer
   245 00001E23 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   246 00001E27 48B82E202020202020- <1>     mov rax, ".       "
   246 00001E30 20                  <1>
   247 00001E31 483906              <1>     cmp qword [rsi], rax
   248 00001E34 0F85DE000000        <1>     jne .accessDenied
   249 00001E3A B42E                <1>     mov ah, "." ;Screw the partial stall
   250 00001E3C 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   251 00001E40 0F85D2000000        <1>     jne .accessDenied
   252 00001E46 4881C620000000      <1>     add rsi, fatDirEntry_size
   253 00001E4D 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   254 00001E54 B904000000          <1>     mov ecx, 4
   255 00001E59 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   256                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   257                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   258 00001E5C 488D3D(D9060000)    <1>     lea rdi, fcbName
   259 00001E63 B03F                <1>     mov al, "?"
   260 00001E65 B90B000000          <1>     mov ecx, 11
   261 00001E6A F3AA                <1>     rep stosb   ;Store the pattern to search for
   262 00001E6C 30C0                <1>     xor al, al  ;Store a terminating zero
   263 00001E6E AA                  <1>     stosb
   264 00001E6F 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   265 00001E75 50                  <1>     push rax    ;Save on stack temporarily
   266 00001E76 8905(84070000)      <1>     mov dword [dirClustA], eax
   267 00001E7C 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   268 00001E7E 668905(88070000)    <1>     mov word [dirSect], ax
   269 00001E85 C705(8A070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   269 00001E8D 0000                <1>
   270 00001E8F C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   271 00001E96 58                  <1>     pop rax
   272 00001E97 E8DAEBFFFF          <1>     call getStartSectorOfCluster
   273 00001E9C E850EBFFFF          <1>     call getBufForDir   
   274 00001EA1 727A                <1>     jc .exitBad
   275 00001EA3 E8FFF1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   276 00001EA8 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   277 00001EAF 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   278 00001EB5 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   279 00001EBC E809F1FFFF          <1>     call searchDir.rmdirEP
   280 00001EC1 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   281                              <1>     ;Else, this is a empty dir, we can remove it
   282                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   283 00001EC3 488B05(46070000)    <1>     mov rax, qword [tempSect]
   284 00001ECA E822EBFFFF          <1>     call getBufForDir
   285 00001ECF 724C                <1>     jc .exitBad
   286 00001ED1 E8D1F1FFFF          <1>     call prepSectorSearch
   287 00001ED6 0FB705(4E070000)    <1>     movzx eax, word [entry]
   288 00001EDD 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   289 00001EE1 4801C6              <1>     add rsi, rax    
   290 00001EE4 8A05(08070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   291 00001EEA 8806                <1>     mov byte [rsi], al  ;Store delchar there
   292 00001EEC 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   293 00001EF0 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   294 00001EF4 E893E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   295 00001EF9 C1E210              <1>     shl edx, 10h
   296 00001EFC 09D0                <1>     or eax, edx
   297                              <1>     ;Now remove the FAT chain
   298 00001EFE E82CEDFFFF          <1>     call unlinkFAT
   299 00001F03 7218                <1>     jc .exitBad
   300 00001F05 E811E8FFFF          <1>     call flushAllBuffersForDPB
   301 00001F0A 7211                <1>     jc .exitBad
   302 00001F0C E8DE550000          <1>     call dosCrit1Exit
   303 00001F11 31C0                <1>     xor eax, eax
   304 00001F13 E90A560000          <1>     jmp extGoodExit
   305                              <1> .accessDenied:
   306 00001F18 B805000000          <1>     mov eax, errAccDen
   307                              <1> .exitBad:
   308 00001F1D F9                  <1>     stc
   309 00001F1E E8CC550000          <1>     call dosCrit1Exit
   310 00001F23 E908560000          <1>     jmp extErrExit
   311                              <1> 
   312                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   313                              <1> ;Input: rdx = Pointer to ASCIIZ string
   314 00001F28 4889D7              <1>     mov rdi, rdx
   315 00001F2B E8AE520000          <1>     call strlen
   316 00001F30 81F940000000        <1>     cmp ecx, 64
   317 00001F36 7618                <1>     jbe .okLength
   318                              <1> .badPath:
   319 00001F38 B003                <1>     mov al, errPnf
   320 00001F3A E9F1550000          <1>     jmp extErrExit
   321                              <1> .badPathCrit:
   322 00001F3F E8AB550000          <1>     call dosCrit1Exit
   323 00001F44 EBF2                <1>     jmp short .badPath
   324                              <1> .badCrit:
   325 00001F46 E8A4550000          <1>     call dosCrit1Exit
   326 00001F4B E9E0550000          <1>     jmp extErrExit
   327                              <1> .okLength:
   328 00001F50 4889D6              <1>     mov rsi, rdx
   329 00001F53 E8E9520000          <1>     call checkPathspecOK
   330 00001F58 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   331 00001F5A 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   332                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   333                              <1> .notBad:
   334 00001F5C E8BA530000          <1>     call checkPathNet   ;Never allow network paths
   335 00001F61 74D5                <1>     jz .badPath ;Or Net paths
   336                              <1>     ;Path is ok, now proceed
   337 00001F63 E87D550000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   338 00001F68 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   339 00001F6F 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   340 00001F76 E829F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   341 00001F7B 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   342                              <1>     ;Now we check to make sure the path provided is not past the maximum
   343                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   344                              <1>     ; moved the path past the end.
   345 00001F7D 488D3D(1E050000)    <1>     lea rdi, buffer1
   346 00001F84 E855520000          <1>     call strlen ;Get the length of this path
   347 00001F89 81F943000000        <1>     cmp ecx, 67
   348 00001F8F 77AE                <1>     ja .badPathCrit
   349                              <1>     ;The path must've been ok, so now copy the path into the CDS
   350                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   351                              <1>     ;Copy the workingCDS to the tmpCDS
   352 00001F91 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   353 00001F98 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   354 00001F9E 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   355 00001FA4 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   356 00001FAA 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   357                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   358 00001FB0 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   359 00001FB3 E8E4000000          <1>     call .getFatCluster
   360 00001FB8 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   361                              <1>     ;ecx has the length of the path in the buffer
   362 00001FBB 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   363 00001FBD 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   364 00001FC2 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   365 00001FC5 E814520000          <1>     call strlen
   366 00001FCA 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   367 00001FCC 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   368 00001FD1 0F8768FFFFFF        <1>     ja .badPathCrit
   369 00001FD7 51                  <1>     push rcx
   370 00001FD8 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   371 00001FDF B95F000000          <1>     mov ecx, cds_size
   372 00001FE4 F3A4                <1>     rep movsb   
   373 00001FE6 59                  <1>     pop rcx
   374 00001FE7 FFC9                <1>     dec ecx ;Remove the trailing null from the count
   375 00001FE9 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   376 00001FF0 57                  <1>     push rdi
   377 00001FF1 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   378 00001FF4 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   379 00001FF8 F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   380 00001FFA 5F                  <1>     pop rdi
   381 00001FFB 4889FE              <1>     mov rsi, rdi
   382 00001FFE 31C0                <1>     xor eax, eax
   383 00002000 31C9                <1>     xor ecx, ecx
   384 00002002 FFC9                <1>     dec ecx
   385 00002004 F2AE                <1>     repne scasb   ;Search for the terminating null
   386 00002006 4881EF02000000      <1>     sub rdi, 2
   387 0000200D 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   388 0000200F E86E510000          <1>     call swapPathSeparator
   389 00002014 7503                <1>     jnz .notSlash
   390 00002016 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   391                              <1> .notSlash:
   392 00002019 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   393 0000201C 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   394 0000201E E82D510000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   395 00002023 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   396 0000202A 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   397 0000202D C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   398                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   399                              <1>     ;Backslash offset must always be 2 on a join host
   400 00002034 B943000000          <1>     mov ecx, 67
   401 00002039 F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   402 0000203B EB41                <1>     jmp short .exitGood
   403                              <1> .notJoin:
   404                              <1> ;rsi -> workingCDS
   405                              <1> ;Lets first copy the working CDS into tmpCDS
   406 0000203D 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   407 00002044 B95F000000          <1>     mov ecx, cds_size
   408 00002049 F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   409 0000204B E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   410 00002050 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   411 00002056 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   412 0000205D 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   413 00002064 E884510000          <1>     call strcpy
   414 00002069 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   415 00002070 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   416 00002077 B95F000000          <1>     mov ecx, cds_size
   417 0000207C F3A4                <1>     rep movsb
   418                              <1> .exitGood:
   419 0000207E E86C540000          <1>     call dosCrit1Exit
   420 00002083 31C0                <1>     xor eax, eax
   421 00002085 E998540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   422                              <1> .net:
   423                              <1> ;SDA Vars are setup for this request
   424 0000208A B805110000          <1>     mov eax, 1105h
   425 0000208F CD2F                <1>     int 2fh
   426 00002091 0F8299540000        <1>     jc extErrExit
   427 00002097 E986540000          <1>     jmp extGoodExit
   428                              <1> .getFatCluster:
   429 0000209C 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   430 000020A3 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   431 000020AA C1E010              <1>     shl eax, 10h
   432 000020AD 09D0                <1>     or eax, edx ;Add low bits to eax
   433                              <1>     return
    13                              <2> %%_ret:
    14 000020AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> getCurrentDIR:     ;ah = 47h
   436                              <1> ;Returns the path for a drive with no X:\.
   437                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   438                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   439 000020B0 88D0                <1>     mov al, dl  ;Move drive number into al
   440 000020B2 E82E540000          <1>     call dosCrit1Enter
   441 000020B7 E8C94F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   442 000020BC 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   443                              <1> .badDrvExit:
   444 000020BE E82C540000          <1>     call dosCrit1Exit
   445 000020C3 B80F000000          <1>     mov eax, errBadDrv
   446 000020C8 E963540000          <1>     jmp extErrExit
   447                              <1> .okDrive:
   448                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   449 000020CD 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   450 000020CE 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   451 000020D5 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   452 000020D6 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   453 000020DD 488D3D(1E050000)    <1>     lea rdi, buffer1
   454 000020E4 E8BBF1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   455 000020E9 5E                  <1>     pop rsi ;Get back the original workingCDS
   456 000020EA 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   457 000020EB 72D1                <1>     jc .badDrvExit
   458                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   459                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   460                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   461 000020ED 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   462 000020F1 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   463 000020F4 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   464 000020F7 7503                <1>     jne .dontSkipChar
   465 000020F9 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   466                              <1> .dontSkipChar:
   467 000020FC AC                  <1>     lodsb   ;Get char
   468 000020FD 84C0                <1>     test al, al
   469 000020FF 7406                <1>     jz .notSpecialChar
   470 00002101 3C05                <1>     cmp al, 05h     ;Special char case?
   471 00002103 7502                <1>     jne .notSpecialChar
   472 00002105 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   473                              <1> .notSpecialChar:
   474 00002107 AA                  <1>     stosb
   475 00002108 84C0                <1>     test al, al ;Did we store a terminator char?
   476 0000210A 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   477 0000210C E8DE530000          <1>     call dosCrit1Exit
   478 00002111 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   479 00002116 E907540000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   480                              <1> 
   481                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   482 0000211B 50                  <1>     push rax
   483 0000211C B800600000          <1>     mov eax, 6000h
   484 00002121 CD21                <1>     int 21h
   485 00002123 58                  <1>     pop rax
   486                              <1>     return
    13                              <2> %%_ret:
    14 00002124 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   487                              <1>     
   488                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   489                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   490 00002125 E817510000          <1>     call checkPathspecOK    ;This preserves rsi
   491 0000212A 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   492 0000212C 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   493                              <1> .badPath:
   494 0000212E B805000000          <1>     mov eax, errAccDen
   495 00002133 E9F8530000          <1>     jmp extErrExit
   496                              <1> .pathspecOk:
   497 00002138 57                  <1>     push rdi    ;Save the destination
   498 00002139 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   499 00002140 E8E2F1FFFF          <1>     call canonicaliseFileName
   500 00002145 5F                  <1>     pop rdi
   501 00002146 0F82E4530000        <1>     jc extErrExit
   502 0000214C 488D35(1E050000)    <1>     lea rsi, buffer1
   503 00002153 E895500000          <1>     call strcpy
   504 00002158 31C0                <1>     xor eax, eax
   505 0000215A E9C3530000          <1>     jmp extGoodExit
   506                              <1> 
   507                              <1> ;-----------------------------------
   508                              <1> ;    General Directory Routines    :
   509                              <1> ;-----------------------------------
   510                              <1> 
   511                              <1> 
   512                              <1> findFreeDiskDirEntry:
   513                              <1> ;Find a space in the directory we are searching for a directory entry
   514                              <1> ;Accept first entry starting with a 0E5h or 00h
   515                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   516                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   517                              <1> ; be called for CDS's that are NOT net CDS's).
   518                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   519                              <1> ;       Directory vars must be set up for the directory we are searching in
   520                              <1> ;Output: CF=CY => Error, eax has error code
   521                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   522 0000215F 8A05(08070000)      <1>     mov al, byte [delChar]
   523 00002165 8805(D9060000)      <1>     mov byte [fcbName], al
   524 0000216B E807EEFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   525                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002170 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   526                              <1> ;Free entry found, dir variables are set for the free entry. 
   527                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   528                              <1> getDiskDirectoryEntry:
   529                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   530                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   531                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   532                              <1> ;        qword [tempSect] = Disk sector number of directory
   533                              <1> ;        word [entry] = 32 byte offset into sector
   534                              <1> ;        CF=CY => Error, exit 
   535 00002172 53                  <1>     push rbx
   536 00002173 8B05(84070000)      <1>     mov eax, dword [dirClustA]  
   537                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   538                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   539 00002179 0FB71D(88070000)    <1>     movzx ebx, word [dirSect]
   540 00002180 85C0                <1>     test eax, eax
   541 00002182 7407                <1>     jz .skipCluster
   542 00002184 E8EDE8FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   543 00002189 EB1B                <1>     jmp short .skipOldFat
   544                              <1> .skipCluster:
   545 0000218B 55                  <1>     push rbp
   546 0000218C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   547 00002193 0FB705(88070000)    <1>     movzx eax, word [dirSect]
   548 0000219A 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   549                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   550 0000219D 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   551 000021A1 5D                  <1>     pop rbp
   552 000021A2 7202                <1>     jb .skipOldFat
   553 000021A4 F9                  <1>     stc
   554                              <1>     return
    13                              <2> %%_ret:
    14 000021A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> .skipOldFat:
   556 000021A6 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   557 000021A9 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   558 000021B0 E83CE8FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   559 000021B5 5B                  <1>     pop rbx
   560                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021B6 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 000021B8 53                  <1>     push rbx
   562 000021B9 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   563 000021C0 E8E2EEFFFF          <1>     call prepSectorSearch
   564                              <1>     ;Above function gets data buffer ptr in rsi
   565 000021C5 31D2                <1>     xor edx, edx
   566 000021C7 8B05(8A070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   567 000021CD C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   568                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   569 000021D0 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   570 000021D4 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   571 000021D6 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   572 000021D9 668915(4E070000)    <1>     mov word [entry], dx
   573 000021E0 5B                  <1>     pop rbx
   574                              <1>     return
    13                              <2> %%_ret:
    14 000021E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> updateSFTDateTimeFields:    
   577                              <1> ;Updates the SFT time/date entries for disk files
   578                              <1> ;Called with:
   579                              <1> ;   [workingDPB] = DPB pointer for the disk device
   580                              <1> ;   [currentSFT] = Current SFT pointer
   581                              <1> ;   bx = attribute byte from the SFT
   582 000021E2 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   583                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021E7 75F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 000021E9 66F7C30040          <1>     test bx, blokNoDTonClose
   585                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021EE 75F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   586 000021F0 50                  <1>     push rax
   587 000021F1 53                  <1>     push rbx
   588 000021F2 E8690B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   589                              <1>     ;Build date and time words
   590 000021F7 E84F0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   591                              <1>     ;Update SFT fields
   592 000021FC 66894713            <1>     mov word [rdi + sft.wTime], ax
   593 00002200 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   594 00002203 66894715            <1>     mov word [rdi + sft.wDate], ax
   595 00002207 31C0                <1>     xor eax, eax
   596 00002209 FF15(2F010000)      <1>     call qword [updateDirShare]
   597 0000220F 5B                  <1>     pop rbx
   598 00002210 58                  <1>     pop rax
   599                              <1>     return
    13                              <2> %%_ret:
    14 00002211 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   600                              <1> 
   601                              <1> getAndUpdateDirSectorForFile:
   602                              <1> ;Input: rdi -> SFT
   603                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   604                              <1> ;               rdi -> SFT
   605 00002212 FF7727              <1>     push qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   606 00002215 E8722D0000          <1>     call setDPBfromSFT
   607 0000221A 58                  <1>     pop rax
   608                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000221B 72F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   609 0000221D C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   610 00002224 C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   611 0000222B E8C1E7FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   612                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002230 72DF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   613 00002232 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   614 00002239 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   615 0000223D 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   616 00002241 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   617 00002244 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   618                              <1>     return
    13                              <2> %%_ret:
    14 00002247 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   619                              <1> 
   620                              <1> growDirectory:
   621                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   622                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   623                              <1> ;                 eax = New Cluster number
   624                              <1> ;               TWO NON CF ERROR CASES.
   625                              <1> ;               If eax = -1 => disk full!
   626                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   627                              <1> ;        CF=CY => Something went wrong. Rip. 
   628 00002248 53                  <1>     push rbx
   629 00002249 51                  <1>     push rcx
   630 0000224A 57                  <1>     push rdi
   631 0000224B 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   632 00002251 85C0                <1>     test eax, eax
   633 00002253 7424                <1>     jz .exit
   634 00002255 E849E8FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   635 0000225A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   636 0000225C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   637 00002261 E8B0E8FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   638 00002266 7211                <1>     jc .exit
   639 00002268 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   640 0000226A E809EAFFFF          <1>     call readFAT
   641 0000226F 7208                <1>     jc .exit
   642 00002271 E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   643 00002276 7201                <1>     jc .exit
   644 00002278 F8                  <1>     clc
   645                              <1> .exit:
   646 00002279 5F                  <1>     pop rdi
   647 0000227A 59                  <1>     pop rcx
   648 0000227B 5B                  <1>     pop rbx
   649                              <1>     return   
    13                              <2> %%_ret:
    14 0000227C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   650                              <1> sanitiseCluster:
   651                              <1> ;Sanitises the cluster in eax to all zeros
   652                              <1> ;Does not move file pointers
   653                              <1> ;Currently, is only called to sanitise subdirectory clusters
   654                              <1> ;Input: eax = Cluster number
   655                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   656                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   657                              <1> ;        If CF=CY => Error, exit
   658 0000227D 50                  <1>     push rax
   659 0000227E 53                  <1>     push rbx
   660 0000227F 51                  <1>     push rcx
   661 00002280 52                  <1>     push rdx
   662 00002281 56                  <1>     push rsi
   663 00002282 55                  <1>     push rbp
   664 00002283 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   665 0000228A E8E7E7FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   666 0000228F 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   667 00002293 FFC2                <1>     inc edx ;Make it a count of sectors
   668                              <1> .getSectorInCluster:
   669 00002295 E857E7FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   670 0000229A 721E                <1>     jc .exitBad
   671 0000229C 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   672 000022A0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   673 000022A4 31C0                <1>     xor eax, eax
   674 000022A6 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   675 000022A8 E8DFE5FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   676                              <1> 
   677 000022AD FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   678 000022AF 740A                <1>     jz .exit    ;Jump if we done
   679 000022B1 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   680 000022B5 48FFC0              <1>     inc rax ;Goto next sector in cluster
   681 000022B8 EBDB                <1>     jmp short .getSectorInCluster
   682                              <1> .exitBad:
   683 000022BA F9                  <1>     stc
   684                              <1> .exit:
   685 000022BB 5D                  <1>     pop rbp
   686 000022BC 5E                  <1>     pop rsi
   687 000022BD 5A                  <1>     pop rdx
   688 000022BE 59                  <1>     pop rcx
   689 000022BF 5B                  <1>     pop rbx
   690 000022C0 58                  <1>     pop rax
   691                              <1>     return
    13                              <2> %%_ret:
    14 000022C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 000022C2 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 000022C3 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 000022CA 48891D(A5040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 000022D1 5B                  <1>     pop rbx
    60 000022D2 C705(AD040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 000022DA 0000                <1>
    61 000022DC 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 000022E3 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 000022E9 0F85A1000000        <1>     jnz .notChar
    64 000022EF 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 000022F5 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 000022FB E8CE510000          <1>     call dosPushRegs    ;Save context here
    68 00002300 488D1D13DDFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002307 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 0000230A C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 0000230D 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00002310 890D(97040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00002316 31C9                <1>     xor ecx, ecx
    75 00002318 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 0000231B 7506                <1>     jne .skipBsySet
    77 0000231D 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002323 66870D(9A040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 0000232A 488D1D(97040000)    <1>     lea rbx, secdReqHdr
    82 00002331 E892480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00002336 668B3D(9A040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 0000233D F7C700800000        <1>     test edi, drvErrStatus
    85 00002343 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00002345 803D(99040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 0000234C 750C                <1>     jne .notNDRead
    89 0000234E 8A05(A4040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00002354 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 0000235A 8A25(9B040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00002360 F6D4                <1>     not ah
    94 00002362 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00002365 E84D510000          <1>     call dosPopRegs ;Get back the context
    96 0000236A 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00002371 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00002372 88CC                <1>     mov ah, cl
   101 00002374 E82C420000          <1>     call charDevErr
   102 00002379 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 0000237B 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 0000237D E835510000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00002382 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00002387 8025(9B040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 0000238E EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00002390 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00002392 7409                <1>     jz .makeDiskNetReadReq
   115 00002394 FECC                <1>     dec ah
   116 00002396 7421                <1>     jz .makeDiskNetNonDestReq
   117 00002398 FECC                <1>     dec ah
   118 0000239A 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 0000239C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 0000239D E833000000          <1>     call .prepDiskNetIO
   123 000023A2 E854220000          <1>     call readBytes
   124 000023A7 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 000023A9 E857000000          <1>     call .cleanDiskNetIO
   126 000023AE 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000023B4 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 000023B6 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 000023B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 000023B9 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 000023BC E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 000023C1 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 000023C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 000023C5 E80B000000          <1>     call .prepDiskNetIO
   138 000023CA E882250000          <1>     call writeBytes
   139 000023CF E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 000023D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 000023D5 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 000023DB E8EE500000          <1>     call dosPushRegs
   146 000023E0 FF35(17040000)      <1>     push qword [currentDTA]
   147 000023E6 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 000023ED 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 000023F4 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 000023FB 31C9                <1>     xor ecx, ecx
   151 000023FD FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 000023FF FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 00002405 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 0000240B 8F05(17040000)      <1>     pop qword [currentDTA]
   157 00002411 E8A1500000          <1>     call dosPopRegs
   158 00002416 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 00002418 E8B1500000          <1>     call dosPushRegs
   164 0000241D B00D                <1>     mov al, drvOPEN
   165 0000241F EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 00002421 E8A8500000          <1>     call dosPushRegs
   169 00002426 B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002428 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 0000242E 7569                <1>     jnz .exit    ;Exit if so
   174 00002430 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 00002434 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 00002438 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 0000243A 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 00002441 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 00002443 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 00002446 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 00002448 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 0000244C 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 00002452 7445                <1>     jz .exit    ;No, exit!
   186 00002454 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 00002457 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   188 0000245E 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 00002461 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 00002464 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 00002467 50                  <1>     push rax    ;Save the dword
   193 00002468 E85F470000          <1>     call goDriver
   194 0000246D 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   195 00002474 F7C700800000        <1>     test edi, drvErrStatus
   196 0000247A 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 0000247C 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 00002482 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 00002484 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 00002486 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 00002488 88C8                <1>     mov al, cl  ;Move drive number into al
   205 0000248A B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 0000248C E814410000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 00002491 B001                <1>     mov al, critRetry   ;al returns user response
   210 00002493 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 00002495 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 00002496 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 00002498 58                  <1>     pop rax    
   215                              <1> .exit:
   216 00002499 E819500000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 0000249E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 0000249F E87E010000          <1>     call charIn_B
    17 000024A4 50                  <1>     push rax
    18 000024A5 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 000024AA 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 000024AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 000024AC 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 000024AE 3C20                <1>     cmp al, asciiCaret
    27 000024B0 0F8286000000        <1>     jb .control
    28 000024B6 3C7F                <1>     cmp al, DEL ;DEL char?
    29 000024B8 7406                <1>     je .skipCurs
    30 000024BA FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 000024C0 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 000024C6 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 000024CD 56                  <1>     push rsi
    35 000024CE 7507                <1>     jnz .skipErrorCheck
    36 000024D0 50                  <1>     push rax
    37 000024D1 E898020000          <1>     call vConCtrlCheck
    38 000024D6 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 000024D7 E820020000          <1>     call outputOnStdout
    41 000024DC 5E                  <1>     pop rsi
    42 000024DD F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024E4 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 000024E6 53                  <1>     push rbx
    45 000024E7 56                  <1>     push rsi
    46 000024E8 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000024ED E843030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000024F2 0F82CF000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000024F8 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000024FC F7C300800000        <1>     test ebx, devRedirDev
    52 00002502 0F85BF000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00002508 F7C380000000        <1>     test ebx, devCharDev
    54 0000250E 0F84B3000000        <1>     jz auxOutCmn.exit
    55 00002514 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00002519 E817030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 0000251E 0F82A3000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002524 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 0000252A 0F8492000000        <1>     jz auxOutCmn.diskFileEP
    60 00002530 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002537 E98B000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 0000253C 3C0D                <1>     cmp al, CR
    64 0000253E 742A                <1>     je .newline
    65 00002540 3C08                <1>     cmp al, BSP
    66 00002542 7432                <1>     je .back
    67 00002544 3C09                <1>     cmp al, TAB
    68 00002546 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 0000254C 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 00002552 0CF8                <1>     or al, ~7
    72 00002554 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 00002556 51                  <1>     push rcx
    75 00002557 0FB6C8              <1>     movzx ecx, al
    76 0000255A 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 0000255D B020                <1>     mov al, SPC
    79 0000255F E84AFFFFFF          <1>     call charOut_B.in   ;Output the char
    80 00002564 FEC9                <1>     dec cl
    81 00002566 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 00002568 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00002569 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 0000256A C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 00002571 E94AFFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 00002576 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 0000257C E93FFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 00002581 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 00002586 BB03000000          <1>     mov ebx, 3
    95 0000258B E8A5020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002590 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97                              <1> .auxloop:
    98 00002592 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 00002594 E829FDFFFF          <1>     call mainCharIO
   100 00002599 7408                <1>     jz .signalLoop
   101 0000259B 30E4                <1>     xor ah, ah  ;Read the char in
   102 0000259D E820FDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 000025A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 000025A3 E8A3010000          <1>     call callInt28h
   106 000025A8 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 000025AA 53                  <1>     push rbx
   110 000025AB BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 000025B0 EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 000025B2 53                  <1>     push rbx
   114 000025B3 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 000025B8 88D0                <1>     mov al, dl  ;Get the char into al
   117 000025BA 50                  <1>     push rax
   118 000025BB E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 000025C0 58                  <1>     pop rax
   120 000025C1 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 000025C2 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 000025C7 5E                  <1>     pop rsi
   126 000025C8 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 000025C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 000025CA 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 000025CC 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 000025CE 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 000025D4 31DB                <1>     xor ebx, ebx    
   135 000025D6 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025DB 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   137 000025DD 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 000025E4 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 000025E6 E8D7FCFFFF          <1>     call mainCharIO
   140 000025EB E85B010000          <1>     call callInt28h ;This preserves flags so call here!
   141 000025F0 7507                <1>     jnz .readChar
   142 000025F2 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 000025F6 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 000025F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 000025F9 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 000025FD 31DB                <1>     xor ebx, ebx
   151 000025FF E831020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002604 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   153 00002606 B401                <1>     mov ah, 01  ;ND read for char
   154 00002608 E8B5FCFFFF          <1>     call mainCharIO
   155 0000260D 750B                <1>     jnz .getChar
   156 0000260F B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 00002611 CD2A                <1>     int 2Ah
   158 00002613 E833010000          <1>     call callInt28h
   159 00002618 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 0000261A 30E4                <1>     xor ah, ah
   163 0000261C E8A1FCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002621 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002622 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002623 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 00002628 7543                <1>     jnz .pullChar
   172 0000262A 803D(E8190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 00002631 7507                <1>     jne .skiplookahead
   174 00002633 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 00002635 E888FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 0000263A B484                <1>     mov ah, 84h
   178 0000263C CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 0000263E 66813D(1D1A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 00002646 FF                  <1>
   180 00002647 751B                <1>     jne .skipClockRead
   181 00002649 E8804E0000          <1>     call dosPushRegs
   182 0000264E F8                  <1>     clc ;Clear CF, write primary header to backup
   183 0000264F E882000000          <1>     call swapPrimaryHeader
   184 00002654 E807070000          <1>     call readDateTimeRecord
   185 00002659 F9                  <1>     stc ;Set CF, write backup to primary header
   186 0000265A E877000000          <1>     call swapPrimaryHeader
   187 0000265F E8534E0000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 00002664 66FF05(1D1A0000)    <1>     inc word [keybTicks]
   190 0000266B EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 0000266D 30E4                <1>     xor ah, ah
   193 0000266F E84EFCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 00002674 5E                  <1>     pop rsi
   195 00002675 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 00002677 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 00002679 C605(1C1A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 00002680 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 00002681 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 00002684 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 00002685 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002687 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   208 00002689 E820FEFFFF          <1>     call charOut_B.in
   209 0000268E EBF4                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 00002690 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 00002695 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002697 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   216 00002699 FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 0000269B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 0000269C 50                  <1>     push rax
   222 0000269D 52                  <1>     push rdx
   223 0000269E 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 000026A0 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 000026A5 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 000026A7 B404                <1>     mov ah, 04h ;Flush input buffers
   227 000026A9 E814FCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 000026AE 5A                  <1>     pop rdx
   230 000026AF 58                  <1>     pop rax
   231 000026B0 88C4                <1>     mov ah, al  ;Move function number into ah
   232 000026B2 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 000026B4 7507                <1>     jne .others
   234 000026B6 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 000026B9 7412                <1>     jz .bad ;Yes, exit
   236 000026BB EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 000026BD 3C01                <1>     cmp al, 01h
   239 000026BF 740F                <1>     je .callFunction
   240 000026C1 3C07                <1>     cmp al, 07h
   241 000026C3 740B                <1>     je .callFunction
   242 000026C5 3C08                <1>     cmp al, 08h
   243 000026C7 7407                <1>     je .callFunction
   244 000026C9 3C0A                <1>     cmp al, 0Ah
   245 000026CB 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 000026CD 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 000026CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 000026D0 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 000026D1 E9104D0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 000026D6 56                  <1>     push rsi
   262 000026D7 57                  <1>     push rdi
   263 000026D8 51                  <1>     push rcx
   264 000026D9 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 000026E2 00                  <1>
   265 000026E3 488D35(C1040000)    <1>     lea rsi, primReqHdr
   266 000026EA 488D3D(F2190000)    <1>     lea rdi, bkupReqHdr
   267 000026F1 7303                <1>     jnc .read
   268 000026F3 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 000026F6 F3A4                <1>     rep movsb   ;Swap
   271 000026F8 59                  <1>     pop rcx
   272 000026F9 5F                  <1>     pop rdi
   273 000026FA 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 000026FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 000026FC 53                  <1>     push rbx
   279 000026FD BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00002702 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 00002707 7217                <1>     jc .exit
   282 00002709 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 0000270F 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 00002711 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 00002715 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 0000271B 7405                <1>     jz .notCharDevOrFast
   287 0000271D CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 0000271F F8                  <1>     clc
   290                              <1> .exit:
   291 00002720 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00002721 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002722 E809000000          <1>     call outputOnSFT
   295 00002727 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 00002728 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00002729 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000272E 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 00002730 50                  <1>     push rax
   307 00002731 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 00002733 E88AFBFFFF          <1>     call mainCharIO
   309 00002738 58                  <1>     pop rax
   310 00002739 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 0000273B B402                <1>     mov ah, 02h ;Output char in al
   312 0000273D E880FBFFFF          <1>     call mainCharIO
   313 00002742 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 00002743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 00002744 E802000000          <1>     call callInt28h
   317 00002749 EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 0000274B 9C                  <1>     pushfq
   322 0000274C F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 00002753 7417                <1>     jz .exit    ;If zero, not safe
   324 00002755 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 0000275C 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 0000275E FF35(95040000)      <1>     push qword [int28Flag] 
   328 00002764 CD28                <1>     int 28h
   329 00002766 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 0000276C 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 0000276D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 0000276E E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 00002773 53                  <1>     push rbx
   355 00002774 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 00002776 E8BA000000          <1>     call getCharDevSFT
   357 0000277B 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000277C 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   359 0000277E B401                <1>     mov ah, 01  ;Non destructively read CON
   360 00002780 E83DFBFFFF          <1>     call mainCharIO
   361 00002785 74C4                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 00002787 3C13                <1>     cmp al, DC3 ;^S ?
   364 00002789 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 0000278B 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 0000278D E830FBFFFF          <1>     call mainCharIO
   367 00002792 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 00002797 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00002799 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 0000279B 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 0000279D 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 0000279F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 000027A0 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 000027A6 53                  <1>     push rbx
   378 000027A7 BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 000027AC E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 000027B1 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027B2 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   382 000027B4 57                  <1>     push rdi
   383 000027B5 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 000027B8 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   385 000027BE 741D                <1>     jz .notNet
   386 000027C0 50                  <1>     push rax
   387 000027C1 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 000027C6 CD2F                <1>     int 2Fh
   389 000027C8 58                  <1>     pop rax
   390 000027C9 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 000027CB C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 000027D2 50                  <1>     push rax
   394 000027D3 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 000027D8 CD2F                <1>     int 2Fh
   396 000027DA 58                  <1>     pop rax
   397 000027DB EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 000027DD 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 000027E4 7507                <1>     jnz .echoOn
   403 000027E6 E836FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 000027EB EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 000027ED E826FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 000027F2 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 000027F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 000027F4 E852FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 000027F9 B401                <1>     mov ah, 01h ;ND read
   414 000027FB E8C2FAFFFF          <1>     call mainCharIO
   415 00002800 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002802 53                  <1>     push rbx
   418 00002803 31DB                <1>     xor ebx, ebx
   419 00002805 E82B000000          <1>     call getCharDevSFT
   420 0000280A 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000280B 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   422 0000280D 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 0000280F E8AEFAFFFF          <1>     call mainCharIO
   424 00002814 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002816 7514                <1>     jnz .checkBreak2
   426 00002818 803D(1C1A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 0000281F 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002825 C605(1C1A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 0000282C 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000282E 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   432 00002830 E9203F0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002835 F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 0000283C 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 0000283E 57                  <1>     push rdi
   444 0000283F E8BB260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002844 4889FE              <1>     mov rsi, rdi
   446 00002847 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002848 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002849 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 0000284F 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002851 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002858 F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002859 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 0000285A 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 0000285C 0F834CFCFFFF        <1>     jae charOut_B.in
   465 00002862 3C09                <1>     cmp al, TAB
   466 00002864 0F8444FCFFFF        <1>     je charOut_B.in
   467 0000286A 3C15                <1>     cmp al, NAK
   468 0000286C 0F843CFCFFFF        <1>     je charOut_B.in
   469 00002872 3C14                <1>     cmp al, DC4
   470 00002874 0F8434FCFFFF        <1>     je charOut_B.in
   471 0000287A 50                  <1>     push rax
   472 0000287B B05E                <1>     mov al, "^" ;Get caret in place
   473 0000287D E82CFCFFFF          <1>     call charOut_B.in
   474 00002882 58                  <1>     pop rax
   475 00002883 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002885 E924FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 0000288A B00D                <1>     mov al, CR
   479 0000288C E81DFCFFFF          <1>     call charOut_B.in
   480 00002891 B00A                <1>     mov al, LF
   481 00002893 E916FCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002898 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000289F 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 000028A1 53                  <1>     push rbx
   491 000028A2 56                  <1>     push rsi
   492 000028A3 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 000028AA C705(ED040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 000028B2 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 000028B4 C605(EB040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 000028BB 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   498 000028C2 E805430000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 000028C7 66F705(EE040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   500 000028CF 02                  <1>
   501 000028D0 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 000028D2 30C0                <1>     xor al, al
   504 000028D4 5E                  <1>     pop rsi
   505 000028D5 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 000028D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 000028D7 8A05(F8040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   510 000028DD 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 000028DF 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 000028E1 C705(ED040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   513 000028E9 0000                <1>
   514 000028EB C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 000028F2 C705(01050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   516 000028FA 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 000028FC 488D05(F8040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   519 00002903 488905(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   520 0000290A E8BD420000          <1>     call goDriver   ;RSI and RBX as before
   521 0000290F E9413E0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002914 57                  <1>     push rdi
   526 00002915 C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 0000291C 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   528 00002923 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 0000292A 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 0000292B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 0000292C C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002933 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002934 4889D6              <1>     mov rsi, rdx
   554 00002937 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002939 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000293B 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 0000293D 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002940 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002942 7606                <1>     jbe .avoidcheck
   560 00002944 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002948 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 0000294A 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 0000294C 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 0000294F FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002951 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002957 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 0000295D 56                  <1>     push rsi    ;Push user buffer address
   571 0000295E 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 00002965 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 0000296C 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 0000296E 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002970 E8ADFCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002975 3C0A                <1>     cmp al, LF
   577 00002977 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002979 E8A4FCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 0000297E 3C06                <1>     cmp al, ACK
   582 00002980 74F7                <1>     je .mainLoop   ;Get another char
   583 00002982 3A05B2D6FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002988 0F842C010000        <1>     je .escape
   585 0000298E 3C7F                <1>     cmp al, DEL
   586 00002990 0F848F000000        <1>     je .delete
   587 00002996 3C08                <1>     cmp al, BSP
   588 00002998 0F8487000000        <1>     je .delete
   589 0000299E 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 000029A0 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 000029A5 3C15                <1>     cmp al, NAK
   593 000029A7 9090909090          <1>     db 5 dup (90h)
   594 000029AC 3C0D                <1>     cmp al, CR
   595 000029AE 7452                <1>     je .carriageReturn
   596 000029B0 3C0A                <1>     cmp al, LF
   597 000029B2 7467                <1>     je .lineFeed
   598 000029B4 3A0581D6FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 000029BA 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 000029BC 38D6                <1>     cmp dh, dl
   602 000029BE 731C                <1>     jae .bufOflw
   603 000029C0 AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 000029C1 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 000029C3 E892FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 000029C8 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 000029CF 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 000029D1 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 000029D3 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 000029D5 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 000029D8 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 000029DA EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 000029DC B007                <1>     mov al, BEL ;Sound the bell
   619 000029DE E8CBFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 000029E3 EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 000029E5 B05C                <1>     mov al, "\"
   624 000029E7 E8C2FAFFFF          <1>     call charOut_B.in
   625 000029EC 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 000029ED E898FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 000029F2 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 000029F8 E859FBFFFF          <1>     call charOut_B.outputATab
   631 000029FD E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002A02 AA                  <1>     stosb
   634 00002A03 E8A6FAFFFF          <1>     call charOut_B.in
   635 00002A08 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002A09 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002A0C FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002A0E 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002A15 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002A18 F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002A1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002A1B E86AFEFFFF          <1>     call printCRLF
   645 00002A20 E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002A25 E805000000          <1>     call .removeChar
   648 00002A2A E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002A2F 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002A31 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002A33 E868000000          <1>     call .vConErase
   653 00002A38 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002A3A 3C20                <1>     cmp al, SPC
   655 00002A3C 7311                <1>     jae .normalChar
   656 00002A3E 3C09                <1>     cmp al, TAB
   657 00002A40 7420                <1>     je .eraTab
   658 00002A42 3C15                <1>     cmp al, NAK
   659 00002A44 7409                <1>     je .normalChar
   660 00002A46 3C14                <1>     cmp al, DC4
   661 00002A48 7405                <1>     je .normalChar
   662 00002A4A E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002A4F 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A56 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   666 00002A58 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A5A 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   668 00002A5C 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002A5F FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002A61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002A62 57                  <1>     push rdi
   675 00002A63 48FFCF              <1>     dec rdi
   676 00002A66 FD                  <1>     std ;Go backwards
   677 00002A67 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002A6A B020                <1>     mov al, SPC
   679 00002A6C 53                  <1>     push rbx
   680 00002A6D BB07000000          <1>     mov ebx, 7
   681 00002A72 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002A75 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002A76 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002A78 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002A7C 740A                <1>     je .tabChar
   687 00002A7E FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002A80 E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002A82 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002A88 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002A8A 00D9                <1>     add cl, bl
   695 00002A8C 80E107              <1>     and cl, 7
   696 00002A8F 5B                  <1>     pop rbx
   697 00002A90 5F                  <1>     pop rdi
   698 00002A91 FC                  <1>     cld
   699 00002A92 74BB                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002A94 E80C000000          <1>     call .vConEraseNoDec
   703 00002A99 E2F9                <1>     loop .vConDelTab
   704 00002A9B E9AFFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002AA0 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002AA3 FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002AA5 B008                <1>     mov al, BSP ;Move cursor back
   712 00002AA7 E802FAFFFF          <1>     call charOut_B.in
   713 00002AAC B020                <1>     mov al, SPC ;Replace with a space
   714 00002AAE E8FBF9FFFF          <1>     call charOut_B.in
   715 00002AB3 B008                <1>     mov al, BSP ;Move cursor back again
   716 00002AB5 E9F4F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002ABA FF2572D5FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002AC0 E846000000          <1>     call .fCommon2
   724 00002AC5 EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002AC7 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002ACA 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002ACC EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002ACE B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002AD3 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002ADA 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002ADC 0F8497FEFFFF        <1>     je .mainLoop
   735 00002AE2 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002AE4 0F848FFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002AEA AC                  <1>     lodsb
   739 00002AEB AA                  <1>     stosb
   740 00002AEC E869FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002AF1 FEC7                <1>     inc bh
   742 00002AF3 FEC6                <1>     inc dh
   743 00002AF5 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002AF7 E97DFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002AFC E80A000000          <1>     call .fCommon2
   747 00002B01 4801CE              <1>     add rsi, rcx
   748 00002B04 00CF                <1>     add bh, cl
   749 00002B06 E96EFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002B0B E812FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002B10 3A0524D5FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002B16 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002B18 E805FBFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002B1D 59                  <1>     pop rcx ;Get original return address from stack
   759 00002B1E E956FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002B23 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002B26 28F9                <1>     sub cl, bh
   763 00002B28 74F3                <1>     jz .fforceExit
   764 00002B2A FFC9                <1>     dec ecx
   765 00002B2C 74EF                <1>     jz .fforceExit
   766 00002B2E 57                  <1>     push rdi
   767 00002B2F 4889F7              <1>     mov rdi, rsi
   768 00002B32 48FFC7              <1>     inc rdi
   769 00002B35 F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002B37 5F                  <1>     pop rdi
   771 00002B38 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002B3A F6D1                <1>     not cl
   773 00002B3C 00D9                <1>     add cl, bl
   774 00002B3E 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002B40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002B41 B040                <1>     mov al, "@"
   778 00002B43 E866F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002B48 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002B49 57                  <1>     push rdi
   781 00002B4A E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002B4F 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002B50 88F3                <1>     mov bl, dh
   784 00002B52 E996FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002B57 B01A                <1>     mov al, EOF
   788 00002B59 E95EFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002B5E 8A05D6D4FFFF        <1>     mov al, byte [extESC]
   792 00002B64 E953FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002B69 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002B6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002B70 38DF                <1>     cmp bh, bl
   798 00002B72 0F8401FEFFFF        <1>     je .mainLoop
   799 00002B78 FEC7                <1>     inc bh
   800 00002B7A 48FFC6              <1>     inc rsi
   801 00002B7D E9F7FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002B82 E89BFAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002B87 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002B8C 57                  <1>     push rdi    ;Preserve rdi
   808 00002B8D 488D3DA8D4FFFF      <1>     lea rdi, extKeyTbl
   809 00002B94 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002B95 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002B96 740D                <1>     je .charFound
   815 00002B98 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002B9A 7414                <1>     jz .notInTable
   817 00002B9C 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002BA3 EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002BA5 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002BA6 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002BAA 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002BAD 5F                  <1>     pop rdi
   824 00002BAE FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002BB0 59                  <1>     pop rcx ;Realign stack
   827 00002BB1 59                  <1>     pop rcx
   828 00002BB2 E9C2FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    34                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002BB7 E8A4010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002BBC E8A0440000          <1>     call getUserRegs
     6 00002BC1 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002BC8 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002BCF 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002BD5 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002BDB 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002BDF 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002BE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002BE4 B0FF                <1>     mov al, -1      ;Default to fail
    19 00002BE6 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002BEB 72F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    21 00002BED E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002BF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002BF3 E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002BF8 E864440000          <1>     call getUserRegs
    26 00002BFD 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002C04 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002C0B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002C0F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002C13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002C14 80FD17              <1>     cmp ch, 23
    37 00002C17 7749                <1>     ja .exitBad
    38 00002C19 80F93B              <1>     cmp cl, 59
    39 00002C1C 7744                <1>     ja .exitBad
    40 00002C1E 80FE3B              <1>     cmp dh, 59
    41 00002C21 773F                <1>     ja .exitBad
    42 00002C23 80FA63              <1>     cmp dl, 99
    43 00002C26 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002C28 E833010000          <1>     call readDateTimeRecord
    46 00002C2D 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002C34 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002C3B 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002C3E 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002C42 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002C46 B906000000          <1>     mov ecx, 6
    52 00002C4B 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002C4E E88C420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002C53 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002C5A E86D3F0000          <1>     call goDriver
    56 00002C5F 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002C61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002C62 B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002C64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002C65 6681F97800          <1>     cmp cx, 120
    69 00002C6A 0F83ED000000        <1>     jae .exitBad
    70 00002C70 84F6                <1>     test dh, dh
    71 00002C72 0F84E5000000        <1>     jz .exitBad
    72 00002C78 80FE0C              <1>     cmp dh, 12
    73 00002C7B 0F87DC000000        <1>     ja .exitBad
    74 00002C81 84D2                <1>     test dl, dl
    75 00002C83 0F84D4000000        <1>     jz .exitBad
    76 00002C89 80FA1F              <1>     cmp dl, 31
    77 00002C8C 0F87CB000000        <1>     ja .exitBad
    78 00002C92 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002C99 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002C9F E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002CA4 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002CA7 750C                <1>     jne .notFeb
    84 00002CA9 3A15AFD3FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002CAF 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002CB5 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002CB7 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002CBA 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002CBD 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002CC0 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002CC5 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002CC7 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002CCA 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002CCD 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002CD2 FFC9                <1>     dec ecx
    99 00002CD4 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002CD7 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002CDC EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002CDE 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002CE0 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002CE7 488D356FD3FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002CEE FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002CF0 67E308              <1>     jecxz .addMonthOffset
   110 00002CF3 AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002CF4 0FB6C0              <1>     movzx eax, al
   112 00002CF7 01C2                <1>     add edx, eax
   113 00002CF9 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002CFB 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002D02 FFC9                <1>     dec ecx
   117 00002D04 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002D06 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002D0D 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002D14 B906000000          <1>     mov ecx, 6
   123 00002D19 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002D1C E8C9410000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002D21 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002D28 E89F3E0000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002D2D 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00002D34 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00002D3B 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00002D3E B906000000          <1>     mov ecx, 6
   132 00002D43 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00002D46 E894410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00002D4B 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 00002D52 E8753E0000          <1>     call goDriver
   136 00002D57 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00002D5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00002D5D B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002D5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 00002D60 53                  <1>     push rbx
   146 00002D61 51                  <1>     push rcx
   147 00002D62 52                  <1>     push rdx
   148 00002D63 56                  <1>     push rsi
   149 00002D64 55                  <1>     push rbp
   150                              <1> 
   151 00002D65 66C705(1D1A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00002D6D 00                  <1>
   152 00002D6E 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00002D75 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00002D7A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00002D7D E868410000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 00002D82 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00002D89 E83E3E0000          <1>     call goDriver
   162 00002D8E 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00002D95 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00002D9C 7466                <1>     je .exit    ;Return if equal
   170 00002D9E 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00002DA3 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00002DA5 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00002DAC BBB5050000          <1>     mov ebx, 365*4 + 1
   177 00002DB1 31D2                <1>     xor edx, edx
   178 00002DB3 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00002DB5 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00002DB7 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 00002DBC 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 00002DBE 7210                <1>     jb .foundBunch
   185 00002DC0 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 00002DC2 FFC1                <1>     inc ecx
   187 00002DC4 FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00002DC6 39DA                <1>     cmp edx, ebx
   190 00002DC8 7206                <1>     jb .foundBunch
   191 00002DCA 29DA                <1>     sub edx, ebx
   192 00002DCC FFC1                <1>     inc ecx
   193 00002DCE EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 00002DD0 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 00002DD3 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 00002DD5 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 00002DDA 488D357CD2FFFF      <1>     lea rsi, monthsTbl
   204 00002DE1 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 00002DE3 FFC1                <1>     inc ecx ;Start from 1
   207 00002DE5 AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 00002DE6 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 00002DE9 39C2                <1>     cmp edx, eax
   210 00002DEB 7204                <1>     jb .monthFound
   211 00002DED 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 00002DEF EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 00002DF1 FFC2                <1>     inc edx
   217 00002DF3 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 00002DF9 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 00002DFF E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 00002E04 5D                  <1>     pop rbp
   222 00002E05 5E                  <1>     pop rsi
   223 00002E06 5A                  <1>     pop rdx
   224 00002E07 59                  <1>     pop rcx
   225 00002E08 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00002E09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 00002E0A 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 00002E11 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00002E16 31D2                <1>     xor edx, edx
   234 00002E18 B907000000          <1>     mov ecx, 7   
   235 00002E1D F7F1                <1>     div ecx  ;Get remainder in dl
   236 00002E1F 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 00002E25 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00002E27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00002E28 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 00002E2E F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 00002E31 51                  <1>     push rcx
   248 00002E32 57                  <1>     push rdi
   249 00002E33 B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00002E38 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 00002E3D 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 00002E40 488D3D17D2FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00002E47 AA                  <1>     stosb   ;Store the word in rdi
   254 00002E48 5F                  <1>     pop rdi
   255 00002E49 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002E4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 00002E4B 53                  <1>     push rbx
   271 00002E4C 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 00002E53 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 00002E55 89D8                <1>     mov eax, ebx
   274 00002E57 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 00002E5E C1E305              <1>     shl ebx, 5
   276 00002E61 09D8                <1>     or eax, ebx
   277 00002E63 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 00002E6A C1E30B              <1>     shl ebx, 11
   279 00002E6D 09D8                <1>     or eax, ebx
   280 00002E6F 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 00002E76 C1E310              <1>     shl ebx, 16
   282 00002E79 09D8                <1>     or eax, ebx
   283 00002E7B 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 00002E82 C1E315              <1>     shl ebx, 21
   285 00002E85 09D8                <1>     or eax, ebx
   286 00002E87 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 00002E8E C1E319              <1>     shl ebx, 25
   288 00002E91 09D8                <1>     or eax, ebx
   289 00002E93 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 00002E94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 00002E95 E8C6FEFFFF          <1>     call readDateTimeRecord
   296 00002E9A E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 00002E9F 31D2                <1>     xor edx, edx
   298 00002EA1 6689C2              <1>     mov dx, ax  ;Save time
   299 00002EA4 C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 00002EA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00002EA8 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 00002EAF 4889D6              <1>     mov rsi, rdx
    30 00002EB2 803EFF              <1>     cmp byte [rsi], -1
    31 00002EB5 7507                <1>     jne .notExt1
    32 00002EB7 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 00002EBE 0FB606              <1>     movzx eax, byte [rsi]
    35 00002EC1 50                  <1>     push rax    ;Push on stack the drive number
    36 00002EC2 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00002EC9 E822030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 00002ECE 7306                <1>     jnc .fcbOk
    39 00002ED0 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 00002ED1 E93A460000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00002ED6 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 00002EDD E87DE4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 00002EE2 7306                <1>     jnc .fileFound
    45 00002EE4 5B                  <1>     pop rbx
    46 00002EE5 E926460000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 00002EEA 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 00002EF1 57                  <1>     push rdi
    51 00002EF2 E815E3FFFF          <1>     call setupFFBlock
    52 00002EF7 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00002EF8 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 00002EFF F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00002F06 7407                <1>     jz .notExt2
    57 00002F08 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 00002F0F 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 00002F10 85DB                <1>     test ebx, ebx
    61 00002F12 7509                <1>     jnz .notCurrentDrive
    62 00002F14 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 00002F1B FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 00002F1D AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 00002F1E 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 00002F21 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00002F26 F3A5                <1>     rep movsd
    69 00002F28 89D8                <1>     mov eax, ebx
    70 00002F2A AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00002F2B 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 00002F32 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00002F39 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 00002F40 7412                <1>     jz .notExt3
    75 00002F42 B8FFFFFFFF          <1>     mov eax, -1
    76 00002F47 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00002F48 FFC0                <1>     inc eax ;Make it zero
    78 00002F4A AB                  <1>     stosd
    79 00002F4B AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00002F4C 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 00002F53 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 00002F54 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 00002F56 AA                  <1>     stosb
    85 00002F57 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 00002F5C F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 00002F5F E9A9450000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 00002F64 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 00002F6B C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 00002F72 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 00002F79 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 00002F7C 803EFF              <1>     cmp byte [rsi], -1
    96 00002F7F 7514                <1>     jne .notExt
    97 00002F81 FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 00002F87 4881C606000000      <1>     add rsi, exFcb.attribute
    99 00002F8E AC                  <1>     lodsb   ;Get search attr in al
   100 00002F8F 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 00002F95 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 00002F9C 31C0                <1>     xor eax, eax
   105 00002F9E AC                  <1>     lodsb   ;Get the FCB drive letter
   106 00002F9F 50                  <1>     push rax    ;Push drive letter on the stack
   107 00002FA0 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 00002FA3 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 00002FA4 B905000000          <1>     mov ecx, 5
   110 00002FA9 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00002FAB FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 00002FB1 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00002FB8 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00002FB9 8F05(17040000)      <1>     pop qword [currentDTA]
   115 00002FBF E81ADEFFFF          <1>     call findNextMain
   116 00002FC4 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00002FCA 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 00002FD0 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00002FD7 F607FF              <1>     test byte [rdi], -1
   120 00002FDA 7407                <1>     jz .notExt2
   121 00002FDC 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 00002FE3 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 00002FE4 881F                <1>     mov byte [rdi], bl
   125 00002FE6 E925450000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 00002FEB 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 00002FF2 57                  <1>     push rdi
   130 00002FF3 E8F8010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00002FF8 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 00002FF9 0F8211450000        <1>     jc fcbErrExit
   133 00002FFF E85BE3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 00003004 0F8206450000        <1>     jc fcbErrExit
   135 0000300A E818100000          <1>     call outerDeleteMain
   136 0000300F 0F82FB440000        <1>     jc fcbErrExit
   137 00003015 E9F3440000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 0000301A 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 00003021 4889D6              <1>     mov rsi, rdx
   144 00003024 803EFF              <1>     cmp byte [rsi], -1
   145 00003027 7507                <1>     jne .notExt
   146 00003029 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 00003030 31C0                <1>     xor eax, eax
   149 00003032 AC                  <1>     lodsb
   150 00003033 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 00003034 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 0000303B E8B0010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 00003040 723D                <1>     jc .badPop
   154 00003042 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00003048 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 0000304E 58                  <1>     pop rax ;Get drive letter back
   157 0000304F 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 00003056 E869010000          <1>     call fcbInitName2
   159 0000305B 7223                <1>     jc short .bad
   160 0000305D 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 00003064 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 0000306B 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 00003072 E8A10B0000          <1>     call renameMain
   164 00003077 0F8390440000        <1>     jnc fcbGoodExit
   165 0000307D EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 0000307F 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 00003080 E98B440000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 00003085 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 0000308C 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 00003093 57                  <1>     push rdi
   177 00003094 E857010000          <1>     call fcbInitRoutine
   178 00003099 5F                  <1>     pop rdi
   179 0000309A 0F8270440000        <1>     jc fcbErrExit
   180 000030A0 E8BAE2FFFF          <1>     call getFilePathNoCanon
   181 000030A5 0F8265440000        <1>     jc fcbErrExit
   182 000030AB 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 000030B1 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 000030B8 803EFF              <1>     cmp byte [rsi], -1
   186 000030BB 7507                <1>     jne .notExtended
   187 000030BD 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 000030C4 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 000030C8 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 000030CA 85D2                <1>     test edx, edx
   193 000030CC 7402                <1>     jz .noRemainder
   194 000030CE FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 000030D0 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 000030D3 E935440000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 000030D8 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 000030DF 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 000030E3 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 000030EA C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 000030EB 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 000030F2 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 000030F9 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 000030FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 000030FE E88D010000          <1>     call parseNameToFCB
   229 00003103 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 00003104 E8583F0000          <1>     call getUserRegs
   231 00003109 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 0000310C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 0000310D 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 00003114 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003117 755F                <1>     jne .exitErr
   251 00003119 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 0000311D 7559                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 0000311F 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00003126 57                  <1>     push rdi
   256 00003127 E8C4000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 0000312C 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 0000312D 0F82DD430000        <1>     jc fcbErrExit
   259 00003133 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00003136 E806410000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 0000313B 723B                <1>     jc .exitErr
   262 0000313D E81DE2FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 00003142 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003148 30C0                <1>     xor al, al
   265 0000314A 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 0000314F 7427                <1>     je .exitErr
   267 00003151 488D1D(180D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 00003158 48891D(32070000)    <1>     mov qword [currentSFT], rbx
   269 0000315F 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 00003166 E8A2100000          <1>     call createMain
   271 0000316B 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 0000316D E8BC130000          <1>     call closeMain
   275 00003172 0F8395430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 00003178 B805000000          <1>     mov eax, errAccDen
   278 0000317D E98E430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> ;=================================================================
   281                              <1> ;=================================================================
   282                              <1> ;These functions will be marked as reserved for future expansion.
   283                              <1> ; One idea will be to create a handle based record IO interface.
   284                              <1> ; We will be able to do IO on records of predefined length 
   285                              <1> ; on a file handle, thus removing the need for an FCB but still
   286                              <1> ; maintaining the usefulness of record based IO.
   287                              <1> ;=================================================================
   288                              <1> ;=================================================================
   289                              <1> closeFileFCB:      ;ah = 10h
   290                              <1> sequentialReadFCB: ;ah = 14h
   291                              <1> sequentialWriteFCB:;ah = 15h
   292                              <1> randomReadFCB:     ;ah = 21h
   293                              <1> randomWriteFCB:    ;ah = 22h
   294                              <1> setRelRecordFCB:   ;ah = 24h
   295                              <1> randBlockReadFCB:  ;ah = 27h
   296                              <1> randBlockWriteFCB: ;ah = 28h
   297 00003182 B805000000          <1>     mov eax, errAccDen
   298 00003187 E984430000          <1>     jmp fcbErrExit
   299                              <1> 
   300                              <1> 
   301                              <1> ;--------------------------------
   302                              <1> ;  Common FCB related Routines  :
   303                              <1> ;--------------------------------
   304                              <1> fcbCheckDriveType:
   305                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   306                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   307                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   308                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   309                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   310                              <1> ;If a net CDS, automatic fail (for now).
   311 0000318C C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   312 00003193 51                  <1>     push rcx
   313 00003194 57                  <1>     push rdi
   314 00003195 55                  <1>     push rbp
   315 00003196 9C                  <1>     pushfq
   316 00003197 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   317 0000319E 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   318 000031A0 E82F3E0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   319 000031A5 7218                <1>     jc .exit
   320                              <1>     ;rdi has cds ptr now
   321 000031A7 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   322 000031AB E85BD8FFFF          <1>     call getFATtype
   323 000031B0 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   324 000031B6 7707                <1>     ja .exit
   325                              <1> .okToGo:
   326 000031B8 C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   327                              <1> .exit:
   328 000031BF 9D                  <1>     popfq
   329 000031C0 5D                  <1>     pop rbp
   330 000031C1 5F                  <1>     pop rdi
   331 000031C2 59                  <1>     pop rcx
   332                              <1>     return
    13                              <2> %%_ret:
    14 000031C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> fcbInitName2:
   334                              <1> ;Must be called after fcbInitRoutine has been run once
   335                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   336                              <1> ;       rdx -> UserFCB
   337                              <1> ;       eax[0] = Drive number (0 based)
   338 000031C4 55                  <1>     push rbp
   339 000031C5 4889E5              <1>     mov rbp, rsp
   340 000031C8 4881EC0F000000      <1>     sub rsp, 15
   341 000031CF 57                  <1>     push rdi
   342 000031D0 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   343 000031D4 4889D6              <1>     mov rsi, rdx
   344 000031D7 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   345 000031DE 7407                <1>     jz .notExtended
   346 000031E0 4881C607000000      <1>     add rsi, exFcb.driveNum
   347                              <1> .notExtended:
   348                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   349 000031E7 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   350 000031EE EB36                <1>     jmp short fcbInitRoutine.rename2EP
   351                              <1> fcbInitRoutine:
   352                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   353                              <1> ;Input: rdx -> User FCB
   354                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   355 000031F0 55                  <1>     push rbp
   356 000031F1 4889E5              <1>     mov rbp, rsp
   357 000031F4 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   358                              <1>     ;This space is used to store X:FILENAME.EXT,0
   359 000031FB 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   360 000031FC 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   361 00003200 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   362 00003207 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   363 0000320E E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   364 00003213 7410                <1>     jz .notExtended
   365 00003215 C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   366 0000321C 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   367 0000321F 8805(FC060000)      <1>     mov byte [searchAttr], al
   368                              <1> .notExtended:
   369 00003225 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   370                              <1> .rename2EP:
   371                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   372 00003226 E85A3E0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   373 0000322B 723F                <1>     jc .badDisk
   374 0000322D E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   375 00003232 488D1D23D2FFFF      <1>     lea rbx, asciiCharProperties
   376 00003239 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   377 0000323E 56                  <1>     push rsi    ;rsi -> fcb.filename
   378                              <1> .nameCharCheck:
   379 0000323F AC                  <1>     lodsb   ;Get the char in al
   380 00003240 D7                  <1>     xlatb   ;Get the char signature in al
   381 00003241 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   382 00003243 7427                <1>     jz .badDisk
   383 00003245 FFC9                <1>     dec ecx
   384 00003247 75F6                <1>     jnz .nameCharCheck
   385 00003249 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   386 0000324A 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   387 0000324D E87ADFFFFF          <1>     call FCBToAsciiz
   388 00003252 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   389 00003253 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   390 00003256 7414                <1>     je .badDisk
   391 00003258 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   392 0000325C 55                  <1>     push rbp
   393 0000325D E8C5E0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   394 00003262 5D                  <1>     pop rbp
   395 00003263 7207                <1>     jc .badDisk
   396 00003265 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   397 0000326A EB03                <1>     jmp short .jiggleStack  ;Skip the error
   398                              <1> .badDisk:
   399 0000326C B003                <1>     mov al, errPnf  ;DOS does this... so will I
   400 0000326E F9                  <1>     stc
   401                              <1> .jiggleStack:
   402 0000326F 4889EC              <1>     mov rsp, rbp
   403 00003272 5D                  <1>     pop rbp
   404                              <1> .exit:
   405                              <1>     return
    13                              <2> %%_ret:
    14 00003273 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> storeZeroBasedDriveNumber:
   408                              <1> ;Input: al => 0 based drive letter
   409                              <1> ;       rdi -> Points to buffer to store the X: in
   410 00003274 FEC0                <1>     inc al
   411                              <1> storeOneBasedDriveNumber:
   412                              <1> ;Input: al => 1 based drive letter
   413                              <1> ;       rdi -> Points to buffer to store the X: in
   414 00003276 0440                <1>     add al, "@"
   415 00003278 B43A                <1>     mov ah, ":"
   416 0000327A 66AB                <1>     stosw
   417                              <1>     return
    13                              <2> %%_ret:
    14 0000327C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> isFCBExtended:
   420                              <1> ;Input: rdx = FCB ptr
   421                              <1> ;Output: rsi -> Drive letter of FCB
   422                              <1> ;        rdx -> FCB first byte
   423                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   424 0000327D 4889D6              <1>     mov rsi, rdx
   425 00003280 803EFF              <1>     cmp byte [rsi], -1
   426 00003283 7507                <1>     jne .notExtended
   427 00003285 4881C607000000      <1>     add rsi, exFcb.driveNum
   428                              <1> .notExtended:
   429 0000328C 4839F2              <1>     cmp rdx, rsi
   430                              <1>     return
    13                              <2> %%_ret:
    14 0000328F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> parseNameToFCB:
   433                              <1> ;rsi points to a command line to parse
   434                              <1> ;rdi points to a future unopened FCB
   435                              <1> ;al = parsing control bits. 
   436                              <1> ; al[0] = If set, leading filename separators are scanned off
   437                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   438                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   439                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   440                              <1> ;
   441                              <1> ;Separators include : . ; , = + TAB SPACE
   442                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   443 00003290 C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   444 00003297 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   445 00003299 A802                <1>     test al, 2  ;Set drive letter
   446 0000329B 7402                <1>     jz .skipDriveLetter
   447 0000329D 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   448                              <1> .skipDriveLetter:
   449 0000329F 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   450 000032A2 B908000000          <1>     mov ecx, 8  ;Copy Filename
   451 000032A7 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   452 000032A9 93                  <1>     xchg eax, ebx
   453 000032AA B020                <1>     mov al, " " ;Clear the field
   454 000032AC 7405                <1>     jz .clearFilenameField
   455 000032AE 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   456 000032B1 31C9                <1>     xor ecx, ecx
   457                              <1> .clearFilenameField:
   458 000032B3 F3AA                <1>     rep stosb
   459 000032B5 B903000000          <1>     mov ecx, 3
   460 000032BA F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   461 000032BD 7405                <1>     jz .clearExtensionField
   462 000032BF 4801CF              <1>     add rdi, rcx
   463 000032C2 31C9                <1>     xor ecx, ecx
   464                              <1> .clearExtensionField:
   465 000032C4 F3AA                <1>     rep stosb
   466 000032C6 91                  <1>     xchg eax, ecx
   467 000032C7 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   468 000032C8 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   469 000032CF F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   470 000032D2 740F                <1>     jz .dontScanOffTerm
   471 000032D4 E89F000000          <1>     call skipSeparators ;Skip leading separators
   472 000032D9 E8D73E0000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   473 000032DE 7508                <1>     jnz .skipIfNotTerminator
   474 000032E0 48FFC6              <1>     inc rsi
   475                              <1> .dontScanOffTerm:
   476 000032E3 E890000000          <1>     call skipSeparators  ;Skip separators
   477                              <1> .skipIfNotTerminator:
   478 000032E8 E8A03E0000          <1>     call uppercaseCharAtPtr 
   479 000032ED 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   480 000032EF 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   481 000032F2 7519                <1>     jne .skipSettingDriveLetter
   482 000032F4 48FFC6              <1>     inc rsi ;Goto next char
   483 000032F7 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   484 000032F9 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   485 000032FB 50                  <1>     push rax    ;Save the 1 based drive letter
   486 000032FC E8843D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   487 00003301 58                  <1>     pop rax
   488 00003302 7302                <1>     jnc .validDriveLetter
   489                              <1> .invalidDriveLetter:
   490 00003304 B2FF                <1>     mov dl, -1
   491                              <1> .validDriveLetter:
   492 00003306 AA                  <1>     stosb
   493 00003307 48FFC6              <1>     inc rsi ;Align pointers...
   494 0000330A 48FFCF              <1>     dec rdi 
   495                              <1> .skipSettingDriveLetter:
   496 0000330D 48FFCE              <1>     dec rsi
   497 00003310 48FFC7              <1>     inc rdi
   498                              <1> getFCBFilename:
   499                              <1> ;Input: rsi points to first char of filename
   500                              <1> ;       rdi points to storage buffer for filename
   501                              <1> ;       dl contains the signature if drive invalid
   502                              <1> ;Output:
   503                              <1> ;       Fields filled
   504                              <1> ;       al = Return signature
   505 00003313 B908000000          <1>     mov ecx, 8
   506 00003318 E815000000          <1>     call getFCBNameField
   507 0000331D 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   508 00003320 750D                <1>     jne .noExt
   509 00003322 B903000000          <1>     mov ecx, 3
   510 00003327 48FFC6              <1>     inc rsi ;Skip this char
   511 0000332A E814000000          <1>     call forceFCBNameField
   512                              <1> .noExt:
   513 0000332F 88D0                <1>     mov al, dl  ;Store the return signature
   514                              <1>     return
    13                              <2> %%_ret:
    14 00003331 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> 
   516                              <1> getFCBNameField:
   517                              <1> ;Checks if the field is appropriate before copying it
   518 00003332 E8563E0000          <1>     call uppercaseCharAtPtr
   519 00003337 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   520 00003339 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   521 0000333C 48FFCE              <1>     dec rsi ;Point to previous char
   522                              <1>     return
    13                              <2> %%_ret:
    14 0000333F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .okName:
   524 00003340 48FFCE              <1>     dec rsi ;Go back now a char
   525                              <1> forceFCBNameField:
   526                              <1> ;Forcefully copies the name from rsi to rdi
   527 00003343 E8453E0000          <1>     call uppercaseCharAtPtr
   528 00003348 7226                <1>     jc .terminatingSpace
   529 0000334A 750D                <1>     jnz .notSep
   530 0000334C F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   531 00003353 741B                <1>     jz .terminatingSpace
   532 00003355 3C20                <1>     cmp al, " "
   533 00003357 7517                <1>     jne .terminatingSpace
   534                              <1> .notSep:
   535 00003359 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   536 0000335C FFC9                <1>     dec ecx
   537 0000335E 3C2A                <1>     cmp al, "*" ;Big wildcard?
   538 00003360 7504                <1>     jne .notBigWildcard
   539 00003362 B03F                <1>     mov al, "?"
   540 00003364 F3AA                <1>     rep stosb
   541                              <1> .notBigWildcard:
   542 00003366 AA                  <1>     stosb   ;Stores the uppercased char
   543 00003367 3C3F                <1>     cmp al, "?"
   544 00003369 75D8                <1>     jne forceFCBNameField
   545 0000336B 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   546 0000336E EBD3                <1>     jmp short forceFCBNameField
   547                              <1> .terminatingSpace:
   548 00003370 B020                <1>     mov al, " "
   549 00003372 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   550 00003374 48FFCE              <1>     dec rsi     ;Point back to terminating char
   551                              <1>     return
    13                              <2> %%_ret:
    14 00003377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> skipSeparators:
   554                              <1> ;Input: rsi -> String 
   555                              <1> ;Output: rsi -> First non separator type char
   556 00003378 AC                  <1>     lodsb
   557 00003379 E8463E0000          <1>     call isCharSeparator
   558 0000337E 74F8                <1>     jz skipSeparators
   559 00003380 48FFCE              <1>     dec rsi
   560                              <1>     return
    13                              <2> %%_ret:
    14 00003383 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003384 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003385 488D0D810E0000      <1>     lea rcx, createMain
    12 0000338C C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003393 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003395 BB16000000          <1>     mov ebx, dirInclusive
    21 0000339A F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 000033A1 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 000033A4 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 000033AA 488D0D320D0000      <1>     lea rcx, openMain  
    25 000033B1 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 000033B2 4889D6              <1>     mov rsi, rdx
    28 000033B5 E8873E0000          <1>     call checkPathspecOK
    29 000033BA 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 000033BC 58                  <1>     pop rax
    32 000033BD B805000000          <1>     mov eax, errAccDen
    33 000033C2 E969410000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 000033C7 E819410000          <1>     call dosCrit1Enter
    36 000033CC E8351A0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 000033D1 E819410000          <1>     call dosCrit1Exit
    38 000033D6 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 000033DC E85D190000          <1>     call setCurrentSFT
    41 000033E1 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 000033E8 E8E21A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 000033ED 0F82BC000000        <1>     jc .exitBad
    44 000033F3 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 000033FA 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00003401 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00003408 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 0000340A 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 0000340D 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00003414 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00003415 E88EDEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 0000341A 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 0000341B 488D05C10C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00003422 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00003429 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 0000342B 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 0000342E 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 00003430 F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00003437 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 00003439 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 0000343F 30C9                <1>     xor cl, cl
    69 00003441 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 00003447 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 00003449 58                  <1>     pop rax
    73 0000344A B802000000          <1>     mov eax, errFnf 
    74 0000344F E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 00003454 58                  <1>     pop rax
    77 00003455 B803000000          <1>     mov eax, errPnf
    78 0000345A E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 0000345F 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    82 00003461 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 00003464 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 00003465 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1>     ;al means openmode here
    86 00003467 A880                <1>     test al, 80h    ;No Inherit bit set?
    87 00003469 7407                <1>     jz .callProc
    88 0000346B 247F                <1>     and al, 7Fh     ;Clear this bit
    89 0000346D B900100000          <1>     mov ecx, devNoInherit
    90                              <1> .callProc:
    91 00003472 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 00003478 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 0000347E 51                  <1>     push rcx    ;Save the device word 
    94 0000347F FFD3                <1>     call rbx    ;Enter with open mode in 
    95 00003481 59                  <1>     pop rcx
    96 00003482 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 00003489 7228                <1>     jc .exitBad2
    98 0000348B 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 00003490 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 00003494 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 0000349B FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 000034A1 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 000034A9 FF                  <1>
   103 000034AA E973400000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 000034AF FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 000034B0 5B                  <1>     pop rbx ;Pop the word from the stack
   107 000034B1 EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 000034B3 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 000034BA C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 000034BD 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 000034C4 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 000034C9 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 000034D1 FF                  <1>
   116 000034D2 E959400000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 000034D7 E8091A0000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 000034DC 0F824E400000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 000034E2 E857180000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 000034E7 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   124 000034EC 740A                <1>     je .killHdl ;always kill the handle!
   125                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   126 000034EE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 000034F2 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 000034F4 3C70                <1>     cmp al, netFCBShare
   129 000034F6 7408                <1>     je .notNetFCB
   130                              <1> .killHdl:
   131 000034F8 E89D190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 000034FD C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .notNetFCB:
   134 00003500 E829100000          <1>     call closeMain  ;Call close main!
   135 00003505 0F8225400000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 0000350B B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 00003510 E90D400000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 00003515 488D35DF100000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 0000351C E8C4190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 00003521 0F8209400000        <1>     jc extErrExit   ;Error code in al and exit
   144 00003527 E812180000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 0000352C 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 0000352E FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 00003534 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 0000353B FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 0000353D 8F05(17040000)      <1>     pop qword [currentDTA]
   150 00003543 0F82E73F0000        <1>     jc extErrExit   ;Error code in al and exit
   151 00003549 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 0000354B E9C93F0000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 00003550 488D35FA130000      <1>     lea rsi, writeBytes
   156 00003557 E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 0000355C BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 00003561 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 00003568 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 0000356B 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 00003571 4889D6              <1>     mov rsi, rdx
   166 00003574 E8C83C0000          <1>     call checkPathspecOK
   167 00003579 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 0000357B 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 0000357D F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 00003584 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 00003586 B805000000          <1>     mov eax, errAccDen
   174 0000358B E9A03F0000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 00003590 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 00003597 52                  <1>     push rdx
   178 00003598 E80BDDFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 0000359D 5A                  <1>     pop rdx
   180 0000359E 0F828C3F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 000035A4 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 000035AB 0F857F3F0000        <1>     jnz extErrExit
   184 000035B1 E8710A0000          <1>     call outerDeleteMain
   185 000035B6 0F82743F0000        <1>     jc extErrExit
   186 000035BC E9613F0000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;Input: ecx=0, edx=Position to seek to
   190                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   191                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   192                              <1> ; use a 64 bit file pointer... They can try though!
   193                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   194                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   195 000035C1 E81F190000          <1>     call getSFTPtr
   196 000035C6 0F82643F0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   197 000035CC 3C03                <1>     cmp al, 3
   198 000035CE 720A                <1>     jb .validFunction
   199 000035D0 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   200 000035D5 E9563F0000          <1>     jmp extErrExit
   201                              <1> .validFunction:
   202 000035DA 3C01                <1>     cmp al, 1
   203 000035DC 771A                <1>     ja .seekend
   204 000035DE 7203                <1>     jb .seekset
   205                              <1> ;Here we are at seekcur, seek from current (signed)
   206 000035E0 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   207                              <1> .seekset:
   208                              <1> ;Seek from the start (unsigned)
   209 000035E3 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   210 000035E6 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   211                              <1>     ;We return the file position in eax anyway!
   212                              <1> .seekExit:
   213 000035E8 E8743A0000          <1>     call getUserRegs    ;Get user regs in rsi
   214 000035ED 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   215 000035F0 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   216 000035F3 E9213F0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   217                              <1> .seekend:
   218                              <1> ;Here we are at seekend, seek from end (signed)
   219 000035F8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   220 000035FE 7505                <1>     jnz .netCheck
   221                              <1> .proceedDisk:
   222 00003600 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 00003603 EBDE                <1>     jmp short .seekset
   224                              <1> .netCheck:
   225 00003605 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   226 0000360B 75F3                <1>     jnz .proceedDisk
   227 0000360D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   228                              <1>     ;Check it's share mode
   229 00003611 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   230 00003616 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   231 0000361B 7407                <1>     je .netSeek
   232 0000361D 3D30000000          <1>     cmp eax, denyReadShare
   233 00003622 75DC                <1>     jne .proceedDisk
   234                              <1> .netSeek:
   235 00003624 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   236 00003629 CD2F                <1>     int 2Fh
   237 0000362B 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   238 0000362D E9FE3E0000          <1>     jmp extErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   242 00003632 3C01                <1>     cmp al, 1
   243 00003634 761F                <1>     jbe .subFuncOk
   244 00003636 B801000000          <1>     mov eax, errInvFnc
   245                              <1> .chmodError:
   246                              <1> ;Call with ax = errorcode
   247 0000363B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   248 00003642 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   249 00003649 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   250 00003650 E9DB3E0000          <1>     jmp extErrExit
   251                              <1> .subFuncOk:
   252 00003655 4889D6              <1>     mov rsi, rdx
   253 00003658 89C3                <1>     mov ebx, eax    ;Store function code in bl
   254 0000365A 53                  <1>     push rbx
   255 0000365B 51                  <1>     push rcx
   256 0000365C E8E03B0000          <1>     call checkPathspecOK
   257 00003661 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   258                              <1> .badPath:
   259 00003663 59                  <1>     pop rcx
   260 00003664 5B                  <1>     pop rbx
   261 00003665 B805000000          <1>     mov eax, errAccDen
   262 0000366A EBCF                <1>     jmp short .chmodError
   263                              <1> .pathOk:
   264 0000366C E8AA3C0000          <1>     call checkPathNet 
   265 00003671 74F0                <1>     jz .badPath ;Or Net paths
   266 00003673 E8843C0000          <1>     call scanPathWC
   267 00003678 72E9                <1>     jc .badPath ;Dont allow wildcards
   268 0000367A 488D3D(1E050000)    <1>     lea rdi, buffer1
   269 00003681 52                  <1>     push rdx
   270 00003682 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   271 00003689 E81ADCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   272 0000368E 5A                  <1>     pop rdx
   273 0000368F 59                  <1>     pop rcx
   274 00003690 5B                  <1>     pop rbx
   275 00003691 0F82993E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   276                              <1>     ;In the case of a wildcard, recall this will return the first file
   277 00003697 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   278 0000369E 759B                <1>     jnz .chmodError
   279                              <1> 
   280 000036A0 E82F390000          <1>     call testCDSNet
   281 000036A5 730C                <1>     jnc .notNet
   282 000036A7 750A                <1>     jnz .notNet ;This type of net ok
   283 000036A9 B805000000          <1>     mov eax, errAccDen
   284 000036AE E97D3E0000          <1>     jmp extErrExit
   285                              <1> .notNet:
   286 000036B3 84DB                <1>     test bl, bl
   287 000036B5 7526                <1>     jnz .setAttribs
   288                              <1>     ;Get attribs here
   289 000036B7 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 000036BD 7412                <1>     jz .getDiskAttribs
   291 000036BF B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   292 000036C4 CD2F                <1>     int 2Fh
   293 000036C6 0F82643E0000        <1>     jc extErrExit
   294 000036CC E9513E0000          <1>     jmp extGoodExit
   295                              <1> .getDiskAttribs:
   296 000036D1 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   297 000036D8 E9453E0000          <1>     jmp extGoodExit
   298                              <1> 
   299                              <1> .setAttribs:
   300                              <1>     ;Set attribs here
   301 000036DD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 000036E3 7417                <1>     jz .setDiskAttribs
   303 000036E5 0FB7C9              <1>     movzx ecx, cx
   304 000036E8 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   305 000036E9 B80E110000          <1>     mov eax, 110Eh
   306 000036EE CD2F                <1>     int 2Fh
   307 000036F0 59                  <1>     pop rcx
   308 000036F1 0F82393E0000        <1>     jc extErrExit
   309 000036F7 E9263E0000          <1>     jmp extGoodExit
   310                              <1> .setDiskAttribs:
   311 000036FC E8B4080000          <1>     call checkNoOpenHandlesForShareAction
   312 00003701 730A                <1>     jnc .okToSet
   313 00003703 B820000000          <1>     mov eax, errShrVio
   314 00003708 E9233E0000          <1>     jmp extErrExit
   315                              <1> .okToSet:
   316 0000370D E8D33D0000          <1>     call dosCrit1Enter
   317 00003712 E85BEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   318 00003717 722D                <1>     jc .setErrorNoFlush
   319 00003719 F6C118              <1>     test cl, volLabelFile | directoryFile
   320 0000371C 740A                <1>     jz .set
   321 0000371E B805000000          <1>     mov eax, errAccDen
   322 00003723 E91E000000          <1>     jmp .setErrorNoFlush
   323                              <1> .set:
   324 00003728 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   325 0000372B 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   326 0000372E 08E9                <1>     or cl, ch
   327 00003730 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   328 00003733 E8E3CFFFFF          <1>     call flushAllBuffersForDPB
   329 00003738 720C                <1>     jc .setError
   330 0000373A E8B03D0000          <1>     call dosCrit1Exit
   331 0000373F 31C0                <1>     xor eax, eax
   332 00003741 E9DC3D0000          <1>     jmp extGoodExit
   333                              <1> .setError:
   334                              <1> 
   335                              <1> .setErrorNoFlush:
   336 00003746 E8A43D0000          <1>     call dosCrit1Exit
   337 0000374B E9E03D0000          <1>     jmp extErrExit
   338                              <1> 
   339                              <1> duplicateHandle:   ;ah = 45h, handle function
   340                              <1> ;Input: bx = Handle to duplicate
   341                              <1> ;Output: If ok then ax = New handle
   342 00003750 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   343 00003753 E877170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   344                              <1> .duplicateCommon:
   345 00003758 0F82D23D0000        <1>     jc extErrExit   ;Exit if no space
   346 0000375E 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   347 00003761 93                  <1>     xchg eax, ebx
   348 00003762 E87E170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   349 00003767 0F82C33D0000        <1>     jc extErrExit
   350 0000376D 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   351 00003770 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   352 00003776 7505                <1>     jnz .netFile
   353 00003778 E81D0A0000          <1>     call openDriverMux
   354                              <1> .netFile:
   355 0000377D E818170000          <1>     call getJFTPtr
   356 00003782 8A1F                <1>     mov bl, byte [rdi]
   357 00003784 881E                <1>     mov byte [rsi], bl
   358 00003786 E9973D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   359                              <1> 
   360                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   361                              <1> ;Input: bx = Handle to duplicate
   362                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   363                              <1>     ;First we close cx if it exists
   364 0000378B 0FB7C9              <1>     movzx ecx, cx
   365 0000378E 53                  <1>     push rbx
   366 0000378F 51                  <1>     push rcx
   367 00003790 89CB                <1>     mov ebx, ecx
   368 00003792 E840FDFFFF          <1>     call closeFileHdl   ;Close handle 
   369 00003797 5B                  <1>     pop rbx
   370 00003798 58                  <1>     pop rax
   371 00003799 E8FC160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   372 0000379E EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   373                              <1> 
   374                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   375                              <1> ;Input: cx = Search Attributes, cl only used
   376                              <1> ;       rdx = Ptr to path to file to look for
   377                              <1> ;       al = Document as needing to be 0 for now
   378                              <1> ;Return:
   379                              <1> ;Data in the DTA or error through AX with CF=CY
   380                              <1> ;CAVEATS!
   381                              <1> ;DTA:attribFnd = 40h => Char dev
   382                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   383 000037A0 880D(FC060000)      <1>     mov byte [searchAttr], cl
   384 000037A6 4889D6              <1>     mov rsi, rdx
   385 000037A9 E8933A0000          <1>     call checkPathspecOK
   386 000037AE 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   387 000037B0 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   388                              <1> .badPath:
   389 000037B2 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   390 000037B7 E9743D0000          <1>     jmp extErrExit
   391                              <1> .pathspecOk:
   392 000037BC FF35(17040000)      <1>     push qword [currentDTA]
   393 000037C2 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   394 000037C9 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   395 000037D0 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   396 000037D7 E8CCDAFFFF          <1>     call getFilePath
   397                              <1> .findfileExit:
   398 000037DC 8F05(17040000)      <1>     pop qword [currentDTA]
   399 000037E2 0F82483D0000        <1>     jc extErrExit
   400 000037E8 488D3D(2F060000)    <1>     lea rdi, dosffblock
   401 000037EF 57                  <1>     push rdi
   402 000037F0 E817DAFFFF          <1>     call setupFFBlock
   403 000037F5 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   404 000037F6 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   405 000037FD B92B000000          <1>     mov ecx, ffBlock_size
   406 00003802 F3A4                <1>     rep movsb   ;Copy the whole block. 
   407                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   408 00003804 31C0                <1>     xor eax, eax    ;Return value
   409 00003806 E9173D0000          <1>     jmp extGoodExit ;Exit well
   410                              <1> 
   411                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   412                              <1> ;Input: DTA has the find first block from the previous search
   413 0000380B 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   414 00003812 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   415 00003819 B92B000000          <1>     mov ecx, ffBlock_size
   416 0000381E F3A4                <1>     rep movsb
   417 00003820 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   418 00003826 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   419 0000382D 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   420 00003834 E8A5D5FFFF          <1>     call findNextMain
   421 00003839 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   422                              <1> 
   423                              <1> renameFile:        ;ah = 56h
   424                              <1> ;Input: rdx -> Filespec to rename
   425                              <1> ;       rdi -> New filespec
   426                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   427 0000383B 4889D6              <1>     mov rsi, rdx
   428 0000383E BB16000000          <1>     mov ebx, dirInclusive
   429 00003843 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   430 0000384A 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   431 0000384D 880D(FC060000)      <1>     mov byte [searchAttr], cl
   432                              <1>     ;Step 0, verify both paths provided are valid
   433 00003853 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   434 00003858 7249                <1>     jc .accDenError
   435 0000385A 56                  <1>     push rsi
   436 0000385B 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   437 0000385E E84A000000          <1>     call .renamePathCheck
   438 00003863 5E                  <1>     pop rsi
   439 00003864 723D                <1>     jc .accDenError
   440                              <1>     ;Now we canonicalise the filenames to make life easy
   441 00003866 56                  <1>     push rsi
   442 00003867 4889FE              <1>     mov rsi, rdi
   443 0000386A 488D3D(9E050000)    <1>     lea rdi, buffer2
   444 00003871 E8B1DAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   445 00003876 5E                  <1>     pop rsi
   446 00003877 722A                <1>     jc .accDenError
   447                              <1>     ;Now test if first file exists.
   448 00003879 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   449 0000387F 8F05(26060000)      <1>     pop qword [fname2Ptr]
   450 00003885 488D3D(1E050000)    <1>     lea rdi, buffer1
   451 0000388C E896DAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   452 00003891 7210                <1>     jc .accDenError 
   453 00003893 E880030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   454 00003898 0F82923C0000        <1>     jc extErrExit
   455 0000389E E97F3C0000          <1>     jmp extGoodExit
   456                              <1> .accDenError:
   457 000038A3 B805000000          <1>     mov eax, errAccDen
   458 000038A8 E9833C0000          <1>     jmp extErrExit
   459                              <1> .renamePathCheck:
   460                              <1> ;Checks if the pathspec in rsi is OK
   461 000038AD 56                  <1>     push rsi
   462 000038AE 57                  <1>     push rdi
   463 000038AF E88D390000          <1>     call checkPathspecOK
   464 000038B4 5F                  <1>     pop rdi
   465 000038B5 5E                  <1>     pop rsi
   466 000038B6 730D                <1>     jnc .pathOk     ;Path ok 
   467 000038B8 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   468                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   469 000038BA F605(02070000)FF    <1>     test byte [dosInvoke], -1
   470 000038C1 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   471                              <1> .badPath:
   472 000038C3 F9                  <1>     stc
   473                              <1>     return
    13                              <2> %%_ret:
    14 000038C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .pathOk:
   475 000038C5 F8                  <1>     clc
   476                              <1>     return
    13                              <2> %%_ret:
    14 000038C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> getSetFileDateTime: ;ah = 57h
   479 000038C7 3C01                <1>     cmp al, 1
   480 000038C9 760A                <1>     jbe .oksubfun
   481 000038CB B801000000          <1>     mov eax, errInvFnc
   482 000038D0 E95B3C0000          <1>     jmp extErrExit
   483                              <1> .oksubfun:
   484 000038D5 E80B160000          <1>     call getSFTPtr  ;Preserves al unless error returned
   485 000038DA 0F82503C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   486 000038E0 3C01                <1>     cmp al, 1
   487 000038E2 7426                <1>     je .setTimeDate
   488                              <1>     ;Here we get the Time/Date
   489 000038E4 E8FC3B0000          <1>     call dosCrit1Enter
   490 000038E9 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   491 000038ED 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   492 000038F1 E8F93B0000          <1>     call dosCrit1Exit
   493 000038F6 E866370000          <1>     call getUserRegs
   494 000038FB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   495 000038FF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   496 00003903 31C0                <1>     xor eax, eax
   497 00003905 E9183C0000          <1>     jmp extGoodExit
   498                              <1> .setTimeDate:
   499                              <1>     ;Here we set the Time/Date
   500 0000390A E8D63B0000          <1>     call dosCrit1Enter
   501 0000390F 66894F13            <1>     mov word [rdi + sft.wTime], cx
   502 00003913 66895715            <1>     mov word [rdi + sft.wDate], dx
   503 00003917 31C0                <1>     xor eax, eax
   504 00003919 FF15(2F010000)      <1>     call qword [updateDirShare]
   505                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   506                              <1>     ; further change the file time since we have manually overridden it 
   507                              <1>     ; with the time specified
   508 0000391F 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;Clear flag to sync
   509 00003925 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], blokNoDTonClose    ;Force it to this time
   510 0000392B E8BF3B0000          <1>     call dosCrit1Exit
   511 00003930 31C0                <1>     xor eax, eax
   512 00003932 E9EB3B0000          <1>     jmp extGoodExit
   513                              <1> 
   514                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   515                              <1> ;Uses the clock to do it's bidding
   516                              <1> ;cx = file attribute 
   517                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   518                              <1> ;       filename
   519 00003937 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   520 0000393C 740A                <1>     jz .validAttribs
   521 0000393E B805000000          <1>     mov eax, errAccDen
   522 00003943 E9E83B0000          <1>     jmp extErrExit
   523                              <1> .validAttribs:
   524 00003948 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   525 0000394C 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   526 0000394F B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   527 00003954 31C0                <1>     xor eax, eax
   528 00003956 4889D7              <1>     mov rdi, rdx
   529 00003959 F2AE                <1>     repne scasb
   530 0000395B 85C9                <1>     test ecx, ecx
   531 0000395D 750A                <1>     jnz .nullFnd
   532                              <1>     ;Bad path
   533 0000395F B803000000          <1>     mov eax, errPnf
   534 00003964 E9C73B0000          <1>     jmp extErrExit
   535                              <1> .nullFnd:
   536 00003969 48FFCF              <1>     dec rdi
   537 0000396C 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   538 00003970 E80D380000          <1>     call swapPathSeparator
   539 00003975 7403                <1>     jz .pathsepFnd
   540                              <1>     ;If no pathsep found, force one at rdi
   541 00003977 B05C                <1>     mov al, "\"
   542 00003979 AA                  <1>     stosb
   543                              <1> .pathsepFnd:
   544 0000397A 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   545                              <1> .fileCreateLoop:
   546 0000397D 55                  <1>     push rbp
   547 0000397E E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   548 00003983 5D                  <1>     pop rbp
   549 00003984 0FB7C1              <1>     movzx eax, cx
   550 00003987 0FB7D2              <1>     movzx edx, dx
   551 0000398A C1E010              <1>     shl eax, 10h
   552 0000398D 09D0                <1>     or eax, edx  ;Add the bits of dx too
   553 0000398F E831000000          <1>     call .writeNybbles
   554 00003994 31C0                <1>     xor eax, eax
   555 00003996 AA                  <1>     stosb   ;Store terminating null
   556 00003997 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   557 0000399A 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   558 0000399D 55                  <1>     push rbp
   559 0000399E E85C000000          <1>     call createNewFile
   560 000039A3 5D                  <1>     pop rbp
   561 000039A4 0F83783B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   562 000039AA 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   563 000039B1 3D05000000          <1>     cmp eax, errAccDen
   564 000039B6 74C5                <1>     je .fileCreateLoop
   565 000039B8 3D50000000          <1>     cmp eax, errFilExist
   566 000039BD 74BE                <1>     je .fileCreateLoop
   567 000039BF F9                  <1>     stc
   568 000039C0 E96B3B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   569                              <1> .writeNybbles:
   570                              <1> ;Write the nybbles of eax at rdi
   571 000039C5 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   572                              <1> .wnLp:
   573 000039CA C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   574 000039CD 50                  <1>     push rax
   575 000039CE 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   576 000039D3 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   577 000039D8 3D39000000          <1>     cmp eax, '9'
   578 000039DD 7605                <1>     jbe .notExtDigit
   579 000039DF 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   580                              <1> .notExtDigit:
   581 000039E4 AA                  <1>     stosb   ;Store the digit
   582 000039E5 58                  <1>     pop rax
   583 000039E6 FFC9                <1>     dec ecx
   584 000039E8 75E0                <1>     jnz .wnLp
   585                              <1>     return
    13                              <2> %%_ret:
    14 000039EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> .uniqueTimeGet:
   588 000039EB E870F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   589 000039F0 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   590 000039F7 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   591                              <1>     return
    13                              <2> %%_ret:
    14 000039FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> createNewFile:     ;ah = 5Bh
   594 000039FF 51                  <1>     push rcx    ;Save file attributes on stack
   595 00003A00 488D0DF1070000      <1>     lea rcx, createNewMain
   596 00003A07 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   597 00003A0E E99FF9FFFF          <1>     jmp openFileHdl.openCommon
   598                              <1> 
   599                              <1> lockUnlockFile:    ;ah = 5Ch
   600                              <1> ;ah = 5Ch
   601                              <1> ;al = subfunction
   602                              <1> ;       00h lock region of file
   603                              <1> ;       01h unlock region of file
   604                              <1> ;ebx = file handle
   605                              <1> ;ecx = start offset of region within file
   606                              <1> ;edi = length of region in bytes
   607 00003A13 3C01                <1>     cmp al, 1
   608 00003A15 7757                <1>     ja .badFunction
   609 00003A17 57                  <1>     push rdi
   610 00003A18 E8E2140000          <1>     call derefSFTPtr
   611 00003A1D 730B                <1>     jnc .validHdl
   612 00003A1F 58                  <1>     pop rax ;Discard the qword on the stack
   613 00003A20 B806000000          <1>     mov eax, errBadHdl
   614 00003A25 E9063B0000          <1>     jmp extErrExit
   615                              <1> .validHdl:
   616 00003A2A 84C0                <1>     test al, al ;Check if al = 0
   617 00003A2C 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   618 00003A2D 7424                <1>     jz .lockFileRegion
   619 00003A2F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   620 00003A35 740B                <1>     jz .unlockShare ;Jump if a local file only
   621 00003A37 50                  <1>     push rax
   622 00003A38 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   623 00003A3D CD2F                <1>     int 2Fh
   624 00003A3F 5B                  <1>     pop rbx
   625 00003A40 EB06                <1>     jmp short .exitSelect
   626                              <1> .unlockShare:
   627 00003A42 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   628                              <1> .exitSelect:
   629 00003A48 0F82E23A0000        <1>     jc extErrExit
   630 00003A4E E9CF3A0000          <1>     jmp extGoodExit
   631                              <1> .lockFileRegion:
   632 00003A53 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   633 00003A59 740B                <1>     jz .lockShare   ;Jump if a local file only
   634 00003A5B 50                  <1>     push rax
   635 00003A5C B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   636 00003A61 CD2F                <1>     int 2Fh
   637 00003A63 5B                  <1>     pop rbx
   638 00003A64 EBE2                <1>     jmp short .exitSelect
   639                              <1> .lockShare:
   640 00003A66 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   641 00003A6C EBDA                <1>     jmp short .exitSelect
   642                              <1> .badFunction:
   643 00003A6E B801000000          <1>     mov eax, errInvFnc
   644 00003A73 668905(0B040000)    <1>     mov word [errorExCde], ax
   645 00003A7A E9B13A0000          <1>     jmp extErrExit
   646                              <1> 
   647                              <1> setHandleCount:    ;ah = 67h
   648                              <1> ;Input: bx = Size of new file handle table for process
   649                              <1> ;Output: CF=NC -> Ok to make more handles
   650                              <1> ;        CF=CY -> ax = Error code
   651                              <1> ;Five cases to consider:
   652                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   653                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   654                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   655                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   656                              <1> ;   Special case below, cannot be enacted directly by caller.
   657                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   658 00003A7F 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   659 00003A82 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   660 00003A89 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   661 00003A8D 7765                <1>     ja short .moreHdlsReq
   662 00003A8F 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   663 00003A94 771A                <1>     ja short .reduceExternal
   664                              <1>     ;Here if 20 handles or less requested
   665 00003A96 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   666 00003A9C 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   667 00003A9E 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   668 00003AA0 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   669                              <1> .exitGood:
   670 00003AA6 E9773A0000          <1>     jmp extGoodExit
   671                              <1> .exitBad:
   672 00003AAB E9803A0000          <1>     jmp extErrExit
   673                              <1> .reduceExternal:
   674                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   675                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   676                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   677                              <1> ; and failing that, it will free it and then allocate a new block.
   678 00003AB0 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   679 00003AB4 E8E8000000          <1>     call .checkOpenHandles
   680 00003AB9 72F0                <1>     jc short .exitBad
   681                              <1>     ;Recall ebx has the numebr of handles here
   682 00003ABB E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   683 00003AC0 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   684 00003AC4 EBE0                <1>     jmp short .exitGood
   685                              <1> .reduceFree:
   686                              <1> ;Entered once we know that we have an external block
   687                              <1> ;Now we close all handles above JFT size
   688 00003AC6 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   689 00003ACA 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   690 00003ACD E8CF000000          <1>     call .checkOpenHandles
   691 00003AD2 72D7                <1>     jc short .exitBad
   692 00003AD4 BB14000000          <1>     mov ebx, dfltJFTsize
   693 00003AD9 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   694                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   695 00003ADB E8B8000000          <1>     call .copyBlock
   696                              <1>     ;Now we can free the old block
   697 00003AE0 4989F0              <1>     mov r8, rsi
   698 00003AE3 53                  <1>     push rbx
   699 00003AE4 E8551B0000          <1>     call freeMemory
   700 00003AE9 5B                  <1>     pop rbx
   701 00003AEA 72BF                <1>     jc short .exitBad
   702 00003AEC 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   703 00003AF0 31C0                <1>     xor eax, eax
   704                              <1> .exitGood2:
   705 00003AF2 EBB2                <1>     jmp short .exitGood
   706                              <1> .moreHdlsReq:
   707 00003AF4 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   708 00003AFA 7507                <1>     jne short .okToExpand
   709 00003AFC B801000000          <1>     mov eax, errInvFnc
   710                              <1> .exitBad2:
   711 00003B01 EBA8                <1>     jmp short .exitBad
   712                              <1> .okToExpand:
   713                              <1> ;Need to check if we are external and reallocating. 
   714                              <1> ;   If we are, can we realloc or do we need to free and save?
   715 00003B03 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   716 00003B09 762E                <1>     jbe short .moreFromJFT
   717 00003B0B 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   718 00003B0F E83C000000          <1>     call .reallocBlock
   719 00003B14 7390                <1>     jnc short .exitGood
   720 00003B16 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   721 00003B1B 728E                <1>     jc short .exitBad
   722 00003B1D 4989F0              <1>     mov r8, rsi ;Free the source block
   723 00003B20 53                  <1>     push rbx
   724 00003B21 57                  <1>     push rdi    ;Save the new pointer here
   725 00003B22 55                  <1>     push rbp
   726 00003B23 E8161B0000          <1>     call freeMemory
   727 00003B28 5D                  <1>     pop rbp
   728 00003B29 5F                  <1>     pop rdi
   729 00003B2A 5B                  <1>     pop rbx
   730 00003B2B 7317                <1>     jnc short .freeOk ;Free'd the original block
   731 00003B2D 50                  <1>     push rax    ;Save error code on stack
   732 00003B2E 4989F8              <1>     mov r8, rdi ;Free the new block
   733 00003B31 E8081B0000          <1>     call freeMemory
   734 00003B36 58                  <1>     pop rax
   735 00003B37 EBC8                <1>     jmp short .exitBad2
   736                              <1> .moreFromJFT:
   737 00003B39 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   738 00003B3D E826000000          <1>     call .getBlock
   739 00003B42 72BD                <1>     jc short .exitBad2
   740                              <1> .freeOk:
   741 00003B44 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   742 00003B48 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   743 00003B4C 31C0                <1>     xor eax, eax
   744 00003B4E EBA2                <1>     jmp short .exitGood2
   745                              <1> .reallocBlock:
   746                              <1> ;Input:
   747                              <1> ;   rsi -> Source block to reallocate
   748                              <1> ;   ebx = Number of handles
   749                              <1> ;   rbp -> Current PSP
   750                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   751                              <1> ;                 ebx = Number of handles
   752                              <1> ;        CF=CY => Error, EAX has error code
   753 00003B50 56                  <1>     push rsi ;Save external pointer on stack
   754 00003B51 53                  <1>     push rbx    ;Save number of handles on stack
   755 00003B52 55                  <1>     push rbp
   756 00003B53 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   757 00003B59 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   758 00003B5C 4989F0              <1>     mov r8, rsi
   759 00003B5F E8E21B0000          <1>     call reallocMemory
   760 00003B64 5D                  <1>     pop rbp
   761 00003B65 5B                  <1>     pop rbx
   762 00003B66 5E                  <1>     pop rsi ;Get external pointer back in rsi
   763                              <1>     return
    13                              <2> %%_ret:
    14 00003B67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .getBlock:
   765                              <1> ;rsi -> Source block for copy 
   766                              <1> ;ebx = Number of new handles
   767                              <1> ;Output: rsi and ebx as before
   768                              <1> ;        rdi -> New block
   769                              <1> ;IF CF=CY, bad exit
   770 00003B68 53                  <1>     push rbx    ;bx has the number of handles we want
   771 00003B69 56                  <1>     push rsi
   772 00003B6A 55                  <1>     push rbp
   773 00003B6B 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   774 00003B71 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   775 00003B74 89D9                <1>     mov ecx, ebx
   776 00003B76 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   777 00003B79 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   778 00003B7A E8BB180000          <1>     call allocateMemory ;Allocate memory 
   779 00003B7F 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   780 00003B80 5D                  <1>     pop rbp ;Get the PSP pointer back
   781 00003B81 5E                  <1>     pop rsi ;Get the source pointer back
   782 00003B82 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   783                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B83 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   784 00003B85 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   785 00003B88 57                  <1>     push rdi
   786 00003B89 31C0                <1>     xor eax, eax
   787 00003B8B FFC8                <1>     dec eax
   788 00003B8D F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   789 00003B8F 5F                  <1>     pop rdi
   790 00003B90 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   791 00003B92 E801000000          <1>     call .copyBlock ;Copy all the handles over
   792                              <1>     return
    13                              <2> %%_ret:
    14 00003B97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .copyBlock:
   794                              <1> ;Input: rsi -> Source block
   795                              <1> ;       rdi -> Destination block
   796                              <1> ;       ecx = Number of handles to copy
   797 00003B98 56                  <1>     push rsi
   798 00003B99 57                  <1>     push rdi
   799 00003B9A 51                  <1>     push rcx
   800 00003B9B F3A4                <1>     rep movsb
   801 00003B9D 59                  <1>     pop rcx
   802 00003B9E 5F                  <1>     pop rdi
   803 00003B9F 5E                  <1>     pop rsi
   804                              <1>     return
    13                              <2> %%_ret:
    14 00003BA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> .checkOpenHandles:
   806                              <1> ;Checks for open handles in the range that is to be freed.
   807                              <1> ;If any found, error exit
   808                              <1> ;Input: rsi -> Where to start searching
   809 00003BA1 56                  <1>     push rsi
   810 00003BA2 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   811                              <1> .cohLoop:
   812 00003BA6 803EFF              <1>     cmp byte [rsi], -1
   813 00003BA9 7509                <1>     jne .checkOpenHandlesBadExit
   814 00003BAB 48FFC6              <1>     inc rsi
   815 00003BAE FFC9                <1>     dec ecx
   816 00003BB0 75F4                <1>     jnz .cohLoop
   817 00003BB2 5E                  <1>     pop rsi
   818                              <1>     return
    13                              <2> %%_ret:
    14 00003BB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> .checkOpenHandlesBadExit:
   820 00003BB4 B804000000          <1>     mov eax, errNhl
   821 00003BB9 F9                  <1>     stc
   822 00003BBA 5E                  <1>     pop rsi
   823                              <1>     return
    13                              <2> %%_ret:
    14 00003BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   826                              <1>     ;Input: bx = File to flush
   827 00003BBC E824130000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   828 00003BC1 0F8269390000        <1>     jc extErrExit
   829 00003BC7 E872110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   830                              <1>     ;Now we check if the device is a char, disk or net file and commit
   831 00003BCC E811000000          <1>     call commitMain
   832 00003BD1 0F8259390000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   833                              <1> .exitOk:
   834 00003BD7 30C0                <1>     xor al, al
   835 00003BD9 E883340000          <1>     call getUserRegs
   836 00003BDE 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   837                              <1>     return
    13                              <2> %%_ret:
    14 00003BE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   838                              <1> 
   839                              <1> ;-----------------------------------:
   840                              <1> ;       Main File IO Routines       :
   841                              <1> ;-----------------------------------:
   842                              <1> commitMain:
   843                              <1> ;Commits the current SFT 
   844 00003BE2 E85F110000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   845 00003BE7 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   846 00003BEB F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   847                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003BF1 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   848 00003BF3 F7C300800000        <1>     test ebx, devRedirDev
   849 00003BF9 7408                <1>     jz .notNet
   850                              <1>     ;Commit file net redir call and exit
   851 00003BFB B807110000          <1>     mov eax, 1107h
   852 00003C00 CD2F                <1>     int 2Fh
   853                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003C02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .notNet:
   855 00003C03 E8DD380000          <1>     call dosCrit1Enter
   856 00003C08 E8D5E5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   857 00003C0D B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   858 00003C12 E84A090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   859                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003C17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   860                              <1>     
   861                              <1> renameMain:
   862                              <1> ;Now, creates a special find first block for the source file
   863                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   864                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   865                              <1> ; block. 
   866                              <1> ;Then we search for that file name specifically (again), replacing 
   867                              <1> ; the filename portion of the destination buffer. If it exists or the 
   868                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   869                              <1> ; the new directory entry and delete the original file. 
   870                              <1> ;Input:
   871                              <1> ; filenamePtr1 -> Source path + filename pattern
   872                              <1> ; filenamePtr2 -> New path + filename pattern
   873                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   874                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   875 00003C18 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   876 00003C1F E8B0330000          <1>     call testCDSNet ;CF=NC => Not net
   877 00003C24 7308                <1>     jnc .notNet
   878 00003C26 B811110000          <1>     mov eax, 1111h
   879 00003C2B CD2F                <1>     int 2Fh
   880                              <1>     return
    13                              <2> %%_ret:
    14 00003C2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   881                              <1> .notNet:
   882                              <1> ;First check if both drives are on the same disk
   883 00003C2E 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   884 00003C34 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   885 00003C3A 38E0                <1>     cmp al, ah
   886 00003C3C 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   887 00003C3E B811000000          <1>     mov eax, errDevUnk
   888 00003C43 F9                  <1>     stc
   889                              <1>     return
    13                              <2> %%_ret:
    14 00003C44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   890                              <1> .sameDrive:
   891                              <1> ;Now we check if either pathsepc is simply X:\,0
   892                              <1> ; If they are, return fail as we cannot rename the root dir
   893 00003C45 E89B380000          <1>     call dosCrit1Enter
   894 00003C4A 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   895 00003C50 30C0                <1>     xor al, al
   896 00003C52 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   897 00003C57 750B                <1>     jne .checkpath2
   898                              <1> .accDen:
   899 00003C59 B805000000          <1>     mov eax, errAccDen
   900                              <1> .errorExit:
   901 00003C5E F9                  <1>     stc
   902 00003C5F E906030000          <1>     jmp .exit2
   903                              <1> .checkpath2:
   904 00003C64 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   905 00003C6A 30C0                <1>     xor al, al
   906 00003C6C 3D003A5C00          <1>     cmp eax, 005C3A00h
   907 00003C71 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   908                              <1>     ;Now ensure hte two paths are not equal
   909 00003C73 488D35(1E050000)    <1>     lea rsi, buffer1
   910 00003C7A 488D3D(9E050000)    <1>     lea rdi, buffer2
   911 00003C81 E88F350000          <1>     call compareFileNames
   912 00003C86 74D1                <1>     jz .accDen
   913                              <1> ;Now we find first the source file
   914 00003C88 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   915 00003C8F 4889F7              <1>     mov rdi, rsi
   916 00003C92 E8C8D6FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   917 00003C97 0F82CD020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   918 00003C9D 488D35(5A060000)    <1>     lea rsi, curDirCopy
   919 00003CA4 488D3D(C2070000)    <1>     lea rdi, renameDir
   920 00003CAB B904000000          <1>     mov ecx, fatDirEntry_size/8
   921 00003CB0 F348A5              <1>     rep movsq   ;Copy directory over
   922 00003CB3 488D3D(97070000)    <1>     lea rdi, renameFFBlk
   923 00003CBA E84DD5FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   924                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   925                              <1>     ; dir for any CDS.
   926 00003CBF F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   927 00003CC6 7591                <1>     jnz .accDen ;Cant rename a char file!
   928 00003CC8 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   929 00003CCF 7447                <1>     jz .notDirCheck
   930 00003CD1 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   931 00003CD8 57                  <1>     push rdi
   932 00003CD9 E800350000          <1>     call strlen ;Get asciiz length in ecx
   933 00003CDE 5B                  <1>     pop rbx
   934 00003CDF FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   935 00003CE1 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   936 00003CE8 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   937                              <1> .dirCheck:
   938 00003CEF 4889DF              <1>     mov rdi, rbx
   939 00003CF2 51                  <1>     push rcx    ;Save the char count to check!
   940 00003CF3 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   941 00003CF4 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   942 00003CF6 AC                  <1>     lodsb   ;Get the last char to check in al
   943 00003CF7 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   944 00003CF8 59                  <1>     pop rcx
   945 00003CF9 7512                <1>     jne .neqDir
   946                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   947 00003CFB 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   948 00003CFD 7404                <1>     je .curDirChangeErr
   949 00003CFF 84C0                <1>     test al, al
   950 00003D01 750A                <1>     jne .neqDir ;Proceed as normal if not null
   951                              <1> .curDirChangeErr:
   952                              <1>     ;Here we are trying to change a current directory. Fail it!
   953                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   954                              <1>     ; we initially had programmed in (with access denied error instead).
   955 00003D03 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   956 00003D08 E951FFFFFF          <1>     jmp .errorExit
   957                              <1> .neqDir:
   958 00003D0D 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   959 00003D14 FFCA                <1>     dec edx
   960 00003D16 75D7                <1>     jnz .dirCheck
   961                              <1> .notDirCheck:
   962                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   963 00003D18 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   964 00003D1D 31C0                <1>     xor eax, eax
   965 00003D1F 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   966 00003D26 F2AE                <1>     repne scasb   ;Search for terminating null
   967 00003D28 FD                  <1>     std ;Go backwards now, to find the path sep
   968 00003D29 B05C                <1>     mov al, "\"
   969 00003D2B F2AE                <1>     repne scasb   ;Now rsi points one before
   970 00003D2D FC                  <1>     cld ;Go normal ways now
   971 00003D2E 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   972 00003D35 57                  <1>     push rdi
   973 00003D36 4889FE              <1>     mov rsi, rdi
   974 00003D39 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
   975 00003D40 E83FD4FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   976 00003D45 5F                  <1>     pop rdi
   977 00003D46 57                  <1>     push rdi    ;Save rdi on stack again
   978 00003D47 488D35(B5070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   979                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   980 00003D4E 48A5                <1>     movsq
   981 00003D50 A5                  <1>     movsd
   982 00003D51 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   983 00003D52 5F                  <1>     pop rdi ;rdi points to first char position
   984 00003D53 E85D020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   985 00003D58 0F8200FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   986                              <1>     ;Else return the pattern back to its original position
   987 00003D5E 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   988 00003D65 E862D4FFFF          <1>     call FCBToAsciiz
   989                              <1>     ;Delete the original directory entry
   990 00003D6A 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   991 00003D6E FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   992 00003D70 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   993 00003D74 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   994 00003D76 8B0D(A4070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   995 00003D7C C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   996 00003D7F 91                  <1>     xchg ecx, eax
   997 00003D80 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   998 00003D82 89C3                <1>     mov ebx, eax
   999 00003D84 8B05(84070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
  1000 00003D8A E8E7CCFFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
  1001 00003D8F 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
  1002 00003D92 E85ACCFFFF          <1>     call getBufForDir ;Get buffer pointer in rbx
  1003 00003D97 0F82D8010000        <1>     jc .badExit
  1004 00003D9D 488D741320          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
  1005                              <1>     ;rsi points to the file entry
  1006 00003DA2 8A05(08070000)      <1>     mov al, byte [delChar]
  1007 00003DA8 8806                <1>     mov byte [rsi], al
  1008 00003DAA E8DDCAFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
  1009                              <1> 
  1010                              <1>     ;Now we use the destination filename pattern to build the new filename
  1011 00003DAF 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
  1012 00003DB6 31C0                <1>     xor eax, eax
  1013 00003DB8 B943000000          <1>     mov ecx, 67
  1014 00003DBD F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
  1015                              <1> .findPattern:
  1016 00003DBF 48FFCF              <1>     dec rdi
  1017 00003DC2 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
  1018 00003DC5 75F8                <1>     jne .findPattern
  1019                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
  1020 00003DC7 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
  1021 00003DCE 807FFF3A            <1>     cmp byte [rdi - 1], ":"
  1022 00003DD2 750D                <1>     jne .notRoot
  1023                              <1>     ;The root dir always exists on a volume so can skip the check.
  1024 00003DD4 48FFC7              <1>     inc rdi ;Goto the first char of the filename
  1025 00003DD7 57                  <1>     push rdi
  1026 00003DD8 800D(FE060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
  1027 00003DDF EB29                <1>     jmp short .skipCheck
  1028                              <1> .notRoot:
  1029 00003DE1 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1030 00003DE2 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1031                              <1>     ;Now check if the parent directory exists for the destination
  1032 00003DE3 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1033 00003DE4 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1034 00003DEA 488D35(9E050000)    <1>     lea rsi, buffer2
  1035 00003DF1 4889F7              <1>     mov rdi, rsi
  1036 00003DF4 E85FD5FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1037 00003DF9 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1038 00003DFF 5F                  <1>     pop rdi
  1039 00003E00 0F826F010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1040 00003E06 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1041                              <1> .skipCheck:
  1042                              <1>     ;rdi now points to the first char of the pattern
  1043 00003E0A 4889FE              <1>     mov rsi, rdi
  1044 00003E0D 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1045 00003E14 E86BD3FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1046                              <1>     ;Ensure the destination pattern is not all question marks
  1047 00003E19 813D(E5060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1047 00003E21 3F3F                <1>
  1048 00003E23 7524                <1>     jne .validRenPattern
  1049 00003E25 813D(E9060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1049 00003E2D 3F3F                <1>
  1050 00003E2F 7518                <1>     jne .validRenPattern
  1051 00003E31 66813D(ED060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1051 00003E39 3F                  <1>
  1052 00003E3A 750D                <1>     jne .validRenPattern
  1053 00003E3C 803D(EF060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1054 00003E43 0F8427010000        <1>     je .bad ;Access denied buddy ol' pal
  1055                              <1> .validRenPattern:
  1056                              <1>     ;curDirCopy has information for the destination directory file we will 
  1057                              <1>     ; write to. The cluster points to the directory file itself to search in
  1058                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1059                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1060 00003E49 488D35(C2070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1061 00003E50 488D3D(D9060000)    <1>     lea rdi, fcbName
  1062 00003E57 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1063 00003E58 B90B000000          <1>     mov ecx, 11
  1064 00003E5D F3A4                <1>     rep movsb
  1065 00003E5F 5F                  <1>     pop rdi
  1066 00003E60 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1067                              <1> .mnnLp:
  1068 00003E67 AC                  <1>     lodsb
  1069 00003E68 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1070 00003E6A 7404                <1>     je .mnnWC   ;Skip overriding this char
  1071 00003E6C AA                  <1>     stosb   ;Store new char and go forwards by one
  1072 00003E6D 48FFCF              <1>     dec rdi ;Now go back by one
  1073                              <1> .mnnWC:
  1074 00003E70 48FFC7              <1>     inc rdi ;Goto next letter
  1075 00003E73 FFC1                <1>     inc ecx
  1076 00003E75 81F90B000000        <1>     cmp ecx, 11
  1077 00003E7B 75EA                <1>     jne .mnnLp
  1078 00003E7D 488D35(D9060000)    <1>     lea rsi, fcbName
  1079 00003E84 488D3D(C2070000)    <1>     lea rdi, renameDir
  1080 00003E8B B90B000000          <1>     mov ecx, 11
  1081 00003E90 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1082 00003E92 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1083 00003E93 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1084 00003E94 488D35(D9060000)    <1>     lea rsi, fcbName
  1085 00003E9B E82CD3FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1086 00003EA0 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]
  1087 00003EA7 4889F7              <1>     mov rdi, rsi
  1088 00003EAA E8B0D4FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1089 00003EAF 0F83C0000000        <1>     jnc .badExit   ;If the file exists, then error
  1090 00003EB5 3C02                <1>     cmp al, errFnf ;If Fnf error then we may proceed
  1091 00003EB7 0F85B8000000        <1>     jne .badExit
  1092                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1093                              <1>     ;If the parent is root, deal with special case
  1094 00003EBD 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1095 00003EC4 F605(FE060000)02    <1>     test byte [fileFDflg], 2
  1096 00003ECB C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1097 00003ED2 7416                <1>     jz .notRoot2
  1098 00003ED4 488D35(D9060000)    <1>     lea rsi, fcbName
  1099 00003EDB 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1100 00003EE2 48A5                <1>     movsq
  1101 00003EE4 A5                  <1>     movsd
  1102 00003EE5 A4                  <1>     movsb
  1103 00003EE6 31C0                <1>     xor eax, eax    ;Dir to search
  1104 00003EE8 EB13                <1>     jmp short .getSpace
  1105                              <1> .notRoot2:
  1106 00003EEA 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1107 00003EF1 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1108 00003EF8 C1E210              <1>     shl edx, 10h
  1109 00003EFB 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1110                              <1> .getSpace:
  1111 00003EFD E877000000          <1>     call .searchForDirSpace
  1112 00003F02 726C                <1>     jc .bad
  1113                              <1> ;dir Entry found, rsi points to space in buffer
  1114 00003F04 4889F7              <1>     mov rdi, rsi
  1115 00003F07 488D35(C2070000)    <1>     lea rsi, renameDir
  1116 00003F0E B904000000          <1>     mov ecx, fatDirEntry_size/8
  1117 00003F13 F348A5              <1>     rep movsq   ;Copy dir over
  1118 00003F16 E871C9FFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1119                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1120                              <1>     ;If it does, we find next. If not, we exit
  1121 00003F1B B03F                <1>     mov al, "?"
  1122 00003F1D 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1123 00003F24 E8B5320000          <1>     call strlen ;Get in rcx to get the length of the string
  1124 00003F29 F2AE                <1>     repne scasb
  1125 00003F2B 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1126 00003F2D B90B000000          <1>     mov ecx, 11
  1127 00003F32 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1128 00003F39 F2AE                <1>     repne scasb
  1129 00003F3B 7525                <1>     jne .exit
  1130                              <1>     ;Here we gotta do a find next now!
  1131 00003F3D FF35(17040000)      <1>     push qword [currentDTA]
  1132 00003F43 488D3D(97070000)    <1>     lea rdi, renameFFBlk
  1133 00003F4A 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1134 00003F51 E888CEFFFF          <1>     call findNextMain
  1135 00003F56 8F05(17040000)      <1>     pop qword [currentDTA]
  1136 00003F5C 0F83E7FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1137                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1138                              <1> .exit:
  1139 00003F62 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1140 00003F63 E8B3C7FFFF          <1>     call flushAllBuffersForDPB
  1141 00003F68 720B                <1>     jc .badExit
  1142                              <1> .exit2: ;Bad exit before we push qword on stack 
  1143 00003F6A E880350000          <1>     call dosCrit1Exit
  1144                              <1>     return
    13                              <2> %%_ret:
    14 00003F6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1145                              <1> .bad:
  1146 00003F70 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1147                              <1> .badExit:
  1148 00003F75 F9                  <1>     stc
  1149 00003F76 5F                  <1>     pop rdi
  1150 00003F77 EBF1                <1>     jmp short .exit2
  1151                              <1> .searchForDirSpace:
  1152                              <1> ;Input: eax = First directory to search 
  1153 00003F79 8905(84070000)      <1>     mov dword [dirClustA], eax
  1154 00003F7F 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1155 00003F81 668905(88070000)    <1>     mov word [dirSect], ax
  1156 00003F88 8905(8A070000)      <1>     mov dword [dirEntry], eax
  1157 00003F8E E8CCE1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1158 00003F93 731C                <1>     jnc .dirEntryFnd
  1159 00003F95 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1159 00003F9D 0000                <1>
  1160 00003F9F 7412                <1>     je .searchBad ;Set CF and exit
  1161 00003FA1 E8A2E2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1162 00003FA6 720B                <1>     jc .searchBad
  1163 00003FA8 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1164 00003FAD 7404                <1>     je .searchBad
  1165                              <1>     ;Else eax = Newly allocated cluster
  1166 00003FAF EBC8                <1>     jmp short .searchForDirSpace
  1167                              <1> .dirEntryFnd:
  1168 00003FB1 F8                  <1>     clc
  1169                              <1>     return
    13                              <2> %%_ret:
    14 00003FB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1170                              <1> .searchBad:
  1171 00003FB3 F9                  <1>     stc
  1172                              <1>     return
    13                              <2> %%_ret:
    14 00003FB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1173                              <1> 
  1174                              <1> 
  1175                              <1> checkNoOpenHandlesForShareAction:
  1176                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1177                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1178                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1179                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1180                              <1> ; proceeding.
  1181                              <1> ;
  1182                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1183                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1184                              <1> ;       currDirCopy = Directory entry for the file
  1185 00003FB5 E814350000          <1>     call dosPushRegs    ;Save the context completely
  1186 00003FBA 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1187 00003FC1 740C                <1>     jz .noOpenFileCheckHandler
  1188 00003FC3 FF15(BF000000)      <1>     call qword [openFileCheck]
  1189 00003FC9 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1190 00003FCB 7447                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1191 00003FCD EB4C                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1192                              <1> .noOpenFileCheckHandler:
  1193                              <1>     ;The following closes most recent shared handles referencing it
  1194                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1195                              <1>     ; mode and if there is precisely 1  
  1196 00003FCF FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1197                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1198 00003FD5 488D3D(180D0000)    <1>     lea rdi, scratchSFT
  1199 00003FDC 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  1200 00003FE3 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1201 00003FE8 C605(07070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1202                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1203 00003FEF 57                  <1>     push rdi    ;Save the SFT ptr
  1204 00003FF0 E8D5020000          <1>     call buildSFTEntry
  1205 00003FF5 5F                  <1>     pop rdi
  1206 00003FF6 7223                <1>     jc .errorMain
  1207 00003FF8 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1208 00003FFD 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1209 00004003 E8643D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1210 00004008 7211                <1>     jc .errorMain
  1211 0000400A 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1212 0000400F E8EF3C0000          <1>     call closeShareCallWrapper
  1213                              <1> .exit:
  1214 00004014 E89E340000          <1>     call dosPopRegs
  1215 00004019 F8                  <1>     clc
  1216                              <1>     return
    13                              <2> %%_ret:
    14 0000401A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1217                              <1> .errorMain:
  1218 0000401B E897340000          <1>     call dosPopRegs
  1219 00004020 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1220 00004025 F9                  <1>     stc
  1221                              <1>     return
    13                              <2> %%_ret:
    14 00004026 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1222                              <1> 
  1223                              <1> outerDeleteMain:
  1224                              <1> ;Internal current dir must be populated with dir entry
  1225                              <1> ; and internal DOS directory variables now point to this entry.
  1226                              <1> ;Checks if the file is a char device or read only.
  1227                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1228                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1229                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1230                              <1> ;         CF=NC => File deleted
  1231 00004027 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1232 0000402E E8A12F0000          <1>     call testCDSNet ;CF=NC => Not net
  1233 00004033 7308                <1>     jnc .notNet
  1234 00004035 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1235 0000403A CD2F                <1>     int 2Fh
  1236                              <1>     return
    13                              <2> %%_ret:
    14 0000403C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .notNet:
  1238 0000403D B805000000          <1>     mov eax, errAccDen  
  1239 00004042 F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1240 00004049 7548                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1241 0000404B E845000000          <1>     call deleteMain
  1242 00004050 7241                <1>     jc .exitBad
  1243                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1244 00004052 B03F                <1>     mov al, "?"
  1245 00004054 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1246 0000405B B90B000000          <1>     mov ecx, 11
  1247 00004060 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1248 00004062 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1249 00004064 F8                  <1>     clc
  1250                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00004065 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1251                              <1> .serverWCloop:
  1252 00004066 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1253 0000406C 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1254 00004073 57                  <1>     push rdi    ;Push this address onto the stack
  1255 00004074 E893D1FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1256 00004079 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1257 0000407F E85ACDFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1258 00004084 8F05(17040000)      <1>     pop qword [currentDTA]
  1259                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000408A 72D9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1260 0000408C E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1261 00004091 73D3                <1>     jnc .serverWCloop     
  1262                              <1> ;Stop as soon as an error occurs
  1263                              <1> .exitBad:
  1264 00004093 F9                  <1>     stc
  1265                              <1>     return
    13                              <2> %%_ret:
    14 00004094 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1266                              <1> 
  1267                              <1> deleteMain:
  1268                              <1> ;Now unlink FAT chain and then clear directory entry
  1269                              <1> ;Get the start cluster of this file
  1270                              <1> ;Input:
  1271                              <1> ; The file must have NOT be read-only.
  1272                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1273                              <1> ;     - curDirCopy must be filled with the file directory information
  1274                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1275                              <1> ;Output: CF=NC => Success, 
  1276                              <1> ; If not net CDS:
  1277                              <1> ;   rsi keeps pointing to directory entry.
  1278                              <1> ;   al = First char of the file that was deleted.
  1279                              <1> ;        CF=CY => Error
  1280                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1281 00004095 E81BFFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1282                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000409A 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1283 0000409C 55                  <1>     push rbp
  1284 0000409D 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1285 000040A4 52                  <1>     push rdx
  1286 000040A5 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1287 000040AC 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1288 000040B3 C1E010              <1>     shl eax, 10h
  1289 000040B6 09D0                <1>     or eax, edx ;Add low bits to eax
  1290 000040B8 5A                  <1>     pop rdx
  1291 000040B9 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1292 000040BB 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1293 000040BD E86DCBFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1294 000040C2 721C                <1>     jc .exitBad
  1295                              <1> .skipUnlink:
  1296                              <1>     ;Now replace the first char of the directory to 0E5h
  1297                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1298 000040C4 E8A9E0FFFF          <1>     call getDiskDirectoryEntry
  1299 000040C9 7215                <1>     jc .exitBad
  1300 000040CB 8A05(08070000)      <1>     mov al, byte [delChar]
  1301 000040D1 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1302 000040D3 E8B4C7FFFF          <1>     call markBufferDirty
  1303                              <1>     ;CF must be clear
  1304 000040D8 E83EC6FFFF          <1>     call flushAllBuffersForDPB
  1305 000040DD 5D                  <1>     pop rbp
  1306                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040DE 73B4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1307                              <1> .exitBad:
  1308 000040E0 5D                  <1>     pop rbp
  1309 000040E1 F9                  <1>     stc
  1310                              <1>     return
    13                              <2> %%_ret:
    14 000040E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1311                              <1> 
  1312                              <1> openMain:
  1313                              <1> ;Input: ax (formally al) = Open mode
  1314                              <1> ;       [currentSFT] = SFT we are building
  1315                              <1> ;       [workingCDS] = CDS of drive to access
  1316                              <1> ;       [workingDPB] = DPB of drive to access
  1317                              <1> ;Ouput: CF=CY => Error, eax has error code
  1318 000040E3 E8D3000000          <1>     call setOpenMode
  1319                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040E8 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1320 000040EA 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1321 000040F1 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1322 000040F8 30E4                <1>     xor ah, ah  ;al has the access mode
  1323 000040FA 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1324 00004101 750A                <1>     jne .notNet
  1325                              <1> .redirOpen:
  1326 00004103 50                  <1>     push rax    ;Push open mode onto stack
  1327 00004104 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1328 00004109 CD2F                <1>     int 2Fh
  1329 0000410B 58                  <1>     pop rax
  1330                              <1>     return
    13                              <2> %%_ret:
    14 0000410C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1331                              <1> .notNet:
  1332 0000410D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1333 00004113 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1334 00004115 E8CB330000          <1>     call dosCrit1Enter
  1335                              <1> ;Ensure our disk attributes permit opening
  1336 0000411A 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1337 00004120 F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1338 00004123 752C                <1>     jnz .accDenExit
  1339 00004125 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1340 00004128 7439                <1>     jz short .openFile      ;If not, proceed.
  1341                              <1> ;Else, we check if we are permitted to open this file.
  1342 0000412A 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1343 0000412E F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1344 00004134 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1345 00004136 89CA                <1>     mov edx, ecx
  1346 00004138 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1347 0000413E 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1348 00004144 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1349 00004146 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1350 0000414C 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1351 0000414F 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1352                              <1> .accDenExit:
  1353 00004151 B805000000          <1>     mov eax, errAccDen
  1354 00004156 EB27                <1>     jmp short .errorExit
  1355                              <1> .fcbOpen:
  1356 00004158 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1357 0000415D 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1358 00004161 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1359                              <1> .openFile:
  1360 00004163 C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1361 0000416A C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1362 00004171 E854010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1363 00004176 7207                <1>     jc .errorExit
  1364 00004178 E8EF3B0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1365 0000417D 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1366                              <1> .errorExit:
  1367 0000417F E86B330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1368                              <1>     return
    13                              <2> %%_ret:
    14 00004184 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1369                              <1> .fileSharedOk:
  1370 00004185 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1371 0000418A E8B70B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1372 0000418F FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1373 00004195 E855330000          <1>     call dosCrit1Exit
  1374                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1375 0000419A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1376 000041A1 E872E2FFFF          <1>     call openSFT
  1377 000041A6 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1378 000041AC 7501                <1>     jnz .netOpen
  1379                              <1>     return
    13                              <2> %%_ret:
    14 000041AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1380                              <1> .netOpen:
  1381 000041AF 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1382 000041B6 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1383                              <1>     return
    13                              <2> %%_ret:
    14 000041BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1384                              <1> 
  1385                              <1> setOpenMode:
  1386                              <1> ;Input: al = Open mode for the file open
  1387 000041BB 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1388 000041C1 53                  <1>     push rbx
  1389                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1390 000041C2 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1391 000041C9 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1392 000041CB 88C3                <1>     mov bl, al
  1393 000041CD 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1394 000041D0 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1395 000041D7 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1396 000041D9 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1397 000041DC 7405                <1>     je .s2
  1398                              <1> .s1:
  1399 000041DE 80FB40              <1>     cmp bl, denyNoneShare
  1400 000041E1 770D                <1>     ja .somBad
  1401                              <1> .s2:
  1402 000041E3 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1403 000041E5 80E30F              <1>     and bl, 0Fh
  1404 000041E8 80FB02              <1>     cmp bl, RWAccess
  1405 000041EB 7703                <1>     ja .somBad
  1406 000041ED 5B                  <1>     pop rbx
  1407 000041EE F8                  <1>     clc
  1408                              <1>     return
    13                              <2> %%_ret:
    14 000041EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1409                              <1> .somBad:
  1410 000041F0 5B                  <1>     pop rbx
  1411 000041F1 B80C000000          <1>     mov eax, errAccCde
  1412 000041F6 F9                  <1>     stc
  1413                              <1>     return
    13                              <2> %%_ret:
    14 000041F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1414                              <1> 
  1415                              <1> createNewMain:
  1416                              <1> ;Input: ax (formally al) = File attributes
  1417                              <1> ;       [currentSFT] = SFT we are building
  1418                              <1> ;       [workingCDS] = CDS of drive to access
  1419                              <1> ;       [workingDPB] = DPB of drive to access
  1420 000041F8 0FB6C0              <1>     movzx eax, al
  1421 000041FB B401                <1>     mov ah, 1    ;Tell redir to create new file
  1422 000041FD F605(04070000)FF    <1>     test byte [fileExist], -1
  1423 00004204 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1424 00004206 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1425 0000420B F9                  <1>     stc
  1426                              <1>     return
    13                              <2> %%_ret:
    14 0000420C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1427                              <1> createMain:
  1428                              <1> ;Input: ax (formally al) = File attributes
  1429                              <1> ;       [currentSFT] = SFT we are building
  1430                              <1> ;       [workingCDS] = CDS of drive to access
  1431                              <1> ;       [workingDPB] = DPB of drive to access
  1432 0000420D 0FB6C0              <1>     movzx eax, al
  1433                              <1> .createNewEP:
  1434 00004210 A880                <1>     test al, 80h    ; Is this invalid bit set?
  1435 00004212 750C                <1>     jnz .invalidAttrib
  1436 00004214 A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1437 00004216 7402                <1>     jz .notVol
  1438 00004218 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1439                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1440                              <1> .notVol:
  1441 0000421A 0C20                <1>     or al, archiveFile   ;Set archive bit
  1442 0000421C A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1443 0000421E 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1444                              <1> .invalidAttrib:
  1445 00004220 B805000000          <1>     mov eax, errAccDen
  1446 00004225 F9                  <1>     stc
  1447                              <1>     return
    13                              <2> %%_ret:
    14 00004226 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1448                              <1> .validAttr:
  1449                              <1> ;Check we are not creating a directory.
  1450 00004227 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1451 0000422E 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1452 00004235 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1453 0000423C 750A                <1>     jne .diskFile
  1454 0000423E 50                  <1>     push rax    ;Save the new attributes
  1455 0000423F B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1456 00004244 CD2F                <1>     int 2Fh
  1457 00004246 5B                  <1>     pop rbx
  1458                              <1>     return
    13                              <2> %%_ret:
    14 00004247 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1459                              <1> .diskFile:
  1460 00004248 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1461 0000424E 740A                <1>     jz .hardFile
  1462 00004250 50                  <1>     push rax    ;Save the new attributes
  1463 00004251 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1464 00004256 CD2F                <1>     int 2Fh
  1465 00004258 5B                  <1>     pop rbx
  1466                              <1>     return
    13                              <2> %%_ret:
    14 00004259 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1467                              <1> .hardFile:
  1468 0000425A 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1469 00004260 C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1470 00004267 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1471 0000426E E872320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1472 00004273 57                  <1>     push rdi    ;Save the sft handle
  1473 00004274 50                  <1>     push rax    ;Save the file attributes on stack
  1474 00004275 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1475 0000427A E84B000000          <1>     call buildSFTEntry
  1476 0000427F 5B                  <1>     pop rbx ;Pop the file attribute off
  1477 00004280 5F                  <1>     pop rdi
  1478 00004281 7241                <1>     jc .errorExit
  1479 00004283 E8E43A0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1480 00004288 723A                <1>     jc .errorExit
  1481 0000428A F6C308              <1>     test bl, volLabelFile    ;Was the attribute a volume label?
  1482 0000428D 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1483                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1484 0000428F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1485 00004296 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1486 00004298 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1487 0000429A 8805(E9190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1488 000042A0 E840320000          <1>     call dosCrit1Enter
  1489 000042A5 E8932A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1490 000042AA E840320000          <1>     call dosCrit1Exit
  1491                              <1> .notVolLabel:
  1492 000042AF B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1493 000042B4 FF15(2F010000)      <1>     call qword [updateDirShare]
  1494 000042BA E830320000          <1>     call dosCrit1Exit
  1495 000042BF E9D6FEFFFF          <1>     jmp openDriverMux
  1496                              <1> .errorExit:
  1497 000042C4 E826320000          <1>     call dosCrit1Exit
  1498                              <1>     return
    13                              <2> %%_ret:
    14 000042C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1499                              <1> buildSFTEntry:
  1500                              <1> ;Called in a critical section.
  1501                              <1> ;Input: al = Open mode
  1502                              <1> ;       STACK: File attributes if creating a file
  1503                              <1> ;       [currentSFT] = SFT we are building
  1504                              <1> ;       [workingCDS] = CDS of drive to access
  1505                              <1> ;       [workingDPB] = DPB of drive to access
  1506                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1507                              <1> ;
  1508                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1509                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1510                              <1> ;        If CF=CY: - Return fail
  1511                              <1> ;
  1512                              <1> ;
  1513                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1514                              <1> ;   If not, create disk entry.
  1515                              <1> ;Check if the device was a char device by checking curDirCopy.
  1516                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1517                              <1> 
  1518                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1519                              <1> ; to start of file fields of the SFT
  1520 000042CA 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1521 000042CB 4889E5              <1>     mov rbp, rsp
  1522 000042CE 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1523                              <1> ;Set the open mode
  1524 000042D5 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1525                              <1> ;Get current time
  1526 000042D9 E882EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1527 000042DE E868EBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1528 000042E3 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1529                              <1> ;Set current Owner
  1530 000042E6 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1531 000042ED 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1532                              <1> ;Set file pointer to first byte
  1533 000042F1 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1534                              <1> ;Common fields set
  1535 000042F8 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1536 000042FF 0F84CA010000        <1>     jz .openProc
  1537                              <1>     ;Here if Creating a file.
  1538                              <1>     ;First check if we are handling a volume label
  1539 00004305 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1540 0000430D 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1541 0000430F 56                  <1>     push rsi
  1542 00004310 57                  <1>     push rdi
  1543 00004311 55                  <1>     push rbp
  1544 00004312 C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1545 00004319 E859CCFFFF          <1>     call searchDir  ;Searches the root dir
  1546 0000431E C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1547 00004325 5D                  <1>     pop rbp
  1548 00004326 5F                  <1>     pop rdi
  1549 00004327 5E                  <1>     pop rsi
  1550 00004328 0F83F8010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1551 0000432E 3C12                <1>     cmp al, errNoFil
  1552 00004330 0F85F0010000        <1>     jne .bad ;If not "no file found", error out
  1553                              <1> .notVolLbl:
  1554 00004336 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1555 0000433D 0F84D7000000        <1>     jz .createFile
  1556 00004343 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1557 0000434A 0F8588010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1558 00004350 F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile | dirReadOnly
  1559 00004357 0F85C9010000        <1>     jnz .bad    ;Cant recreate a dir or ro file!
  1560                              <1>     ;Here disk file exists, so recreating the file.
  1561 0000435D 55                  <1>     push rbp
  1562 0000435E FF35(32070000)      <1>     push qword [currentSFT]
  1563 00004364 E82CFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1564 00004369 8F05(32070000)      <1>     pop qword [currentSFT]
  1565 0000436F 5D                  <1>     pop rbp
  1566 00004370 0F82B0010000        <1>     jc .bad
  1567                              <1>     ;al has the char for the filename
  1568                              <1>     ;Sets vars for the sector/offset into the sector
  1569 00004376 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1570 0000437D 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1571 0000437F 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1572                              <1>     ;al has file attributes.
  1573 00004383 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1574 00004386 31C0                <1>     xor eax, eax
  1575                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1576 00004388 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1577 0000438C 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1578 00004390 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1579 00004393 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1580 00004396 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1581 00004399 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1582 0000439C 57                  <1>     push rdi    ;Save SFT pointer
  1583 0000439D 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1584 000043A4 B920000000          <1>     mov ecx, fatDirEntry_size
  1585 000043A9 F3A4                <1>     rep movsb
  1586 000043AB E8DCC4FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1587 000043B0 5F                  <1>     pop rdi
  1588                              <1> .createCommon:  ;rdi must point to the current SFT 
  1589                              <1>     ;Now populate the remaining SFT fields 
  1590 000043B1 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1591 000043B8 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1592 000043BB 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1593 000043BE 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1594 000043C5 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1595 000043C9 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1596 000043D0 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1597 000043D3 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1598 000043D6 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1599 000043D9 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1600 000043DC 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1601 000043E0 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1602 000043E4 C1E210              <1>     shl edx, 10h
  1603 000043E7 09D0                <1>     or eax, edx
  1604 000043E9 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1605                              <1> 
  1606 000043EC 31C0                <1>     xor eax, eax
  1607                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1608 000043EE 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1609 000043F4 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1610 000043F6 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1611 000043FA 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1612 00004401 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1613                              <1>     ;Last thing, copy the filename over
  1614                              <1>     ;Now save the name
  1615                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1616 00004405 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1617 00004409 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1618 00004410 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1619 00004412 66A5                <1>     movsw
  1620 00004414 A4                  <1>     movsb
  1621                              <1>     ;SFT filled
  1622 00004415 E903010000          <1>     jmp .exit
  1623                              <1> .createFile:
  1624                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1625                              <1>     ;rsi points to current sft entry
  1626 0000441A 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1627                              <1>     ;Clear out the dir entry
  1628 00004421 57                  <1>     push rdi
  1629 00004422 B904000000          <1>     mov ecx, 4
  1630 00004427 31C0                <1>     xor eax, eax
  1631 00004429 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1632 0000442C 5F                  <1>     pop rdi
  1633                              <1>     ;Copy the FCB name over    
  1634 0000442D 56                  <1>     push rsi
  1635 0000442E 57                  <1>     push rdi
  1636 0000442F B90B000000          <1>     mov ecx, 11
  1637 00004434 488D35(D9060000)    <1>     lea rsi, fcbName
  1638 0000443B F3A4                <1>     rep movsb   ;Move over the FCB name
  1639 0000443D 5F                  <1>     pop rdi
  1640 0000443E 5E                  <1>     pop rsi
  1641                              <1> 
  1642 0000443F 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1643                              <1>     ;al has file attributes.
  1644 00004443 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1645 00004446 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1646 00004449 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1647 0000444C 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1648 0000444F 8B05(80070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1649                              <1> .searchForDirSpace:
  1650 00004455 8905(84070000)      <1>     mov dword [dirClustA], eax
  1651 0000445B 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1652 0000445D 668905(88070000)    <1>     mov word [dirSect], ax
  1653 00004464 8905(8A070000)      <1>     mov dword [dirEntry], eax
  1654 0000446A 57                  <1>     push rdi
  1655 0000446B E8EFDCFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1656 00004470 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1657 00004471 7328                <1>     jnc .dirEntryFnd
  1658 00004473 813D(80070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1658 0000447B 0000                <1>
  1659 0000447D 0F84A3000000        <1>     je .bad ;Set CF and exit
  1660 00004483 E8C0DDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1661 00004488 0F828F000000        <1>     jc .exit
  1662 0000448E 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1663 00004493 0F848D000000        <1>     je .bad
  1664                              <1>     ;Else eax = Newly allocated cluster
  1665 00004499 EBBA                <1>     jmp short .searchForDirSpace
  1666                              <1> .dirEntryFnd:
  1667 0000449B 4887FE              <1>     xchg rdi, rsi
  1668 0000449E B904000000          <1>     mov ecx, 4
  1669 000044A3 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1670 000044A6 E8E1C3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1671 000044AB 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1672 000044B2 E9FAFEFFFF          <1>     jmp .createCommon
  1673                              <1> .open:
  1674                              <1> ;curdircopy has a copy of the disk file directory
  1675                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1676 000044B7 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1677 000044BE 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1678                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1679 000044C5 E8A8DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1680 000044CA E9E2FEFFFF          <1>     jmp .createCommon
  1681                              <1> .openProc:
  1682                              <1>     ;Here if Opening a file. 
  1683                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1684                              <1>     ;This is taken care of by openMain.
  1685 000044CF F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1686 000044D6 74DF                <1>     jz .open
  1687                              <1> .charDev:
  1688 000044D8 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1689 000044DF E84B2E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1690 000044E4 7307                <1>     jnc .notBadCharDevName
  1691 000044E6 B805000000          <1>     mov eax, errAccDen
  1692 000044EB EB30                <1>     jmp short .exit ;CF already set
  1693                              <1> .notBadCharDevName:
  1694 000044ED 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1695 000044F4 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1696 000044F8 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1697 000044FC 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1698 000044FF 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1699 00004502 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1700 00004506 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1701 0000450D 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1702 00004511 B820202020          <1>     mov eax, "    "
  1703 00004516 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1704 0000451A 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1705                              <1> .exit:
  1706 0000451D E83A0A0000          <1>     call writeThroughBuffersForHandle
  1707 00004522 7207                <1>     jc .bad2
  1708 00004524 5D                  <1>     pop rbp
  1709                              <1>     return
    13                              <2> %%_ret:
    14 00004525 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1710                              <1> .bad:   ;Set Access Denied
  1711 00004526 B805000000          <1>     mov eax, errAccDen
  1712                              <1> .bad2:  ;Error propagating error code
  1713 0000452B F9                  <1>     stc
  1714 0000452C 5D                  <1>     pop rbp
  1715                              <1>     return
    13                              <2> %%_ret:
    14 0000452D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1716                              <1> closeMain: ;Int 2Fh AX=1201h
  1717                              <1> ;Gets the directory entry for a file
  1718                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1719                              <1> ;If CF=CY on return: Error, return error with al = error code
  1720                              <1> ;Preserve all regs except eax and rdi
  1721                              <1> ; If CF=NC on return: eax = Unknown
  1722                              <1> ;                     rdi = current SFT ptr
  1723 0000452E 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1724 00004535 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1725 00004539 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1726 0000453F 7408                <1>     jz .physical
  1727                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1728 00004541 B806110000          <1>     mov eax, 1106h  ;Make request
  1729 00004546 CD2F                <1>     int 2Fh ;Beep!
  1730                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004548 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1731                              <1> .physical:  
  1732                              <1> ; We make a request to the dev dir to close the device
  1733                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1734 00004549 E8972F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1735 0000454E E88FDCFFFF          <1>     call updateSFTDateTimeFields
  1736 00004553 E8F5090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1737 00004558 50                  <1>     push rax
  1738 00004559 53                  <1>     push rbx
  1739 0000455A E8A4370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1740 0000455F 5B                  <1>     pop rbx
  1741 00004560 58                  <1>     pop rax
  1742                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1743                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1744                              <1> ;Closes the handle properly if only one reference to file remains.
  1745                              <1> ;Input: ax = Initial open handle count
  1746                              <1> ;       bx = attribute byte from the SFT
  1747                              <1> ;       rdi -> Current SFT
  1748 00004561 50                  <1>     push rax    ;Save the handle count for later
  1749 00004562 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1750 00004567 7577                <1>     jnz .notDiskBitsSet
  1751 00004569 E8A4DCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1752 0000456E B805000000          <1>     mov eax, errAccDen
  1753 00004573 726C                <1>     jc .accDenExit
  1754 00004575 56                  <1>     push rsi    ; -> Buffer dir entry
  1755 00004576 57                  <1>     push rdi    ; -> SFT ptr
  1756 00004577 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1757 0000457B E8DACBFFFF          <1>     call findInBuffer.nameCompare
  1758 00004580 5F                  <1>     pop rdi     ; -> SFT ptr
  1759 00004581 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1760 00004582 7408                <1>     jz .dirEntryForUs
  1761                              <1> .badFileFound:
  1762 00004584 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1763 00004589 F9                  <1>     stc
  1764 0000458A EB55                <1>     jmp short .accDenExit
  1765                              <1> .dirEntryForUs:
  1766 0000458C 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1767 00004590 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1768 00004594 F6D0                <1>     not al  ;Reverse the bits
  1769 00004596 20C8                <1>     and al, cl  ;These should be equal
  1770 00004598 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1771 0000459A 75E8                <1>     jnz .badFileFound
  1772                              <1>     
  1773 0000459C 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1774 000045A0 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1775 000045A3 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1776 000045A6 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1777 000045AA 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1778 000045AE 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1779 000045B2 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1780 000045B6 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1781 000045BA 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1782 000045BD 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1783 000045C1 C1E810              <1>     shr eax, 10h
  1784 000045C4 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1785 000045C8 E8BFC2FFFF          <1>     call markBufferDirty
  1786 000045CD 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1787 000045D4 E854C1FFFF          <1>     call flushAllBuffersForDrive
  1788 000045D9 B805000000          <1>     mov eax, errAccDen
  1789 000045DE 7201                <1>     jc .accDenExit
  1790                              <1> .notDiskBitsSet:
  1791 000045E0 F8                  <1>     clc
  1792                              <1> .accDenExit:
  1793 000045E1 9C                  <1>     pushfq
  1794 000045E2 E83ADEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1795 000045E7 9D                  <1>     popfq
  1796 000045E8 59                  <1>     pop rcx ;Get back the initial open handle count
  1797 000045E9 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1798 000045EC 9C                  <1>     pushfq
  1799 000045ED FFC9                <1>     dec ecx ;Decrement count
  1800 000045EF 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1801 000045F1 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1802                              <1> .exit:
  1803 000045F4 E8F62E0000          <1>     call dosCrit1Exit
  1804 000045F9 9D                  <1>     popfq
  1805                              <1>     return
    13                              <2> %%_ret:
    14 000045FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1806                              <1> 
  1807                              <1> readBytes:
  1808                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1809                              <1> ;Input: ecx = Number of bytes to read
  1810                              <1> ;Output: ecx = Number of bytes read
  1811                              <1> ;Number of bytes read 
  1812                              <1> ;If CF=CY, return with error code in ax
  1813 000045FB E846070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1814 00004600 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1815 00004604 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1816 00004606 3C01                <1>     cmp al, WriteAccess
  1817 00004608 7509                <1>     jne .readable
  1818 0000460A B805000000          <1>     mov eax, errAccDen
  1819 0000460F 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1820 00004611 F9                  <1>     stc
  1821                              <1>     return
    13                              <2> %%_ret:
    14 00004612 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1822                              <1> .readable:
  1823 00004613 E870070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1824 00004618 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1825 0000461B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1826 00004621 740A                <1>     jz .notRedir
  1827 00004623 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1828 00004628 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1829                              <1>     return 
    13                              <2> %%_ret:
    14 0000462A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1830                              <1> .exitOk:
  1831 0000462B F8                  <1>     clc
  1832                              <1>     return 
    13                              <2> %%_ret:
    14 0000462C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1833                              <1> .notRedir:
  1834 0000462D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1835 00004633 7510                <1>     jnz readCharDev
  1836 00004635 E8AB2E0000          <1>     call dosCrit1Enter
  1837 0000463A E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1838 0000463F E8AB2E0000          <1>     call dosCrit1Exit
  1839                              <1>     return 
    13                              <2> %%_ret:
    14 00004644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1840                              <1> readCharDev:
  1841                              <1> ;rdi points to sft for char dev to read
  1842                              <1> ;ecx has the number of bytes to transfer
  1843                              <1> ;Vars have been set up and DTA has the transfer address
  1844                              <1> ;Returns in ecx, the actual bytes transferred
  1845                              <1> ;If CF=CY, return with error code in ax
  1846 00004645 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1847 0000464C 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1848 00004650 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1849 00004657 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1850 0000465A 0F84DA020000        <1>     jz charReadExitOk    ;If it does, jump to exit as if EOF has been hit
  1851 00004660 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1852 00004663 7407                <1>     jz .notNul
  1853                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1854                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1855 00004665 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1856 00004667 E9CE020000          <1>     jmp charReadExitOk    ;Goto exit
  1857                              <1> .notNul:
  1858 0000466C F6C320              <1>     test bl, charDevBinary
  1859 0000466F 0F857F000000        <1>     jnz .binary
  1860                              <1>     ;Here if the device is in ASCII mode
  1861 00004675 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1862 00004678 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1863                              <1> .consoleInput:
  1864                              <1>     ;Console input here
  1865 0000467E E891E2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1866                              <1>     ;Get current offset into buffer (if one exists)
  1867 00004683 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1868 0000468A 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1869 0000468D 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1870 0000468F 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1871 00004696 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1872                              <1>     ;Else, reset the buffer
  1873 00004698 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1873 000046A0 FF                  <1>
  1874                              <1> .oldBuf:
  1875                              <1> ;Preserve the dta and number of chars to tfr
  1876 000046A1 51                  <1>     push rcx
  1877 000046A2 57                  <1>     push rdi
  1878 000046A3 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1879 000046AA E885E2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1880 000046AF 5F                  <1>     pop rdi
  1881 000046B0 59                  <1>     pop rcx
  1882 000046B1 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1883 000046B8 803E1A              <1>     cmp byte [rsi], EOF
  1884 000046BB 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1885 000046BD C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1886 000046C0 B00A                <1>     mov al, LF
  1887 000046C2 E8E7DDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1888 000046C7 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1889 000046C9 EB18                <1>     jmp short .exit
  1890                              <1> .tfrBuf:
  1891 000046CB AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1892 000046CC AA                  <1>     stosb
  1893 000046CD 3C0D                <1>     cmp al, CR 
  1894 000046CF 7503                <1>     jne .noCRLF
  1895 000046D1 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1896                              <1> .noCRLF:
  1897 000046D4 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1898 000046D6 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1899 000046D8 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1900                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1901 000046DA E8CFDDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1902 000046DF 31F6                <1>     xor esi, esi
  1903 000046E1 0C01                <1>     or al, 1    ;Set ZF = NZ
  1904                              <1> .exit:
  1905 000046E3 E844E2FFFF          <1>     call vConRetDriver
  1906 000046E8 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1907                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1908 000046EF E946020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1909                              <1> 
  1910                              <1> .binary:
  1911                              <1>     ;Setup registers for transfer
  1912 000046F4 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1913 000046F7 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1914                              <1>     ;ecx has the number of bytes to transfer directly
  1915 000046FA E8EB270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1916 000046FF 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1917 00004706 E8C1240000          <1>     call goDriver   ;Make the request
  1918 0000470B 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1919 0000470E 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1920 00004715 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1921 0000471B 7422                <1>     jz .binNoError
  1922                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1923 0000471D B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1924 0000471F E8811E0000          <1>     call charDevErr   ;ah = has part of the error 
  1925                              <1>     ;al now has the response
  1926 00004724 3C00                <1>     cmp al, critIgnore
  1927 00004726 7417                <1>     je .binNoError ;Simply proceed as normal
  1928 00004728 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1929 0000472B 3C03                <1>     cmp al, critFail
  1930 0000472D 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1931                              <1>     ;Fallthrough here for fail!
  1932                              <1> .failExit:
  1933 0000472F 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1934 00004736 31C9                <1>     xor ecx, ecx
  1935 00004738 B805000000          <1>     mov eax, errAccDen
  1936 0000473D F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1937                              <1>     return
    13                              <2> %%_ret:
    14 0000473E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1938                              <1> .binNoError:
  1939                              <1>     ;Get number of bytes transferred into 
  1940 0000473F 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1941 00004745 F7D8                <1>     neg eax ;make it into -eax
  1942 00004747 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1943                              <1>     ;ecx now has bytes left to transfer
  1944 0000474B 50                  <1>     push rax    ;Save value on stack
  1945 0000474C 31C0                <1>     xor eax, eax ;Set ZF
  1946 0000474E FFC0                <1>     inc eax ;Clear ZF
  1947 00004750 58                  <1>     pop rax ;Get back the original value
  1948 00004751 E9E4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  1949                              <1> .generalASCII:
  1950                              <1>     ;ecx has bytes to transfer here
  1951                              <1>     ;Setup registers for transfer
  1952 00004756 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1953 00004759 51                  <1>     push rcx
  1954 0000475A B901000000          <1>     mov ecx, 1  ;Get one char
  1955 0000475F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1956 00004762 E883270000          <1>     call primReqReadSetup   ;Setup request
  1957 00004767 59                  <1>     pop rcx
  1958                              <1>     ;rbx now has request header ptr
  1959 00004768 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1960                              <1> .asciiReadChar:
  1961 0000476F 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1962 00004772 E821E1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1963 00004777 E850240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1964 0000477C 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1965 00004783 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1966 00004789 7420                <1>     jz .asciiNoError
  1967 0000478B B486                <1>     mov ah, critCharDev | critData
  1968 0000478D E8131E0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  1969                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1970 00004792 C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1970 0000479A 0000                <1>
  1971 0000479C 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1972 0000479F 3C03                <1>     cmp al, critFail
  1973 000047A1 748C                <1>     je .failExit
  1974 000047A3 3C01                <1>     cmp al, critRetry
  1975 000047A5 74C8                <1>     je .asciiReadChar
  1976                              <1>     ;Ignore here, pretend NULL CHAR was read
  1977 000047A7 30C0                <1>     xor al, al
  1978 000047A9 EB15                <1>     jmp short .asciiIgnoreEP
  1979                              <1> .asciiNoError:
  1980                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1981                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1982                              <1> ;Preserve RBX, RSI
  1983                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1984 000047AB 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1985 000047AE 813D(D7040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1985 000047B6 0000                <1>
  1986 000047B8 0F857C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1987 000047BE 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1988                              <1> .asciiIgnoreEP:
  1989 000047C0 48FF05(CF040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1990 000047C7 48FFC7              <1>     inc rdi ;Also advance register pointer
  1991 000047CA 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  1992 000047CC 0F8468010000        <1>     je charReadExitOk   ;Exit if so!
  1993 000047D2 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1994 000047D4 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1995                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1996 000047D6 FEC0                <1>     inc al  ;make ZF=NZ
  1997 000047D8 E95D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1998                              <1> 
  1999                              <1> readDiskFile:
  2000                              <1> ;rdi = Current SFT
  2001                              <1> ;rbp = WorkingDPB
  2002                              <1> ;ecx = Bytes to transfer
  2003 000047DD C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2004 000047E4 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2005                              <1>     ;We have the following vars setup:
  2006                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2007                              <1>     ;currClustF
  2008                              <1>     ;Now convert currSectC to disk sector by using currClustF
  2009                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  2010 000047EB 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  2011 000047EE 85D2                <1>     test edx, edx
  2012 000047F0 0F844F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  2013 000047F6 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2014 000047FC 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2015 000047FF 8905(54070000)      <1>     mov dword [currClustD], eax
  2016 00004805 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2017 00004807 0F8438010000        <1>     jz readExitOk
  2018 0000480D 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2019 00004812 0F842D010000        <1>     jz readExitOk   
  2020 00004818 8B0D(78070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2021                              <1>     ;Check if we have opened a volume label (should never happen)
  2022 0000481E F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2023 00004822 7407                <1>     jz .shareCheck
  2024 00004824 B805000000          <1>     mov eax, errAccDen
  2025 00004829 F9                  <1>     stc
  2026                              <1>     return
    13                              <2> %%_ret:
    14 0000482A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2027                              <1> .shareCheck:
  2028                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2029 0000482B E8DA340000          <1>     call retryShareIODelay
  2030 00004830 7308                <1>     jnc .shareOk
  2031 00004832 E870350000          <1>     call shareCheckReadLockViolation
  2032 00004837 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2033                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004839 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2034                              <1> .shareOk:
  2035 0000483A E899BEFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2036 0000483F 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2037 00004841 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2038 00004843 7426                <1>     jz .skipWalk
  2039                              <1> .goToCurrentCluster:
  2040 00004845 E82EC4FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2041 0000484A 0F82DB000000        <1>     jc .badExit   ;This can only return Fail
  2042 00004850 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2043 00004855 0F84EA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2044 0000485B 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2045 00004861 FFCA                <1>     dec edx ;Decrement counter
  2046 00004863 75E0                <1>     jnz .goToCurrentCluster
  2047 00004865 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2048                              <1> .skipWalk:
  2049 0000486B E806C2FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2050                              <1>     ;Now we add the offset to this
  2051 00004870 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2052 00004877 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2053 0000487A 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2054                              <1> ;Main
  2055                              <1> .mainRead:
  2056 00004881 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2057 00004888 7407                <1>     jz .mainReadNoBreak
  2058 0000488A 50                  <1>     push rax
  2059 0000488B E808E0FFFF          <1>     call checkBreak
  2060 00004890 58                  <1>     pop rax
  2061                              <1> .mainReadNoBreak:
  2062 00004891 E860C1FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2063 00004896 0F828F000000        <1>     jc .badExit
  2064 0000489C 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2065 000048A0 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2066 000048A7 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2067                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2068                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2069                              <1>     ; 3) Bytes left to read from Request
  2070                              <1> 
  2071 000048AA 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2072 000048AD 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2073 000048B3 8B1D(7C070000)      <1>     mov ebx, dword [tfrCntr]
  2074 000048B9 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2075 000048BB 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2076 000048BE 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2077 000048C2 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2078 000048C9 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2079 000048CB 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2080                              <1>     
  2081 000048CE 57                  <1>     push rdi
  2082 000048CF 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2083 000048D6 51                  <1>     push rcx
  2084 000048D7 F3A4                <1>     rep movsb
  2085 000048D9 59                  <1>     pop rcx
  2086 000048DA 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2087 000048E0 290D(7C070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2088 000048E6 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2089 000048ED 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2090 000048F3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2091 000048F7 31D2                <1>     xor edx, edx    ;Zero rdx
  2092 000048F9 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2093 000048FB 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2094 00004902 5F                  <1>     pop rdi
  2095 00004903 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2096 00004909 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2097 0000490B 7438                <1>     jz readExitOk ;Exit if so!
  2098 0000490D E8C7C2FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2099 00004912 7217                <1>     jc .badExit
  2100                              <1>     ;If ZF=ZE then currClustF has last cluster
  2101 00004914 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2102                              <1>     ;Else repeat
  2103                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2104 00004916 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2104 0000491E 00                  <1>
  2105 0000491F 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2106 00004926 E956FFFFFF          <1>     jmp .mainRead
  2107                              <1> .badExit:
  2108                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2109                              <1>     ; we need to update the SFT before returning
  2110 0000492B 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2111 00004931 30C0                <1>     xor al, al  ;Set ZF flag
  2112 00004933 E80D000000          <1>     call readExitOk   ;We call this
  2113 00004938 F9                  <1>     stc ;All calls which end up here return Fail!
  2114 00004939 C3                  <1>     ret
  2115                              <1> charReadExitOk:
  2116                              <1> ;Input: ecx = Number of bytes left to transfer!
  2117                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2118                              <1> ;       ZF=NZ => preserve bit 6
  2119 0000493A 7509                <1>     jnz readExitOk
  2120 0000493C E805040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2121 00004941 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~charDevNoEOF
  2122                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2123                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2124 00004945 890D(7C070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2125 0000494B E8FE030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2126                              <1>     return 
    13                              <2> %%_ret:
    14 00004950 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2127                              <1> 
  2128                              <1> writeBytes:
  2129                              <1> ;Writes the bytes from the user buffer
  2130                              <1> ;Input: ecx = Bytes to xfr
  2131                              <1> ;Returns number of bytes written in ecx if CF=NC
  2132 00004951 E8F0030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2133 00004956 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2134 0000495A 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2135 0000495C 3C00                <1>     cmp al, ReadAccess
  2136 0000495E 7509                <1>     jne .writeable
  2137                              <1> .noWrite:
  2138 00004960 B805000000          <1>     mov eax, errAccDen
  2139 00004965 31C9                <1>     xor ecx, ecx
  2140 00004967 F9                  <1>     stc
  2141 00004968 C3                  <1>     ret
  2142                              <1> .writeable:
  2143 00004969 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2144 0000496F 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2145 00004971 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2146 00004975 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2147                              <1> .skipAttribCheck:
  2148 00004977 E80C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2149 0000497C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2150 00004982 7408                <1>     jz .notRedir
  2151 00004984 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2152 00004989 CD2F                <1>     int 2Fh
  2153                              <1>     return
    13                              <2> %%_ret:
    14 0000498B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2154                              <1> .notRedir:
  2155 0000498C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2156 00004992 7510                <1>     jnz writeCharDev
  2157 00004994 E84C2B0000          <1>     call dosCrit1Enter
  2158 00004999 E84E010000          <1>     call writeDiskFile
  2159 0000499E E84C2B0000          <1>     call dosCrit1Exit
  2160                              <1>     return
    13                              <2> %%_ret:
    14 000049A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2161                              <1> writeCharDev:
  2162 000049A4 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2163                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2164 000049AB 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2165 000049B1 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2166                              <1>     ;If ecx = 0, we exit
  2167 000049B5 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2168 000049B7 85C9                <1>     test ecx, ecx
  2169 000049B9 0F846F030000        <1>     jz writeExitChar
  2170 000049BF 88D8                <1>     mov al, bl  ;Move the flags over
  2171 000049C1 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2172 000049C8 4889DF              <1>     mov rdi, rbx
  2173 000049CB 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2174 000049CD A820                <1>     test al, charDevBinary
  2175 000049CF 744A                <1>     jz .asciiDev
  2176                              <1> ;Write binary transfer here
  2177                              <1> .binaryLp:
  2178 000049D1 31C0                <1>     xor eax, eax
  2179 000049D3 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2180 000049D6 E804250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2181 000049DB 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2182 000049E2 E8E1210000          <1>     call goDriverChar
  2183 000049E7 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2184 000049EA B487                <1>     mov ah, critCharDev | critData | critWrite
  2185 000049EC 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2186 000049F3 F7C700800000        <1>     test edi, drvErrStatus
  2187 000049F9 7415                <1>     jz .binXfrOk
  2188 000049FB E8A51B0000          <1>     call charDevErr ;Invoke Int 24h
  2189 00004A00 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2190 00004A03 3C00                <1>     cmp al, critIgnore
  2191 00004A05 7409                <1>     je .binXfrOk
  2192 00004A07 3C01                <1>     cmp al, critRetry
  2193 00004A09 74C6                <1>     je .binaryLp
  2194 00004A0B E9D5000000          <1>     jmp .exitFail
  2195                              <1> .binXfrOk:
  2196 00004A10 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2197 00004A16 E913030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2198                              <1> .asciiDev:
  2199 00004A1B A802                <1>     test al, charDevConOut
  2200 00004A1D 0F859E000000        <1>     jnz .conDev
  2201 00004A23 A804                <1>     test al, charDevNulDev
  2202 00004A25 0F858F000000        <1>     jnz .nulDev
  2203                              <1>     ;Here we transfer for a generic character device in ascii mode
  2204 00004A2B 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2205 00004A2D 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2206 00004A30 0F84F8020000        <1>     je writeExitChar
  2207 00004A36 51                  <1>     push rcx
  2208 00004A37 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2209 00004A3C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2210 00004A3F E89B240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2211 00004A44 59                  <1>     pop rcx
  2212 00004A45 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2213 00004A4C 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2214                              <1> .asciiLp:
  2215 00004A50 E843DEFFFF          <1>     call checkBreak
  2216 00004A55 E872210000          <1>     call goDriver
  2217 00004A5A 57                  <1>     push rdi
  2218 00004A5B B487                <1>     mov ah, critCharDev | critData | critWrite
  2219 00004A5D 0FB73D(C4040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2220 00004A64 F7C700800000        <1>     test edi, drvErrStatus
  2221 00004A6A 741D                <1>     jz .asciiNoError
  2222 00004A6C E8341B0000          <1>     call charDevErr ;Invoke Int 24h
  2223 00004A71 5F                  <1>     pop rdi
  2224 00004A72 C705(D7040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2224 00004A7A 0000                <1>
  2225 00004A7C 3C01                <1>     cmp al, critRetry
  2226 00004A7E 74D0                <1>     je .asciiLp
  2227 00004A80 3C00                <1>     cmp al, critIgnore
  2228 00004A82 7412                <1>     je .ignoreEp
  2229 00004A84 E95C000000          <1>     jmp .exitFail
  2230                              <1> .asciiNoError:
  2231 00004A89 5F                  <1>     pop rdi
  2232 00004A8A 813D(D7040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2232 00004A92 0000                <1>
  2233 00004A94 741D                <1>     je .bytesXfrdOk
  2234                              <1> .ignoreEp:
  2235 00004A96 FFC2                <1>     inc edx ;One more char has been xfrd
  2236 00004A98 FF05(CF040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2237 00004A9E 48FFC7              <1>     inc rdi ;And our copy... 
  2238 00004AA1 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2239 00004AA4 740D                <1>     je .bytesXfrdOk
  2240 00004AA6 66C705(C4040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2240 00004AAE 00                  <1>
  2241 00004AAF FFC9                <1>     dec ecx
  2242 00004AB1 759D                <1>     jnz .asciiLp
  2243                              <1> .bytesXfrdOk:
  2244 00004AB3 89D0                <1>     mov eax, edx
  2245 00004AB5 E974020000          <1>     jmp writeExitChar
  2246                              <1> .nulDev:
  2247 00004ABA 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2248 00004ABC E96D020000          <1>     jmp writeExitChar
  2249                              <1> .conDev:
  2250 00004AC1 E84EDEFFFF          <1>     call vConSwapDriver
  2251 00004AC6 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2252 00004AC9 51                  <1>     push rcx
  2253                              <1> .conDevLp:
  2254 00004ACA AC                  <1>     lodsb
  2255 00004ACB 3C1A                <1>     cmp al, EOF
  2256 00004ACD 7409                <1>     je .conDevExit
  2257 00004ACF E8DAD9FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2258 00004AD4 FFC9                <1>     dec ecx
  2259 00004AD6 75F2                <1>     jnz .conDevLp
  2260                              <1> .conDevExit:
  2261 00004AD8 58                  <1>     pop rax ;Get initial ecx back into eax
  2262 00004AD9 29C8                <1>     sub eax, ecx
  2263 00004ADB E84CDEFFFF          <1>     call vConRetDriver
  2264 00004AE0 E949020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2265                              <1> .exitFail:
  2266 00004AE5 B805000000          <1>     mov eax, errAccDen
  2267 00004AEA F9                  <1>     stc
  2268                              <1>     return
    13                              <2> %%_ret:
    14 00004AEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2269                              <1> writeDiskFile:
  2270                              <1>     ;rdi has SFT ptr
  2271 00004AEC 8B0D(78070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2272 00004AF2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2273 00004AF9 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2274 00004B00 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2275 00004B06 0F85D7010000        <1>     jnz .badExit
  2276 00004B0C 85C9                <1>     test ecx, ecx
  2277 00004B0E 7505                <1>     jnz .nonZeroWrite
  2278 00004B10 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2279                              <1> .nonZeroWrite:
  2280                              <1>     ;Now do share check here
  2281 00004B15 E8F0310000          <1>     call retryShareIODelay
  2282 00004B1A 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2283 00004B1C E87D320000          <1>     call shareCheckWriteLockViolation
  2284 00004B21 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2285                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004B23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2286                              <1> .proceedWithWrite:
  2287                              <1> ;Ensure that all buffers are now unreferenced
  2288 00004B24 E8AFBBFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2289 00004B29 31DB                <1>     xor ebx, ebx
  2290 00004B2B 891D(74070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2291 00004B31 881D(73070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2292 00004B37 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2293                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2294 00004B3A 85C0                <1>     test eax, eax
  2295 00004B3C 751C                <1>     jnz .notStart
  2296 00004B3E E8ADBFFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2297                              <1>     ;jc .exitPrepHardErr
  2298                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B43 72DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2299 00004B45 3DFFFFFFFF          <1>     cmp eax, -1
  2300 00004B4A 0F84A5010000        <1>     je writeExit
  2301                              <1>     ;Now eax has the first cluster of chain
  2302 00004B50 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2303 00004B53 C605(73070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2304                              <1> .notStart:
  2305                              <1> ;eax has the start cluster of the file
  2306                              <1> ;Now we go to CurntOff
  2307 00004B5A 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2308 00004B60 31DB                <1>     xor ebx, ebx
  2309 00004B62 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2310 00004B68 85D2                <1>     test edx, edx
  2311 00004B6A 744D                <1>     jz .skipWalk
  2312                              <1> .goToCurrentCluster:
  2313 00004B6C E807C1FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2314                              <1>     ;jc .exitPrepHardErr
  2315                              <1>     retc   ;This can only return Fail
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B71 72B0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2316 00004B73 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2317 00004B78 752F                <1>     jne .stillInFile
  2318                              <1> .addCluster:
  2319                              <1>     ;Here we extend by one cluster
  2320 00004B7A 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2321 00004B80 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2322 00004B82 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2323 00004B87 E88ABFFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2324                              <1>     ;jc .exitPrepHardErr
  2325                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004B8C 7295                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2326 00004B8E 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2327 00004B90 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2328 00004B94 010D(74070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2329 00004B9A C605(73070000)FF    <1>     mov byte [fileGrowing], -1
  2330 00004BA1 E8D2C0FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2331                              <1>     ;jc .exitPrepHardErr
  2332                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004BA6 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004BA8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2333                              <1> .stillInFile:
  2334 00004BA9 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2335 00004BAF FFCA                <1>     dec edx ;Decrement counter
  2336 00004BB1 75B9                <1>     jnz .goToCurrentCluster
  2337                              <1> ;Now we fall out
  2338 00004BB3 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2339                              <1> .skipWalk:
  2340 00004BB9 E8B8BEFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2341                              <1>     ;Now we add the offset to this
  2342 00004BBE 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2343 00004BC5 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2344 00004BC8 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2345 00004BCF 8B0D(78070000)      <1>     mov ecx, dword [tfrLen]
  2346 00004BD5 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2347 00004BD7 751F                <1>     jnz .mainWrite  
  2348                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2349 00004BD9 F605(73070000)FF    <1>     test byte [fileGrowing], -1
  2350 00004BE0 750B                <1>     jnz .extend
  2351                              <1> ;Here we truncate where needed
  2352 00004BE2 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2353 00004BE8 E85CC0FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2354                              <1> .extend:
  2355 00004BED 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2356 00004BF0 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2357 00004BF3 E9F2000000          <1>     jmp .noByteExit ;Exit ok!
  2358                              <1> .mainWrite:
  2359 00004BF8 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2360 00004BFF 7407                <1>     jz .mainWriteNoBreak
  2361 00004C01 50                  <1>     push rax
  2362 00004C02 E891DCFFFF          <1>     call checkBreak
  2363 00004C07 58                  <1>     pop rax
  2364                              <1> .mainWriteNoBreak:
  2365                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2366 00004C08 E8E9BDFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2367 00004C0D 0F82D0000000        <1>     jc .badExit
  2368 00004C13 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2369 00004C17 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2370 00004C1E 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2371                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2372                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2373                              <1>     ; 3) Number of bytes left free in the sector
  2374 00004C21 31C0                <1>     xor eax, eax
  2375 00004C23 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2376 00004C27 89D8                <1>     mov eax, ebx
  2377 00004C29 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2378 00004C30 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]
  2379                              <1> 
  2380 00004C36 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2381 00004C38 0F47CB              <1>     cmova ecx, ebx
  2382 00004C3B 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2383 00004C3D 0F47C8              <1>     cmova ecx, eax
  2384                              <1> 
  2385 00004C40 56                  <1>     push rsi
  2386 00004C41 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2387 00004C48 51                  <1>     push rcx
  2388 00004C49 F3A4                <1>     rep movsb
  2389 00004C4B 59                  <1>     pop rcx
  2390 00004C4C E83BBCFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2391                              <1> 
  2392 00004C51 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2393 00004C57 290D(7C070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2394 00004C5D 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2395 00004C64 5E                  <1>     pop rsi
  2396                              <1> 
  2397 00004C65 8B05(78070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2398 00004C6B 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2399 00004C71 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2400 00004C73 0F847C000000        <1>     jz writeExit
  2401 00004C79 E85BBFFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2402                              <1>     ;jc .exitPrepHardErr
  2403                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004C7E 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004C80 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2404 00004C81 3DFFFFFFFF          <1>     cmp eax, -1
  2405 00004C86 7535                <1>     jne .noExtend
  2406                              <1>     ;Here we need to extend by a cluster
  2407 00004C88 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2408 00004C8E 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2409 00004C90 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2410 00004C95 E87CBEFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2411                              <1>     ;jc .exitPrepHardErr
  2412                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004C9A 72E4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2413 00004C9C 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2414 00004C9E 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2415 00004CA2 011D(74070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2416 00004CA8 C605(73070000)FF    <1>     mov byte [fileGrowing], -1
  2417 00004CAF E825BFFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2418                              <1>     ;jc .exitPrepHardErr
  2419                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004CB4 72CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2420 00004CB6 3DFFFFFFFF          <1>     cmp eax, -1
  2421 00004CBB 7415                <1>     je .noMoreClusters
  2422                              <1> .noExtend:
  2423 00004CBD 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2423 00004CC5 00                  <1>
  2424 00004CC6 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2425 00004CCD E926FFFFFF          <1>     jmp .mainWrite
  2426                              <1> .noMoreClusters:
  2427 00004CD2 56                  <1>     push rsi
  2428 00004CD3 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2429 00004CDA 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2430 00004CE0 5E                  <1>     pop rsi
  2431 00004CE1 74DA                <1>     jz .noExtend    ;If no trigger Int 24h, return success
  2432                              <1>     ;Here we future proof for triggering Int 24h.
  2433                              <1> .badExit:
  2434 00004CE3 B805000000          <1>     mov eax, errAccDen
  2435                              <1> ;.exitPrepHardErr:
  2436 00004CE8 F9                  <1>     stc
  2437                              <1>     return
    13                              <2> %%_ret:
    14 00004CE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2438                              <1> .noByteExit:
  2439 00004CEA B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2440 00004CEF FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2441                              <1> writeExit:
  2442                              <1> ;Advances the bytes on the file pointer
  2443                              <1> ;Return: ecx = Number of bytes transferred
  2444 00004CF5 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2445 00004CFC E84D000000          <1>     call updateCurrentSFT
  2446 00004D01 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2447 00004D07 7518                <1>     jnz .exit   ;These just exit as no filesize!
  2448 00004D09 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2449 00004D0B 7406                <1>     jz .noFlush
  2450 00004D0D 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2451                              <1> .noFlush:
  2452 00004D13 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2453 00004D16 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2454 00004D19 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2455 00004D1B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2456 00004D1E 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2457                              <1> .exit:
  2458 00004D21 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2459 00004D26 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2460 00004D2C F8                  <1>     clc
  2461                              <1>     return
    13                              <2> %%_ret:
    14 00004D2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2462                              <1> writeExitChar:
  2463                              <1> ;Input: eax = Number of chars transferred
  2464 00004D2E 8B0D(78070000)      <1>     mov ecx, dword [tfrLen]
  2465 00004D34 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2466 00004D36 890D(7C070000)      <1>     mov dword [tfrCntr], ecx
  2467 00004D3C EBB7                <1>     jmp short writeExit
  2468                              <1> ;-----------------------------------:
  2469                              <1> ;        File Handle routines       :
  2470                              <1> ;-----------------------------------:
  2471                              <1> 
  2472                              <1> setCurrentSFT:
  2473                              <1> ;Set the pointer in rdi as current SFT 
  2474 00004D3E 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2475                              <1>     return 
    13                              <2> %%_ret:
    14 00004D45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2476                              <1> getCurrentSFT:
  2477                              <1> ;Get the current SFT pointer in rdi
  2478 00004D46 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2479                              <1>     return 
    13                              <2> %%_ret:
    14 00004D4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2480                              <1> updateCurrentSFT:
  2481                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2482                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2483 00004D4E 57                  <1>     push rdi
  2484 00004D4F 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2485 00004D56 E8BF010000          <1>     call getBytesTransferred
  2486 00004D5B 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2487                              <1>     ;ecx has bytes transferred
  2488 00004D5E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2489 00004D64 751F                <1>     jnz .exit
  2490 00004D66 50                  <1>     push rax
  2491 00004D67 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2492 00004D6D 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2493 00004D70 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2494 00004D76 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2495 00004D79 58                  <1>     pop rax
  2496 00004D7A 51                  <1>     push rcx
  2497 00004D7B 8B0D(67070000)      <1>     mov ecx, dword [currByteF]
  2498 00004D81 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2499 00004D84 59                  <1>     pop rcx
  2500                              <1> .exit:
  2501 00004D85 5F                  <1>     pop rdi
  2502 00004D86 F8                  <1>     clc
  2503                              <1>     return 
    13                              <2> %%_ret:
    14 00004D87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2504                              <1> 
  2505                              <1> setupVarsForTransfer:
  2506                              <1> ;Computes the actual bytes to be transferred and 
  2507                              <1> ; sets up internal variables for the transfer. 
  2508                              <1> ;Works for both reading and writing
  2509                              <1> ;Input: ecx = User desired Bytes to transfer
  2510                              <1> ;       rdi = SFT pointer for the file
  2511                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2512                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2513                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2514                              <1> ;
  2515                              <1> ;Note: Does not account for a FULL disk. When writing,
  2516                              <1> ; if the disk will get full as a result of the write,
  2517                              <1> ; stop at the last byte before the transfer. If the 
  2518                              <1> ; file pointer is past the last free byte, write 0
  2519 00004D88 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2520 00004D8C 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2521 00004D93 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2522 00004D96 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2523 00004D9C 890D(78070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2524 00004DA2 890D(7C070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2525 00004DA8 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2526 00004DAE 7402                <1>     jz setupVarsForDiskTransfer
  2527 00004DB0 F8                  <1>     clc
  2528                              <1>     return
    13                              <2> %%_ret:
    14 00004DB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2529                              <1> setupVarsForDiskTransfer:
  2530                              <1> ;Extension of the above, but for Disk files only
  2531                              <1> ;Input: ecx = User desired Bytes to transfer
  2532                              <1> ;       rdi = SFT pointer for the file
  2533                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2534                              <1> ;        CF=CY: Error exit
  2535 00004DB2 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2536 00004DB5 8905(67070000)      <1>     mov dword [currByteF], eax
  2537 00004DBB 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2538                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2539 00004DBF 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2540 00004DC6 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2541 00004DC9 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2542 00004DCF 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2543 00004DD5 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2544 00004DD9 31D2                <1>     xor edx, edx    ;Zero rdx
  2545 00004DDB F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2546                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2547                              <1>     ;edx has the offset into that sector
  2548 00004DDD 8905(58070000)      <1>     mov dword [currSectF], eax
  2549 00004DE3 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2550 00004DEA 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2551 00004DEC 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2552 00004DEF 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2553 00004DF5 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2554 00004DF7 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2555 00004DFA D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2556 00004DFC 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2557 00004E02 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2558                              <1> .exit:
  2559 00004E04 F8                  <1>     clc
  2560                              <1>     return 
    13                              <2> %%_ret:
    14 00004E05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> findFreeSFT:
  2562                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2563                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2564                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2565                              <1> ;        CF=CY => eax = errNhl, error exit
  2566 00004E06 31DB                <1>     xor ebx, ebx
  2567                              <1> .mainLp:
  2568 00004E08 53                  <1>     push rbx    ;Save the sft ndx
  2569 00004E09 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2570 00004E0E 5B                  <1>     pop rbx
  2571 00004E0F 7307                <1>     jnc .sftExists
  2572 00004E11 B804000000          <1>     mov eax, errNhl
  2573 00004E16 F9                  <1>     stc
  2574                              <1>     return
    13                              <2> %%_ret:
    14 00004E17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2575                              <1> .sftExists:
  2576 00004E18 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2577 00004E1D 7427                <1>     je .sftFound
  2578 00004E1F 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2579 00004E24 751C                <1>     jne .gotoNextNdx
  2580                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2581 00004E26 53                  <1>     push rbx
  2582 00004E27 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2583 00004E2E 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2584 00004E32 750B                <1>     jne .netGoToNextNdx
  2585 00004E34 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2586 00004E3B 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2587                              <1> .netGoToNextNdx:
  2588 00004E3F 5B                  <1>     pop rbx
  2589 00004E40 7404                <1>     je .sftFound
  2590                              <1> .gotoNextNdx:
  2591 00004E42 FFC3                <1>     inc ebx
  2592 00004E44 EBC2                <1>     jmp short .mainLp
  2593                              <1> .sftFound:
  2594 00004E46 53                  <1>     push rbx
  2595 00004E47 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2596 00004E4C 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2597 00004E53 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2598 00004E57 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2599 00004E5E 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2600 00004E62 5B                  <1>     pop rbx
  2601 00004E63 F8                  <1>     clc
  2602                              <1>     return
    13                              <2> %%_ret:
    14 00004E64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2603                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2604                              <1> ;Return a pointer to the SFT entry in rdi
  2605                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2606                              <1> ;Output: rdi = SFT pointer
  2607 00004E65 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2608                              <1> .walk:
  2609 00004E6C 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2610 00004E70 7212                <1>     jb .thisTable
  2611 00004E72 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2612 00004E76 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2613 00004E79 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2614 00004E80 75EA                <1>     jne .walk
  2615 00004E82 F9                  <1>     stc
  2616                              <1>     return
    13                              <2> %%_ret:
    14 00004E83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2617                              <1> .thisTable:
  2618 00004E84 50                  <1>     push rax
  2619 00004E85 52                  <1>     push rdx
  2620 00004E86 B84F000000          <1>     mov eax, sft_size
  2621 00004E8B F7E3                <1>     mul ebx
  2622 00004E8D 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2623 00004E90 5A                  <1>     pop rdx
  2624 00004E91 58                  <1>     pop rax
  2625 00004E92 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2626                              <1>     return
    13                              <2> %%_ret:
    14 00004E99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2627                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2628                              <1> ;Return a zero extended value in rdi for the SFT entry
  2629                              <1> ;Input: bx = JFT handle (we zero extend)
  2630                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2631                              <1> ;        CF=CY => al = Error code, Fail
  2632 00004E9A 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2633 00004E9D 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2634 00004EA4 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2635 00004EA8 7204                <1>     jb .ok
  2636 00004EAA B006                <1>     mov al, errBadHdl
  2637 00004EAC F9                  <1>     stc
  2638                              <1>     return
    13                              <2> %%_ret:
    14 00004EAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2639                              <1> .ok:
  2640 00004EAE 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2641 00004EB4 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2642 00004EB6 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2643 00004EB8 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2644 00004EBC 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2645 00004EC0 EB0B                <1>     jmp short .pspOkExit
  2646                              <1> .pspJftBelow:
  2647 00004EC2 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2648                              <1> .pspJftOk:
  2649 00004EC8 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2650                              <1> .pspOkExit:
  2651 00004ECD F8                  <1>     clc
  2652                              <1>     return
    13                              <2> %%_ret:
    14 00004ECE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2653                              <1> findFreeJFTEntry:
  2654                              <1> ;Finds a free JFT entry in the currentPSP.
  2655                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2656                              <1> ;        CF=CY => al=errNhl
  2657 00004ECF 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2658                              <1> .searchLp:
  2659 00004ED1 E8C4FFFFFF          <1>     call getJFTPtr
  2660 00004ED6 7209                <1>     jc .badExit
  2661 00004ED8 803FFF              <1>     cmp byte [rdi], -1
  2662                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EDB 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2663 00004EDD FFC3                <1>     inc ebx
  2664 00004EDF EBF0                <1>     jmp short .searchLp
  2665                              <1> .badExit:
  2666 00004EE1 B004                <1>     mov al, errNhl
  2667 00004EE3 F9                  <1>     stc
  2668                              <1>     return
    13                              <2> %%_ret:
    14 00004EE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2669                              <1> getSFTPtr:
  2670                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2671                              <1> ;Input: bx = JFT handle
  2672                              <1> ;Output: CF=NC: rdi = SFT pointer
  2673                              <1> ;        CF=CY: Error, ax=Error code
  2674 00004EE5 E815000000          <1>     call derefSFTPtr
  2675                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EEA 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2676 00004EEC 50                  <1>     push rax
  2677 00004EED 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2678 00004EF4 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2679 00004EF8 58                  <1>     pop rax
  2680                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004EF9 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2681 00004EFB B006                <1>     mov al, errBadHdl   ;Error code
  2682 00004EFD F9                  <1>     stc         ;Reset CF
  2683                              <1>     return
    13                              <2> %%_ret:
    14 00004EFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2684                              <1> 
  2685                              <1> derefSFTPtr:
  2686                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2687                              <1> ;Input: bx = File handle (gets zero extended)
  2688                              <1> ;Output: CF=NC: rdi = SFT pointer
  2689                              <1> ;        CF=CY: Error, ax=Error code
  2690 00004EFF E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2691 00004F04 7205                <1>     jb .fail
  2692 00004F06 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2693 00004F09 7504                <1>     jne .ok
  2694                              <1> .fail:
  2695 00004F0B B006                <1>     mov al, errBadHdl
  2696 00004F0D F9                  <1>     stc
  2697                              <1>     return
    13                              <2> %%_ret:
    14 00004F0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2698                              <1> .ok:
  2699 00004F0F 53                  <1>     push rbx    ;Preserve the JFT handle
  2700 00004F10 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2701 00004F13 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2702 00004F18 5B                  <1>     pop rbx 
  2703                              <1>     return
    13                              <2> %%_ret:
    14 00004F19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2704                              <1> 
  2705                              <1> getBytesTransferred:
  2706 00004F1A 8B0D(7C070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2707 00004F20 F7D9                <1>     neg ecx ;Multiply by -1
  2708 00004F22 030D(78070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2709                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 00004F28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2710                              <1> 
  2711                              <1> getSFTndxInheritable:
  2712                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2713                              <1> ;Input: ebx = SFTndx (word)
  2714                              <1> ;Output: 
  2715                              <1> ;   ZF=ZE => Inheritable
  2716                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2717 00004F29 57                  <1>     push rdi
  2718 00004F2A E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2719 00004F2F 7208                <1>     jc .badNdx
  2720 00004F31 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2721 00004F37 5F                  <1>     pop rdi
  2722                              <1>     return
    13                              <2> %%_ret:
    14 00004F38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2723                              <1> .badNdx:
  2724 00004F39 31FF                <1>     xor edi, edi
  2725 00004F3B FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2726 00004F3D F8                  <1>     clc
  2727 00004F3E 5F                  <1>     pop rdi
  2728                              <1>     return
    13                              <2> %%_ret:
    14 00004F3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2729                              <1> 
  2730                              <1> incrementOpenCount:
  2731                              <1> ;Given a SFTndx, this function will increment it's open count
  2732                              <1> ;Output:
  2733                              <1> ;   CF=NC => sftndx ok, count incremented
  2734                              <1> ;   CF=CY => Bad ndx
  2735 00004F40 57                  <1>     push rdi
  2736 00004F41 E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2737 00004F46 7203                <1>     jc .exit
  2738 00004F48 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2739                              <1> .exit:
  2740 00004F4B 5F                  <1>     pop rdi
  2741                              <1>     return
    13                              <2> %%_ret:
    14 00004F4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2742                              <1> 
  2743                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2744                              <1> ;Input: rdi = SFT pointer
  2745                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2746 00004F4D 9C                  <1>     pushfq
  2747 00004F4E 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2748 00004F51 FFC8                <1>     dec eax     ;Decrement count
  2749 00004F53 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2750 00004F55 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2751                              <1> .exit:
  2752 00004F57 9D                  <1>     popfq
  2753 00004F58 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2754                              <1>     return
    13                              <2> %%_ret:
    14 00004F5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2755                              <1> 
  2756                              <1> ;Buffer Wrapper
  2757                              <1> writeThroughBuffersForHandle:
  2758                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2759 00004F5C 57                  <1>     push rdi
  2760 00004F5D 55                  <1>     push rbp
  2761 00004F5E 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2762 00004F65 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2763 00004F6B 751C                <1>     jnz .exit
  2764 00004F6D FF35(0A070000)      <1>     push qword [workingDPB]
  2765 00004F73 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2766 00004F77 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2767 00004F7E E898B7FFFF          <1>     call flushAllBuffersForDPB
  2768 00004F83 8F05(0A070000)      <1>     pop qword [workingDPB]
  2769                              <1> .exit:
  2770 00004F89 5D                  <1>     pop rbp
  2771 00004F8A 5F                  <1>     pop rdi
  2772                              <1>     return
    13                              <2> %%_ret:
    14 00004F8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2773                              <1> 
  2774                              <1> setDPBfromSFT:
  2775                              <1> ;Sets and updates the DPB from an SFT ptr
  2776                              <1> ;Input: rdi -> sft
  2777                              <1> ;Output: CF=NC: workingDPB set
  2778                              <1> ;        CF=CY: Error fail, exit
  2779 00004F8C 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2780 00004F90 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
  2781 00004F94 8805(09070000)      <1>     mov byte [workingDrv], al
  2782 00004F9A E82D200000          <1>     call setWorkingDPB
  2783 00004F9F E8EA1D0000          <1>     call ensureDiskValid
  2784                              <1>     return
    13                              <2> %%_ret:
    14 00004FA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00004FA5 3C0F                <1>     cmp al, 15
    36 00004FA7 7747                <1>     ja .invalidFunction
    37 00004FA9 84C0                <1>     test al, al
    38 00004FAB 745B                <1>     jz .getDevWord
    39 00004FAD 3C01                <1>     cmp al, 1
    40 00004FAF 746E                <1>     je .setDevWord
    41 00004FB1 2C02                <1>     sub al, 2
    42 00004FB3 3C03                <1>     cmp al, 3
    43 00004FB5 7673                <1>     jbe .ioctlStringFunctions
    44 00004FB7 2C04                <1>     sub al, 4
    45 00004FB9 3C01                <1>     cmp al, 1
    46 00004FBB 0F8644010000        <1>     jbe .ioStatusFunctions
    47 00004FC1 2C02                <1>     sub al, 2
    48 00004FC3 3C02                <1>     cmp al, 2
    49 00004FC5 0F86CD010000        <1>     jbe .devControl
    50 00004FCB 2C03                <1>     sub al, 3
    51 00004FCD 0F8498020000        <1>     jz .setSharingCount
    52 00004FD3 FEC8                <1>     dec al
    53 00004FD5 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 00004FDB FEC8                <1>     dec al
    55 00004FDD 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 00004FE3 FEC8                <1>     dec al
    57 00004FE5 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 00004FEB E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004FF0 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004FF5 E936250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004FFA B805000000          <1>     mov eax, errAccDen
    65 00004FFF EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00005001 B806000000          <1>     mov eax, errBadHdl
    68 00005006 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00005008 E8F2FEFFFF          <1>     call derefSFTPtr
    74 0000500D 72F2                <1>     jc .badHandle
    75 0000500F 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00005013 30C0                <1>     xor al, al
    77 00005015 E847200000          <1>     call getUserRegs
    78 0000501A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 0000501E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 0000501F E8DBFEFFFF          <1>     call derefSFTPtr
    84 00005024 72DB                <1>     jc .badHandle 
    85 00005026 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00005029 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 0000502A 0FB6F3              <1>     movzx esi, bl
    96 0000502D 488D1D(C1040000)    <1>     lea rbx, primReqHdr
    97 00005034 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 0000503B C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00005042 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00005045 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00005048 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 0000504C 51                  <1>     push rcx
   105 0000504D 52                  <1>     push rdx
   106 0000504E B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00005053 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00005058 A801                <1>     test al, 1  ;If set, this is a write operation
   109 0000505A 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 0000505D 7507                <1>     jnz .notWrite
   111 0000505F 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00005066 5A                  <1>     pop rdx
   114 00005067 59                  <1>     pop rcx
   115 00005068 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 0000506B 3C01                <1>     cmp al, 1
   117 0000506D 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 0000506F 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00005072 E888FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00005077 7288                <1>     jc .badHandle 
   122 00005079 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00005080 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00005086 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 0000508C 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00005090 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00005097 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 0000509A 31C0                <1>     xor eax, eax
   130 0000509C EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 0000509E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 000050A5 89F0                <1>     mov eax, esi
   136 000050A7 53                  <1>     push rbx
   137 000050A8 E848200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 000050AD 5B                  <1>     pop rbx
   139 000050AE 730A                <1>     jnc .okDrive
   140 000050B0 B80F000000          <1>     mov eax, errBadDrv
   141 000050B5 E976240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 000050BA 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 000050C1 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 000050C5 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 000050C8 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000050CB 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000050CF 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000050D2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000050D6 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000050D9 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000050DF 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 000050E5 51                  <1>     push rcx    ;Push xfrctr
   159 000050E6 52                  <1>     push rdx    ;Buffer Ptr
   160 000050E7 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 000050ED E8DA1A0000          <1>     call goDriver
   162 000050F2 5A                  <1>     pop rdx
   163 000050F3 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 000050F4 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 000050FA 0F8422240000        <1>     jz extGoodExit
   167 00005100 E91A030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00005105 E8F5FDFFFF          <1>     call derefSFTPtr
   173 0000510A 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00005110 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   175 00005117 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 0000511A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00005121 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00005127 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 0000512D C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 00005134 B906000000          <1>     mov ecx, drvINSTATUS
   181 00005139 BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 0000513E 84C0                <1>     test al, al
   183 00005140 0F45CA              <1>     cmovnz ecx, edx
   184 00005143 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00005146 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 0000514C 7416                <1>     jz .ioStatDisk
   187 0000514E C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00005155 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 0000515C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00005160 30C0                <1>     xor al, al
   191 00005162 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00005164 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 0000516B 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 0000516F 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00005172 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00005175 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 00005179 E84E1A0000          <1>     call goDriver
   200 0000517E 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00005184 0F8595020000        <1>     jnz failIOCTLCall
   202 0000518A 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00005190 7403                <1>     jz .notBusyExit
   204 00005192 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 00005194 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 00005195 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00005197 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 00005198 84C0                <1>     test al, al
   216 0000519A 746D                <1>     jz .remTest
   217 0000519C A801                <1>     test al, 1
   218 0000519E 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 000051A0 E85AFDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 000051A5 0F8256FEFFFF        <1>     jc .badHandle 
   222 000051AB 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 000051AF E8AD1E0000          <1>     call getUserRegs
   225 000051B4 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 000051B8 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 000051BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 000051BB 88D8                <1>     mov al, bl
   233 000051BD E8331F0000          <1>     call getCDS
   234 000051C2 730A                <1>     jnc .devTestOkDrive
   235 000051C4 B80F000000          <1>     mov eax, errBadDrv
   236 000051C9 E962230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 000051CE 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 000051D5 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 000051D9 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 000051DE 7513                <1>     jnz .remoteDrive
   242 000051E0 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 000051E4 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 000051E8 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 000051EC 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 000051F1 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 000051F3 6689D3              <1>     mov bx, dx
   249 000051F6 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 000051FB 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 00005200 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 00005202 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 00005207 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 00005209 88D8                <1>     mov al, bl
   258 0000520B E8E51E0000          <1>     call getCDS
   259 00005210 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 00005212 B80F000000          <1>     mov eax, errBadDrv
   262 00005217 E914230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 0000521C 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 00005223 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 00005229 75E7                <1>     jnz .remTestBadDrv
   267 0000522B 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   268 00005232 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005236 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 00005239 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 0000523D 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 00005243 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 00005249 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 0000524C C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005250 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005256 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 00005259 E86E190000          <1>     call goDriver
   278 0000525E 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005262 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 00005267 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000526A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 0000526B 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 00005272 6685D2              <1>     test dx, dx
   288 00005275 0F8475FDFFFF        <1>     jz .invalidFunction
   289 0000527B 668915(21000000)    <1>     mov word [shareDelay], dx
   290 00005282 31C0                <1>     xor eax, eax
   291 00005284 E999220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 00005289 E857FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 0000528E 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 00005290 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 00005297 B806000000          <1>     mov eax, errBadHdl
   299 0000529C E98F220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 000052A1 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 000052A7 75E7                <1>     jnz .ioctrlBadHandle
   303 000052A9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000052AF 74DF                <1>     jz .ioctrlBadHandle
   305 000052B1 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000052B5 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000052B7 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000052B9 51                  <1>     push rcx
   310 000052BA 52                  <1>     push rdx
   311 000052BB E8351E0000          <1>     call getCDS ;Sets the current CDS
   312 000052C0 5A                  <1>     pop rdx
   313 000052C1 59                  <1>     pop rcx
   314 000052C2 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000052C4 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 000052CB 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000052CF 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000052D3 7406                <1>     jz .badDrv
   320 000052D5 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000052D9 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000052DB C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000052E2 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000052E7 E944220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000052EC 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 000052F0 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 000052F4 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 000052F7 8805(C2040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   332 000052FD 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 00005300 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005306 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 00005308 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 0000530F B801000000          <1>     mov eax, errInvFnc
   340 00005314 E917220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 00005319 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   344 00005320 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 00005323 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 00005327 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 0000532D 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005331 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005335 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 00005338 E8241D0000          <1>     call getUserRegs
   351 0000533D 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005341 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005345 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 00005349 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 0000534D 4889FE              <1>     mov rsi, rdi
   356 00005350 E877180000          <1>     call goDriver
   357 00005355 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 0000535B 0F84C1210000        <1>     jz extGoodExit
   359 00005361 E9B9000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005366 88D8                <1>     mov al, bl
   363 00005368 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   364 0000536F C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 00005373 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 00005376 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 0000537C 53                  <1>     push rbx
   368 0000537D E8731D0000          <1>     call getCDS
   369 00005382 8805(09070000)      <1>     mov byte [workingDrv], al
   370 00005388 5B                  <1>     pop rbx
   371 00005389 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 0000538F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 00005396 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 0000539A 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 0000539E 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 000053A1 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 000053A4 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000053AA 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000053B0 E817180000          <1>     call goDriver
   381 000053B5 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000053BB 7405                <1>     jz .getDrvOk
   383 000053BD E95D000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000053C2 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000053C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000053C6 88D8                <1>     mov al, bl
   389 000053C8 488D1D(C1040000)    <1>     lea rbx, primReqHdr
   390 000053CF C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000053D3 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000053D6 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000053DC 53                  <1>     push rbx
   394 000053DD E8131D0000          <1>     call getCDS
   395 000053E2 8805(09070000)      <1>     mov byte [workingDrv], al
   396 000053E8 5B                  <1>     pop rbx
   397 000053E9 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 000053EF 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 000053F6 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 000053FA 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 000053FE 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 00005401 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 00005404 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 0000540A 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 00005410 E8B7170000          <1>     call goDriver
   406 00005415 30C0                <1>     xor al, al
   407 00005417 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000541D 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 0000541F 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 00005423 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 00005429 E84B110000          <1>     call xlatHardError
   415 0000542E 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005435 E9F6200000          <1>     jmp extErrExit
   417                              <1> 
    38                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 0000543A E8A6200000          <1>     call dosCrit1Enter
    15 0000543F B806000000          <1>     mov eax, 6
    16 00005444 39C3                <1>     cmp ebx, eax
    17 00005446 0F42D8              <1>     cmovb ebx, eax
    18 00005449 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 0000544B 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005452 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 00005459 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005460 31ED                <1>     xor ebp, ebp    
    24 00005462 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005464 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000546B 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 0000546E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005471 7409                <1>     je .walk1
    30 00005473 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005476 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 0000547C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005484 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 0000548A 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 0000548D 744A                <1>     je .det0    ;Determine if this block is useful
    41 0000548F 31C9                <1>     xor ecx, ecx
    42 00005491 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00005494 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 0000549B 48C1E104            <1>     shl rcx, 4
    46 0000549F 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 000054A2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 000054A5 7409                <1>     je .cons1
    49 000054A7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000054AA 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000054B0 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000054B8 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000054BA 31C9                <1>     xor ecx, ecx
    56 000054BC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000054BF 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000054C5 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000054C8 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000054CA 31D2                <1>     xor edx, edx
    61 000054CC 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000054CF 48895608            <1>     mov qword [rsi + 8], rdx
    63 000054D3 3C5A                <1>     cmp al, mcbMarkEnd
    64 000054D5 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000054D7 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000054D9 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000054DC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000054DF 39D9                <1>     cmp ecx, ebx
    72 000054E1 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000054E3 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000054EA 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000054F1 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000054F4 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 000054F6 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 000054FD 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 000054FF 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00005501 7209                <1>     jb .walk2
    83 00005503 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005505 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 0000550C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 0000550F 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005511 31C9                <1>     xor ecx, ecx
    89 00005513 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005516 48C1E104            <1>     shl rcx, 4
    91 0000551A 4881C610000000      <1>     add rsi, mcb.program
    92 00005521 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005524 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005529 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005530 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005532 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 00005539 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000553C 0F84A8000000        <1>     jz .allocFail
   102 00005542 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005544 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005547 31C9                <1>     xor ecx, ecx
   105 00005549 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000554C 29D9                <1>     sub ecx, ebx
   107 0000554E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005554 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005557 48C1E104            <1>     shl rcx, 4
   110 0000555B 4881C610000000      <1>     add rsi, mcb.program
   111 00005562 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005565 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005567 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000556A EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000556C 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005573 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 0000557A 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005582 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005585 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005587 31C9                <1>     xor ecx, ecx
   123 00005589 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000558C 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 0000558E 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005590 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005596 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005599 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 0000559B C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 0000559E 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 000055A1 4881C710000000      <1>     add rdi, mcb.program
   133 000055A8 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000055AE 48C1E304            <1>     shl rbx, 4
   135 000055B2 4801DF              <1>     add rdi, rbx
   136 000055B5 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000055B7 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000055BF 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000055C2 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000055C9 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000055CD 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000055D4 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000055D8 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000055DB 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000055DF E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000055E4 E8061F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000055E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000055EA 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000055F1 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000055F3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000055F6 7409                <1>     je .af1
   157 000055F8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000055FB 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00005601 31C9                <1>     xor ecx, ecx
   161 00005603 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005606 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 0000560E 7505                <1>     jne .af2
   164 00005610 39D9                <1>     cmp ecx, ebx
   165 00005612 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005615 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005618 7410                <1>     je .afExit
   169 0000561A 48C1E104            <1>     shl rcx, 4
   170 0000561E 4881C610000000      <1>     add rsi, mcb.program
   171 00005625 4801CE              <1>     add rsi, rcx
   172 00005628 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 0000562A B808000000          <1>     mov eax, errNoMem
   175 0000562F 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 00005636 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005639 E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 0000563E E8A21E0000          <1>     call dosCrit1Enter
   183 00005643 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 0000564A 31C9                <1>     xor ecx, ecx
   185 0000564C 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005653 4889F7              <1>     mov rdi, rsi
   187 00005656 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005659 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 0000565D 4881C610000000      <1>     add rsi, mcb.program
   190 00005664 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005667 31C9                <1>     xor ecx, ecx
   193 00005669 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000566C 7409                <1>     je .valid
   195 0000566E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005671 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005677 4939F0              <1>     cmp r8, rsi
   199 0000567A 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000567C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 0000567F 0F84A5000000        <1>     je .blockError
   203 00005685 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005688 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000568C 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005693 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005696 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005698 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 000056A0 0F8484000000        <1>     je .blockError
   213 000056A6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000056AE 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000056B6 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000056B8 31C9                <1>     xor ecx, ecx
   218 000056BA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000056BD 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000056C3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000056C6 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000056C8 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000056CA 31C9                <1>     xor ecx, ecx
   225 000056CC 48890E              <1>     mov qword [rsi], rcx
   226 000056CF 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000056D3 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000056D6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000056D9 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000056DB 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000056DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000056E1 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000056E5 4881C110000000      <1>     add rcx, mcb.program
   236 000056EC 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000056EF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 000056F7 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 000056F9 31C9                <1>     xor ecx, ecx
   241 000056FB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 000056FE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005704 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005707 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005709 8807                <1>     mov byte [rdi + mcb.marker], al
   247 0000570B 31C9                <1>     xor ecx, ecx
   248 0000570D 48890E              <1>     mov qword [rsi], rcx
   249 00005710 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005714 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005719 E8D11D0000          <1>     call dosCrit1Exit
   253 0000571E 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 00005725 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005729 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 0000572A C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005731 B809000000          <1>     mov eax, errMemAddr
   259 00005736 E8F51D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 0000573B E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005740 E8AA1D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005745 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005746 E89A1D0000          <1>     call dosCrit1Enter
   268 0000574B 85DB                <1>     test ebx, ebx
   269 0000574D 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005753 B806000000          <1>     mov eax, 6
   271 00005758 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 0000575A 0F42D8              <1>     cmovb ebx, eax
   273 0000575D 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005764 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005767 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000576A 7409                <1>     je .ctn
   277 0000576C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 0000576F 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005775 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 0000577D 74AB                <1>     je freeMemory.blockError
   284 0000577F 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005782 31C9                <1>     xor ecx, ecx
   286 00005784 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005787 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005789 0F8791000000        <1>     ja .growth
   289 0000578F 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005795 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005797 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 0000579D 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 000057A0 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000057A6 48C1E304            <1>     shl rbx, 4
   296 000057AA 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000057B1 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000057B4 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000057B6 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000057B9 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000057BB 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000057C3 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000057C6 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000057C8 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000057CE 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000057D1 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000057D5 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000057DC 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000057DF 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000057E2 7409                <1>     je .shrinkAbsorb
   312 000057E4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000057E7 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000057ED 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 000057F5 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 000057FB 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 000057FD 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 000057FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005802 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005805 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005808 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 0000580B 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 0000580F 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005812 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005814 48890E              <1>     mov qword [rsi], rcx
   329 00005817 48894E08            <1>     mov qword [rsi + 8], rcx
   330 0000581B E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005820 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005823 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005829 31C9                <1>     xor ecx, ecx
   337 0000582B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 0000582E 48C1E104            <1>     shl rcx, 4
   339 00005832 4889F7              <1>     mov rdi, rsi    
   340 00005835 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 0000583C 4801CE              <1>     add rsi, rcx
   342 0000583F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005842 7409                <1>     je .growthOK
   344 00005844 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005847 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 0000584D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005855 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005857 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005859 31C9                <1>     xor ecx, ecx
   353 0000585B 31D2                <1>     xor edx, edx
   354 0000585D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005860 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005866 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005869 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 0000586B 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 0000586D 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005870 775E                <1>     ja .notEnuffMem1
   361 00005872 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005874 81FA01000000        <1>     cmp edx, 1
   363 0000587A 744E                <1>     je .notEnuffMem2
   364 0000587C 31C9                <1>     xor ecx, ecx
   365 0000587E 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005881 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005885 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005888 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 0000588B 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005892 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005896 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005899 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 0000589D 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 0000589F 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 000058A1 7411                <1>     jz .exit
   378 000058A3 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000058A9 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000058AC 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000058B4 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000058B9 E8311C0000          <1>     call dosCrit1Exit
   384 000058BE 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 000058C5 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000058C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000058CA FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000058CC EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 000058CE 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 000058D0 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 000058D5 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 000058DC 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 000058DF E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 000058E4 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 000058E9 E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 000058EE 84C0                <1>     test al, al
   402 000058F0 741F                <1>     jz .get
   403 000058F2 3C02                <1>     cmp al, 2
   404 000058F4 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 000058F6 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 000058FD 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005901 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005907 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 0000590B E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005910 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005911 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005918 31C0                <1>     xor eax, eax
   415 0000591A 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005920 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005923 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005927 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 0000592C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 0000592D B801000000          <1>     mov eax, errInvFnc
   422 00005932 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005934 50                  <1>     push rax
   428 00005935 53                  <1>     push rbx
   429 00005936 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 0000593D 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005940 7408                <1>     je .ok1
   433 00005942 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005945 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005947 5B                  <1>     pop rbx
   437 00005948 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005949 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 0000594A 31C0                <1>     xor eax, eax
   441 0000594C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 0000594F 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005953 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 0000595A 4801C3              <1>     add rbx, rax
   445 0000595D EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 0000595F 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005960 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005961 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00005963 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 0000596A E9C11B0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 0000596F C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00005976 E8B51B0000          <1>     call extErrExit ;Error thru the unified error handler
   457 0000597B EBB7                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    39                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 0000597D 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 0000597F E9D9190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005984 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 0000598A C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 0000598D B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005992 E9C6190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005997 C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 0000599E 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 000059A5 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 000059A7 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 000059A8 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000059AA 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 000059B1 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000059B5 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000059B6 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000059BD 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000059C1 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000059C5 4C89C6              <1>     mov rsi, r8
    52 000059C8 4889D7              <1>     mov rdi, rdx
    53 000059CB B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000059D0 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000059D3 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000059DB F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000059E2 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000059E4 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000059EC 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000059F0 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000059F4 31C9                <1>     xor ecx, ecx
    64 000059F6 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 000059FB 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 000059FF B0FF                <1>     mov al, -1
    67 00005A01 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005A03 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005A05 E890F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005A0A 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005A0D 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005A11 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005A15 67E31C              <1>     jecxz .copy
    77 00005A18 FFC9                <1>     dec ecx
    78 00005A1A AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005A1B 0FB6D8              <1>     movzx ebx, al
    80 00005A1E 53                  <1>     push rbx
    81 00005A1F E805F5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005A24 58                  <1>     pop rax
    83 00005A25 7508                <1>     jnz .badJFT
    84 00005A27 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005A28 E813F5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005A2D EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005A2F 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005A32 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005A34 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005A3B 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005A3C 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005A3F 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005A43 B022                <1>     mov al, 22h
    97 00005A45 E8E9150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005A4A 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005A4D 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005A4F B023                <1>     mov al, 23h
   101 00005A51 E8DD150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005A56 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005A59 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005A5B B024                <1>     mov al, 24h
   105 00005A5D E8D1150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005A62 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005A65 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005A67 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005A6C 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005A72 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005A77 C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005A7E 81FA06000000        <1>     cmp edx, 6
   120 00005A84 7305                <1>     jae .aboveMinimum
   121 00005A86 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005A8B 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005A92 89D3                <1>     mov ebx, edx
   129 00005A94 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005A95 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005A96 E8ABFCFFFF          <1>     call reallocMemory
   132 00005A9B 5B                  <1>     pop rbx
   133 00005A9C 58                  <1>     pop rax
   134 00005A9D 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005A9F 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005AA3 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005AA5 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005AA7 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005AA9 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005AAF F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005AB6 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005AB8 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005ABE C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005AC5 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005ACB 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005AD2 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005AD9 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005ADD B024                <1>     mov al, 24h
   158 00005ADF E8801C0000          <1>     call setIntVector
   159 00005AE4 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005AE8 B023                <1>     mov al, 23h
   161 00005AEA E8751C0000          <1>     call setIntVector
   162 00005AEF 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005AF3 B022                <1>     mov al, 22h
   164 00005AF5 E86A1C0000          <1>     call setIntVector
   165                              <1> 
   166 00005AFA B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005AFC CD2A                <1>     int 2Ah
   168 00005AFE C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;Aborts now get translated temporarily
   169 00005B05 B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005B0A 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005B11 CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005B13 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005B1A 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005B1D 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005B21 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005B24 0F8494000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005B2A 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005B31 747A                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181 00005B33 803D(06070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   182 00005B3A 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   183 00005B3C B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   184 00005B41 CD2F                <1>     int 2Fh
   185                              <1> .skipAbortNetClose:
   186 00005B43 FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   187 00005B49 FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   188                              <1> ;Now close file handles
   189 00005B4F 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   190 00005B56 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   191 00005B5A 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   192                              <1> .hdlLp:
   193 00005B5C 53                  <1>     push rbx
   194 00005B5D 51                  <1>     push rcx
   195 00005B5E E874D9FFFF          <1>     call closeFileHdl
   196 00005B63 59                  <1>     pop rcx
   197 00005B64 5B                  <1>     pop rbx
   198 00005B65 FFC3                <1>     inc ebx ;Goto next handle to close
   199 00005B67 39CB                <1>     cmp ebx, ecx
   200 00005B69 75F1                <1>     jne .hdlLp   ;Keep looping for all entries in the JFT 
   201                              <1> ;Now free MCB's owned by task
   202 00005B6B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   203                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   204                              <1>     ; with the currentPSP signature and free them.
   205 00005B72 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   206                              <1> .wlkMcb:  ;And walk the chain
   207                              <1> ;First verify the address in rsi is a valid mcb
   208 00005B79 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   209 00005B7B 80F94D              <1>     cmp cl, mcbMarkCtn
   210 00005B7E 7405                <1>     je .checkToFree
   211 00005B80 80F95A              <1>     cmp cl, mcbMarkEnd
   212 00005B83 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   213                              <1> .checkToFree:
   214 00005B85 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   215 00005B89 750F                <1>     jne .noFree
   216 00005B8B 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   217 00005B8F 53                  <1>     push rbx
   218 00005B90 51                  <1>     push rcx
   219 00005B91 56                  <1>     push rsi
   220 00005B92 E8A7FAFFFF          <1>     call freeMemory ;Free this memory block
   221 00005B97 5E                  <1>     pop rsi
   222 00005B98 59                  <1>     pop rcx
   223 00005B99 5B                  <1>     pop rbx
   224                              <1>     ;If an error occured, the internal vars will be set.
   225                              <1> .noFree:
   226 00005B9A 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   227 00005B9D 740E                <1>     je .freeOk          ;Skip if we are
   228 00005B9F 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   229 00005BA2 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   230 00005BA6 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   231 00005BAB EBCC                <1>     jmp short .wlkMcb
   232                              <1> .freeOk:
   233 00005BAD FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   234 00005BB3 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   235 00005BB7 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   236                              <1> .ownParent:
   237 00005BBE B0FF                <1>     mov al, -1  ;Flush all drive buffers
   238 00005BC0 E820190000          <1>     call dosCrit1Enter
   239 00005BC5 E863ABFFFF          <1>     call flushAllBuffersForDrive
   240 00005BCA E820190000          <1>     call dosCrit1Exit
   241 00005BCF FA                  <1>     cli
   242 00005BD0 C605(96040000)00    <1>     mov byte [Int24Trans], 0    
   243 00005BD7 C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   244 00005BDE C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   245 00005BE5 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   246 00005BEC 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   247                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   248                              <1>     ; the ret ptr and the flags
   249 00005BF0 B022                <1>     mov al, 22h
   250 00005BF2 E83C140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   251 00005BF7 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   252 00005BFC 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   253 00005C05 E8AD180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   254 00005C0A 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    40                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005C0C 55                  <1>     push rbp
   100 00005C0D 4889E5              <1>     mov rbp, rsp
   101 00005C10 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005C17 31C9                <1>     xor ecx, ecx
   104 00005C19 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105 00005C1D 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   106 00005C21 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   107 00005C25 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   108 00005C29 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   109                              <1> 
   110 00005C2D B403                <1>     mov ah, execOverlay
   111 00005C2F F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   112 00005C36 7402                <1>     jz short .noMulti
   113 00005C38 B404                <1>     mov ah, execBkgrnd
   114                              <1> .noMulti:
   115 00005C3A 38E0                <1>     cmp al, ah
   116 00005C3C 7615                <1>     jbe .validSubfunction
   117                              <1> .badSubFunction:
   118 00005C3E B801000000          <1>     mov eax, errInvFnc
   119 00005C43 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   120                              <1> .badExit:
   121 00005C4A 4889EC              <1>     mov rsp, rbp
   122 00005C4D 5D                  <1>     pop rbp
   123 00005C4E E9DD180000          <1>     jmp extErrExit
   124                              <1> 
   125                              <1> .validSubfunction:
   126 00005C53 3C02                <1>     cmp al, execInvld
   127 00005C55 74E7                <1>     je .badSubFunction
   128                              <1>     ;Save registers for each function call
   129 00005C57 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   130 00005C5B 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   131 00005C5F 0FB6C0              <1>     movzx eax, al
   132 00005C62 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   133 00005C66 4889D7              <1>     mov rdi, rdx
   134 00005C69 E870150000          <1>     call strlen ;Get string length in cx
   135 00005C6E 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   136                              <1>     ;Now open the file we wanna yeet to
   137 00005C72 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   138 00005C74 55                  <1>     push rbp    ;Preserve local frame ptr
   139 00005C75 E81BD7FFFF          <1>     call openFileHdl
   140 00005C7A 5D                  <1>     pop rbp
   141 00005C7B 72CD                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00005C7D 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00005C81 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 00005C84 E876F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 00005C89 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00005C8D F7C280000000        <1>     test edx, devCharDev
   148 00005C93 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 00005C95 B002                <1>     mov al, errFnf
   150 00005C97 E92B060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 00005C9C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 00005CA4 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154 00005CAA 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   155 00005CAE 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   156 00005CB1 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   157 00005CB4 7514                <1>     jnz short .copyEnvironmentBlock
   158 00005CB6 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   159 00005CBD 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   160 00005CC1 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   161 00005CC5 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   162 00005CC8 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   163                              <1> .copyEnvironmentBlock:
   164 00005CCA 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   165                              <1>     ;Get the length of the environment
   166 00005CCD B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   167                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkCtn
   168                              <1> ;    je .envMCBFound
   169                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkEnd
   170                              <1> ;    jne .invalidEnvironmentError
   171                              <1> ;.envMCBFound:
   172                              <1>     ;The env block mcb size must be between 160 and 32768 bytes.
   173                              <1>     ;Get the length of the environment from the MCB itself!
   174                              <1> ;    xor ecx, ecx
   175                              <1> ;    mov ecx, dword [rdi - mcb_size + mcb.blockSize]
   176                              <1> ;    shl ecx, 4  ;Convert to bytes from paragraphs
   177                              <1> ;    cmp ecx, 7FF0h  ;Is it above 32Kb?
   178                              <1> ;    ja .invalidEnvironmentError ;Error out!
   179                              <1> ;    cmp ecx, 0A0h   ;Is the environment less than 160 bytes?
   180                              <1> ;    jb .invalidEnvironmentError ;Error out!
   181 00005CD2 31C0                <1>     xor eax, eax
   182 00005CD4 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   183                              <1> .envVerifyLp:
   184 00005CD7 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   185 00005CD9 7531                <1>     jnz short .invalidEnvironmentError
   186 00005CDB 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   187 00005CDE FFC9                <1>     dec ecx
   188 00005CE0 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   189 00005CE1 75F4                <1>     jnz short .envVerifyLp
   190                              <1> 
   191 00005CE3 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   192 00005CE6 57                  <1>     push rdi     ;Save the length of the environment block
   193 00005CE7 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   194 00005CED 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   195 00005CF1 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   196 00005CF3 89FB                <1>     mov ebx, edi
   197 00005CF5 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   198 00005CF8 55                  <1>     push rbp
   199 00005CF9 E83CF7FFFF          <1>     call allocateMemory
   200 00005CFE 5D                  <1>     pop rbp
   201 00005CFF 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   202 00005D00 7314                <1>     jnc short .copyEnvironment
   203                              <1>     ;Fall thru if not enuff memory
   204                              <1> .insufficientMemory:
   205 00005D02 B808000000          <1>     mov eax, errNoMem
   206 00005D07 E9BB050000          <1>     jmp .cleanAndFail
   207                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   208 00005D0C B80A000000          <1>     mov eax, errBadEnv
   209 00005D11 E9B1050000          <1>     jmp .cleanAndFail
   210                              <1> 
   211                              <1> .copyEnvironment:
   212                              <1>     ;rax has the ptr to allocated memory block
   213                              <1>     ;rcx has the number of chars to copy from the source env block
   214 00005D16 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   215 00005D19 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   216 00005D1D 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   217 00005D21 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   218 00005D24 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   219 00005D26 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   220 00005D2B 66AB                <1>     stosw       ;Away you go!
   221 00005D2D 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   222 00005D31 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   223 00005D35 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   224                              <1> ;Done with the environment... more or less
   225                              <1> .loadProgram:
   226 00005D37 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   227 00005D3C 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   228 00005D43 E89B050000          <1>     call .readDataFromHdl
   229 00005D48 0F8274050000        <1>     jc .badFmtErr
   230 00005D4E 85C0                <1>     test eax, eax   ;Were zero bytes read?
   231 00005D50 0F846C050000        <1>     jz .badFmtErr
   232 00005D56 3D40000000          <1>     cmp eax, imageDosHdr_size
   233 00005D5B 0F826F030000        <1>     jb .loadCom
   234                              <1> 
   235 00005D61 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   236 00005D66 740B                <1>     je .proceedEXE
   237 00005D68 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   238 00005D6D 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   239                              <1> .proceedEXE:
   240                              <1>     ;Now we need to read e_lfanew
   241 00005D73 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   242 00005D74 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   243 00005D77 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   244 00005D7A 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   245 00005D7C 30C0                <1>     xor al, al  ;Set file pointer from start of file
   246 00005D7E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   247 00005D82 E83AD8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   248 00005D87 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   249 00005D88 B918000000          <1>     mov ecx, imageFileHeader_size
   250 00005D8D E851050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   251 00005D92 85C0                <1>     test eax, eax   ;Were zero bytes read?
   252 00005D94 0F8428050000        <1>     jz .badFmtErr
   253 00005D9A 3D18000000          <1>     cmp eax, imageFileHeader_size
   254 00005D9F 0F821D050000        <1>     jb .badFmtErr
   255                              <1>     ;So now rdx points to the imageFileHeader
   256 00005DA5 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   257 00005DAB 0F8511050000        <1>     jne .badFmtErr
   258 00005DB1 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   259 00005DB7 0F8505050000        <1>     jne .badFmtErr
   260                              <1>     ;Check the binary is executable
   261 00005DBD 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   262 00005DC1 66A90200            <1>     test ax, imageFileExecutable
   263 00005DC5 0F84F7040000        <1>     jz .badFmtErr
   264 00005DCB 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   265                              <1> 
   266 00005DCF 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   267 00005DD5 0F82E7040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   268                              <1>     ;Now save the number of sections in the the file
   269 00005DDB 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   270 00005DDF 85C0                <1>     test eax, eax   ;If this is 0, what?
   271 00005DE1 0F84DB040000        <1>     jz .badFmtErr
   272 00005DE7 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   273                              <1>     ;Now load Optional header, file ptr points to it so all good!
   274 00005DEB B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   275                              <1>     ;rdx points to exeHdrSpace
   276 00005DF0 E8EE040000          <1>     call .readDataFromHdl
   277 00005DF5 85C0                <1>     test eax, eax   ;Were zero bytes read?
   278 00005DF7 0F84C5040000        <1>     jz .badFmtErr
   279 00005DFD 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   280 00005E02 0F82BA040000        <1>     jb .badFmtErr
   281                              <1>     ;Now File Ptr points to data dirs, not an issue
   282 00005E08 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   283                              <1>     ;We load the program in, one section at a time, reading section headers in
   284                              <1>     ; one at a time to the section header internal buffer.
   285 00005E0F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   286 00005E17 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   287 00005E19 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   288 00005E1F 488B05(66050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   289 00005E26 4885C0              <1>     test rax, rax
   290 00005E29 750A                <1>     jnz .notDefaultStackAlloc
   291 00005E2B 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   291 00005E34 00                  <1>
   292                              <1> .notDefaultStackAlloc:
   293 00005E35 01C3                <1>     add ebx, eax    ;Add stack allocation
   294 00005E37 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   295                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   296                              <1>     ; section aligned and so we will need to align before reading, to 
   297                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   298 00005E3D 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   299 00005E43 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   300 00005E46 81C311000000        <1>     add ebx, 11h
   301 00005E4C C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   302 00005E4F 55                  <1>     push rbp
   303 00005E50 E8E5F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   304 00005E55 5D                  <1>     pop rbp
   305 00005E56 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   306 00005E5C 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   307 00005E60 480500010000        <1>     add rax, psp_size
   308 00005E66 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   309                              <1>     ;Finally, just check that we have some code to execute. 
   310                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   311 00005E6A 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   311 00005E72 0000                <1>
   312 00005E74 0F8448040000        <1>     je .badFmtErr   ;If no bytes, exit error
   313 00005E7A EB0B                <1>     jmp short .exeProceed1
   314                              <1> .exeOvlySkipAlloc:
   315 00005E7C 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   316 00005E80 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   317 00005E83 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   318                              <1> .exeProceed1:
   319                              <1> ;===========================================================================
   320                              <1>     ;The below blocks are being kept because they can be turned on later
   321                              <1>     ; to change this exe loader to force section alignment of the 
   322                              <1>     ; base load address. It appears there is no need to enforce that the 
   323                              <1>     ; base load address be section aligned, but individual sections need
   324                              <1>     ; to adhere to the section alignment requirements thereafter. 
   325                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   326                              <1>     ; first section gets places at the load address and not at some
   327                              <1>     ; offset from it (as is usually the case, offset 1000h).
   328                              <1> ;===========================================================================
   329                              <1>     ;=======================================================================
   330                              <1>     ;Now we align the progBase to full header size aligned to the next page
   331                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   332                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   333                              <1>     ;=======================================================================
   334                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   335                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   336                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   337                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   338                              <1>     ;push rax
   339                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   340                              <1>     ;dec ecx ;Turn into a mask
   341                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   342                              <1>     ;inc ecx
   343                              <1>     ;sub rcx, rax
   344                              <1>     ;pop rdi
   345                              <1>     ;xor eax, eax
   346                              <1>     ;rep stosb
   347                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   348                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   349                              <1> 
   350                              <1>     ;So now copy one section at a time, read section header in
   351                              <1>     ;File pointer points to the directory table, so skip that
   352 00005E87 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   353                              <1>     ;Load however many directories we have into place
   354                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   355 00005E8D C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   356 00005E90 31C9                <1>     xor ecx, ecx
   357 00005E92 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   358 00005E96 B001                <1>     mov al, 1   ;Move handle forwards from current position
   359 00005E98 E824D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   360                              <1>     ;eax has pointer location after adjustment
   361 00005E9D 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   362                              <1>     ;File now points to start of Section headers. Read first header in.
   363                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   364 00005EA0 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   365 00005EA4 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   366 00005EA8 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   367 00005EAA 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   368                              <1> .loadLp:
   369 00005EAE 51                  <1>     push rcx    ;Save # of segments left on stack
   370 00005EAF 57                  <1>     push rdi    ;Save the current buffer ptr here
   371 00005EB0 B928000000          <1>     mov ecx, imageSectionHdr_size
   372 00005EB5 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   373 00005EBC E822040000          <1>     call .readDataFromHdl
   374 00005EC1 5F                  <1>     pop rdi
   375 00005EC2 59                  <1>     pop rcx
   376 00005EC3 85C0                <1>     test eax, eax
   377 00005EC5 0F84F7030000        <1>     jz .badFmtErr
   378 00005ECB 3D28000000          <1>     cmp eax, imageSectionHdr_size
   379 00005ED0 0F85EC030000        <1>     jne .badFmtErr
   380                              <1>     ;File ptr moved forwards to next section header
   381 00005ED6 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   382                              <1>     ;Section header read, now we load section into memory
   383                              <1>     ;Move file ptr to data location
   384 00005EDD 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   385 00005EE3 85D2                <1>     test edx, edx
   386 00005EE5 744B                <1>     jz short .skipRawPtrMove
   387 00005EE7 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   388 00005EEB 31C0                <1>     xor eax, eax    ;Seek from start of file
   389 00005EED 51                  <1>     push rcx
   390 00005EEE 57                  <1>     push rdi
   391 00005EEF E8CDD6FFFF          <1>     call lseekHdl
   392 00005EF4 5F                  <1>     pop rdi
   393 00005EF5 59                  <1>     pop rcx
   394                              <1>     ;Is this a overlay load?
   395 00005EF6 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   396 00005EFE 7532                <1>     jne short .skipRawPtrMove
   397                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   398                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   399                              <1>     ;Is this is the first segment with data being read into memory?
   400 00005F00 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   401 00005F04 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   402 00005F0C 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   403                              <1>     ;Now rebase the program to point the first byte of the first
   404                              <1>     ; section at the ProgBase.
   405 00005F0E 51                  <1>     push rcx
   406 00005F0F 57                  <1>     push rdi
   407 00005F10 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   408 00005F14 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   409 00005F1A 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   410 00005F1D 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   411 00005F21 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   412 00005F25 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   413 00005F29 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   414 00005F2C 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   415 00005F30 5F                  <1>     pop rdi
   416 00005F31 59                  <1>     pop rcx
   417                              <1> .skipRawPtrMove:
   418 00005F32 51                  <1>     push rcx
   419 00005F33 31FF                <1>     xor edi, edi
   420 00005F35 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   421 00005F3B 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   422                              <1>     ;If a section has a virtual address outside of the allocation arena
   423                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   424                              <1>     ; next section.
   425 00005F3F 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   426 00005F43 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   427 00005F46 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   428 00005F48 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   429 00005F4F 31C9                <1>     xor ecx, ecx
   430 00005F51 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   431 00005F54 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   432 00005F58 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   433 00005F5F 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   434 00005F62 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   435 00005F65 7713                <1>     ja short .okToLoad
   436                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   437                              <1> 
   438                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   439 00005F67 F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   439 00005F6F 0000                <1>
   440 00005F71 0F854B030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   441                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   442                              <1> 
   443                              <1>     ;Else, just skip this section, goto next section
   444 00005F77 59                  <1>     pop rcx
   445 00005F78 EB3F                <1>     jmp short .gotoNextSection
   446                              <1> .okToLoad:
   447 00005F7A 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   448 00005F80 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   449 00005F83 57                  <1>     push rdi    ;Save section in memory locally
   450 00005F84 E85A030000          <1>     call .readDataFromHdl
   451 00005F89 5F                  <1>     pop rdi
   452 00005F8A 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   453 00005F8B 0F8231030000        <1>     jc .badFmtErr
   454                              <1>     ;Don't check for a zero section read as empty sections may be present!
   455 00005F91 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   456 00005F97 0F8525030000        <1>     jne .badFmtErr
   457                              <1>     ;Data read ok, now fill in any zeros needed
   458 00005F9D 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   459                              <1> 
   460 00005FA0 51                  <1>     push rcx
   461                              <1>     ;Here do section padding
   462 00005FA1 4889F8              <1>     mov rax, rdi    ;Get the current address
   463 00005FA4 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   464 00005FAA FFC9                <1>     dec ecx ;Turn into a mask
   465 00005FAC 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   466 00005FAF FFC1                <1>     inc ecx
   467 00005FB1 4829C1              <1>     sub rcx, rax
   468 00005FB4 31C0                <1>     xor eax, eax
   469 00005FB6 F3AA                <1>     rep stosb
   470 00005FB8 59                  <1>     pop rcx
   471                              <1> .gotoNextSection:
   472 00005FB9 FFC9                <1>     dec ecx ;Decrement our section counter
   473 00005FBB 7419                <1>     jz short .doExeFixups
   474                              <1>     ;Read next section header in here
   475 00005FBD 51                  <1>     push rcx
   476 00005FBE 57                  <1>     push rdi
   477 00005FBF 30C0                <1>     xor al, al  ;Move rel start of file
   478 00005FC1 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   479 00005FC4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   480 00005FC8 31C9                <1>     xor ecx, ecx
   481 00005FCA E8F2D5FFFF          <1>     call lseekHdl
   482 00005FCF 5F                  <1>     pop rdi
   483 00005FD0 59                  <1>     pop rcx
   484 00005FD1 E9D8FEFFFF          <1>     jmp .loadLp
   485                              <1> .doExeFixups:
   486                              <1> ;Here we fixup addresses if needed
   487                              <1> ;If the program is loaded at its desired location never need to relocate.
   488                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   489                              <1> ;   If the program has had it's .reloc section stripped by the linker
   490                              <1> ;       or has no .reloc directory, we fail
   491                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   492                              <1> ;       relocations anyway.
   493                              <1> 
   494                              <1> ;If program base = desired load, skip relocs
   495 00005FD6 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   496 00005FDA 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   497 00005FE1 0F84CA000000        <1>     je .exeComplete
   498                              <1> ;If program has had relocs stripped, fail
   499 00005FE7 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   500 00005FEB 66A90100            <1>     test ax, imageFileRelocsStripped
   501 00005FEF 0F85CD020000        <1>     jnz .badFmtErr
   502                              <1> ;If program has no .reloc section, fail
   503 00005FF5 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   504 00005FFB 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   505 00006001 0F82BB020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   506                              <1> ;Now we get the reloc section
   507 00006007 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   508 0000600A 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   509                              <1>     ;eax now points to position in file of directory entry for reloc
   510 00006010 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   511 00006014 31C0                <1>     xor eax, eax
   512 00006016 E8A6D5FFFF          <1>     call lseekHdl   ;Move handle there in file
   513 0000601B 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   514 0000601E B908000000          <1>     mov ecx, imageDataDirectory_size
   515                              <1>     ;Read 8 bytes into sectHdr space
   516 00006023 488D15(9E050000)    <1>     lea rdx, sectHdr
   517 0000602A E8B4020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   518 0000602F 85C0                <1>     test eax, eax
   519 00006031 0F848B020000        <1>     jz .badFmtErr
   520 00006037 39C8                <1>     cmp eax, ecx
   521 00006039 0F8583020000        <1>     jne .badFmtErr
   522                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   523 0000603F 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   524 00006045 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   525 00006047 7468                <1>     jz .exeComplete   ;... including if overlay
   526 00006049 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   527                              <1>     ;Now rsi points to where in memory the relocation data table is
   528                              <1>     ;Now compute the relocation factor =
   529                              <1>     ;   Difference from the load address and prefered
   530 0000604D 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   531 00006051 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   532 00006058 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   533 00006060 750F                <1>     jne short .notOverlayReloc
   534                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   535                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   536                              <1>     ;This should be the same as ProgBase anyway for overlays.
   537 00006062 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   538 00006066 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   539                              <1>     ;Store this as the overlay program base
   540 0000606D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   541                              <1> .notOverlayReloc:
   542 00006071 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   543                              <1>     ;rsi points to relocation data table in memory
   544 00006074 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   545 0000607A 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   546 0000607C 7433                <1>     jz .exeComplete
   547                              <1>     ;rsi points to the first base relocation block. The relocations begin
   548                              <1>     ; after the first block
   549                              <1>     ;ecx has the number of base relocation blocks to process.
   550                              <1> .nextBlock:
   551 0000607E 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   552 0000607F 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   553 00006081 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   554 00006085 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   555 00006088 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   556 0000608B 67E31E              <1>     jecxz .blockDone    
   557 0000608E 81E908000000        <1>     sub ecx, 8
   558 00006094 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   559 0000609B D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   560                              <1> .blockNotDone:
   561 0000609D 66AD                <1>     lodsw   ;Get the next page offset word
   562 0000609F 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   563                              <1>     ;rdi points to base, rax give offset into 4Kb page
   564 000060A4 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   565 000060A8 FFC9                <1>     dec ecx
   566 000060AA 75F1                <1>     jnz .blockNotDone
   567                              <1> .blockDone:
   568 000060AC 59                  <1>     pop rcx
   569 000060AD FFC9                <1>     dec ecx
   570 000060AF 75CD                <1>     jnz .nextBlock
   571                              <1> .exeComplete:
   572 000060B1 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   573                              <1>     ;Now get EP relative to the (rescaled) load address.
   574 000060B7 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   575 000060BB 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   576 000060BF FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   577 000060C5 0F82F7010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   578 000060CB E9CC000000          <1>     jmp .buildChildPSP
   579                              <1> .loadCom:
   580                              <1>     ;File is open here, so just read the file into memory. 
   581                              <1>     ;The file cannot exceed 64Kb in size.
   582                              <1>     ;Allocate 64Kb of memory, or as much as we can
   583 000060D0 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   584 000060D8 745C                <1>     je .comOverlay
   585 000060DA BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   586 000060DF 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   587 000060E2 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   588 000060E5 55                  <1>     push rbp
   589 000060E6 E84FF3FFFF          <1>     call allocateMemory
   590 000060EB 5D                  <1>     pop rbp
   591 000060EC 7355                <1>     jnc .comallocOk
   592 000060EE 3C08                <1>     cmp al, errNoMem
   593 000060F0 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   594                              <1>     ;rbx should have the amount available in paragraphs
   595 000060F6 09DB                <1>     or ebx, ebx ;Clear the upper dword
   596 000060F8 48C1E304            <1>     shl rbx, 4
   597                              <1>     ;We check if this value is psp_size more than filesize
   598 000060FC 53                  <1>     push rbx    ;Save new minimum size
   599 000060FD B802000000          <1>     mov eax, 2    ;Reposition to end of file
   600 00006102 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   601 00006106 31D2                <1>     xor edx, edx    ;Go to end of file
   602 00006108 E8B4D4FFFF          <1>     call lseekHdl
   603                              <1>     ;eax has file size
   604 0000610D 5B                  <1>     pop rbx ;Get back max alloc size
   605 0000610E 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   606 00006110 29C2                <1>     sub edx, eax
   607 00006112 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   608 00006118 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   609 0000611E 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   610 00006121 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   611 00006124 55                  <1>     push rbp
   612 00006125 E810F3FFFF          <1>     call allocateMemory
   613 0000612A 5D                  <1>     pop rbp
   614 0000612B 0F8296010000        <1>     jc .cleanAndFail
   615 00006131 E90D000000          <1>     jmp .comallocOk
   616                              <1> .comOverlay:
   617                              <1>     ;Here we simply read the file into the buffer provided
   618 00006136 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   619 0000613A 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   620 0000613D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   621 00006141 EB0A                <1>     jmp short .comRead
   622                              <1> .comallocOk:
   623                              <1>     ;rax should point to the first byte
   624 00006143 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   625 00006147 480500010000        <1>     add rax, psp_size
   626                              <1> .comRead:
   627 0000614D 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   628                              <1> 
   629 00006151 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   630 00006156 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   631 0000615A 31D2                <1>     xor edx, edx    ;Go to end of file
   632 0000615C E860D4FFFF          <1>     call lseekHdl
   633                              <1>     ;eax has filesize now
   634 00006161 50                  <1>     push rax    ;Save filesize
   635 00006162 31C0                <1>     xor eax, eax    ;Reposition to start of file
   636 00006164 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   637 00006168 31D2                <1>     xor edx, edx    ;Go to start of file
   638 0000616A E852D4FFFF          <1>     call lseekHdl
   639 0000616F 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   640 00006170 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   641 00006178 7411                <1>     je .comOverlay2
   642                              <1>     ;Now we check if the space we have available is sufficient to load
   643                              <1>     ; the program. Skipped if an overlay being loaded
   644                              <1>     ;ecx = # File size
   645 0000617A 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   646 0000617D 81EA00010000        <1>     sub edx, psp_size
   647 00006183 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   648 00006185 0F8277FBFFFF        <1>     jb .insufficientMemory
   649                              <1> .comOverlay2:
   650 0000618B 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   651 0000618F E84F010000          <1>     call .readDataFromHdl   ;Read from the file handle
   652 00006194 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   653 00006198 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   654                              <1> .buildChildPSP:
   655                              <1>     ;We can close handle now
   656 0000619C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   657 000061A0 55                  <1>     push rbp
   658 000061A1 E831D3FFFF          <1>     call closeFileHdl   ;Close the file
   659 000061A6 5D                  <1>     pop rbp
   660                              <1> 
   661                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   662 000061A7 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   663 000061AF 0F84EA000000        <1>     je .overlayExit
   664                              <1>     ;Now build the PSP
   665 000061B5 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   666 000061B8 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   667 000061BC 52                  <1>     push rdx
   668 000061BD 55                  <1>     push rbp
   669 000061BE E8D4F7FFFF          <1>     call createPSP
   670 000061C3 5D                  <1>     pop rbp
   671 000061C4 5A                  <1>     pop rdx
   672                              <1> 
   673                              <1>     ;Now copy the environment block over if rax != 0
   674 000061C5 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   675 000061C9 4885DB              <1>     test rbx, rbx
   676 000061CC 7404                <1>     jz short .skipEnvCopy
   677 000061CE 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   678                              <1> .skipEnvCopy:
   679                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   680 000061D2 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   681 000061D9 E807130000          <1>     call dosCrit1Enter
   682 000061DE E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   683                              <1> 
   684 000061E3 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   685 000061EA 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   686                              <1> 
   687                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   688                              <1>     ; and set FS to point to the PSP
   689 000061F1 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   690                              <1> 
   691 000061F5 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   692 000061F9 B925000000          <1>     mov ecx, fcb_size
   693 000061FE 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   694 00006202 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   695 00006204 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   696 00006206 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   697 0000620A B925000000          <1>     mov ecx, fcb_size
   698 0000620F 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   699 00006213 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   700 00006215 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   701 00006217 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   702 0000621B 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   703 00006222 B980000000          <1>     mov ecx, 80h
   704 00006227 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   705                              <1> 
   706 00006229 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   707 0000622B 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   708                              <1> 
   709                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   710 0000622E 88D8                <1>     mov al, bl
   711 00006230 30DB                <1>     xor bl, bl
   712 00006232 E84E0E0000          <1>     call getCDSNotJoin
   713 00006237 7302                <1>     jnc .drive1Ok
   714 00006239 B3FF                <1>     mov bl, -1
   715                              <1> .drive1Ok:
   716 0000623B 88F8                <1>     mov al, bh
   717 0000623D 30FF                <1>     xor bh, bh
   718 0000623F E8410E0000          <1>     call getCDSNotJoin
   719 00006244 7302                <1>     jnc .drive2Ok
   720 00006246 B7FF                <1>     mov bh, -1
   721                              <1> .drive2Ok:
   722                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   723                              <1>     ;rdi has pointer to psp
   724 00006248 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   725                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   726 0000624B 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   727 00006250 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   727 00006259 FF                  <1>
   728 0000625A 4821C6              <1>     and rsi, rax    ;To align downwards
   729                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   730                              <1>     ;That is the job of the runtime to handle.
   731                              <1> ;Registers carrying data at this point:
   732                              <1> ;bx = FCB drive statuses
   733                              <1> ;rsi = Stack Base
   734                              <1> ;rbp = execFrame
   735 0000625D 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   736 00006261 750B                <1>     jne short .noBg
   737                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   738 00006263 56                  <1>     push rsi
   739 00006264 E8F80D0000          <1>     call getUserRegs
   740 00006269 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   741 0000626D 5E                  <1>     pop rsi
   742                              <1> .noBg:
   743 0000626E FF15(9F000000)      <1>     call qword [launchTask]
   744 00006274 7251                <1>     jc short .cleanAndFail
   745                              <1> ;Final step: Transfer control
   746 00006276 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   747 0000627A 742C                <1>     je .xfrProgram
   748 0000627C 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   749 00006280 741D                <1>     je .overlayExit ;Skip the below for background tasks
   750 00006282 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   751 00006286 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   752 0000628A 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   753 0000628E 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   754 00006291 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   755 00006294 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   756 0000629B 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   757                              <1> .overlayExit:
   758 0000629F 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   759 000062A2 5D                  <1>     pop rbp ;Point rsp to the return address
   760 000062A3 E97A120000          <1>     jmp extGoodExit ;And return!
   761                              <1> .xfrProgram:
   762 000062A8 FA                  <1>     cli
   763 000062A9 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   764 000062AC C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   765 000062B3 FB                  <1>     sti
   766                              <1> 
   767 000062B4 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   768 000062B5 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   769 000062B8 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   770 000062BB 4989F9              <1>     mov r9, rdi
   771 000062BE 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   772                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000062C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> ;r8 is guaranteed to have a copy of the PSP.
   774                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   775                              <1> ;Everything else is optional and potentially changable at a later stage
   776                              <1> 
   777                              <1> .badFmtErr:
   778 000062C2 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   779                              <1> .cleanAndFail:
   780                              <1> ;Close the open file and any open resources and fail
   781 000062C7 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   782 000062CC E81E120000          <1>     call dosCrit1Exit
   783 000062D1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   784 000062D5 50                  <1>     push rax    ;Save error code
   785 000062D6 55                  <1>     push rbp
   786 000062D7 E8FBD1FFFF          <1>     call closeFileHdl
   787 000062DC 5D                  <1>     pop rbp
   788 000062DD 58                  <1>     pop rax
   789 000062DE E967F9FFFF          <1>     jmp .badExit
   790                              <1> 
   791                              <1> .readDataFromHdl:
   792                              <1> ;Input: ecx = Number of bytes to transfer
   793                              <1> ;       rdx = Ptr to the buffer to use
   794 000062E3 52                  <1>     push rdx
   795 000062E4 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   796 000062E9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   797 000062ED 55                  <1>     push rbp
   798 000062EE E822D2FFFF          <1>     call readFileHdl
   799 000062F3 5D                  <1>     pop rbp
   800 000062F4 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   801 000062F9 5A                  <1>     pop rdx
   802                              <1>     return
    13                              <2> %%_ret:
    14 000062FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> .clearArenaOwner:
   804 000062FB 53                  <1>     push rbx
   805 000062FC 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   806 000062FE E8E2110000          <1>     call dosCrit1Enter
   807 00006303 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   808 00006308 5B                  <1>     pop rbx
   809                              <1>     return
    13                              <2> %%_ret:
    14 00006309 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> .setPSPArenaOwner:
   811                              <1> ;Sets the current PSP as the arena owner
   812 0000630A 53                  <1>     push rbx
   813 0000630B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   814 00006312 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   815 00006317 E8D3110000          <1>     call dosCrit1Exit
   816 0000631C 5B                  <1>     pop rbx
   817                              <1>     return
    13                              <2> %%_ret:
    14 0000631D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .setProgOrEnvArenaOwnerToRBX:
   819                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   820 0000631E 9C                  <1>     pushfq
   821 0000631F 50                  <1>     push rax
   822                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   823                              <1>     ;This is because they are set up at separate points in the routine!
   824 00006320 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   825 00006324 E80C000000          <1>     call .writeArenaHeaderOwner
   826 00006329 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   827 0000632D E803000000          <1>     call .writeArenaHeaderOwner
   828 00006332 58                  <1>     pop rax
   829 00006333 9D                  <1>     popfq
   830                              <1>     return
    13                              <2> %%_ret:
    14 00006334 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .writeArenaHeaderOwner:
   832                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   833                              <1> ;       rbx = Owner ID
   834 00006335 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   835                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006338 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   836 0000633A 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   837 00006340 48895801            <1>     mov qword [rax + 1], rbx
   838                              <1>     return
    13                              <2> %%_ret:
    14 00006344 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00006345 3C01                <1>     cmp al, 01
    12 00006347 740B                <1>     je .setSC
    13 00006349 7210                <1>     jb .getSC
    14 0000634B 3C03                <1>     cmp al, 03
    15 0000634D 7214                <1>     jb .getDev
    16 0000634F 741C                <1>     je .setDev
    17 00006351 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00006353 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00006354 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 0000635A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 0000635B 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006361 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00006363 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00006365 E8F70C0000          <1>     call getUserRegs
    29 0000636A 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 0000636D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 0000636E 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006371 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00006374 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 00006376 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006379 31ED                <1>     xor ebp, ebp    ;Get country table
    57 0000637B B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006380 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006387 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006389 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 0000638B 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 0000638D 488D356C9EFFFF      <1>     lea rsi, ctryTbl
    65 00006394 B926000000          <1>     mov ecx, countryStruc_size
    66 00006399 F3A4                <1>     rep movsb
    67 0000639B 0FB71D5A9EFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 000063A2 E8BA0C0000          <1>     call getUserRegs
    70 000063A7 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 000063AB 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 000063AD E970110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 000063B2 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 000063B4 E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000063B9 0F8271110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000063BF 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000063C1 75E8                <1>     jnz .exitNoCountryCode 
    81 000063C3 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000063C5 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000063C7 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000063C9 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000063CB 663B1D2A9EFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000063D2 7499                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   101 000063D4 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000063D6 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000063D8 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000063DD CD2F                <1>     int 2fh
   105 000063DF 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000063E1 751F                <1>     jne .errNotInstalled
   107 000063E3 488D359F9DFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000063EA B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000063EF B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000063F4 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000063F6 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000063F9 CD2F                <1>     int 2fh
   113 000063FB 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000063FD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000063FF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 00006400 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 00006401 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 00006402 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 00006404 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 00006406 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 0000640C 7250                <1>     jb .invFuncExit
   143 0000640E 488D35749DFFFF      <1>     lea rsi, dosNLSPtr
   144 00006415 6681FAFFFF          <1>     cmp dx, -1
   145 0000641A 660F4415DA9DFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006422 6681FBFFFF          <1>     cmp bx, -1
   147 00006427 660F441DCF9DFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 0000642F 663B15C69DFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 00006436 7569                <1>     jne .nlsReq
   150 00006438 663B1DBF9DFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 0000643F 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 00006441 488D358D9DFFFF      <1>     lea rsi, charTableArray
   155 00006448 0FB72D849DFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 0000644F 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 00006451 7515                <1>     jne .tblFound
   159 00006453 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 0000645A FFCD                <1>     dec ebp
   161 0000645C 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 0000645E B801000000          <1>     mov eax, 1
   165 00006463 E9C8100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 00006468 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 00006469 3C01                <1>     cmp al, 1
   169 0000646B 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 0000646D B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 00006472 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 00006477 F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 00006479 E8E30B0000          <1>     call getUserRegs
   177 0000647E 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 00006481 89D8                <1>     mov eax, ebx    
   181 00006483 E99A100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 00006488 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 0000648E 31C0                <1>     xor eax, eax    ;Clear eax
   186 00006490 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 00006492 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 00006494 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 00006497 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006499 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 0000649B 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 0000649F EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 000064A1 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 000064A4 B800140000          <1>     mov eax, 1400h  ;Install check!
   199 000064A9 CD2F                <1>     int 2fh
   200 000064AB 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 000064AD 75AF                <1>     jne .invFuncExit    
   202 000064AF B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 000064B4 CD2F                <1>     int 2fh
   204 000064B6 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 000064B8 0F8572100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000064BE 0FB7050C9DFFFF      <1>     movzx eax, word [defaultCP]
   210 000064C5 E958100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000064CA 3C01                <1>     cmp al, 1
   220 000064CC 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000064CE E88E0B0000          <1>     call getUserRegs
   223 000064D3 0FB71D249DFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000064DA 0FB715F09CFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 000064E1 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 000064E4 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 000064E7 E936100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 000064EC B801000000          <1>     mov eax, errInvFnc
   230 000064F1 E93A100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 000064F6 3C02                <1>     cmp al, 2
   233 000064F8 75F2                <1>     jne .exitBadFunc
   234 000064FA 0FB715909CFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 00006501 B800140000          <1>     mov eax, 1400h
   236 00006506 CD2F                <1>     int 2Fh
   237 00006508 3CFF                <1>     cmp al, -1
   238 0000650A 75E0                <1>     jne .exitBadFunc
   239 0000650C 488D35769CFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 00006513 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 00006518 CD2F                <1>     int 2Fh
   242 0000651A 84C0                <1>     test al, al
   243 0000651C 0F8400100000        <1>     jz extGoodExit
   244 00006522 3C41                <1>     cmp al, errNLSAcDen
   245 00006524 0F8506100000        <1>     jne extErrExit
   246 0000652A 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 0000652C 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 00006533 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 0000653A C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 00006541 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 00006548 E9F00F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 0000654D 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000654F 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00006551 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00006552 53                  <1>     push rbx
   259 00006553 488D1DCE9CFFFF      <1>     lea rbx, ucTbl
   260 0000655A 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 0000655C D7                  <1>     xlatb
   262 0000655D 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 0000655E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 0000655F 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006561 7510                <1>     jne .doReq
    10 00006563 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 00006564 488B05(E3040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume label ptr
    12 0000656B 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006572 58                  <1>     pop rax
    15                              <1> .doReq:
    16 00006573 E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 00006578 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006579 50                  <1>     push rax    ;Wanna preserve ax
    24 0000657A 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 0000657F 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006582 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 00006584 53                  <1>     push rbx
    28 00006585 488D1DDD9AFFFF      <1>     lea rbx, hardXlatTbl
    29 0000658C D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 0000658D 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 0000658E 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 00006595 58                  <1>     pop rax
    34 00006596 56                  <1>     push rsi
    35 00006597 488D35779BFFFF      <1>     lea rsi, extErrTbl
    36 0000659E E8E60F0000          <1>     call setErrorVars
    37 000065A3 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 000065A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 000065A5 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 000065A8 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 000065AE 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 000065B5 56                  <1>     push rsi
    50 000065B6 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 000065BA E87C000000          <1>     call hardErrorCommon
    52 000065BF 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000065C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000065C1 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000065C3 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000065C6 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000065C8 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000065CB 57                  <1>     push rdi        ;Save the buffer pointer
    68 000065CC 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000065CF 81FF00000000        <1>     cmp edi, drvWPErr
    70 000065D5 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000065D7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000065DA 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 000065E0 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 000065E6 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 000065E9 F6C301              <1>     test bl, dosBuffer
    79 000065EC 7505                <1>     jnz .df0
    80 000065EE 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 000065F1 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 000065F3 F6C302              <1>     test bl, fatBuffer
    84 000065F6 750C                <1>     jnz .df1
    85 000065F8 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 000065FB C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Invalidate the count!
    87 00006602 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 00006604 F6C304              <1>     test bl, dirBuffer
    90 00006607 7505                <1>     jnz .df2
    91 00006609 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 0000660C EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 0000660E 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006611 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 00006618 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 0000661E 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 00006624 E802000000          <1>     call diskDevErrBitfield
   101 00006629 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 0000662A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 0000662B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 0000662E 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 00006635 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006639 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 0000663B E839FFFFFF          <1>     call xlatHardError
   117 00006640 50                  <1>     push rax
   118 00006641 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 00006646 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 00006648 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 0000664B 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 0000664C 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 00006653 7204                <1>     jb .noIntError  ;If not 0, enter
   153 00006655 B003                <1>     mov al, critFail    ;Else, return Fail always
   154 00006657 EB76                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 00006659 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 00006660 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 00006668 FF                  <1>
   158 00006669 740C                <1>     je .notOpeningFile
   159 0000666B 57                  <1>     push rdi
   160 0000666C 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 00006673 C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 00006676 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 00006677 FA                  <1>     cli                         
   165 00006678 FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   166 0000667E FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   167 00006684 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   168 0000668B 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   169 0000668D CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   170 0000668F 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   171 00006696 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   172 0000669D C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   173 000066A4 FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   174 000066AA 488B2D(8E070000)    <1>     mov rbp, qword [tmpDPBPtr]
   175 000066B1 FB                  <1>     sti                         
   176                              <1>     ;Now we check that the response given was allowed, and translate if needed
   177                              <1> .checkResponse:
   178 000066B2 3C00                <1>     cmp al, critIgnore
   179 000066B4 743F                <1>     je .checkIgnore
   180 000066B6 3C01                <1>     cmp al, critRetry
   181 000066B8 7446                <1>     je .checkRetry
   182 000066BA 3C03                <1>     cmp al, critFail
   183 000066BC 754D                <1>     jne .abort   ;Must be abort
   184                              <1> .setFail:   ;Here is for fail
   185 000066BE B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   186 000066C0 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187 000066C6 F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   188 000066CD 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   189                              <1> .exit:
   190 000066CF C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   191 000066D6 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   192                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000066DD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000066DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   193                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   194 000066E0 50                  <1>     push rax
   195 000066E1 57                  <1>     push rdi
   196 000066E2 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   197 000066E9 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   198 000066F0 8807                <1>     mov byte [rdi], al
   199 000066F2 5F                  <1>     pop rdi
   200 000066F3 58                  <1>     pop rax
   201                              <1>     return
    13                              <2> %%_ret:
    14 000066F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> .checkIgnore:
   203 000066F5 F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   204 000066FC 75D1                <1>     jnz .exit
   205 000066FE EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   206                              <1> .checkRetry:
   207 00006700 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   208 00006707 75C6                <1>     jnz .exit   
   209 00006709 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   210                              <1> .abort:
   211                              <1> ;Prepare to abort. We abort from within!
   212 0000670B E81CC2FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   213                              <1> ;If a network request requests abort, translate to fail
   214 00006710 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   215 00006717 7509                <1>     jne .kill   ;If this is zero, local invokation
   216 00006719 C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   217 00006720 EBAD                <1>     jmp short .exit
   218                              <1> .kill:
   219 00006722 6681C71300          <1>     add di, drvErrShft
   220 00006727 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   221 0000672E 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   222 00006730 C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   223 00006737 C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;Clear special vol search byte if set
   224                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   225                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   226                              <1>     ;This only affects programs which are their own parents as when aborting
   227                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   228                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   229                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   230                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   231                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   232                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   233                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   234                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   235                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   236                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   237                              <1>     ; the following prevents a GP. Fault.
   238 0000673E 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   239 00006745 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   240 0000674C 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   241 00006750 E970F3FFFF          <1>     jmp terminateClean.altEP
   242                              <1> 
   243                              <1> ctrlBreakHdlr:
   244 00006755 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   245 00006757 E8FEC0FFFF          <1>     call printCaretASCII
   246 0000675C E829C1FFFF          <1>     call printCRLF
   247                              <1>     ;Reset the console back to 0
   248 00006761 E8C6C1FFFF          <1>     call vConRetDriver
   249                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   250                              <1> .exceptEP:
   251                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   252                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   253                              <1> ;   interrupted DOS call is restarted
   254 00006766 FA                  <1> 	cli
   255 00006767 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   256 0000676E E8440D0000          <1> 	call dosPopRegs ;Get user state back
   257 00006773 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   258 0000677A C605(07040000)00    <1>     mov byte [critErrFlag], 0
   259 00006781 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
   260 00006788 F8                  <1>     clc
   261 00006789 CD23                <1>     int 23h ;Call critical error handler
   262 0000678B FA                  <1>     cli ;Clear interrupts again
   263 0000678C 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   264 00006793 9C                  <1>     pushfq  ;Get flags in rax
   265 00006794 58                  <1>     pop rax 
   266 00006795 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   267 0000679C 750C                <1>     jne .checkCF
   268                              <1> .returnToDOS:
   269 0000679E 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   270 000067A5 E9B30B0000          <1>     jmp functionDispatch    ;Goto int 21h
   271                              <1> .checkCF:
   272 000067AA 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   273 000067B1 A801                <1>     test al, 1  ;CF set?
   274 000067B3 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   275 000067B5 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   276 000067BA C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   277 000067C1 E9970B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
   278                              <1> 
   279                              <1> ;CPU Exception handlers
   280                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   281                              <1> ; CTRL+C exit.
   282                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   283                              <1> ; system.
   284                              <1> ; Also halt if the application is it's own parent.
   285                              <1> ;An application should hook these interupts if they wish to not 
   286                              <1> ; CTRL+C exit, and instead return to DOS.
   287                              <1> i0:
   288 000067C6 31C0                <1>     xor eax, eax
   289 000067C8 E9AB000000          <1>     jmp cpu_2args
   290                              <1> i1:
   291 000067CD B801000000          <1>     mov eax, 1
   292 000067D2 E9A1000000          <1>     jmp cpu_2args
   293                              <1> i2:
   294 000067D7 B802000000          <1>     mov eax, 2
   295 000067DC E997000000          <1>     jmp cpu_2args
   296                              <1> i3:
   297 000067E1 B803000000          <1>     mov eax, 3
   298 000067E6 E98D000000          <1>     jmp cpu_2args
   299                              <1> i4:
   300 000067EB B804000000          <1>     mov eax, 4
   301 000067F0 E983000000          <1>     jmp cpu_2args
   302                              <1> i5:
   303 000067F5 B805000000          <1>     mov eax, 5
   304 000067FA EB7C                <1>     jmp short cpu_2args
   305                              <1> i6:
   306 000067FC B806000000          <1>     mov eax, 6
   307 00006801 EB75                <1>     jmp short cpu_2args
   308                              <1> i7:
   309 00006803 B807000000          <1>     mov eax, 7
   310 00006808 EB6E                <1>     jmp short cpu_2args
   311                              <1> i8:
   312 0000680A B808000000          <1>     mov eax, 8
   313 0000680F EB60                <1>     jmp short cpu_3args
   314                              <1> i9:
   315 00006811 B809000000          <1>     mov eax, 9
   316 00006816 EB60                <1>     jmp short cpu_2args
   317                              <1> i10:
   318 00006818 B80A000000          <1>     mov eax, 0Ah
   319 0000681D EB52                <1>     jmp short cpu_3args
   320                              <1> i11:
   321 0000681F B80B000000          <1>     mov eax, 0Bh
   322 00006824 EB4B                <1>     jmp short cpu_3args
   323                              <1> i12:
   324 00006826 B80C000000          <1>     mov eax, 0Ch
   325 0000682B EB44                <1>     jmp short cpu_3args
   326                              <1> i13:
   327 0000682D B80D000000          <1>     mov eax, 0Dh
   328 00006832 EB3D                <1>     jmp short cpu_3args
   329                              <1> i14:
   330 00006834 B80E000000          <1>     mov eax, 0Eh
   331 00006839 EB2F                <1>     jmp short cpu_4args
   332                              <1> i15:
   333 0000683B B80F000000          <1>     mov eax, 0Fh
   334 00006840 EB36                <1>     jmp short cpu_2args
   335                              <1> i16:
   336 00006842 B810000000          <1>     mov eax, 10h
   337 00006847 EB2F                <1>     jmp short cpu_2args
   338                              <1> i17:
   339 00006849 B811000000          <1>     mov eax, 11h
   340 0000684E EB21                <1>     jmp short cpu_3args
   341                              <1> i18:
   342 00006850 B812000000          <1>     mov eax, 12h
   343 00006855 EB21                <1>     jmp short cpu_2args
   344                              <1> i19:
   345 00006857 B813000000          <1>     mov eax, 13h
   346 0000685C EB1A                <1>     jmp short cpu_2args
   347                              <1> i20:
   348 0000685E B814000000          <1>     mov eax, 14h
   349 00006863 EB13                <1>     jmp short cpu_2args
   350                              <1> i21:
   351 00006865 B815000000          <1>     mov eax, 15h
   352                              <1> cpu_4args:
   353 0000686A B903000000          <1>     mov ecx, 3
   354 0000686F EB0C                <1>     jmp short cpu_exception
   355                              <1> cpu_3args:
   356 00006871 B902000000          <1>     mov ecx, 2
   357 00006876 EB05                <1>     jmp short cpu_exception
   358                              <1> cpu_2args:
   359 00006878 B901000000          <1>     mov ecx, 1
   360                              <1> cpu_exception:
   361                              <1> ;Enter with:
   362                              <1> ; eax = Exception number in binary
   363                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   364 0000687D 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   365 00006884 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   366 00006889 E8E5010000          <1>     call .writeExceptionMessage
   367                              <1> 
   368 0000688E C605(96070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
   369 00006895 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
   370 0000689C 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
   371 0000689E 3D02000000          <1>     cmp eax, 2              ;NMI?
   372 000068A3 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
   373                              <1> 
   374 000068A5 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
   375 000068AC 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
   376 000068B0 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
   377                              <1> 
   378 000068B2 488D352B020000      <1>     lea rsi, .fatal1
   379 000068B9 BBC1000000          <1>     mov ebx, fatal1L
   380 000068BE E8B0010000          <1>     call .writeExceptionMessage
   381 000068C3 EB18                <1>     jmp short .introEnd
   382                              <1> .introStop:
   383 000068C5 C605(96070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   384 000068CC 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   385 000068D3 BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   386 000068D8 E896010000          <1>     call .writeExceptionMessage
   387                              <1> .introEnd:
   388 000068DD 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   389 000068E4 E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   390 000068E9 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   391 000068F0 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   392 000068F5 E879010000          <1>     call .writeExceptionMessage
   393                              <1> 
   394 000068FA 488D35A4020000      <1>     lea rsi, .fatal2
   395 00006901 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   396 00006906 E868010000          <1>     call .writeExceptionMessage
   397                              <1> 
   398 0000690B 80F901              <1>     cmp cl, 1
   399 0000690E 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   400                              <1> .cpurollprint:
   401 00006914 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   402 0000691B 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   403                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   404 0000691F B108                <1>     mov cl, 8    ;8 bytes
   405                              <1> .cpurollprint1:
   406 00006921 48C1C208            <1>     rol rdx, 8
   407 00006925 88D0                <1>     mov al, dl
   408 00006927 52                  <1>     push rdx
   409 00006928 E814010000          <1>     call .printbyte
   410 0000692D 5A                  <1>     pop rdx
   411 0000692E FEC9                <1>     dec cl
   412 00006930 75EF                <1>     jnz .cpurollprint1
   413                              <1> 
   414 00006932 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   415 00006937 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   416 0000693E E830010000          <1>     call .writeExceptionMessage
   417                              <1> 
   418 00006943 BB03000000          <1>     mov ebx, crlfL
   419 00006948 488D3572020000      <1>     lea rsi, .crlf
   420 0000694F E81F010000          <1>     call .writeExceptionMessage    
   421                              <1> 
   422 00006954 F605(96070000)FF    <1>     test byte [haltDOS], -1
   423 0000695B 7534                <1>     jnz .fatalStop
   424 0000695D E8FC000000          <1>     call .readInputChar
   425                              <1>     ;Set error code to General Failure
   426 00006962 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   426 0000696A 00                  <1>
   427 0000696B C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   428 00006972 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   429 00006979 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   430 00006980 B8FF4C0000          <1>     mov eax, 4cFFh
   431 00006985 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   432                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   433                              <1>     ; setup as above, chances are it was a CPU error
   434 0000698C E9CC090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   435                              <1> .fatalStop:
   436                              <1> ;This is called if inDOS > 1 or NMI occured
   437                              <1> ;Freezes the machine
   438 00006991 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   439 00006996 CD2A                <1>     int 2Ah
   440 00006998 E8480B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   441 0000699D E8570B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   442 000069A2 FA                  <1>     cli                 ;Halt all interrupts
   443                              <1> .fatalLp:
   444 000069A3 F390                <1>     pause
   445 000069A5 EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   446                              <1> .cpuextendederror:
   447 000069A7 5A                  <1>     pop rdx
   448 000069A8 48FFC9              <1>     dec rcx
   449 000069AB 51                  <1>     push rcx
   450 000069AC 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   451 000069B3 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   452 000069B5 86D6                <1>     xchg dl, dh   
   453                              <1> .pr1:
   454 000069B7 88D0                <1>     mov al, dl
   455 000069B9 52                  <1>     push rdx
   456 000069BA E882000000          <1>     call .printbyte
   457 000069BF 5A                  <1>     pop rdx
   458 000069C0 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   459 000069C3 FEC9                <1>     dec cl
   460 000069C5 75F0                <1>     jnz .pr1
   461                              <1> 
   462 000069C7 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   463 000069CE BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   464 000069D3 E89B000000          <1>     call .writeExceptionMessage
   465                              <1> 
   466 000069D8 488D35C6010000      <1>     lea rsi, .fatal2
   467 000069DF BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   468 000069E4 E88A000000          <1>     call .writeExceptionMessage
   469                              <1> 
   470 000069E9 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   471 000069EA 48FFC9              <1>     dec rcx
   472 000069ED 0F8421FFFFFF        <1>     jz .cpurollprint
   473                              <1> 
   474 000069F3 B108                <1>     mov cl, 8   ;16 nybbles
   475 000069F5 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   476 000069F8 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   477                              <1> .pr2:
   478 000069FF 48C1C208            <1>     rol rdx, 8    ;Print rdx
   479 00006A03 88D0                <1>     mov al, dl
   480 00006A05 52                  <1>     push rdx
   481 00006A06 E836000000          <1>     call .printbyte
   482 00006A0B 5A                  <1>     pop rdx
   483 00006A0C FEC9                <1>     dec cl
   484 00006A0E 75EF                <1>     jnz .pr2
   485                              <1> 
   486 00006A10 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   487 00006A17 BB10000000          <1>     mov ebx, 16
   488 00006A1C E852000000          <1>     call .writeExceptionMessage
   489                              <1> 
   490 00006A21 488D357D010000      <1>     lea rsi, .fatal2
   491 00006A28 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   492 00006A2D E841000000          <1>     call .writeExceptionMessage
   493                              <1> 
   494 00006A32 E9DDFEFFFF          <1>     jmp .cpurollprint
   495                              <1> 
   496                              <1> 
   497                              <1> .char:    ;Print a single character
   498 00006A37 488D1D6D000000      <1>     lea rbx, .ascii
   499 00006A3E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   500 00006A3F AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   501 00006A40 C3                  <1>     ret
   502                              <1> .printbyte:
   503 00006A41 88C2                <1>     mov dl, al            ;save byte in dl
   504 00006A43 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   505 00006A47 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   506 00006A4C 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   507 00006A50 E8E2FFFFFF          <1>     call .char
   508 00006A55 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   509 00006A58 E8DAFFFFFF          <1>     call .char
   510 00006A5D C3                  <1>     ret        
   511                              <1> 
   512                              <1> 
   513                              <1> .readInputChar:
   514 00006A5E C605(ED040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   515 00006A65 488D35(1C050000)    <1>     lea rsi, singleIObyt
   516 00006A6C BB01000000          <1>     mov ebx, 1  ;Read one char
   517 00006A71 EB07                <1>     jmp short .ioException
   518                              <1> .writeExceptionMessage:
   519                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   520 00006A73 C605(ED040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   521                              <1> .ioException:
   522 00006A7A C605(EB040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   523 00006A81 66C705(EE040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   523 00006A89 00                  <1>
   524 00006A8A 891D(01050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   525 00006A90 488D1D(EB040000)    <1>     lea rbx, critReqHdr
   526 00006A97 488935(F9040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   527 00006A9E 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   528 00006AA5 E822010000          <1>     call goDriver
   529                              <1>     return
    13                              <2> %%_ret:
    14 00006AAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> 
   532                              <1> ;Error messages
   533 00006AAB 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   533 00006AB4 39414243444546      <1>
   534 00006ABB 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   534 00006AC4 20205343502F444F53- <1>
   534 00006ACD 20455843455054494F- <1>
   534 00006AD6 4E2044455445435445- <1>
   534 00006ADF 44210D0A0A          <1>
   535                              <1> fatalt0L   equ $ - .fatalt0
   536                              <1> 
   537                              <1> .fatal1:   
   538 00006AE4 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   538 00006AED 656E7469616C6C7920- <1>
   538 00006AF6 666174616C20657272- <1>
   538 00006AFF 6F7220686173206265- <1>
   538 00006B08 656E20646574656374- <1>
   538 00006B11 65640D0A            <1>
   539 00006B15 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   539 00006B1E 68652063757272656E- <1>
   539 00006B27 74206170706C696361- <1>
   539 00006B30 74696F6E206D757374- <1>
   539 00006B39 206265207465726D69- <1>
   539 00006B42 6E617465642E0D0A0A  <1>
   540 00006B4B 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   540 00006B54 20616E79206B657920- <1>
   540 00006B5D 746F20636F6E74696E- <1>
   540 00006B66 7565206F7220435452- <1>
   540 00006B6F 4C2B414C542B44454C- <1>
   540 00006B78 20746F207265737461- <1>
   540 00006B81 727420746865206D61- <1>
   540 00006B8A 6368696E652E        <1>
   541 00006B90 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   541 00006B99 5354454D204552524F- <1>
   541 00006BA2 523A20              <1>
   542                              <1> fatal1L equ $ - .fatal1
   543                              <1> 
   544 00006BA5 203A20              <1> .fatal2:   db " : "
   545                              <1> fatal2L    equ $ - .fatal2
   546                              <1> 
   547                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   548 00006BA8 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   548 00006BB1 4F532053595354454D- <1>
   548 00006BBA 2053544F503A20      <1>
   549                              <1> fatalHaltL equ $ - .fatalHalt
   550 00006BC1 0D0A0A              <1> .crlf:  db CR,LF,LF
   551                              <1> crlfL  equ $ - .crlf
    43                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006BC4 B003                <1>     mov al, critFail
     7 00006BC6 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006BC8 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006BCC E828090000          <1>     call dosCrit2Enter
    16 00006BD1 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006BD4 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006BD7 E827090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006BDD 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006BE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006BE4 84C0                <1>     test al, al
    33 00006BE6 723F                <1>     jc .diskError
    34 00006BE8 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006BEE 7337                <1>     jae .diskError
    36 00006BF0 50                  <1>     push rax
    37 00006BF1 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006BF3 E8FD040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006BF8 58                  <1>     pop rax
    40 00006BF9 7235                <1>     jc .error
    41 00006BFB 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006C01 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006C08 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006C10 750A                <1>     jnz .netError
    45 00006C12 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006C16 E8B1030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006C1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006C1C 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006C24 00                  <1>
    50 00006C25 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006C27 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006C2F 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006C30 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006C37 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006C3E C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006C45 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006C46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006C47 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006C4D FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006C4E FC                  <1>     cld ;Set string ops in the right direction
    65 00006C4F E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006C54 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 00006C56 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 00006C5D 56                  <1>     push rsi
    69 00006C5E 50                  <1>     push rax
    70 00006C5F 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006C66 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006C68 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006C6B 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006C71 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006C72 B800030000          <1>     mov eax, 0300h  
    79 00006C77 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006C79 58                  <1>     pop rax
    82 00006C7A 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006C7B 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006C7E FA                  <1>     cli
    93 00006C7F 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006C86 488D25(E0190000)    <1>     lea rsp, DiskStakTop
    95 00006C8D 55                  <1>     push rbp
    96 00006C8E 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006C8F E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006C94 7252                <1>     jc absDiskExit
    99 00006C96 E844020000          <1>     call primReqWriteSetup
   100 00006C9B EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006C9D FA                  <1>     cli 
   107 00006C9E 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006CA5 488D25(E0190000)    <1>     lea rsp, DiskStakTop
   109 00006CAC 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006CAD 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006CAE E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006CB3 7233                <1>     jc absDiskExit
   113 00006CB5 E830020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006CBA E859000000          <1>     call absDiskDriverCall
   118 00006CBF 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006CC1 8A05(C4040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006CC7 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006CC9 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006CCB 741A                <1>     je .absExit
   125 00006CCD B440                <1>     mov ah, 40h ;Seek error
   126 00006CCF 3C06                <1>     cmp al, 06h
   127 00006CD1 7414                <1>     je .absExit
   128 00006CD3 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006CD5 3C04                <1>     cmp al, 04h
   130 00006CD7 740E                <1>     je .absExit
   131 00006CD9 B404                <1>     mov ah, 04h ;Sector not found
   132 00006CDB 3C08                <1>     cmp al, 08h
   133 00006CDD 7408                <1>     je .absExit
   134 00006CDF 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006CE1 84C0                <1>     test al, al
   136 00006CE3 7402                <1>     je .absExit
   137 00006CE5 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006CE7 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006CE8 5B                  <1>     pop rbx
   142 00006CE9 5D                  <1>     pop rbp
   143 00006CEA FA                  <1>     cli
   144 00006CEB 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00006CF2 FB                  <1>     sti ;Reenable interrupts
   146 00006CF3 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006CFA 9C                  <1>     pushfq
   148 00006CFB 5A                  <1>     pop rdx ;Get the current flags
   149 00006CFC 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006D00 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006D05 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006D07 FA                  <1>     cli
   154 00006D08 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006D09 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006D0A 9C                  <1>     pushfq
   157 00006D0B 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006D0D 89CA                <1>     mov edx, ecx
   159 00006D0F FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006D15 9D                  <1>     popfq
   161 00006D16 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006D17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006D18 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006D19 8B0D(D7040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006D1F 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006D23 E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 00006D28 5E                  <1>     pop rsi
   177 00006D29 8B05(D7040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006D2F 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006D31 0FB705(C4040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 00006D38 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006D3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006D3D 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006D41 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006D44 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006D4A E87D020000          <1>     call setWorkingDPB
   192 00006D4F 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006D50 E839000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006D55 5F                  <1>     pop rdi
   195 00006D56 7235                <1>     jc .exitBad ;Preserve CF
   196 00006D58 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006D5A 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006D61 31C0                <1>     xor eax, eax
   200 00006D63 FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006D65 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006D69 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006D70 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006D76 7509                <1>     jnz .next
   207 00006D78 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006D7C 7503                <1>     jne .next   ;Else, goto next
   209 00006D7E 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006D81 4881C75F000000      <1>     add rdi, cds_size
   212 00006D88 FFC9                <1>     dec ecx
   213 00006D8A 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006D8C F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006D8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224 00006D8E E8A0010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   225                              <1> ;Return in rbx the req hdr address
   226 00006D93 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   227 00006D97 E830FEFFFF          <1>     call goDriver   ;Request!
   228 00006D9C 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   229 00006DA0 F7C700800000        <1>     test edi, drvErrStatus
   230 00006DA6 0F85C4000000        <1>     jnz .diskDrvCritErr
   231 00006DAC 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   232 00006DB3 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   233 00006DB6 3805(E9190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   234 00006DBC 750C                <1>     jne .notForce
   235                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   236                              <1>     ; not changed but the new volume needs to be updated. 
   237                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   238                              <1>     ; new label.  
   239 00006DBE C605(E9190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   240 00006DC5 E95E000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   241                              <1> .notForce:
   242 00006DCA 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   243 00006DCD 7854                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   244                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006DCF 75BC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   245                              <1>     ;Here we check for any dirty buffers
   246                              <1>     ;If dirty buffer found, dont get new DPB
   247 00006DD1 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   248                              <1> .checkBuffer:
   249 00006DD8 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   250 00006DDB 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   251 00006DDD F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   252 00006DE1 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   253 00006DE3 F8                  <1>     clc 
   254                              <1>     return
    13                              <2> %%_ret:
    14 00006DE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .gotoNextBuffer:
   256 00006DE5 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   257 00006DE8 4881FFFFFFFFFF      <1>     cmp rdi, -1
   258 00006DEF 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   259                              <1>     ;If we get here, we found no dirty buffers for our drive
   260                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   261 00006DF1 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset number of free to unknown
   262 00006DF8 E8E398FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   263                              <1> .dirtyLoop:
   264 00006DFD 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   265 00006E01 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   266 00006E04 7515                <1>     jne .skipDirtyCheck
   267 00006E06 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   268 00006E0A 0F8490000000        <1>     je .dirtyBufferError
   269                              <1>     ;Set reference bit and drive to free
   270 00006E10 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   271 00006E16 E8DF98FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   272                              <1> .skipDirtyCheck:
   273 00006E1B E8E898FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   274 00006E20 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   275                              <1> .exit:
   276                              <1>     return
    13                              <2> %%_ret:
    14 00006E22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   278 00006E23 E83A9AFFFF          <1>     call freeBuffersForDrive    ;Free all the buffers with the DPB in rbp
   279                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   280 00006E28 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   281                              <1>     ;Get a buffer to read BPB into in rdi
   282 00006E2C 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   283 00006E2E E8B49BFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   284 00006E33 723A                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   285 00006E35 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   286                              <1> .repeatEP:
   287 00006E39 E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   288 00006E3E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   289 00006E42 E885FDFFFF          <1>     call goDriver   ;Request!
   290 00006E47 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   291 00006E4B F7C700800000        <1>     test edi, drvErrStatus
   292 00006E51 751D                <1>     jnz .diskDrvCritErr
   293                              <1>     ;Now rebuild the dpb fields for this drive
   294 00006E53 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   295 00006E57 53                  <1>     push rbx
   296 00006E58 E8280A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   297 00006E5D 5B                  <1>     pop rbx
   298                              <1>     ;Adjust the buffer header information
   299 00006E5E 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   300 00006E61 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   301 00006E64 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   302 00006E67 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   303 00006E6A 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   304 00006E6C 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   305                              <1> .exitBad:
   306                              <1>     return
    13                              <2> %%_ret:
    14 00006E6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> .diskDrvCritErr:
   308                              <1> ;Critical Errors fall through here
   309                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   310 00006E70 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Reset freecluster count
   311 00006E77 48892D(8E070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   312 00006E7E B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   313 00006E80 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   314 00006E86 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   315 00006E8A E89CF7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   316 00006E8F 488B2D(8E070000)    <1>     mov rbp, qword [tmpDPBPtr]
   317 00006E96 3C01                <1>     cmp al, critRetry
   318 00006E98 0F84F0FEFFFF        <1>     je ensureDiskValid
   319                              <1> .errorExitBad:
   320 00006E9E F9                  <1>     stc     ;Set error flag to indicate fail
   321                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00006E9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .dirtyBufferError:
   324 00006EA0 55                  <1>     push rbp
   325 00006EA1 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   326 00006EA5 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   327 00006EAB 5D                  <1>     pop rbp
   328 00006EAC 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   329                              <1>     ;rbp points to the dpb still
   330 00006EAE 57                  <1>     push rdi
   331 00006EAF 488B3D(D0040000)    <1>     mov rdi, qword [primReqHdr + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   332 00006EB6 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   333 00006EBD 5F                  <1>     pop rdi ;Get back the buffer pointer
   334 00006EBE C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   335 00006EC5 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   336 00006ECC B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   337 00006ED1 E8EBF6FFFF          <1>     call diskDevErr
   338 00006ED6 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   339 00006ED8 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   340 00006EDA E95EFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;           Primitive Driver Requests
   343                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   344                              <1> ;First are Disk requests, then Char device requests
   345                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   346                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   347                              <1> 
   348                              <1> primReqWriteSetup:
   349 00006EDF 50                  <1>     push rax
   350 00006EE0 B408                <1>     mov ah, drvWRITE    ;Command code
   351 00006EE2 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   352 00006EE8 EB03                <1>     jmp short primReqRWCommon
   353                              <1> primReqReadSetup:
   354 00006EEA 50                  <1>     push rax
   355 00006EEB B404                <1>     mov ah, drvREAD
   356                              <1> primReqRWCommon:
   357                              <1> ;Sets up the IO request packet with:
   358                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   359                              <1> ; rbx = Data storage buffer ptr
   360                              <1> ; ecx = Number of sectors to transfer
   361                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   362                              <1> ; ~~~~ Set by entry function ~~~~ 
   363                              <1> ; ah = Command code
   364                              <1> ; All regs preserved EXCEPT rbx.
   365                              <1> ; Return: rbx = Transfer Address
   366 00006EED 48891D(CF040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   367 00006EF4 890D(D7040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   368 00006EFA C605(C1040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   369 00006F01 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   370 00006F06 8905(C2040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   371 00006F0C 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   372 00006F0F 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   373                              <1>     ;Disk operations only here!
   374 00006F11 488915(DB040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   375 00006F18 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   376 00006F1B 8805(CE040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   377 00006F21 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   378 00006F24 8805(C2040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   379                              <1> primReqCommonExit:
   380                              <1> ;Returns in rbx the primary request header as these functions
   381                              <1> ; setup the request in the primary request header space
   382 00006F2A 58                  <1>     pop rax
   383 00006F2B 488D1D(C1040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   384                              <1>     return
    13                              <2> %%_ret:
    14 00006F32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> 
   386                              <1> primReqMedCheckSetup:
   387                              <1> ;Prepare the diskIO packet for mediacheck
   388                              <1> ;rbp has DPB pointer for device to check media on
   389 00006F33 50                  <1>     push rax
   390 00006F34 C605(C1040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   391 00006F3B 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   392 00006F3E 8805(CE040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   393 00006F44 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   394 00006F47 8805(C2040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   395 00006F4D C605(C3040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   396 00006F54 66C705(C4040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   396 00006F5C 00                  <1>
   397 00006F5D EBCB                <1>     jmp short primReqCommonExit
   398                              <1> 
   399                              <1> primReqGetBPBSetup:
   400                              <1> ;rbp has DPB pointer for device
   401                              <1> ;rdi has sector buffer header pointer for transfer
   402 00006F5F 50                  <1>     push rax
   403 00006F60 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   404 00006F64 48893D(CF040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   405 00006F6B C605(C1040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   406 00006F72 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   407 00006F75 8805(CE040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   408 00006F7B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   409 00006F7E 8805(C2040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   410 00006F84 C605(C3040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   411 00006F8B 66C705(C4040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   411 00006F93 00                  <1>
   412 00006F94 EB94                <1>     jmp short primReqCommonExit
   413                              <1> 
   414                              <1> primReqOpenSetup:
   415                              <1> ;al = unit number if a disk device. Undefined otherwise
   416 00006F96 50                  <1>     push rax
   417 00006F97 B40D                <1>     mov ah, drvOPEN
   418 00006F99 EB03                <1>     jmp short primReqOCcommon
   419                              <1> primReqCloseSetup:
   420                              <1> ;al = unit number if a disk device. Undefined otherwise
   421 00006F9B 50                  <1>     push rax
   422 00006F9C B40E                <1>     mov ah, drvCLOSE
   423                              <1> primReqOCcommon:
   424 00006F9E C605(C1040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   425 00006FA5 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   426 00006FA6 8905(C2040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   427                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   428 00006FAC E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   429                              <1> 
   430                              <1> secdReqCharIOReq:
   431                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   432                              <1> ;Input:
   433                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   434                              <1> ; ecx = Length of buffer
   435                              <1> ; rdi = Buffer pointer
   436                              <1> ;Output: 
   437                              <1> ; rbx = Transfer Address 
   438 00006FB1 488D1D(97040000)    <1>     lea rbx, secdReqHdr
   439 00006FB8 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   440 00006FBB 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   441 00006FBE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   442 00006FC4 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   443 00006FC8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   444                              <1>     return
    13                              <2> %%_ret:
    14 00006FCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   445                              <1> ;If the device which will process this request is a disk device
   446                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   447                              <1> ;Then we will read the appropriate byte from that buffer to the 
   448                              <1> ; singleIOByt buffer.
   449                              <1> ;Such a request will require additional setup with the following fields:
   450                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    44                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006FCC 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006FD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006FD4 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 00006FDB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006FE2 7409                <1>     je .net
    23 00006FE4 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00006FEA 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006FEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006FED F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006FEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006FEF E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006FF4 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00006FF6 B80C110000          <1>     mov eax, 110Ch 
    43 00006FFB CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006FFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006FFE C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00007005 E8DB040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 0000700A E82EFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 0000700F 721C                <1>     jc .exit
    51 00007011 E86F9BFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00007016 7215                <1>     jc .exit
    53 00007018 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 0000701B FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 0000701D 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00007020 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00007023 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00007025 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 00007029 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 0000702C F8                  <1>     clc
    61                              <1> .exit:
    62 0000702D E8BD040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00007032 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00007033 50                  <1>     push rax    ;Preserve rax
    69 00007034 FA                  <1>     cli ;Halt interrupts
    70 00007035 0F010D(1F1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 0000703C 0FB6C0              <1>     movzx eax, al
    72 0000703F 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00007043 480305(211A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 0000704A 31DB                <1>     xor ebx, ebx
    75 0000704C 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 0000704F 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00007053 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 00007057 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 0000705B 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 0000705E FB                  <1>     sti
    81 0000705F 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 00007060 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 00007061 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 00007068 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 00007069 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 00007070 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 00007077 740A                <1>     je .exitBad
    96 00007079 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 0000707B 7407                <1>     je .exit    ;Drive found
    98 0000707D 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 00007081 EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 00007083 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 00007084 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> getCDSNotJoin:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   110                              <1> ;            set.
   111 00007085 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 0000708A 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 0000708C 56                  <1>     push rsi
   114 0000708D 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 00007094 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 0000709A 5E                  <1>     pop rsi
   117 0000709B 7401                <1>     jz .exit
   118 0000709D F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 0000709E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   123                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   124                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   125                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   126                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   127                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   128                              <1> ; a new CDS or even a new complete CDS array!
   129                              <1> ;Input: al = Drive Letter for drive
   130                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   131                              <1> ;Output: rdi = newly filled in workingCDS
   132                              <1> ;CF=NC => CDS valid and has a DPB
   133                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   134 0000709F 50                  <1>     push rax
   135 000070A0 2C40                <1>     sub al, "A"-1
   136 000070A2 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   137 000070A8 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   138 000070AF 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   139 000070B5 58                  <1>     pop rax
   140 000070B6 723C                <1>     jb .exit    ;Exit with CF=CY
   141 000070B8 50                  <1>     push rax
   142 000070B9 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   143 000070BE 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   144 000070C0 58                  <1>     pop rax
   145 000070C1 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   146 000070C7 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   147 000070CE 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   148 000070D6 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   149 000070DD 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   150                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   151 000070E3 50                  <1>     push rax
   152 000070E4 56                  <1>     push rsi
   153 000070E5 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   154 000070E7 E87DFFFFFF          <1>     call walkDPBchain
   155 000070EC 7204                <1>     jb .skipSettingDPB
   156 000070EE 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   157                              <1> .skipSettingDPB:
   158 000070F2 5E                  <1>     pop rsi
   159 000070F3 58                  <1>     pop rax
   160                              <1> .exit:
   161                              <1>     return
    13                              <2> %%_ret:
    14 000070F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   162                              <1> 
   163                              <1> getCDS:     ;Int 2Fh AX=1219h
   164                              <1> ;Gets the device DPB and saves it in the DOS variable
   165                              <1> ;This can be called to get CDS for network drives too!
   166                              <1> ;Input: al = 1 based drive number
   167                              <1> ;Sets workingCDS var with the CDS for the device. 
   168                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   169 000070F5 84C0                <1>     test al, al
   170 000070F7 7508                <1>     jnz .skip
   171 000070F9 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   172 000070FF FEC0                <1>     inc al
   173                              <1> .skip:
   174 00007101 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   175 00007103 56                  <1>     push rsi
   176 00007104 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   177 0000710B F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   178 00007112 7423                <1>     jz .localCall
   179                              <1>     ;Invokation via 21/5D00
   180 00007114 50                  <1>     push rax
   181 00007115 57                  <1>     push rdi
   182 00007116 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   183 0000711D 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   184 00007124 0441                <1>     add al, "A" ;Convert to a drive letter
   185 00007126 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   186 0000712B 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   187 00007131 5F                  <1>     pop rdi
   188 00007132 58                  <1>     pop rax
   189 00007133 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   190 00007135 EB17                <1>     jmp short .exitOk   ;All oki
   191                              <1> .localCall:
   192 00007137 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   193 0000713C 7208                <1>     jc .exitBad
   194 0000713E 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   195 00007144 7508                <1>     jnz .exitOk ;Exit with flag cleared
   196                              <1>     ;Else Return to unknown error locus
   197                              <1> .exitBad:
   198 00007146 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   199                              <1> .exitBad1:
   200 0000714D F9                  <1>     stc
   201                              <1> .exitOk:
   202 0000714E 5E                  <1>     pop rsi
   203                              <1>     return
    13                              <2> %%_ret:
    14 0000714F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   204                              <1> 
   205                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   206                              <1>     ;Gets the CDS for the current drive in al
   207                              <1>     ;Input: al = Drive number, 0 = A ...
   208                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   209                              <1>     ;        CF=CY => al not valid
   210 00007150 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   211 00007156 7202                <1>     jb .ctn
   212 00007158 F9                  <1>     stc 
   213                              <1>     return
    13                              <2> %%_ret:
    14 00007159 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   214                              <1> .ctn:
   215 0000715A 50                  <1>     push rax
   216 0000715B 52                  <1>     push rdx
   217 0000715C 0FB6C0              <1>     movzx eax, al
   218 0000715F 48BE5F000000000000- <1>     mov rsi, cds_size
   218 00007168 00                  <1>
   219 00007169 31D2                <1>     xor edx, edx
   220 0000716B F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   221 0000716D 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   222 00007174 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   223 00007177 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   224 0000717E 5A                  <1>     pop rdx
   225 0000717F 58                  <1>     pop rax
   226 00007180 F8                  <1>     clc
   227                              <1>     return
    13                              <2> %%_ret:
    14 00007181 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> 
   230                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   231                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   232                              <1> ;Input: AL = Char to normalise.
   233                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   234                              <1> ;If path separator, set ZF=ZE
   235 00007182 3C5C                <1>     cmp al, "\"
   236 00007184 7406                <1>     je .exit
   237 00007186 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   238 00007188 7502                <1>     jne .exit
   239 0000718A B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   240                              <1> .exit:
   241                              <1>     return
    13                              <2> %%_ret:
    14 0000718C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> uppercaseCharAtPtr:
   244                              <1> ;Get the char pointed to by rsi and then fall
   245 0000718D AC                  <1>     lodsb
   246                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   247                              <1> ;Convert a lowercase char to uppercase
   248                              <1> ; Leave alone uppercase chars and invalid chars
   249                              <1> ;Input: al = Char to convert to uppercase
   250                              <1> ;Output: al = Processed char
   251 0000718E 53                  <1>     push rbx
   252 0000718F 3C61                <1>     cmp al, "a"
   253 00007191 7214                <1>     jb .exit
   254 00007193 3C7A                <1>     cmp al, "z"
   255 00007195 7702                <1>     ja .checkExt
   256 00007197 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   257                              <1> .checkExt:
   258 00007199 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   259 0000719B 720A                <1>     jb .exit
   260 0000719D 2C80                <1>     sub al, 80h ;Turn into table offset
   261 0000719F 488D1D0491FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   262 000071A6 D7                  <1>     xlatb   ;Get converted extended byte into al
   263                              <1> .exit:
   264 000071A7 50                  <1>     push rax    ;Save al temporarily
   265 000071A8 488D1DAD92FFFF      <1>     lea rbx, asciiCharProperties
   266 000071AF D7                  <1>     xlatb   ;Get the signature in al
   267 000071B0 A801                <1>     test al, badChar
   268 000071B2 58                  <1>     pop rax
   269 000071B3 5B                  <1>     pop rbx
   270                              <1>     return
    13                              <2> %%_ret:
    14 000071B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> isCharTerminator:
   273                              <1> ;Input: al = Char to check properties of
   274                              <1> ;Output:    ZF=NZ => Char not name terminator
   275                              <1> ;           ZF=ZE => Char terminator
   276 000071B5 50                  <1>     push rax
   277 000071B6 53                  <1>     push rbx
   278 000071B7 488D1D9E92FFFF      <1>     lea rbx, asciiCharProperties
   279 000071BE D7                  <1>     xlatb
   280 000071BF A802                <1>     test al, termChar
   281 000071C1 5B                  <1>     pop rbx
   282 000071C2 58                  <1>     pop rax
   283                              <1>     return
    13                              <2> %%_ret:
    14 000071C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> isCharSeparator:
   286                              <1> ;Input: al = Char to check properties of
   287                              <1> ;Output:    ZF=NZ => Char not separator
   288                              <1> ;           ZF=ZE => Char separator
   289 000071C4 50                  <1>     push rax
   290 000071C5 53                  <1>     push rbx
   291 000071C6 488D1D8F92FFFF      <1>     lea rbx, asciiCharProperties
   292 000071CD D7                  <1>     xlatb
   293 000071CE A804                <1>     test al, sepChar
   294 000071D0 5B                  <1>     pop rbx
   295 000071D1 58                  <1>     pop rax
   296                              <1>     return
    13                              <2> %%_ret:
    14 000071D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> strlen2:    ;Int 2Fh, AX=1212h
   299                              <1> ;Entry point for Multiplex
   300 000071D3 57                  <1>     push rdi
   301 000071D4 4889F7              <1>     mov rdi, rsi
   302 000071D7 E802000000          <1>     call strlen
   303 000071DC 5F                  <1>     pop rdi
   304                              <1>     return
    13                              <2> %%_ret:
    14 000071DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> strlen: 
   306                              <1> ;Gets the length of a ASCIIZ string
   307                              <1> ;Input: rdi = Source buffer
   308                              <1> ;Output: ecx = Length of string
   309 000071DE 50                  <1>     push rax
   310 000071DF 57                  <1>     push rdi
   311 000071E0 30C0                <1>     xor al, al
   312 000071E2 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   313 000071E4 FFC9                <1>     dec ecx ;rcx = -1
   314 000071E6 F2AE                <1>     repne scasb
   315 000071E8 F7D1                <1>     not ecx
   316 000071EA 5F                  <1>     pop rdi
   317 000071EB 58                  <1>     pop rax
   318                              <1>     return
    13                              <2> %%_ret:
    14 000071EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> 
   320                              <1> strcpy:
   321                              <1> ;Copies a null terminated string from rsi to rdi
   322 000071ED AC                  <1>     lodsb
   323 000071EE AA                  <1>     stosb
   324 000071EF 84C0                <1>     test al, al
   325                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000071F1 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   326 000071F3 EBF8                <1>     jmp short strcpy
   327                              <1> 
   328                              <1> strcmp:
   329                              <1> ;Compares two ASCIIZ strings for equality.
   330                              <1> ;Input: rsi = First string
   331                              <1> ;       rdi = Second string
   332                              <1> ;       ecx = Number of bytes to compare
   333                              <1> ;Output: ZF=ZE => Equal
   334                              <1> ;        ZF=NZ => Not equal
   335 000071F5 56                  <1>     push rsi
   336 000071F6 57                  <1>     push rdi
   337 000071F7 F3A6                <1>     repe cmpsb
   338 000071F9 5F                  <1>     pop rdi
   339 000071FA 5E                  <1>     pop rsi
   340                              <1>     return
    13                              <2> %%_ret:
    14 000071FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> 
   343                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   344                              <1> ;Converts lowercase to uppercase and / to "\"
   345                              <1> ;Input: rsi = Source buffer
   346                              <1> ;       rdi = Buffer to place normalised path
   347 000071FC 50                  <1>     push rax
   348 000071FD 56                  <1>     push rsi
   349 000071FE 57                  <1>     push rdi
   350                              <1> .scan:
   351 000071FF AC                  <1>     lodsb
   352 00007200 84C0                <1>     test al, al
   353 00007202 740D                <1>     jz .exit
   354 00007204 E879FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   355 00007209 E880FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   356 0000720E AA                  <1>     stosb
   357 0000720F EBEE                <1>     jmp short .scan
   358                              <1> .exit:
   359 00007211 5F                  <1>     pop rdi
   360 00007212 5E                  <1>     pop rsi
   361 00007213 58                  <1>     pop rax
   362                              <1>     return
    13                              <2> %%_ret:
    14 00007214 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   365                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   366                              <1> ;Input: rsi = One ASCIIZ pathname
   367                              <1> ;       rdi = Second ASCIIZ pathname
   368                              <1> ;Return:
   369                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   370 00007215 50                  <1>     push rax
   371 00007216 56                  <1>     push rsi
   372 00007217 57                  <1>     push rdi
   373                              <1> .scan:
   374 00007218 AC                  <1>     lodsb
   375 00007219 E818000000          <1>     call .normaliseChar
   376 0000721E 88C4                <1>     mov ah, al  ;Save normalised char in ah
   377 00007220 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   378 00007222 48FFC7              <1>     inc rdi ;And goto next char
   379 00007225 E80C000000          <1>     call .normaliseChar
   380 0000722A 38E0                <1>     cmp al, ah  ;Are they equal?
   381 0000722C 7504                <1>     jne .exit   ;If not equal, exit
   382 0000722E 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   383 00007230 75E6                <1>     jnz .scan
   384                              <1> .exit:
   385 00007232 5F                  <1>     pop rdi
   386 00007233 5E                  <1>     pop rsi
   387 00007234 58                  <1>     pop rax
   388                              <1>     return
    13                              <2> %%_ret:
    14 00007235 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .normaliseChar:
   390 00007236 E853FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   391 0000723B E842FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   392                              <1>     return
    13                              <2> %%_ret:
    14 00007240 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> checkPathspecOK:
   394                              <1> ;Input:
   395                              <1> ;rsi -> points to a path to verify if it is ok.
   396                              <1> ;Output:
   397                              <1> ;CF=NC => The path is totally clean and ok to use.
   398                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   399                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   400                              <1> ; and depending on method of invokation and caller, may be permissable.
   401                              <1> ;We accept lc and uc characters in this check function.
   402 00007241 50                  <1>     push rax
   403 00007242 53                  <1>     push rbx    ;Use rbx as the return flag status
   404 00007243 56                  <1>     push rsi
   405 00007244 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   406                              <1>     ;Start by getting the length of the ASCIIZ string.
   407 00007246 51                  <1>     push rcx
   408 00007247 57                  <1>     push rdi
   409 00007248 4889F7              <1>     mov rdi, rsi
   410 0000724B E88EFFFFFF          <1>     call strlen
   411 00007250 89C8                <1>     mov eax, ecx    ;Save the length in eax
   412 00007252 5F                  <1>     pop rdi
   413 00007253 59                  <1>     pop rcx
   414 00007254 3D40000000          <1>     cmp eax, 64    ;Check
   415 00007259 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   416 0000725F 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   417 00007261 0F848A000000        <1>     jz .badExit
   418                              <1>     ;First we verify if our path is relative or canonical (absolute)
   419 00007267 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   420 0000726A 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   421 0000726E 7416                <1>     je .netName
   422 00007270 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   423 00007274 7410                <1>     je .netName
   424 00007276 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   425 00007279 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   426                              <1>     ;Here if relative
   427 0000727B F605(02070000)FF    <1>     test byte [dosInvoke], -1
   428 00007282 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   429 00007284 EB3B                <1>     jmp short .okToScan
   430                              <1> .netName:
   431 00007286 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   432 0000728D 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   433 00007290 745F                <1>     je .badExit
   434 00007292 EB2D                <1>     jmp short .okToScan
   435                              <1> .diskPath:
   436 00007294 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   437 0000729B 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   438 0000729E 7451                <1>     je .badExit
   439 000072A0 F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   440 000072A7 740F                <1>     jz .localAbsCheck
   441                              <1> .absMain:
   442 000072A9 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   443 000072AA E8D3FEFFFF          <1>     call swapPathSeparator
   444 000072AF 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   445 000072B1 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   446 000072B4 743B                <1>     je .badExit ;Error if so!
   447 000072B6 EB09                <1>     jmp short .okToScan
   448                              <1> .localAbsCheck:
   449 000072B8 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   450 000072BA E8C3FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   451 000072BF 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   452                              <1>     ;Else we are relative and begin wildcard search
   453                              <1> .okToScan:
   454 000072C1 AC                  <1>     lodsb   
   455 000072C2 84C0                <1>     test al, al ;End of path char?
   456 000072C4 7430                <1>     jz .exit
   457 000072C6 E8B7FEFFFF          <1>     call swapPathSeparator
   458 000072CB 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   459 000072CD 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   460 000072CF 7411                <1>     je .wcFound
   461 000072D1 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   462 000072D3 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   463                              <1>     ;Else we check that the char in al is an acceptable char
   464 000072D5 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   465 000072D7 74E8                <1>     je .okToScan
   466 000072D9 E831000000          <1>     call checkCharValid
   467 000072DE 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   468 000072E0 EBDF                <1>     jmp short .okToScan
   469                              <1> .wcFound:
   470 000072E2 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   471 000072E7 EBD8                <1>     jmp short .okToScan
   472                              <1> .wcCheck:
   473                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   474 000072E9 F7C340000000        <1>     test ebx, 40h
   475 000072EF 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   476                              <1>     ;Else fall through in error
   477                              <1> .badExit:
   478 000072F1 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   479                              <1> .exit:
   480 000072F6 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   481 000072F7 9D                  <1>     popfq
   482 000072F8 5E                  <1>     pop rsi
   483 000072F9 5B                  <1>     pop rbx
   484 000072FA 58                  <1>     pop rax
   485                              <1>     return
    13                              <2> %%_ret:
    14 000072FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> scanPathWC:
   488                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   489                              <1> ; even in the final path componant.
   490                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   491                              <1> ;Output: CF=NC => No wildcards present
   492                              <1> ;        CF=CY => Wildcards found
   493 000072FC 50                  <1>     push rax
   494 000072FD 56                  <1>     push rsi
   495                              <1> .scan:
   496 000072FE AC                  <1>     lodsb
   497 000072FF 84C0                <1>     test al, al
   498 00007301 7409                <1>     jz .exit
   499 00007303 3C3F                <1>     cmp al, "?"
   500 00007305 7404                <1>     je .wcFnd
   501 00007307 3C2A                <1>     cmp al, "*"
   502 00007309 75F3                <1>     jne .scan
   503                              <1> .wcFnd:
   504 0000730B F9                  <1>     stc
   505                              <1> .exit:
   506 0000730C 5E                  <1>     pop rsi
   507 0000730D 58                  <1>     pop rax
   508                              <1>     return
    13                              <2> %%_ret:
    14 0000730E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> checkCharValid:
   511                              <1> ;If ZF=ZE => Invalid Char
   512                              <1> ;If ZF=NZ => Valid Char
   513 0000730F 50                  <1>     push rax
   514 00007310 E879FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   515 00007315 58                  <1>     pop rax
   516                              <1>     return
    13                              <2> %%_ret:
    14 00007316 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> 
   519                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   520                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   521                              <1> ;Input: rsi = One pointer
   522                              <1> ;       rdi = Second pointer
   523                              <1> ;Output: ZF=ZE if equal
   524                              <1> ;        ZF=NZ if not
   525 00007317 4839FE              <1>     cmp rsi, rdi
   526                              <1>     return
    13                              <2> %%_ret:
    14 0000731A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkPathNet:
   529                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   530                              <1> ;Output: ZF=ZE => Path is a net path
   531                              <1> ;        ZF=NZ => Path is not a net path
   532 0000731B 50                  <1>     push rax
   533 0000731C 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   534 0000731F E85EFEFFFF          <1>     call swapPathSeparator
   535 00007324 7507                <1>     jnz .exit
   536 00007326 88E0                <1>     mov al, ah  ;Get the second char
   537 00007328 E855FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   538                              <1> .exit:
   539 0000732D 58                  <1>     pop rax
   540                              <1>     return
    13                              <2> %%_ret:
    14 0000732E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> getCharDevDriverPtr:
   543                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   544                              <1> ;Input: rax = Device Driver name (space padded)
   545                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   546 0000732F 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   547                              <1> .lp:
   548 00007336 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   549                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000733A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   550 0000733C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   551 0000733F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   552 00007346 75EE                <1>     jne .lp ;If not loop
   553 00007348 F9                  <1>     stc ;Else bad exit
   554                              <1>     return
    13                              <2> %%_ret:
    14 00007349 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   557                              <1> ;Pointer to the first non-null device driver in the chain.
   558                              <1> ;Returns the value in rax only
   559 0000734A 488D05(7A000000)    <1>     lea rax, nulDevHdr
   560 00007351 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   561                              <1>     return
    13                              <2> %%_ret:
    14 00007354 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   564                              <1> ;Gets the extended error code in ax and returns
   565 00007355 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   566                              <1>     return
    13                              <2> %%_ret:
    14 0000735C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7 0000735D FA                  <1>     cli ;Halt external interrupts
     8 0000735E FC                  <1>     cld ;Ensure all string ops occur in the right direction
     9 0000735F 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    10 00007362 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    11                              <1>     ;Cherry pick functions
    12 00007368 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    13 0000736B 7235                <1>     jb .fsbegin   ;If below skip these checks
    14 0000736D 0F847C020000        <1>     je ctrlBreakCheck
    15 00007373 80FC64              <1>     cmp ah, 64h
    16 00007376 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    17 0000737C 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    18 0000737E 80FC51              <1>     cmp ah, 51h
    19 00007381 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    20 00007387 80FC62              <1>     cmp ah, 62h
    21 0000738A 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    22 00007390 80FC50              <1>     cmp ah, 50h
    23 00007393 0F84A0020000        <1>     je setCurrProcessID
    24 00007399 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    25 0000739C 0F84BA020000        <1>     je systemServices
    26                              <1> .fsbegin:
    27 000073A2 E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    28 000073A7 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    29 000073AE 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    29 000073B6 00                  <1>
    30 000073B7 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    31 000073BE 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    32 000073C5 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    33 000073CB 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    34                              <1> ;Network related variable resetting
    35 000073D2 C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    36                              <1> ;Here, we want to save oldRSP in the callers PSP
    37 000073D9 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    38 000073E0 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    39 000073E4 58                  <1>     pop rax     ;Get old rax back
    40 000073E5 50                  <1>     push rax    ;and push it back onto the stack
    41                              <1> .charFun0CEP:
    42                              <1> .serverEP:
    43 000073E6 488D25(100D0000)    <1>     lea rsp, critStakTop
    44 000073ED FB                  <1>     sti         ;Reenable interrupts
    45                              <1> 
    46 000073EE 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    47 000073F0 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    48 000073F6 C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    49 000073FD 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    50 00007403 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    51                              <1> 
    52 00007409 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    53 0000740A 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    54 0000740C D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    55 0000740E 488D054791FFFF      <1>     lea rax, kDispTbl
    56 00007415 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    57 00007418 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    58 0000741C 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    59 0000741F 58                  <1>     pop rax
    60                              <1> 
    61 00007420 84E4                <1>     test ah, ah     ;Simple Terminate function?
    62 00007422 741C                <1>     jz .fddiskOp
    63 00007424 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    64 00007427 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    65 00007429 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    66 0000742C 7712                <1>     ja .fddiskOp
    67                              <1> ;Char operations here
    68 0000742E F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    69 00007435 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    70 00007437 488D25(A0130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    71 0000743E EB40                <1>     jmp short .fdGoToFunction
    72                              <1> .fddiskOp:
    73                              <1>     ;Disk operations go here
    74                              <1>     ;Save rax on entry to a disk funciton
    75 00007440 488905(33040000)    <1>     mov qword [oldRAX], rax
    76                              <1>     ;Clear up error info
    77 00007447 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    78 0000744E C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    79 00007455 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    80                              <1> 
    81 0000745C 50                  <1>     push rax
    82 0000745D B482                <1>     mov ah, 82h ;Cancel all critical section!
    83 0000745F CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    84 00007461 58                  <1>     pop rax
    85                              <1> 
    86 00007462 C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    87 00007469 488D25(E0190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
    88 00007470 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
    89 00007477 7407                <1>     jz .fdGoToFunction
    90                              <1> ; HANDLE CTRL+BREAK HERE!
    91 00007479 50                  <1>     push rax
    92 0000747A E819B4FFFF          <1>     call checkBreak   ; Check for a ^C
    93 0000747F 58                  <1>     pop rax
    94                              <1> .fdGoToFunction:
    95 00007480 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
    96                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
    97                              <1>     ;
    98                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
    99                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   100                              <1>     ;
   101 00007487 FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   102                              <1> .fdExit:
   103 0000748D FA                  <1>     cli     ;Redisable interrupts
   104 0000748E FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   105 00007494 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   106 0000749B 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   107 0000749E 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   108 000074A5 488905(7B040000)    <1>     mov qword [oldRSP], rax
   109 000074AC E806000000          <1>     call dosPopRegs  ;Pop the frame
   110 000074B1 48CF                <1>     iretq
   111                              <1> .fdExitBad:
   112 000074B3 30C0                <1>     xor al, al
   113                              <1> defaultIretq:
   114 000074B5 48CF                <1>     iretq
   115                              <1> dosPopRegs:
   116 000074B7 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   117 000074BD 58                  <1>     pop rax
   118 000074BE 5B                  <1>     pop rbx
   119 000074BF 59                  <1>     pop rcx
   120 000074C0 5A                  <1>     pop rdx
   121 000074C1 5E                  <1>     pop rsi
   122 000074C2 5F                  <1>     pop rdi
   123 000074C3 5D                  <1>     pop rbp
   124 000074C4 4158                <1>     pop r8
   125 000074C6 4159                <1>     pop r9
   126 000074C8 FF25(73040000)      <1>     jmp qword [dosReturn]
   127                              <1> dosPushRegs:
   128 000074CE 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   129 000074D4 4151                <1>     push r9
   130 000074D6 4150                <1>     push r8
   131 000074D8 55                  <1>     push rbp
   132 000074D9 57                  <1>     push rdi
   133 000074DA 56                  <1>     push rsi
   134 000074DB 52                  <1>     push rdx
   135 000074DC 51                  <1>     push rcx
   136 000074DD 53                  <1>     push rbx
   137 000074DE 50                  <1>     push rax
   138 000074DF FF25(73040000)      <1>     jmp qword [dosReturn]
   139                              <1> dosCrit1Enter:
   140                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000074E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141 000074E6 B801800000          <1>     mov eax, 8001h
   142 000074EB CD2A                <1>     int 2ah
   143 000074ED 58                  <1>     pop rax
   144                              <1>     return
    13                              <2> %%_ret:
    14 000074EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> dosCrit1Exit:
   146                              <1>     return
    13                              <2> %%_ret:
    14 000074EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147 000074F0 B801810000          <1>     mov eax, 8101h
   148 000074F5 CD2A                <1>     int 2ah
   149 000074F7 58                  <1>     pop rax
   150                              <1>     return
    13                              <2> %%_ret:
    14 000074F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> dosCrit2Enter:
   152                              <1>     return
    13                              <2> %%_ret:
    14 000074F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   153 000074FA B802800000          <1>     mov eax, 8002h
   154 000074FF CD2A                <1>     int 2ah
   155 00007501 58                  <1>     pop rax
   156                              <1>     return
    13                              <2> %%_ret:
    14 00007502 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   157                              <1> dosCrit2Exit:
   158                              <1>     return
    13                              <2> %%_ret:
    14 00007503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159 00007504 B802810000          <1>     mov eax, 8102h
   160 00007509 CD2A                <1>     int 2ah
   161 0000750B 58                  <1>     pop rax
   162                              <1>     return
    13                              <2> %%_ret:
    14 0000750C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> ;FCB specific returns
   165                              <1> fcbGoodExit:
   166                              <1> ;Preserve the carry flag on entry to DOS
   167 0000750D 30C0                <1>     xor al, al ;Set return code al = 0
   168                              <1>     return
    13                              <2> %%_ret:
    14 0000750F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   169                              <1> fcbErrExit:
   170                              <1> ;Preserve the carry flag on entry to DOS
   171                              <1> ;Input: eax = Extended error code to store in SDA 
   172 00007510 E836000000          <1>     call xLatError
   173 00007515 B0FF                <1>     mov al, -1  ;Set return code al = -1
   174 00007517 F9                  <1>     stc
   175                              <1>     return
    13                              <2> %%_ret:
    14 00007518 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> ;Handle and General DOS Returns
   178                              <1> ;All good exits destroy AT LEAST ax 
   179                              <1> extGoodExit2:
   180                              <1> ;Good exit with an extended return code in eax
   181 00007519 E843FBFFFF          <1>     call getUserRegs
   182 0000751E 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   183 00007520 EB08                <1>     jmp short extGoodExit.extGoodCommon
   184                              <1> extGoodExit:
   185                              <1> ;Good exit
   186                              <1> ;Return code in ax
   187 00007522 E83AFBFFFF          <1>     call getUserRegs
   188 00007527 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   189                              <1> .extGoodCommon:
   190 0000752A 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   191 0000752E F8                  <1>     clc
   192                              <1>     return
    13                              <2> %%_ret:
    14 0000752F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> extErrExit:
   194                              <1> ;The extended error exit from DOS
   195                              <1> ;Jumped to with AL=Extended error code
   196                              <1> ;Can be called too.
   197                              <1> ;Input: al = Extended error code
   198                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   199                              <1> ;   Returns with: eax = xLat Error
   200                              <1> ;                 rsi = callerFrame
   201 00007530 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   202 00007533 E813000000          <1>     call xLatError
   203 00007538 E891000000          <1>     call checkFail
   204                              <1> .noXlat:
   205 0000753D E81FFBFFFF          <1>     call getUserRegs
   206 00007542 668906              <1>     mov word [rsi + callerFrame.rax], ax
   207 00007545 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   208 00007549 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   209                              <1>     return
    13                              <2> %%_ret:
    14 0000754A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> xLatError:
   211                              <1> ;Translates the error code given in ax and sets error code in the var
   212                              <1> ; Input: ax = Extended Error Code
   213                              <1> ; Output: ax = Potentially translated Error Code
   214                              <1> ;         [errorExCde] = Original Error Code
   215                              <1> ;Preserves all registers except ax
   216                              <1> ;AH is always returned as 0
   217 0000754B 53                  <1>     push rbx
   218 0000754C 51                  <1>     push rcx
   219 0000754D 56                  <1>     push rsi
   220 0000754E 668905(0B040000)    <1>     mov word [errorExCde], ax
   221 00007555 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   222 00007557 488D351B8BFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   223                              <1> .readEntry:
   224 0000755E 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   225 00007560 3CFF                <1>     cmp al, -1
   226 00007562 741F                <1>     je .skipXlat
   227 00007564 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   228 0000756A 7408                <1>     je .found
   229                              <1>     ;Here, entry not found, goto next entry
   230 0000756C 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   231 0000756F 4801C6              <1>     add rsi, rax    ;Goto next entry
   232 00007572 EBEA                <1>     jmp short .readEntry
   233                              <1> .found:
   234                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   235 00007574 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   236                              <1> .mainSearch:
   237 00007577 AC                  <1>     lodsb   ;Get one byte into al
   238 00007578 38C3                <1>     cmp bl, al  ;Check against the error code
   239 0000757A 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   240 0000757C FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   241 0000757E 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   242                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   243 00007580 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   244                              <1> .skipXlat:
   245 00007583 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   246 00007585 5E                  <1>     pop rsi
   247 00007586 59                  <1>     pop rcx
   248 00007587 5B                  <1>     pop rbx
   249                              <1>     return
    13                              <2> %%_ret:
    14 00007588 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   250                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   251                              <1> ;Looks up the error code in the variable and sets the other error vars
   252                              <1> ;Called with the lookup table in rsi
   253                              <1> ;All regs preserved
   254 00007589 50                  <1>     push rax
   255 0000758A 53                  <1>     push rbx
   256 0000758B 51                  <1>     push rcx
   257 0000758C 56                  <1>     push rsi
   258 0000758D 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   259 00007594 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   260                              <1> .readEntry:
   261 00007599 AD                  <1>     lodsd   ;Read the dword table entry into eax
   262 0000759A 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   263 0000759F 7428                <1>     je .exit    
   264 000075A1 38D8                <1>     cmp al, bl  ;Compare the error codes
   265 000075A3 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   266 000075A5 D3E8                <1>     shr eax, cl
   267 000075A7 3CFF                <1>     cmp al, -1
   268 000075A9 7406                <1>     je .skipClass
   269 000075AB 8805(0E040000)      <1>     mov byte [errorClass], al
   270                              <1> .skipClass:
   271 000075B1 D3E8                <1>     shr eax, cl
   272 000075B3 3CFF                <1>     cmp al, -1
   273 000075B5 7406                <1>     je .skipAct
   274 000075B7 8805(0D040000)      <1>     mov byte [errorAction], al
   275                              <1> .skipAct:
   276 000075BD D3E8                <1>     shr eax, cl
   277 000075BF 3CFF                <1>     cmp al, -1
   278 000075C1 7406                <1>     je .exit
   279 000075C3 8805(0A040000)      <1>     mov byte [errorLocus], al
   280                              <1> .exit:
   281 000075C9 5E                  <1>     pop rsi
   282 000075CA 59                  <1>     pop rcx
   283 000075CB 5B                  <1>     pop rbx
   284 000075CC 58                  <1>     pop rax
   285                              <1>     return
    13                              <2> %%_ret:
    14 000075CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   286                              <1> checkFail:
   287                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   288                              <1> ; and swaps the var error code if so
   289 000075CE F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   290 000075D5 7409                <1>     jz .skipFail
   291 000075D7 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   291 000075DF 00                  <1>
   292                              <1> .skipFail:
   293 000075E0 56                  <1>     push rsi
   294 000075E1 488D352D8BFFFF      <1>     lea rsi, extErrTbl
   295 000075E8 E89CFFFFFF          <1>     call setErrorVars
   296 000075ED 5E                  <1>     pop rsi
   297                              <1>     return
    13                              <2> %%_ret:
    14 000075EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> ;========================================:
   299                              <1> ;      Reentrant Kernel Functions        :
   300                              <1> ;========================================:
   301                              <1> ctrlBreakCheck:    ;ah = 33h
   302 000075EF 3C06                <1>     cmp al, 6
   303 000075F1 743C                <1>     je .trueVer
   304 000075F3 3C05                <1>     cmp al, 5
   305 000075F5 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   306 000075F7 84C0                <1>     test al, al
   307 000075F9 7508                <1>     jnz .cbcget     ;Get the state or other functions
   308 000075FB 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   309 00007601 48CF                <1>     iretq
   310                              <1> .cbcget:
   311 00007603 3C02                <1>     cmp al, 02h
   312 00007605 771A                <1>     ja .cbcBad
   313 00007607 740D                <1>     jz .cbcxchg ;Function 2
   314 00007609 52                  <1>     push rdx
   315 0000760A 80E201              <1>     and dl, 1   ;Get only the bottom bit
   316 0000760D 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   317 00007613 5A                  <1>     pop rdx
   318 00007614 48CF                <1>     iretq
   319                              <1> .cbcxchg:
   320 00007616 80E201              <1>     and dl, 1
   321 00007619 8615(32040000)      <1>     xchg byte [breakFlag], dl
   322 0000761F 48CF                <1>     iretq
   323                              <1> .cbcBad:
   324 00007621 B0FF                <1>     mov al, -1
   325 00007623 48CF                <1>     iretq
   326                              <1> .getBtDrv:
   327                              <1> ;Undocumented.
   328                              <1> ;Might be unreliable so dont document yet.
   329                              <1> ;Return 1 based boot drive in dl
   330 00007625 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   331 0000762B FEC2                <1>     inc dl  ;Return a 1 based drive number
   332 0000762D 48CF                <1>     iretq
   333                              <1> .trueVer:
   334                              <1> ;Undocumented.
   335                              <1> ;bx returns true DOS number.
   336                              <1> ;dl has "revision" number in bits 0-2. 
   337                              <1> ;dh has various flags. All reserved for future use.
   338 0000762F 66BB0062            <1>     mov bx, dosVerMac
   339 00007633 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   340 00007637 48CF                <1>     iretq
   341                              <1> 
   342                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   343 00007639 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   344 00007640 48CF                <1>     iretq
   345                              <1> 
   346                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   347 00007642 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   348 00007649 48CF                <1>     iretq
   349                              <1> 
   350                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   351 0000764B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   352 00007652 48CF                <1>     iretq
   353                              <1> 
   354                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   355 00007654 8805(E8190000)      <1>     mov byte [lookahead], al    
   356 0000765A 48CF                <1>     iretq
   357                              <1> 
   358                              <1> systemServices: ;ah = 61h
   359                              <1> ;All pointers returned in rdx
   360                              <1> ;al = 0 -> Get Environment pointer in rdx
   361                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   362                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   363                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   364                              <1> ;                        Else, rdx -> Filename
   365 0000765C 3C01                <1>     cmp al, 1
   366 0000765E 7453                <1>     je short .getCmdLineArgs
   367 00007660 3C02                <1>     cmp al, 2
   368 00007662 760C                <1>     jbe .getEnvPtr
   369 00007664 B801000000          <1>     mov eax, errInvFnc
   370                              <1> .exitBad:
   371 00007669 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   372 0000766E 48CF                <1>     iretq
   373                              <1> .getEnvPtr:
   374                              <1>     ;Gets the environment pointer in rdx
   375 00007670 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   376 00007677 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   377 0000767B 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   378                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   379                              <1> ; pass the ptr to the word after.
   380 0000767D FA                  <1>     cli
   381 0000767E 51                  <1>     push rcx
   382 0000767F 31C9                <1>     xor ecx, ecx
   383 00007681 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   384                              <1> .gep0:
   385 00007686 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   386 0000768B 740D                <1>     je short .gep1
   387 0000768D 48FFC2              <1>     inc rdx         ;Go to the next byte
   388 00007690 FFC9                <1>     dec ecx
   389 00007692 75F2                <1>     jnz short .gep0
   390                              <1> .gep00:
   391                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   392 00007694 59                  <1>     pop rcx
   393 00007695 FB                  <1>     sti
   394 00007696 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   395 00007698 EBCF                <1>     jmp short .exitBad
   396                              <1> .gep1:
   397 0000769A 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   398 000076A1 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   399 000076A6 75EC                <1>     jne .gep00
   400 000076A8 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   401 000076AF 59                  <1>     pop rcx
   402 000076B0 FB                  <1>     sti
   403 000076B1 EB0B                <1>     jmp short .exitOk
   404                              <1> .getCmdLineArgs:
   405 000076B3 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   406 000076BA 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   407                              <1> .exitOk:
   408 000076BE 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   409 000076C3 48CF                <1>     iretq
   410                              <1> 
   411                              <1> 
   412                              <1> ;========================================:
   413                              <1> ;            Kernel Functions            :
   414                              <1> ;========================================:
   415                              <1> diskReset:         ;ah = 0Dh
   416                              <1> ;Flush all dirty buffers to disk
   417 000076C5 E81BFEFFFF          <1>     call dosCrit1Enter
   418 000076CA B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   419 000076CC E85C90FFFF          <1>     call flushAllBuffersForDrive  
   420                              <1>     ;Now we free all buffers and set their referenced bit
   421 000076D1 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   422                              <1> .drBufferLp:
   423 000076D8 4881FFFFFFFFFF      <1>     cmp rdi, -1
   424 000076DF 740B                <1>     je .drExit
   425 000076E1 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   426 000076E7 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   427 000076EA EBEC                <1>     jmp short .drBufferLp
   428                              <1> .drExit:
   429 000076EC E8FEFDFFFF          <1>     call dosCrit1Exit
   430 000076F1 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   431 000076F6 CD2F                <1>     int 2fh
   432                              <1>     return
    13                              <2> %%_ret:
    14 000076F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> selectDisk:        ;ah = 0Eh
   435                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   436 000076F9 88D0                <1>     mov al, dl
   437 000076FB FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   438 000076FD E883F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   439 00007702 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   440 00007704 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   441                              <1> .skipSettingCurrent:
   442 0000770A 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   443                              <1>     return
    13                              <2> %%_ret:
    14 00007711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   446 00007712 8A05(31040000)      <1>     mov al, byte [currentDrv]
   447                              <1>     return
    13                              <2> %%_ret:
    14 00007718 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> FATinfoDefault:    ;ah = 1Bh
   450 00007719 30D2                <1>     xor dl, dl
   451                              <1> FATinfoDevice:     ;ah = 1Ch
   452                              <1> ;Input: dl = 1 based drive number
   453                              <1> ;Output:
   454                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   455                              <1> ;cx = bytes per sector
   456                              <1> ;edx = total number of clusters
   457                              <1> ;rbx = Ptr to media ID byte
   458 0000771B 88D0                <1>     mov al, dl  ;Move drive number into al
   459 0000771D E8D3F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   460 00007722 7307                <1>     jnc .fidCDSFound
   461 00007724 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   462 00007729 EB2E                <1>     jmp short .error 
   463                              <1> .fidCDSFound:
   464 0000772B E8BFF8FFFF          <1>     call getDiskData
   465 00007730 7227                <1>     jc .error
   466                              <1> ;Now we have that:
   467                              <1> ;al = sectors per cluster
   468                              <1> ;ah = media ID byte
   469                              <1> ;ebx = total clusters
   470                              <1> ;cx = bytes per sector
   471                              <1> ;edx = number of available clusters
   472 00007732 E82AF9FFFF          <1>     call getUserRegs
   473 00007737 8825(96070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   474 0000773D 30E4                <1>     xor ah, ah
   475 0000773F 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   476 00007742 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   477 00007746 488D1D(96070000)    <1>     lea rbx, mediaByte
   478 0000774D 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   479 00007751 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   480                              <1> .badExit:
   481 00007755 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   482                              <1>     return
    13                              <2> %%_ret:
    14 00007758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> .error:
   484 00007759 E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   485 0000775E 66B8FFFF            <1>     mov ax, -1
   486 00007762 EBF1                <1>     jmp short .badExit
   487                              <1> 
   488                              <1> setIntVector:      ;ah = 25h
   489                              <1> ;Called with:
   490                              <1> ;   rdx = Pointer to interrupt handler
   491                              <1> ;   al = Interrupt number
   492 00007764 FA                  <1>     cli ;Halt interrupts
   493 00007765 0F010D(1F1A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   494 0000776C 0FB6C0              <1>     movzx eax, al
   495 0000776F 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   496 00007773 480305(211A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   497 0000777A 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   498 0000777D 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   499 00007781 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   500 00007785 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   501 00007789 895008              <1>     mov dword [rax + 8], edx
   502 0000778C FB                  <1>     sti
   503                              <1>     return
    13                              <2> %%_ret:
    14 0000778D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> 
   505                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   506 0000778E 8805(D0030000)      <1>     mov byte [verifyFlag], al
   507 00007794 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   508                              <1>     return
    13                              <2> %%_ret:
    14 0000779B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> getDOSversion:     ;ah = 30h
   510 0000779C E8C0F8FFFF          <1>     call getUserRegs
   511 000077A1 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   512 000077A3 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   513 000077A6 668B055388FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   514 000077AD 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   515                              <1>     return
    13                              <2> %%_ret:
    14 000077B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   518                              <1> ;Input: dx = Version number. Value of 0 means true value.
   519 000077B1 6685D2              <1>     test dx, dx
   520 000077B4 750A                <1>     jnz .newVal
   521 000077B6 66C7054188FFFF0062  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   522                              <1>     return
    13                              <2> %%_ret:
    14 000077BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .newVal:
   524 000077C0 6689153988FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   525                              <1>     return
    13                              <2> %%_ret:
    14 000077C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   528                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   529 000077C8 30D2                <1>     xor dl, dl
   530                              <1> getDeviceDPBptr:   ;ah = 32h
   531                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   532                              <1> ;On exit: rbx = DPB pointer
   533 000077CA 88D0                <1>     mov al, dl
   534 000077CC E824F9FFFF          <1>     call getCDS
   535 000077D1 722C                <1>     jc .bad
   536 000077D3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   537 000077DA 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   538 000077E0 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   539                              <1>     ;Here ONLY if accessing critical Disk data structures
   540 000077E2 E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   541 000077E7 E851F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   542 000077EC E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   543 000077F1 720C                <1>     jc .bad
   544 000077F3 E869F8FFFF          <1>     call getUserRegs
   545 000077F8 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   546 000077FC 30C0                <1>     xor al, al
   547                              <1>     return
    13                              <2> %%_ret:
    14 000077FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> .bad:
   549 000077FF B0FF                <1>     mov al, -1
   550                              <1>     return
    13                              <2> %%_ret:
    14 00007801 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> getInDOSflagPtr:   ;ah = 34h
   553 00007802 488D15(08040000)    <1>     lea rdx, inDOS
   554 00007809 E853F8FFFF          <1>     call getUserRegs
   555 0000780E 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   556                              <1>     return
    13                              <2> %%_ret:
    14 00007812 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getIntVector:      ;ah = 35h
   559                              <1> ;Called with:
   560                              <1> ;   al = Interrupt Number
   561                              <1> ;Returns:
   562                              <1> ;   rbx = Pointer to interrupt handler
   563 00007813 E81BF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   564 00007818 E844F8FFFF          <1>     call getUserRegs
   565 0000781D 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   566                              <1>     return
    13                              <2> %%_ret:
    14 00007821 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   567                              <1> 
   568                              <1> getDiskFreeSpace:  ;ah = 36h
   569                              <1> ;Input: Drive number in dl (0 = Current)
   570                              <1> ;Output:    ax = sectors per cluster
   571                              <1> ;           ebx = number of free clusters
   572                              <1> ;           cx = bytes per sector
   573                              <1> ;           edx = total clusters on drive
   574 00007822 88D0                <1>     mov al, dl
   575 00007824 E8CCF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   576 00007829 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   577                              <1> ;Else, we at an error.
   578                              <1> ;Simply return with CY set and error code in al with extended error info
   579 0000782B B80F000000          <1>     mov eax, errBadDrv
   580 00007830 E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   581                              <1>     ;extErrExit sets rsi to caller regs
   582 00007835 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000783A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .gdfsCDSFound:
   585 0000783B E8AFF7FFFF          <1>     call getDiskData
   586 00007840 7219                <1>     jc .error
   587                              <1> ;Now we have that:
   588                              <1> ;al = sectors per cluster
   589                              <1> ;ah = media ID byte
   590                              <1> ;ebx = total clusters
   591                              <1> ;cx = bytes per sector
   592                              <1> ;edx = number of available clusters
   593 00007842 E81AF8FFFF          <1>     call getUserRegs
   594 00007847 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   595 00007849 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   596 0000784C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   597 00007850 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   598 00007853 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   599                              <1> .badExit:
   600 00007857 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   601                              <1>     return
    13                              <2> %%_ret:
    14 0000785A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> .error:
   603 0000785B E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   604 00007860 66B8FFFF            <1>     mov ax, -1
   605 00007864 EBF1                <1>     jmp short .badExit
   606                              <1> 
   607                              <1> 
   608                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   609 00007866 31C0                <1>     xor eax, eax
   610 00007868 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   611 0000786F E9AEFCFFFF          <1>     jmp extGoodExit
   612                              <1> 
   613                              <1> getSysVarsPtr:     ;ah = 52h
   614 00007874 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   615 0000787B E8E1F7FFFF          <1>     call getUserRegs
   616 00007880 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   617                              <1>     return
    13                              <2> %%_ret:
    14 00007884 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   618                              <1> 
   619                              <1> 
   620                              <1> ;AH = 53h - CREATE DPB
   621                              <1> createDPB:         ;generates a DPB from a given BPB
   622                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   623                              <1> ;This is done so that the other fields of the DPB can be recycled
   624                              <1> ;Input: rsi = ptr to the BPB
   625                              <1> ;       rbp = ptr to the DPB
   626                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   627                              <1> ;bMediaDescriptor
   628 00007885 8A4615              <1>     mov al, byte [rsi + bpb.media]
   629 00007888 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   630                              <1> ;dFirstFreeCluster
   631 0000788B C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   632                              <1> ;dNumberOfFreeClusters
   633 00007892 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   634                              <1> ;wBytesPerSector
   635 00007899 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   636 0000789D 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   637                              <1> ;bMaxSectorInCluster
   638 000078A1 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   639 000078A4 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   640 000078A6 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   641                              <1> ;bSectorsPerClusterShift
   642 000078A9 FEC0                <1>     inc al
   643 000078AB 30C9                <1>     xor cl, cl
   644                              <1> .cd2:
   645 000078AD D0E8                <1>     shr al, 1
   646 000078AF 7404                <1>     jz .cd3
   647 000078B1 FEC1                <1>     inc cl
   648 000078B3 EBF8                <1>     jmp short .cd2
   649                              <1> .cd3:
   650 000078B5 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   651                              <1> ;wFAToffset, number of reserved sectors in partition
   652 000078B8 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   653 000078BC 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   654                              <1> ;bNumberOfFATs
   655 000078C0 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   656 000078C3 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   657                              <1> ;wNumberRootDirEntries
   658                              <1> ;Gets the number of 32 byte entries in the root directory
   659                              <1> ;Only valid for FAT 12/16
   660 000078C6 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   661 000078CA 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   662                              <1> ;dFATlength, get the FAT length
   663 000078CE 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   664 000078D2 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   665 000078D5 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   666 000078D7 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   667 000078DA 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   668                              <1> ;Complex cases below...
   669                              <1> ;dClusterHeapOffset, start sector of the data area
   670 000078DD 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   671 000078E1 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   672 000078E4 85C0                <1>     test eax, eax
   673 000078E6 0F44C3              <1>     cmovz eax, ebx
   674                              <1> ;eax = FATsz
   675 000078E9 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   676 000078ED 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   677 000078F0 85DB                <1>     test ebx, ebx
   678 000078F2 0F44D9              <1>     cmovz ebx, ecx 
   679                              <1> ;ebx = TotSec
   680 000078F5 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   681 000078F8 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   682                              <1> .cd4:
   683 000078FA 01C2                <1>     add edx, eax
   684 000078FC FEC9                <1>     dec cl
   685 000078FE 75FA                <1>     jnz .cd4
   686 00007900 89D0                <1>     mov eax, edx    ;Store product in eax
   687 00007902 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   688 00007906 01D0                <1>     add eax, edx
   689                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   690 00007908 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   691 0000790C C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   692 0000790F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   693 00007913 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   694 00007914 89D0                <1>     mov eax, edx
   695 00007916 31D2                <1>     xor edx, edx
   696 00007918 F7F1                <1>     div ecx
   697 0000791A 89C2                <1>     mov edx, eax
   698 0000791C 58                  <1>     pop rax
   699 0000791D 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   700                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   701                              <1>     ;aka eax = Start sector of the data area in volume
   702 0000791F 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   703                              <1> ;dClusterCount
   704 00007922 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   705 00007924 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   706 00007926 31D2                <1>     xor edx, edx
   707 00007928 BB01000000          <1>     mov ebx, 1
   708 0000792D 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   709 00007930 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   710 00007932 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   711 00007934 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   712 00007936 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   713                              <1> ;dFirstUnitOfRootDir
   714 00007939 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   715 0000793E 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   716 00007941 770F                <1>     ja .cd5
   717                              <1>     ;Else, we need to find the first sector of the root directory
   718                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   719 00007943 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   720 00007947 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   721                              <1> .cd51:
   722 0000794B 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   723 0000794E FFC9                <1>     dec ecx
   724 00007950 75F9                <1>     jnz .cd51
   725                              <1> .cd5:
   726 00007952 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   727 00007955 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   728                              <1> ;Exit epilogue
   729 00007959 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   730 00007960 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   731                              <1>     return
    13                              <2> %%_ret:
    14 00007962 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> getVerifySetting:  ;ah = 54h
   734 00007963 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   735                              <1>     return
    13                              <2> %%_ret:
    14 00007969 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getExtendedError:  ;ah = 59h
   738 0000796A E8F2F6FFFF          <1>     call getUserRegs
   739 0000796F 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   740 00007976 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   741 0000797C 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   742 00007982 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   743 00007988 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   744 0000798F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   745 00007992 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   746 00007996 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   747 00007999 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   748                              <1> noOp:
   749                              <1>     return
    13                              <2> %%_ret:
    14 0000799D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> ;At some point we will implement the below function but that is
   751                              <1> ; a low priority as it is not a DOS 3.3 function. 
   752                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    46                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 0000799E 3C07                <1>     cmp al, 07h
     8 000079A0 7204                <1>     jb .skip
     9 000079A2 3C09                <1>     cmp al, 09h
    10 000079A4 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 000079A6 4889D6              <1>     mov rsi, rdx
    13 000079A9 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 000079AD 66891D(43040000)    <1>     mov word [machineNum], bx
    15 000079B4 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 000079B8 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 000079BF 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000079C6 53                  <1>     push rbx
    20 000079C7 488B1D(EA190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 000079CE 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 000079CF 50                  <1>     push rax    ;Push al onto stack as a qword
    23 000079D0 E856010000          <1>     call serverFunctionSelect
    24 000079D5 B801000000          <1>     mov eax, eLocUnk
    25 000079DA 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 000079E0 E94BFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 000079E5 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 000079E6 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 000079E7 5F                  <1>     pop rdi
    33 000079E8 E874F6FFFF          <1>     call getUserRegs
    34 000079ED 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 000079F0 56                  <1>     push rsi
    36 000079F1 B906000000          <1>     mov ecx, 6
    37 000079F6 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 000079F9 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007A00 48A5                <1>     movsq   ;Transfer r8...
    40 00007A02 48A5                <1>     movsq   ;... and r9
    41 00007A04 5E                  <1>     pop rsi
    42 00007A05 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007A08 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007A0C 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007A10 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007A14 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007A18 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007A1C 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007A20 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007A24 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007A2B C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007A32 E9AFF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007A37 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007A3E 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007A43 740A                <1>     je .validTask
    62 00007A45 B805000000          <1>     mov eax, errAccDen
    63 00007A4A E9E1FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007A4F 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007A51 E88FFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007A56 53                  <1>     push rbx
    70 00007A57 E8A3D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007A5C 7227                <1>     jc .exit
    72 00007A5E 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007A63 741B                <1>     je .gotoNextFile
    74 00007A65 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007A6A 7414                <1>     je .gotoNextFile
    76 00007A6C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007A72 750C                <1>     jnz .gotoNextFile
    78 00007A74 48893D(32070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007A7B E862C1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007A80 5B                  <1>     pop rbx
    83 00007A81 FFC3                <1>     inc ebx
    84 00007A83 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007A85 E865FAFFFF          <1>     call dosCrit1Exit
    87 00007A8A 5B                  <1>     pop rbx ;Align stack
    88 00007A8B E992FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007A90 FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007A96 0F8294FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007A9C E981FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007AA1 FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007AA7 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007AA9 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007AAF EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007AB1 FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007AB7 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007AB9 E8A3F5FFFF          <1>     call getUserRegs
   110 00007ABE 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007AC2 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007AC6 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007ACA EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007ACC 488D3D(07040000)    <1>     lea rdi, sda
   124 00007AD3 48B9E3150000000000- <1>     mov rcx, sdaLen
   124 00007ADC 00                  <1>
   125 00007ADD 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007AE6 00                  <1>
   126 00007AE7 E875F5FFFF          <1>     call getUserRegs
   127 00007AEC 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007AF0 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007AF4 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007AF6 50                  <1>     push rax
   133 00007AF7 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007AFC CD2F                <1>     int 2Fh
   135 00007AFE 5B                  <1>     pop rbx
   136 00007AFF 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007B01 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007B03 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007B05 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007B0C 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007B10 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007B17 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007B1A 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007B21 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007B24 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007B2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007B2B 55                  <1>     push rbp
   156 00007B2C 4889E5              <1>     mov rbp, rsp
   157 00007B2F 53                  <1>     push rbx
   158 00007B30 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007B34 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007B37 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007B3A 7621                <1>     jbe short .argumentTooBig
   162 00007B3C 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007B40 D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007B42 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007B44 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007B48 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007B4B 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007B4F 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007B53 5B                  <1>     pop rbx
   170 00007B54 5D                  <1>     pop rbp
   171 00007B55 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007B5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007B5D 5B                  <1>     pop rbx
   175 00007B5E 5D                  <1>     pop rbp
   176 00007B5F C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007B62 3C01                <1>     cmp al, 01
   181 00007B64 7214                <1>     jb .getName
   182 00007B66 7437                <1>     jz .setName
   183 00007B68 3C06                <1>     cmp al, 6
   184 00007B6A 724C                <1>     jb .netRedir
   185 00007B6C C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007B73 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007B75 E9B6F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007B7A 4889D7              <1>     mov rdi, rdx
   198 00007B7D 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007B84 E8D8F4FFFF          <1>     call getUserRegs
   200 00007B89 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007B8D 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007B94 31C0                <1>     xor eax, eax
   204 00007B96 48A5                <1>     movsq
   205 00007B98 A5                  <1>     movsd
   206 00007B99 66A5                <1>     movsw
   207 00007B9B A4                  <1>     movsb
   208 00007B9C AA                  <1>     stosb   ;Store terminating null
   209 00007B9D EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007B9F 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007BA6 4889D6              <1>     mov rsi, rdx
   217 00007BA9 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007BAF 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007BB6 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007BB8 50                  <1>     push rax
   223 00007BB9 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007BBE CD2F                <1>     int 2Fh
   225 00007BC0 5A                  <1>     pop rdx
   226 00007BC1 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00007BC3 E95AF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007BC8 80FC07              <1>     cmp ah, 07h
   233 00007BCB 7419                <1>     je .driveAction
   234 00007BCD 80FC08              <1>     cmp ah, 08h
   235 00007BD0 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007BD2 50                  <1>     push rax
   238 00007BD3 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007BD8 CD2F                <1>     int 2Fh
   240 00007BDA 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007BDB 0F824FF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007BE1 E93CF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007BE6 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007BE8 E863F5FFFF          <1>     call getCDSforDrive
   249 00007BED 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007BEF 80EA07              <1>     sub dl, 7
   252 00007BF2 7408                <1>     jz .enable
   253 00007BF4 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007BFA EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007BFC 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007C02 EBDD                <1>     jmp short .goodExit
    47                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007C04 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007C07 7411                <1>     je .installCheck
    23 00007C09 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007C0C 740C                <1>     je .installCheck
    25 00007C0E 80FC12              <1>     cmp ah, 12h
    26 00007C11 741E                <1>     je .goMplx
    27 00007C13 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007C16 7402                <1>     je .installCheck
    29 00007C18 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007C1A 84C0                <1>     test al, al
    38 00007C1C 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007C1E B801000000          <1>     mov eax, errInvFnc
    41 00007C23 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007C2A 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007C2F 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007C31 3C30                <1>     cmp al, mDispTblL / 2
    48 00007C33 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 00007C35 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007C36 53                  <1>     push rbx    ;Storage for DOS function
    52 00007C37 53                  <1>     push rbx    ;Stores rbx value
    53 00007C38 488D1D2B000000      <1>     lea rbx, .retAddr
    54 00007C3F 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 00007C44 51                  <1>     push rcx
    57 00007C45 488D1DE289FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 00007C4C 53                  <1>     push rbx
    59 00007C4D 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 00007C50 D1E1                <1>     shl ecx, 1   ;multiply by 2
    61 00007C52 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    62 00007C55 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    63 00007C59 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    64 00007C5A 4801CB              <1>     add rbx, rcx
    65 00007C5D 59                  <1>     pop rcx
    66 00007C5E 48895C2408          <1>     mov qword [rsp + 8], rbx
    67 00007C63 5B                  <1>     pop rbx
    68 00007C64 488B442440          <1>     mov rax, qword [rsp + 8*8]  ;Pick the word pushed on the stack before call 
    69                              <1>     return
    13                              <2> %%_ret:
    14 00007C69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    70                              <1> 
    71                              <1> .retAddr:
    72 00007C6A 53                  <1>     push rbx
    73 00007C6B 9C                  <1>     pushfq
    74 00007C6C 5B                  <1>     pop rbx
    75 00007C6D 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    76 00007C72 5B                  <1>     pop rbx
    77 00007C73 48CF                <1>     iretq
    78                              <1> 
    79                              <1> multiplexTest:
    80 00007C75 B0FF                <1>     mov al, -1
    81 00007C77 C3                  <1>     ret
    82                              <1> 
    83                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    84                              <1> ;Return: r8 = Dos Data Segment Pointer
    85 00007C78 4C8D05(00000000)    <1>     lea r8, dosDataArea
    86                              <1>     return
    13                              <2> %%_ret:
    14 00007C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    89                              <1> ;Input: cl = open mode
    90                              <1> ;       rdx -> Ptr to filename to open
    91                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    92 00007C80 88C8                <1>     mov al, cl
    93 00007C82 E80EB7FFFF          <1>     call openFileHdl
    94                              <1>     return
    13                              <2> %%_ret:
    14 00007C87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    95                              <1> 
    96                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    97                              <1> ;Input:  
    98                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
    99                              <1> ;   ebx = Handle to move (lower word only)
   100                              <1> ;   ecx = Number of bytes to move
   101                              <1> ;   edx = 0 (upper dword, reserved for now)
   102                              <1> ;Return:
   103                              <1> ;   eax = New pointer location
   104                              <1> ;   edx = 0
   105 00007C88 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   106 00007C8E 488D05(291A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   107 00007C95 488905(7B040000)    <1>     mov qword [oldRSP], rax
   108 00007C9C 89E8                <1>     mov eax, ebp
   109 00007C9E E81EB9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   110 00007CA3 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   111                              <1>     return
    13                              <2> %%_ret:
    14 00007CA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   114                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   115                              <1> ; low byte of bp.
   116 00007CAA FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   117 00007CB0 488D05(291A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   118 00007CB7 488905(7B040000)    <1>     mov qword [oldRSP], rax
   119 00007CBE 89E8                <1>     mov eax, ebp
   120 00007CC0 E8E0D2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   121 00007CC5 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   122                              <1>     return  
    13                              <2> %%_ret:
    14 00007CCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> mpxChecksum:
   125                              <1> ;Computes the checksum of a number of bytes in memory
   126                              <1> ;Input: edx = Start value for checksum
   127                              <1> ;       ecx = number of bytes to sum
   128                              <1> ;       rsi -> Ptr to byte array to perform sum on
   129 00007CCC 31C0                <1>     xor eax, eax
   130 00007CCE 67E307              <1>     jecxz .exit
   131                              <1> .lp:
   132 00007CD1 AC                  <1>     lodsb
   133 00007CD2 01C2                <1>     add edx, eax
   134 00007CD4 FFC9                <1>     dec ecx
   135 00007CD6 75F9                <1>     jnz .lp
   136                              <1> .exit:
   137                              <1>     return
    13                              <2> %%_ret:
    14 00007CD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   139                              <1> ;Sums the values in a number of bytes in memory
   140                              <1> ;Input: rsi -> Byte array to sum values of
   141                              <1> ;       edx = Value limit (for the sum)
   142                              <1> ;       ecx = 0
   143 00007CD9 31C0                <1>     xor eax, eax
   144                              <1> .lp:
   145 00007CDB AC                  <1>     lodsb
   146 00007CDC 39C2                <1>     cmp edx, eax
   147                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007CDE 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   148 00007CE0 29C2                <1>     sub edx, eax
   149 00007CE2 FFC1                <1>     inc ecx
   150 00007CE4 EBF5                <1>     jmp short .lp
    48                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007CE6 B801000000          <1>     mov eax, errInvFnc
     6 00007CEB 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007CF2 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007CF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007CF4 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007CF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007CFA F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007CFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007CFC FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007D02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007D03 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007D09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007D0A 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007D11 53                  <1>     push rbx
    34 00007D12 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007D18 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D19 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007D1B E806000000          <1>     call shareRetryCountdown
    38 00007D20 FFCB                <1>     dec ebx
    39 00007D22 75ED                <1>     jnz .mainLoop
    40 00007D24 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007D25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007D26 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D2D 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 00007D2F 51                  <1>     push rcx
    49 00007D30 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007D37 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007D3A 51                  <1>     push rcx
    53 00007D3B 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007D3D 66FFC9              <1>     dec cx
    56 00007D40 75FB                <1>     jnz .mainLoop
    57 00007D42 59                  <1>     pop rcx
    58 00007D43 FFC9                <1>     dec ecx
    59 00007D45 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007D47 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007D49 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007D4F 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007D51 50                  <1>     push rax
    69 00007D52 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007D56 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007D5B 58                  <1>     pop rax
    72 00007D5C 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007D5E E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007D63 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 00007D65 B820000000          <1>     mov eax, errShrVio
    78 00007D6A F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007D6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007D6C 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007D6D 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007D74 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
    93 00007D7B 31C0                <1>     xor eax, eax
    94 00007D7D 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007D83 51                  <1>     push rcx
    96 00007D84 E873FFFFFF          <1>     call openShareCallWrapper
    97 00007D89 59                  <1>     pop rcx
    98 00007D8A 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007D8C E895FFFFFF          <1>     call shareRetryCountdown
   100 00007D91 FFC9                <1>     dec ecx
   101 00007D93 75DF                <1>     jnz .keepLooping
   102 00007D95 E841000000          <1>     call shareCriticalError
   103 00007D9A 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007D9C 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007D9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007D9E C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007DA5 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007DA7 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007DAE 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007DB4 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007DB6 50                  <1>     push rax
   119 00007DB7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007DBB 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007DC0 58                  <1>     pop rax
   122 00007DC1 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007DC3 E80B000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007DC8 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   126                              <1> .notInCompatMode:
   127 00007DCA 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007DCC B821000000          <1>     mov eax, errLokVio
   129 00007DD1 F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007DD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007DD3 57                  <1>     push rdi
   135 00007DD4 B821000000          <1>     mov eax, errLokVio
   136 00007DD9 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007DDB 57                  <1>     push rdi
   141 00007DDC C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007DE3 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00007DEA 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 00007DF1 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00007DF3 E8C9E7FFFF          <1>     call diskDevErr
   147 00007DF8 5F                  <1>     pop rdi
   148 00007DF9 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007DFB 74D5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   150 00007DFD F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00007DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    49                                  ;These driver files are to be written by an OEM.
    50                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 00007DFF [217E000000000000]  <1>     dq auxHdr
     7 00007E07 1380                <1>     dw 08013h
     8 00007E09 [9F7F000000000000]  <1>     dq commonStrat
     9 00007E11 [A77F000000000000]  <1>     dq conDriver
    10 00007E19 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 00007E21 [437E000000000000]  <1>     dq prnHdr
    13 00007E29 0080                <1>     dw 08000h
    14 00007E2B [9F7F000000000000]  <1>     dq commonStrat
    15 00007E33 [9C82000000000000]  <1>     dq com1Intr
    16 00007E3B 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 00007E43 [657E000000000000]  <1>     dq clkHdr
    19 00007E4B 40A0                <1>     dw 0A040h
    20 00007E4D [9F7F000000000000]  <1>     dq commonStrat
    21 00007E55 [2484000000000000]  <1>     dq prnDriver
    22 00007E5D 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 00007E65 [877E000000000000]  <1>     dq msdHdr
    25 00007E6D 0880                <1>     dw 08008h
    26 00007E6F [9F7F000000000000]  <1>     dq commonStrat
    27 00007E77 [1281000000000000]  <1>     dq clkDriver
    28 00007E7F 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 00007E87 [A97E000000000000]  <1>     dq com1Hdr
    31 00007E8F 4008                <1>     dw 00840h   
    32 00007E91 [9F7F000000000000]  <1>     dq commonStrat
    33 00007E99 [4D84000000000000]  <1>     dq msdDriver
    34 00007EA1 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 00007EA9 [CB7E000000000000]  <1>     dq com2Hdr
    37 00007EB1 0080                <1>     dw 08000h
    38 00007EB3 [9F7F000000000000]  <1>     dq commonStrat
    39 00007EBB [9C82000000000000]  <1>     dq com1Intr
    40 00007EC3 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007ECB [ED7E000000000000]  <1>     dq com3Hdr
    43 00007ED3 0080                <1>     dw 08000h
    44 00007ED5 [9F7F000000000000]  <1>     dq commonStrat
    45 00007EDD [A582000000000000]  <1>     dq com2Intr
    46 00007EE5 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 00007EED [0F7F000000000000]  <1>     dq com4Hdr
    49 00007EF5 0080                <1>     dw 08000h
    50 00007EF7 [9F7F000000000000]  <1>     dq commonStrat
    51 00007EFF [AE82000000000000]  <1>     dq com3Intr
    52 00007F07 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 00007F0F [317F000000000000]  <1>     dq lpt1Hdr
    55 00007F17 0080                <1>     dw 08000h
    56 00007F19 [9F7F000000000000]  <1>     dq commonStrat
    57 00007F21 [B782000000000000]  <1>     dq com4Intr
    58 00007F29 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 00007F31 [537F000000000000]  <1>     dq lpt2Hdr
    61 00007F39 40A0                <1>     dw 0A040h
    62 00007F3B [9F7F000000000000]  <1>     dq commonStrat
    63 00007F43 [2484000000000000]  <1>     dq prnDriver
    64 00007F4B 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007F53 [757F000000000000]  <1>     dq lpt3Hdr
    67 00007F5B 40A0                <1>     dw 0A040h
    68 00007F5D [9F7F000000000000]  <1>     dq commonStrat
    69 00007F65 [2484000000000000]  <1>     dq prnDriver
    70 00007F6D 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 00007F75 FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007F7D 40A0                <1>     dw 0A040h
    74 00007F7F [9F7F000000000000]  <1>     dq commonStrat
    75 00007F87 [2484000000000000]  <1>     dq prnDriver
    76 00007F8F 4C50543320202020    <1>     dq "LPT3    "
    77 00007F97 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    51                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007F9F 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 00007FA6 C3                  <1>     ret
     5                              <1> conDriver:
     6 00007FA7 50                  <1>     push rax
     7 00007FA8 53                  <1>     push rbx
     8 00007FA9 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007FB0 B003                <1>     mov al, 03h ;Unknown Command
    10 00007FB2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 00007FB6 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 00007FB8 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007FBB 84C0                <1>     test al, al
    15 00007FBD 7445                <1>     jz .conInit
    16 00007FBF 3C04                <1>     cmp al, 4
    17 00007FC1 745B                <1>     jz .conRead
    18 00007FC3 3C05                <1>     cmp al, 5
    19 00007FC5 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007FCB 3C06                <1>     cmp al, 6
    21 00007FCD 0F84C2000000        <1>     jz .conInputStatus
    22 00007FD3 3C07                <1>     cmp al, 7
    23 00007FD5 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007FDB 3C08                <1>     cmp al, 8
    25 00007FDD 0F84E4000000        <1>     jz .conWrite
    26 00007FE3 3C09                <1>     cmp al, 9
    27 00007FE5 0F84DC000000        <1>     jz .conWrite
    28 00007FEB 3C0A                <1>     cmp al, 0Ah
    29 00007FED 0F84FD000000        <1>     jz .conOutputStatus
    30 00007FF3 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 00007FF5 B480                <1>     mov ah, 80h ;Set error bit
    33 00007FF7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 00007FFB 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 00008001 5B                  <1>     pop rbx
    37 00008002 58                  <1>     pop rax
    38 00008003 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 00008004 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 00008006 F60510000000FF      <1>     test byte [.conInitDone], -1
    42 0000800D 75EC                <1>     jnz short .conExit
    43 0000800F E8360C0000          <1>     call conInit
    44 00008014 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 0000801B EBDE                <1>     jmp short .conExit
    46 0000801D 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 0000801E B005                <1>     mov al, 05h ;Bad request structure length?
    50 00008020 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 00008023 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 00008025 57                  <1>     push rdi
    54 00008026 51                  <1>     push rcx
    55 00008027 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 0000802B 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 0000802D 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 00008030 741C                <1>     je .cre2
    60 00008032 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 00008039 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 0000803B 31C0                <1>     xor eax, eax
    63 0000803D CD36                <1>     int 36h
    64                              <1> .cre11:
    65 0000803F AA                  <1>     stosb
    66 00008040 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 00008042 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 00008044 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 0000804A FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 0000804C EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 0000804E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00008051 59                  <1>     pop rcx
    75 00008052 5F                  <1>     pop rdi
    76 00008053 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 00008055 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 0000805B C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00008062 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00008064 B005                <1>     mov al, 05h ;Bad request structure length?
    84 00008066 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 00008069 758A                <1>     jne .conWriteErrorCode
    86 0000806B 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00008072 7519                <1>     jnz .cnr2
    88 00008074 B401                <1>     mov ah, 01h     ;Get key if exists
    89 00008076 CD36                <1>     int 36h
    90 00008078 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 0000807A 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 0000807D E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00008082 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 00008088 E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 0000808D 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00008093 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 00008095 B005                <1>     mov al, 05h ;Bad request structure length?
   104 00008097 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 0000809A 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 000080A0 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 000080A5 B005                <1>     mov al, 05h ;Bad request structure length?
   110 000080A7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 000080AA 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 000080B0 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 000080B7 B401                <1>     mov ah, 01      ;Get buffer status
   115 000080B9 CD36                <1>     int 36h
   116 000080BB 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 000080C1 30E4                <1>     xor ah, ah
   118 000080C3 CD36                <1>     int 36h ;Read key to flush from buffer
   119 000080C5 EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 000080C7 B005                <1>     mov al, 05h ;Bad request structure length?
   123 000080C9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 000080CC 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 000080D2 56                  <1>     push rsi
   127 000080D3 51                  <1>     push rcx
   128 000080D4 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 000080D8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 000080DA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 000080DD 7407                <1>     je .cw2
   133 000080DF AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 000080E0 CD29                <1>     int 29h ;Fast print char
   135 000080E2 FFC1                <1>     inc ecx
   136 000080E4 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 000080E6 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 000080E9 59                  <1>     pop rcx
   140 000080EA 5E                  <1>     pop rsi
   141 000080EB E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 000080F0 B005                <1>     mov al, 05h ;Bad request structure length?
   144 000080F2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 000080F5 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 000080FB E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 00008100 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 29h
   150                              <1> ;Called with char to transfer in al
   151 00008101 50                  <1>     push rax
   152 00008102 B40E                <1>     mov ah, 0Eh
   153 00008104 CD30                <1>     int 30h
   154 00008106 58                  <1>     pop rax
   155 00008107 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 00008109 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 00008110 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 00008112 50                  <1>     push rax
   163 00008113 53                  <1>     push rbx
   164 00008114 51                  <1>     push rcx
   165 00008115 52                  <1>     push rdx
   166 00008116 56                  <1>     push rsi
   167 00008117 55                  <1>     push rbp
   168 00008118 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 0000811F B003                <1>     mov al, 03h ;Unknown Command
   170 00008121 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 00008125 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 00008127 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 0000812A 84C0                <1>     test al, al
   175 0000812C 743B                <1>     jz .clkInit
   176 0000812E 3C04                <1>     cmp al, 04h
   177 00008130 7451                <1>     jz .clkRead
   178 00008132 3C06                <1>     cmp al, 06h
   179 00008134 0F84AE000000        <1>     jz .clkInputStatus
   180 0000813A 3C07                <1>     cmp al, 07h
   181 0000813C 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 00008142 3C08                <1>     cmp al, 08h
   183 00008144 0F84BE000000        <1>     jz .clkWrite
   184 0000814A 3C09                <1>     cmp al, 09h
   185 0000814C 0F84B6000000        <1>     jz .clkWrite
   186 00008152 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00008154 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 00008156 B480                <1>     mov ah, 80h ;Set error bit
   191 00008158 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 0000815C 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00008162 5D                  <1>     pop rbp
   195 00008163 5E                  <1>     pop rsi
   196 00008164 5A                  <1>     pop rdx
   197 00008165 59                  <1>     pop rcx
   198 00008166 5B                  <1>     pop rbx
   199 00008167 58                  <1>     pop rax
   200 00008168 C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 00008169 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 0000816B F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00008172 75E8                <1>     jnz short .clkExit
   205 00008174 E8320B0000          <1>     call clockInit
   206 00008179 C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00008180 EBDA                <1>     jmp short .clkExit
   208 00008182 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00008183 B005                <1>     mov al, 05h ;Bad request structure length?
   212 00008185 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 00008188 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 0000818A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 0000818D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00008191 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 00008198 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 0000819C 30E4                <1>     xor ah, ah
   220 0000819E CD3A                <1>     int 3Ah         ;Read the system timer
   221 000081A0 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 000081A2 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 000081A4 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 000081A6 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 000081AA 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 000081B1 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 000081B4 0FB7D2              <1>     movzx edx, dx
   230 000081B7 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 000081B9 89D0                <1>     mov eax, edx
   232 000081BB 31D2                <1>     xor edx, edx
   233 000081BD 89D8                <1>     mov eax, ebx
   234 000081BF B944040000          <1>     mov ecx, 1092   
   235 000081C4 F7F1                <1>     div ecx
   236 000081C6 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 000081C9 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 000081CB 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 000081CF 31D2                <1>     xor edx, edx
   240 000081D1 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 000081D6 F7F1                <1>     div ecx
   242 000081D8 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 000081DB 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 000081DD 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 000081E0 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 000081E3 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 000081E8 B005                <1>     mov al, 05h ;Bad request structure length?
   253 000081EA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 000081ED 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 000081F3 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 000081F8 B005                <1>     mov al, 05h ;Bad request structure length?
   259 000081FA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 000081FD 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 00008203 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 00008208 B005                <1>     mov al, 05h ;Bad request structure length?
   265 0000820A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 0000820D 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 00008213 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 00008216 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 0000821A 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 0000821E 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 00008225 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 00008227 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 0000822B B105                <1>     mov cl, 5
   276 0000822D F6F1                <1>     div cl          ;Divide al by 5
   277 0000822F 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 00008231 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 00008233 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 00008236 B912000000          <1>     mov ecx, 18
   283 0000823B F7E1                <1>     mul ecx  
   284 0000823D 01C3                <1>     add ebx, eax
   285                              <1> 
   286 0000823F 31D2                <1>     xor edx, edx
   287 00008241 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 00008245 B944040000          <1>     mov ecx, 1092
   289 0000824A F7E1                <1>     mul ecx
   290 0000824C 01C3                <1>     add ebx, eax
   291 0000824E 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 00008250 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 00008254 B401                <1>     mov ah, 01h     ;Set the system time
   294 00008256 CD3A                <1>     int 3Ah
   295                              <1> 
   296 00008258 4889F3              <1>     mov rbx, rsi
   297 0000825B E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00008260 51                  <1>     push rcx
   303 00008261 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00008264 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00008266 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 0000826B 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00008271 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00008274 050A000000          <1>     add eax, 10
   310 00008279 E2F9                <1>     loop .cbth0
   311 0000827B 59                  <1>     pop rcx
   312 0000827C C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 0000827D 51                  <1>     push rcx
   318 0000827E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00008281 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 00008283 3D0A000000          <1>     cmp eax, 10
   322 00008288 7209                <1>     jb .chtb1
   323 0000828A 2D0A000000          <1>     sub eax, 10
   324 0000828F FFC1                <1>     inc ecx
   325 00008291 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00008293 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00008296 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00008298 59                  <1>     pop rcx
   330 00008299 C3                  <1>     ret
   331 0000829A 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 0000829C C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 000082A3 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 000082A5 C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 000082AC EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 000082AE C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 000082B5 EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 000082B7 C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 000082BE 50                  <1>     push rax
   347 000082BF 53                  <1>     push rbx
   348 000082C0 51                  <1>     push rcx
   349 000082C1 52                  <1>     push rdx
   350 000082C2 56                  <1>     push rsi
   351 000082C3 57                  <1>     push rdi
   352 000082C4 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 000082CB B003                <1>     mov al, 03h ;Unknown Command
   354 000082CD 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 000082D1 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 000082D3 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 000082D6 84C0                <1>     test al, al
   359 000082D8 745B                <1>     jz short .comExit
   360 000082DA 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 000082DC 7464                <1>     jz .comRead
   362 000082DE 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 000082E0 0F849D000000        <1>     jz .comNondestructiveRead   
   364 000082E6 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 000082E8 0F8486000000        <1>     jz .comReadInputStatus
   366 000082EE 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 000082F0 0F849C000000        <1>     jz .comFlushInputBuffers
   368 000082F6 3C08                <1>     cmp al, 8
   369 000082F8 0F84BA000000        <1>     jz .comWrite
   370 000082FE 3C09                <1>     cmp al, 9
   371 00008300 0F84B2000000        <1>     jz .comWrite
   372 00008306 3C0A                <1>     cmp al, 0Ah
   373 00008308 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 0000830E EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00008310 B002                <1>     mov al, 02h ;Unknown device
   377 00008312 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00008314 BA0B000000          <1>     mov edx, 0Bh
   380 00008319 EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 0000831B BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00008320 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 00008323 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00008328 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 0000832A 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 0000832D 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 0000832F B480                <1>     mov ah, 80h ;Set error bit
   391 00008331 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00008335 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 0000833B 5F                  <1>     pop rdi
   395 0000833C 5E                  <1>     pop rsi
   396 0000833D 5A                  <1>     pop rdx
   397 0000833E 59                  <1>     pop rcx
   398 0000833F 5B                  <1>     pop rbx
   399 00008340 58                  <1>     pop rax
   400 00008341 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 00008342 B005                <1>     mov al, 05h ;Bad request structure length?
   404 00008344 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 00008347 75E6                <1>     jne .comWriteErrorCode
   406 00008349 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 0000834D 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 0000834F 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 00008352 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 00008354 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 00008359 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00008360 F8                  <1>     clc
   415 00008361 CD34                <1>     int 34h ;Recieve Char
   416 00008363 72BB                <1>     jc .comError
   417 00008365 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00008368 74EA                <1>     je .cr11
   419 0000836A AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 0000836B FFC1                <1>     inc ecx
   421 0000836D EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 0000836F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 00008372 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00008374 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00008376 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 00008379 75B4                <1>     jne .comWriteErrorCode
   430 0000837B 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 00008381 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 00008383 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00008385 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00008388 75A5                <1>     jne .comWriteErrorCode
   438 0000838A 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 00008390 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 00008392 B005                <1>     mov al, 05h ;Bad request structure length?
   443 00008394 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00008397 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00008399 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 000083A0 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 000083A5 F8                  <1>     clc
   449 000083A6 CD34                <1>     int 34h
   450 000083A8 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 000083AE 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 000083B1 75E6                <1>     jne .cfib0
   453 000083B3 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 000083B8 B005                <1>     mov al, 05h ;Bad request structure length?
   457 000083BA 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 000083BD 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 000083C3 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 000083C7 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 000083C9 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 000083CC 7417                <1>     je .cw2
   465 000083CE AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 000083CF B401                <1>     mov ah, 01h ;Move function number into ah
   467 000083D1 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 000083D8 F8                  <1>     clc
   469 000083D9 CD34                <1>     int 34h ;Transmit char
   470 000083DB 0F823FFFFFFF        <1>     jc .comError
   471 000083E1 FFC1                <1>     inc ecx
   472 000083E3 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 000083E5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 000083E8 E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 000083ED B005                <1>     mov al, 05h ;Bad request structure length?
   480 000083EF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 000083F2 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 000083F8 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 000083FF B403                <1>     mov ah, 03h     ;Get status
   485 00008401 F8                  <1>     clc
   486 00008402 CD34                <1>     int 34h
   487 00008404 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 0000840A 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 0000840F C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00008412 F7D0                <1>     not eax      ;Bitwise inversion
   491 00008414 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00008419 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 0000841E E912FFFFFF          <1>     jmp .comExit
   494 00008423 00                  <1> .comDevice   db 0
   495                              <1> 
   496                              <1> ;Prn Drivers
   497                              <1> prnDriver:
   498 00008424 50                  <1>     push rax
   499 00008425 53                  <1>     push rbx
   500 00008426 488B1D6AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]
   501 0000842D B003                <1>     mov al, 03h ;Unknown Command
   502 0000842F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   503 00008433 7709                <1>     ja .prnWriteErrorCode ;If yes, error!
   504 00008435 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   505 00008438 84C0                <1>     test al, al ;If the command code was Init, return ok!
   506 0000843A 7408                <1>     jz .prnExit 
   507                              <1>     ;Everything else, device not ready
   508 0000843C B002                <1>     mov al, drvNotReady
   509                              <1> .prnWriteErrorCode:     ;Jump to with al=Standard Error code
   510 0000843E B480                <1>     mov ah, 80h ;Set error bit
   511 00008440 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   512                              <1> .prnExit:
   513 00008444 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   514 0000844A 5B                  <1>     pop rbx
   515 0000844B 58                  <1>     pop rax
   516 0000844C C3                  <1>     ret
    52                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 0000844D 50                  <1>     push rax
     3 0000844E 53                  <1>     push rbx
     4 0000844F 51                  <1>     push rcx
     5 00008450 52                  <1>     push rdx
     6 00008451 56                  <1>     push rsi
     7 00008452 57                  <1>     push rdi
     8 00008453 55                  <1>     push rbp
     9 00008454 4150                <1>     push r8
    10 00008456 488B1D3AFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 0000845D 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 00008461 B003                <1>     mov al, drvBadCmd
    13 00008463 7744                <1>     ja .msdWriteEntryError ;If yes, error!
    14 00008465 B001                <1>     mov al, drvBadUnit 
    15 00008467 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 0000846B 773C                <1>     ja .msdWriteEntryError ;If yes, error!
    17 0000846D 488D35AA040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00008474 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 00008478 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 0000847B 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 0000847F 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00008483 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00008485 488D0DA8000000      <1>     lea rcx, .msdTable
    24 0000848C 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00008490 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00008492 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00008494 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00008497 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 00008499 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 0000849F 4158                <1>     pop r8
    32 000084A1 5D                  <1>     pop rbp
    33 000084A2 5F                  <1>     pop rdi
    34 000084A3 5E                  <1>     pop rsi
    35 000084A4 5A                  <1>     pop rdx
    36 000084A5 59                  <1>     pop rcx
    37 000084A6 5B                  <1>     pop rbx
    38 000084A7 58                  <1>     pop rax
    39 000084A8 C3                  <1>     ret
    40                              <1> .msdWriteEntryError:
    41                              <1> ;Used for errors which occur before a function!
    42 000084A9 E87F000000          <1>     call .msdWriteErrorCode
    43 000084AE EBE9                <1>     jmp short .msdDriverExit
    44                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    45 000084B0 4889FB              <1>     mov rbx, rdi
    46 000084B3 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    47 000084B6 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    48 000084B8 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    49                              <1> ;Now fall through to general error
    50                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    51 000084BB 488B1DD5FAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    52 000084C2 B401                <1>     mov ah, 01h
    53 000084C4 CD33                <1>     int 33h ;Read status of last operation
    54 000084C6 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    55 000084C9 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    56 000084CB 7460                <1>     je .msdWriteErrorCode 
    57 000084CD B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    58 000084CF 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    59 000084D2 7459                <1>     je .msdWriteErrorCode 
    60 000084D4 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    61 000084D7 7454                <1>     je .msdWriteErrorCode
    62                              <1> ;Device Not Ready
    63 000084D9 B002                <1>     mov al, 02h  ;Device not ready code
    64 000084DB 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    65 000084DE 744D                <1>     je .msdWriteErrorCode
    66 000084E0 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    67 000084E4 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    68                              <1> ;Write Protected
    69 000084E8 30C0                <1>     xor al, al
    70 000084EA 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    71 000084EF 743C                <1>     je .msdWriteErrorCode
    72                              <1> ;CRC Error
    73 000084F1 B004                <1>     mov al, 04h     ;CRC error code
    74 000084F3 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    75 000084F8 7433                <1>     je .msdWriteErrorCode
    76 000084FA 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    77 000084FF 742C                <1>     je .msdWriteErrorCode
    78 00008501 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    79 00008506 7425                <1>     je .msdWriteErrorCode
    80                              <1> ;Seek Error
    81 00008508 B006                <1>     mov al, 06h     ;Seek error code
    82 0000850A 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    83 0000850D 741E                <1>     je .msdWriteErrorCode
    84                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    85                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    86 0000850F B007                <1>     mov al, 07h
    87 00008511 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    88 00008514 7417                <1>     je .msdWriteErrorCode
    89                              <1> ;Sector Not Found
    90 00008516 B008                <1>     mov al, 08h     ;Sector not found code
    91 00008518 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    92 0000851B 7410                <1>     je .msdWriteErrorCode
    93                              <1> ;Write faults
    94 0000851D B00A                <1>     mov al, 0Ah     ;Write fault
    95 0000851F 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    96 00008522 7409                <1>     je .msdWriteErrorCode
    97                              <1> ;Read faults
    98 00008524 B00B                <1>     mov al, 0Bh     ;Read fault
    99 00008526 80F911              <1>     cmp cl, 11h     ;Read error
   100 00008529 7402                <1>     je .msdWriteErrorCode
   101                              <1> ;General Errors
   102                              <1> .msdGenErr:
   103 0000852B B00C                <1>     mov al, 0Ch     ;Everything else is general error
   104                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   105 0000852D B480                <1>     mov ah, 80h ;Set error bit
   106 0000852F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   107 00008533 C3                  <1>     ret ;Return to set done bit
   108                              <1> .msdTable:
   109 00008534 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   110 00008536 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   111 00008538 B300                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   112 0000853A 2501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   113 0000853C 3101                <1>     dw .msdRead - .msdTable         ;Function 4
   114 0000853E 0000                <1>     dw 0                            ;Function 5
   115 00008540 0000                <1>     dw 0                            ;Function 6
   116 00008542 0000                <1>     dw 0                            ;Function 7
   117 00008544 6A01                <1>     dw .msdWrite - .msdTable        ;Function 8
   118 00008546 A301                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   119 00008548 0000                <1>     dw 0                            ;Function 10
   120 0000854A 0000                <1>     dw 0                            ;Function 11
   121 0000854C E901                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   122 0000854E F501                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   123 00008550 1002                <1>     dw .msdDevClose - .msdTable     ;Function 14
   124 00008552 2B02                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   125 00008554 0000                <1>     dw 0                            ;Function 16
   126 00008556 0000                <1>     dw 0                            ;Function 17
   127 00008558 0000                <1>     dw 0                            ;Function 18
   128 0000855A 5302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   129 0000855C 0000                <1>     dw 0                            ;Function 20
   130 0000855E 0000                <1>     dw 0                            ;Function 21
   131 00008560 0000                <1>     dw 0                            ;Function 22
   132 00008562 FA02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   133 00008564 0F03                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   134                              <1> .msdInitShim:
   135 00008566 53                  <1>     push rbx
   136 00008567 4157                <1>     push r15
   137 00008569 E8BB070000          <1>     call msdInit
   138 0000856E 415F                <1>     pop r15
   139 00008570 5B                  <1>     pop rbx
   140 00008571 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   141 0000857A C3                  <1>     ret
   142                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   143                              <1> .msdMedChk:          ;Function 1
   144 0000857B B005                <1>     mov al, 05h ;Bad request structure length
   145 0000857D 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   146 00008580 75AB                <1>     jne .msdWriteErrorCode
   147                              <1>     ;If the BPB makes no sense, claim it was changed, so we can rebuild BPB.
   148 00008582 F6450DFF            <1>     test byte [rbp + bpb.secPerClus], -1
   149 00008586 7445                <1>     jz .mmcChange   ;If the BPB weird, say that it was changed!
   150                              <1> 
   151 00008588 E8EE020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   152 0000858D 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   153 0000858F 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   154 00008594 488D0D79030000      <1>     lea rcx, .msdBIOSmap
   155 0000859B 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   156 0000859E F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   157 000085A1 753F                <1>     jnz .mmcNoChange
   158                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   159 000085A3 B416                <1>     mov ah, 16h 
   160 000085A5 CD33                <1>     int 33h
   161 000085A7 0F820EFFFFFF        <1>     jc .msdGenDiskError
   162 000085AD 80FC80              <1>     cmp ah, 80h
   163 000085B0 740E                <1>     je .mmcNoChangeLine
   164 000085B2 80FC86              <1>     cmp ah, 86h
   165 000085B5 7409                <1>     je .mmcNoChangeLine
   166 000085B7 84E4                <1>     test ah, ah ;No change?
   167 000085B9 7427                <1>     jz .mmcNoChange
   168 000085BB F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   169 000085BE 750D                <1>     jnz .mmcChange
   170                              <1> ;If nothing, fall through and test manually, should never happen though
   171                              <1> .mmcNoChangeLine:
   172                              <1> ;Now we test Media Descriptor
   173 000085C0 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   174 000085C5 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   175 000085C8 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   176 000085CB 7410                <1>     je .mmcUnsure
   177                              <1> .mmcChange:
   178 000085CD C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   179 000085D1 488D0530030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   180 000085D8 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   181                              <1>     ;Check here if there were any open handles on the device when it was changed
   182 000085DC C3                  <1>     ret
   183                              <1> .mmcUnsure:
   184 000085DD C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   185 000085E1 C3                  <1>     ret
   186                              <1> .mmcNoChange:
   187 000085E2 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   188 000085E6 C3                  <1>     ret
   189                              <1> 
   190                              <1> 
   191                              <1> .msdBuildBPB:        ;Function 2
   192 000085E7 B005                <1>     mov al, 05h ;Bad request structure length
   193 000085E9 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   194 000085EC 0F853BFFFFFF        <1>     jne .msdWriteErrorCode
   195                              <1> 
   196 000085F2 4889DE              <1>     mov rsi, rbx
   197 000085F5 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   198 000085FA 488D0D13030000      <1>     lea rcx, .msdBIOSmap
   199 00008601 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   200 00008604 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   201 00008608 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   202 0000860A 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   203 0000860D B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   204 00008612 CD33                <1>     int 33h
   205 00008614 0F82A1FEFFFF        <1>     jc .msdGenDiskError
   206                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   207 0000861A 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   208 0000861E 7418                <1>     je .mbbpb0
   209 00008620 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   210 00008624 7412                <1>     je .mbbpb0
   211 00008626 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   212 0000862A 740C                <1>     je .mbbpb0
   213 0000862C 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   214 00008630 B007                <1>     mov al, 07h ;Unknown media error code
   215 00008632 0F82F5FEFFFF        <1>     jb .msdWriteErrorCode
   216                              <1> .mbbpb0:
   217 00008638 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   218 0000863B 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   219 0000863E B90F000000          <1>     mov ecx, bpbEx_size/8
   220 00008643 56                  <1>     push rsi
   221 00008644 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   222 00008647 5E                  <1>     pop rsi
   223 00008648 F6450DFF            <1>     test byte [rbp + bpb.secPerClus], -1 ;Does this BPB makes sense?
   224                              <1>     retnz ;If its not zero, we ok
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000864C 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000864E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   225                              <1>     ;Else, we error.
   226 0000864F B802000000          <1>     mov eax, drvNotReady
   227 00008654 E9D4FEFFFF          <1>     jmp .msdWriteErrorCode
   228                              <1> .msdIOCTLRead:       ;Function 3, returns done
   229 00008659 B005                <1>     mov al, drvBadDrvReq
   230 0000865B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   231 0000865E 0F85C9FEFFFF        <1>     jne .msdWriteErrorCode
   232 00008664 C3                  <1>     ret
   233                              <1> .msdRead:            ;Function 4
   234                              <1> ;Will read one sector at a time.
   235 00008665 B005                <1>     mov al, 05h ;Bad request structure length
   236 00008667 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   237 0000866A 0F85BDFEFFFF        <1>     jne .msdWriteErrorCode
   238                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   239                              <1> ;    test byte [7c02h], 1
   240                              <1> ;    jnz .msdGenErr
   241                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   242 00008670 E806020000          <1>     call .msdCheckDeviceType
   243                              <1> 
   244 00008675 4889DF              <1>     mov rdi, rbx
   245 00008678 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   246                              <1> .msdr0:
   247 0000867A B682                <1>     mov dh, 82h ;LBA Read Sectors
   248 0000867C E8D7010000          <1>     call .msdBlkIOCommon
   249 00008681 0F8229FEFFFF        <1>     jc .msdIOError
   250 00008687 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   251 0000868B 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   252 0000868F 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   253 00008693 FFC6                <1>     inc esi
   254 00008695 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   255 00008698 75E0                <1>     jne .msdr0
   256 0000869A 4889FB              <1>     mov rbx, rdi
   257 0000869D C3                  <1>     ret
   258                              <1> .msdWrite:           ;Function 8
   259                              <1> ;Will write one sector at a time.
   260 0000869E B005                <1>     mov al, 05h ;Bad request structure length
   261 000086A0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 000086A3 0F8584FEFFFF        <1>     jne .msdWriteErrorCode
   263                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   264                              <1> ;    test byte [7c02h], 2
   265                              <1> ;    jnz .msdGenErr
   266                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   267 000086A9 E8CD010000          <1>     call .msdCheckDeviceType
   268                              <1> 
   269 000086AE 4889DF              <1>     mov rdi, rbx
   270 000086B1 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   271                              <1> .msdw0:
   272 000086B3 B683                <1>     mov dh, 83h ;LBA Write Sectors
   273 000086B5 E89E010000          <1>     call .msdBlkIOCommon
   274 000086BA 0F82F0FDFFFF        <1>     jc .msdIOError
   275 000086C0 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   276 000086C4 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   277 000086C8 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   278 000086CC FFC6                <1>     inc esi
   279 000086CE 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   280 000086D1 75E0                <1>     jne .msdw0
   281 000086D3 4889FB              <1>     mov rbx, rdi
   282 000086D6 C3                  <1>     ret
   283                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   284                              <1> ;Will write one sector at a time and then verify it.
   285 000086D7 B005                <1>     mov al, 05h ;Bad request structure length
   286 000086D9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   287 000086DC 0F854BFEFFFF        <1>     jne .msdWriteErrorCode
   288                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   289                              <1> ;    test byte [7c02h], 2
   290                              <1> ;    jnz .msdGenErr
   291                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   292 000086E2 E894010000          <1>     call .msdCheckDeviceType
   293                              <1> 
   294 000086E7 4889DF              <1>     mov rdi, rbx
   295 000086EA 31F6                <1>     xor esi, esi  ;Set counter to zero
   296                              <1> .msdwv0:
   297 000086EC B683                <1>     mov dh, 83h ;LBA Write Sectors
   298 000086EE E865010000          <1>     call .msdBlkIOCommon
   299 000086F3 0F82B7FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   300 000086F9 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   301 000086FB E858010000          <1>     call .msdBlkIOCommon
   302 00008700 0F82AAFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   303 00008706 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   304 0000870A 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   305 0000870E 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   306 00008712 FFC6                <1>     inc esi
   307 00008714 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   308 00008717 75D3                <1>     jne .msdwv0
   309 00008719 4889FB              <1>     mov rbx, rdi
   310 0000871C C3                  <1>     ret
   311                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   312 0000871D B005                <1>     mov al, drvBadDrvReq
   313 0000871F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   314 00008722 0F8505FEFFFF        <1>     jne .msdWriteErrorCode
   315                              <1> 
   316 00008728 C3                  <1>     ret
   317                              <1> .msdDevOpen:         ;Function 13
   318 00008729 B005                <1>     mov al, drvBadDrvReq
   319 0000872B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   320 0000872E 0F85F9FDFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 00008734 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   323 00008739 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   324 00008740 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   325 00008743 C3                  <1>     ret
   326                              <1> .msdDevClose:        ;Function 14
   327 00008744 B005                <1>     mov al, drvBadDrvReq
   328 00008746 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   329 00008749 0F85DEFDFFFF        <1>     jne .msdWriteErrorCode
   330                              <1> 
   331 0000874F 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   332 00008754 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   333 0000875B FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   334 0000875E C3                  <1>     ret
   335                              <1> .msdRemovableMedia:  ;Function 15
   336 0000875F B005                <1>     mov al, drvBadDrvReq
   337 00008761 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   338 00008764 0F85C3FDFFFF        <1>     jne .msdWriteErrorCode
   339                              <1>     
   340 0000876A 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   341 0000876F 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   342 00008776 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   343 0000877A 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   344 0000877F C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   345 00008782 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   346 00008786 C3                  <1>     ret
   347                              <1> .msdGenericIOCTL:    ;Function 19
   348 00008787 B005                <1>     mov al, drvBadDrvReq
   349 00008789 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   350 0000878C 0F859BFDFFFF        <1>     jne .msdWriteErrorCode
   351                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   352                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   353 00008792 B003                <1>     mov al, drvBadCmd
   354 00008794 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   355 00008798 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   356 0000879B 0F858CFDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   357 000087A1 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   358 000087A4 0F8483FDFFFF        <1>     jz .msdWriteErrorCode
   359 000087AA 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   360 000087AD 80F941              <1>     cmp cl, 41h     
   361 000087B0 743F                <1>     je .msdGIOCTLWrite
   362 000087B2 80F942              <1>     cmp cl, 42h
   363 000087B5 7451                <1>     je .msdGIOCTLFormat
   364 000087B7 80F960              <1>     cmp cl, 60h
   365 000087BA 0F856DFDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   366                              <1>     ;Get params here
   367 000087C0 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   368 000087C4 488D1549010000      <1>     lea rdx, .msdBIOSmap
   369 000087CB 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   370 000087CE B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   371 000087D0 53                  <1>     push rbx
   372 000087D1 CD33                <1>     int 33h
   373                              <1>     ;Returns:
   374                              <1>     ;rbx = Sector size in bytes
   375                              <1>     ;rcx = Last LBA block
   376 000087D3 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   377 000087D6 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   378 000087D7 0F82DEFCFFFF        <1>     jc .msdGenDiskError
   379                              <1> ;Get LBA Table:
   380                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   381                              <1> ;Offset 1:  Reserved, 7 bytes
   382                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   383                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   384 000087DD 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   385 000087E1 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   386 000087E8 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   387 000087EC 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   388                              <1>     return
    13                              <2> %%_ret:
    14 000087F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> 
   390                              <1> .msdGIOCTLWrite:
   391                              <1> ;Write Table:
   392                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   393                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   394                              <1> ;Offset 2:  Reserved, 6 bytes
   395                              <1> ;Offset 8:  Sector to start format at (QWORD)
   396                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   397 000087F1 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   398 000087F6 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   399 000087FA B483                <1>     mov ah, 83h
   400                              <1> .msdGIOCTLwfCommon:
   401 000087FC CD33                <1>     int 33h
   402 000087FE 0F82B7FCFFFF        <1>     jc .msdGenDiskError
   403 00008804 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   404                              <1>     return 
    13                              <2> %%_ret:
    14 00008807 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   405                              <1> 
   406                              <1> .msdGIOCTLFormat:
   407                              <1> ;Format Table:
   408                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   409                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   410                              <1> ;Offset 2:  Reserved, 6 bytes
   411                              <1> ;Offset 8:  Sector to start format at (QWORD)
   412 00008808 E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   413 0000880D B485                <1>     mov ah, 85h
   414 0000880F EBEB                <1>     jmp short .msdGIOCTLwfCommon
   415                              <1> 
   416                              <1> .msdGIOCTLFormatWriteSetup:
   417                              <1> ;Sets the following:
   418                              <1> ;al = Number of sectors to write/format
   419                              <1> ;rcx = Sector to begin transfer at
   420                              <1> ;dl = BIOS Drive to do transfer on
   421                              <1> ;rsi = Driver Packet (usually set to rbx)
   422                              <1> ;rdi = Write/Format packet
   423 00008811 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   424 00008815 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   425 0000881C 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   426 0000881F 4889DE              <1>     mov rsi, rbx
   427 00008822 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   428 00008826 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   429 00008829 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   430                              <1>     return
    13                              <2> %%_ret:
    14 0000882D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> .msdGetLogicalDev:   ;Function 23
   433 0000882E B005                <1>     mov al, drvBadDrvReq
   434 00008830 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   435 00008833 0F85F4FCFFFF        <1>     jne .msdWriteErrorCode
   436                              <1> 
   437 00008839 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   438 0000883F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   439 00008842 C3                  <1>     ret
   440                              <1> .msdSetLogicalDev:   ;Function 24
   441 00008843 B005                <1>     mov al, drvBadDrvReq
   442 00008845 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   443 00008848 0F85DFFCFFFF        <1>     jne .msdWriteErrorCode
   444                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   445 0000884E 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   446 00008851 8805BC000000        <1>     mov byte [.msdCurDev], al
   447 00008857 C3                  <1>     ret
   448                              <1> 
   449                              <1> .msdBlkIOCommon:  ;Does block IO
   450                              <1> ;Called with rdi containing old rbx value and ah with function number
   451                              <1> ;rbp points to bpb
   452                              <1> ;Error handled by caller
   453                              <1> ;Sector count handled by caller
   454                              <1> ;Called with dh = BIOS function number
   455 00008858 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   456 0000885D 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   457 00008864 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   458 00008867 31C9                <1>     xor ecx, ecx
   459 00008869 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   460 0000886C 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   461 00008870 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   462 00008874 88F4                <1>     mov ah, dh
   463 00008876 B001                <1>     mov al, 01h ;Do one sector at a time 
   464 00008878 CD33                <1>     int 33h
   465                              <1>     return
    13                              <2> %%_ret:
    14 0000887A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   466                              <1> 
   467                              <1> .msdCheckDeviceType:
   468                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   469                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   470                              <1> ; is being transacted on, prompts the user. Else, 
   471                              <1> ;Returns ZF=NZ if media number changed!
   472                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   473 0000887B 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   474 0000887F 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   475                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008885 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476                              <1> ;If not equal, check new drive is not A or B
   477 00008887 3C02                <1>     cmp al, 2
   478 00008889 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   479                              <1>     ;Check if we are in single drive mode or not
   480 0000888B F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   481 00008892 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   482 00008894 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   483 0000889A 742D                <1>     je .msdCDTexitOk    ;Exit if so
   484 0000889C 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   485 000088A2 0441                <1>     add al, "A" ;Convert to a letter
   486 000088A4 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   487 000088AA 488D3520000000      <1>     lea rsi, .msdStrike
   488 000088B1 B937000000          <1>     mov ecx, .msdStrikeL
   489                              <1> .msdCDTprintMessage:
   490 000088B6 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   491 000088B7 CD29                <1>     int 29h ;Print char in al
   492 000088B9 FFC9                <1>     dec ecx
   493 000088BB 75F9                <1>     jnz .msdCDTprintMessage
   494 000088BD 31C0                <1>     xor eax, eax
   495 000088BF CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   496                              <1> .msdCDTexit:
   497 000088C1 E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   498 000088C6 FFC0                <1>     inc eax ;Clear ZF
   499 000088C8 C3                  <1>     ret
   500                              <1> .msdCDTexitOk:
   501 000088C9 E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   502 000088CE 31C0                <1>     xor eax, eax
   503 000088D0 C3                  <1>     ret
   504                              <1> 
   505 000088D1 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   505 000088DA 666F72206472697665- <1>
   505 000088E3 20                  <1>
   506 000088E4 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   506 000088ED 72696B650D0A616E79- <1>
   506 000088F6 206B6579207768656E- <1>
   506 000088FF 2072656164790D0A0A  <1>
   507                              <1> .msdStrikeL equ $ - .msdStrike
   508                              <1> 
   509 00008908 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   510                              <1> ;LASTDRIVE default is 5
   511                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   512                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   513 00008911 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   514 00008912 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   515 00008913 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   516                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   517 00008914 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   518 00008919 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   519 0000891E 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   519 00008927 000000000000000000- <1>
   519 00008930 000000000000000000- <1>
   519 00008939 000000000000000000- <1>
   519 00008942 00000000            <1>
   520 00008946 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   520 0000894F 000000000000000000- <1>
   520 00008958 000000000000000000- <1>
   520 00008961 000000000000000000- <1>
   520 0000896A 000000000000000000- <1>
   520 00008973 000000000000000000- <1>
   520 0000897C 000000000000000000- <1>
   520 00008985 000000000000000000- <1>
   520 0000898E 000000000000000000- <1>
   520 00008997 000000000000000000- <1>
   520 000089A0 000000000000000000- <1>
   520 000089A9 000000000000000000- <1>
   520 000089B2 000000000000000000- <1>
   520 000089BB 000000000000000000- <1>
   520 000089C4 000000000000000000- <1>
   520 000089CD 000000000000000000- <1>
   520 000089D6 000000000000000000- <1>
   520 000089DF 000000000000000000- <1>
   520 000089E8 000000000000000000- <1>
   520 000089F1 000000000000000000- <1>
   520 000089FA 000000000000000000- <1>
   520 00008A03 000000000000000000- <1>
   520 00008A0C 000000000000000000- <1>
   520 00008A15 000000000000000000- <1>
   520 00008A1E 000000000000000000- <1>
   520 00008A27 000000000000000000- <1>
   520 00008A30 000000000000000000- <1>
   520 00008A39 000000000000000000- <1>
   520 00008A42 000000000000000000- <1>
   520 00008A4B 000000000000000000- <1>
   520 00008A54 000000000000000000- <1>
   520 00008A5D 000000000000000000- <1>
   520 00008A66 000000000000000000- <1>
   520 00008A6F 000000000000000000- <1>
   520 00008A78 000000000000000000- <1>
   520 00008A81 000000000000000000- <1>
   520 00008A8A 000000000000000000- <1>
   520 00008A93 000000000000000000- <1>
   520 00008A9C 000000000000000000- <1>
   520 00008AA5 000000000000000000- <1>
   520 00008AAE 000000000000000000- <1>
   520 00008AB7 000000000000000000- <1>
   520 00008AC0 000000000000000000- <1>
   520 00008AC9 000000000000000000- <1>
   520 00008AD2 000000000000000000- <1>
   520 00008ADB 000000000000000000- <1>
   520 00008AE4 000000000000000000- <1>
   520 00008AED 000000000000000000- <1>
   520 00008AF6 000000000000000000- <1>
   520 00008AFF 000000000000000000- <1>
   520 00008B08 000000000000000000- <1>
   520 00008B11 000000000000000000- <1>
   520 00008B1A 000000000000000000- <1>
   520 00008B23 000000000000000000- <1>
   520 00008B2C 000000000000000000- <1>
   520 00008B35 000000000000000000- <1>
   520 00008B3E 000000000000000000- <1>
   520 00008B47 000000000000000000- <1>
   520 00008B50 000000000000000000- <1>
   520 00008B59 000000000000000000- <1>
   520 00008B62 000000000000000000- <1>
   520 00008B6B 000000000000000000- <1>
   520 00008B74 000000000000000000- <1>
   520 00008B7D 000000000000000000- <1>
   520 00008B86 000000000000000000- <1>
   520 00008B8F 000000000000000000- <1>
   520 00008B98 000000000000        <1>
   521                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   521                              <2> .dfltBPB :
   174 00008B9E E9                  <2>  db 0E9h
   175 00008B9F 00                  <2>  db 00h
   176 00008BA0 90                  <2>  db 90h
   177 00008BA1 534350444F537631    <2>  db 'SCPDOSv1'
   178 00008BA9 0002                <2>  dw 0200h
   179 00008BAB 01                  <2>  db 01h
   180 00008BAC 0100                <2>  dw 0001h
   181 00008BAE 02                  <2>  db 02h
   182 00008BAF E000                <2>  dw 00E0h
   183 00008BB1 400B                <2>  dw 0B40h
   184 00008BB3 F0                  <2>  db 0F0h
   185 00008BB4 0900                <2>  dw 0009h
   186 00008BB6 1200                <2>  dw 0012h
   187 00008BB8 0200                <2>  dw 0002h
   188 00008BBA 00000000            <2>  dd 0
   189 00008BBE 00000000            <2>  dd 0
   190 00008BC2 00                  <2>  db 00h
   191 00008BC3 00                  <2>  db 00h
   192 00008BC4 29                  <2>  db 29h
   193 00008BC5 00000000            <2>  dd 0
   194 00008BC9 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00008BD2 2020                <2>
   195 00008BD4 4641543132202020    <2>  db 'FAT12   '
   196 00008BDC 000000000000000000- <2>  db 58 dup 0
   196 00008BE5 000000000000000000- <2>
   196 00008BEE 000000000000000000- <2>
   196 00008BF7 000000000000000000- <2>
   196 00008C00 000000000000000000- <2>
   196 00008C09 000000000000000000- <2>
   196 00008C12 00000000            <2>
   522                              <1> endptr equ $
    53                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 00008C16 0F010D23000000      <1>     sidt [myIdt]
     8 00008C1D 0FB6C0              <1>     movzx eax, al
     9 00008C20 4892                <1>     xchg rdx, rax
    10 00008C22 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 00008C26 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 00008C2D 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 00008C30 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 00008C34 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 00008C38 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 00008C3C 894208              <1>     mov dword [rdx + 8], eax
    17 00008C3F C3                  <1>     ret
    18                              <1> myIdt:
    19 00008C40 0000                <1> .limit  dw 0
    20 00008C42 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 29h as part of the CON driver
    24 00008C4A 50                  <1>     push rax
    25 00008C4B 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 00008C4C 51                  <1>     push rcx
    27 00008C4D 52                  <1>     push rdx
    28 00008C4E 488D15ACF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 00008C55 B829000000          <1>     mov eax, 29h
    30 00008C5A E8B7FFFFFF          <1>     call installInterrupt
    31 00008C5F 488D15A3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 00008C66 B83B000000          <1>     mov eax, 3Bh
    33 00008C6B E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 00008C70 B401                <1>     mov ah, 01      ;Get buffer status
    36 00008C72 CD36                <1>     int 36h
    37 00008C74 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 00008C76 30E4                <1>     xor ah, ah
    39 00008C78 CD36                <1>     int 36h ;Read key to flush from buffer
    40 00008C7A EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 00008C7C B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 00008C81 CD30                <1>     int 30h
    44 00008C83 B402                <1>     mov ah, 02h
    45 00008C85 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 00008C87 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 00008C89 CD30                <1>     int 30h
    48 00008C8B B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00008C8D B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00008C92 CD30                <1>     int 30h
    51 00008C94 5A                  <1>     pop rdx
    52 00008C95 59                  <1>     pop rcx
    53 00008C96 5B                  <1>     pop rbx
    54 00008C97 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 00008C98 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00008C9D 50                  <1>     push rax
    58 00008C9E 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 00008CA5 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 00008CA9 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 00008CAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00008CAB 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00008CAC B402                <1>     mov ah, 02  ;Read RTC Time
    69 00008CAE CD3A                <1>     int 3Ah
    70 00008CB0 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008CB2 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 00008CB5 E84D000000          <1>     call .bcd2Bin
    74 00008CBA 88C5                <1>     mov ch, al
    75 00008CBC 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00008CBF E843000000          <1>     call .bcd2Bin
    77 00008CC4 88C1                <1>     mov cl, al
    78 00008CC6 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 00008CC9 E839000000          <1>     call .bcd2Bin
    80 00008CCE 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008CD0 89C2                <1>     mov edx, eax
    82 00008CD2 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008CD4 CD21                <1>     int 21h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 00008CD6 B404                <1>     mov ah, 04  ;Read RTC Date
    89 00008CD8 CD3A                <1>     int 3Ah
    90 00008CDA 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008CDC 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00008CDF E823000000          <1>     call .bcd2Bin
    94 00008CE4 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 00008CE7 81C1D0070000        <1>     add ecx, 2000   ;ecx is from 2000
    96 00008CED 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008CF0 E812000000          <1>     call .bcd2Bin
    98 00008CF5 88C6                <1>     mov dh, al  
    99 00008CF7 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 00008CFA E808000000          <1>     call .bcd2Bin
   101 00008CFF 88C2                <1>     mov dl, al
   102 00008D01 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008D03 CD21                <1>     int 21h
   104 00008D05 EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 00008D07 51                  <1>     push rcx
   108 00008D08 89C1                <1>     mov ecx, eax
   109 00008D0A 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00008D0F 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 00008D15 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 00008D18 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008D1B 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00008D1D FFC9                <1>     dec ecx
   116 00008D1F 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008D21 59                  <1>     pop rcx
   119 00008D22 C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008D23 5B                  <1>     pop rbx ;Get the pointer back
   122 00008D24 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   135                              <1> ;    mov byte [7c02h], 0
   136                              <1> ;TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
   137 00008D29 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   138                              <1> 
   139 00008D2A CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   140 00008D2C 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   141 00008D30 664489C0            <1>     mov ax, r8w
   142 00008D34 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   143 00008D3A 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   144 00008D40 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   145                              <1> 
   146 00008D47 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   147 00008D4E 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   148 00008D55 0F847C000000        <1>     jz .remInit ;No? Go to removables
   149 00008D5B 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   149 00008D64 00                  <1>
   150 00008D65 B280                <1>     mov dl, 80h ;Start with HDD 0
   151                              <1> .primary:
   152 00008D67 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   153 00008D6E 7467                <1>     je .remInit
   154 00008D70 31C9                <1>     xor ecx, ecx    ;Sector 0
   155 00008D72 E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   156 00008D77 724F                <1>     jc .primaryEpilog
   157                              <1>     ;Here, check MBR or BPB
   158 00008D79 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   159 00008D82 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   160                              <1>     ;Now check if BPB or MBR
   161 00008D84 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   162 00008D86 8A6302              <1>     mov ah, byte [rbx + 2]
   163 00008D89 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   164 00008D8D 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   165                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   166                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   167 00008D8F 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   168 00008D96 B104                <1>     mov cl, 4
   169                              <1> .checkPrimary:
   170 00008D98 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   171 00008D9B 3C01                <1>     cmp al, 01
   172 00008D9D 7421                <1>     je .primaryFound
   173 00008D9F 3C04                <1>     cmp al, 04
   174 00008DA1 741D                <1>     je .primaryFound
   175 00008DA3 3C06                <1>     cmp al, 06
   176 00008DA5 7419                <1>     je .primaryFound
   177 00008DA7 3C0B                <1>     cmp al, 0Bh
   178 00008DA9 7415                <1>     je .primaryFound
   179 00008DAB 3C0C                <1>     cmp al, 0Ch
   180 00008DAD 7411                <1>     je .primaryFound
   181 00008DAF 3C0E                <1>     cmp al, 0Eh
   182 00008DB1 740D                <1>     je .primaryFound
   183 00008DB3 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   184 00008DBA FEC9                <1>     dec cl
   185 00008DBC 740A                <1>     jz .primaryEpilog
   186 00008DBE EBD8                <1>     jmp short .checkPrimary
   187                              <1> .primaryFound:
   188                              <1>     ;Copy the first sector of this partition into memory
   189 00008DC0 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   190 00008DC3 E8C8000000          <1>     call .readSectorAndAddDataToTables
   191                              <1> .primaryEpilog:
   192 00008DC8 FEC2                <1>     inc dl  ;Goto next BIOS drive
   193 00008DCA 88D6                <1>     mov dh, dl
   194 00008DCC 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   195 00008DCF 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   196 00008DD5 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   197                              <1> .extended:
   198                              <1> ;We have gone through all the devices once
   199                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   200                              <1>     ;je .remInit ;If yes, get removable devices
   201                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   202                              <1>     ;xor ecx, ecx    ;Get MBR back
   203                              <1>     ;call .initReadSector
   204                              <1>     ;Now we eventually search MBR for a FAT extended partition
   205                              <1> .remInit:
   206                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   207                              <1> ; for some reason the removable drives stop working or dont exist.
   208 00008DD7 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   209 00008DDE 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   210 00008DE5 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   211 00008DE8 48897708            <1>     mov qword [rdi + 8], rsi
   212                              <1> ;This forces the hard drives to start at C:
   213 00008DEC 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   214 00008DEF 30D2                <1>     xor dl, dl  ;Start with removable device 0
   215 00008DF1 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   216                              <1>     ;rdi points to the space for the subsequent bpb's
   217 00008DF4 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   218 00008DFB 7508                <1>     jnz .removables
   219 00008DFD 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   220 00008E04 C3                  <1>     ret ;and return!
   221                              <1> .removables:
   222 00008E05 31C9                <1>     xor ecx, ecx    ;Read sector 0
   223 00008E07 E884000000          <1>     call .readSectorAndAddDataToTables
   224                              <1> .removableEpilogue:
   225 00008E0C FEC2                <1>     inc dl  ;Goto next BIOS device now
   226 00008E0E 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   227 00008E14 7412                <1>     je .end
   228 00008E16 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   229 00008E1D 7503                <1>     jne .re0
   230 00008E1F 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   231                              <1> .re0:
   232 00008E22 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   233 00008E26 72DD                <1>     jb .removables
   234                              <1> .end:
   235 00008E28 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   236 00008E2F 741D                <1>     je .singleRemDev
   237                              <1> .msdExit:
   238 00008E31 5B                  <1>     pop rbx ;rbx points to the parameter block
   239                              <1>     ;Now we set the .optptr, .endptr and .numunt
   240 00008E32 50                  <1>     push rax
   241 00008E33 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   242 00008E3A 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   243 00008E3D 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   244 00008E44 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   245 00008E48 58                  <1>     pop rax
   246 00008E49 E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   247                              <1> .singleRemDev:
   248                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   249 00008E4E 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   250 00008E55 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   251 00008E5B 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   252 00008E5E 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   253 00008E65 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   254 00008E68 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   255 00008E6C C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   256 00008E73 C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   257 00008E7A FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   258 00008E80 EBAF                <1>     jmp short .msdExit
   259                              <1> .initReadSector:
   260                              <1> ;Called with sector number in rcx and BIOS device number in dl
   261 00008E82 B482                <1>     mov ah, 82h ;Read
   262 00008E84 B001                <1>     mov al, 1   ;One sector
   263 00008E86 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   264 00008E8D CD33                <1>     int 33h
   265 00008E8F C3                  <1>     ret
   266                              <1> 
   267                              <1> .readSectorAndAddDataToTables:
   268                              <1> ;Input:
   269                              <1> ;ecx = Sector number to read
   270                              <1> ;r15 -> bpb array entry for the BPB
   271                              <1> ;r8 = Logical Drive number (offset into arrays)
   272 00008E90 E8EDFFFFFF          <1>     call .initReadSector
   273                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00008E95 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00008E97 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   274                              <1>     ;Now verify this is a BPB
   275 00008E98 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   276 00008E9A 8A6302              <1>     mov ah, byte [rbx + 2]
   277 00008E9D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   278                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008EA1 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   279                              <1>     ;Now copy data to internal tables
   280 00008EA3 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   281 00008EA6 51                  <1>     push rcx
   282 00008EA7 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   283 00008EAC 4C89FF              <1>     mov rdi, r15
   284 00008EAF F348A5              <1>     rep movsq   ;Copy the BPB
   285 00008EB2 59                  <1>     pop rcx
   286                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   287 00008EB3 488D1D5AFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   288 00008EBA 4C01C3              <1>     add rbx, r8
   289                              <1>     ;Add device count to rbx to point to correct entry
   290 00008EBD 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   291 00008EBF 488D1D58FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl]
   292 00008EC6 4A8D1CC3            <1>     lea rbx, qword [rbx + 8*r8]
   293 00008ECA 4C893B              <1>     mov qword [rbx], r15
   294 00008ECD 49FFC0              <1>     inc r8  ;Goto next logical drive
   295 00008ED0 FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   296 00008ED6 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   297                              <1>     return
    13                              <2> %%_ret:
    14 00008EDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    55                                  Segment drvbss follows=resSeg align=1 nobits
    56                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    57 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    58                                  dosEnd: ;Used to compute the size of resident DOS
    58          ------------------       info: assembly required 1+19+2 passes

