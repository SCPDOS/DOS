     1                                  [map all ./lst/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     6                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=INT 49 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     7                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> %macro defaultBPB 0
   174                              <1>     db 0E9h
   175                              <1>     db 00h
   176                              <1>     db 90h
   177                              <1>     db 'SCPDOSv1'
   178                              <1>     dw 0200h                       
   179                              <1>     db 01h                         
   180                              <1>     dw 0001h                           
   181                              <1>     db 02h                              
   182                              <1>     dw 00E0h            
   183                              <1>     dw 0B40h   
   184                              <1>     db 0F0h                   
   185                              <1>     dw 0009h                   
   186                              <1>     dw 0012h                     
   187                              <1>     dw 0002h                  
   188                              <1>     dd 0                 
   189                              <1>     dd 0 
   190                              <1>     db 00h
   191                              <1>     db 00h
   192                              <1>     db 29h
   193                              <1>     dd 0
   194                              <1>     db 'NO NAME    '
   195                              <1>     db 'FAT12   '
   196                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   197                              <1> %endmacro
     8                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233                              <1>     ;The following byte is reserved outside of sysinit
   234 0000000D ??                  <1>     .subSysMark resb 1  ;Marks the optional DOS subsystem of the MCB
   235 0000000E ????                <1>     .reserved   resb 2  
   236                              <1>     .program:
   237                              <1> endstruc
   238                              <1> ;MCB equates
   239                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   240                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   241                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   242                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   243                              <1> mcbMarkCtn      equ "M"
   244                              <1> mcbMarkEnd      equ "Z"
   245                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   246                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   247                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   248                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   249                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   250                              <1> mcbSubIFS       equ "I" ;Unused for now
   251                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   252                              <1> mcbSubFCBS      equ "X" ;Unused for now
   253                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   254                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   255                              <1> mcbSubStacks    equ "S" ;Unused for now
   256                              <1> 
   257                              <1> 
   258                              <1> memFirstFit     equ 0   ;First free block goes to application
   259                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   260                              <1> memLastFit      equ 2   ;Last free block goes to application
   261                              <1> 
   262                              <1> ;Owner = Para aligned address => Owning application PSP
   263                              <1> ;...To consider...
   264                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   265                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   266                              <1> ;------------------------------------------------------------------------;
   267                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   268                              <1> ; following order, thus allowing for return values to be placed in the 
   269                              <1> ; registers by accessing the caller register stack frame.
   270                              <1> ;------------------------------------------------------------------------;
   271                              <1> struc callerFrame
   272 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   273 00000008 ????????????????    <1>     .rbx    resq 1    
   274 00000010 ????????????????    <1>     .rcx    resq 1
   275 00000018 ????????????????    <1>     .rdx    resq 1
   276 00000020 ????????????????    <1>     .rsi    resq 1
   277 00000028 ????????????????    <1>     .rdi    resq 1
   278 00000030 ????????????????    <1>     .rbp    resq 1
   279 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   280 00000040 ????????????????    <1>     .r9     resq 1
   281                              <1> ;Pushed by Processor when invoked via Interrupt
   282 00000048 ????????????????    <1>     .rip    resq 1
   283 00000050 ????????????????    <1>     .cs     resq 1
   284 00000058 ????????????????    <1>     .flags  resq 1
   285                              <1> endstruc
   286                              <1> 
   287                              <1> struc dpl
   288                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   289                              <1> ; server calls
   290 00000000 ????????????????    <1>     .rax    resq 1
   291 00000008 ????????????????    <1>     .rbx    resq 1
   292 00000010 ????????????????    <1>     .rcx    resq 1
   293 00000018 ????????????????    <1>     .rdx    resq 1
   294 00000020 ????????????????    <1>     .rsi    resq 1
   295 00000028 ????????????????    <1>     .rdi    resq 1
   296 00000030 ????????????????    <1>     .r8     resq 1
   297 00000038 ????????????????    <1>     .r9     resq 1
   298 00000040 ????????????????    <1>     .align  resq 1
   299 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   300 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   304 00000000 ????????????????    <1>     .oldRBP         resq 1  ;Ptr to DOSSEG
   305 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   306 00000010 ????????????????    <1>     .newSFTVal      resq 1
   307 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   308 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   309 00000028 ????????????????    <1>     .newLastdrive   resq 1
   310 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   311 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   312 00000040 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   313 00000048 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   314 00000050 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line buffer of line being processed
   315 00000058 ????????????????    <1>     .driverBreak    resq 1  ;Ptr to the pathname terminator 
   316 00000060 ????????????????    <1>     .breakChar      resq 1  ;Char that was replaced by null for terminator
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc filename
   320                              <1> ;8.3 File name struct
   321 00000000 ????????????????    <1>     .fName  resb 8
   322 00000008 ??????              <1>     .fExt   resb 3
   323                              <1> endstruc
   324                              <1> 
   325                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   326 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   327 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   328 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   329 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   330 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   331 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   332 00000016 ????                <1>     .fileTime   resw 1  ;File time
   333 00000018 ????                <1>     .fileDate   resw 1  ;File date
   334 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   335 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc psp
   339 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   340 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   341 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   342 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   343 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   344 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   345 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   346                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   347 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   348 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   349 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   350 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   351 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   352 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   353 0000005B ??                  <1>                 resb 1  ;Reserved byte
   354                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   355                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   356                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   357                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   358                              <1> ; always used and xtraHdlSz.
   359                              <1> ;Will need to add two SYSCALLS for future expansion:
   360                              <1> ;       1) Get Program Environment Pointer
   361                              <1> ;       2) Get Command Line arguments pointer
   362                              <1> ;The below are in the same place as in DOS.
   363                              <1>     .cmdLineArgPtr: ;Symbol for future use
   364 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   365 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   366                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   367 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   368 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   369                              <1> endstruc
   370                              <1> 
   371                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   372                              <1> 
   373                              <1> struc clkStruc
   374 00000000 ????                <1>     .dateWord   resw 1
   375 00000002 ??                  <1>     .minutes    resb 1
   376 00000003 ??                  <1>     .hours      resb 1
   377 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   378 00000005 ??                  <1>     .seconds    resb 1
   379                              <1> endstruc
   380                              <1> 
   381                              <1> 
   382                              <1> struc extCtryStruc
   383 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   384 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   385 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   386 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   387 00000007 ????                <1>     .dtfmt      resw 1  ;Date time format (2 bytes)
   388                              <1>                         ;0 = month day year hh:mm:ss
   389                              <1>                         ;1 = day month year hh:mm:ss
   390                              <1>                         ;2 = year month day hh:mm:ss
   391 00000009 ??????????          <1>     .curr       resb 5   ;ASCIIZ Currency symbol (5 chars)
   392 0000000E ????                <1>     .thouSep    resb 2   ;ASCIIZ Thousands separator
   393 00000010 ????                <1>     .dcmlSep    resb 2   ;ASCIIZ Decimal separator
   394 00000012 ????                <1>     .dateSep    resb 2   ;ASCIIZ Date separator
   395 00000014 ????                <1>     .timeSep    resb 2   ;ASCIIZ Time separator
   396 00000016 ??                  <1>     .currFmt    resb 1   ;Currency Format
   397                              <1>                         ;0 = Symbol leads, without space
   398                              <1>                         ;1 = Symbol follows, without space
   399                              <1>                         ;2 = Symbol leads, one space
   400                              <1>                         ;3 = Symbol follows, one space
   401                              <1>                         ;4 = Symbol replace decimal separator
   402 00000017 ??                  <1>     .digtdpt    resb 1   ;Number of digits after the decimal point
   403 00000018 ??                  <1>     .timefmt    resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   404 00000019 ????????????????    <1>     .mapptr     resb 8   ;Case map address (0 is nulptr), needs fixing up
   405 00000021 ????                <1>     .dataSep    resb 2   ;Data list separator
   406 00000023 <res Ah>            <1>     .resv       resb 10  ;Reserve 10 bytes
   407                              <1> endstruc
   408                              <1> 
   409                              <1> struc countryStruc
   410 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   411                              <1>                         ;0 = month day year hh:mm:ss
   412                              <1>                         ;1 = day month year hh:mm:ss
   413                              <1>                         ;2 = year month day hh:mm:ss
   414 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   415 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   416 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   417 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   418 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   419 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   420                              <1>                         ;0 = Symbol leads, without space
   421                              <1>                         ;1 = Symbol follows, without space
   422                              <1>                         ;2 = Symbol leads, one space
   423                              <1>                         ;3 = Symbol follows, one space
   424                              <1>                         ;4 = Symbol replace decimal separator
   425 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   426 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   427 00000012 ????????????????    <1>     .mapptr    resb 8   ;Case map address (0 is nulptr), needs fixing up
   428 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   429 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   430                              <1> endstruc
   431                              <1> 
   432                              <1> ;Critical Error AH bitfield equates
   433                              <1> critRead    equ 0h
   434                              <1> critWrite   equ 1h
   435                              <1> critDOS     equ 0h
   436                              <1> critFAT     equ 2h
   437                              <1> critDir     equ 4h
   438                              <1> critData    equ 6h
   439                              <1> critFailOK  equ 8h
   440                              <1> critRetryOK equ 10h
   441                              <1> critIgnorOK equ 20h
   442                              <1> critCharDev equ 80h
   443                              <1> 
   444                              <1> critIgnore  equ 0
   445                              <1> critRetry   equ 1
   446                              <1> critAbort   equ 2
   447                              <1> critFail    equ 3
   448                              <1> 
   449                              <1> ;MISC ASCII control chars
   450                              <1> NUL equ 00h ;^@         | ASCII Null
   451                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   452                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   453                              <1> BEL equ 07h ;^G         | ASCII Bell
   454                              <1> BSP equ 08h ;^H         | ASCII Backspace
   455                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   456                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   457                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   458                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   459                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   460                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   461                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   462                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   463                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   464                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   465                              <1> SPC equ 20h ;Printable  | ASCII Space
   466                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   467                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   468                              <1> 
   469                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   470                              <1> ;Extended Ascii Codes
   471                              <1> eF1     equ 3Bh ;F1 second byte
   472                              <1> eF2     equ 3Ch ;F2 second byte
   473                              <1> eF3     equ 3Dh ;F3 second byte
   474                              <1> eF4     equ 3Eh ;F4 second byte
   475                              <1> eF5     equ 3Fh ;F5 second byte
   476                              <1> eF6     equ 40h ;F6 second byte
   477                              <1> eF7     equ 41h ;F7 second byte
   478                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   479                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   480                              <1> eIns    equ 52h ;Insert second byte
   481                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   482                              <1> 
   483                              <1> ;Default Configuration for the system
   484                              <1> 
   485                              <1> buffersDefault  equ 30
   486                              <1> filesDefault    equ 20
   487                              <1> fcbsDefault     equ 4
   488                              <1> safeFcbsDeflt   equ 0
   489                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./src/Debug/debSym.inc"
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    11                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
     3                              <1> 
     4                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./src/Sysinit/oemreloc.asm"
     1                              <1> ; We arrive here with the following values in the registers.
     2                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
     3                              <1> ; dx  = Int 33h boot device number
     4                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
     5                              <1> 
     6 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
     7 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
     8 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
     9 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    10 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    11 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    12 0000001A F348A5              <1>     rep movsq   ;Copy over
    13 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    14 00000022 50                  <1>     push rax
    15 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    16                              <1> sysInitldr:
    17                              <1> ;Now the tough part, load DOS to 800
    18 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    19                              <1> .read:
    20 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    21 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    21 00000035 00                  <1>
    22 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    23 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    24 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    25 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    26 0000003F CD33                <1>     int 33h
    27 00000041 7206                <1>     jc .readFail
    28 00000043 6800080000          <1>     push qword 800h
    29 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    30                              <1> .readFail:
    31 00000049 FFCE                <1>     dec esi
    32 0000004B 75DC                <1>     jnz .read
    33 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    34 00000054 B804130000          <1>     mov eax, 1304h
    35 00000059 CD30                <1>     int 30h
    36 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    37 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    37 00000066 6F6164204572726F72- <1>
    37 0000006F 0A0D00              <1>
    38 00000072 909090909090909090- <1>     db 200h-($-$$) dup 90h ;Fill rest of the sector with NOPs
    38 0000007B 909090909090909090- <1>
    38 00000084 909090909090909090- <1>
    38 0000008D 909090909090909090- <1>
    38 00000096 909090909090909090- <1>
    38 0000009F 909090909090909090- <1>
    38 000000A8 909090909090909090- <1>
    38 000000B1 909090909090909090- <1>
    38 000000BA 909090909090909090- <1>
    38 000000C3 909090909090909090- <1>
    38 000000CC 909090909090909090- <1>
    38 000000D5 909090909090909090- <1>
    38 000000DE 909090909090909090- <1>
    38 000000E7 909090909090909090- <1>
    38 000000F0 909090909090909090- <1>
    38 000000F9 909090909090909090- <1>
    38 00000102 909090909090909090- <1>
    38 0000010B 909090909090909090- <1>
    38 00000114 909090909090909090- <1>
    38 0000011D 909090909090909090- <1>
    38 00000126 909090909090909090- <1>
    38 0000012F 909090909090909090- <1>
    38 00000138 909090909090909090- <1>
    38 00000141 909090909090909090- <1>
    38 0000014A 909090909090909090- <1>
    38 00000153 909090909090909090- <1>
    38 0000015C 909090909090909090- <1>
    38 00000165 909090909090909090- <1>
    38 0000016E 909090909090909090- <1>
    38 00000177 909090909090909090- <1>
    38 00000180 909090909090909090- <1>
    38 00000189 909090909090909090- <1>
    38 00000192 909090909090909090- <1>
    38 0000019B 909090909090909090- <1>
    38 000001A4 909090909090909090- <1>
    38 000001AD 909090909090909090- <1>
    38 000001B6 909090909090909090- <1>
    38 000001BF 909090909090909090- <1>
    38 000001C8 909090909090909090- <1>
    38 000001D1 909090909090909090- <1>
    38 000001DA 909090909090909090- <1>
    38 000001E3 909090909090909090- <1>
    38 000001EC 909090909090909090- <1>
    38 000001F5 909090909090909090- <1>
    38 000001FE 9090                <1>
    39                              <1> ;END OF FIRST SECTOR!!
    40                              <1> ;Now move the alignment of the DOSSEG to 4Kb boundary
    41                              <1> initBegin:
    42 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    43 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    44 00000206 0F32                <1>     rdmsr
    45 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    46 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    47 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    48 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    49 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    50 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    51 00000221 E900000000          <1>     jmp sysinit
    52                              <1> ;Jump with rsi -> BIOS userbase
    53                              <1> ;          rdi -> APT load area (page aligned)
    54                              <1> ;          r15 -> Boot drive
    16                                  %include "./src/Sysinit/sysinit.asm"
     1                              <1> 
     2                              <1> sysinit:    ;Control is passed here from OEMINIT
     3 00000226 E8FE140000          <1>     call OEMINIT    ;First we call OEMINIT
     4 0000022B 0F827E180000        <1>     jc OEMHALT      ;If it returns CF=CY, assume halt boot
     5                              <1> ;First move the OEMINIT into fs 
     6 00000231 B9000100C0          <1>     mov ecx, 0C0000100h ;Write FS MSR
     7 00000236 488B3D9C130000      <1>     mov rdi, qword [FINALDOSPTR] ;Pointer of the address we loaded at
     8 0000023D 89F8                <1>     mov eax, edi
     9 0000023F 4889FA              <1>     mov rdx, rdi
    10 00000242 48C1EA20            <1>     shr rdx, 20h
    11 00000246 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    12 00000248 4889FD              <1>     mov rbp, rdi    ;Move the pointer into rbp as well
    13                              <1> ;------------------------------------------------;
    14                              <1> ;      Copy DOS to it's final resting ground     ;
    15                              <1> ;------------------------------------------------;  
    16                              <1> dosReloc:
    17 0000024B 488D35(00000000)    <1>     lea rsi, section.resSeg.start   ;Get pointer to the start of resSeg
    18 00000252 488B3D80130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Get ptr to where dSeg goes
    19 00000259 4881C7[CE1A0000]    <1>     add rdi, dSegLen                ;Make this a pointer to the start of resSeg
    20 00000260 4839F7              <1>     cmp rdi, rsi 
    21 00000263 7408                <1>     je short skipDOSReloc   ;Skip relocating if DOS is at correct address
    22 00000265 B9CA100000          <1>     mov ecx, (dosLen + 7)/8
    23 0000026A F348A5              <1>     rep movsq
    24                              <1> skipDOSReloc:
    25                              <1> ;------------------------------------------------;
    26                              <1> ;              Connect Debugger                  ;
    27                              <1> ;------------------------------------------------;
    28                              <1> %if DEBUG
    29                              <1> ;Only connect if in debug mode
    30                              <1>     mov eax, 0C501h ;Connect debugger
    31                              <1>     int 35h
    32                              <1> %endif
    33                              <1> ;------------------------------------------------;
    34                              <1> ;           Sanitise the data area               ;
    35                              <1> ;------------------------------------------------;
    36                              <1> ; This call initialises ALL fields in the DOS    ;
    37                              <1> ; data area with 0's. Thus any fields, which     ;
    38                              <1> ; need to be initialised with a 0 value, are     ;
    39                              <1> ; initialised for free.                          ;
    40                              <1> ;------------------------------------------------;
    41 0000026D 488B3D65130000      <1>     mov rdi, qword [FINALDOSPTR]    ;Go back to the data area
    42 00000274 B9[CE1A0000]        <1>     mov ecx, dSegLen
    43 00000279 30C0                <1>     xor al, al
    44 0000027B F3AA                <1>     rep stosb   ;and sanitise away!
    45                              <1> ;------------------------------------------------;
    46                              <1> ;          Kernel inits and adjustments          ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ;Adjust Interrupt Entries Int 00h-15h
    49                              <1> ;Assumes rbp points to DOSSEG
    50 0000027D 0F010D4B130000      <1>     sidt [localIDTpointer]   ;Get the idt pointer here
    51                              <1> adjExceptions:
    52 00000284 488D3D660F0000      <1>     lea rdi, exceptData
    53 0000028B 31C0                <1>     xor eax, eax            ;Start with interrupt 0
    54 0000028D B915000000          <1>     mov ecx, 21
    55 00000292 E8F2120000          <1>     call setupInterruptBlock
    56                              <1> ;Adjust Interrupt Entries Int 40h-49h
    57                              <1> adjInts:
    58 00000297 488D3D03100000      <1>     lea rdi, intData
    59 0000029E B840000000          <1>     mov eax, 40h            ;Start with interrupt 40h
    60 000002A3 B950000000          <1>     mov ecx, 50h
    61 000002A8 E8DC120000          <1>     call setupInterruptBlock
    62                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    63                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
    64                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
    65                              <1> ;Now adjust int 42h and 44h correctly using DOS to get them low
    66 000002AD 488D15FB170000      <1>     lea rdx, OEMHALT ;Get segment start address
    67 000002B4 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
    68 000002B9 CD41                <1>     int 41h
    69 000002BB 488D15ED170000      <1>     lea rdx, OEMHALT ;Get segment start address
    70 000002C2 B844250000          <1>     mov eax, 2544h
    71 000002C7 CD41                <1>     int 41h
    72                              <1> ;------------------------------------------------;
    73                              <1> ;          Driver Adjustments and inits          ;
    74                              <1> ;------------------------------------------------;
    75                              <1> ;Modify the pointers in nData before putting them in the data area
    76 000002C9 48012D5B100000      <1>     add qword [nData + drvHdr.strPtr], rbp
    77 000002D0 48012D5C100000      <1>     add qword [nData + drvHdr.intPtr], rbp
    78                              <1> ;Copy the Null driver header to its location in Sysvars
    79 000002D7 B922000000          <1>     mov ecx, drvHdr_size
    80 000002DC 488D353E100000      <1>     lea rsi, qword [nData]
    81 000002E3 488DBD[7A000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
    82 000002EA F3A4                <1>     rep movsb   
    83                              <1> 
    84                              <1> ;Adjust the addresses in the other driver headers 
    85 000002EC 488B3503130000      <1>     mov rsi, qword [OEMDRVCHAIN]
    86 000002F3 4889B5[7A000000]    <1>     mov qword [rbp + nulDevHdr + drvHdr.nxtPtr], rsi  ;Point NUL to the OEM driver chain
    87                              <1> adjDrivers:
    88                              <1> ;Input: rsi = Effective address of driver in DOS segment
    89                              <1> ;       rbp = Ptr to the start of the DOS segment
    90                              <1> ;Output: rsi = EA of next header in DOS segment
    91 000002FA 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
    92 000002FE 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
    93 00000302 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
    94 00000309 7408                <1>     je short .exit
    95 0000030B 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
    96 0000030E 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Dont "demand" ctguos headers... 
    97                              <1>     ;add rsi, drvHdr_size   ;... but definitely suggest it for kernel drivers
    98 00000311 EBE7                <1>     jmp short adjDrivers
    99                              <1> .exit:
   100                              <1> ;------------------------------------------------;
   101                              <1> ;                   MCB inits                    ;
   102                              <1> ;------------------------------------------------;
   103                              <1> makeMCBChain:
   104                              <1> ;Fill in Anchor MCB first
   105 00000313 488D85[10000000]    <1>     lea rax, qword [rbp + anchorMcb + mcb.program]    ;Get first allocated byte
   106 0000031A 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd] ;Get the end of the file
   107 00000321 4829C3              <1>     sub rbx, rax    ;Number of bytes in rbx (ebx bzw.)
   108 00000324 81C30F000000        <1>     add ebx, 0Fh    ;Round up if not para aligned
   109 0000032A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   110 0000032D 899D[09000000]      <1>     mov dword [rbp + anchorMcb + mcb.blockSize], ebx
   111 00000333 48C785[01000000]08- <1>     mov qword [rbp + anchorMcb + mcb.owner], mcbOwnerDOS
   111 0000033B 000000              <1>
   112 0000033E C685[00000000]5A    <1>     mov byte [rbp + anchorMcb + mcb.marker], mcbMarkEnd
   113                              <1> 
   114 00000345 488D85[00000000]    <1>     lea rax, qword [rbp + anchorMcb]    ;Now store the anchor pointer in var
   115 0000034C 48890596120000      <1>     mov qword [MCBANCHOR], rax          ;Save in external var...
   116 00000353 6448890425-         <1>     mov qword fs:[mcbChainPtr], rax     ; and in internal DOS var 
   116 00000358 [33000000]          <1>
   117                              <1> 
   118 0000035C 55                  <1>     push rbp    ;Save the pointer to DOSSEG on the stack temporarily
   119 0000035D E89F140000          <1>     call OEMMCBINIT ;Build MCB chain
   120 00000362 5D                  <1>     pop rbp
   121 00000363 0F8246170000        <1>     jc OEMHALT
   122                              <1> ;------------------------------------------------;
   123                              <1> ;              Kernel Driver inits               ;
   124                              <1> ;------------------------------------------------;
   125                              <1> kernDrvInit:
   126                              <1>     ;rbp and fs point to DOSSEG
   127                              <1>     ;Set the CON pointer and the CLOCK pointers.
   128                              <1>     ;The standard defines that kernel drivers are such that the 
   129                              <1>     ;first driver MUST be CON and the fourth MUST be CLOCK$.
   130                              <1>     ;This is done to allow the drivers to use DOS CHAR functions and 
   131                              <1>     ;GET/SET TIME and GET/SET DATE
   132 00000369 488B3586120000      <1>     mov rsi, qword [OEMDRVCHAIN]    ;Get the first driver in the chain
   133 00000370 4889F3              <1>     mov rbx, rsi
   134 00000373 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store default CON ptr
   135 0000037A 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto AUX
   136 0000037D 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto PRN
   137 00000380 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Goto CLOCK$
   138 00000383 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi ;Store default CLOCK$ ptr
   139 0000038A 4889DE              <1>     mov rsi, rbx     ;Point rsi back to head of device chain
   140 0000038D 488D1D76120000      <1>     lea rbx, initDrvBlk
   141                              <1>     ;The following is to mark all kernel driver allocs as new DOS
   142 00000394 48C785[1F040000]09- <1>     mov qword [rbp + currentPSP], mcbOwnerNewDOS
   142 0000039C 000000              <1>
   143                              <1> .init:
   144 0000039F E832110000          <1>     call initDriver         ;Importantly preserves rbp, rsi and rbx
   145 000003A4 0F8205170000        <1>     jc OEMHALT
   146 000003AA E8F10F0000          <1>     call addDriverMarkers   ;Preserves all registers
   147 000003AF 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   148 000003B5 750B                <1>     jnz short .notMSD
   149 000003B7 E888110000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   150 000003BC 0F82ED160000        <1>     jc OEMHALT
   151                              <1> .notMSD:
   152 000003C2 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]    ;Now point rsi to that header
   153 000003C5 4881FEFFFFFFFF      <1>     cmp rsi, -1     ;We at the end of the chain?
   154 000003CC 75D1                <1>     jne short .init ;If not, goto next driver
   155                              <1> ;Finally, Eject the init routine if so desired by the implementers
   156 000003CE 488D9D[10100000]    <1>     lea rbx, qword [rbp + dosEnd]   ;Get the original alloc end pointer (para aligned)
   157 000003D5 4C8D85[00000000]    <1>     lea r8, qword [rbp + anchorMcb]   ;Get pointer to mcb
   158 000003DC E8A4100000          <1>     call ejectKernelInit
   159 000003E1 0F82C8160000        <1>     jc OEMHALT
   160                              <1> ;----------------------------------------:
   161                              <1> ;           End of driver inits.         :
   162                              <1> ;----------------------------------------:
   163                              <1> ;
   164                              <1> ;----------------------------------------:
   165                              <1> ;END OF IMPLEMENTERS SYSINIT PORTION ^^^ :
   166                              <1> ;      So called the OEM BIOS INIT       :
   167                              <1> ;----------------------------------------:
   168                              <1> ;
   169                              <1> ;----------------------------------------:
   170                              <1> ;START OF COMMON DOS SYSINIT PORTION VVV :
   171                              <1> ;----------------------------------------:
   172                              <1> ;
   173                              <1> ;Setup internal DOS vars from OEM passed arguments.
   174 000003E7 0FB60507120000      <1>     movzx eax, byte [OEMBIOS]
   175 000003EE 85C0                <1>     test eax, eax
   176 000003F0 741B                <1>     jz short skipOEMName
   177 000003F2 488DB5[02000000]    <1>     lea rsi, qword [rbp + dosBIOSName]
   178 000003F9 48B8494F0000000000- <1>     mov rax, "IO"
   178 00000402 00                  <1>
   179 00000403 488906              <1>     mov qword [rsi], rax
   180 00000406 C746082E535953      <1>     mov dword [rsi + 8], ".SYS"
   181                              <1> skipOEMName:
   182 0000040D 8B05F3110000        <1>     mov eax, dword [OEMVERSION]
   183 00000413 8985[11000000]      <1>     mov dword [rbp + biosVers], eax
   184                              <1> 
   185 00000419 488B05DE110000      <1>     mov rax, qword [OEMPTR]
   186 00000420 488985[15000000]    <1>     mov qword [rbp + biosPtr], rax
   187                              <1> 
   188 00000427 0FB605C5110000      <1>     movzx eax, byte [DFLTDRIVE]
   189 0000042E 31DB                <1>     xor ebx, ebx
   190 00000430 3D19000000          <1>     cmp eax, 25
   191 00000435 0F47C3              <1>     cmova eax, ebx
   192 00000438 8885[10000000]      <1>     mov byte [rbp + bootDrive], al
   193                              <1> 
   194 0000043E 0FB605AC110000      <1>     movzx eax, byte [FILES]
   195 00000445 BB14000000          <1>     mov ebx, filesDefault
   196 0000044A 3D05000000          <1>     cmp eax, 5
   197 0000044F 0F42C3              <1>     cmovb eax, ebx
   198 00000452 3DFE000000          <1>     cmp eax, 254
   199 00000457 0F47C3              <1>     cmova eax, ebx
   200 0000045A 8885[9D000000]      <1>     mov byte [rbp + numFiles], al
   201                              <1> 
   202 00000460 0FB6058B110000      <1>     movzx eax, byte [BUFFERS]
   203 00000467 BB1E000000          <1>     mov ebx, buffersDefault
   204 0000046C 85C0                <1>     test eax, eax
   205 0000046E 0F44C3              <1>     cmovz eax, ebx
   206 00000471 3D63000000          <1>     cmp eax, 99
   207 00000476 0F47C3              <1>     cmova eax, ebx
   208 00000479 880573110000        <1>     mov byte [BUFFERS], al
   209                              <1> 
   210 0000047F 0FB6056E110000      <1>     movzx eax, byte [LASTDRIVE]
   211 00000486 BB05000000          <1>     mov ebx, lastDriveDeflt
   212 0000048B 39D8                <1>     cmp eax, ebx
   213 0000048D 0F42C3              <1>     cmovb eax, ebx
   214 00000490 3D19000000          <1>     cmp eax, 25
   215 00000495 0F47C3              <1>     cmova eax, ebx
   216 00000498 880556110000        <1>     mov byte [LASTDRIVE], al
   217 0000049E 8885[78000000]      <1>     mov byte [rbp + lastdrvNum], al     ;Set for DOS to be usable
   218                              <1> 
   219 000004A4 66C785[1F000000]03- <1>     mov word [rbp + shareCount], 3      ;Retry the repeat 3 times before failing
   219 000004AC 00                  <1>
   220 000004AD 66C785[21000000]01- <1>     mov word [rbp + shareDelay], 1      ;Go through one multiple of countdown loop
   220 000004B5 00                  <1>
   221                              <1> ;------------------------------------------------;
   222                              <1> ;          Find largest sector size              ;
   223                              <1> ;------------------------------------------------;
   224                              <1> sectorSizeSearch:
   225                              <1> ;Done by reading DPB's for each drive
   226 000004B6 31C0                <1>     xor eax, eax
   227 000004B8 64488B1425-         <1>     mov rdx, qword fs:[dpbHeadPtr]  ;Get ptr to first DPB
   227 000004BD [3B000000]          <1>
   228                              <1>     ;Go thru each block individually
   229                              <1> .findLargest:
   230 000004C1 663B4202            <1>     cmp ax, word [rdx + dpb.wBytesPerSector]    ;Is current bigger than max?
   231 000004C5 660F424202          <1>     cmovb ax, word [rdx + dpb.wBytesPerSector]  ;Move if so
   232 000004CA 488B5225            <1>     mov rdx, qword [rdx + dpb.qNextDPBPtr]  ;Goto next DPB
   233 000004CE 4881FAFFFFFFFF      <1>     cmp rdx, -1 ;We at the end?
   234 000004D5 75EA                <1>     jne short .findLargest  ;If not, keep checking
   235 000004D7 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   235 000004DC [5B000000]          <1>
   236                              <1> ;------------------------------------------------;
   237                              <1> ;                CDS array inits                 ;
   238                              <1> ;------------------------------------------------;
   239 000004E0 0FB68D[78000000]    <1>     movzx ecx, byte [rbp + lastdrvNum]     ;Use as a counter
   240 000004E7 E805000000          <1>     call makeCDSArray   ;Sets the CDS head pointer to rdi
   241 000004EC E995000000          <1>     jmp initialCDSWritten ;Go past the function
   242                              <1> makeCDSArray:
   243                              <1> ;Builds a new CDS array for ya and sets the sysvars var to point to it!
   244                              <1> ;Input: ecx = Size of array (number of CDS's in the array)
   245                              <1> ;Ouput: CF=CY: Abort operation. CF=NC: CDS Array allocated ok!
   246 000004F1 B85B000000          <1>     mov eax, cds_size
   247 000004F6 F7E1                <1>     mul ecx ;eax has the size of the CDS array to make
   248 000004F8 050F000000          <1>     add eax, 0Fh    ;Round up if not on a para boundary
   249 000004FD C1E804              <1>     shr eax, 4      ;Convert to paragraphs
   250 00000500 31DB                <1>     xor ebx, ebx
   251 00000502 89C3                <1>     mov ebx, eax
   252 00000504 B800480000          <1>     mov eax, 4800h  ;ALLOC  (current owner is mcbOwnerNewDOS)
   253 00000509 CD41                <1>     int 41h
   254                              <1>     retc    ;Return if Carry set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34 0000050B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000050D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
   255 0000050E 4889C7              <1>     mov rdi, rax            ;Save pointer to MCB in rdi
   256 00000511 482D10000000        <1>     sub rax, mcb_size       ;Move rax to point to MCB
   257 00000517 C6400D4C            <1>     mov byte [rax + mcb.subSysMark], mcbSubCDS  ;Mark as a CDS array
   258 0000051B 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
   259                              <1> 
   260 00000523 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   260 00000528 [65000000]          <1>
   261 0000052C 57                  <1>     push rdi
   262 0000052D 51                  <1>     push rcx
   263 0000052E 89C8                <1>     mov eax, ecx
   264 00000530 B95B000000          <1>     mov ecx, cds_size
   265 00000535 F7E1                <1>     mul ecx ;Multiply eax with ecx to get number of bytes to null out
   266 00000537 89C1                <1>     mov ecx, eax
   267 00000539 31C0                <1>     xor eax, eax
   268 0000053B F3AA                <1>     rep stosb
   269 0000053D 59                  <1>     pop rcx
   270 0000053E 5F                  <1>     pop rdi
   271 0000053F 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   271 00000544 [3B000000]          <1>
   272 00000548 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   273                              <1> .tempCDS:
   274 0000054D 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   275 0000054F 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   276 00000553 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   277 0000055A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   278 00000560 31D2                <1>     xor edx, edx    ;Use edx for flags
   279 00000562 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   280 00000569 7409                <1>     je .skipValidCDS
   281 0000056B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   282 00000570 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   283                              <1> .skipValidCDS:
   284 00000574 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   285 00000578 FFC0                <1>     inc eax ;Increment the drive letter
   286 0000057A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   287 00000581 FFC9                <1>     dec ecx
   288 00000583 75C8                <1>     jnz .tempCDS
   289 00000585 C3                  <1>     ret
   290                              <1> initialCDSWritten:
   291                              <1> ;------------------------------------------------;
   292                              <1> ;     Set up general PSP areas and DOS vars      ;
   293                              <1> ;------------------------------------------------;
   294                              <1> ;Ensure to link the default DOS vCON edit key
   295                              <1> ; controller routines before proceeding
   296 00000586 488D85[55270000]    <1>     lea rax, qword [rbp + editKeys]
   297 0000058D 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   297 00000592 [32000000]          <1>
   298                              <1> 
   299                              <1> ;Additional DOS Vars init and fixups
   300 00000596 64C60425[09040000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   300 0000059E FF                  <1>
   301 0000059F 64C60425[D1030000]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   301 000005A7 2F                  <1>
   302 000005A8 488DBD[785E0000]    <1>     lea rdi, qword [rbp + caseMapFunc]  ;Get the function pointer
   303 000005AF 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapptr], rdi ;Store in country table
   303 000005B4 [BA010000]          <1>
   304 000005B8 4801AD[7E010000]    <1>     add qword [rbp + charTableArray.ucTable + 1], rbp ;Fixup stored address
   305 000005BF 4801AD[87010000]    <1>     add qword [rbp + charTableArray.filenameUCTable + 1], rbp 
   306 000005C6 4801AD[90010000]    <1>     add qword [rbp + charTableArray.filenameTerminatingTable + 1], rbp 
   307 000005CD 4801AD[99010000]    <1>     add qword [rbp + charTableArray.collatingTable + 1], rbp 
   308                              <1> 
   309                              <1> ;Server Table setup
   310 000005D4 488DBD[D9050000]    <1>     lea rdi, qword [rbp + serverDispTbl]  ;Get pointer to table
   311 000005DB 6448893C25-         <1>     mov qword fs:[serverDispTblPtr], rdi   ;Store to use
   311 000005E0 [8B1A0000]          <1>
   312                              <1> 
   313                              <1> ;Set network machine name to... nothing!
   314 000005E4 488DBD[D6030000]    <1>     lea rdi, qword [rbp + machineName]
   315 000005EB B910000000          <1>     mov ecx, 10h    ;16 chars long
   316 000005F0 B020                <1>     mov al, SPC ;Space char
   317 000005F2 F3AA                <1>     rep stosb   ;Fill with space chars
   318                              <1> 
   319                              <1> ;Patch Data Table init
   320 000005F4 488DBD[E6030000]    <1>     lea rdi, qword [rbp + critPtchTbl]
   321 000005FB 488D85[026D0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   322 00000602 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   323 00000604 488D85[0C6D0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   324 0000060B 48AB                <1>     stosq
   325 0000060D 488D85[166D0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   326 00000614 48AB                <1>     stosq
   327 00000616 488D85[206D0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   328 0000061D 48AB                <1>     stosq
   329                              <1> 
   330                              <1> ;Initial PSP pointer fields
   331 0000061F 488D1D03100000      <1>     lea rbx, qword [tempPSP]
   332 00000626 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   332 0000062B [1F040000]          <1>
   333 0000062F 53                  <1>     push rbx
   334 00000630 4881C380000000      <1>     add rbx, psp.dta
   335 00000637 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   335 0000063C [17040000]          <1>
   336 00000640 5B                  <1>     pop rbx
   337 00000641 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   338 00000645 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   339 00000649 4889DA              <1>     mov rdx, rbx
   340 0000064C B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   341 00000651 CD41                <1>     int 41h
   342 00000653 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   343 00000657 B843350000          <1>     mov eax, 3543h
   344 0000065C CD41                <1>     int 41h
   345 0000065E 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   346 00000662 B844350000          <1>     mov eax, 3544h
   347 00000667 CD41                <1>     int 41h
   348 00000669 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   349                              <1> ;------------------------------------------------;
   350                              <1> ;              Setup DOSMGR Hooks                ;
   351                              <1> ;------------------------------------------------;   
   352 0000066D 488DBD[9F000000]    <1>     lea rdi, qword [rbp + dosMgrHooks + 1]  ;Skip the present flag
   353 00000674 488D85[77740000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   354 0000067B 48AB                <1>     stosq   ;Store ptr for LaunchTask
   355 0000067D 48AB                <1>     stosq   ;Store ptr for TerminateTask
   356                              <1> ;------------------------------------------------;
   357                              <1> ;              Setup DLLMGR Hooks                ;
   358                              <1> ;------------------------------------------------;   
   359 0000067F 488DBD[AF000000]    <1>     lea rdi, qword [rbp + dllHooks]
   360 00000686 488D85[77740000]    <1>     lea rax, qword [rbp + goodDfltShareHook]    ;Return CF = NC
   361 0000068D 48AB                <1>     stosq   ;Store ptr for RegisterDLL
   362 0000068F 48AB                <1>     stosq   ;Store ptr for UnloadDLLHook
   363                              <1> ;------------------------------------------------;
   364                              <1> ;               Setup Share Hooks                ;
   365                              <1> ;------------------------------------------------;
   366 00000691 488DBD[BF000000]    <1>     lea rdi, qword [rbp + shareHooks]
   367 00000698 488D9D[77740000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   368 0000069F 488D85[71740000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   369 000006A6 48AB                <1>     stosq   ;Store bad for openFileCheck
   370 000006A8 4893                <1>     xchg rax, rbx
   371 000006AA 48AB                <1>     stosq   ;Store good for open
   372 000006AC 48AB                <1>     stosq   ;Store good for close
   373 000006AE 4893                <1>     xchg rax, rbx
   374                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   375 000006B0 B905000000          <1>     mov ecx, 5
   376 000006B5 F348AB              <1>     rep stosq
   377 000006B8 4893                <1>     xchg rax, rbx
   378 000006BA 48AB                <1>     stosq   ;Store good for check file lock exists
   379 000006BC 4893                <1>     xchg rax, rbx
   380                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   381 000006BE B903000000          <1>     mov ecx, 3
   382 000006C3 F348AB              <1>     rep stosq
   383 000006C6 4893                <1>     xchg rax, rbx
   384 000006C8 48AB                <1>     stosq   ;Store good for close dup file share
   385 000006CA 4893                <1>     xchg rax, rbx
   386 000006CC 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   387 000006CE 48AB                <1>     stosq   ;Store bad for update dir information
   388                              <1> ;------------------------------------------------;
   389                              <1> ;        Create a Default Temporary Buffer       ;
   390                              <1> ;------------------------------------------------;
   391 000006D0 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer size
   391 000006D5 [5B000000]          <1>
   392 000006D9 81C330000000        <1>     add ebx, bufferHdr_size             ;add header size for allocation size
   393 000006DF 81C30F000000        <1>     add ebx, 0Fh
   394 000006E5 C1EB04              <1>     shr ebx, 4  ;Convert to number of paragraphs
   395 000006E8 B800480000          <1>     mov eax, 4800h
   396 000006ED CD41                <1>     int 41h
   397 000006EF 0F82BA130000        <1>     jc OEMHALT
   398 000006F5 6448890425-         <1>     mov qword fs:[bufHeadPtr], rax      ;Save pointer to buffer
   398 000006FA [5D000000]          <1>
   399 000006FE 48C700FFFFFFFF      <1>     mov qword [rax + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   400 00000705 66C74008FF00        <1>     mov word [rax + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags    
   401 0000070B 482D10000000        <1>     sub rax, mcb_size   ;Now go back to the mcb itself
   402 00000711 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS as owner of Buffer
   403 00000719 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Set this arena as a buffer
   404                              <1> ;------------------------------------------------;
   405                              <1> ;          Default File Handle Creation          ;
   406                              <1> ;                                                ;
   407                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   408                              <1> ;------------------------------------------------;
   409                              <1> defaultFileHandles:
   410 0000071D 488D95[37010000]    <1>     lea rdx, qword [rbp + firstSftHeader]
   411 00000724 6448891425-         <1>     mov qword fs:[sftHeadPtr], rdx  ;Start from this SFT header
   411 00000729 [43000000]          <1>
   412 0000072D 48C702FFFFFFFF      <1>     mov qword [rdx + sfth.qNextSFTPtr], -1
   413 00000734 66C742080500        <1>     mov word [rdx + sfth.wNumFiles], 5  ;This SFTH has space for 5 SFTs
   414                              <1> 
   415 0000073A E8040C0000          <1>     call openStreams
   416 0000073F 0F826A130000        <1>     jc OEMHALT
   417                              <1> ;------------------------------------------------;
   418                              <1> ;             Print Welcome Message              ;
   419                              <1> ;------------------------------------------------;
   420 00000745 488D15240A0000      <1>     lea rdx, strtmsg
   421 0000074C B409                <1>     mov ah, 09h
   422 0000074E CD41                <1>     int 41h    
   423                              <1> ;------------------------------------------------;
   424                              <1> ;               Load CONFIG.SYS                  ;
   425                              <1> ;------------------------------------------------;
   426                              <1> ;Setup stackframe, workout base 
   427                              <1> setupFrame:
   428 00000750 55                  <1>     push rbp
   429 00000751 4889E5              <1>     mov rbp, rsp
   430 00000754 4881EC68000000      <1>     sub rsp, cfgFrame_size
   431 0000075B 0FB605900E0000      <1>     movzx eax, byte [BUFFERS]
   432 00000762 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   433 00000766 0FB605840E0000      <1>     movzx eax, byte [FILES]
   434 0000076D 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   435 00000771 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   436 00000779 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   437 00000781 0FB6056C0E0000      <1>     movzx eax, byte [LASTDRIVE]
   438 00000788 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   439                              <1> 
   440 0000078C 0FB615600E0000      <1>     movzx edx, byte [DFLTDRIVE]    ;Get the default drive
   441 00000793 B40E                <1>     mov ah, 0Eh ;Select drive
   442 00000795 CD41                <1>     int 41h
   443 00000797 488D15190A0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   444 0000079E B43D                <1>     mov ah, 3Dh ;Open file for reading
   445 000007A0 B000                <1>     mov al, ReadAccess
   446 000007A2 CD41                <1>     int 41h
   447 000007A4 0F8259070000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   448                              <1> ;------------------------------------------------;
   449                              <1> ;              Process CONFIG.SYS                ;
   450                              <1> ;------------------------------------------------;
   451                              <1> ;Create a stack frame with the following order.
   452                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   453                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   454                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   455                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   456                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   457                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   458                              <1> ;
   459                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   460                              <1> ;-------------------------------------------------------------------------;
   461                              <1> ; CONFIG.SYS processing pseudocode:-
   462                              <1> ;
   463                              <1> ; _START:
   464                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   465                              <1> ; If (EOF encountered)
   466                              <1> ;   Insert a terminating ^Z to the end of the line. 
   467                              <1> ;   Close handle.
   468                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   469                              <1> ;   If (CR or EOF encoutered before terminating char)
   470                              <1> ;       Bad line error msg. 
   471                              <1> ;       If (CR encountered)
   472                              <1> ;           Goto _START
   473                              <1> ;       Else
   474                              <1> ;           Goto _EXIT
   475                              <1> ;   Else 
   476                              <1> ;       If (Keyword AND not DEVICE) 
   477                              <1> ;           Store it's value on stack or change internal variable value
   478                              <1> ;       If (DEVICE)
   479                              <1> ;           Move endPtr after end of line and try load the driver.
   480                              <1> ;           If (driver doesn't exist or fails to init)
   481                              <1> ;               print bad driver error msg.
   482                              <1> ;       Else 
   483                              <1> ;           Bad line error msg
   484                              <1> ;       If (line terminated by CR)
   485                              <1> ;           Goto _START
   486                              <1> ; _EXIT:
   487                              <1> ;-------------------------------------------------------------------------;
   488                              <1> ; Note:
   489                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   490                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   491                              <1> ;   adjust the memory pointer and start loading next line.
   492                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   493                              <1> ;   data structures according to the values on the stack frame.
   494                              <1> ;-------------------------------------------------------------------------;
   495                              <1> ;Start CONFIG.SYS parsing here
   496                              <1> configParse:
   497 000007AA 488945C0            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   498 000007AE 48C745B800000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   499 000007B6 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.linePtr], -1   ;Default buffer
   500 000007BE B800480000          <1>     mov eax, 4800h
   501 000007C3 BB10000000          <1>     mov ebx, 10h    ;Request 16 paragraphs (256 bytes)
   502 000007C8 CD41                <1>     int 41h
   503 000007CA 0F8238010000        <1>     jc .stopProcessError
   504 000007D0 488945B0            <1>     mov qword [rbp - cfgFrame.linePtr], rax
   505 000007D4 4889C2              <1>     mov rdx, rax    ;Move the pointer to rdx
   506 000007D7 482D10000000        <1>     sub rax, mcb_size 
   507 000007DD 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set owner to DOS
   508 000007E5 31C0                <1>     xor eax, eax
   509                              <1> .nextChar:
   510 000007E7 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   511 000007EB 6681FBFFFF          <1>     cmp bx, -1
   512 000007F0 0F8412010000        <1>     je .stopProcessError
   513 000007F6 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   514 000007FB B901000000          <1>     mov ecx, 1  ;Read one byte
   515 00000800 CD41                <1>     int 41h
   516 00000802 0F8200010000        <1>     jc .stopProcessError
   517 00000808 85C0                <1>     test eax, eax	;If this is zero, EOF reached
   518 0000080A 0F84DD060000        <1>     jz .cfgExit
   519                              <1> .notEOF:
   520 00000810 0FB602              <1>     movzx eax, byte [rdx]
   521 00000813 3C0D                <1>     cmp al, CR
   522 00000815 7420                <1>     je short .endOfLine
   523 00000817 3C0A                <1>     cmp al, LF
   524 00000819 741C                <1>     je short .endOfLine
   525 0000081B 3C1A                <1>     cmp al, EOF
   526 0000081D 7410                <1>     je short .endOfFileChar
   527 0000081F 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   528 00000820 B813120000          <1>     mov eax, 1213h  ;Uppercase the char if it is uppercasable
   529 00000825 CD4F                <1>     int 4fh
   530 00000827 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   531 00000829 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   532                              <1> .notChar:
   533 0000082A 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   534 0000082D EBB8                <1>     jmp short .nextChar
   535                              <1> .endOfFileChar:
   536 0000082F 48C745B8FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Mark EOF and End of line
   537                              <1> .endOfLine:
   538                              <1> ;rdx points to terminating char
   539                              <1> ;First find the length of the instruction word
   540 00000837 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   541 0000083B 31C9                <1>     xor ecx, ecx
   542                              <1> .cmdNameLenGet:
   543 0000083D AC                  <1>     lodsb
   544 0000083E E8B5000000          <1>     call .isCharTerminal
   545 00000843 740A                <1>     jz short .endOfCommandFound
   546 00000845 FFC1                <1>     inc ecx
   547 00000847 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   548 0000084D 72EE                <1>     jb short .cmdNameLenGet
   549                              <1> ;Else, fall through in error
   550                              <1> .endOfCommandFound:
   551                              <1> ;ecx has the length of the command
   552 0000084F 81F90A000000        <1>     cmp ecx, 10
   553 00000855 0F84AD000000        <1>     je .stopProcessError
   554 0000085B 488D3D1B010000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   555                              <1> .cmdSearch:
   556 00000862 803FFF              <1>     cmp byte [rdi], -1
   557 00000865 0F849D000000        <1>     je .stopProcessError
   558 0000086B 380F                <1>     cmp byte [rdi], cl
   559 0000086D 7579                <1>     jne short .gotoNextCmd
   560                              <1>     ;Candidate command found, check said command is the command we want
   561 0000086F 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   562 00000873 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   563 0000087A 0F8488000000        <1>     je .stopProcessError
   564 00000880 57                  <1>     push rdi
   565 00000881 51                  <1>     push rcx
   566 00000882 48FFC7              <1>     inc rdi ;Go to next char
   567 00000885 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   568 00000887 59                  <1>     pop rcx
   569 00000888 5F                  <1>     pop rdi
   570 00000889 755D                <1>     jne short .gotoNextCmd    ;If not equal, just goto next command
   571                              <1>     ;Else, rdi points to the table entry from the head of the table
   572                              <1>     ;      rcx has the length of the name field
   573                              <1>     ;rdx points to the terminating char of the line 
   574 0000088B 488D35EB000000      <1>     lea rsi, .keyTbl
   575 00000892 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   576 00000895 480FB7740F01        <1>     movzx rsi, word [rdi + rcx + 1]
   577 0000089B 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   578 0000089E F8                  <1>     clc ;Ensure flags are happy before entering
   579 0000089F 55                  <1>     push rbp
   580 000008A0 FFD6                <1>     call rsi    ;Call this function
   581 000008A2 5D                  <1>     pop rbp
   582 000008A3 7263                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   583 000008A5 48F745B8FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   584 000008AD 0F853A060000        <1>     jnz .cfgExit
   585 000008B3 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Start reading afresh
   586                              <1>     ;Read the next char. 
   587                              <1>     ;If EOF, exit.
   588                              <1>     ;Else if, LF, proceed to read line routine.
   589                              <1>     ;Else, advance ptr by one and proceed to process char
   590                              <1> .endCommandClear:
   591 000008B7 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into rbx
   592 000008BB B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   593 000008C0 B901000000          <1>     mov ecx, 1  ;Read one byte to clear the LF from the file
   594 000008C5 CD41                <1>     int 41h
   595 000008C7 723F                <1>     jc .stopProcessError
   596 000008C9 85C0                <1>     test eax, eax   ;If no chars were read, exit!
   597 000008CB 0F841C060000        <1>     jz .cfgExit
   598                              <1>     ;Do a trash check
   599 000008D1 8A02                <1>     mov al, byte [rdx]
   600 000008D3 3C1A                <1>     cmp al, EOF
   601 000008D5 0F8412060000        <1>     je .cfgExit
   602 000008DB 3C0A                <1>     cmp al, LF
   603 000008DD 0F8404FFFFFF        <1>     je .nextChar
   604 000008E3 E928FFFFFF          <1>     jmp .notEOF
   605                              <1> ;CONFIG.SYS utility functions
   606                              <1> .gotoNextCmd:
   607 000008E8 0FB607              <1>     movzx eax, byte [rdi]
   608 000008EB 0503000000          <1>     add eax, 3
   609 000008F0 4801C7              <1>     add rdi, rax
   610 000008F3 E96AFFFFFF          <1>     jmp .cmdSearch
   611                              <1> .isCharTerminal:
   612                              <1> ;Input: AL = Char to check
   613                              <1> ;Output: ZF=ZE -> Char terminal
   614                              <1> ;        ZF=NZ -> Char not terminal
   615 000008F8 3C3D                <1>     cmp al, "="
   616                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000008FA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000008FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   617 000008FD 3C20                <1>     cmp al, SPC
   618                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000008FF 74(FC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   619 00000901 3C09                <1>     cmp al, TAB
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000903 74(FC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 00000905 3C3B                <1>     cmp al, ";"
   622                              <1>     return
    13                              <2> %%_ret:
    14 00000907 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .stopProcessError:
   624 00000908 E836000000          <1>     call .badLineErrorMsg
   625                              <1>     ;Reset all values to OEM defaults
   626 0000090D 0FB605DE0C0000      <1>     movzx eax, byte [BUFFERS]
   627 00000914 488945F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rax
   628 00000918 0FB605D20C0000      <1>     movzx eax, byte [FILES]
   629 0000091F 488945F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rax
   630 00000923 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   631 0000092B 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   632 00000933 0FB605BA0C0000      <1>     movzx eax, byte [LASTDRIVE]
   633 0000093A 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
   634 0000093E E9AA050000          <1>     jmp .cfgExit
   635                              <1>     
   636                              <1> .badLineErrorMsg:
   637                              <1> ;Prints an error message BUT DOES NOT TERMINATE PARSING
   638 00000943 50                  <1>     push rax
   639 00000944 52                  <1>     push rdx
   640 00000945 488D150A000000      <1>     lea rdx, .speLine
   641 0000094C B800090000          <1>     mov eax, 0900h
   642 00000951 CD41                <1>     int 41h
   643 00000953 5A                  <1>     pop rdx
   644 00000954 58                  <1>     pop rax
   645                              <1>     return
    13                              <2> %%_ret:
    14 00000955 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646 00000956 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
   646 0000095F 6E6973656420636F6D- <1>
   646 00000968 6D616E6420696E2043- <1>
   646 00000971 4F4E4649472E535953- <1>
   646 0000097A 0D0A24              <1>
   647                              <1> .keyTbl: 
   648 0000097D 05425245414B        <1>     db 5, "BREAK"           ;DONE
   649 00000983 7800                <1> 	dw .breakHandler - .keyTbl
   650 00000985 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
   651 0000098D AE00                <1> 	dw .bufHandler - .keyTbl
   652 0000098F 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
   653 00000997 6F05                <1> 	dw .countryScan - .keyTbl
   654 00000999 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
   655 000009A0 2B01                <1> 	dw .drvLoader - .keyTbl
   656 000009A2 0446434253          <1> 	db 4, "FCBS"            ;Ignored for now
   657 000009A7 6F05                <1> 	dw .fcbHandler - .keyTbl
   658 000009A9 0546494C4553        <1> 	db 5, "FILES"           ;DONE
   659 000009AF 6804                <1> 	dw .sftHandler - .keyTbl
   660 000009B1 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
   660 000009BA 45                  <1>
   661 000009BB 1D05                <1> 	dw .lastdriveHandler - .keyTbl
   662 000009BD 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
   663 000009C3 6F05                <1> 	dw .shellHandler - .keyTbl
   664 000009C5 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
   665 000009CC 6F05                <1> 	dw .stacksHandler - .keyTbl
   666 000009CE 08445249565041524D  <1>     db 8, "DRIVPARM"
   667 000009D7 6F05                <1>     dw .drivParm - .keyTbl  ;Ignored for now
   668 000009D9 FF                  <1> 	db -1	;End of table marker
   669                              <1> .cfgSkipLeadingSpaces:
   670                              <1> ;Input: rsi -> Start of string to skip spaces of
   671                              <1> ;Output: rsi -> First non-space char in string
   672 000009DA 50                  <1>     push rax
   673 000009DB 51                  <1>     push rcx
   674 000009DC 57                  <1>     push rdi
   675 000009DD 4889F7              <1>     mov rdi, rsi
   676 000009E0 B820000000          <1>     mov eax, SPC
   677 000009E5 31C9                <1>     xor ecx, ecx
   678 000009E7 FFC9                <1>     dec ecx
   679 000009E9 F3AE                <1>     repe scasb  ;
   680 000009EB 4889FE              <1>     mov rsi, rdi
   681 000009EE 5F                  <1>     pop rdi
   682 000009EF 59                  <1>     pop rcx
   683 000009F0 58                  <1>     pop rax
   684 000009F1 48FFCE              <1>     dec rsi
   685                              <1>     return
    13                              <2> %%_ret:
    14 000009F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   686                              <1> 
   687                              <1> .breakHandler:
   688 000009F5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   689 000009F9 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
   690                              <1>     ;This must be the word ON or OFF 
   691 00000A00 E8D5FFFFFF          <1>     call .cfgSkipLeadingSpaces
   692 00000A05 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
   693 00000A07 66813E4F4E          <1>     cmp word [rsi], "ON"
   694 00000A0C 7413                <1>     je .breakOn
   695 00000A0E 66813E4F46          <1>     cmp word [rsi], "OF"
   696 00000A13 7506                <1>     jne .breakBad
   697 00000A15 807E0246            <1>     cmp byte [rsi + 2], "F"
   698 00000A19 7408                <1>     je .breakCommon
   699                              <1> .breakBad:
   700 00000A1B E823FFFFFF          <1>     call .badLineErrorMsg
   701                              <1>     return
    13                              <2> %%_ret:
    14 00000A20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   702                              <1> .breakOn:
   703 00000A21 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
   704                              <1> .breakCommon:
   705 00000A23 B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
   706 00000A28 CD41                <1>     int 41h
   707                              <1>     return
    13                              <2> %%_ret:
    14 00000A2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   708                              <1> 
   709                              <1> .bufHandler:
   710 00000A2B 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   711 00000A2F 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
   712                              <1>     ;This must be at most three digits, anything else is a failure
   713 00000A36 E89FFFFFFF          <1>     call .cfgSkipLeadingSpaces
   714 00000A3B 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
   715 00000A3E 31C9                <1>     xor ecx, ecx
   716 00000A40 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
   717 00000A41 3C30                <1>     cmp al, "0"
   718 00000A43 724C                <1>     jb .bufHandlerErr
   719 00000A45 3C39                <1>     cmp al, "9"
   720 00000A47 7748                <1>     ja .bufHandlerErr
   721 00000A49 FFC1                <1>     inc ecx ;Increment char counter
   722 00000A4B AC                  <1>     lodsb   ;Get second char
   723 00000A4C E846000000          <1>     call .bufHandlerTermCheck
   724 00000A51 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
   725 00000A53 3C30                <1>     cmp al, "0"
   726 00000A55 723A                <1>     jb .bufHandlerErr
   727 00000A57 3C39                <1>     cmp al, "9"
   728 00000A59 7736                <1>     ja .bufHandlerErr
   729 00000A5B AC                  <1>     lodsb   ;Check no more chars!
   730 00000A5C E836000000          <1>     call .bufHandlerTermCheck
   731 00000A61 752E                <1>     jne .bufHandlerErr
   732                              <1> .bufHandlerProcess:
   733 00000A63 31D2                <1>     xor edx, edx    ;Accumulate value in edx
   734 00000A65 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
   735                              <1> .bufHandlerLp:
   736 00000A68 AC                  <1>     lodsb   ;Get the digit
   737 00000A69 E819000000          <1>     call .bufHandlerMul
   738 00000A6E 67E304              <1>     jecxz .bufHandlerPrepExit
   739 00000A71 FFC9                <1>     dec ecx
   740 00000A73 EBF3                <1>     jmp short .bufHandlerLp 
   741                              <1> .bufHandlerPrepExit:
   742                              <1> ;edx has the value now, so place it in stack
   743 00000A75 0FB60D760B0000      <1>     movzx ecx, byte [BUFFERS]
   744 00000A7C 85D2                <1>     test edx, edx
   745 00000A7E 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
   746 00000A81 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
   747 00000A85 F8                  <1>     clc
   748                              <1>     return
    13                              <2> %%_ret:
    14 00000A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> .bufHandlerMul:
   750 00000A87 2C30                <1>     sub al, "0" ;Convert to a binary value
   751 00000A89 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
   752 00000A8B 0FB7C0              <1>     movzx eax, ax
   753 00000A8E 01C2                <1>     add edx, eax
   754                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> .bufHandlerErr:
   756 00000A91 E8ADFEFFFF          <1>     call .badLineErrorMsg
   757                              <1>     return
    13                              <2> %%_ret:
    14 00000A96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> .bufHandlerTermCheck:
   759 00000A97 3C20                <1>     cmp al, SPC
   760                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A99 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   761 00000A9B 3C09                <1>     cmp al, TAB
   762                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A9D 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00000A9F 3C0D                <1>     cmp al, CR
   764                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA1 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   765 00000AA3 3C0A                <1>     cmp al, LF
   766                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000AA5 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767                              <1>     return
    13                              <2> %%_ret:
    14 00000AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   768                              <1> 
   769                              <1> ;===============================
   770                              <1> ;   Device Driver Loader here  :
   771                              <1> ;===============================
   772                              <1> .drvLoader:
   773                              <1> ;    mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
   774 00000AA8 488B7DB0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
   775 00000AAC 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
   776 00000AB3 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
   777 00000AB6 B820000000          <1>     mov eax, SPC
   778 00000ABB 51                  <1>     push rcx
   779 00000ABC 31C9                <1>     xor ecx, ecx
   780 00000ABE FFC9                <1>     dec ecx
   781 00000AC0 F3AE                <1>     repe scasb      ;Skip leading spaces for name (between = and first char)
   782 00000AC2 59                  <1>     pop rcx
   783                              <1> ;Now search for the first char after pathname. 
   784 00000AC3 4889FE              <1>     mov rsi, rdi
   785                              <1> .drvFindEndOfFileName:
   786 00000AC6 AC                  <1>     lodsb ;Get char from string name
   787                              <1>     ;Was the char a primitive string terminator?
   788 00000AC7 3C20                <1>     cmp al, SPC
   789 00000AC9 740C                <1>     je short .fileNameFound
   790 00000ACB 3C1A                <1>     cmp al, EOF
   791 00000ACD 7408                <1>     je short .fileNameFound
   792 00000ACF 3C0D                <1>     cmp al, CR
   793 00000AD1 7404                <1>     je short .fileNameFound
   794 00000AD3 3C0A                <1>     cmp al, LF
   795 00000AD5 75EF                <1>     jne short .drvFindEndOfFileName
   796                              <1> .fileNameFound:
   797 00000AD7 48FFCE              <1>     dec rsi ;Point rdi to the space itself
   798 00000ADA 488975A8            <1>     mov qword [rbp - cfgFrame.driverBreak], rsi
   799 00000ADE 0FB606              <1>     movzx eax, byte [rsi]   ;Get the original breakchar
   800 00000AE1 488945A0            <1>     mov qword [rbp - cfgFrame.breakChar], rax  ;And save it
   801 00000AE5 C60600              <1>     mov byte [rsi], 0   ;Null terminate the path to the file
   802                              <1>     ;rdx -> Filename
   803                              <1>     ;Here open the file to attempt to see how much space to 
   804                              <1>     ; allocate to the file for loading. 
   805                              <1>     ;Consider using the 4B01h loading mode instead and swapping back
   806                              <1>     ; the current DTA and PSP to DOS default? This gives each driver a PSP
   807                              <1>     ; which would allow for opening of files independently of calling programs'
   808                              <1>     ; file table... maybe try it after getting 4B03h load to work first!
   809 00000AE8 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
   810 00000AED CD41                <1>     int 41h
   811 00000AEF 0F82B4020000        <1>     jc .drvBad
   812 00000AF5 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
   813 00000AF8 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
   814 00000AFA B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
   815 00000AFF CD41                <1>     int 41h
   816 00000B01 89C6                <1>     mov esi, eax    ;Save the file size in esi
   817 00000B03 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
   818 00000B05 B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
   819 00000B0A CD41                <1>     int 41h
   820 00000B0C 53                  <1>     push rbx        ;Push the file handle on the stack
   821 00000B0D BB06000000          <1>     mov ebx, 6      ;6 paragraphs (96 bytes)
   822 00000B12 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   823 00000B17 CD41                <1>     int 41h
   824 00000B19 5B                  <1>     pop rbx         ;Get the handle back in rbx
   825 00000B1A 0F8299020000        <1>     jc .drvMemClose
   826 00000B20 4889C2              <1>     mov rdx, rax    ;Get pointer to memory in rdx
   827 00000B23 B940000000          <1>     mov ecx, imageDosHdr_size
   828 00000B28 B8003F0000          <1>     mov eax, 3F00h  ;READ
   829 00000B2D CD41                <1>     int 41h
   830 00000B2F 4989D0              <1>     mov r8, rdx     ;Store the pointer to the memory block in r8 if need to free
   831 00000B32 4889D7              <1>     mov rdi, rdx    ;Get pointer to the EXE header
   832 00000B35 730C                <1>     jnc short .headerReadOK
   833                              <1> .drvFreeMemAndHdl: ;Frees the block and then handle
   834                              <1>     ;r8 must point to the block to free
   835 00000B37 B800490000          <1>     mov eax, 4900h  ;Free the block first!
   836 00000B3C CD41                <1>     int 41h
   837 00000B3E E95F020000          <1>     jmp .drvBadClose
   838                              <1> .headerReadOK:
   839                              <1> ;Use register r10 as the indicator for .COM or .EXE. Set if COM.
   840 00000B43 4889D7              <1>     mov rdi, rdx    ;Save the pointer in rdi
   841                              <1>     ;First check this file is MZ/ZM. If this is not, we assume its a .COM driver
   842 00000B46 66813F4D5A          <1>     cmp word [rdi], dosMagicSignature
   843 00000B4B 7430                <1>     je short .exeDrivers
   844 00000B4D 66813F5A4D          <1>     cmp word [rdi], dosMagicSignature2
   845 00000B52 7429                <1>     je short .exeDrivers
   846                              <1> ;.COM drivers come down here
   847                              <1>     ;Get File Image Allocation Size in ecx here.
   848                              <1>     ;Must be leq than 64Kb, rounded to nearest paragraph if .COM
   849 00000B54 31C9                <1>     xor ecx, ecx
   850 00000B56 31D2                <1>     xor edx, edx
   851 00000B58 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end of the file
   852 00000B5D CD41                <1>     int 41h
   853                              <1>     ;eax now has the filesize. 
   854 00000B5F 89C1                <1>     mov ecx, eax
   855 00000B61 81E1F0FFFFFF        <1>     and ecx, ~0Fh   ;Clear lower byte
   856 00000B67 81C101000000        <1>     add ecx, 1h     ;... and round up!
   857 00000B6D C1E904              <1>     shr ecx, 4      ;Convert to paragraphs
   858 00000B70 81F900000100        <1>     cmp ecx, 10000h ;Is it greater than 64k?
   859 00000B76 73BF                <1>     jae .drvFreeMemAndHdl
   860 00000B78 E97C000000          <1>     jmp .loadCont
   861                              <1> .exeDrivers:
   862                              <1>     ;Get the file pointer for file header
   863 00000B7D 8B573C              <1>     mov edx, dword [rdi + imageDosHdr.e_lfanew] ;Get this file offset
   864 00000B80 31C9                <1>     xor ecx, ecx
   865 00000B82 B800420000          <1>     mov eax, 4200h  ;LSEEK from the start of the file
   866 00000B87 CD41                <1>     int 41h
   867                              <1>     ;Now read in imageFileHeader here
   868 00000B89 4889FA              <1>     mov rdx, rdi    ;Overwrite the 16-bit header
   869 00000B8C B918000000          <1>     mov ecx, imageFileHeader_size   ;Read the header
   870 00000B91 B8003F0000          <1>     mov eax, 3F00h  ;READ
   871 00000B96 CD41                <1>     int 41h
   872 00000B98 729D                <1>     jc short .drvFreeMemAndHdl
   873 00000B9A 3D18000000          <1>     cmp eax, imageFileHeader_size   ;If fewer bytes were read, fail
   874 00000B9F 7296                <1>     jb short .drvFreeMemAndHdl
   875 00000BA1 813F50450000        <1>     cmp dword [rdi + imageFileHeader.dPESignature], imagePESignature
   876 00000BA7 758E                <1>     jne .drvFreeMemAndHdl
   877 00000BA9 66817F046486        <1>     cmp word [rdi + imageFileHeader.wMachineType], imageFileMachineAMD64
   878 00000BAF 7586                <1>     jne .drvFreeMemAndHdl
   879 00000BB1 66817F143C00        <1>     cmp word [rdi + imageFileHeader.wSizeOfOptionalHdr], 60
   880 00000BB7 0F827AFFFFFF        <1>     jb .drvFreeMemAndHdl ;We need section alignment info if a .EXE!
   881                              <1>     ;Now read the first 60 bytes of the optional header here. rdx points to buffer
   882 00000BBD B93C000000          <1>     mov ecx, 60     ;Read only 60 bytes
   883 00000BC2 B8003F0000          <1>     mov eax, 3F00h  ;READ
   884 00000BC7 CD41                <1>     int 41h
   885 00000BC9 0F8268FFFFFF        <1>     jc .drvFreeMemAndHdl   ;If something goes wrong, skip
   886 00000BCF 3D38000000          <1>     cmp eax, 56
   887 00000BD4 0F825DFFFFFF        <1>     jb .drvFreeMemAndHdl   ;If fewer than 60 bytes read, skip
   888                              <1>     ;Round up size requirement.
   889                              <1>     ;If .EXE, round up to nearest section alignment
   890 00000BDA 8B4F38              <1>     mov ecx, dword [rdi + imageFileOptionalHeader.dSizeOfImage] ;Get mem alloc size
   891 00000BDD 8B4720              <1>     mov eax, dword [rdi + imageFileOptionalHeader.dSectionAlignment]
   892 00000BE0 89C6                <1>     mov esi, eax    ;Save in esi the alignment requirement
   893 00000BE2 FFC8                <1>     dec eax         ;Set bits to strip, clear all other bits
   894 00000BE4 F7D0                <1>     not eax         ;Flip the set and clear bits
   895 00000BE6 21C1                <1>     and ecx, eax    ;Now clear the bits to clear from size, aligning downwards
   896 00000BE8 01F1                <1>     add ecx, esi    ;Now round upwards!
   897 00000BEA C1E904              <1>     shr ecx, 4      ;Convert to number of paragraphs.
   898 00000BED 81F900000020        <1>     cmp ecx, 20000000h  ;Drivers cannot be more than 2Gb in size.
   899 00000BF3 0F833EFFFFFF        <1>     jae .drvFreeMemAndHdl
   900                              <1> .loadCont:
   901 00000BF9 B800490000          <1>     mov eax, 4900h  ;FREE -> Free the 6 paragraph header buffer.
   902 00000BFE CD41                <1>     int 41h ;r8 has the pointer to the block for freeing
   903                              <1>     ;Now close the file
   904 00000C00 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
   905 00000C05 CD41                <1>     int 41h
   906 00000C07 89CB                <1>     mov ebx, ecx    ;Put the number of paragraphs in ebx
   907 00000C09 B800480000          <1>     mov eax, 4800h  ;Allocate this block of memory
   908 00000C0E CD41                <1>     int 41h         ;rax gets the pointer to load the program into
   909 00000C10 0F82A3010000        <1>     jc .drvMemClose
   910                              <1>     ;Now set the subsystem marker and the owner to DOS
   911 00000C16 C640FD44            <1>     mov byte [rax - mcb_size + mcb.subSysMark], mcbSubDriver  ;Mark as occupied by driver
   912 00000C1A 48C740F109000000    <1>     mov qword [rax - mcb_size + mcb.owner], mcbOwnerNewDOS
   913                              <1>     ;Build the overlay command block
   914 00000C22 488D1DA8050000      <1>     lea rbx, cmdBlock
   915 00000C29 488903              <1>     mov qword [rbx + loadOvly.pLoadLoc], rax
   916 00000C2C 48894308            <1>     mov qword [rbx + loadOvly.qRelocFct], rax
   917 00000C30 488B55B0            <1>     mov rdx, qword [rbp - cfgFrame.linePtr] ;Get the pointer to the 
   918 00000C34 4881C207000000      <1>     add rdx, 7  ;Go past DEVICE= to the null terminated pathname
   919 00000C3B B8034B0000          <1>     mov eax, 4B03h  ;Load overlay!
   920 00000C40 CD41                <1>     int 41h
   921 00000C42 733E                <1>     jnc short .loadOk   ;Driver loaded and unpacked. Now we get going...
   922                              <1> .badDriverLoad:
   923 00000C44 4C8B0586050000      <1>     mov r8, qword [cmdBlock + loadOvly.pLoadLoc] ;Get the address of this 
   924 00000C4B B800490000          <1>     mov eax, 4900h  ;FREE -> Free the space where the program shouldve gone
   925 00000C50 CD41                <1>     int 41h
   926 00000C52 488D1508000000      <1>     lea rdx, .drvMemMsg
   927 00000C59 B800090000          <1>     mov eax, 0900h
   928 00000C5E CD41                <1>     int 41h
   929                              <1>     return
    13                              <2> %%_ret:
    14 00000C60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   930 00000C61 0D0A4E6F7420656E6F- <1> .drvMemMsg: db CR,LF,"Not enough memory for driver",CR,LF,"$" 
   930 00000C6A 756768206D656D6F72- <1>
   930 00000C73 7920666F7220647269- <1>
   930 00000C7C 7665720D0A24        <1>
   931                              <1> .loadOk:
   932                              <1>     ;Use driver load routines. Get the first byte of the MCB (where prog is loaded).
   933 00000C82 488B33              <1>     mov rsi, qword [rbx + loadOvly.pLoadLoc]
   934 00000C85 4989F0              <1>     mov r8, rsi  ;Get the pointer to the MCB arena in r8 for later!
   935                              <1>     ;Reset the command line to have a space at the null terminator
   936 00000C88 488B45A8            <1>     mov rax, qword [rbp - cfgFrame.driverBreak]
   937 00000C8C 53                  <1>     push rbx
   938 00000C8D 8A5DA0              <1>     mov bl, byte [rbp - cfgFrame.breakChar] ;Get the original breakchar
   939 00000C90 8818                <1>     mov byte [rax], bl  ;and replace the null terminator
   940 00000C92 5B                  <1>     pop rbx
   941                              <1>     ;Remember, the first byte of the overlay is the driver header. 
   942                              <1>     ;Hence, rsi points to that byte!
   943                              <1>     ;Pointers of each header need adjustment relative to their load address,
   944                              <1>     ; and linking into the main driver chain after NUL.
   945                              <1>     ;r11 = Local var, if no drivers in file passed init, free allocation.
   946                              <1>     ;                 Else, free using kernel eject routine.
   947 00000C93 56                  <1>     push rsi    ;Save the pointer to the first pointer to adjust
   948                              <1> .driverPtrAdjustment:
   949 00000C94 4801760A            <1>     add qword [rsi + drvHdr.strPtr], rsi
   950 00000C98 48017612            <1>     add qword [rsi + drvHdr.intPtr], rsi
   951 00000C9C 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1
   952 00000CA3 7408                <1>     je short .driverPtrAdjustmentDone
   953 00000CA5 480136              <1>     add qword [rsi + drvHdr.nxtPtr], rsi
   954 00000CA8 488B36              <1>     mov rsi, qword [rsi + drvHdr.nxtPtr]
   955 00000CAB EBE7                <1>     jmp short .driverPtrAdjustment
   956                              <1> .driverPtrAdjustmentDone:
   957 00000CAD 5E                  <1>     pop rsi     ;Get back the pointer to the first driver header
   958                              <1>     ;Prepare for initialising the drivers in the arena
   959                              <1>     ;EXPERIMENT: USING R9-R11 UNTIL THE END OF THE FUNCTION
   960 00000CAE 4989F1              <1>     mov r9, rsi     ;Save a copy of the driver pointer in r9
   961 00000CB1 49BB09000000000000- <1>     mov r11, mcbOwnerNewDOS ;Set currentPSP for new dos object
   961 00000CBA 00                  <1>
   962 00000CBB 644C871C25-         <1>     xchg r11, qword fs:[currentPSP] ;Save in r11 old owner
   962 00000CC0 [1F040000]          <1>
   963 00000CC4 488D1D3F090000      <1>     lea rbx, initDrvBlk
   964 00000CCB 488B45B0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
   965 00000CCF 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax ;and pass to driver!
   966 00000CD3 4C8B6500            <1>     mov r12, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG in r12
   967                              <1> .driverInit:
   968 00000CD7 4C87E5              <1>     xchg r12, rbp
   969 00000CDA E8F7070000          <1>     call initDriver
   970 00000CDF 725E                <1>     jc short .driverBadRbpAdjust
   971 00000CE1 E8BA060000          <1>     call addDriverMarkers
   972 00000CE6 4C87E5              <1>     xchg r12, rbp
   973 00000CE9 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   974 00000CEF 7507                <1>     jnz short .driverInitialised
   975 00000CF1 E84E080000          <1>     call buildDPBs          ;Preserves rbp, rsi and rbx
   976 00000CF6 724A                <1>     jc short .driverBad
   977                              <1> .driverInitialised:
   978 00000CF8 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1     ;We at the end of the chain?
   979 00000CFF 480F4536            <1>     cmovne rsi, qword [rsi + drvHdr.nxtPtr]    ;Walk rsi if not
   980 00000D03 75D2                <1>     jne short .driverInit ;If not, goto next driver
   981                              <1> ;Now we eject the init routines for the driver
   982                              <1> ;r8 points to the MCB data area already
   983 00000D05 31DB                <1>     xor ebx, ebx
   984 00000D07 418B58F9            <1>     mov ebx, dword [r8 - mcb_size + mcb.blockSize] ;Get the size of the arena in paragraphs
   985 00000D0B 48C1E304            <1>     shl rbx, 4  ;Turn into number of bytes
   986 00000D0F 4981E810000000      <1>     sub r8, mcb_size    ;Point to the mcb header proper
   987 00000D16 498D5C1810          <1>     lea rbx, qword [r8 + rbx + mcb.program] ;Get pointer to the end of the arena
   988 00000D1B E865070000          <1>     call ejectKernelInit    ;Ignore any errors in ejection.
   989                              <1>     ;Link into main driver chain, 
   990                              <1>     ;r9 points to first driver in block
   991                              <1>     ;rsi points to last driver in block
   992 00000D20 488B7D00            <1>     mov rdi, qword [rbp - cfgFrame.oldRBP]  ;Get DOSSEG ptr
   993 00000D24 488DBF[7A000000]    <1>     lea rdi, qword [rdi + nulDevHdr] ;Get ptr to first driver
   994 00000D2B 488B07              <1>     mov rax, qword [rdi + drvHdr.nxtPtr]    ;Get the link
   995 00000D2E 4C890F              <1>     mov qword [rdi + drvHdr.nxtPtr], r9     ;Link new drivers in
   996 00000D31 488906              <1>     mov qword [rsi + drvHdr.nxtPtr], rax    ;Link end to old chain
   997                              <1> .driverExit:
   998                              <1> ;Exit the init routine if it all works out, WOO!
   999                              <1> ;Return values to original registers/memory locations
  1000 00000D34 644C891C25-         <1>     mov qword fs:[currentPSP], r11
  1000 00000D39 [1F040000]          <1>
  1001 00000D3D F8                  <1>     clc
  1002                              <1>     return
    13                              <2> %%_ret:
    14 00000D3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1003                              <1> .driverBadRbpAdjust:
  1004 00000D3F 4C89E5              <1>     mov rbp, r12
  1005                              <1> .driverBad:
  1006                              <1>     ;Form the string to print
  1007 00000D42 488D3D4E000000      <1>     lea rdi, .driverBad2    ;Store the name here
  1008 00000D49 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar ;Are we a char dev?
  1009 00000D4F 750C                <1>     jnz short .driverCharBad    ;If not, exit
  1010                              <1>     ;MSD devices need to have something placed in there
  1011 00000D51 48B84D534420646576- <1>     mov rax, "MSD dev "
  1011 00000D5A 20                  <1>
  1012 00000D5B 48AB                <1>     stosq   ;Store the 8 chars here
  1013                              <1> .driverCharBad:
  1014 00000D5D 488D761A            <1>     lea rsi, qword [rsi + drvHdr.drvNam]    ;Copy the device driver name over
  1015 00000D61 48A5                <1>     movsq   ;Move all 8 chars over from device driver name
  1016                              <1> .driverBadPrint:
  1017 00000D63 488D1510000000      <1>     lea rdx, .driverBad1
  1018 00000D6A B800090000          <1>     mov eax, 0900h  ;Print the string!
  1019 00000D6F CD41                <1>     int 41h
  1020 00000D71 B800490000          <1>     mov eax, 4900h  ;Attempt to deallocate the driver now
  1021 00000D76 CD41                <1>     int 41h
  1022 00000D78 EBBA                <1>     jmp short .driverExit
  1023 00000D7A 0D0A4572726F722069- <1> .driverBad1 db CR,LF,"Error initialising driver: "
  1023 00000D83 6E697469616C697369- <1>
  1023 00000D8C 6E6720647269766572- <1>
  1023 00000D95 3A20                <1>
  1024 00000D97 20202020202020200D- <1> .driverBad2 db "        ",CR,LF,"$"
  1024 00000DA0 0A24                <1>
  1025                              <1> ;------------------
  1026                              <1> ;Bad exit cases
  1027                              <1> ;------------------
  1028                              <1> .drvBadClose:
  1029 00000DA2 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1030 00000DA7 CD41                <1>     int 41h
  1031                              <1> .drvBad:
  1032 00000DA9 488D1519000000      <1>     lea rdx, .drvBadMsg
  1033                              <1> .drvBad2:
  1034 00000DB0 B800090000          <1>     mov eax, 0900h
  1035 00000DB5 CD41                <1>     int 41h
  1036 00000DB7 F8                  <1>     clc ;Never return with CF=CY
  1037                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> .drvMemClose:
  1039 00000DB9 B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1040 00000DBE CD41                <1>     int 41h
  1041 00000DC0 488D159AFEFFFF      <1>     lea rdx, .drvMemMsg
  1042 00000DC7 EBE7                <1>     jmp short .drvBad2
  1043                              <1> 
  1044 00000DC9 0D0A426164206F7220- <1> .drvBadMsg: db CR,LF,"Bad or missing filename",CR,LF,"$"
  1044 00000DD2 6D697373696E672066- <1>
  1044 00000DDB 696C656E616D650D0A- <1>
  1044 00000DE4 24                  <1>
  1045                              <1> 
  1046                              <1> .sftHandler:
  1047                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1048 00000DE5 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1049 00000DE9 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1050 00000DF0 E8E5FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1051                              <1>     ;This must be at most three digits, anything else is a failure
  1052 00000DF5 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1053 00000DF8 31C9                <1>     xor ecx, ecx
  1054 00000DFA AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1055 00000DFB 3C30                <1>     cmp al, "0"
  1056 00000DFD 0F8280000000        <1>     jb .sftHandlerErr
  1057 00000E03 3C39                <1>     cmp al, "9"
  1058 00000E05 777C                <1>     ja .sftHandlerErr
  1059 00000E07 FFC1                <1>     inc ecx ;Increment char counter
  1060 00000E09 AC                  <1>     lodsb   ;Get second char
  1061 00000E0A E87A000000          <1>     call .sftHandlerTermCheck
  1062 00000E0F 7424                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1063 00000E11 3C30                <1>     cmp al, "0"
  1064 00000E13 726E                <1>     jb .sftHandlerErr
  1065 00000E15 3C39                <1>     cmp al, "9"
  1066 00000E17 776A                <1>     ja .sftHandlerErr
  1067 00000E19 FFC1                <1>     inc ecx ;Increment char counter
  1068 00000E1B AC                  <1>     lodsb   ;Get third char
  1069 00000E1C E868000000          <1>     call .sftHandlerTermCheck
  1070 00000E21 7412                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1071 00000E23 3C30                <1>     cmp al, "0"
  1072 00000E25 725C                <1>     jb .sftHandlerErr
  1073 00000E27 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1074 00000E29 7758                <1>     ja .sftHandlerErr
  1075 00000E2B AC                  <1>     lodsb   ;Check no more chars!
  1076 00000E2C E858000000          <1>     call .sftHandlerTermCheck
  1077 00000E31 7550                <1>     jne .sftHandlerErr
  1078 00000E33 FFC1                <1>     inc ecx ;Increment char counter
  1079                              <1> .sftHandlerProcess:
  1080 00000E35 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1081 00000E37 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1082                              <1> .sftHandlerLp:
  1083 00000E3A FFC9                <1>     dec ecx
  1084 00000E3C AC                  <1>     lodsb   ;Get the digit
  1085 00000E3D E819000000          <1>     call .sftHandlerMul
  1086 00000E42 67E302              <1>     jecxz .sftHandlerPrepExit
  1087 00000E45 EBF3                <1>     jmp short .sftHandlerLp 
  1088                              <1> .sftHandlerPrepExit:
  1089                              <1> ;edx has the value now, so place it in stack
  1090 00000E47 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1091 00000E4C 81FA08000000        <1>     cmp edx, 8
  1092 00000E52 0F42D1              <1>     cmovb edx, ecx
  1093 00000E55 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1094 00000E59 F8                  <1>     clc
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00000E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> .sftHandlerMul:
  1097                              <1> ;Input:
  1098                              <1> ;al = digit to add to result (ASCII digit)
  1099                              <1> ;ecx = whether al is a unit (0), ten (1) or hundred (2)
  1100                              <1> ;rdx = Accumulated sum
  1101                              <1> ;Output:
  1102                              <1> ;rdx = Accumulated sum with al added
  1103                              <1> ;eax is destroyed
  1104                              <1> ;All other registers preserved
  1105 00000E5B 51                  <1>     push rcx
  1106 00000E5C 52                  <1>     push rdx
  1107 00000E5D 0FB6C0              <1>     movzx eax, al
  1108 00000E60 2D30000000          <1>     sub eax, '0' ;Convert to a binary digit
  1109 00000E65 BA01000000          <1>     mov edx, 1    ;Get 1 in edx (multiplicative unit)
  1110 00000E6A 39D1                <1>     cmp ecx, edx  ;Was cl a ten?
  1111 00000E6C BB0A000000          <1>     mov ebx, 10     ;Default base offset to 10
  1112 00000E71 B964000000          <1>     mov ecx, 100
  1113 00000E76 0F42DA              <1>     cmovb ebx, edx  ;If below, it was a unit
  1114 00000E79 0F47D9              <1>     cmova ebx, ecx  ;If above, it was a hundred
  1115 00000E7C F7E3                <1>     mul ebx    ;Multiply the base offset to eax
  1116 00000E7E 5A                  <1>     pop rdx ;Get the accumulated value back
  1117 00000E7F 01C2                <1>     add edx, eax    ;Add this result over
  1118 00000E81 59                  <1>     pop rcx
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00000E82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> .sftHandlerErr:
  1121 00000E83 E8BBFAFFFF          <1>     call .badLineErrorMsg
  1122                              <1>     return
    13                              <2> %%_ret:
    14 00000E88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1123                              <1> .sftHandlerTermCheck:
  1124 00000E89 3C20                <1>     cmp al, SPC
  1125                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E8B 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1126 00000E8D 3C09                <1>     cmp al, TAB
  1127                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E8F 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1128 00000E91 3C0D                <1>     cmp al, CR
  1129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E93 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1130 00000E95 3C0A                <1>     cmp al, LF
  1131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000E97 74(88)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1132                              <1>     return
    13                              <2> %%_ret:
    14 00000E99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1133                              <1> 
  1134                              <1> .lastdriveHandler:
  1135 00000E9A 488B75B0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1136 00000E9E 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1137 00000EA5 E830FBFFFF          <1>     call .cfgSkipLeadingSpaces
  1138 00000EAA AC                  <1>     lodsb   ;Get this char
  1139 00000EAB 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1140 00000EAE 50                  <1>     push rax    ;Push on stack
  1141 00000EAF B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1142 00000EB4 CD4F                <1>     int 4Fh
  1143 00000EB6 5B                  <1>     pop rbx
  1144 00000EB7 3C5A                <1>     cmp al, "Z"
  1145 00000EB9 77C8                <1>     ja .sftHandlerErr
  1146 00000EBB 3C41                <1>     cmp al, "A"
  1147 00000EBD 72C4                <1>     jb .sftHandlerErr
  1148 00000EBF 803E0D              <1>     cmp byte [rsi], CR
  1149 00000EC2 740F                <1>     je .ldProceed
  1150 00000EC4 803E0A              <1>     cmp byte [rsi], LF
  1151 00000EC7 740A                <1>     je .ldProceed
  1152 00000EC9 803E09              <1>     cmp byte [rsi], TAB
  1153 00000ECC 7405                <1>     je .ldProceed
  1154 00000ECE 803E20              <1>     cmp byte [rsi], SPC
  1155 00000ED1 75B0                <1>     jne .sftHandlerErr
  1156                              <1> .ldProceed:
  1157 00000ED3 2C41                <1>     sub al, "A" ;Convert into a number
  1158 00000ED5 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1159 00000ED8 BA05000000          <1>     mov edx, lastDriveDeflt
  1160 00000EDD 3D05000000          <1>     cmp eax, lastDriveDeflt
  1161 00000EE2 0F42C2              <1>     cmovb eax, edx
  1162 00000EE5 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1163 00000EE9 F8                  <1>     clc
  1164                              <1>     return
    13                              <2> %%_ret:
    14 00000EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> .ldBad:
  1166 00000EEB F9                  <1>     stc
  1167                              <1> .countryScan:
  1168                              <1> .fcbHandler:
  1169                              <1> .shellHandler:
  1170                              <1> .stacksHandler:
  1171                              <1> .drivParm:
  1172                              <1>     return
    13                              <2> %%_ret:
    14 00000EEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1173                              <1> 
  1174                              <1> .cfgExit:
  1175 00000EED 488B5DC0            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1176 00000EF1 B8003E0000          <1>     mov eax, 3E00h    ;Close the handle
  1177 00000EF6 CD41                <1>     int 41h ;bx already has the handle
  1178 00000EF8 4C8B45B0            <1>     mov r8, qword [rbp - cfgFrame.linePtr]   ;Get the line buffer ptr back
  1179 00000EFC B800490000          <1>     mov eax, 4900h  ;FREE
  1180 00000F01 CD41                <1>     int 41h
  1181                              <1> ;------------------------------------------------;
  1182                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1183                              <1> ;                  CONFIG.SYS                    ;
  1184                              <1> ;------------------------------------------------;
  1185                              <1> ;Add additional buffers.
  1186                              <1> ;Add additional SFT entries.
  1187                              <1> ;Add additional FCBS.
  1188                              <1> ;Create a larger CDS if needed.
  1189                              <1> noCfg:
  1190                              <1> ;Start with buffers:
  1191 00000F03 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new number of buffers
  1192 00000F07 81F901000000        <1>     cmp ecx, 1   ;If its only one buffer, skip as we have one already
  1193 00000F0D 0F84A5000000        <1>     je .skipBuffers
  1194 00000F13 FFC9                <1>     dec ecx  ;Minus one now
  1195 00000F15 64880C25[79000000]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1196                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1197 00000F1D 640FB70425-         <1>     movzx eax, word fs:[maxBytesSec]    ;Get buffer sector size
  1197 00000F22 [5B000000]          <1>
  1198 00000F26 0530000000          <1>     add eax, bufferHdr_size ;eax has the size to add
  1199 00000F2B 50                  <1>     push rax    ;Save the total number of bytes for a buffer and its header
  1200 00000F2C F7E1                <1>     mul ecx ;Get total size to allocate in eax
  1201 00000F2E 5A                  <1>     pop rdx     ;and get the total value back in rdx
  1202 00000F2F 89C3                <1>     mov ebx, eax    ;Move the total number of bytes into ebx
  1203 00000F31 81C30F000000        <1>     add ebx, 0Fh
  1204 00000F37 C1EB04              <1>     shr ebx, 4      ;And convert it to paragraphs
  1205 00000F3A B800480000          <1>     mov eax, 4800h  ;ALLOC
  1206 00000F3F CD41                <1>     int 41h
  1207 00000F41 7275                <1>     jc short .skipBuffers   ;If it fails to allocate, default to one buffer
  1208                              <1>     ;Each buffer has no flags, drive number must be -1
  1209 00000F43 4889D3              <1>     mov rbx, rdx    ;Put the total number of bytes per buffer in rbx
  1210 00000F46 4889C7              <1>     mov rdi, rax    ;Point rdi to the new area 
  1211 00000F49 482D10000000        <1>     sub rax, mcb.program    ;Point rax to the head of the mcb
  1212 00000F4F 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Mark as owned by DOS
  1213 00000F57 C6400D42            <1>     mov byte [rax + mcb.subSysMark], mcbSubBuffers  ;Buffer buffer (funny)
  1214 00000F5B 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]  ;Get the pointer to the first buffer
  1214 00000F60 [5D000000]          <1>
  1215 00000F64 488938              <1>     mov qword [rax + bufferHdr.nextBufPtr], rdi ;And set the new next buffer to point to it
  1216 00000F67 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1217 00000F6A 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1218 00000F6C FFC9                <1>     dec ecx         ;Reduce to convert from 1 based count to 0 based
  1219 00000F6E 67E325              <1>     jecxz .lastBuffer
  1220                              <1> .bufferLoop:
  1221 00000F71 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1222 00000F74 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1223 00000F77 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1224 00000F7D 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1225 00000F81 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1226 00000F84 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1227 00000F87 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1228 00000F8B 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1229 00000F8F 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1230 00000F92 FFC9                <1>     dec ecx
  1231 00000F94 75DB                <1>     jnz .bufferLoop
  1232                              <1> .lastBuffer:
  1233 00000F96 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1234 00000F99 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1235 00000FA0 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1236 00000FA6 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1237 00000FAA 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1238 00000FAD 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1239 00000FB0 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1240 00000FB4 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1241                              <1> .skipBuffers:
  1242                              <1> ;Now build a new SFT header for the number of files specified by user
  1243 00000FB8 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1244 00000FBC 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1245 00000FC2 764F                <1>     jbe short .skipSFT
  1246                              <1>     ;First compute how big this new arena needs to be
  1247 00000FC4 81E905000000        <1>     sub ecx, 5   ;Remove the default five files that are *always* present!
  1248 00000FCA B84F000000          <1>     mov eax, sft_size
  1249 00000FCF F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1250 00000FD1 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1251 00000FD6 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1252 00000FD8 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1253 00000FDE C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1254 00000FE1 B800480000          <1>     mov eax, 4800h
  1255 00000FE6 CD41                <1>     int 41h
  1256 00000FE8 7229                <1>     jc short .skipSFT   ;Skip adding files if this fails. Sorry end user!
  1257 00000FEA 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]
  1257 00000FEF [43000000]          <1>
  1258 00000FF3 488906              <1>     mov qword [rsi + sfth.qNextSFTPtr], rax ;RAX points to the next sfth
  1259 00000FF6 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move remaining files here
  1260 00000FFA 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain    
  1261 00001001 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1262 00001007 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1263 0000100F C6400D46            <1>     mov byte [rax + mcb.subSysMark], mcbSubFiles
  1264                              <1> .skipSFT:
  1265                              <1> ;FCBS now
  1266 00001013 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1267 00001017 67E346              <1>     jecxz .skipFCBS ;Skip if no FCBS requested
  1268 0000101A B84F000000          <1>     mov eax, sft_size
  1269 0000101F F7E1                <1>     mul ecx ;Get number of files*size of file in bytes in eax
  1270 00001021 050A000000          <1>     add eax, sfth_size  ;Add the size of one SFT header
  1271 00001026 89C3                <1>     mov ebx, eax        ;And move into ebx for the syscall
  1272 00001028 81C30F000000        <1>     add ebx, 0Fh        ;Round up to nearest paragraph...
  1273 0000102E C1EB04              <1>     shr ebx, 4          ;And convert to paragraphs
  1274 00001031 B800480000          <1>     mov eax, 4800h
  1275 00001036 CD41                <1>     int 41h
  1276 00001038 7226                <1>     jc short .skipFCBS   ;Skip adding files if this fails. Sorry end user!
  1277 0000103A 6448890425-         <1>     mov qword fs:[fcbsHeadPtr], rax ;This is the FCBS head now
  1277 0000103F [6D000000]          <1>
  1278 00001043 66894808            <1>     mov word [rax + sfth.wNumFiles], cx ;Move FCBS here
  1279 00001047 48C700FFFFFFFF      <1>     mov qword [rax + sfth.qNextSFTPtr], -1  ;Last table in chain  
  1280 0000104E 482D10000000        <1>     sub rax, mcb.program    ;Point to MCB now
  1281 00001054 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS
  1282 0000105C C6400D58            <1>     mov byte [rax + mcb.subSysMark], mcbSubFCBS
  1283                              <1> .skipFCBS:
  1284                              <1> ;And CDS now
  1285 00001060 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1286 00001064 64380C25[78000000]  <1>     cmp byte fs:[lastdrvNum], cl
  1287 0000106C 731F                <1>     jae .skipCDS    ;If user specifies less than 5 drives, dont reallocate
  1288                              <1>     ;Else, we first free the old CDS and then reallocate
  1289 0000106E 644C8B0425-         <1>     mov r8, qword fs:[cdsHeadPtr]
  1289 00001073 [65000000]          <1>
  1290 00001077 B800490000          <1>     mov eax, 4900h  ;FREE the old allocation.
  1291 0000107C CD41                <1>     int 41h
  1292 0000107E 720D                <1>     jc short .skipCDS
  1293 00001080 64880C25[78000000]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1294 00001088 E864F4FFFF          <1>     call makeCDSArray
  1295                              <1> .skipCDS:
  1296 0000108D 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1297 00001090 5D                  <1>     pop rbp ;Stack frame no longer needed
  1298                              <1> ;Now we close all five default handles and open AUX, CON and PRN
  1299                              <1> ; and reopen the handles as user may have loaded new CON/AUX/PRN etc drivers
  1300 00001091 31DB                <1>     xor ebx, ebx
  1301                              <1> closeHandlesLoop:
  1302 00001093 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1303 00001098 CD41                <1>     int 41h
  1304 0000109A FFC3                <1>     inc ebx ;Goto next handle
  1305 0000109C 81FB06000000        <1>     cmp ebx, 6
  1306 000010A2 75EF                <1>     jne closeHandlesLoop
  1307 000010A4 E89A020000          <1>     call openStreams
  1308                              <1> l1:
  1309 000010A9 BB00100000          <1>     mov ebx, 1000h  ;Get a 64Kb block
  1310 000010AE B800480000          <1>     mov eax, 4800h  ;Allocate the memory block
  1311 000010B3 CD41                <1>     int 41h         ;Malloc and get pointer in rbx
  1312 000010B5 0F828F000000        <1>     jc badMem
  1313 000010BB 4889C3              <1>     mov rbx, rax    ;Get pointer to block header to set owner to DOS
  1314 000010BE 4881EB10000000      <1>     sub rbx, mcb_size
  1315 000010C5 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
  1316 000010CD 48890522050000      <1>     mov qword [OEMMEMPTR], rax   ;Save the pointer here
  1317 000010D4 4C8D054E050000      <1>     lea r8, tempPSP ;Get the DOS PSP pointer to r8
  1318 000010DB 4989C1              <1>     mov r9, rax  ;Copy the Memory arena pointer to r9
  1319                              <1>     ;Input: r8 = PSP
  1320                              <1>     ;       r9 = Memory Arena Pointer
  1321                              <1>     ;All regs must be preserved (including r9, even if you free. Dont free!)
  1322 000010DE E8100A0000          <1>     call OEMCALLBK  ;Return CF=CY if OEM wants to keep the memory block
  1323 000010E3 720E                <1>     jc short l2 
  1324 000010E5 4C8B050A050000      <1>     mov r8, qword [OEMMEMPTR]
  1325 000010EC B800490000          <1>     mov eax, 4900h  ;Free the memory block
  1326 000010F1 CD41                <1>     int 41h
  1327                              <1> l2:
  1328                              <1>     ;Load COMMAND.COM
  1329                              <1>     ;Get currentPSP ptr
  1330 000010F3 B462                <1>     mov ah, 62h ;Get current PSP ptr in rbx
  1331 000010F5 CD41                <1>     int 41h
  1332 000010F7 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1333 000010F9 CD41                <1>     int 41h
  1334 000010FB 0441                <1>     add al, "A"
  1335 000010FD 8805BF000000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1336                              <1> 
  1337 00001103 488D1DC7000000      <1>     lea rbx, cmdBlock
  1338 0000110A 488D3518050000      <1>     lea rsi, tempPSP
  1339 00001111 488D465C            <1>     lea rax, qword [rsi + psp.fcb1]
  1340 00001115 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1341 00001119 488D466C            <1>     lea rax, qword [rsi + psp.fcb2]
  1342 0000111D 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1343 00001121 488D8680000000      <1>     lea rax, qword [rsi + psp.dta]  ;Get the dummy command line ptr
  1344 00001128 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax    ;Store dummy command line here
  1345 0000112C 488D158F000000      <1>     lea rdx, cmdLine
  1346 00001133 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1347 00001138 CD41                <1>     int 41h
  1348 0000113A 488D1545000000      <1>     lea rdx, badCom
  1349 00001141 B409                <1>     mov ah, 09h ;Print message
  1350 00001143 CD41                <1>     int 41h
  1351                              <1> hltLbl:
  1352 00001145 F4                  <1>     hlt
  1353 00001146 F390                <1>     pause
  1354 00001148 EBFB                <1>     jmp short hltLbl
  1355                              <1> badMem:
  1356 0000114A 488D1509000000      <1>     lea rdx, memErr
  1357 00001151 B800090000          <1>     mov eax, 0900h
  1358 00001156 CD41                <1>     int 41h
  1359 00001158 EBEB                <1>     jmp short hltLbl
  1360 0000115A 53797374656D204D65- <1> memErr  db "System Memory Error",0Ah,0Dh,"$"
  1360 00001163 6D6F7279204572726F- <1>
  1360 0000116C 720A0D24            <1>
  1361                              <1> ;--------------------------------
  1362                              <1> ;       DATA FOR SYSINIT        :
  1363                              <1> ;--------------------------------
  1364 00001170 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1364 00001179 5343502F444F532E2E- <1>
  1364 00001182 2E0A0D24            <1>
  1365 00001186 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1365 0000118F 7373696E6720436F6D- <1>
  1365 00001198 6D616E6420696E7465- <1>
  1365 000011A1 727072657465720A0D- <1>
  1365 000011AA 24                  <1>
  1366 000011AB 434F4E00            <1> conName db "CON",0
  1367 000011AF 41555800            <1> auxName db "AUX",0
  1368 000011B3 50524E00            <1> prnName db "PRN",0
  1369                              <1> 
  1370 000011B7 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1370 000011C0 5300                <1>
  1371 000011C2 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0   ;ASCIIZ FOR COMMAND.COM
  1371 000011CB 442E434F4D00        <1>
  1372                              <1> 
  1373                              <1> cmdBlock:   ;Used also for overlay block
  1374                              <1>     istruc execProg
  1375 000011D1 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Is set to point at the above line
  1376 000011D9 0000000000000000    <1>     at execProg.pCmdLine,   dq 0    ;Points to just a 0Dh
  1377 000011E1 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1378 000011E9 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1379                              <1>     iend
  1380                              <1> exceptData:
  1381 000011F1 [3260000000000000]  <1>     dq i0
  1382 000011F9 [3960000000000000]  <1>     dq i1
  1383 00001201 [4360000000000000]  <1>     dq i2
  1384 00001209 [4D60000000000000]  <1>     dq i3
  1385 00001211 [5760000000000000]  <1>     dq i4
  1386 00001219 [6160000000000000]  <1>     dq i5
  1387 00001221 [6860000000000000]  <1>     dq i6
  1388 00001229 [6F60000000000000]  <1>     dq i7
  1389 00001231 [7660000000000000]  <1>     dq i8
  1390 00001239 [7D60000000000000]  <1>     dq i9
  1391 00001241 [8460000000000000]  <1>     dq i10
  1392 00001249 [8B60000000000000]  <1>     dq i11
  1393 00001251 [9260000000000000]  <1>     dq i12
  1394 00001259 [9960000000000000]  <1>     dq i13
  1395 00001261 [A060000000000000]  <1>     dq i14
  1396 00001269 [A760000000000000]  <1>     dq i15
  1397 00001271 [AE60000000000000]  <1>     dq i16
  1398 00001279 [B560000000000000]  <1>     dq i17
  1399 00001281 [BC60000000000000]  <1>     dq i18
  1400 00001289 [C360000000000000]  <1>     dq i19
  1401 00001291 [CA60000000000000]  <1>     dq i20
  1402 00001299 [D160000000000000]  <1>     dq i21
  1403                              <1> 
  1404                              <1> intData:
  1405 000012A1 [7354000000000000]  <1>     dq terminateProcess ;Int 40h
  1406 000012A9 [7A6B000000000000]  <1>     dq functionDispatch ;Int 41h
  1407 000012B1 [AF1A000000000000]  <1>     dq OEMHALT          ;Int 42h, If sysinit terminates, halt system
  1408 000012B9 [D26C000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1409 000012C1 [6664000000000000]  <1>     dq dosDefCritErrHdlr 
  1410 000012C9 [3F65000000000000]  <1>     dq absDiskRead      ;Int 45h
  1411 000012D1 [2065000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1412 000012D9 [7A54000000000000]  <1>     dq terminateRes     ;Int 47h
  1413 000012E1 [D26C000000000000]  <1>     dq defaultIretq     ;Int 48h
  1414 000012E9 [D26C000000000000]  <1>     dq defaultIretq     ;Int 49h
  1415 000012F1 [D26C000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1416 000012F9 [D26C000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1417 00001301 [D26C000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1418 00001309 [D26C000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1419 00001311 [D26C000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1420 00001319 [E273000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1421                              <1> nData:
  1422 00001321 0000000000000000    <1>     dq 0    ;We link here to the head of the OEM driver chain
  1423 00001329 0480                <1>     dw 08004h
  1424 0000132B [7F64000000000000]  <1>     dq nulStrat
  1425 00001333 [8564000000000000]  <1>     dq nulIntr
  1426 0000133B 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1427                              <1> 
  1428                              <1> openStreams:
  1429                              <1> ;If this returns with CF=CY, an error occured. Halt boot if initial set of streams
  1430 00001343 488D1565FEFFFF      <1>     lea rdx, auxName
  1431 0000134A B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1432 0000134F CD41                <1>     int 41h
  1433                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001351 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001353 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1434 00001354 89C3                <1>     mov ebx, eax
  1435 00001356 B903000000          <1>     mov ecx, 3  ;
  1436 0000135B B800460000          <1>     mov eax, 4600h  ;DUP2
  1437 00001360 CD41                <1>     int 41h
  1438                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001362 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1439 00001364 B8003E0000          <1>     mov eax, 3e00h
  1440 00001369 CD41                <1>     int 41h ;Close the original handle
  1441                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000136B 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1442 0000136D B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1443 00001372 488D1532FEFFFF      <1>     lea rdx, conName
  1444 00001379 CD41                <1>     int 41h
  1445                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000137B 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 0000137D 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1447 0000137F B800450000          <1>     mov eax, 4500h  ;DUP
  1448 00001384 CD41                <1>     int 41h
  1449                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001386 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1450 00001388 B800450000          <1>     mov eax, 4500h  ;DUP
  1451 0000138D CD41                <1>     int 41h
  1452                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000138F 72(53)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1453 00001391 488D151BFEFFFF      <1>     lea rdx, prnName
  1454 00001398 B8023D0000          <1>     mov eax, 3D02h
  1455 0000139D CD41                <1>     int 41h       ;Open file
  1456                              <1>     return
    13                              <2> %%_ret:
    14 0000139F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1457                              <1> 
  1458                              <1> addDriverMarkers:
  1459                              <1> ;Traverses the MCB chain after a driver init to add the correct subsytem 
  1460                              <1> ; information and owner to each memory block. Used for drivers that allocate
  1461                              <1> ; their own memory using ALLOC.
  1462                              <1> ;Input: qword [currentPSP] = Signature to search for (9 means kernel driver).
  1463                              <1> ;       fs -> Dos Data Area
  1464                              <1> ;Output: Sets the first occurrence to Driver, the rest to driver appendage,
  1465                              <1> ;           unless the signature is 9 in which case, it is set to DOS owner.
  1466                              <1> ;           In the event of a kernel driver then only mcbSubDrvExtra is used.
  1467 000013A0 50                  <1>     push rax
  1468 000013A1 53                  <1>     push rbx
  1469 000013A2 51                  <1>     push rcx
  1470 000013A3 56                  <1>     push rsi
  1471 000013A4 57                  <1>     push rdi
  1472 000013A5 488BBD[1F040000]    <1>     mov rdi, qword [rbp + currentPSP]
  1473 000013AC 488BB5[33000000]    <1>     mov rsi, qword [rbp + mcbChainPtr] ;Points to the kernel allocation
  1474 000013B3 B844000000          <1>     mov eax, mcbSubDriver
  1475 000013B8 BB4C000000          <1>     mov ebx, mcbSubDrvExtra
  1476 000013BD 4881FF09000000      <1>     cmp rdi, mcbOwnerNewDOS  ;If so, skip setting driver, only extra!
  1477 000013C4 0F44C3              <1>     cmove eax, ebx
  1478 000013C7 EB18                <1>     jmp short .gotoNextBlock    ;Skip the first alloc (the kernel)
  1479                              <1> .checkSubsystem:
  1480 000013C9 48397E01            <1>     cmp qword [rsi + mcb.owner], rdi
  1481 000013CD 7512                <1>     jne short .gotoNextBlock
  1482 000013CF 88460D              <1>     mov byte [rsi + mcb.subSysMark], al
  1483 000013D2 39D8                <1>     cmp eax, ebx
  1484 000013D4 0F45C3              <1>     cmovne eax, ebx
  1485 000013D7 807E0109            <1>     cmp byte [rsi + mcb.owner], mcbOwnerNewDOS
  1486 000013DB 7504                <1>     jne short .gotoNextBlock
  1487 000013DD C6460108            <1>     mov byte [rsi + mcb.owner], mcbOwnerDOS
  1488                              <1> .gotoNextBlock:
  1489 000013E1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
  1490 000013E4 7415                <1>     je short .exit
  1491 000013E6 31C9                <1>     xor ecx, ecx
  1492 000013E8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
  1493 000013EB 48C1E104            <1>     shl rcx, 4
  1494 000013EF 4881C610000000      <1>     add rsi, mcb.program    
  1495 000013F6 4801CE              <1>     add rsi, rcx
  1496 000013F9 EBCE                <1>     jmp short .checkSubsystem
  1497                              <1> .exit:
  1498 000013FB 5F                  <1>     pop rdi
  1499 000013FC 5E                  <1>     pop rsi
  1500 000013FD 59                  <1>     pop rcx
  1501 000013FE 5B                  <1>     pop rbx
  1502 000013FF 58                  <1>     pop rax
  1503                              <1>     return
    13                              <2> %%_ret:
    14 00001400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1504                              <1> 
  1505                              <1> 
  1506                              <1> convertBPBArray:
  1507                              <1> ;rsi -> BPB array
  1508                              <1> ;rbp -> Space for cl consecutive DPB's
  1509                              <1> ;rdi -> Driver header
  1510                              <1> ;cl = Number of BPBs to process
  1511                              <1> ;If ZF=NZ on entry, link the end of the last DPB array 
  1512 00001401 E852000000          <1>     call .findLastDPB
  1513 00001406 0FB6C9              <1>     movzx ecx, cl   ;Use ch as the unit number counter
  1514                              <1> .buildNext:
  1515 00001409 56                  <1>     push rsi
  1516 0000140A 488B36              <1>     mov rsi, qword [rsi]    ;Get the BPB pointer from the BPB array
  1517 0000140D B453                <1>     mov ah, 53h ;Build DPB
  1518 0000140F CD41                <1>     int 41h
  1519 00001411 5E                  <1>     pop rsi
  1520 00001412 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol] ;Get current # drives
  1520 00001417 [77000000]          <1>
  1521 0000141B 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al   ;Set it as drvnum
  1522 0000141E 64FE0425[77000000]  <1>     inc byte fs:[numPhysVol]    ;One more physical volume present!
  1523 00001426 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch    ;Set unit number
  1524 00001429 48897D1B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdi ;Store ptr to driver
  1525 0000142D FEC5                <1>     inc ch  ;Goto next unit number
  1526 0000142F 38E9                <1>     cmp cl, ch  ;When equal, exit!
  1527 00001431 7414                <1>     jz short .exit
  1528 00001433 488D4535            <1>     lea rax, qword [rbp + dpb_size]
  1529 00001437 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1530 0000143B 4889C5              <1>     mov rbp, rax    ;Advance rbp by that amount
  1531 0000143E 4881C608000000      <1>     add rsi, 8 ;Go to the next BPB in the BPB array
  1532 00001445 EBC2                <1>     jmp short .buildNext
  1533                              <1> .exit:
  1534                              <1>     ;Now set next DPB as -1 i.e end of chain!
  1535 00001447 31C0                <1>     xor eax, eax
  1536 00001449 48FFC8              <1>     dec rax
  1537 0000144C 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1538 00001450 4881C535000000      <1>     add rbp, dpb_size   ;Point rbp past the next DPB
  1539 00001457 C3                  <1>     ret
  1540                              <1> .findLastDPB:
  1541                              <1> ;Finds the last DPB and links the next DPB to it
  1542 00001458 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1542 0000145D [3B000000]          <1>
  1543 00001461 4885C0              <1>     test rax, rax
  1544 00001464 7415                <1>     jz short .first 
  1545                              <1> .lp:
  1546 00001466 48817825FFFFFFFF    <1>     cmp qword [rax + dpb.qNextDPBPtr], -1   ;End of chain?
  1547 0000146E 7406                <1>     je short .lastFound
  1548 00001470 488B4025            <1>     mov rax, qword [rax + dpb.qNextDPBPtr]  ;Get this pointer in rax
  1549 00001474 EBF0                <1>     jmp short .lp   ;And go again
  1550                              <1> .lastFound:
  1551 00001476 48896825            <1>     mov qword [rax + dpb.qNextDPBPtr], rbp  ;The next dpb will go here
  1552 0000147A C3                  <1>     ret
  1553                              <1> .first:
  1554                              <1> ;If this is the first DPB array, set the dpbHeadPtr
  1555 0000147B 6448892C25-         <1>     mov qword fs:[dpbHeadPtr], rbp
  1555 00001480 [3B000000]          <1>
  1556 00001484 C3                  <1>     ret
  1557                              <1> 
  1558                              <1> ejectKernelInit:
  1559                              <1> ;Reallocates the space allocated to the driver file after 
  1560                              <1> ; init was called.
  1561                              <1> ;Input: rbx -> Pointer to the original end of the allocation (para aligned)
  1562                              <1> ;       r8 -> Points to the mcb header for reallocation
  1563                              <1> ;Uses the sysinit init drive block. 
  1564                              <1> ;rax, rbx, rflags trashed
  1565                              <1> ;If returns CF=CY, error in reallocation.
  1566 00001485 53                  <1>     push rbx
  1567 00001486 488D1D7D010000      <1>     lea rbx, initDrvBlk
  1568 0000148D 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]
  1569 00001491 5B                  <1>     pop rbx
  1570                              <1>     ;If this endptr is zero or -1 ignore it. 
  1571                              <1>     ;If this endptr is greater than the end of alloc, ignore it.
  1572 00001492 4885C0              <1>     test rax, rax
  1573                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001495 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001497 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1574 00001498 48FFC0              <1>     inc rax ;Carry over to 0 if this is -1
  1575                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000149B 74(97)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1576 0000149D 48FFC8              <1>     dec rax ;Return to original value
  1577 000014A0 48050F000000        <1>     add rax, 0Fh    ;Paragraph align the endptr
  1578 000014A6 48C1E804            <1>     shr rax, 4
  1579 000014AA 48C1E004            <1>     shl rax, 4
  1580 000014AE 4829C3              <1>     sub rbx, rax    ;If this is above zero then rbx > rax, which is valid
  1581 000014B1 7621                <1>     jbe short .exit   ;If equal or below zero, dont reallocate
  1582 000014B3 418B80[09000000]    <1>     mov eax, dword [r8 + anchorMcb + mcb.blockSize]    ;Get alloc size
  1583 000014BA 4150                <1>     push r8 ;Save the pointer to the mcb before using syscall
  1584 000014BC 4981C010000000      <1>     add r8, mcb.program ;Goto program
  1585 000014C3 C1EB04              <1>     shr ebx, 4  ;Now convert the difference into number of paragraphs
  1586 000014C6 29D8                <1>     sub eax, ebx
  1587 000014C8 89C3                <1>     mov ebx, eax
  1588 000014CA B8004A0000          <1>     mov eax, 4A00h  ;Reallocate space
  1589 000014CF CD41                <1>     int 41h
  1590 000014D1 4158                <1>     pop r8
  1591                              <1>     return
    13                              <2> %%_ret:
    14 000014D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1592                              <1> .exit:
  1593 000014D4 F8                  <1>     clc ;Make sure to clear the CF flag before returning
  1594                              <1>     return
    13                              <2> %%_ret:
    14 000014D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1595                              <1> 
  1596                              <1> initDriver:
  1597                              <1> ;Initialises one driver and adjusts the DOS data appropriately
  1598                              <1> ;If on return CF=CY then the driver didnt want to be loaded
  1599                              <1> ;Preserves rbx (initReqPkt), rbp (DOSSEG ptr), rsi (driver pointer)
  1600                              <1> ;initReqPkt.optptr must be set before calling this function if cmdline
  1601                              <1> ; arguments are to be passed to the driver
  1602                              <1> ;Input: rsi -> driver pointer
  1603                              <1> ;       rbx -> sysinit request pointer
  1604                              <1> ;       rbp -> DOSSEG pointer
  1605 000014D6 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1606 000014D9 C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1607 000014DD 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1608 000014E3 8A85[77000000]      <1>     mov al, byte [rbp + numPhysVol]    ;Get current num of physical volumes
  1609 000014E9 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1610                              <1>     ;Protect the important registers. All others trashable
  1611 000014EC 53                  <1>     push rbx
  1612 000014ED 56                  <1>     push rsi
  1613 000014EE 55                  <1>     push rbp
  1614 000014EF FF560A              <1>     call qword [rsi + drvHdr.strPtr]
  1615 000014F2 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1616 000014F5 5D                  <1>     pop rbp
  1617 000014F6 5E                  <1>     pop rsi
  1618 000014F7 5B                  <1>     pop rbx
  1619                              <1>     ;Check if a driver wants to not load.
  1620                              <1>     ;If a kernel driver wants to stop, halt boot.
  1621 000014F8 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1622 000014FE 750C                <1>     jnz short .errExit
  1623 00001500 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1624 00001504 7508                <1>     jne short .notHalt
  1625 00001506 4839730E            <1>     cmp qword [rbx + initReqPkt.endptr], rsi    ;If endptr -> header, abort
  1626 0000150A 7502                <1>     jne short .notHalt
  1627                              <1> .errExit:
  1628 0000150C F9                  <1>     stc
  1629 0000150D C3                  <1>     ret
  1630                              <1> .notHalt:
  1631                              <1>     ;Now check if the drivers were con/clock before exiting
  1632 0000150E 668B4608            <1>     mov ax, word [rsi + drvHdr.attrib]
  1633 00001512 66250300            <1>     and ax, devDrvConIn | devDrvConOut
  1634 00001516 740D                <1>     jz short .checkClock    ;If neither one of these bits are set, jmp
  1635 00001518 663D0300            <1>     cmp ax, devDrvConIn | devDrvConOut
  1636 0000151C 7507                <1>     jne short .checkClock
  1637 0000151E 4889B5[53000000]    <1>     mov qword [rbp + vConPtr], rsi  ;Store the header ptr here
  1638                              <1> .checkClock:
  1639 00001525 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1640 0000152B 7407                <1>     jz short .notClock
  1641 0000152D 4889B5[4B000000]    <1>     mov qword [rbp + clockPtr], rsi
  1642                              <1> .notClock:
  1643                              <1> ;Now test if MSD driver. If so, store the number of units in the name field
  1644 00001534 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1645                              <1>     retnz   ;Return if this is a char device
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000153A 75(D5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1646                              <1>     ;Else, store the number of units as reported live by driver
  1647 0000153C 0FB6430D            <1>     movzx eax, byte [rbx + initReqPkt.numunt] ;Get # units reported by driver
  1648 00001540 88461A              <1>     mov byte [rsi + drvHdr.drvUnt], al ;Store this byte permanently here
  1649 00001543 C3                  <1>     ret
  1650                              <1> 
  1651                              <1> buildDPBs:
  1652                              <1>     ;Here we specially handle MSD drivers, building DPBs
  1653                              <1>     ;If return with CF=CY, fail. Else, all done and setup
  1654                              <1>     ;Input: rbx -> Points to sysinit request packet
  1655                              <1>     ;       rsi -> Driver header
  1656                              <1>     ;       rbp -> DOSSEG pointer
  1657                              <1>     ;Preserves those registers
  1658 00001544 53                  <1>     push rbx
  1659 00001545 55                  <1>     push rbp
  1660 00001546 56                  <1>     push rsi
  1661 00001547 57                  <1>     push rdi
  1662 00001548 4889F7              <1>     mov rdi, rsi    ;SAVE THE DRIVER HEADER!
  1663 0000154B 0FB64E1A            <1>     movzx ecx, byte [rsi + drvHdr.drvUnt]  ;Get # of units reported by driver
  1664 0000154F 488B7316            <1>     mov rsi, qword [rbx + initReqPkt.optptr]
  1665 00001553 B835000000          <1>     mov eax, dpb_size
  1666 00001558 F7E1                <1>     mul ecx         ;Get the number of bytes for all the dpb's into eax
  1667 0000155A 050F000000          <1>     add eax, 0Fh    ;Round up if not precisely on para boundry
  1668 0000155F C1E804              <1>     shr eax, 4      ;Convert to paragraphs
  1669 00001562 89C3                <1>     mov ebx, eax
  1670 00001564 B800480000          <1>     mov eax, 4800h  ;ALLOC (marked as owned by DOS for now)
  1671 00001569 CD41                <1>     int 41h
  1672 0000156B 7219                <1>     jc short .badExit
  1673 0000156D 4889C5              <1>     mov rbp, rax    
  1674 00001570 C6400D50            <1>     mov byte [rax + mcb.subSysMark], mcbSubDrvDPB  ;Set DPB marker here
  1675 00001574 48C7400108000000    <1>     mov qword [rax + mcb.owner], mcbOwnerDOS    ;Set DOS owner here
  1676                              <1>     ;rsi -> Ptr to BPB
  1677                              <1> 	;rbp -> Ptr to buffer to hold first DPB
  1678                              <1>     ;rdi -> Ptr to the driver header
  1679 0000157C E880FEFFFF          <1>     call convertBPBArray    ;Returns rbp -> past last DPB
  1680                              <1> .exit:
  1681 00001581 5F                  <1>     pop rdi
  1682 00001582 5E                  <1>     pop rsi
  1683 00001583 5D                  <1>     pop rbp
  1684 00001584 5B                  <1>     pop rbx
  1685                              <1>     return
    13                              <2> %%_ret:
    14 00001585 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1686                              <1> .badExit:
  1687 00001586 F9                  <1>     stc
  1688 00001587 EBF8                <1>     jmp short .exit
  1689                              <1> 
  1690                              <1> setupInterruptBlock:
  1691                              <1> ;Sets up a block of interrupts with pointers provided in a table
  1692                              <1> ;Input:
  1693                              <1> ; al = Start interrupt
  1694                              <1> ; rdi -> Start of pointer table
  1695                              <1> ; cl = Last interrupt + 1
  1696                              <1> ;Assumes rbp points to DOSSEG
  1697 00001589 0FB6C0              <1>     movzx eax, al
  1698 0000158C 0FB6C9              <1>     movzx ecx, cl
  1699                              <1> .lp:
  1700 0000158F 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
  1701 00001592 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
  1702 00001595 E80E000000          <1>     call writeIDTEntry
  1703 0000159A 4881C708000000      <1>     add rdi, 8  ;Goto next interrupt handler
  1704 000015A1 FFC0                <1>     inc eax     ;Goto next interrupt number
  1705 000015A3 39C8                <1>     cmp eax, ecx
  1706 000015A5 75E8                <1>     jne .lp
  1707                              <1>     return
    13                              <2> %%_ret:
    14 000015A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1708                              <1> 
  1709                              <1> writeIDTEntry:
  1710                              <1> ;Writes the interrupt in the right place in the table
  1711                              <1>     ;al = Interrupt number
  1712                              <1>     ;rbx -> Handler to install
  1713 000015A8 50                  <1>     push rax
  1714 000015A9 53                  <1>     push rbx
  1715 000015AA 0FB6C0              <1>     movzx eax, al
  1716 000015AD 4893                <1>     xchg rbx, rax
  1717 000015AF 48C1E304            <1>     shl rbx, 4h     ;Multiply IDT entry number by 16
  1718 000015B3 48031D17000000      <1>     add rbx, qword [localIDTpointer.Base]    ;rsx points to IDT entry
  1719 000015BA 668903              <1>     mov word [rbx], ax  ;Get low word into offset 15...0
  1720 000015BD 48C1E810            <1>     shr rax, 10h    ;Bring next word low
  1721 000015C1 66894306            <1>     mov word [rbx + 6], ax  ;Get low word into offset 31...16
  1722 000015C5 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
  1723 000015C9 894308              <1>     mov dword [rbx + 8], eax
  1724 000015CC 5B                  <1>     pop rbx
  1725 000015CD 58                  <1>     pop rax
  1726 000015CE C3                  <1>     ret
  1727                              <1> 
  1728                              <1> ; DATA AREA
  1729                              <1> localIDTpointer: ;Local IDT pointer
  1730 000015CF 0000                <1>     .Limit  dw 0
  1731 000015D1 0000000000000000    <1>     .Base   dq 0
  1732                              <1> 
  1733 000015D9 0000000000000000    <1> FINALDOSPTR dq 0    ;Pointer to where dSeg should be loaded
  1734 000015E1 0000000000000000    <1> DOSENDPTR   dq 0    ;Pointer to the first free byte AFTER DOS
  1735 000015E9 0000000000000000    <1> MCBANCHOR   dq 0    ;Pointer to the Anchor MCB
  1736                              <1> 
  1737                              <1> ;DOS Data given by OEM
  1738 000015F1 00                  <1> FILES       db 0    ;Default number of FILES
  1739 000015F2 00                  <1> BUFFERS     db 0    ;Default number of BUFFERS
  1740 000015F3 00                  <1> DFLTDRIVE   db 0    ;Default drive number (0-25), this is the boot drive
  1741 000015F4 00                  <1> LASTDRIVE   db 0    ;Default last drive number (0-25)
  1742 000015F5 00                  <1> OEMBIOS     db 0    ;Set if to use IO.SYS or clear if to use SCPBIOS.SYS
  1743                              <1> OEMMEMPTR:  ;Used to save the allocated 64k block for OEMCALLBK
  1744 000015F6 0000000000000000    <1> OEMDRVCHAIN dq 0    ;Pointer to the uninitialised device drivers
  1745 000015FE 0000000000000000    <1> OEMPTR      dq 0    ;Pointer to store at biosPtr
  1746 00001606 00000000            <1> OEMVERSION  dd 0    ;BIOS number, to be used by drivers for id-ing
  1747                              <1> 
  1748 0000160A 000000000000000000- <1> initDrvBlk  db initReqPkt_size dup (0)  ;Used for making driver init reqs
  1748 00001613 000000000000000000- <1>
  1748 0000161C 000000000000000000- <1>
  1748 00001625 00000000            <1>
  1749                              <1> tempPSP: ;Points to a 256 byte space that is set up appropriately
  1750                              <1>     istruc psp
  1751 00001629 CD40                <1>     at psp.return,      db 0CDh, 40h
  1752 0000162B 0000000000000000    <1>     at psp.allocSize,   dd 0, 0 ;Second 0 is for the reserved dword
  1753 00001633 0000000000000000    <1>     at psp.oldInt42h,   dq 0
  1754 0000163B 0000000000000000    <1>     at psp.oldInt43h,   dq 0
  1755 00001643 0000000000000000    <1>     at psp.oldInt44h,   dq 0
  1756 0000164B 0000000000000000    <1>     at psp.parentPtr,   dq 0
  1757 00001653 FFFFFFFFFFFFFFFFFF- <1>     at psp.jobFileTbl,  db 20 dup (0FFh)
  1757 0000165C FFFFFFFFFFFFFFFFFF- <1>
  1757 00001665 FFFF                <1>
  1758 00001667 0000000000000000    <1>     at psp.envPtr,      dq 0
  1759 0000166F 0000000000000000    <1>     at psp.rspPtr,      dq 0
  1760 00001677 1400                <1>     at psp.jftSize,     dw 20 
  1761 00001679 CD41C3              <1>     at psp.unixEntry,   db 0CDh, 41h, 0C3h
  1762 0000167C 0000000000000000    <1>     at psp.prevPSP,     dq 0
  1763 00001684 000000000000000000- <1>     at psp.fcb1,        db 16 dup (0)
  1763 0000168D 0000000000000000    <1>
  1764 00001695 000000000000000000- <1>     at psp.fcb2,        db 20 dup (0)
  1764 0000169E 000000000000000000- <1>
  1764 000016A7 0000                <1>
  1765 000016A9 000D00000000000000- <1>     at psp.dta,         db 0, CR, 126 dup (0)   ;Dummy empty command line
  1765 000016B2 000000000000000000- <1>
  1765 000016BB 000000000000000000- <1>
  1765 000016C4 000000000000000000- <1>
  1765 000016CD 000000000000000000- <1>
  1765 000016D6 000000000000000000- <1>
  1765 000016DF 000000000000000000- <1>
  1765 000016E8 000000000000000000- <1>
  1765 000016F1 000000000000000000- <1>
  1765 000016FA 000000000000000000- <1>
  1765 00001703 000000000000000000- <1>
  1765 0000170C 000000000000000000- <1>
  1765 00001715 000000000000000000- <1>
  1765 0000171E 000000000000000000- <1>
  1765 00001727 0000                <1>
  1766                              <1>     iend
    17                                  %include "./src/Sysinit/oeminit.asm"
     1                              <1> %use masm
     2                              <1> 
     3                              <1> OEMINIT PROC NEAR
     4                              <1> ;Sets the Statistical data and adds any page tables that are needed
     5                              <1> ;Entered with:
     6                              <1> ;           rsi -> BIOS userbase
     7                              <1> ;           rdi -> APT load area (page aligned)
     8                              <1> ;           r15 -> Boot drive
     9                              <1> ;------------------------------------------------;
    10                              <1> ;      Start saving basic DOS data to the        ; 
    11                              <1> ;                OEM Variables                   ;
    12                              <1> ;------------------------------------------------;
    13 00001729 31C0                <1>     xor eax, eax    ;Drive A:
    14 0000172B BB02000000          <1>     mov ebx, 2      ;Drive C:
    15 00001730 41F6C780            <1>     test r15b, 80h  ;Is the hard drive bit set?
    16 00001734 0F45C3              <1>     cmovnz eax, ebx
    17 00001737 8805B6FEFFFF        <1>     mov byte [DFLTDRIVE], al    ;Set default drive
    18                              <1> ;Copy DOS to its final resting place
    19 0000173D 488935B0030000      <1>     mov qword [biosUBase], rsi  ;Local OEM variable
    20 00001744 C605A6FEFFFF08      <1>     mov byte [FILES], 8         ;Default 8 files, initially 5 only
    21 0000174B C605A0FEFFFF1E      <1>     mov byte [BUFFERS], 30      ;Default 30 buffers, at start 1
    22 00001752 C6059BFEFFFF05      <1>     mov byte [LASTDRIVE], 5     ;Default Last drive value
    23 00001759 C705A3FEFFFF000000- <1>     mov dword [OEMVERSION], 0   ;CSM BIOS
    23 00001762 00                  <1>
    24 00001763 48C70590FEFFFF0000- <1>     mov qword [OEMPTR], 0       ;No pointer
    24 0000176C 0000                <1>
    25 0000176E C60580FEFFFF00      <1>     mov byte [OEMBIOS], 0       ;Use SCPBIOS/SCPDOS kernel names
    26                              <1>    ;If no detected Int 33h devices, halt 
    27 00001775 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    28 00001777 49C1E818            <1>     shr r8, 3*8
    29 0000177B 4584C0              <1>     test r8b, r8b
    30 0000177E 0F842B030000        <1>     jz OEMHALT
    31 00001784 4889F7              <1>     mov rdi, rsi
    32 00001787 4881E700F0FFFF      <1>     and rdi, ~0FFFh ;round up to next 4Kb page after biosUBase
    33 0000178E 4881C700100000      <1>     add rdi, 1000h
    34                              <1> ;------------------------------------------------;
    35                              <1> ;      Add additional page tables before the     ;
    36                              <1> ;                   data area.                   ;
    37                              <1> ;------------------------------------------------;
    38                              <1> ;This will allow for up to 64Gb of addressible space
    39                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    40 00001795 B900780000          <1>     mov ecx, aptSize/8   ;This many entries as qwords
    41 0000179A 57                  <1>     push rdi        ;rdi points to the APT space
    42 0000179B 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    42 000017A4 00                  <1>
    43                              <1> pdtLoop:
    44 000017A5 48AB                <1>     stosq
    45 000017A7 480500002000        <1>     add rax, 200000h
    46 000017AD FFC9                <1>     dec ecx
    47 000017AF 75F4                <1>     jnz pdtLoop
    48 000017B1 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    49                              <1> ;Now we add every 4kb page to the page directory pointer table
    50                              <1> ;15 4kb pages to consider
    51 000017B2 48893D20FEFFFF      <1>     mov qword [FINALDOSPTR], rdi ;rdi now points to where dSeg will go
    52 000017B9 57                  <1>     push rdi
    53 000017BA 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    54 000017BD 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    55 000017C0 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    56 000017C7 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    57 000017CE B93C000000          <1>     mov ecx, 60
    58 000017D3 480D03000000        <1>     or rax, 3h      ;present and r/w
    59                              <1> pdptLoop:
    60 000017D9 48AB                <1>     stosq
    61 000017DB 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    62 000017E1 FFC9                <1>     dec ecx
    63 000017E3 75F4                <1>     jnz pdptLoop
    64                              <1> 
    65 000017E5 0F20DF              <1>     mov rdi, cr3    ;Reload cr3 to make the system aware of new table entries
    66 000017E8 0F22DF              <1>     mov cr3, rdi    ;(is this strictly necessary?)
    67                              <1> ;------------------------------------------------;
    68                              <1> ;       Set Device Driver Chain and Exit         ;
    69                              <1> ;------------------------------------------------;  
    70                              <1> ;Before we exit, set the device driver chain
    71 000017EB 48B8-               <1>     mov rax, driverChain
    71 000017ED [B475000000000000]  <1>
    72 000017F5 5F                  <1>     pop rdi
    73 000017F6 4801F8              <1>     add rax, rdi    ;Add the DOSSEG base address
    74 000017F9 488905F6FDFFFF      <1>     mov qword [OEMDRVCHAIN], rax  ;Store this value here
    75 00001800 C3                  <1>     ret
    76                              <1> aptSize equ 60*4096 ;(APT = Additional Page Tables)
    77                              <1> OEMINIT ENDP
    78                              <1> 
    79                              <1> OEMMCBINIT PROC NEAR
    80 00001801 B820E80000          <1>     mov eax, 0E820h ;Get memory map
    81 00001806 CD35                <1>     int 35h ; rsi has pointer to memory map
    82 00001808 488B05E5020000      <1>     mov rax, qword [biosUBase]
    83 0000180F E8F6000000          <1>     call .mcbFindAddress
    84 00001814 7341                <1>     jnc .mcbi1  ;If found, proceed
    85                              <1>     ;Here, we try use E801h
    86 00001816 B801E80000          <1>     mov eax, 0E801h
    87 0000181B CD35                <1>     int 35h
    88 0000181D 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
    89 00001820 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
    90 00001823 85C0                <1>     test eax, eax
    91 00001825 7417                <1>     jz .worst
    92 00001827 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
    93 0000182A C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
    94 0000182D 8905C9020000        <1>     mov dword [loProtMem], eax
    95 00001833 891DC7020000        <1>     mov dword [hiProtMem], ebx
    96 00001839 E919010000          <1>     jmp mcbBuild
    97                              <1> .worst:
    98                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
    99 0000183E B800002000          <1>     mov eax, 200000h
   100 00001843 488B1DAA020000      <1>     mov rbx, qword [biosUBase]   ;Get userbase
   101 0000184A 29D8                <1>     sub eax, ebx
   102 0000184C 8905AA020000        <1>     mov dword [loProtMem], eax  ;The leftover goes here
   103 00001852 E900010000          <1>     jmp mcbBuild 
   104                              <1> .mcbi1:
   105 00001857 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   106 0000185A 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   106 00001863 00                  <1>
   107 00001864 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   108 00001868 0F85BC000000        <1>     jne .mcbFail
   109 0000186E 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   110                              <1>     ;PCI hole always exists so this value will always be a dword
   111 00001872 890584020000        <1>     mov dword [loProtMem], eax
   112 00001878 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   113 0000187B 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   114 0000187E 4881FB00000001      <1>     cmp rbx, 1000000h  
   115 00001885 773A                <1>     ja .skipISA
   116                              <1> ;Here we deal with ISA hole issues
   117 00001887 B820E80000          <1>     mov eax, 0E820h
   118 0000188C CD35                <1>     int 35h
   119 0000188E 48B800000001000000- <1>     mov rax, 1000000h
   119 00001897 00                  <1>
   120 00001898 E86D000000          <1>     call .mcbFindAddress
   121 0000189D 0F82B4000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   122 000018A3 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   122 000018AC 00                  <1>
   123 000018AD 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   124 000018B1 0F85A0000000        <1>     jne mcbBuild  
   125 000018B7 488B5808            <1>     mov rbx, qword [rax + 8]
   126 000018BB 891D3F020000        <1>     mov dword [hiProtMem], ebx   ;Save data 
   127                              <1> .skipISA:
   128 000018C1 B820E80000          <1>     mov eax, 0E820h
   129 000018C6 CD35                <1>     int 35h
   130 000018C8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   130 000018D1 00                  <1>
   131 000018D2 E833000000          <1>     call .mcbFindAddress
   132 000018D7 727E                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   133 000018D9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   133 000018E2 00                  <1>
   134 000018E3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   135 000018E7 756E                <1>     jne mcbBuild   
   136 000018E9 488B5808            <1>     mov rbx, qword [rax + 8]
   137                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   138 000018ED 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   138 000018F6 00                  <1>
   139 000018F7 4839CB              <1>     cmp rbx, rcx
   140 000018FA 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   141 000018FE 48891DFF010000      <1>     mov qword [longMem], rbx   ;Save data 
   142 00001905 E94D000000          <1>     jmp mcbBuild
   143                              <1> .mcbFindAddress:
   144                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   145                              <1> ;Entry: rax = Address of arena to search for
   146                              <1> ;       rsi = Pointer to memory map
   147                              <1> ;       ecx = Number of 24 byte entries
   148                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   149                              <1> ;       CF=CY : value in rax not found
   150 0000190A 56                  <1>     push rsi
   151 0000190B 51                  <1>     push rcx
   152 0000190C 50                  <1>     push rax
   153                              <1> .mfa0:
   154 0000190D 483B06              <1>     cmp rax, qword [rsi]
   155 00001910 7410                <1>     je .mcbAddressFound
   156 00001912 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   157 00001919 FFC9                <1>     dec ecx
   158 0000191B 79F0                <1>     jns .mfa0
   159                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   160 0000191D 58                  <1>     pop rax
   161 0000191E 59                  <1>     pop rcx
   162 0000191F 5E                  <1>     pop rsi
   163 00001920 F9                  <1>     stc
   164 00001921 C3                  <1>     ret
   165                              <1> .mcbAddressFound:
   166 00001922 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   167 00001925 59                  <1>     pop rcx ;Pop old rax value off
   168 00001926 59                  <1>     pop rcx
   169 00001927 5E                  <1>     pop rsi
   170 00001928 F8                  <1>     clc
   171 00001929 C3                  <1>     ret
   172                              <1> .mcbFail:
   173 0000192A 488D2D0C000000      <1>     lea rbp, mcbFailmsg
   174 00001931 B804130000          <1>     mov eax, 1304h
   175 00001936 CD30                <1>     int 30h
   176 00001938 E972010000          <1>     jmp OEMHALT
   177 0000193D 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   177 00001946 6C6F636174696F6E20- <1>
   177 0000194F 4572726F720A0D00    <1>
   178                              <1> 
   179                              <1> mcbBuild:
   180                              <1> ;Actually build the MCB chain here
   181                              <1> ;Start by computing the difference between userbase and DOS area
   182 00001957 488B1D96010000      <1>     mov rbx, qword [biosUBase]
   183 0000195E 488B3584FCFFFF      <1>     mov rsi, qword [MCBANCHOR]  
   184 00001965 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]    ;Get the size of the block
   185 00001968 48C1E004            <1>     shl rax, 4      ;Convert to number of allocated bytes
   186 0000196C 480510000000        <1>     add rax, mcb_size   ;Add the mcb itself to the count
   187 00001972 4801F0              <1>     add rax, rsi    ;Add the pointer to the mcb to get pointer to free space
   188 00001975 4889C7              <1>     mov rdi, rax    ;Save this value as the pointer to the next MCB
   189 00001978 4829D8              <1>     sub rax, rbx    ;Get difference from userbase and first byte after DOS
   190 0000197B 29057B010000        <1>     sub dword [loProtMem], eax  ;Remove difference from the free bytes count
   191 00001981 0F8228010000        <1>     jc OEMHALT                  ;If this carries, fail
   192 00001987 813D6B010000008000- <1>     cmp dword [loProtMem], 8000h   ;Need a minimum of 32Kb free space.
   192 00001990 00                  <1>
   193 00001991 0F8218010000        <1>     jb OEMHALT
   194 00001997 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;Now mark anchor as not end
   195 0000199A 4889FB              <1>     mov rbx, rdi    ;Get the pointer to the free space back
   196 0000199D C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   197 000019A0 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   198 000019A8 31F6                <1>     xor esi, esi
   199 000019AA 8B354C010000        <1>     mov esi, dword [loProtMem]
   200 000019B0 81EE10000000        <1>     sub esi, mcb_size   ;Now remove one mcb's worth of space
   201 000019B6 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   202 000019B9 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   203                              <1> 
   204                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   205 000019BC 813D3A010000000000- <1>     cmp dword [hiProtMem], 0
   205 000019C5 00                  <1>
   206 000019C6 746C                <1>     jz .skipISA
   207                              <1>     ;Here if an ISA hole exists, place a MCB around it
   208 000019C8 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   209                              <1>     ;Remove one MCB worth of space from alloc
   210 000019CF 31C9                <1>     xor ecx, ecx
   211 000019D1 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   212 000019D4 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   213 000019DA C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   214 000019DD C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   215 000019E0 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   216 000019E3 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   217 000019E6 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   218 000019EE 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   218 000019F7 00                  <1>
   219 000019F8 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   220 000019FB 480510000000        <1>     add rax, mcb_size
   221 00001A01 4829C1              <1>     sub rcx, rax    ;Take their difference
   222 00001A04 C1E904              <1>     shr ecx, 4
   223 00001A07 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   224 00001A0A C1E104              <1>     shl ecx, 4  ;Get bytes again
   225 00001A0D 4881C310000000      <1>     add rbx, mcb_size
   226 00001A14 4801CB              <1>     add rbx, rcx
   227                              <1>     ;RBX should now be at 16Mb
   228 00001A17 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   229 00001A1A 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   230 00001A22 8B0DD8000000        <1>     mov ecx, dword [hiProtMem]
   231 00001A28 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   232 00001A2B 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   233 00001A31 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   234                              <1> .skipISA:
   235                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   236                              <1>     ;rbx points to a block with "Z" marker
   237 00001A34 813DC6000000000000- <1>     cmp dword [longMem], 0
   237 00001A3D 00                  <1>
   238 00001A3E 746E                <1>     jz .exit
   239                              <1>     ;Add PCI hole MCB
   240 00001A40 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 00001A47 31C9                <1>     xor ecx, ecx
   243 00001A49 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 00001A4C 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 00001A52 C1E104              <1>     shl ecx, 4  ;Get bytes
   246 00001A55 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   247 00001A58 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 00001A5B C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 00001A5E 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 00001A66 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   250 00001A6F 00                  <1>
   251 00001A70 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 00001A73 480510000000        <1>     add rax, mcb_size
   253 00001A79 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 00001A7C C1E904              <1>     shr ecx, 4
   255 00001A7F 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 00001A82 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 00001A85 4881C310000000      <1>     add rbx, mcb_size
   258 00001A8C 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 4Gb
   260 00001A8F C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 00001A92 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 00001A9A 488B0D63000000      <1>     mov rcx, qword [longMem]
   263 00001AA1 48C1E904            <1>     shr rcx, 4
   264 00001AA5 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 00001AAB 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .exit:
   267 00001AAE C3                  <1>     ret
   268                              <1> OEMMCBINIT ENDP
   269                              <1> 
   270                              <1> OEMHALT PROC    NEAR
   271                              <1> ;If a critical error occurs during sysinit, fail through here
   272                              <1> ;Int 42h, 43h and 44h point here during sysinit
   273 00001AAF 488D2D0C000000      <1>     lea rbp, hltmsg
   274 00001AB6 B804130000          <1>     mov eax, 1304h
   275 00001ABB CD30                <1>     int 30h
   276                              <1> .ei0:
   277 00001ABD F4                  <1>     hlt
   278 00001ABE F390                <1>     pause
   279 00001AC0 EBFB                <1>     jmp short .ei0
   280 00001AC2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   280 00001ACB 7469616C6973696E67- <1>
   280 00001AD4 20534350444F532E53- <1>
   280 00001ADD 59532E205379737465- <1>
   280 00001AE6 6D2068616C74696E67- <1>
   280 00001AEF 2E2E2E00            <1>
   281                              <1> OEMHALT ENDP
   282                              <1> 
   283                              <1> OEMCALLBK PROC NEAR
   284 00001AF3 C3                  <1>     ret
   285                              <1> OEMCALLBK ENDP
   286                              <1> 
   287                              <1> ;OEM Only variables are permitted in this file. They are not 
   288                              <1> ; visible to SYSINIT
   289 00001AF4 0000000000000000    <1> biosUBase   dq 0
   290 00001AFC 00000000            <1> loProtMem   dd 0
   291 00001B00 00000000            <1> hiProtMem   dd 0
   292 00001B04 0000000000000000    <1> longMem     dq 0
    18                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    19                                  %include "./src/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   resb mcb_size   ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   resb 1    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    resd 1    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     resq 1    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    10 0000001D ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    33 0000009C ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     resq 1  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   resq 1  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare resq 1  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  resb sfth_size
   149 00000141 <res 4Fh>           <1>     firstSft    resb sft_size
   150 00000190 <res 4Fh>           <1>     secondSft   resb sft_size
   151 000001DF <res 4Fh>           <1>     thirdSft    resb sft_size
   152 0000022E <res 4Fh>           <1>     fourthSft   resb sft_size
   153 0000027D <res 4Fh>           <1>     fifthSft    resb sft_size
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 resb 1  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   182 00000408 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  resw 1  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction resb 1  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  resb 1  ;Error Class
   188 0000040F ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   189 00000417 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   193 0000042F ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  resb 1  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   201 0000043B ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   207 0000045F ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   208 00000467 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   209 00000468 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   210 00000469 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   211                              <1> 
   212 0000046A ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   213 00000472 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   214 0000047A ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   215 00000482 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   216 0000048A ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   217                              <1> ;The below flag tells DOS to print ^C in the termination function
   218 0000048B ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   219 0000048C ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   220                              <1> ;Time stuff
   221                              <1> ;Read the below two as a word
   222 0000048D ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   223 0000048E ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   224 0000048F ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   225 00000490 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   226 00000492 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   227                              <1> 
   228 00000493 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   229 00000494 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   230 00000495 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   231                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   232                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   233                              <1> ; without forcing to re-build the whole primary request block.
   234                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   235                              <1> ; with secondary char output going through the secondary header
   236                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   237                              <1> ; for output)
   238                              <1> ;ioReqPkt is the largest possible packet
   239 00000496 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   240 000004C0 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   241                              <1>     altRet: ;Accessed as a qword
   242 000004EA <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   243 00000514 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   244                              <1> ;Swappable Buffers
   245 00000515 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   246                              <1>     ;We add an additional byte to save ah too
   247 0000051B ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   248 0000051D <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   249 0000059D <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   250 0000061D ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   251 00000625 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   252 0000062D ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   253                              <1> ;Misc bookkeeping flags and vars
   254 0000062E <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   255 00000659 <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   256 00000679 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   257 000006D4 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   258 000006E0 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   259 000006EC ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   260                              <1> 
   261 000006F4 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   262 000006F5 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   263 000006F6 ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   264 000006F7 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   265 000006F8 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   266 000006F9 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   267 000006FA ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   268 000006FB ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   269 000006FC ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   270 000006FD ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   271                              <1> 
   272 000006FE ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   273 000006FF ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   274 00000700 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   275 00000701 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   276 00000702 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   277 00000703 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   278 00000704 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   279                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   280                              <1> workingDD:  ;Create a symbol for the working device driver too
   281 00000705 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   282 0000070D ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   283 00000715 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   284                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   285                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   286 0000071D ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   287 00000725 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   288 0000072D ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   289 00000735 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   290 00000737 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   291 00000739 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   292                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   293                              <1> ; and 32 byte offset into the sector for directory
   294 00000741 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   295                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   296                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   297 00000749 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   298                              <1> ;***************************************************|
   299                              <1> ; Needs to be set up before any file access         |
   300                              <1> ; These vars keep track of file access properties   |
   301                              <1> ;   and must be used only for such purposes.        |
   302                              <1> ;***************************************************|
   303 0000074B ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   304 0000074F ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   305                              <1> 
   306 00000753 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   307 00000757 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   308 00000758 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   309                              <1> 
   310 00000760 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   311 00000762 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   312                              <1> ;***************************************************|
   313 00000766 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   314 0000076A ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   315 0000076E ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   316 0000076F ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   317 00000773 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   318 00000777 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   319                              <1> ;Directory stuff
   320 0000077B ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   321 0000077F ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   322 00000783 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   323 00000785 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   324                              <1> ;Error DPB 
   325 00000789 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   326 00000791 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   327                              <1>     
   328 00000792 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   329 000007BD <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   330                              <1> ;Stacks and scratch SFT
   331 000007DD ??????              <1>     alignb  8
   332 000007E0 <res 528h>          <1>     critStack   resq 165
   333 00000D08 ????????????????    <1>     critStakTop resq 1
   334                              <1> 
   335 00000D10 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   336                              <1>     
   337 00000D5F ??                  <1>     alignb  8
   338 00000D60 <res 638h>          <1>     AuxStack    resq 199
   339 00001398 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   340 000013A0 <res 638h>          <1>     DiskStack   resq 199
   341 000019D8 ????????????????    <1>     DiskStakTop resq 1
   342                              <1> 
   343 000019E0 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   344 000019E1 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   345                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   346 000019E2 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   347 00001A52 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   348                              <1> ;Exception handler vars in SDA now 
   349 00001A7A <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   350 00001A8A ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   351                              <1>     sdaLen      equ     $ - sda 
   352                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   353                              <1> 
   354                              <1> ;Additional variables NOT in the SDA
   355 00001A8B ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   356 00001A93 ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   357 00001A94 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   358                              <1>     ;for saving the current header when quickly doing a second request
   359                              <1> 
   360 00001ABE ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   361 00001ABF ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   362                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   363                              <1> inExtASCII:
   364 00001AC1 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   365 00001AC2 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   366                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   367                              <1>     ; copy of the date/time record
   368                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   369                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   370                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   371                              <1>     ; to the read IDT routine".
   372                              <1>     dosIdtPtr:          ;41h/25h will always read a new copy of IDT here
   373 00001AC4 ????                <1>         .limit  dw ?
   374 00001AC6 ????????????????    <1>         .base   dq ?
   375                              <1>     dSegLen     equ     $
    20                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    21                                  %define currSegVBase section.resSeg.vstart
    22                                  %include "./src/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5 00000000 00                  <1> dosMajor    db 00h      ;Version 0
     6 00000001 5F                  <1> dosMinor    db 95      ;.95
     7 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
     7 0000000B 535953              <1>
     8 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
     8 00000017 535953              <1>
     9                              <1> ;-----------------------------------:
    10                              <1> ;        Static Data Tables         :
    11                              <1> ;-----------------------------------:
    12                              <1> ;IO Char table
    13                              <1> ;This table has Request header length, command code and error flags
    14                              <1> ; as a packed DWORD entry
    15                              <1> ioRqCmdErrTbl:
    16                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    17                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    18 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    19 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    20 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    21 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    22 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    23 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    28                              <1> ; wish to install their own custom logic.
    29 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    30 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    31 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    32                              <1> ;Extended ASCII keys with special meanings
    33 0000003C 3B                  <1> extKeyTbl   db eF1
    34 0000003D 6526                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    35 0000003F 3C                  <1>             db eF2
    36 00000040 5726                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    37 00000042 3D                  <1>             db eF3
    38 00000043 5E26                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    39 00000045 3E                  <1>             db eF4
    40 00000046 9326                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    41 00000048 3F                  <1>             db eF5
    42 00000049 D826                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    43 0000004B 40                  <1>             db eF6
    44 0000004C EE26                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    45 0000004E 41                  <1>             db eF7
    46 0000004F F526                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    47 00000051 4B                  <1>             db eCursL
    48 00000052 BC25                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    49 00000054 4D                  <1>             db eCursR
    50 00000055 6526                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    51 00000057 52                  <1>             db eIns
    52 00000058 0027                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    53 0000005A 53                  <1>             db eDel
    54 0000005B 0727                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    55                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    56                              <1> 
    57                              <1> ;When counting the number of days, first compute the number of years since
    58                              <1> ; 1980 and your year. 
    59                              <1> ;Then, using the table below, find the number of leap years between 1980
    60                              <1> ; and (YourYear - 1). 
    61                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    62                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    63                              <1> ;
    64                              <1> ;Use the months table to get the number of days in a normal month as leap 
    65                              <1> ; years are added using the previous comment.
    66                              <1> 
    67                              <1> ;This table is the number of days in the month
    68                              <1> ;The function which updates the days in Feb writes the number to this table
    69                              <1> monthsTbl:  
    70 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    70 00000066 1F1E1F              <1>
    71                              <1> 
    72                              <1> ;Error tables
    73                              <1> errXlatTbl:
    74                              <1> ;Each entry is n bytes long, defined as
    75                              <1> ; Byte 0      : DOS function number for which translation will occur
    76                              <1> ; Byte 1      : Length of the table entry - 2
    77                              <1> ; Bytes n - 3 : Acceptable Error codes
    78                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
    79                              <1> ;The table is terminated with a single -1 byte
    80                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
    81                              <1> ; only on entry to a disk function
    82 00000069 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
    83 0000006D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
    84 00000072 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
    85 00000078 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
    86 0000007C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
    87 00000082 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
    88 00000089 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
    89 0000008C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
    90 00000090 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
    91 00000094 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
    92 00000099 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
    93 0000009D 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
    94 000000A3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
    95 000000AA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
    96 000000AE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
    97 000000B2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
    98 000000B5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
    99 000000B9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   100 000000BD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   101 000000C2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   102 000000CA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   103 000000CC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   104 000000D1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   105 000000D4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   106 000000DA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   107 000000DE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   108 000000E1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   109 000000E7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   110 000000EE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   111 000000F4 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   112 000000F8 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   113 000000FC 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   114 00000101 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   115 00000104 FF                  <1>     db -1   ;End Of Table marker
   116                              <1> 
   117                              <1> 
   118                              <1> extErrTbl:
   119                              <1> ;This table contains the default values for how to respond
   120                              <1> ; to particular errors. Fields with -1 need to be filled in before
   121                              <1> ; setting variables using this table.
   122                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   123                              <1> ; Byte 0: Extended Error Code as a byte
   124                              <1> ; Byte 1: Error Class
   125                              <1> ; Byte 2: Error Suggested Action
   126                              <1> ; Byte 3: Error Locus
   127                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   128                              <1> ;
   129                              <1> ;Error 01: Invalid function number
   130 00000105 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   131                              <1> ;Error 02: File not found
   132 00000109 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   133                              <1> ;Error 03: Path not found
   134 0000010D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   135                              <1> ;Error 04: Too many open handles, and no handles are left
   136 00000111 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   137                              <1> ;Error 05: Access being denied
   138 00000115 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   139                              <1> ;Error 06: Invalid File handle being provided
   140 00000119 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   141                              <1> ;Error 07: MCB chain destroyed
   142 0000011D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   143                              <1> ;Error 08: No Memory remaining
   144 00000121 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   145                              <1> ;Error 09: Invalid MCB block Address
   146 00000125 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   147                              <1> ;Error 0A: Bad Environment block
   148 00000129 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   149                              <1> ;Error 0B: Data provided in a bad format
   150 0000012D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   151                              <1> ;Error 0C: Access Code Invalid
   152 00000131 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   153                              <1> ;Error 0D: Error due to Invalid Data provided
   154 00000135 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   155                              <1> ;Error 0F: Error due to a bad drive letter being provided
   156 00000139 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   157                              <1> ;Error 10: Error due to attempting to delete the CWD
   158 0000013D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   159                              <1> ;Error 11: Error due to a unknown device being used
   160 00000141 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   161                              <1> ;Error 12: No more file handles available
   162 00000145 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   163                              <1> ;Error 50: Network request not supported
   164 00000149 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   165                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   166 0000014D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   167                              <1> ;Error 21: File Locking Violation
   168 00000151 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   169                              <1> ;Error 54: Too many levels of redirection error
   170 00000155 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   171                              <1> ;Error 56: Bad resource password provided
   172 00000159 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   173                              <1> ;Error 52: Directory already exists
   174 0000015D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   175                              <1> ;Error 32: Network request not supported by DOS
   176 00000161 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   177                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   178 00000165 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   179                              <1> ;Error 57: Bad parameter in request
   180 00000169 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   181                              <1> ;Error 53: Fail was returned from Int 44h
   182 0000016D 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   183                              <1> ;Error 24: Sharing Buffer Full
   184 00000171 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   185 00000175 FFFFFFFF            <1>     dd -1   ;End of table signature
   186                              <1> 
   187                              <1> ;Nationalisation stuff
   188 00000179 0000                <1> defaultCodePage:    dw 0    ;For now, set to 0, needs to be GB CP
   189                              <1> charTableArray:
   190 0000017B 0500                <1>     dw 5    ;5 entries (this word inclusive)
   191                              <1> .ucTable:
   192 0000017D 02                  <1>     db 2
   193 0000017E [CE01000000000000]  <1>     dq ucTblExt     ;Needs fixup
   194                              <1> .filenameUCTable:
   195 00000186 04                  <1>     db 4
   196 00000187 [5002000000000000]  <1>     dq fileUCTblExt ;Needs fixup
   197                              <1> .filenameTerminatingTable:
   198 0000018F 05                  <1>     db 5
   199 00000190 [D202000000000000]  <1>     dq fileTermTblExt   ;Needs fixup
   200                              <1> .collatingTable:
   201 00000198 06                  <1>     db 6
   202 00000199 [0203000000000000]  <1>     dq collTblExt  ;Needs fixup
   203                              <1> ;Extended country table
   204                              <1> extCtryTbl:
   205 000001A1 01                  <1>     db 1    ;infoIDCode (always 1)
   206 000001A2 2A00                <1>     dw 42   ;Total length of the structure
   207 000001A4 0000                <1>     dw 0    ;Current (Active) Country ID
   208 000001A6 0000                <1>     dw 0    ;Current (Active) Code page
   209                              <1> ;Regular country table
   210                              <1> ctryTbl:
   211                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   212 000001A8 0100                <1>     dw 1    ;Date format, UK style
   213 000001AA 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   214 000001AF 2C00                <1>     db ",",0    ;Thousand separator
   215 000001B1 2E00                <1>     db ".",0    ;Decimal separator
   216 000001B3 2D00                <1>     db "-",0    ;Date separator
   217 000001B5 3A00                <1>     db ":",0    ;Time separator
   218 000001B7 00                  <1>     db 0        ;Currency format, symbol leads with no space
   219 000001B8 02                  <1>     db 2        ;Number of digits after decimal point
   220 000001B9 00                  <1>     db 0        ;Time format, 12hr clock
   221 000001BA 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   222 000001C2 2C00                <1>     db ",",0    ;Data list separator
   223 000001C4 000000000000000000- <1>     db 10 dup (0)
   223 000001CD 00                  <1>
   224                              <1> 
   225                              <1> ucTblExt:   ;External pointer to the uppercase table
   226 000001CE 8000                <1>     dw 80h
   227                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   228 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   228 000001D9 4545494949          <1>
   229 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   229 000001E7 5559999A9B          <1>
   230 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   230 000001F5 A5A6A7A8            <1>
   231 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   231 00000202 B2B3B4              <1>
   232 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   232 0000020E BEBFC0              <1>
   233 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   233 0000021A CACBCC              <1>
   234 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   234 00000226 D6D7D8              <1>
   235 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   235 00000232 E2E3E4              <1>
   236 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   236 0000023E EEEFF0              <1>
   237 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   237 0000024A FAFBFC              <1>
   238 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   239                              <1> 
   240                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   241 00000250 8000                <1>     dw 80h
   242                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   243 00000252 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   243 0000025B 4545494949          <1>
   244 00000260 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   244 00000269 5559999A9B          <1>
   245 0000026E 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   245 00000277 A5A6A7A8            <1>
   246 0000027B A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   246 00000284 B2B3B4              <1>
   247 00000287 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   247 00000290 BEBFC0              <1>
   248 00000293 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   248 0000029C CACBCC              <1>
   249 0000029F CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   249 000002A8 D6D7D8              <1>
   250 000002AB D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   250 000002B4 E2E3E4              <1>
   251 000002B7 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   251 000002C0 EEEFF0              <1>
   252 000002C3 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   252 000002CC FAFBFC              <1>
   253 000002CF FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   254                              <1> 
   255                              <1> fileTermTblExt:
   256 000002D2 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   257 000002D4 01                  <1>     db 1    ;Signature byte for the table (1)
   258 000002D5 00                  <1>     db 0    ;Lowest permissible char value for filename
   259 000002D6 FF                  <1>     db -1   ;Highest permissible char value for filename
   260 000002D7 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   261 000002D8 00                  <1>     db 0    ;Start of the illegal range of filename chars
   262 000002D9 20                  <1>     db 20h  ;End of the illegal range of filename chars
   263 000002DA 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   264                              <1> fileTermTbl:
   265 000002DB 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   266 000002DC 2E222F5C5B5D3A7C3C- <1>     db ".", 022h, "/", "\", "[", "]", ":", "|", "<",">","+","=",";",02Ch
   266 000002E5 3E2B3D3B2C          <1>
   267                              <1>     fileTermTbl_len equ $ - fileTermTbl
   268                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   269 000002EA 000000000000000000- <1>     db 24 dup (0) ;DOS 3.3 has this buffer present
   269 000002F3 000000000000000000- <1>
   269 000002FC 000000000000        <1>
   270                              <1> 
   271                              <1> collTblExt:  ;Collating sequence table, for sorting
   272 00000302 0001                <1>     dw 0100h
   273                              <1> collTbl:
   274 00000304 000000000000000000- <1>     db 256 dup (0)
   274 0000030D 000000000000000000- <1>
   274 00000316 000000000000000000- <1>
   274 0000031F 000000000000000000- <1>
   274 00000328 000000000000000000- <1>
   274 00000331 000000000000000000- <1>
   274 0000033A 000000000000000000- <1>
   274 00000343 000000000000000000- <1>
   274 0000034C 000000000000000000- <1>
   274 00000355 000000000000000000- <1>
   274 0000035E 000000000000000000- <1>
   274 00000367 000000000000000000- <1>
   274 00000370 000000000000000000- <1>
   274 00000379 000000000000000000- <1>
   274 00000382 000000000000000000- <1>
   274 0000038B 000000000000000000- <1>
   274 00000394 000000000000000000- <1>
   274 0000039D 000000000000000000- <1>
   274 000003A6 000000000000000000- <1>
   274 000003AF 000000000000000000- <1>
   274 000003B8 000000000000000000- <1>
   274 000003C1 000000000000000000- <1>
   274 000003CA 000000000000000000- <1>
   274 000003D3 000000000000000000- <1>
   274 000003DC 000000000000000000- <1>
   274 000003E5 000000000000000000- <1>
   274 000003EE 000000000000000000- <1>
   274 000003F7 000000000000000000- <1>
   274 00000400 00000000            <1>
   275                              <1> 
   276                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars
   277 00000404 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   277 0000040D F0F6F6              <1>
   278 00000410 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   278 00000419 F6F6F6              <1>
   279 0000041C F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   279 00000425 FFF6FF              <1>
   280 00000428 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   280 00000431 FFFEF6              <1>
   281 00000434 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   281 0000043D FFF4F4              <1>
   282 00000440 F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   282 00000449 FFFFFF              <1>
   283 0000044C FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   283 00000455 FFFFFF              <1>
   284 00000458 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   284 00000461 F6FFFF              <1>
   285 00000464 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   285 0000046D FFFFFF              <1>
   286 00000470 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   286 00000479 FFFFFF              <1>
   287 0000047C FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   288                              <1> 
   289                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   290 00000484 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   290 0000048D 090A0B0C0D0E0F      <1>
   291 00000494 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   291 0000049D 191A1B1C1D1E1F      <1>
   292 000004A4 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   292 000004AD 3D3E3F5B5C5D7C      <1>
   293                              <1> badDirNameCharL equ $ - badDirNameChar
   294                              <1> ;The chars * ? . \ / need to always be handled separately
   295                              <1> 
   296                              <1> 
   297                              <1> hardErrorStack:
   298 000004B4 13                  <1>     db errWpd
   299 000004B5 0B                  <1>     db eClsMedia
   300 000004B6 07                  <1>     db eActRetUsr
   301 000004B7 02                  <1>     db eLocDsk
    23                                  %include "./src/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000004B8 E350                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 000004BA C51B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 000004BC D21B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 000004BE A61C                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 000004C0 CF1C                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 000004C2 D71C                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 000004C4 EF1C                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 000004C6 221D                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 000004C8 471D                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 000004CA A61D                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 000004CC 5920                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 000004CE B51D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 000004D0 C11D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 000004D2 0E6A                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 000004D4 406A                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 000004D6 0F28                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 000004D8 0F28                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 000004DA 9825                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 000004DC 5126                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 000004DE D826                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 000004E0 0F28                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 000004E2 0F28                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 000004E4 FA27                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 000004E6 0727                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 000004E8 C36C                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 000004EA 596A                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 000004EC C527                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 000004EE 606A                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 000004F0 626A                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 000004F2 C36C                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 000004F4 C36C                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 000004F6 F86A                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 000004F8 C36C                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 000004FA 0F28                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000004FC 0F28                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000004FE 7227                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 00000500 0F28                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 00000502 AB6A                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 00000504 E84F                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 00000506 0F28                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 00000508 0F28                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 0000050A EB27                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 0000050C D222                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 0000050E F922                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 00000510 FF22                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 00000512 2023                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 00000514 D56A                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 00000516 D827                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 00000518 E36A                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 0000051A B550                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 0000051C FA6A                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 0000051E 5469                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 00000520 326B                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 00000522 436B                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 00000524 526B                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 00000526 6759                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 00000528 9059                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 0000052A A712                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 0000052C D714                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 0000052E B016                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 00000530 042A                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 00000532 152A                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 00000534 3F2B                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 00000536 7E2B                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 00000538 B92B                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 0000053A C52B                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 0000053C 2A2C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 0000053E 992C                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 00000540 3A45                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 00000542 B12D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 00000544 EC2D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 00000546 7817                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 00000548 804A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 0000054A 844C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 0000054C 8C4D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 0000054E 2F52                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 00000550 E550                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 00000552 966B                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 00000554 012E                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 00000556 6C2E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 00000558 8269                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 0000055A 8B69                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 0000055C A46B                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 0000055E B56B                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000560 936C                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000562 D54F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000564 9C2E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 00000566 282F                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 00000568 344F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000056A 9A6C                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 0000056C 702F                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 0000056E 3830                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000570 4C30                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000572 C46C                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000574 886E                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 00000576 EE6E                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 00000578 F317                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000057A A569                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 0000057C 9469                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 0000057E C36C                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000580 9D69                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000582 BF59                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000584 BF59                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 00000586 B830                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 00000588 F531                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109 0000058A C36C                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000058C 26                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000058D CC6E                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 0000058F 0F3A                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000591 EB62                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000593 CF6E                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000595 3364                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000597 001B                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 00000599 9059                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000059B 6400                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000059D F743                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 0000059F 9600                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 000005A1 B26F                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 000005A3 3A6F                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 000005A5 DA36                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 000005A7 B124                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 000005A9 A400                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 000005AB BE00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 000005AD CC00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 000005AF 8F64                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 000005B1 7164                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 000005B3 3F64                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 000005B5 BD65                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 000005B7 DF00                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   136 000005B9 0F43                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 000005BB 0164                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 000005BD 1963                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 000005BF A663                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 000005C1 FC0B                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 000005C3 4424                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 000005C5 EF6B                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   143 000005C7 EF6B                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   144 000005C9 A864                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 000005CB 5763                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 000005CD 4443                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 000005CF 1517                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 000005D1 1A68                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 000005D3 4011                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 000005D5 176F                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 000005D7 6664                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1> mDispTblL   equ     $ - mDispTbl
   153                              <1> 
   154                              <1> serverDispTbl:  ;Server Dispatch functions
   155 000005D9 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   156 000005DA EA6B                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   157 000005DC 3C6C                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   158 000005DE 956C                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   159 000005E0 A66C                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   160 000005E2 AE6C                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   161 000005E4 B66C                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   162 000005E6 D16C                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   163 000005E8 FB6C                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   164 000005EA FB6C                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   165 000005EC FB6C                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   166 000005EE 086D                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   167                              <1> serverDispTblL   equ     $ - serverDispTbl
    24                                  %if DEBUG
    25                                  %include "./src/Debug/debug.asm"
    26                                  %endif
    27                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000005F0 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12 000005F7 7428                <1>     je .exit
    13 000005F9 56                  <1>     push rsi
    14 000005FA 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 00000601 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 00000604 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 00000606 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 00000609 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 0000060B 57                  <1>     push rdi
    22 0000060C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 0000060F 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 00000612 5F                  <1>     pop rdi ;Get original buf back
    25 00000613 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 00000616 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 0000061D 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 00000620 5E                  <1>     pop rsi
    29                              <1> .exit:
    30                              <1>     return
    13                              <2> %%_ret:
    14 00000621 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> 
    32                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    33                              <1> ;1 External reference
    34                              <1> ;Input: rdi = Buffer header to flush and free
    35 00000622 E844000000          <1>     call flushBuffer
    36 00000627 7206                <1>     jc .exit
    37                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    38 00000629 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    39                              <1> .exit:
    40                              <1>     return
    13                              <2> %%_ret:
    14 0000062F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    43                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    44                              <1> ;Output: rdi = First disk buffer
    45 00000630 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    46 00000637 57                  <1>     push rdi
    47                              <1> .lp:
    48 00000638 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    49 0000063C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    50 0000063F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    51 00000646 75F0                <1>     jne .lp
    52 00000648 5F                  <1>     pop rdi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00000649 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    56                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    57                              <1> ; second buffer in the chain in rdi
    58                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    59                              <1> ;Output: rdi = Second buffer in the chain
    60 0000064A 52                  <1>     push rdx
    61 0000064B 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    62 0000064E E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    63 00000653 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    64 00000656 5A                  <1>     pop rdx
    65                              <1>     return
    13                              <2> %%_ret:
    14 00000657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    68                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    69                              <1> ;Input: rdi = Buffer header to start searching at
    70                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    71                              <1> ;        ZF=ZE => No unreferenced buffer found
    72 00000658 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    73 0000065C 750C                <1>     jnz .exit
    74 0000065E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    75 00000661 4881FFFFFFFFFF      <1>     cmp rdi, -1
    76 00000668 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    77                              <1> .exit:
    78                              <1>     return
    13                              <2> %%_ret:
    14 0000066A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    79                              <1> 
    80                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    81                              <1> ;Flushes the data in a sector buffer to disk!
    82                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    83                              <1> ;Exit:  CF=NC : Success
    84                              <1> ;       CF=CY : Fail, terminate the request
    85                              <1> ;First make request to device driver
    86 0000066B 50                  <1>     push rax
    87 0000066C 53                  <1>     push rbx
    88 0000066D 51                  <1>     push rcx
    89 0000066E 52                  <1>     push rdx
    90 0000066F 56                  <1>     push rsi
    91 00000670 55                  <1>     push rbp
    92                              <1> ;If the buffer is freed, skip flushing to avoid issues
    93 00000671 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
    94 00000675 7454                <1>     je .fbFreeExit  ;If it is free exit
    95 00000677 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
    96 0000067B 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
    97                              <1> .fbRequest0:
    98 0000067D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    99 00000682 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   100 00000686 7406                <1>     jz .fbRequest1
   101 00000688 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   102                              <1> .fbRequest1:
   103 0000068E 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   104 00000691 B901000000          <1>     mov ecx, 1  ;One sector to copy
   105 00000696 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   106 0000069A 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   107 0000069E 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   108 000006A2 E87C600000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   109 000006A7 E80E5F0000          <1>     call absDiskDriverCall    ;Make Driver Request
   110 000006AC 7525                <1>     jnz .fbFail
   111                              <1> ;Now check if the buffer was a FAT, to write additional copies
   112 000006AE F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   113 000006B2 7417                <1>     jz .fbFreeExit  ;If not, exit
   114 000006B4 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   115 000006B7 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   116 000006B9 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   117 000006BC 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   118 000006C0 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   119                              <1> .fbFreeExit1:
   120 000006C5 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   121 000006C8 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   122                              <1> .fbFreeExit:
   123 000006CB F8                  <1>     clc
   124                              <1> .fbExitFail:
   125 000006CC 5D                  <1>     pop rbp
   126 000006CD 5E                  <1>     pop rsi
   127 000006CE 5A                  <1>     pop rdx
   128 000006CF 59                  <1>     pop rcx
   129 000006D0 5B                  <1>     pop rbx
   130 000006D1 58                  <1>     pop rax
   131                              <1>     return
    13                              <2> %%_ret:
    14 000006D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   132                              <1> .fbFail:
   133                              <1> ;Enter here only if the request failed
   134 000006D3 FFCE                <1>     dec esi
   135 000006D5 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   136                              <1> ;Request failed thrice, critical error call
   137 000006D7 C605(67040000)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   138 000006DE E8D0570000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   139 000006E3 3C01                <1>     cmp al, critRetry
   140 000006E5 7496                <1>     je .fbRequest0
   141                              <1>     ;Else we fail (Ignore=Fail here)
   142 000006E7 F9                  <1>     stc ;Set error flag to indicate fail
   143 000006E8 E9DFFFFFFF          <1>     jmp .fbExitFail
   144                              <1> 
   145                              <1> testDirtyBufferForDrive:    ;External linkage
   146                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   147                              <1> ;Input: al = Drive number (0 based)
   148                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   149                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   150 000006ED 53                  <1>     push rbx
   151 000006EE 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   152                              <1> .tdbfdCheckBuffer:
   153 000006F5 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   154 000006F8 7509                <1>     jne .tdbfdGotoNextBuffer
   155 000006FA F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   156 000006FE 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   157 00000700 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   158                              <1> .tdbfdExit:
   159 00000701 5B                  <1>     pop rbx
   160                              <1>     return
    13                              <2> %%_ret:
    14 00000702 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   161                              <1> .tdbfdGotoNextBuffer:
   162 00000703 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   163 00000706 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   164 0000070D 74F2                <1>     je .tdbfdExit
   165 0000070F EBE4                <1>     jmp short .tdbfdCheckBuffer
   166                              <1> 
   167                              <1> 
   168                              <1> cancelWriteThroughBuffers:  ;External linkage
   169                              <1> ; Frees all buffers for the workingDPB
   170                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   171                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   172                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   173                              <1> ; to have a drive number of -1, thus freeing it
   174                              <1> ;Given DPB is in rbp
   175 00000711 53                  <1>     push rbx
   176 00000712 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   177                              <1> .i0:
   178 00000719 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   179 0000071D 7506                <1>     jne .i1 ;If no, skip freeing
   180 0000071F 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   181                              <1> .i1:
   182 00000725 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   183 00000728 4881FBFFFFFFFF      <1>     cmp rbx, -1
   184 0000072F 75E8                <1>     jne .i0
   185                              <1> .exit:
   186 00000731 5B                  <1>     pop rbx
   187                              <1>     return
    13                              <2> %%_ret:
    14 00000732 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> ;******* NEW BUFFER HANDLING *******
   190                              <1> writeThroughBuffer: ;External linkage
   191                              <1> ; Flushes the current disk buffer to disk.
   192                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   193                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return 
   194 00000733 57                  <1>     push rdi
   195 00000734 488B3D(39070000)    <1>     mov rdi, qword [currBuff]
   196 0000073B E82BFFFFFF          <1>     call flushBuffer
   197 00000740 7204                <1>     jc short .exit
   198 00000742 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   199                              <1> .exit:
   200 00000746 5F                  <1>     pop rdi
   201                              <1>     return
    13                              <2> %%_ret:
    14 00000747 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> ;******* NEW BUFFER HANDLING *******
   203                              <1> 
   204                              <1> writeThroughBuffers:    ;External linkage
   205                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   206                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   207                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   208 00000748 50                  <1>     push rax
   209 00000749 57                  <1>     push rdi
   210 0000074A 488B05(05070000)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   211 00000751 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   212                              <1> .mainLp:
   213 00000758 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   214 0000075F 7416                <1>     je .exit   
   215 00000761 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   216 00000765 750B                <1>     jne .nextBuffer
   217 00000767 E8FFFEFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   218 0000076C 7209                <1>     jc .exit  ;If something went wrong, exit
   219 0000076E 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   220                              <1> .nextBuffer:
   221 00000772 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   222 00000775 EBE1                <1>     jmp short .mainLp
   223                              <1> .exit:
   224 00000777 5F                  <1>     pop rdi
   225 00000778 58                  <1>     pop rax
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000779 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> markBufferDirty:
   229 0000077A 55                  <1>     push rbp
   230 0000077B 9C                  <1>     pushfq
   231 0000077C 488B2D(39070000)    <1>     mov rbp, qword [currBuff]
   232 00000783 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   233 00000787 9D                  <1>     popfq
   234 00000788 5D                  <1>     pop rbp
   235                              <1>     return
    13                              <2> %%_ret:
    14 00000789 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> 
   237                              <1> 
   238                              <1> getBuffer: ;Internal Linkage ONLY
   239                              <1> ;
   240                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   241                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   242                              <1> ;Flushes if not in disk change mode. 
   243                              <1> ;If in disk change mode, will check to see if the selected buffer 
   244                              <1> ; has data referring a device using the same DPB as we are changing.
   245                              <1> ; If it is, skip flushing, if not, flush first!
   246                              <1> ;
   247                              <1> ;This function will return a pointer to the desired data sector OR 
   248                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   249                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   250                              <1> ;Entry: rax = Sector to read
   251                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   252                              <1> ;       rsi = DPB to use for transaction
   253                              <1> ;Exit:  CF=NC => 
   254                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   255                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   256 0000078A 51                  <1>     push rcx
   257 0000078B 52                  <1>     push rdx
   258 0000078C 56                  <1>     push rsi
   259 0000078D 57                  <1>     push rdi
   260 0000078E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   261 00000790 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   262 00000795 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   263 0000079C 7418                <1>     je .rbReadNewSector
   264 0000079E 48893D(39070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   265 000007A5 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   266                              <1> .rbExit:
   267 000007A9 F8                  <1>     clc
   268                              <1> .rbExitNoFlag:
   269 000007AA 5F                  <1>     pop rdi
   270 000007AB 5E                  <1>     pop rsi
   271 000007AC 5A                  <1>     pop rdx
   272 000007AD 59                  <1>     pop rcx
   273 000007AE 488B1D(39070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   274                              <1>     return
    13                              <2> %%_ret:
    14 000007B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> .rbReadNewSector:
   276 000007B6 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   277 000007BB 803D(E0190000)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   278 000007C2 7506                <1>     jne .flush  ;We are not, flush buffer
   279 000007C4 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   280 000007C8 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   281                              <1> .flush:
   282 000007CA E853FEFFFF          <1>     call flushAndFreeBuffer
   283 000007CF 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   284                              <1> .skipFlush:
   285                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   286                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   287                              <1>     ; is no longer owned by that File so we mark the owner as none
   288 000007D1 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   289 000007D9 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   290 000007DC 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   291 000007DF 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   292 000007E3 80F902              <1>     cmp cl, fatBuffer
   293 000007E6 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   294 000007E8 7503                <1>     jne .rbNonFATbuffer
   295 000007EA 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   296                              <1> .rbNonFATbuffer:
   297 000007ED 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   298 000007F0 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   299 000007F3 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   300 000007F6 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   301 000007FA C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   302 000007FE E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   303 00000803 72A5                <1>     jc .rbExitNoFlag
   304 00000805 EBA2                <1>     jmp short .rbExit
   305                              <1> 
   306                              <1> readSectorBuffer:   ;Internal Linkage
   307                              <1> ;Reads a sector into a built sector buffer
   308                              <1> ;Entry: rdi = Pointer to buffer header
   309                              <1> ;Exit:  CF=NC : Success
   310                              <1> ;       CF=CY : Fail, terminate the request
   311                              <1> ;       rbx pointing to buffer header
   312                              <1> ;First make request to device driver
   313 00000807 50                  <1>     push rax
   314 00000808 53                  <1>     push rbx
   315 00000809 51                  <1>     push rcx
   316 0000080A 52                  <1>     push rdx
   317 0000080B 56                  <1>     push rsi
   318 0000080C 55                  <1>     push rbp
   319                              <1> .rsRequest0:
   320 0000080D BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   321 00000812 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   322 00000816 7406                <1>     jz .rsRequest1
   323 00000818 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   324                              <1> .rsRequest1:
   325 0000081E 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   326 00000821 B901000000          <1>     mov ecx, 1  ;One sector to copy
   327 00000826 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   328 0000082A 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   329 0000082E 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   330 00000832 E8F75E0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   331 00000837 E87E5D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   332 0000083C 7508                <1>     jnz .rsFail
   333                              <1> .rsExit:
   334 0000083E F8                  <1>     clc
   335                              <1> .rsExitFail:
   336 0000083F 5D                  <1>     pop rbp
   337 00000840 5E                  <1>     pop rsi
   338 00000841 5A                  <1>     pop rdx
   339 00000842 59                  <1>     pop rcx
   340 00000843 5B                  <1>     pop rbx
   341 00000844 58                  <1>     pop rax
   342                              <1>     return
    13                              <2> %%_ret:
    14 00000845 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .rsFail:
   344                              <1> ;Enter here only if the request failed
   345 00000846 FFCE                <1>     dec esi
   346 00000848 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   347                              <1> ;Request failed thrice, critical error call
   348                              <1> ;First free the buffer if we failed to read data into it 
   349 0000084A 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   350 0000084E 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   351 00000854 C605(67040000)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   352 0000085B E853560000          <1>     call diskDevErr
   353 00000860 3C01                <1>     cmp al, critRetry
   354 00000862 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   355 00000864 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   356 00000868 EBA3                <1>     jmp short .rsRequest0
   357                              <1> .fail:
   358 0000086A F9                  <1>     stc ;Set error flag to indicate fail
   359 0000086B E9CFFFFFFF          <1>     jmp .rsExitFail
   360                              <1>     
   361                              <1> findLRUBuffer: ;Internal Linkage
   362                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   363                              <1> ; in rbx and the currBuff variable
   364                              <1> ;Input: Nothing
   365                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   366                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   367 00000870 52                  <1>     push rdx
   368 00000871 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   369 00000878 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   370 0000087C 7436                <1>     je .flbExit 
   371 0000087E 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   372 00000885 742D                <1>     je .flbExit
   373                              <1> .flbWalk:
   374 00000887 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   375 0000088A 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   376 0000088D 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   377 00000891 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   378 00000893 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   379 0000089A 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   380 0000089C 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   381                              <1> .flbHeadLink:
   382 000008A3 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   383 000008AA 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   384 000008B1 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   385                              <1> .flbExit:
   386 000008B4 5A                  <1>     pop rdx
   387 000008B5 48893D(39070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   388                              <1>     return
    13                              <2> %%_ret:
    14 000008BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .flbFreeLink:
   390 000008BD 51                  <1>     push rcx
   391 000008BE 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   392 000008C1 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   393 000008C4 59                  <1>     pop rcx
   394 000008C5 EBDC                <1>     jmp short .flbHeadLink
   395                              <1> 
   396                              <1> findSectorInBuffer:     ;Internal linkage
   397                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   398                              <1> ;If the sector is not in a buffer, returns with a -1
   399                              <1> ;Input: rax = Sector number
   400                              <1> ;       dl = Drive number
   401                              <1> ;Output: rdi = Buffer hdr pointer or -1
   402 000008C7 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   403                              <1> .fsiCheckBuffer:
   404 000008CE 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   405 000008D1 7507                <1>     jne .fsiGotoNextBuffer
   406 000008D3 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   407 000008D7 7501                <1>     jne .fsiGotoNextBuffer
   408                              <1> .fsiExit:
   409                              <1>     return
    13                              <2> %%_ret:
    14 000008D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .fsiGotoNextBuffer:
   411 000008DA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   412 000008DD 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   413 000008E4 74F3                <1>     je .fsiExit
   414 000008E6 EBE6                <1>     jmp short .fsiCheckBuffer
   415                              <1> 
   416                              <1> ;-----------------------------------------------------------------------------
   417                              <1> ;SPECIAL BUFFER FUNCTIONS
   418                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   419                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   420                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   421                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   422                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   423                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   424                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   425                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   426                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   427                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   428                              <1> ;-----------------------------------------------------------------------------
   429                              <1> getBufForDataNoFile:
   430                              <1> ;Returns a buffer to use for disk data in rbx
   431                              <1> ;Requires a File Handle.
   432                              <1> ;Input: [workingDPB] = DPB to transact on
   433                              <1> ;       rax = Sector to transfer
   434                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   435 000008E8 51                  <1>     push rcx
   436 000008E9 B108                <1>     mov cl, dataBuffer
   437 000008EB 56                  <1>     push rsi
   438 000008EC 57                  <1>     push rdi
   439 000008ED 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 000008F4 E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   441 000008F9 725F                <1>     jc getBufCommon.exit
   442 000008FB 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   443 00000903 EB55                <1>     jmp short getBufCommon.exit
   444                              <1> getBufForDirNoFile:
   445                              <1> ;Returns a buffer to use for disk dir data in rbx
   446                              <1> ;Requires a File Handle.
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 00000905 51                  <1>     push rcx
   451 00000906 B104                <1>     mov cl, dirBuffer
   452 00000908 56                  <1>     push rsi
   453 00000909 57                  <1>     push rdi
   454 0000090A 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   455 00000911 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   456 00000916 7242                <1>     jc getBufCommon.exit
   457 00000918 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   458 00000920 EB38                <1>     jmp short getBufCommon.exit
   459                              <1> getBufForFat:
   460                              <1> ;Returns a buffer to use for fat data in rbx
   461                              <1> ;Input: [workingDPB] = DPB to transact on
   462                              <1> ;       rax = Sector to transfer
   463                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   464 00000922 51                  <1>     push rcx
   465 00000923 B102                <1>     mov cl, fatBuffer
   466 00000925 EB03                <1>     jmp short getBufCommon2
   467                              <1> getBufForDOS:
   468                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000927 51                  <1>     push rcx
   473 00000928 B101                <1>     mov cl, dosBuffer
   474                              <1> getBufCommon2:
   475 0000092A 56                  <1>     push rsi
   476 0000092B 57                  <1>     push rdi    ;Push rdi to preserve it
   477 0000092C 488B35(05070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   478 00000933 EB15                <1>     jmp short getBufCommon.makeReq
   479                              <1> getBufForDir:
   480                              <1> ;Returns a buffer to use for disk directory data in rbx
   481                              <1> ;Input: [currentSFT] = File to manipulate
   482                              <1> ;       rax = Sector to transfer
   483                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   484 00000935 51                  <1>     push rcx
   485 00000936 B104                <1>     mov cl, dirBuffer
   486 00000938 EB03                <1>     jmp short getBufCommon
   487                              <1> getBufForData:
   488                              <1> ;Returns a buffer to use for disk data in rbx
   489                              <1> ;Requires a File Handle.
   490                              <1> ;Input: [currentSFT] = File to manipulate
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 0000093A 51                  <1>     push rcx
   494 0000093B B108                <1>     mov cl, dataBuffer
   495                              <1> getBufCommon:
   496 0000093D 56                  <1>     push rsi
   497 0000093E 57                  <1>     push rdi
   498 0000093F 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
   499 00000946 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   500                              <1> .makeReq:
   501 0000094A E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   502 0000094F 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   503                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   504                              <1>     ; flushed to the file!
   505                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   506                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   507                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   508 00000951 F6C103              <1>     test cl, dosBuffer | fatBuffer
   509 00000954 7504                <1>     jnz .exit
   510 00000956 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   511                              <1> .exit:
   512 0000095A 5F                  <1>     pop rdi
   513 0000095B 5E                  <1>     pop rsi
   514 0000095C 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 0000095D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> 
   517                              <1> flushFile:
   518                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   519                              <1> ; FAT/DOS buffers to flush
   520                              <1> ; We flush and free, and set to head of chain before continuing to search
   521                              <1> ;Input: rdi = is the file (sft) we wish to flush
   522                              <1> ;Output: CF=NC => All ok
   523                              <1> ;        CF=CY => A sector failed, exit. 
   524 0000095E 57                  <1>     push rdi
   525 0000095F 56                  <1>     push rsi
   526                              <1>     ;First check if the file has been written to?
   527 00000960 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   528 00000966 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   529 00000968 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   530 0000096B 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   531                              <1> .ffLoop:
   532 00000972 4881FFFFFFFFFF      <1>     cmp rdi, -1
   533 00000979 741B                <1>     je .exit
   534 0000097B F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   535 0000097F 751E                <1>     jnz .found  ;Flush if either bit is set
   536 00000981 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   537 00000989 7414                <1>     je .found
   538 0000098B 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   539 0000098F 740E                <1>     je .found
   540 00000991 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   541 00000994 EBDC                <1>     jmp short .ffLoop
   542                              <1> .exit:
   543                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   544 00000996 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   545                              <1> .exitNoFlush:
   546 0000099C 5E                  <1>     pop rsi
   547 0000099D 5F                  <1>     pop rdi
   548                              <1>     return
    13                              <2> %%_ret:
    14 0000099E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> .found:
   550                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   551                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   552 0000099F E87EFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   553 000009A4 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   554                              <1>     ;If the sector has been successfully flushed, then it
   555                              <1>     ; is no longer owned by that File so we mark the owner as none
   556 000009A6 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   557 000009AE E897FCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   558 000009B3 EBBD                <1>     jmp short .ffLoop
    28                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 000009B5 53                  <1>     push rbx
     9 000009B6 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    10 000009B9 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 000009BE 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 000009C4 730C                <1>     jae .exit
    13 000009C6 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 000009C8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 000009CE 7302                <1>     jae .exit
    16 000009D0 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 000009D2 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 000009D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 000009D4 53                  <1>     push rbx
    29 000009D5 55                  <1>     push rbp
    30 000009D6 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    31 000009DD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 000009E0 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 000009E6 731E                <1>     jae .fat32
    34 000009E8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 000009EE 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 000009F0 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 000009F2 6801000000          <1>     push qword 1
    39 000009F7 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 000009F9 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 000009FB D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 000009FD 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 000009FF 6800000000          <1>     push qword 0
    45 00000A04 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A06 6802000000          <1>     push qword 2
    48 00000A0B C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A0E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A12 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A14 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A16 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A1A 01D8                <1>     add eax, ebx
    56 00000A1C 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A1D 5D                  <1>     pop rbp
    58 00000A1E 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A20 51                  <1>     push rcx
    68 00000A21 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A23 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A25 482D02000000        <1>     sub rax, 2
    72 00000A2B 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    73 00000A2E 48D3E0              <1>     shl rax, cl
    74 00000A31 31C9                <1>     xor ecx, ecx
    75 00000A33 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A36 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A39 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A3B 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A3E E872FFFFFF          <1>     call getFATtype
    83 00000A43 81F902000000        <1>     cmp ecx, 2
    84 00000A49 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000A4B 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000A4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000A4D 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A4F 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    97 00000A51 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000A52 89C3                <1>     mov ebx, eax
   100 00000A54 E8C9010000          <1>     call readFAT
   101 00000A59 7209                <1>     jc .exit
   102 00000A5B 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000A60 75F0                <1>     jne .lp
   104 00000A62 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000A64 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000A65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000A66 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A68 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   116 00000A6A 51                  <1>     push rcx
   117 00000A6B 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000A6D FFC1                <1>     inc ecx
   120 00000A6F E8AE010000          <1>     call readFAT
   121 00000A74 7209                <1>     jc .exit
   122 00000A76 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000A7B 75F0                <1>     jne .lp
   124 00000A7D 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000A7F 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000A80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000A81 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000A83 74FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   139 00000A85 53                  <1>     push rbx
   140 00000A86 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000A89 89C3                <1>     mov ebx, eax
   143 00000A8B E892010000          <1>     call readFAT
   144 00000A90 7206                <1>     jc .exit
   145 00000A92 FFC9                <1>     dec ecx
   146 00000A94 75F3                <1>     jnz .lp
   147 00000A96 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000A98 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000A99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000A9A 53                  <1>     push rbx
   157 00000A9B 56                  <1>     push rsi
   158 00000A9C E862000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AA1 721A                <1>     jc .exit    ;Disk read error?
   160 00000AA3 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000AA8 7413                <1>     je .exit
   162 00000AAA BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000AAF 89C3                <1>     mov ebx, eax
   164 00000AB1 E80D020000          <1>     call writeFAT   ;Propagate the CF 
   165 00000AB6 89D8                <1>     mov eax, ebx
   166 00000AB8 E8BC020000          <1>     call decrementFreeClusterCount
   167                              <1> .exit:
   168 00000ABD 5E                  <1>     pop rsi
   169 00000ABE 5B                  <1>     pop rbx
   170                              <1>     return
    13                              <2> %%_ret:
    14 00000ABF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> allocateClusters:
   173                              <1> ;Working dpb must be set. 
   174                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   175                              <1> ;       ebx = Cluster to link to the new cluster
   176                              <1> ;Output:    
   177                              <1> ;   CF=NC => Complete.
   178                              <1> ;   If eax = -1, then no more free clusters. 
   179                              <1> ;   CF=CY => Hard error, exit
   180                              <1> ; ecx always has number of allocated clusters
   181 00000AC0 F8                  <1>     clc ;Always clear the flags before starting
   182 00000AC1 53                  <1>     push rbx
   183 00000AC2 56                  <1>     push rsi
   184 00000AC3 51                  <1>     push rcx    ;Save tfr count on stack
   185 00000AC4 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   186                              <1> .allocateLoop:
   187 00000AC7 E837000000          <1>     call findFreeCluster
   188 00000ACC 722B                <1>     jc .exit
   189 00000ACE 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   190 00000AD3 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   191                              <1>     ;eax has first free cluster value to use
   192                              <1>     ;First we link the previous cluster to this cluster
   193 00000AD5 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   194 00000ADA 50                  <1>     push rax
   195 00000ADB E8E3010000          <1>     call writeFAT   ;Allocate this cluster first
   196 00000AE0 58                  <1>     pop rax
   197 00000AE1 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   198 00000AE3 E891020000          <1>     call decrementFreeClusterCount
   199                              <1>     ;eax points to this allocated cluster
   200                              <1>     ;ebx points to the previous last cluster
   201 00000AE8 89C6                <1>     mov esi, eax    ;New cluster as "value"
   202 00000AEA 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   203 00000AEC E8D2010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   204 00000AF1 7206                <1>     jc .exit
   205 00000AF3 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   206 00000AF5 FFC9                <1>     dec ecx ;One less cluster allocated
   207 00000AF7 75CE                <1>     jnz .allocateLoop
   208                              <1> .exit:
   209 00000AF9 5E                  <1>     pop rsi ;Pop the tfr count into esi
   210 00000AFA 9C                  <1>     pushfq
   211 00000AFB F7D9                <1>     neg ecx
   212 00000AFD 01F1                <1>     add ecx, esi
   213 00000AFF 9D                  <1>     popfq
   214 00000B00 5E                  <1>     pop rsi
   215 00000B01 5B                  <1>     pop rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00000B02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> findFreeCluster:
   219                              <1> ;Walks the FAT to find a free cluster and returns the 
   220                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   221                              <1> ;Works on the workingDPB
   222                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   223 00000B03 53                  <1>     push rbx
   224 00000B04 52                  <1>     push rdx
   225 00000B05 55                  <1>     push rbp
   226 00000B06 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Use readFAT
   228                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   229                              <1>     ;If readFAT returns 0 then its a free cluster
   230 00000B0D B802000000          <1>     mov eax, 2  ;Start with cluster 2
   231                              <1> .fatLoop:
   232 00000B12 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   233 00000B14 E809010000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   234 00000B19 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   235 00000B1B 85C0                <1>     test eax, eax   ;Is this cluster free?
   236 00000B1D 7409                <1>     jz .exit    ;If yes, exit
   237 00000B1F 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   238 00000B23 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   239 00000B26 76EA                <1>     jbe .fatLoop
   240                              <1> .exit:
   241 00000B28 89D8                <1>     mov eax, ebx
   242 00000B2A F8                  <1>     clc
   243                              <1> .exitFail:      ;Keep carry flag
   244 00000B2B 5D                  <1>     pop rbp
   245 00000B2C 5A                  <1>     pop rdx
   246 00000B2D 5B                  <1>     pop rbx
   247                              <1>     return
    13                              <2> %%_ret:
    14 00000B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> 
   249                              <1> findFreeClusterData:
   250                              <1> ;Walks the FAT to find a free cluster and returns the 
   251                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   252                              <1> ; Also finds NumberOfFreeCLusters, if it is unknown. 
   253                              <1> ; Both fields get filled in the workingDPB
   254                              <1> ;Works on the workingDPB
   255                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   256 00000B2F 53                  <1>     push rbx
   257 00000B30 52                  <1>     push rdx
   258 00000B31 55                  <1>     push rbp
   259 00000B32 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   260 00000B39 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   261                              <1>     ;Mark dFirstFreeCluster as -1, unknown
   262 00000B3D C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dFirstFreeCluster], -1
   263                              <1>     ;Use readFAT
   264                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   265                              <1>     ;If readFAT returns 0 then its a free cluster
   266 00000B44 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   267 00000B49 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   268                              <1> .fatLoop:
   269 00000B4C 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   270 00000B4E E8CF000000          <1>     call readFAT
   271 00000B53 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   272 00000B55 85C0                <1>     test eax, eax   ;Is this cluster free?
   273 00000B57 750C                <1>     jne .fatProceed
   274 00000B59 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   275 00000B60 7413                <1>     je .fatFirst
   276 00000B62 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   277                              <1> .fatProceed:
   278 00000B65 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   279 00000B69 39D0                <1>     cmp eax, edx
   280 00000B6B 76DF                <1>     jbe .fatLoop
   281                              <1> .exit:
   282 00000B6D 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   283 00000B70 F8                  <1>     clc
   284                              <1> .exitFail:      ;Keep carry flag
   285 00000B71 5D                  <1>     pop rbp
   286 00000B72 5A                  <1>     pop rdx
   287 00000B73 5B                  <1>     pop rbx
   288                              <1>     return
    13                              <2> %%_ret:
    14 00000B74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .fatFirst:
   290                              <1> ;Set the first free cluster value in the DPB and check if we need to get a count
   291 00000B75 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   292 00000B78 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1 ;If unknown, get count
   293 00000B7F 74E4                <1>     je .fatProceed
   294 00000B81 EBEA                <1>     jmp short .exit ;Else, we have valid count so just exit
   295                              <1> 
   296                              <1> getNextSectorOfFile:
   297                              <1> ;This function will read the next sector for a file into a buffer.
   298                              <1> ;If the next sector to be read lives in the next cluster, it will update
   299                              <1> ; the vars appropriately
   300                              <1> ;
   301                              <1> ;Input: rbp = dpb pointer
   302                              <1> ;Output:
   303                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   304                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   305                              <1> ;       CF=CY => Critical error occurred and was FAILed
   306                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   307                              <1> ; next cluster and read first sector 
   308                              <1>     ;Check if we need to go to next cluster
   309 00000B83 8A05(57070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   310 00000B89 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   311 00000B8C 7416                <1>     je .gotoNextCluster
   312                              <1>     ;Goto next sector in same cluster
   313 00000B8E FE05(57070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   314 00000B94 48FF05(58070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   315 00000B9B 488B05(58070000)    <1>     mov rax, qword [currSectD]
   316                              <1> .exitOK:
   317 00000BA2 F8                  <1>     clc
   318                              <1> .exitFail:
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000BA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .gotoNextCluster:
   321 00000BA4 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   322 00000BAA E873000000          <1>     call readFAT
   323 00000BAF 72F2                <1>     jc .exitFail
   324                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   325 00000BB1 3DFFFFFFFF          <1>     cmp eax, -1
   326 00000BB6 74EA                <1>     je .exitOK
   327                              <1> ;Update the new cluster and sector information
   328 00000BB8 8905(4F070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   329 00000BBE FF05(4B070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   330 00000BC4 E857FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   331 00000BC9 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save it
   332 00000BD0 C605(57070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   333 00000BD7 EBC9                <1>     jmp short .exitOK
   334                              <1> 
   335                              <1> unlinkFAT:
   336                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   337                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   338                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   339                              <1> ; cluster must be set to EOC before this proc is called.
   340                              <1> ;Stops at first invalid cluster number.
   341                              <1> ;
   342                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   343                              <1> ;       rbp = Current DPB to use for disk
   344                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   345                              <1> 
   346 00000BD9 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   347 00000BDA 56                  <1>     push rsi
   348 00000BDB E813000000          <1>     call truncateFAT    ;Preserved eax
   349 00000BE0 720E                <1>     jc .exit
   350 00000BE2 31F6                <1>     xor esi, esi  ;Free first cluster too
   351 00000BE4 E8DA000000          <1>     call writeFAT
   352 00000BE9 7205                <1>     jc .exit
   353 00000BEB E87A010000          <1>     call incrementFreeClusterCount  ;One more cluster freed
   354                              <1> .exit:
   355 00000BF0 5E                  <1>     pop rsi
   356 00000BF1 58                  <1>     pop rax
   357                              <1>     return
    13                              <2> %%_ret:
    14 00000BF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> truncateFAT:
   360                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   361                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   362                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   363                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   364                              <1> ;Stops at first invalid cluster number.
   365                              <1> ;
   366                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   367                              <1> ;       rbp = Current DPB to use for disk
   368                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   369 00000BF3 50                  <1>     push rax
   370 00000BF4 53                  <1>     push rbx
   371 00000BF5 51                  <1>     push rcx
   372 00000BF6 56                  <1>     push rsi
   373 00000BF7 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   374                              <1> .lp:
   375 00000BF9 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   376 00000BFE 721D                <1>     jc .exit    ;Error exit
   377 00000C00 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   378 00000C02 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   379 00000C03 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   380 00000C05 E8B9000000          <1>     call writeFAT
   381 00000C0A 7211                <1>     jc .exit    ;Error exit
   382 00000C0C E859010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   383 00000C11 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   384 00000C17 7404                <1>     je .exit
   385 00000C19 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   386 00000C1B EBDC                <1>     jmp short .lp
   387                              <1> .exit:
   388 00000C1D 5E                  <1>     pop rsi
   389 00000C1E 59                  <1>     pop rcx
   390 00000C1F 5B                  <1>     pop rbx
   391 00000C20 58                  <1>     pop rax
   392                              <1>     return
    13                              <2> %%_ret:
    14 00000C21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> readFAT:
   394                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   395                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   396                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   397                              <1> ;       rbp = DPB
   398                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   399                              <1> ;If carry set, getBuffer failed!
   400 00000C22 53                  <1>     push rbx
   401 00000C23 51                  <1>     push rcx
   402 00000C24 52                  <1>     push rdx
   403 00000C25 57                  <1>     push rdi
   404 00000C26 55                  <1>     push rbp
   405 00000C27 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000C29 E8A6FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   407                              <1>     ;and FAT type in ecx
   408 00000C2E E8EFFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   409 00000C33 7237                <1>     jc .exitFail
   410                              <1>     ;Check if FAT 12, 16, 32
   411 00000C35 85C9                <1>     test ecx, ecx
   412 00000C37 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   413 00000C39 F7C101000000        <1>     test ecx, 1
   414 00000C3F 7413                <1>     jz .goToNextClusterFat32
   415                              <1>     ;Here we handle FAT16
   416 00000C41 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   417 00000C46 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   418 00000C4B 721E                <1>     jb .exit
   419 00000C4D B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   420 00000C52 EB17                <1>     jmp short .exit
   421                              <1> .goToNextClusterFat32:
   422 00000C54 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   423 00000C58 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   424 00000C5D 7207                <1>     jb .validCluster32   
   425 00000C5F B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   426 00000C64 EB05                <1>     jmp short .exit
   427                              <1> .validCluster32:
   428 00000C66 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   429                              <1> .exit:
   430 00000C6B F8                  <1>     clc
   431                              <1> .exitFail:
   432 00000C6C 5D                  <1>     pop rbp
   433 00000C6D 5F                  <1>     pop rdi
   434 00000C6E 5A                  <1>     pop rdx
   435 00000C6F 59                  <1>     pop rcx
   436 00000C70 5B                  <1>     pop rbx
   437                              <1>     return
    13                              <2> %%_ret:
    14 00000C71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .gotoNextClusterFat12:
   439                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   440                              <1> ;eax has the sector number of the FAT
   441                              <1> ;edx has byte offset into the sector
   442                              <1> ;edi has current cluster number
   443                              <1> ;rbx has ptr to buffer header
   444 00000C72 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   445 00000C78 742E                <1>     jz .gotoNextClusterFat12Even
   446                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   447 00000C7A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   448 00000C7E 29D1                <1>     sub ecx, edx
   449 00000C80 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   450 00000C82 751A                <1>     jnz .gotoNextClusterFat12NoCross
   451                              <1>     ;Boundary cross, build entry properly
   452 00000C84 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   453 00000C89 FFC0                <1>     inc eax ;Get next FAT sector
   454 00000C8B 53                  <1>     push rbx
   455 00000C8C E891FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   456 00000C91 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   457 00000C92 72D8                <1>     jc .exitFail
   458 00000C94 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   459 00000C96 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   460 00000C99 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   461 00000C9C EB14                <1>     jmp short .checkIfLastFAT12Cluster
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000C9E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000CA3 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   465 00000CA6 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   466                              <1> .gotoNextClusterFat12Even:
   467                              <1>     ;Here the cluster is even and can't cross a sector boundary
   468 00000CA8 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   469 00000CAD 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   470                              <1> .checkIfLastFAT12Cluster:
   471 00000CB2 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   472 00000CB7 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   473 00000CB9 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   474 00000CBE E9A8FFFFFF          <1>     jmp .exit
   475                              <1> 
   476                              <1> writeFAT:
   477                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   478                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   479                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   480                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   481                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   482 00000CC3 53                  <1>     push rbx
   483 00000CC4 51                  <1>     push rcx
   484 00000CC5 52                  <1>     push rdx
   485 00000CC6 56                  <1>     push rsi
   486 00000CC7 57                  <1>     push rdi
   487 00000CC8 55                  <1>     push rbp
   488 00000CC9 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   489 00000CCB E804FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   490                              <1>     ;and FAT type in ecx
   491 00000CD0 E84DFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   492 00000CD5 7223                <1>     jc .exitFail
   493                              <1>     ;Check if FAT 12, 16, 32
   494 00000CD7 85C9                <1>     test ecx, ecx
   495 00000CD9 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   496 00000CDB F7C101000000        <1>     test ecx, 1
   497 00000CE1 7407                <1>     jz .goToNextClusterFat32
   498                              <1>     ;Here we handle FAT16
   499 00000CE3 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   500 00000CE8 EB0A                <1>     jmp short .exit
   501                              <1> .goToNextClusterFat32:
   502 00000CEA 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   503 00000CF0 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   504                              <1> .exit:
   505 00000CF4 E881FAFFFF          <1>     call markBufferDirty
   506 00000CF9 F8                  <1>     clc
   507                              <1> .exitFail:
   508 00000CFA 5D                  <1>     pop rbp
   509 00000CFB 5F                  <1>     pop rdi
   510 00000CFC 5E                  <1>     pop rsi
   511 00000CFD 5A                  <1>     pop rdx
   512 00000CFE 59                  <1>     pop rcx
   513 00000CFF 5B                  <1>     pop rbx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000D00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   515                              <1> .gotoNextClusterFat12:
   516                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   517                              <1> ;eax has the sector number of the FAT
   518                              <1> ;edx has byte offset into the sector
   519                              <1> ;edi has current cluster number
   520                              <1> ;rbx has ptr to buffer header
   521 00000D01 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   522 00000D07 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   523 00000D0D 7445                <1>     jz .gotoNextClusterFat12Even
   524                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   525 00000D0F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   526 00000D13 29D1                <1>     sub ecx, edx
   527 00000D15 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   528 00000D17 752C                <1>     jnz .gotoNextClusterFat12NoCross
   529                              <1>     ;Boundary cross, build entry properly
   530                              <1>     ;Replace the high nybble of the low byte 
   531                              <1>     ;breakpoint
   532 00000D19 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   533 00000D1E 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   534 00000D24 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   535 00000D27 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   536 00000D29 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   537 00000D2C 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   538 00000D30 E845FAFFFF          <1>     call markBufferDirty
   539 00000D35 FFC0                <1>     inc eax ;Get next FAT sector
   540 00000D37 E8E6FBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   541 00000D3C 72BC                <1>     jc .exitFail
   542 00000D3E 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   543 00000D40 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   544 00000D43 EBAF                <1>     jmp short .exit
   545                              <1> .gotoNextClusterFat12NoCross:
   546 00000D45 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   547 00000D4A 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   548 00000D4F C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   549 00000D52 EB0A                <1>     jmp short .fat12common
   550                              <1> .gotoNextClusterFat12Even:
   551                              <1>     ;Here the cluster is even and can't cross a sector boundary
   552 00000D54 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000D59 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   554                              <1> .fat12common:
   555 00000D5E 09F0                <1>     or eax, esi     ;Add the new entry bits
   556 00000D60 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   557 00000D65 E98AFFFFFF          <1>     jmp .exit
   558                              <1> 
   559                              <1> incrementFreeClusterCount:
   560                              <1> ;Cluster Deallocated Function
   561 00000D6A 9C                  <1>     pushfq
   562 00000D6B 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   563 00000D72 7403                <1>     je .exit
   564 00000D74 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters]
   565                              <1> .exit:
   566 00000D77 9D                  <1>     popfq
   567                              <1>     return
    13                              <2> %%_ret:
    14 00000D78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> decrementFreeClusterCount:
   569                              <1> ;Cluster Allocated Function
   570 00000D79 9C                  <1>     pushfq
   571 00000D7A 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], -1
   572 00000D81 7403                <1>     je .exit
   573 00000D83 FF4D31              <1>     dec dword [rbp + dpb.dNumberOfFreeClusters]
   574                              <1> .exit:
   575 00000D86 9D                  <1>     popfq
   576                              <1>     return
    13                              <2> %%_ret:
    14 00000D87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000D88 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000D8F F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000D92 7408                <1>     jz .notNet
     6 00000D94 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
     7 00000D99 CD4F                <1>     int 4Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00000D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00000D9C 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    11 00000D9E FEC0                <1>     inc al  ;Convert into 1 based number
    12 00000DA0 E85D5F0000          <1>     call dosCrit1Enter
    13 00000DA5 E81F5B0000          <1>     call setDrive   ;Set CDS and current drive vars
    14 00000DAA 720C                <1>     jc .critError   ;Return error if this fails
    15 00000DAC 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] 
    16 00000DB3 E827580000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    17                              <1> .critError:
    18 00000DB8 E84F5F0000          <1>     call dosCrit1Exit
    19                              <1>     retc    ;Return error if this fails
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DBD 72DC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    20 00000DBF E801000000          <1>     call searchMoreDir
    21                              <1>     return
    13                              <2> %%_ret:
    14 00000DC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> searchMoreDir:
    23                              <1> ;The three directory variables are set up from the ffblock. 
    24                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    25                              <1> ;Current DTA is also used to contain the ff block address
    26                              <1> ;All registers can be trashed
    27 00000DC5 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    28                              <1>     ;First setup dirClustA and dirSect vars
    29 00000DCC 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    30 00000DD3 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    31 00000DD6 8805(F7060000)      <1>     mov byte [searchAttr], al   ;And save it
    32 00000DDC 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    33 00000DDF 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    34 00000DE5 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    35                              <1>     ;Get number of 32 byte entries in a sector
    36 00000DEB 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    37 00000DEE 8905(85070000)      <1>     mov dword [dirEntry], eax
    38                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    39 00000DF4 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    40                              <1>     ;Now get bytes per cluster
    41 00000DF7 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    42 00000DF9 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    42 00000E01 0000                <1>
    43 00000E03 0F8496000000        <1>     je .oldFat
    44 00000E09 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    45 00000E0D 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    46 00000E11 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    47 00000E13 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    48 00000E15 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    49 00000E17 31D2                <1>     xor edx, edx
    50 00000E19 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    51                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    52                              <1>     ;edx has byte offset into cluster (or Root dir)
    53 00000E1B 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    54                              <1>     ;Now compute sector offset into cluster
    55 00000E1D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    56 00000E21 89D0                <1>     mov eax, edx    ;Move offset into cluster
    57 00000E23 31D2                <1>     xor edx, edx
    58 00000E25 F7F1                <1>     div ecx 
    59                              <1>     ;eax now has sector offset into cluster
    60                              <1>     ;edx has byte offset into sector 
    61 00000E27 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    62 00000E2E 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    63                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    64 00000E34 89D9                <1>     mov ecx, ebx
    65 00000E36 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    66                              <1> .fatlp:
    67 00000E39 E8E4FDFFFF          <1>     call readFAT
    68 00000E3E 3DFFFFFFFF          <1>     cmp eax, -1
    69 00000E43 7477                <1>     je .errorExit
    70 00000E45 FFC9                <1>     dec ecx
    71 00000E47 75F0                <1>     jnz .fatlp
    72 00000E49 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    73                              <1> .skipFatWalk:
    74 00000E4F 488D05AA000000      <1>     lea rax, searchDir.nextEp
    75 00000E56 50                  <1>     push rax    ;Push the return address onto stack
    76 00000E57 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    77 00000E5D E8BEFBFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
    78 00000E62 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
    79 00000E69 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
    80                              <1> .common:
    81 00000E6C E8B6FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
    82 00000E71 0F8224010000        <1>     jc searchDir.hardError
    83 00000E77 E822010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
    84 00000E7C E8DE010000          <1>     call findInBuffer.getNumberOfEntries    ;Get in ecx # of entries in sector
    85 00000E81 8B05(85070000)      <1>     mov eax, dword [dirEntry]
    86 00000E87 250F000000          <1>     and eax, 0Fh    ;Get the value modulo 16
    87 00000E8C 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
    88 00000E8E C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
    89 00000E91 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
    90                              <1>     ;We continue AS IF this entry was bad
    91                              <1>     ;Now setup al as upon normal entry 
    92 00000E94 8A05(F7060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
    93 00000E9A E96D010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
    94                              <1>     ;The return address on the stack will return to the ep's pushed
    95                              <1> .oldFat:
    96                              <1> ;Old FAT 12/16 root dirs fall thru here only
    97                              <1> ;esi = byte ptr in root dir of entry
    98 00000E9F 488D05D9000000      <1>     lea rax, searchDir.oldNextEP
    99 00000EA6 50                  <1>     push rax    ;Push return address onto the stack
   100 00000EA7 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   101 00000EAB 31D2                <1>     xor edx, edx
   102 00000EAD 96                  <1>     xchg esi, eax
   103 00000EAE F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   104                              <1>     ;eax = Sector number 
   105                              <1>     ;edx = Byte offset within the sector
   106 00000EB0 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   107 00000EB7 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   108 00000EBA EBB0                <1>     jmp short .common
   109                              <1> .errorExit:
   110 00000EBC F9                  <1>     stc
   111                              <1>     return
    13                              <2> %%_ret:
    14 00000EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   112                              <1> searchDir:
   113                              <1> ;Called in a level 1 critical section. 
   114                              <1> ;The directory variables are set and fcbName has the pattern to match
   115                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   116                              <1> ;All registers can be trashed
   117                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   118                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   119                              <1> 
   120                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   121                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   122 00000EBE 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   123 00000EC5 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   124 00000ECB 7408                <1>     jz .notNet
   125 00000ECD B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   126 00000ED2 CD4F                <1>     int 4fh
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000ED4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> .notNet:
   129 00000ED5 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   130 00000EDC 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   131 00000EE2 85C0                <1>     test eax, eax
   132 00000EE4 747E                <1>     jz .oldRoot
   133 00000EE6 E835FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   134                              <1> .sectorLoop:
   135 00000EEB E837FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   136 00000EF0 0F82A5000000        <1>     jc .hardError
   137 00000EF6 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   138                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   139 00000EFB E8B2000000          <1>     call findInBuffer
   140                              <1> .nextEp:
   141                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F00 73D2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   142 00000F02 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   143                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   144                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   145                              <1>     ;IF however, the next cluster is -1, then we return fail
   146 00000F08 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   147 00000F0E 8905(4F070000)      <1>     mov dword [currClustD], eax
   148 00000F14 668B05(83070000)    <1>     mov ax, word [dirSect]
   149 00000F1B 8805(57070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   150 00000F21 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   151 00000F25 488905(58070000)    <1>     mov qword [currSectD], rax  
   152 00000F2C C705(4B070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   152 00000F34 0000                <1>
   153 00000F36 E848FCFFFF          <1>     call getNextSectorOfFile
   154 00000F3B 725E                <1>     jc .hardError
   155 00000F3D 3DFFFFFFFF          <1>     cmp eax, -1
   156 00000F42 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   157 00000F44 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector
   158 00000F4B 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   159 00000F51 3B05(4F070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   160 00000F57 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   161 00000F59 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   161 00000F61 00                  <1>
   162 00000F62 EB87                <1>     jmp short .sectorLoop 
   163                              <1> 
   164                              <1> .oldRoot:
   165                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   166                              <1> ; one large contiguous cluster.
   167                              <1> .oldSectorLp:
   168 00000F64 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   169 00000F6B 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   170 00000F6E E8B4F9FFFF          <1>     call getBufForDOS
   171 00000F73 7226                <1>     jc .hardError
   172 00000F75 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   173 00000F7A E833000000          <1>     call findInBuffer
   174                              <1> .oldNextEP:
   175                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000F7F 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000F81 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   176 00000F82 7413                <1>     jz .fnfError
   177 00000F84 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   178 00000F8B 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   179 00000F8F 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   180 00000F95 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   181                              <1> .fnfError:
   182 00000F97 B012                <1>     mov al, errNoFil
   183 00000F99 F9                  <1>     stc
   184                              <1>     return
    13                              <2> %%_ret:
    14 00000F9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> .hardError:
   186 00000F9B B0FF                <1>     mov al, -1
   187                              <1>     return
    13                              <2> %%_ret:
    14 00000F9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> adjustDosDirBuffer:
   189 00000F9E 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   190 00000FA2 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   191 00000FA6 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   192 00000FAA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   193 00000FAE C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   194                              <1>     return
    13                              <2> %%_ret:
    14 00000FB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> findInBuffer:
   197                              <1> ;Input:  rsi = Sector buffer data area
   198                              <1> ;Output: CF=CY => No entries found
   199                              <1> ;        ZF=NE => Keep searching in subsequent directories
   200                              <1> ;        ZF=ZE => End of directory reached early, stop
   201                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   202                              <1> ;        rsi = Points to start of the disk buffer directory entry
   203 00000FB2 E8A8000000          <1>     call .getNumberOfEntries    ;Get in ecx # of entries in sector
   204 00000FB7 8A05(F7060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   205 00000FBD E8AE000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   206                              <1> .searchMainLp:
   207                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   208 00000FC2 8A25(03070000)      <1>     mov ah, byte [delChar]
   209 00000FC8 803E00              <1>     cmp byte [rsi], 00h
   210 00000FCB 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   211 00000FCD 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   212 00000FCF 750F                <1>     jne .notLookingForEmpty
   213                              <1> .emptySlot:
   214                              <1> ;Here we check if we are looking for an empty directory entry or
   215                              <1> ; we have reached the end of the file (if the first byte is 00h)
   216                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   217 00000FD1 3A25(D4060000)      <1>     cmp ah, byte [fcbName] 
   218                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FD7 74D8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   219                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   220 00000FD9 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   221 00000FDC 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   222 00000FDE F9                  <1>     stc
   223                              <1>     return
    13                              <2> %%_ret:
    14 00000FDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> .notLookingForEmpty:
   225 00000FE0 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   226 00000FE3 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   227 00000FE6 803D(68040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   228 00000FED 7434                <1>     je .exclusiveDir
   229 00000FEF 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   230 00000FF1 7437                <1>     je .volFile ;If so, go here
   231 00000FF3 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   232 00000FF6 7414                <1>     je .nextEntry
   233 00000FF8 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   234 00000FFA 7710                <1>     ja .nextEntry
   235                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   236                              <1> .scanName:
   237 00000FFC 56                  <1>     push rsi
   238 00000FFD 488D3D(D4060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   239 00001004 E83E000000          <1>     call .nameCompare
   240 00001009 5E                  <1>     pop rsi
   241 0000100A 7424                <1>     je .searchEntryFound
   242                              <1> .nextEntry:
   243                              <1> ;Go to next entry
   244 0000100C 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   245 00001013 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   246 00001019 FFC9                <1>     dec ecx
   247 0000101B 75A5                <1>     jnz .searchMainLp
   248                              <1> .badExit:
   249 0000101D 31C0                <1>     xor eax, eax
   250 0000101F FFC0                <1>     inc eax ;Clear ZF
   251 00001021 F9                  <1>     stc
   252                              <1>     return
    13                              <2> %%_ret:
    14 00001022 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .exclusiveDir:
   254                              <1> ;Used when going down a path, dir bit simply need be set
   255 00001023 F6C410              <1>     test ah, dirDirectory
   256 00001026 75D4                <1>     jnz .scanName
   257 00001028 EBE2                <1>     jmp short .nextEntry
   258                              <1> 
   259                              <1> .volFile:
   260 0000102A 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   261 0000102C 74CE                <1>     je .scanName       ;If so, scan the name agrees
   262 0000102E EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   263                              <1> 
   264                              <1> .searchEntryFound:
   265                              <1> ;Here a good entry was found!
   266 00001030 56                  <1>     push rsi
   267 00001031 57                  <1>     push rdi
   268 00001032 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   269 00001034 488D3D(59060000)    <1>     lea rdi, curDirCopy
   270 0000103B B904000000          <1>     mov ecx, 32/8
   271 00001040 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   272 00001043 5F                  <1>     pop rdi
   273 00001044 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   274 00001045 F8                  <1>     clc
   275                              <1>     return
    13                              <2> %%_ret:
    14 00001046 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> .nameCompare:
   278                              <1> ;Input: rsi = source string
   279                              <1> ;       rdi = string template to compare against
   280                              <1> ;Output: ZF=ZE => Strings are ok
   281                              <1> ;        ZF=NZ => Strings not ok
   282                              <1> ;Accepts wildcards. Trashes al
   283 00001047 51                  <1>     push rcx
   284 00001048 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   285                              <1> .ncLp:
   286 0000104A 81F90B000000        <1>     cmp ecx, 11
   287 00001050 740B                <1>     je .ncExit
   288 00001052 FFC1                <1>     inc ecx
   289 00001054 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   290 00001055 74F3                <1>     je .ncLp    ;If equal, keep going
   291 00001057 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   292 0000105B 74ED                <1>     je .ncLp
   293                              <1> .ncExit:
   294 0000105D 59                  <1>     pop rcx
   295                              <1>     return
    13                              <2> %%_ret:
    14 0000105E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> .getNumberOfEntries:
   297 0000105F 55                  <1>     push rbp
   298 00001060 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   299 00001067 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   300 0000106B C1E905              <1>     shr ecx, 5  ;Divide by 32
   301 0000106E 5D                  <1>     pop rbp
   302                              <1>     return
    13                              <2> %%_ret:
    14 0000106F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> adjustSearchAttr:
   304                              <1> ;Converts the byte to a system only if the bit is set
   305                              <1> ;Input: eax = User selected search mask
   306                              <1> ;Output: eax = Modified search mask
   307 00001070 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   308 00001075 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   309                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000107A 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   310 0000107C B808000000          <1>     mov eax, dirVolumeID
   311                              <1>     return
    13                              <2> %%_ret:
    14 00001081 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> asciiToFCB:
   314                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   315                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   316                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   317                              <1> ;Name is space padded.
   318                              <1> ;Input: rsi = ASCII string buffer
   319                              <1> ;       rdi = FCB name buffer
   320                              <1> ;Output: al = Char that terminated the source string 
   321 00001082 53                  <1>     push rbx    
   322 00001083 57                  <1>     push rdi
   323 00001084 B90B000000          <1>     mov ecx, 11
   324 00001089 B020                <1>     mov al, " "
   325 0000108B F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   326 0000108D 5F                  <1>     pop rdi
   327 0000108E 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   328                              <1> .processName:
   329 00001091 AC                  <1>     lodsb   ;Get the char in al
   330 00001092 E834590000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   331 00001097 84C0                <1>     test al, al
   332 00001099 742D                <1>     jz .exit
   333 0000109B 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   334 0000109D 740E                <1>     je .extSpace
   335 0000109F 3C2E                <1>     cmp al, "."
   336 000010A1 7413                <1>     je .ext
   337                              <1>     ;Test if the char is valid
   338 000010A3 E8645A0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   339 000010A8 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   340 000010AA AA                  <1>     stosb   ;Store the char
   341 000010AB EBE4                <1>     jmp short .processName
   342                              <1> .extSpace:
   343                              <1> ;Now we scan for a period in the name
   344 000010AD AC                  <1>     lodsb   ;Get a char and increase rsi
   345 000010AE 84C0                <1>     test al, al
   346 000010B0 7416                <1>     jz .exit
   347 000010B2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   348 000010B4 75F7                <1>     jne .extSpace   ; keep searching
   349                              <1> .ext:
   350 000010B6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   351                              <1> .processExt:
   352 000010BA AC                  <1>     lodsb
   353 000010BB 84C0                <1>     test al, al
   354 000010BD 7409                <1>     jz .exit
   355 000010BF 3C20                <1>     cmp al, " "
   356 000010C1 7405                <1>     je .exit
   357 000010C3 AA                  <1>     stosb
   358 000010C4 EBF4                <1>     jmp short .processExt
   359                              <1> .exitBadChar:
   360 000010C6 30C0                <1>     xor al, al  ;Return a null terminator
   361                              <1> .exit:
   362 000010C8 5B                  <1>     pop rbx
   363                              <1>     return
    13                              <2> %%_ret:
    14 000010C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> FCBToAsciiz:
   366                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   367                              <1> ;Name is space padded too
   368                              <1> ;Input: rsi = FCB name buffer
   369                              <1> ;       rdi = ASCIIZ string buffer
   370 000010CA B908000000          <1>     mov ecx, 8
   371 000010CF F3A4                <1>     rep movsb   ;Move the name over
   372                              <1> .scanNameSpace:
   373 000010D1 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   374 000010D5 750D                <1>     jne .ext
   375 000010D7 48FFCF              <1>     dec rdi
   376 000010DA FFC1                <1>     inc ecx
   377 000010DC 81F908000000        <1>     cmp ecx, 8
   378 000010E2 72ED                <1>     jb .scanNameSpace
   379                              <1> .ext:
   380 000010E4 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   381 000010E9 7506                <1>     jne .validExt
   382 000010EB 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   383 000010EF 7415                <1>     je .exit
   384                              <1> .validExt:
   385 000010F1 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   386 000010F3 AA                  <1>     stosb
   387 000010F4 B903000000          <1>     mov ecx, 3
   388 000010F9 F3A4                <1>     rep movsb   ;Move the three extension chars over
   389                              <1> .scanExtSpace:
   390 000010FB 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   391 000010FF 7505                <1>     jne .exit
   392 00001101 48FFCF              <1>     dec rdi
   393 00001104 EBF5                <1>     jmp short .scanExtSpace
   394                              <1> .exit:
   395 00001106 31C0                <1>     xor eax, eax
   396 00001108 AA                  <1>     stosb   ;Store a null at the end
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> setupFFBlock:
   400                              <1> ;Sets up the find first block for the search
   401                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   402 0000110A 50                  <1>     push rax
   403 0000110B 53                  <1>     push rbx
   404 0000110C 56                  <1>     push rsi
   405 0000110D 57                  <1>     push rdi
   406 0000110E 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   407 00001111 8A05(F7060000)      <1>     mov al, byte [searchAttr]
   408 00001117 243F                <1>     and al, 3Fh ;Clear upper two bits
   409 00001119 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   410 0000111C 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   411 00001123 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   412 00001125 488D35(D4060000)    <1>     lea rsi, fcbName
   413 0000112C 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   414 00001130 57                  <1>     push rdi
   415 00001131 48B820202020202020- <1>     mov rax, "        "
   415 0000113A 20                  <1>
   416 0000113B 48AB                <1>     stosq
   417 0000113D 66AB                <1>     stosw
   418 0000113F AA                  <1>     stosb
   419 00001140 5F                  <1>     pop rdi
   420 00001141 48A5                <1>     movsq   ;Move 8 chars
   421 00001143 66A5                <1>     movsw   ;Move 2 chars
   422 00001145 A4                  <1>     movsb   ;Move the final char
   423                              <1> 
   424 00001146 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   425 0000114C 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   426 0000114F 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   427 00001155 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   428 00001158 8A05(64060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   429 0000115E 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   430 00001161 8B05(6F060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   431 00001167 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   432 0000116A 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   433 00001170 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   434 00001173 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   435 00001177 488D35(59060000)    <1>     lea rsi, curDirCopy
   436 0000117E E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   437                              <1> 
   438 00001183 5F                  <1>     pop rdi
   439 00001184 5E                  <1>     pop rsi
   440 00001185 5B                  <1>     pop rbx
   441 00001186 58                  <1>     pop rax
   442                              <1>     return
    13                              <2> %%_ret:
    14 00001187 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   445                              <1> ;Gets the drive letter for the path in al
   446                              <1> ;Input: rsi = Buffer to process
   447                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   448                              <1> ;       ZF=ZE and al = 0 => Null path
   449                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   450                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   451                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   452 00001188 30C0                <1>     xor al, al
   453 0000118A 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   454                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000118D 74F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455 0000118F 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   456                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001193 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001195 66AD                <1>     lodsw   ;Get first word, rsi += 2
   458                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   459 00001197 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   460 00001199 2C60                <1>     sub al, 60h
   461                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000119B 75EA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 0000119D B0FF                <1>     mov al, -1  ;Else not a valid drive number
   463                              <1>     return
    13                              <2> %%_ret:
    14 0000119F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> canonicaliseFileName:
   466                              <1> ;Always trying to build and qualify a full pathname
   467                              <1> ;Does getPath without hitting the disk
   468 000011A0 B0FF                <1>     mov al, -1
   469 000011A2 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   470 000011A8 8805(FC060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   471 000011AE 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   472 000011B5 FEC0                <1>     inc al  ;make al = 0
   473 000011B7 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   474 000011BD E854000000          <1>     call getPath.epAlt
   475                              <1>     retc    ;Return if an error
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011C2 72DB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 000011C4 48FFCF              <1>     dec rdi ;Point to what should be the null char
   477 000011C7 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   478 000011CB 7503                <1>     jne .storeNull
   479 000011CD B05C                <1>     mov al, "\"
   480 000011CF AA                  <1>     stosb   ;Store the pathsep and increment rdi
   481                              <1> .storeNull:
   482 000011D0 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   483                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011D3 74CA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 000011D5 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   485                              <1>     return
    13                              <2> %%_ret:
    14 000011D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> getDirPathNoCanon:
   488 000011D9 31C0                <1>     xor eax, eax
   489 000011DB 4889FE              <1>     mov rsi, rdi
   490 000011DE EB1B                <1>     jmp short getPath.noCanon
   491                              <1> getFilePathNoCanon:
   492                              <1> ;Used when the path is constructed internally (as for FCB functions)
   493                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   494 000011E0 B0FF                <1>     mov al, -1
   495 000011E2 4889FE              <1>     mov rsi, rdi
   496 000011E5 EB14                <1>     jmp short getPath.noCanon
   497                              <1> getDirPath:
   498 000011E7 30C0                <1>     xor al, al   ;Set to Directory
   499 000011E9 EB02                <1>     jmp short getPath
   500                              <1> getFilePath:
   501 000011EB B0FF                <1>     mov al, -1  ;Set to File
   502                              <1> getPath:
   503                              <1> ;Determines whether the path is spliced or not and transfers the chars
   504                              <1> ; from the user buffer into an internal buffer, normalising them.
   505                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   506                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   507                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   508                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   509                              <1> ; we let it do its thing and return.
   510                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   511                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   512                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   513                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   514                              <1> ; (converted from using machine name by the net client program).
   515                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   516                              <1> ; was good.
   517                              <1> ;Called with:
   518                              <1> ; rdi = SDA Buffer for filename
   519                              <1> ; rsi = Potentially unqualified filename
   520                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   521 000011ED 50                  <1>     push rax
   522 000011EE 57                  <1>     push rdi
   523 000011EF E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   524 000011F4 5F                  <1>     pop rdi
   525 000011F5 58                  <1>     pop rax
   526 000011F6 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   527                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000011F9 72DD                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528                              <1> .noCanon:
   529 000011FB 8805(68040000)      <1>     mov byte [fileDirFlag], al  
   530 00001201 B0FF                <1>     mov al, -1
   531 00001203 8805(FC060000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   532 00001209 48893D(1D060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   533 00001210 8805(2D060000)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   534                              <1> .epAlt:
   535 00001216 C605(00070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   536 0000121D C605(FF060000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   537 00001224 F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   538 0000122B 7428                <1>     jz .notServer
   539                              <1>     ;In this case, the client network program will have correctly
   540                              <1>     ; substituted the drive letter for the path before making the request.
   541                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   542 0000122D E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   544                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   545                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   546                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   547                              <1>     ; these requirements.
   548                              <1>     ;When a server request is made, the request can ONLY be for a file on
   549                              <1>     ; a CDS drive to avoid multiple server hops.
   550 00001232 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   551 00001234 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   552 0000123B 50                  <1>     push rax
   553 0000123C E8C15A0000          <1>     call dosCrit1Enter
   554 00001241 E899530000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   555 00001246 E8C15A0000          <1>     call dosCrit1Exit
   556 0000124B 58                  <1>     pop rax
   557 0000124C 0F8382000000        <1>     jnc .driveOk
   558                              <1> .serverExit:
   559 00001252 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   560                              <1>     return
    13                              <2> %%_ret:
    14 00001254 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> .notServer:
   562                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   563 00001255 48C705(0D070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   563 0000125D FFFFFF              <1>
   564 00001260 B823110000          <1>     mov eax, 1123h
   565 00001265 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   566                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001267 73EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   567 00001269 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   568 0000126E 9C                  <1>     pushfq  ;Save the flag state on stack
   569 0000126F 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   570 00001270 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   571 00001273 E847570000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   572 00001278 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   573 0000127A E840570000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   574 0000127F 7543                <1>     jnz .notNet
   575 00001281 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   576 00001283 753F                <1>     jne .notNet
   577 00001285 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   578 00001286 9D                  <1>     popfq
   579 00001287 66AD                <1>     lodsw
   580 00001289 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   581 0000128D 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   582                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   583                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   584                              <1> ; redirector Find First Without CDS
   585                              <1> 
   586 0000128F 8A1D(2D060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   587 00001295 C605(2D060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   588 0000129C 53                  <1>     push rbx
   589                              <1> .moveNetChars:
   590 0000129D AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   591 0000129E E828570000          <1>     call uppercaseChar  ;Make char in al uppercase
   592 000012A3 84C0                <1>     test al, al
   593 000012A5 740F                <1>     jz .netEnd
   594 000012A7 E813570000          <1>     call swapPathSeparator  ;If path sep, swap it
   595 000012AC AA                  <1>     stosb
   596 000012AD 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   597 000012AF E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   598 000012B4 EBE7                <1>     jmp short .moveNetChars
   599                              <1> .netEnd:
   600 000012B6 5B                  <1>     pop rbx
   601 000012B7 AA                  <1>     stosb
   602 000012B8 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   603                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000012BA 7498                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   604 000012BC B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   605 000012C1 CD4F                <1>     int 4Fh
   606                              <1>     return
    13                              <2> %%_ret:
    14 000012C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   607                              <1> .notNet:
   608                              <1> ;This is the normal case; paths can be relative, or absolute.
   609 000012C4 58                  <1>     pop rax ;Get the drive letter back
   610 000012C5 9D                  <1>     popfq   ;Get the flag state back
   611 000012C6 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   612                              <1> .pnfErr:
   613 000012C8 B003                <1>     mov al, errPnf  ;Null path error
   614 000012CA F9                  <1>     stc
   615                              <1>     return
    13                              <2> %%_ret:
    14 000012CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .notNull:
   617 000012CC 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   618 000012CE 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   619 000012D0 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   620 000012D2 F9                  <1>     stc
   621                              <1>     return
    13                              <2> %%_ret:
    14 000012D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> .driveOk:
   623 000012D4 84C0                <1>     test al, al
   624 000012D6 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   625                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   626 000012D8 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   627 000012DB 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   628 000012DD 50                  <1>     push rax    ;Save the drive letter
   629 000012DE AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   630 000012DF 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   631 000012E2 E8D8560000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   632                              <1>     ;If al is a path separator, then this path is absolute.
   633 000012E7 58                  <1>     pop rax ;Get back the drive letter
   634 000012E8 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   635                              <1> .absoPath:
   636                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   637 000012EA 48FFC6              <1>     inc rsi
   638 000012ED EB1A                <1>     jmp short .commonDir
   639                              <1> .curPath:
   640                              <1> ;This is only jumped to if we are relative the current drive
   641                              <1> ;rsi points to first char in path
   642                              <1> ;If this char is \ or /, then it is an absolute path.
   643 000012EF 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   644 000012F5 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   645 000012F7 50                  <1>     push rax    ;Save the current drive number
   646 000012F8 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   647 000012FA E8C0560000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   648 000012FF 58                  <1>     pop rax ;Get back the current drive number
   649 00001300 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   650                              <1> .relMain:
   651 00001302 C605(FC060000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   652                              <1> .commonDir:
   653                              <1> ;rsi points to the start of the string we will be appending
   654                              <1> ;Fall through now
   655                              <1> pathWalk:
   656                              <1> ;Input: rsi must point to source buffer for path to expand
   657                              <1> ;       rdi must point to a destination buffer
   658                              <1> ;       al must contain the drive 1 based number
   659 00001309 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   660 0000130E 727C                <1>     jc .badDriveExit
   661                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   662                              <1>     ; resolution
   663                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   664 00001310 4889FB              <1>     mov rbx, rdi
   665                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   666 00001313 803E00              <1>     cmp byte [rsi], 0
   667 00001316 7512                <1>     jnz .mainlp
   668                              <1>     ;Setup dummy dir data
   669 00001318 31C0                <1>     xor eax, eax
   670 0000131A 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   671 00001321 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   672 00001328 EB68                <1>     jmp short .exitGood
   673                              <1> .mainlp:
   674 0000132A E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   675 0000132F 84C0                <1>     test al, al
   676 00001331 7507                <1>     jnz .notFile
   677 00001333 C605(00070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   678                              <1> .notFile:
   679 0000133A 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   680 0000133B E85E030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   681 00001340 58                  <1>     pop rax
   682 00001341 736B                <1>     jnc .deviceFound
   683 00001343 E81E020000          <1>     call searchForPathspec  ;and search the directory
   684 00001348 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   685 0000134A E86D020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   686 0000134F 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   687 00001351 84C0                <1>     test al, al ;Exit if this pathspec was a file
   688 00001353 743D                <1>     jz .exitGood
   689                              <1>     ;Here I have to take the cluster data from the found directory entry
   690                              <1>     ; and setup the search for the next pathspec portion
   691                              <1>     ;Copy necessary data from the current directory copy
   692 00001355 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   693 0000135C 74CC                <1>     jz .mainlp
   694 0000135E 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   695 00001365 C1E010              <1>     shl eax, 10h    ;Shift it high
   696 00001368 668B05(73060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   697                              <1>     ;eax now has the cluster number of the search
   698 0000136F 8905(7F070000)      <1>     mov dword [dirClustA], eax
   699 00001375 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   700 0000137B 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   701 0000137D 8905(85070000)      <1>     mov dword [dirEntry], eax
   702 00001383 668905(83070000)    <1>     mov word [dirSect], ax
   703 0000138A EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   704                              <1> .badDriveExit:
   705 0000138C B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001391 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .exitGood:
   708 00001392 C605(FF060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   709                              <1> .exit:
   710                              <1>     return
    13                              <2> %%_ret:
    14 00001399 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   711                              <1> .checkDev:
   712                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   713                              <1> ; we are in \DEV pseudo dir
   714 0000139A F605(69040000)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   715 000013A1 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   716                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   717 000013A3 56                  <1>     push rsi
   718 000013A4 57                  <1>     push rdi
   719 000013A5 E882020000          <1>     call checkDevPath
   720 000013AA 5F                  <1>     pop rdi
   721 000013AB 5E                  <1>     pop rsi
   722 000013AC 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   723                              <1> .deviceFound:
   724 000013AE 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   725 000013B0 C605(00070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   726 000013B7 C605(FF060000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   727 000013BE EBD9                <1>     jmp short .exit   
   728                              <1> .nodev:
   729 000013C0 F9                  <1>     stc
   730 000013C1 EBD6                <1>     jmp short .exit
   731                              <1> 
   732                              <1> prepareDir:
   733                              <1> ;Used to transfer the current directory if it is necessary.
   734                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   735                              <1> ; relative
   736                              <1> ;Input: al = 1-based drive letter
   737                              <1> ;Output: rdi = Pointing at where to place chars from source string
   738                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   739 000013C3 56                  <1>     push rsi
   740 000013C4 E839590000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   741 000013C9 E8FB540000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   742 000013CE 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   743 000013D0 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] 
   744 000013D7 57                  <1>     push rdi    ;Push CDS pointer on stack...
   745 000013D8 E802520000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   746                              <1> .critExit:
   747 000013DD E82A590000          <1>     call dosCrit1Exit
   748 000013E2 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   749 000013E3 724A                <1>     jc .badDriveExit 
   750 000013E5 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   751                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   752                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   753                              <1>     ;   terminating char (\, / or Null)
   754                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   755                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   756 000013EC 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   757 000013F2 753D                <1>     jnz .prepDirJoin
   758 000013F4 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   759 000013FA 7556                <1>     jnz .prepDirSubst
   760                              <1> .prepMain:
   761                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   762 000013FC F605(FC060000)FF    <1>     test byte [spliceFlag], -1
   763 00001403 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   764                              <1>     ;Else we copy the first two chars only (X:)
   765 00001405 66A5                <1>     movsw  
   766 00001407 B05C                <1>     mov al, "\"
   767 00001409 AA                  <1>     stosb   ;Store the path separator and increment rdi
   768 0000140A 31C0                <1>     xor eax, eax    ;Get cluster 0
   769 0000140C EB1B                <1>     jmp short .prepDirExitSkip
   770                              <1> .prepLoop:
   771 0000140E AC                  <1>     lodsb
   772 0000140F 84C0                <1>     test al, al ;If al was null, then we stop
   773 00001411 7403                <1>     jz .prepDirExit
   774 00001413 AA                  <1>     stosb
   775 00001414 EBF8                <1>     jmp short .prepLoop
   776                              <1> .prepDirExit:
   777 00001416 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   778 0000141A 7403                <1>     je .prepDirExitSkipPathsep
   779 0000141C B05C                <1>     mov al, "\"
   780 0000141E AA                  <1>     stosb   ;Store the path separator and increment rdi
   781                              <1> .prepDirExitSkipPathsep:
   782 0000141F 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   783 00001426 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   784                              <1> .prepDirExitSkip:
   785 00001429 E837000000          <1>     call .prepSetupDirSearchVars
   786 0000142E F8                  <1>     clc ;Clear carry before exiting
   787                              <1> .badDriveExit:
   788 0000142F 5E                  <1>     pop rsi
   789                              <1>     return
    13                              <2> %%_ret:
    14 00001430 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> .prepDirJoin:
   791 00001431 51                  <1>     push rcx
   792 00001432 56                  <1>     push rsi
   793 00001433 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   794 0000143A B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   795                              <1> .prepDirJoin1:
   796 0000143F AC                  <1>     lodsb   ;Get the char
   797 00001440 84C0                <1>     test al, al ;Null char?
   798 00001442 740B                <1>     jz .prepDirJoin2
   799 00001444 E876550000          <1>     call swapPathSeparator
   800 00001449 7404                <1>     jz .prepDirJoin2
   801 0000144B FFC1                <1>     inc ecx ;Accrue length to copy
   802 0000144D EBF0                <1>     jmp short .prepDirJoin1
   803                              <1> .prepDirJoin2:
   804 0000144F 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   805 00001450 EB05                <1>     jmp short .prepDirCopy1
   806                              <1> .prepDirSubst:
   807 00001452 51                  <1>     push rcx
   808 00001453 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   809                              <1> .prepDirCopy1:
   810 00001457 F3A4                <1>     rep movsb   ;Copy the string over
   811 00001459 59                  <1>     pop rcx
   812 0000145A F605(FC060000)FF    <1>     test byte [spliceFlag], -1
   813 00001461 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   814 00001463 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   815                              <1> .prepSetupDirSearchVars:
   816                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   817                              <1> ;       rbp = DPB pointer for the device which will do transaction
   818 00001465 51                  <1>     push rcx
   819 00001466 31C9                <1>     xor ecx, ecx
   820 00001468 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   821 0000146F 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   822 00001475 E83BF5FFFF          <1>     call getFATtype ;Get type of fat
   823 0000147A 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   824 00001480 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   825                              <1>     ;FAT 32 here
   826 00001482 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   827 00001484 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   828 00001486 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   829                              <1> .psdsvExit:
   830 00001489 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   831 0000148F 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   832 00001495 59                  <1>     pop rcx
   833                              <1>     return 
    13                              <2> %%_ret:
    14 00001496 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   834                              <1> 
   835                              <1> copyPathspec:
   836                              <1> ;1) Copies a path portion from the source buffer to the destination
   837                              <1> ;2) Advances rsi to the next null, \ or /
   838                              <1> ;3) Expands all * to ?'s
   839                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   840                              <1> ;    next path separator and rdi pointing to the previous pathsep
   841                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   842                              <1> ;    with rsi moving to path separator
   843                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   844                              <1> ;
   845                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   846                              <1> ;           rdi = Points to where to store it
   847                              <1> ;
   848                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   849                              <1> ;           rdi = First char of next space to store next pathspec
   850                              <1> ;           al = Last char stored (either \ or NULL)
   851                              <1> ;           CF=NC = OK path
   852                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   853                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   854 00001497 57                  <1>     push rdi    ;Save the pointer into the user buffer
   855 00001498 C605(8C040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   856 0000149F 488D3D(D4060000)    <1>     lea rdi, fcbName
   857 000014A6 57                  <1>     push rdi
   858 000014A7 B903000000          <1>     mov ecx, 3
   859 000014AC B820202020          <1>     mov eax, "    " ;Four spaces
   860 000014B1 F3AB                <1>     rep stosd   ;Store 12 spaces
   861 000014B3 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   862                              <1> 
   863 000014B4 488D1D(DF060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   864 000014BB AC                  <1>     lodsb   ;Get first char from user path in al
   865 000014BC 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   866 000014BE 7463                <1>     je .cpsDots
   867 000014C0 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   868                              <1> ;First char is not a dot, so now check if starts with E5h? 
   869                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   870 000014C3 3CE5                <1>     cmp al, 0E5h
   871 000014C5 7506                <1>     jne .cpsMainLoop
   872 000014C7 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   873 000014CA B005                <1>     mov al, 05h
   874 000014CC AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   875                              <1> .cpsMainLoop:
   876 000014CD AC                  <1>     lodsb   ;Get the char in al and advance rsi
   877 000014CE 84C0                <1>     test al, al ;Is it the null char?
   878 000014D0 7479                <1>     jz .cpsStore  ;If so, terminate immediately
   879 000014D2 E8E8540000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   880 000014D7 7472                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   881 000014D9 3C2E                <1>     cmp al, "." ;Filename extension separator
   882 000014DB 7420                <1>     je .cpsExtension
   883                              <1>     ;If we have space in the filename, we check to see if the next char is *
   884 000014DD 3C2A                <1>     cmp al, "*" ;Wildcard?
   885 000014DF 7430                <1>     je .cpsWildcard
   886 000014E1 3C3F                <1>     cmp al, "?" ;Good wildcard?
   887 000014E3 740C                <1>     je .store
   888 000014E5 E8E1540000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   889 000014EA E81D560000          <1>     call checkCharValid ; and check it is a valid char
   890 000014EF 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   891                              <1> .store:
   892 000014F1 4839DF              <1>     cmp rdi, rbx
   893 000014F4 7435                <1>     je .cpsProcessName ;Skip any non-terminating chars
   894 000014F6 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   895 000014F7 EBD4                <1>     jmp short .cpsMainLoop
   896                              <1> .cpsInvalidChar:
   897 000014F9 30C0                <1>     xor al, al
   898 000014FB EB2E                <1>     jmp short .cpsProcessName
   899                              <1> .cpsExtension:
   900                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   901 000014FD B903000000          <1>     mov ecx, 3 
   902 00001502 488D3D(DC060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   903 00001509 57                  <1>     push rdi
   904 0000150A B020                <1>     mov al, " "
   905 0000150C F3AA                <1>     rep stosb
   906 0000150E 5F                  <1>     pop rdi
   907 0000150F EBBC                <1>     jmp short .cpsMainLoop
   908                              <1> .cpsWildcard:
   909                              <1> ;Fill the entire FCB filespec with ?'s.
   910                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
   911                              <1> ; *'s from crashing DOS :)
   912 00001511 AC                  <1>     lodsb   ;Get char, inc rsi
   913 00001512 3C2A                <1>     cmp al, "*"
   914 00001514 74FB                <1>     je short .cpsWildcard
   915 00001516 48FFCE              <1>     dec rsi ;Go back to the first non-star char
   916 00001519 B03F                <1>     mov al, "?"
   917                              <1> .cpsWildcardLp:
   918 0000151B AA                  <1>     stosb
   919 0000151C 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
   920 0000151F 75FA                <1>     jne short .cpsWildcardLp
   921 00001521 EBAA                <1>     jmp short .cpsMainLoop
   922                              <1> 
   923                              <1> .cpsDots:
   924 00001523 AA                  <1>     stosb   ;Store the first dot
   925 00001524 8A06                <1>     mov al, byte [rsi]
   926 00001526 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   927 00001528 752B                <1>     jne .oneDotResolve
   928 0000152A A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   929                              <1> 
   930                              <1> .cpsProcessName:
   931                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   932 0000152B 84C0                <1>     test al, al 
   933 0000152D 741C                <1>     jz .cpsStore
   934 0000152F E88B540000          <1>     call swapPathSeparator
   935 00001534 7415                <1>     jz .cpsStore
   936                              <1> .cpsFindTerminator:
   937 00001536 AC                  <1>     lodsb
   938 00001537 84C0                <1>     test al, al 
   939 00001539 7410                <1>     jz .cpsStore
   940 0000153B E87F540000          <1>     call swapPathSeparator
   941 00001540 7409                <1>     jz .cpsStore
   942 00001542 E8C5550000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   943 00001547 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   944                              <1>     ;If we encounter a terminator, convert to 0
   945 00001549 30C0                <1>     xor al, al
   946                              <1> .cpsStore:
   947 0000154B 488D3D(DF060000)    <1>     lea rdi, fcbName+11
   948 00001552 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   949 00001553 5F                  <1>     pop rdi
   950                              <1>     return
    13                              <2> %%_ret:
    14 00001554 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   951                              <1> .oneDotResolve:
   952 00001555 488D3D(DF060000)    <1>     lea rdi, fcbName+11
   953 0000155C AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   954 0000155D 5F                  <1>     pop rdi ;rdi points to fresh space
   955 0000155E 48FFCF              <1>     dec rdi ;Point to the previous path separator
   956 00001561 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   957                              <1>     return
    13                              <2> %%_ret:
    14 00001562 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   958                              <1> .cpsBadChar:
   959 00001563 30C0                <1>     xor al, al  ;Convert the char to a terminator
   960                              <1>     return
    13                              <2> %%_ret:
    14 00001565 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   961                              <1> 
   962                              <1> searchForPathspec:
   963                              <1>     ;Now search the current directory for this filename
   964                              <1>     ;Find first using SDA ffBlock
   965                              <1>     ;If al = 0, we have final file name or directory name
   966                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   967                              <1>     ;Output: CF=CY => Error occured
   968                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   969                              <1>     ;                 FF block somewhat setup
   970                              <1>     ;Preserves rax, rbx, rsi,  rdi
   971 00001566 50                  <1>     push rax
   972 00001567 53                  <1>     push rbx
   973 00001568 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   974 00001569 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   975 0000156A 0FB61D(68040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   976 00001571 53                  <1>     push rbx    ;and push it onto the stack
   977                              <1> ;Evaluate whether we are searching for a file for a directory
   978 00001572 84C0                <1>     test al, al
   979 00001574 741D                <1>     jz .sfpPNfile
   980                              <1>     ;Fall if subdir
   981 00001576 488D3D(D4060000)    <1>     lea rdi, fcbName
   982 0000157D B03F                <1>     mov al, "?" ;Search for wildcard
   983 0000157F B90B000000          <1>     mov ecx, 11
   984 00001584 F2AE                <1>     repne scasb
   985 00001586 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   986 00001588 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   987 0000158A C605(68040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   988 00001591 EB07                <1>     jmp short .sfpPNMain
   989                              <1> .sfpPNfile:
   990                              <1>     ;Here if we are searching for a file or directory as setup by search init
   991 00001593 0FB605(F7060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   992                              <1> .sfpPNMain:
   993 0000159A 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   994 000015A1 7405                <1>     je .sfpPNNoDisk
   995 000015A3 E816F9FFFF          <1>     call searchDir
   996                              <1> .sfpPNNoDisk:
   997 000015A8 5B                  <1>     pop rbx
   998 000015A9 881D(68040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   999 000015AF 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1000 000015B0 5E                  <1>     pop rsi
  1001 000015B1 5B                  <1>     pop rbx
  1002 000015B2 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 000015B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> .sfpPnf:
  1005 000015B4 B803000000          <1>     mov eax, errPnf
  1006                              <1> .sfpErrExit:
  1007 000015B9 F9                  <1>     stc ;Set carry
  1008 000015BA EBEC                <1>     jmp short .sfpPNNoDisk
  1009                              <1> 
  1010                              <1> addPathspecToBuffer:
  1011                              <1> ;Input: fcbName = Qualified pathname portion
  1012                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1013                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1014                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1015                              <1> ;rbx points to the "head of the path"
  1016 000015BC F605(2D060000)FF    <1>     test byte [skipDisk], -1
  1017                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000015C3 75EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1018 000015C5 803D(D4060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1019 000015CC 741F                <1>     je .aptbPNDots
  1020                              <1>     ;Copy filename over to internal buffer
  1021 000015CE 56                  <1>     push rsi    ;Save source pointer position
  1022 000015CF 488D35(D4060000)    <1>     lea rsi, fcbName
  1023 000015D6 E8EFFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1024 000015DB 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1025 000015DE 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1026                              <1> .aptbOkExit:
  1027 000015DF 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1028 000015E2 E8D8530000          <1>     call swapPathSeparator
  1029 000015E7 7402                <1>     jz .aptbPNexit
  1030 000015E9 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1031                              <1> .aptbPNexit:
  1032 000015EB AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1033                              <1>     return
    13                              <2> %%_ret:
    14 000015EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> .aptbPNDots:
  1035                              <1> ;For one dot, we leave rdi where it is
  1036                              <1> ;For two dots, we search backwards for the previous "\"
  1037 000015ED 803D(D5060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1038 000015F4 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1039 000015F5 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1040                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000015F8 75F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1041                              <1>     ;Here we have two dots
  1042                              <1>     ;Walk rdi backwards until a \ is found
  1043 000015FA 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1044 000015FD 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1045 00001603 7420                <1>     je .aptbPnf
  1046 00001605 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1047 0000160B 7418                <1>     je .aptbPnf
  1048                              <1> .aptbPNDotsLp:
  1049 0000160D 48FFCF              <1>     dec rdi
  1050 00001610 803F5C              <1>     cmp byte [rdi], "\"
  1051 00001613 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1052                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1053 00001615 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1054 0000161C 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1055 0000161E 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1056 00001621 7202                <1>     jb .aptbPnf
  1057 00001623 EBBA                <1>     jmp short .aptbOkExit
  1058                              <1> ;.aptbSearchError:
  1059                              <1> ;    mov eax, errFnf
  1060                              <1> ;    jmp short .aptbErrExit
  1061                              <1> .aptbPnf:
  1062 00001625 B803000000          <1>     mov eax, errPnf
  1063                              <1> .aptbErrExit:
  1064 0000162A F9                  <1>     stc ;Set carry
  1065                              <1>     return
    13                              <2> %%_ret:
    14 0000162B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1066                              <1> 
  1067                              <1> checkDevPath:
  1068                              <1> ;Called only if the file/directory was not found on disk.
  1069                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1070                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1071                              <1> ; and check to see if it is a char device. If it is, build a directory
  1072                              <1> ; If it is not, proceed with the request fail.
  1073                              <1> ;
  1074                              <1> ;Input: rsi = Pointer to the next path spec
  1075                              <1> ;Output: CF=NC => Char device found, directory built
  1076                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1077 0000162C 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1078                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001633 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1079 00001635 803D(DF060000)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1080 0000163C 7459                <1>     je .notOk                      
  1081                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1082 0000163E 50                  <1>     push rax
  1083 0000163F 48B844455620202020- <1>     mov rax, "DEV     "
  1083 00001648 20                  <1>
  1084 00001649 483905(D4060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1085 00001650 58                  <1>     pop rax
  1086 00001651 7544                <1>     jne .notOk
  1087 00001653 813D(DC060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1087 0000165B 205C                <1>
  1088 0000165D 7538                <1>     jne .notOk
  1089                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1090                              <1>     ; looking for a device driver
  1091                              <1>     ;First append it to rdi 
  1092 0000165F B84445565C          <1>     mov eax, "DEV\" 
  1093 00001664 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1094 00001665 57                  <1>     push rdi
  1095 00001666 488D3D(D4060000)    <1>     lea rdi, fcbName
  1096 0000166D E810FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1097                              <1>     ;Returns in al the terminating char of the source string
  1098 00001672 5F                  <1>     pop rdi
  1099                              <1>     ;If al is a pathsep, fail
  1100 00001673 E847530000          <1>     call swapPathSeparator
  1101 00001678 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1102 0000167A 30C0                <1>     xor al, al
  1103 0000167C 8805(DF060000)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1104 00001682 53                  <1>     push rbx
  1105 00001683 E844000000          <1>     call checkIfCharDevice
  1106 00001688 5B                  <1>     pop rbx ;Don't need bh yet
  1107 00001689 720C                <1>     jc .notOk
  1108 0000168B E873000000          <1>     call buildCharDir
  1109                              <1>     ;Here the device was determined to be a char device.
  1110                              <1>     ;A dummy directory entry was built for it.
  1111                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1112                              <1>     ; Do not Find Next!
  1113                              <1> .copyName:
  1114 00001690 E835FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1115 00001695 F8                  <1>     clc
  1116                              <1>     return
    13                              <2> %%_ret:
    14 00001696 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1117                              <1> .notOk:
  1118 00001697 B802000000          <1>     mov eax, errFnf
  1119 0000169C F9                  <1>     stc
  1120                              <1>     return
    13                              <2> %%_ret:
    14 0000169D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1121                              <1> .charDevSearch:
  1122 0000169E 53                  <1>     push rbx
  1123 0000169F E828000000          <1>     call checkIfCharDevice
  1124 000016A4 5B                  <1>     pop rbx ;Dont need bh yet
  1125 000016A5 72F0                <1>     jc .notOk
  1126 000016A7 E857000000          <1>     call buildCharDir
  1127 000016AC 803D(DF060000)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1128 000016B3 750C                <1>     jne .cds2
  1129 000016B5 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1130 000016B9 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1131 000016BB 48FFCF              <1>     dec rdi
  1132 000016BE B02F                <1>     mov al, "/" ;Replace \ with "/"
  1133 000016C0 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1134                              <1> .cds2:
  1135 000016C1 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1136 000016C8 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1137 000016CA F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1138                              <1>     return
    13                              <2> %%_ret:
    14 000016CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1139                              <1> 
  1140                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1141                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1142                              <1> ; device driver chain. 
  1143                              <1> ;Output: CF=CY if not found
  1144                              <1> ;        CF=NC if found
  1145                              <1> ;           BH = Low byte of the device attribute word
  1146 000016CC 50                  <1>     push rax
  1147 000016CD 57                  <1>     push rdi
  1148 000016CE 488B05(D4060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1149 000016D5 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1150                              <1> .checkName:
  1151 000016DC 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1152 000016E0 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1153 000016E2 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1154 000016E5 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1155 000016E7 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1156 000016EA 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1157 000016ED 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1158 000016F1 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1159                              <1> .walkList:
  1160 000016F3 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1161 000016F6 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1162 000016FD 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1163 000016FF F9                  <1>     stc
  1164                              <1> .exit:
  1165 00001700 5F                  <1>     pop rdi
  1166 00001701 58                  <1>     pop rax
  1167                              <1>     return
    13                              <2> %%_ret:
    14 00001702 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1168                              <1> 
  1169                              <1> buildCharDir:
  1170                              <1> ;Build a dummy directory entry for the char device in FCBName
  1171                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1172 00001703 803D(2D060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1173                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000170A 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1174 0000170C 50                  <1>     push rax
  1175 0000170D 57                  <1>     push rdi
  1176 0000170E C605(DF060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1177 00001715 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1178                              <1>     ;Zero the directory copy (32 bytes)
  1179 0000171C 50                  <1>     push rax
  1180 0000171D 51                  <1>     push rcx
  1181 0000171E 57                  <1>     push rdi
  1182 0000171F 31C0                <1>     xor eax, eax    ;Zero rax
  1183 00001721 B904000000          <1>     mov ecx, 4
  1184 00001726 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1185 00001729 5F                  <1>     pop rdi
  1186 0000172A 59                  <1>     pop rcx
  1187 0000172B 58                  <1>     pop rax
  1188 0000172C 488B05(D4060000)    <1>     mov rax, qword [fcbName]
  1189 00001733 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1190 00001736 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1191 0000173B 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1192 0000173E C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1193                              <1>     ;Get date and time and set the write time in the directory entry
  1194 00001742 E8C1110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1195 00001747 E8A7120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1196 0000174C 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1197 0000174F 31C0                <1>     xor eax, eax
  1198 00001751 5F                  <1>     pop rdi
  1199 00001752 58                  <1>     pop rax
  1200                              <1>     return
    13                              <2> %%_ret:
    14 00001753 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1201                              <1> 
  1202                              <1> checkFailingComp:
  1203                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1204                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1205                              <1> ;Returns: ZF=ZE => Last path componant
  1206                              <1> ;         ZF=NZ => Not last path componant
  1207 00001754 50                  <1>     push rax
  1208 00001755 8A05(DF060000)      <1>     mov al, byte [fcbName + 11]
  1209 0000175B 84C0                <1>     test al, al
  1210 0000175D 58                  <1>     pop rax
  1211                              <1>     return
    13                              <2> %%_ret:
    14 0000175E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 0000175F 4889D7              <1>     mov rdi, rdx
     8 00001762 E896520000          <1>     call strlen
     9 00001767 81F940000000        <1>     cmp ecx, 64
    10 0000176D 7607                <1>     jbe .okLength
    11                              <1> .badPath:
    12 0000176F B003                <1>     mov al, errPnf
    13 00001771 E9D7550000          <1>     jmp extErrExit
    14                              <1> .okLength:
    15 00001776 4889D6              <1>     mov rsi, rdx
    16 00001779 E8E9520000          <1>     call checkPathspecOK
    17 0000177E 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    18                              <1> .pathOk:
    19 00001780 E874530000          <1>     call scanPathWC
    20 00001785 72E8                <1>     jc .badPath ;Dont allow wildcards
    21                              <1>     ;Path is ok, now proceed
    22 00001787 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    23 0000178E E858FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    24                              <1>     ;If the path exists, exit error
    25 00001793 0F83B4550000        <1>     jnc extErrExit
    26                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    27 00001799 E8B6FFFFFF          <1>     call checkFailingComp
    28 0000179E 0F85A9550000        <1>     jnz extErrExit
    29                              <1>     ;So all is well, the new subdirectories name is in fcbName
    30                              <1>     ;The parent dir's directory entry is in the curDirCopy
    31 000017A4 E86F500000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    32                              <1>     ;returns in rdi the working cds ptr
    33 000017A9 7312                <1>     jnc .notNet
    34 000017AB B803110000          <1>     mov eax, 1103h
    35 000017B0 CD4F                <1>     int 4fh
    36 000017B2 0F8295550000        <1>     jc extErrExit
    37 000017B8 E982550000          <1>     jmp extGoodExit
    38                              <1> .notNet:
    39 000017BD E840550000          <1>     call dosCrit1Enter
    40                              <1>     ;Current dpb ptr is already set
    41                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    42                              <1>     ;First we make a dummy dir in curDirCopy
    43 000017C2 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
    44 000017C9 488D35(D4060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    45 000017D0 488D3D(59060000)    <1>     lea rdi, curDirCopy
    46 000017D7 48A5                <1>     movsq   ;Copy the name over
    47 000017D9 A5                  <1>     movsd
    48 000017DA E829110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    49 000017DF E80F120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    50 000017E4 8905(67060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    51 000017EA 8905(6F060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    52 000017F0 31C0                <1>     xor eax, eax
    53 000017F2 8905(75060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    54 000017F8 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    55 000017FF 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    56                              <1> .searchForDirSpace:
    57 00001805 8905(7F070000)      <1>     mov dword [dirClustA], eax
    58 0000180B 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    59 0000180D 668905(83070000)    <1>     mov word [dirSect], ax
    60 00001814 8905(85070000)      <1>     mov dword [dirEntry], eax
    61 0000181A E8C6040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    62 0000181F 7328                <1>     jnc .dirEntryFnd
    63 00001821 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    63 00001829 0000                <1>
    64 0000182B 0F844A010000        <1>     je .bad ;Set CF and exit
    65 00001831 E8F9050000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    66 00001836 0F823F010000        <1>     jc .bad
    67 0000183C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    68 00001841 0F8434010000        <1>     je .bad
    69                              <1>     ;Else eax = Newly allocated cluster
    70 00001847 EBBC                <1>     jmp short .searchForDirSpace
    71                              <1> .dirEntryFnd:
    72                              <1> ;rdi points to current directory copy
    73                              <1> ;rsi now points to offset in the buffer to write the entry to
    74                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    75 00001849 488B1D(39070000)    <1>     mov rbx, qword [currBuff]
    76 00001850 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    77                              <1>      
    78 00001854 488905(41070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    79 0000185B 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
    80 00001862 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
    81 00001865 668935(49070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
    82                              <1> ;Must now request a cluster and sanitise it
    83 0000186C E829F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
    84 00001871 0F8209010000        <1>     jc .badExit
    85 00001877 E8E6050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
    86 0000187C 0F82FE000000        <1>     jc .badExit
    87                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
    88 00001882 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
    89 00001889 C1E810              <1>     shr eax, 10h    ;Get high word low
    90 0000188C 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
    91 00001893 488B05(41070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
    92 0000189A E866F0FFFF          <1>     call getBufForDirNoFile
    93 0000189F 0F82DB000000        <1>     jc .badExit
    94 000018A5 0FB705(49070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
    95 000018AC 488D35(59060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
    96 000018B3 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
    97 000018B8 B904000000          <1>     mov ecx, 4
    98 000018BD F348A5              <1>     rep movsq   ;Copy over the buffered directory
    99 000018C0 E8B5EEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   100                              <1>     ;Now need to read in data sector and make two entries . and ..
   101 000018C5 57                  <1>     push rdi
   102 000018C6 51                  <1>     push rcx
   103 000018C7 B90B000000          <1>     mov ecx, 11
   104 000018CC 488D3D(59060000)    <1>     lea rdi, curDirCopy
   105 000018D3 B020                <1>     mov al, " "
   106 000018D5 F3AA                <1>     rep stosb
   107 000018D7 59                  <1>     pop rcx
   108 000018D8 5F                  <1>     pop rdi
   109 000018D9 48B82E000000000000- <1>     mov rax, "."
   109 000018E2 00                  <1>
   110 000018E3 8805(59060000)      <1>     mov byte [curDirCopy], al
   111 000018E9 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   112 000018F0 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   113 000018F7 C605(64060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   114 000018FE C1E210              <1>     shl edx, 10h
   115 00001901 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   116 00001903 E818F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   117 00001908 E8F8EFFFFF          <1>     call getBufForDirNoFile
   118 0000190D 7271                <1>     jc .badExit
   119                              <1>     ;rbx has buffer pointer now
   120 0000190F 488D35(59060000)    <1>     lea rsi, curDirCopy
   121 00001916 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   122 0000191A B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   123 0000191F F348A5              <1>     rep movsq
   124                              <1>     ;Now create .. entry
   125 00001922 C605(5A060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   126 00001929 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   127 0000192F E881F0FFFF          <1>     call getFATtype
   128 00001934 81F902000000        <1>     cmp ecx, 2
   129 0000193A 7207                <1>     jb .notFAT32
   130 0000193C 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   131 0000193F 7502                <1>     jne .notFAT32
   132 00001941 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   133                              <1> .notFAT32:
   134 00001943 668905(73060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   135 0000194A C1E810              <1>     shr eax, 10h
   136 0000194D 668905(6D060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   137 00001954 488D35(59060000)    <1>     lea rsi, curDirCopy
   138 0000195B B904000000          <1>     mov ecx, 4
   139 00001960 F348A5              <1>     rep movsq
   140 00001963 E812EEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   141 00001968 E8DBEDFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   142 0000196D 7211                <1>     jc .badExit
   143                              <1> .okExit:
   144                              <1>     ;AND WE ARE DONE!
   145 0000196F E898530000          <1>     call dosCrit1Exit
   146 00001974 31C0                <1>     xor eax, eax
   147 00001976 E9C4530000          <1>     jmp extGoodExit
   148                              <1> .bad:
   149 0000197B B805000000          <1>     mov eax, errAccDen
   150                              <1> .badExit:
   151 00001980 E88CEDFFFF          <1>     call cancelWriteThroughBuffers
   152 00001985 E882530000          <1>     call dosCrit1Exit
   153 0000198A E9BE530000          <1>     jmp extErrExit
   154                              <1> 
   155                              <1> removeDIR:         ;ah = 3Ah
   156 0000198F 4889D7              <1>     mov rdi, rdx
   157 00001992 E866500000          <1>     call strlen
   158 00001997 81F940000000        <1>     cmp ecx, 64
   159 0000199D 7607                <1>     jbe .okLength
   160                              <1> .badPath:
   161 0000199F B003                <1>     mov al, errPnf
   162 000019A1 E9A7530000          <1>     jmp extErrExit
   163                              <1> .okLength:
   164 000019A6 4889D6              <1>     mov rsi, rdx
   165 000019A9 E8B9500000          <1>     call checkPathspecOK
   166 000019AE 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   167                              <1> .pathOk:
   168 000019B0 E844510000          <1>     call scanPathWC
   169 000019B5 72E8                <1>     jc .badPath ;Dont allow wildcards
   170                              <1>     ;Path is ok, now proceed
   171 000019B7 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   172 000019BE E824F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   173 000019C3 72DA                <1>     jc .badPath    ;Path Doesn't exist
   174 000019C5 E84E4E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   175 000019CA 7312                <1>     jnc .notNet
   176 000019CC B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   177 000019D1 CD4F                <1>     int 4fh
   178 000019D3 0F8274530000        <1>     jc extErrExit
   179 000019D9 E961530000          <1>     jmp extGoodExit
   180                              <1> .notNet:
   181 000019DE E81F530000          <1>     call dosCrit1Enter
   182 000019E3 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   183                              <1>     ;Now let use check that our directory is not the CDS currentdir
   184 000019EA 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   185 000019F1 488D3D(1D050000)    <1>     lea rdi, buffer1
   186 000019F8 E800500000          <1>     call strlen ;Get the length of the full qualified name in ecx
   187 000019FD 66890D(49070000)    <1>     mov word [pathLen], cx
   188 00001A04 E80B500000          <1>     call strcmp ;Then compare rdi to CDS string
   189 00001A09 750F                <1>     jnz .notEqual
   190 00001A0B B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   191 00001A10 E8F7520000          <1>     call dosCrit1Exit
   192 00001A15 E933530000          <1>     jmp extErrExit
   193                              <1> .notEqual:
   194 00001A1A 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   195                              <1>     ;If the given path length is one more than the backslash offset
   196                              <1>     ; due to the terminating null, then the user is trying to delete the 
   197                              <1>     ; root dir. Fail this.
   198 00001A1D 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   199 00001A21 FFC1                <1>     inc ecx
   200 00001A23 663B0D(49070000)    <1>     cmp cx, word [pathLen]
   201 00001A2A 0F8423010000        <1>     je .accessDenied
   202 00001A30 E8C3020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   203                              <1>     ;for the entry in the sector we are hoping to delete
   204 00001A35 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   205 00001A3C C1E010              <1>     shl eax, 10h
   206 00001A3F 0FB71D(73060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   207 00001A46 09D8                <1>     or eax, ebx
   208 00001A48 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   209 00001A4E E8CDEFFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   210 00001A53 E8ADEEFFFF          <1>     call getBufForDirNoFile
   211 00001A58 0F82FA000000        <1>     jc .exitBad
   212                              <1>     ;rbx points to buffer
   213 00001A5E 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   214 00001A62 48B82E202020202020- <1>     mov rax, ".       "
   214 00001A6B 20                  <1>
   215 00001A6C 483906              <1>     cmp qword [rsi], rax
   216 00001A6F 0F85DE000000        <1>     jne .accessDenied
   217 00001A75 B42E                <1>     mov ah, "." ;Screw the partial stall
   218 00001A77 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   219 00001A7B 0F85D2000000        <1>     jne .accessDenied
   220 00001A81 4881C620000000      <1>     add rsi, fatDirEntry_size
   221 00001A88 488D3D(59060000)    <1>     lea rdi, curDirCopy
   222 00001A8F B904000000          <1>     mov ecx, 4
   223 00001A94 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   224                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   225                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   226 00001A97 488D3D(D4060000)    <1>     lea rdi, fcbName
   227 00001A9E B03F                <1>     mov al, "?"
   228 00001AA0 B90B000000          <1>     mov ecx, 11
   229 00001AA5 F3AA                <1>     rep stosb   ;Store the pattern to search for
   230 00001AA7 30C0                <1>     xor al, al  ;Store a terminating zero
   231 00001AA9 AA                  <1>     stosb
   232 00001AAA 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   233 00001AB0 50                  <1>     push rax    ;Save on stack temporarily
   234 00001AB1 8905(7F070000)      <1>     mov dword [dirClustA], eax
   235 00001AB7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   236 00001AB9 668905(83070000)    <1>     mov word [dirSect], ax
   237 00001AC0 C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   237 00001AC8 0000                <1>
   238 00001ACA C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   239 00001AD1 58                  <1>     pop rax
   240 00001AD2 E849EFFFFF          <1>     call getStartSectorOfCluster
   241 00001AD7 E84BEEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   242 00001ADC 727A                <1>     jc .exitBad
   243 00001ADE E8BBF4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   244 00001AE3 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   245 00001AEA 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   246 00001AF0 C605(68040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   247 00001AF7 E8FFF3FFFF          <1>     call searchDir.rmdirEP
   248 00001AFC 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   249                              <1>     ;Else, this is a empty dir, we can remove it
   250                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   251 00001AFE 488B05(41070000)    <1>     mov rax, qword [tempSect]
   252 00001B05 E81DEEFFFF          <1>     call getBufForDOS
   253 00001B0A 724C                <1>     jc .exitBad
   254 00001B0C E88DF4FFFF          <1>     call adjustDosDirBuffer
   255 00001B11 0FB705(49070000)    <1>     movzx eax, word [entry]
   256 00001B18 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 00001B1C 4801C6              <1>     add rsi, rax    
   258 00001B1F 8A05(03070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   259 00001B25 8806                <1>     mov byte [rsi], al  ;Store delchar there
   260 00001B27 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   261 00001B2B 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   262 00001B2F E846ECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   263 00001B34 C1E210              <1>     shl edx, 10h
   264 00001B37 09D0                <1>     or eax, edx
   265                              <1>     ;Now remove the FAT chain
   266 00001B39 E89BF0FFFF          <1>     call unlinkFAT
   267 00001B3E 7218                <1>     jc .exitBad
   268 00001B40 E803ECFFFF          <1>     call writeThroughBuffers
   269 00001B45 7211                <1>     jc .exitBad
   270 00001B47 E8C0510000          <1>     call dosCrit1Exit
   271 00001B4C 31C0                <1>     xor eax, eax
   272 00001B4E E9EC510000          <1>     jmp extGoodExit
   273                              <1> .accessDenied:
   274 00001B53 B805000000          <1>     mov eax, errAccDen
   275                              <1> .exitBad:
   276 00001B58 E8B4EBFFFF          <1>     call cancelWriteThroughBuffers
   277 00001B5D F9                  <1>     stc
   278 00001B5E E8A9510000          <1>     call dosCrit1Exit
   279 00001B63 E9E5510000          <1>     jmp extErrExit
   280                              <1> 
   281                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   282                              <1> ;Input: rdx = Pointer to ASCIIZ string
   283 00001B68 4889D7              <1>     mov rdi, rdx
   284 00001B6B E88D4E0000          <1>     call strlen
   285 00001B70 81F940000000        <1>     cmp ecx, 64
   286 00001B76 7607                <1>     jbe .okLength
   287                              <1> .badPath:
   288 00001B78 B003                <1>     mov al, errPnf
   289 00001B7A E9CE510000          <1>     jmp extErrExit
   290                              <1> .okLength:
   291 00001B7F 4889D6              <1>     mov rsi, rdx
   292 00001B82 E8E04E0000          <1>     call checkPathspecOK
   293 00001B87 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   294 00001B89 E8BF4F0000          <1>     call checkPathNet
   295 00001B8E 74E8                <1>     jz .badPath ;Or Net paths
   296                              <1>     ;Path is ok, now proceed
   297 00001B90 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   298 00001B97 E84BF6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   299 00001B9C 0F82AB510000        <1>     jc extErrExit   ;Exit with error code in eax
   300                              <1>     ;The path must've been ok, so now copy the path into the CDS
   301                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   302 00001BA2 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   303 00001BA9 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   304 00001BAF 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   305 00001BB1 488D3D(79060000)    <1>     lea rdi, tmpCDS
   306 00001BB8 B95B000000          <1>     mov ecx, cds_size
   307 00001BBD F3A4                <1>     rep movsb
   308                              <1>     ;If the path is longer than 67, call it an invalid path
   309 00001BBF 488D3D(1D050000)    <1>     lea rdi, buffer1
   310 00001BC6 E8324E0000          <1>     call strlen ;Get the length of this path
   311 00001BCB 81F943000000        <1>     cmp ecx, 67
   312 00001BD1 77A5                <1>     ja .badPath
   313 00001BD3 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   314 00001BD6 488D3D(79060000)    <1>     lea rdi, tmpCDS
   315 00001BDD F3A4                <1>     rep movsb   ;Copy the path over
   316                              <1>     ;Now get the start cluster from the directory copy
   317 00001BDF 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   318 00001BE6 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   319 00001BED C1E010              <1>     shl eax, 10h
   320 00001BF0 09D0                <1>     or eax, edx ;Add low bits to eax
   321 00001BF2 8905(C6060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   322 00001BF8 488D35(79060000)    <1>     lea rsi, tmpCDS
   323 00001BFF 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   324 00001C06 B95B000000          <1>     mov ecx, cds_size
   325 00001C0B E8F2500000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   326 00001C10 F3A4                <1>     rep movsb
   327 00001C12 E8F5500000          <1>     call dosCrit1Exit
   328 00001C17 31C0                <1>     xor eax, eax
   329 00001C19 E921510000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   330                              <1> .net:
   331                              <1> ;SDA Vars are setup for this request
   332 00001C1E B805110000          <1>     mov eax, 1105h
   333 00001C23 CD4F                <1>     int 4fh
   334 00001C25 0F8222510000        <1>     jc extErrExit
   335 00001C2B E90F510000          <1>     jmp extGoodExit
   336                              <1> getCurrentDIR:     ;ah = 47h
   337                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   338                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   339 00001C30 E8CD500000          <1>     call dosCrit1Enter
   340 00001C35 88D0                <1>     mov al, dl  ;Move drive number into al
   341 00001C37 E88D4C0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   342 00001C3C 730F                <1>     jnc .okDrive
   343                              <1> .badExit:
   344 00001C3E E8C9500000          <1>     call dosCrit1Exit
   345 00001C43 B80F000000          <1>     mov eax, errBadDrv
   346 00001C48 E900510000          <1>     jmp extErrExit
   347                              <1> .okDrive:
   348                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   349 00001C4D 56                  <1>     push rsi
   350 00001C4E 57                  <1>     push rdi
   351 00001C4F 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   352 00001C56 E884490000          <1>     call getDiskDPB
   353 00001C5B 5F                  <1>     pop rdi
   354 00001C5C 5E                  <1>     pop rsi
   355 00001C5D 0F82EA500000        <1>     jc extErrExit
   356                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   357 00001C63 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   358 00001C66 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   359 00001C6D 31C0                <1>     xor eax, eax
   360 00001C6F FFC8                <1>     dec eax
   361 00001C71 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   362 00001C74 750E                <1>     jne .writePathInBuffer
   363 00001C76 FFC0                <1>     inc eax
   364 00001C78 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   365                              <1>     ;Here we now add a terminating null at wBackslashOffset
   366 00001C7B 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   367 00001C7F C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   368                              <1> .writePathInBuffer:
   369 00001C84 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   370 00001C88 FFC0                <1>     inc eax ;Go past the backslash
   371 00001C8A 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   372 00001C8D E87A4D0000          <1>     call strcpy
   373 00001C92 E875500000          <1>     call dosCrit1Exit
   374 00001C97 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   375 00001C9C E99E500000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   376                              <1> 
   377                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   378 00001CA1 50                  <1>     push rax
   379 00001CA2 B800600000          <1>     mov eax, 6000h
   380 00001CA7 CD41                <1>     int 41h
   381 00001CA9 58                  <1>     pop rax
   382                              <1>     return
    13                              <2> %%_ret:
    14 00001CAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1>     
   384                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   385                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   386 00001CAB E8B74D0000          <1>     call checkPathspecOK    ;This preserves rsi
   387 00001CB0 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   388 00001CB2 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   389                              <1> .badPath:
   390 00001CB4 B803000000          <1>     mov eax, errPnf
   391 00001CB9 E98F500000          <1>     jmp extErrExit
   392                              <1> .pathspecOk:
   393 00001CBE 57                  <1>     push rdi    ;Save the destination
   394 00001CBF 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   395 00001CC6 E8D5F4FFFF          <1>     call canonicaliseFileName
   396 00001CCB 5F                  <1>     pop rdi
   397 00001CCC 0F827B500000        <1>     jc extErrExit
   398 00001CD2 488D35(1D050000)    <1>     lea rsi, buffer1
   399 00001CD9 E82E4D0000          <1>     call strcpy
   400 00001CDE 31C0                <1>     xor eax, eax
   401 00001CE0 E95A500000          <1>     jmp extGoodExit
   402                              <1> 
   403                              <1> ;-----------------------------------
   404                              <1> ;    General Directory Routines    :
   405                              <1> ;-----------------------------------
   406                              <1> 
   407                              <1> findFreeDiskDirEntry:
   408                              <1> ;Find a space in the directory we are searching for a directory entry
   409                              <1> ;Accept first entry starting with a 0E5h or 00h
   410                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   411                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   412                              <1> ; be called for CDS's that are NOT net CDS's).
   413                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   414                              <1> ;       Directory vars must be set up for the directory we are searching in
   415                              <1> ;Output: CF=CY => Error, eax has error code
   416                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   417                              <1>     ;breakpoint
   418 00001CE5 8A05(03070000)      <1>     mov al, byte [delChar]
   419 00001CEB 8805(D4060000)      <1>     mov byte [fcbName], al
   420 00001CF1 E8C8F1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   421                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001CF6 72B2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   422                              <1> ;Free entry found, dir variables are set for the free entry. 
   423                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   424                              <1> getDiskDirectoryEntry:
   425                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   426                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   427                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   428                              <1> ;        qword [tempSect] = Disk sector number of directory
   429                              <1> ;        word [entry] = 32 byte offset into sector
   430                              <1> ;        CF=CY => Error, exit 
   431 00001CF8 53                  <1>     push rbx
   432 00001CF9 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   433                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   434                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   435 00001CFF 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   436 00001D06 85C0                <1>     test eax, eax
   437 00001D08 7407                <1>     jz .skipCluster
   438 00001D0A E811EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   439 00001D0F EB1B                <1>     jmp short .skipOldFat
   440                              <1> .skipCluster:
   441 00001D11 55                  <1>     push rbp
   442 00001D12 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   443 00001D19 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   444 00001D20 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   445                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   446 00001D23 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   447 00001D27 5D                  <1>     pop rbp
   448 00001D28 7202                <1>     jb .skipOldFat
   449 00001D2A F9                  <1>     stc
   450                              <1>     return
    13                              <2> %%_ret:
    14 00001D2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> .skipOldFat:
   452 00001D2C 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   453 00001D2F 488905(41070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   454 00001D36 E8ECEBFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   455 00001D3B 5B                  <1>     pop rbx
   456                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001D3C 72ED                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001D3E 53                  <1>     push rbx
   458 00001D3F 488B1D(39070000)    <1>     mov rbx, qword [currBuff]
   459 00001D46 E853F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   460                              <1>     ;Above function gets data buffer ptr in rsi
   461 00001D4B 0FB705(83070000)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   462 00001D52 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   463 00001D56 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   464                              <1>     ; the current sector
   465 00001D58 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   466 00001D5B 8B1D(85070000)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   467 00001D61 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   468 00001D63 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   469 00001D66 66891D(49070000)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   470 00001D6D 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   471 00001D70 5B                  <1>     pop rbx
   472                              <1>     return
    13                              <2> %%_ret:
    14 00001D71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> 
   475                              <1> updateDirectoryEntryForFile:    
   476                              <1> ;Updates the directory entry for disk files
   477                              <1> ;Called with:
   478                              <1> ;   [workingDPB] = DPB pointer for the disk device
   479                              <1> ;   [currentSFT] = Current SFT pointer
   480 00001D72 50                  <1>     push rax
   481 00001D73 53                  <1>     push rbx
   482 00001D74 57                  <1>     push rdi
   483 00001D75 55                  <1>     push rbp
   484                              <1> 
   485 00001D76 E8874F0000          <1>     call dosCrit1Enter
   486 00001D7B 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
   487 00001D82 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   488 00001D89 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   489 00001D8F 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   490 00001D95 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   491 00001D9B 751B                <1>     jnz .skipDT
   492                              <1>     ;Get date and time words and add them to the directory entry
   493 00001D9D E8660B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   494                              <1>     ;Build date and time words
   495 00001DA2 E84C0C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   496                              <1>     ;Update SFT fields
   497 00001DA7 66894713            <1>     mov word [rdi + sft.wTime], ax
   498 00001DAB C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   499 00001DAE 66894715            <1>     mov word [rdi + sft.wDate], ax
   500 00001DB2 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   501                              <1> .skipDT:
   502                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   503                              <1> ; we skip all of this
   504 00001DB8 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   505 00001DBE 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   506 00001DC0 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   507 00001DC4 E86CEBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   508 00001DC9 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   509                              <1>     ;Now we write the changes to the sector
   510                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   511 00001DCB 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   512 00001DCF 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   513 00001DD3 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   514 00001DD6 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   515 00001DD9 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   516 00001DDC 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   517 00001DDF 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   518 00001DE3 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   519 00001DE7 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   520 00001DEB 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   521 00001DEF 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   522 00001DF3 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   523 00001DF6 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   524 00001DFA C1E810              <1>     shr eax, 10h
   525 00001DFD 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   526                              <1>     ;Directory sector updated and marked to be flushed to disk!
   527 00001E01 31C0                <1>     xor eax, eax
   528 00001E03 FF15(2F010000)      <1>     call qword [updateDirShare]
   529 00001E09 F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   530 00001E0A E86BE9FFFF          <1>     call markBufferDirty
   531 00001E0F E834E9FFFF          <1>     call writeThroughBuffers
   532 00001E14 720A                <1>     jc .exitBad
   533                              <1> .exit:
   534 00001E16 E8F14E0000          <1>     call dosCrit1Exit
   535 00001E1B 5D                  <1>     pop rbp
   536 00001E1C 5F                  <1>     pop rdi
   537 00001E1D 5B                  <1>     pop rbx
   538 00001E1E 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 00001E1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> .exitBad:
   541 00001E20 E8ECE8FFFF          <1>     call cancelWriteThroughBuffers
   542 00001E25 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   543 00001E26 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   544 00001E2C 9D                  <1>     popfq
   545 00001E2D EBE7                <1>     jmp short .exit
   546                              <1>     
   547                              <1> growDirectory:
   548                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   549                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   550                              <1> ;                 eax = New Cluster number
   551                              <1> ;               TWO NON CF ERROR CASES.
   552                              <1> ;               If eax = -1 => disk full!
   553                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   554                              <1> ;        CF=CY => Something went wrong. Rip. 
   555 00001E2F 53                  <1>     push rbx
   556 00001E30 51                  <1>     push rcx
   557 00001E31 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   558 00001E37 85C0                <1>     test eax, eax
   559 00001E39 7424                <1>     jz .exit
   560 00001E3B E80DECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   561 00001E40 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   562 00001E42 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   563 00001E47 E874ECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   564 00001E4C 7211                <1>     jc .exit
   565 00001E4E 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   566 00001E50 E8CDEDFFFF          <1>     call readFAT
   567 00001E55 7208                <1>     jc .exit
   568 00001E57 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   569 00001E5C 7201                <1>     jc .exit
   570 00001E5E F8                  <1>     clc
   571                              <1> .exit:
   572 00001E5F 59                  <1>     pop rcx
   573 00001E60 5B                  <1>     pop rbx
   574                              <1>     return   
    13                              <2> %%_ret:
    14 00001E61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> sanitiseCluster:
   576                              <1> ;Sanitises the cluster in eax to all zeros
   577                              <1> ;Does not move file pointers
   578                              <1> ;Currently, is only called to sanitise subdirectory clusters
   579                              <1> ;Input: eax = Cluster number
   580                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   581                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   582                              <1> ;        If CF=CY => Error, exit
   583 00001E62 50                  <1>     push rax
   584 00001E63 53                  <1>     push rbx
   585 00001E64 51                  <1>     push rcx
   586 00001E65 52                  <1>     push rdx
   587 00001E66 56                  <1>     push rsi
   588 00001E67 55                  <1>     push rbp
   589 00001E68 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   590 00001E6F E8ACEBFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   591 00001E74 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   592 00001E78 FFC2                <1>     inc edx ;Make it a count of sectors
   593                              <1> .getSectorInCluster:
   594 00001E7A E869EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   595 00001E7F 721E                <1>     jc .exitBad
   596 00001E81 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   597 00001E85 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   598 00001E89 31C0                <1>     xor eax, eax
   599 00001E8B F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   600 00001E8D E8E8E8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   601                              <1> 
   602 00001E92 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   603 00001E94 740A                <1>     jz .exit    ;Jump if we done
   604 00001E96 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   605 00001E9A 48FFC0              <1>     inc rax ;Goto next sector in cluster
   606 00001E9D EBDB                <1>     jmp short .getSectorInCluster
   607                              <1> .exitBad:
   608 00001E9F F9                  <1>     stc
   609                              <1> .exit:
   610 00001EA0 5D                  <1>     pop rbp
   611 00001EA1 5E                  <1>     pop rsi
   612 00001EA2 5A                  <1>     pop rdx
   613 00001EA3 59                  <1>     pop rcx
   614 00001EA4 5B                  <1>     pop rbx
   615 00001EA5 58                  <1>     pop rax
   616                              <1>     return
    13                              <2> %%_ret:
    14 00001EA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00001EA7 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00001EA8 488D1D(1B050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00001EAF 48891D(A4040000)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    59 00001EB6 5B                  <1>     pop rbx
    60 00001EB7 C705(AC040000)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00001EBF 0000                <1>
    61 00001EC1 668905(1B050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00001EC8 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00001ECE 0F85A1000000        <1>     jnz .notChar
    64 00001ED4 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00001EDA 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00001EE0 E8064E0000          <1>     call dosPushRegs    ;Save context here
    68 00001EE5 488D1D2EE1FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00001EEC 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00001EEF C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00001EF2 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00001EF5 890D(96040000)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00001EFB 31C9                <1>     xor ecx, ecx
    75 00001EFD 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00001F00 7506                <1>     jne .skipBsySet
    77 00001F02 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00001F08 66870D(99040000)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00001F0F 488D1D(96040000)    <1>     lea rbx, secdReqHdr
    82 00001F16 E84F450000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00001F1B 668B3D(99040000)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
    84 00001F22 F7C700800000        <1>     test edi, drvErrStatus
    85 00001F28 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00001F2A 803D(98040000)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00001F31 750C                <1>     jne .notNDRead
    89 00001F33 8A05(A3040000)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00001F39 8805(1B050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00001F3F 8A25(9A040000)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00001F45 F6D4                <1>     not ah
    94 00001F47 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00001F4A E8854D0000          <1>     call dosPopRegs ;Get back the context
    96 00001F4F 668B05(1B050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 00001F56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00001F57 88CC                <1>     mov ah, cl
   101 00001F59 E8A83F0000          <1>     call charDevErr
   102 00001F5E 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00001F60 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 00001F62 E86D4D0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00001F67 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00001F6C 8025(9A040000)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 00001F73 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 00001F75 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00001F77 7409                <1>     jz .makeDiskNetReadReq
   115 00001F79 FECC                <1>     dec ah
   116 00001F7B 7421                <1>     jz .makeDiskNetNonDestReq
   117 00001F7D FECC                <1>     dec ah
   118 00001F7F 7429                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 00001F81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 00001F82 E833000000          <1>     call .prepDiskNetIO
   123 00001F87 E88C200000          <1>     call readBytes
   124 00001F8C 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00001F8E E850000000          <1>     call .cleanDiskNetIO
   126 00001F93 8A05(1B050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F99 75E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   128 00001F9B B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00001F9D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00001F9E FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 00001FA1 E8DCFFFFFF          <1>     call .makeDiskNetReadReq
   134 00001FA6 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00001FA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00001FAA E80B000000          <1>     call .prepDiskNetIO
   138 00001FAF E8A3230000          <1>     call writeBytes
   139 00001FB4 E82A000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00001FB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00001FBA 8F05(EA040000)      <1>     pop qword [altRet]
   145 00001FC0 E8264D0000          <1>     call dosPushRegs
   146 00001FC5 FF35(17040000)      <1>     push qword [currentDTA]
   147 00001FCB 488D0D(1B050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00001FD2 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00001FD9 31C9                <1>     xor ecx, ecx
   150 00001FDB FFC1                <1>     inc ecx ;IO 1 byte only
   151                              <1> .cleanDNIOReturn:
   152 00001FDD FF25(EA040000)      <1>     jmp qword [altRet]
   153                              <1> .cleanDiskNetIO:
   154 00001FE3 8F05(EA040000)      <1>     pop qword [altRet]
   155 00001FE9 8F05(17040000)      <1>     pop qword [currentDTA]
   156 00001FEF E8E04C0000          <1>     call dosPopRegs
   157 00001FF4 EBE7                <1>     jmp short .cleanDNIOReturn
   158                              <1> 
   159                              <1> openSFT:
   160                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   161                              <1> ;Input: rdi = SFT pointer
   162 00001FF6 E8F04C0000          <1>     call dosPushRegs
   163 00001FFB B00D                <1>     mov al, drvOPEN
   164 00001FFD EB07                <1>     jmp short openCloseCommon
   165                              <1> closeSFT:
   166                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   167 00001FFF E8E74C0000          <1>     call dosPushRegs
   168 00002004 B00E                <1>     mov al, drvCLOSE
   169                              <1> openCloseCommon:
   170                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   171 00002006 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   172 0000200C 7469                <1>     jz .exit    ;Exit if so
   173 0000200E F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   174 00002012 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   175 00002016 7512                <1>     jnz .charDev
   176                              <1>     ;Here a disk drive, rdi is a DPB ptr
   177 00002018 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   178 0000201F 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   179 00002021 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   180 00002024 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   181 00002026 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   182                              <1> .charDev:
   183 0000202A 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   184 00002030 7445                <1>     jz .exit    ;No, exit!
   185 00002032 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   186 00002035 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   187 0000203C 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   188                              <1> .retryEP:
   189 0000203F 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   190 00002042 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   191 00002045 50                  <1>     push rax    ;Save the dword
   192 00002046 E823440000          <1>     call goDriver
   193 0000204B 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   194 00002052 F7C700800000        <1>     test edi, drvErrStatus
   195 00002058 741C                <1>     jz .exitPop
   196                              <1>     ;Error here, check if char or block drive
   197 0000205A 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   198 00002060 7404                <1>     jz .blockError
   199                              <1>     ;Char error here
   200 00002062 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   201 00002064 EB04                <1>     jmp short .errorCmn
   202                              <1> .blockError:
   203 00002066 88C8                <1>     mov al, cl  ;Move drive number into al
   204 00002068 B406                <1>     mov ah, critData    ;Data on block dev error
   205                              <1> .errorCmn:
   206                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   207 0000206A E8973E0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   208 0000206F B001                <1>     mov al, critRetry   ;al returns user response
   209 00002071 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   210 00002073 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   211 00002074 EBC9                <1>     jmp short .retryEP  ;Reset
   212                              <1> .exitPop:
   213 00002076 58                  <1>     pop rax    
   214                              <1> .exit:
   215 00002077 E8584C0000          <1>     call dosPopRegs
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000207C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 0000207D E87D010000          <1>     call charIn_B
    17 00002082 50                  <1>     push rax
    18 00002083 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002088 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 00002089 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 0000208A 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    26 0000208C 3C20                <1>     cmp al, asciiCaret
    27 0000208E 0F8286000000        <1>     jb .control
    28 00002094 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00002096 7406                <1>     je .skipCurs
    30 00002098 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 0000209E FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    33 000020A4 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 000020AB 56                  <1>     push rsi
    35 000020AC 7507                <1>     jnz .skipErrorCheck
    36 000020AE 50                  <1>     push rax
    37 000020AF E897020000          <1>     call vConCtrlCheck
    38 000020B4 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 000020B5 E81F020000          <1>     call outputOnStdout
    41 000020BA 5E                  <1>     pop rsi
    42 000020BB F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000020C2 74C5                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    44 000020C4 53                  <1>     push rbx
    45 000020C5 56                  <1>     push rsi
    46 000020C6 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000020CB E842030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000020D0 0F82CE000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000020D6 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000020DA F7C300800000        <1>     test ebx, devRedirDev
    52 000020E0 0F85BE000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 000020E6 F7C380000000        <1>     test ebx, devCharDev
    54 000020EC 0F84B2000000        <1>     jz auxOutCmn.exit
    55 000020F2 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 000020F7 E816030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 000020FC 0F82A2000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002102 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00002108 0F8491000000        <1>     jz auxOutCmn.diskFileEP
    60 0000210E C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002115 E98A000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 0000211A 3C0D                <1>     cmp al, CR
    64 0000211C 7429                <1>     je .newline
    65 0000211E 3C08                <1>     cmp al, BSP
    66 00002120 7431                <1>     je .back
    67 00002122 3C09                <1>     cmp al, TAB
    68 00002124 0F8574FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70                              <1> .tab:
    71 0000212A 51                  <1>     push rcx
    72 0000212B 0FB60D(CC020000)    <1>     movzx ecx, byte [vConCursPos]
    73 00002132 80C9F8              <1>     or cl, ~7
    74 00002135 F6D9                <1>     neg cl
    75 00002137 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    76                              <1> .tabloop:
    77 0000213A B020                <1>     mov al, SPC
    78 0000213C E84BFFFFFF          <1>     call charOut_B.in   ;Output the char
    79 00002141 FEC9                <1>     dec cl
    80 00002143 75F5                <1>     jnz .tabloop
    81                              <1> .stopTab:
    82 00002145 59                  <1>     pop rcx
    83                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00002146 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    84                              <1> .newline:
    85 00002147 C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    86 0000214E E94BFFFFFF          <1>     jmp .skipCurs   ;And echo 
    87                              <1> .back:
    88 00002153 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    89 00002159 E940FFFFFF          <1>     jmp .skipCurs   ;And echo
    90                              <1> 
    91                              <1> auxIn_B:        ;ah = 03h
    92 0000215E E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    93 00002163 BB03000000          <1>     mov ebx, 3
    94 00002168 E8A5020000          <1>     call getCharDevSFT
    95                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000216D 72D7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    96                              <1> .auxloop:
    97 0000216F B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    98 00002171 E831FDFFFF          <1>     call mainCharIO
    99 00002176 7408                <1>     jz .signalLoop
   100 00002178 30E4                <1>     xor ah, ah  ;Read the char in
   101 0000217A E828FDFFFF          <1>     call mainCharIO
   102                              <1>     return
    13                              <2> %%_ret:
    14 0000217F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .signalLoop:
   104 00002180 E8A3010000          <1>     call callInt48h
   105 00002185 EBE8                <1>     jmp short .auxloop
   106                              <1> 
   107                              <1> auxOut_B:       ;ah = 04h
   108 00002187 53                  <1>     push rbx
   109 00002188 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   110 0000218D EB06                <1>     jmp short auxOutCmn
   111                              <1> prnOut_B:       ;ah = 05h
   112 0000218F 53                  <1>     push rbx
   113 00002190 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   114                              <1> auxOutCmn: ;Auxilliary output device common 
   115 00002195 88D0                <1>     mov al, dl  ;Get the char into al
   116 00002197 50                  <1>     push rax
   117 00002198 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   118 0000219D 58                  <1>     pop rax
   119 0000219E 56                  <1>     push rsi
   120                              <1> .diskFileEP:
   121 0000219F E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   122                              <1> .netFileEP:
   123                              <1> .exit:
   124 000021A4 5E                  <1>     pop rsi
   125 000021A5 5B                  <1>     pop rbx
   126                              <1>     return
    13                              <2> %%_ret:
    14 000021A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> directConIO:    ;ah = 06h
   129 000021A7 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   130 000021A9 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   131 000021AB 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   132                              <1> ;Here is the read char direct function
   133 000021B1 31DB                <1>     xor ebx, ebx    
   134 000021B3 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   135                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021B8 72EC                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   136 000021BA 488B2D(7A040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   137 000021C1 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   138 000021C3 E8DFFCFFFF          <1>     call mainCharIO
   139 000021C8 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   140 000021CD 7507                <1>     jnz .readChar
   141 000021CF 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   142 000021D3 30C0                <1>     xor al, al  ;Set caller return code to 0
   143                              <1>     return
    13                              <2> %%_ret:
    14 000021D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   144                              <1> .readChar:
   145 000021D6 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   146                              <1>     ;Fallthrough here to get the char at STDIN
   147                              <1> charIn:         ;ah = 07h
   148                              <1> ;Return char in al from STDIN without waiting
   149 000021DA 31DB                <1>     xor ebx, ebx
   150 000021DC E831020000          <1>     call getCharDevSFT
   151                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000021E1 72F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   152 000021E3 B401                <1>     mov ah, 01  ;ND read for char
   153 000021E5 E8BDFCFFFF          <1>     call mainCharIO
   154 000021EA 750B                <1>     jnz .getChar
   155 000021EC B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   156 000021EE CD4A                <1>     int 4Ah
   157 000021F0 E833010000          <1>     call callInt48h
   158 000021F5 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   159                              <1> .getChar:
   160                              <1>     ;Get the char in al and exit
   161 000021F7 30E4                <1>     xor ah, ah
   162 000021F9 E8A9FCFFFF          <1>     call mainCharIO
   163                              <1>     return
    13                              <2> %%_ret:
    14 000021FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> charIn_B:       ;ah = 08h
   165                              <1> ;Return char in al from STDIN
   166 000021FF 56                  <1>     push rsi
   167                              <1> .readAgain:
   168 00002200 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   169                              <1>     ;Also sets rsi to point to the device SFT for 
   170 00002205 7543                <1>     jnz .pullChar
   171 00002207 803D(E1190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   172 0000220E 7507                <1>     jne .skiplookahead
   173 00002210 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   174 00002212 E890FCFFFF          <1>     call mainCharIO
   175                              <1> .skiplookahead:
   176 00002217 B484                <1>     mov ah, 84h
   177 00002219 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   178 0000221B 66813D(C21A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   178 00002223 FF                  <1>
   179 00002224 751B                <1>     jne .skipClockRead
   180 00002226 E8C04A0000          <1>     call dosPushRegs
   181 0000222B F8                  <1>     clc ;Clear CF, write primary header to backup
   182 0000222C E882000000          <1>     call swapPrimaryHeader
   183 00002231 E8D2060000          <1>     call readDateTimeRecord
   184 00002236 F9                  <1>     stc ;Set CF, write backup to primary header
   185 00002237 E877000000          <1>     call swapPrimaryHeader
   186 0000223C E8934A0000          <1>     call dosPopRegs
   187                              <1> .skipClockRead:
   188 00002241 66FF05(C21A0000)    <1>     inc word [keybTicks]
   189 00002248 EBB6                <1>     jmp short .readAgain
   190                              <1> .pullChar:
   191 0000224A 30E4                <1>     xor ah, ah
   192 0000224C E856FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   193 00002251 5E                  <1>     pop rsi
   194 00002252 3C00                <1>     cmp al, NUL ;Is this the null char?
   195 00002254 7507                <1>     jne .exit
   196                              <1>     ;We are mid extended ascii, prevent printer toggling
   197 00002256 C605(C11A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   198                              <1> .exit:
   199                              <1>     return
    13                              <2> %%_ret:
    14 0000225D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printString_B:      ;ah = 09h
   202 0000225E 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   203                              <1> .ps0:
   204 00002261 AC                  <1>     lodsb   ;Get char in al and inc rsi
   205 00002262 3C24                <1>     cmp al, "$" ;End of string char?
   206                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002264 74F7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 00002266 E821FEFFFF          <1>     call charOut_B.in
   208 0000226B EBF4                <1>     jmp short .ps0
   209                              <1> 
   210                              <1> checkStdinStatus:  ;ah = 0Bh
   211                              <1> ;Returns the status of the driver controlling vCon
   212 0000226D E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   213 00002272 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   214                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002274 74E7                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   215 00002276 FEC8                <1>     dec al  ;Set al to -1 if char available
   216                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002278 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> clearbuffDoFunc:   ;ah = 0Ch
   218                              <1> ;Clears any buffers and issues a console read command (the command in al)
   219                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   220 00002279 50                  <1>     push rax
   221 0000227A 52                  <1>     push rdx
   222 0000227B 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   223 0000227D E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   224 00002282 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   225 00002284 B404                <1>     mov ah, 04h ;Flush input buffers
   226 00002286 E81CFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   227                              <1> .skipFlush:
   228 0000228B 5A                  <1>     pop rdx
   229 0000228C 58                  <1>     pop rax
   230 0000228D 88C4                <1>     mov ah, al  ;Move function number into ah
   231 0000228F 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   232 00002291 7507                <1>     jne .others
   233 00002293 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   234 00002296 7412                <1>     jz .bad ;Yes, exit
   235 00002298 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   236                              <1> .others:
   237 0000229A 3C01                <1>     cmp al, 01h
   238 0000229C 740F                <1>     je .callFunction
   239 0000229E 3C07                <1>     cmp al, 07h
   240 000022A0 740B                <1>     je .callFunction
   241 000022A2 3C08                <1>     cmp al, 08h
   242 000022A4 7407                <1>     je .callFunction
   243 000022A6 3C0A                <1>     cmp al, 0Ah
   244 000022A8 7403                <1>     je .callFunction
   245                              <1> .bad:
   246 000022AA 30C0                <1>     xor al, al
   247                              <1>     return
    13                              <2> %%_ret:
    14 000022AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .callFunction:
   249 000022AD FA                  <1>     cli ;Prepare to swap stack pointer
   250                              <1>     ;The below address avoids "properly" reentering DOS
   251                              <1>     ;We simply reuse the function dispatch aspect. 
   252                              <1>     ;this means we dont trash the caller's register frame 
   253 000022AE E950490000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   254                              <1> ;------------------------
   255                              <1> ;  Primitive functions  :
   256                              <1> ;------------------------
   257                              <1> swapPrimaryHeader:
   258                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   259                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   260 000022B3 56                  <1>     push rsi
   261 000022B4 57                  <1>     push rdi
   262 000022B5 51                  <1>     push rcx
   263 000022B6 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   263 000022BF 00                  <1>
   264 000022C0 488D35(C0040000)    <1>     lea rsi, primReqHdr
   265 000022C7 488D3D(941A0000)    <1>     lea rdi, bkupReqHdr
   266 000022CE 7303                <1>     jnc .read
   267 000022D0 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   268                              <1> .read:
   269 000022D3 F3A4                <1>     rep movsb   ;Swap
   270 000022D5 59                  <1>     pop rcx
   271 000022D6 5F                  <1>     pop rdi
   272 000022D7 5E                  <1>     pop rsi
   273                              <1>     return
    13                              <2> %%_ret:
    14 000022D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> outputOnStdout:
   275                              <1> ;Input: al = Char to output
   276                              <1> ;Output: CF=CY, all good
   277 000022D9 53                  <1>     push rbx
   278 000022DA BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   279 000022DF E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   280 000022E4 7217                <1>     jc .exit
   281 000022E6 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   282 000022EC 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   283 000022EE 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   284 000022F2 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   285 000022F8 7405                <1>     jz .notCharDevOrFast
   286 000022FA CD49                <1>     int 49h ;Fast output
   287                              <1> .exitOk:
   288 000022FC F8                  <1>     clc
   289                              <1> .exit:
   290 000022FD 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 000022FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> .notCharDevOrFast:
   293 000022FF E809000000          <1>     call outputOnSFT
   294 00002304 5B                  <1>     pop rbx
   295                              <1>     return
    13                              <2> %%_ret:
    14 00002305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> 
   297                              <1> outputToHandle:
   298                              <1> ;Char to output must be in al
   299 00002306 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   300                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000230B 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   301                              <1> outputOnSFT:
   302                              <1> ;Output char in al to SFT in rsi
   303                              <1> ;Waits until device is not busy to send char.
   304                              <1> ;Calls int 48h if device busy
   305 0000230D 50                  <1>     push rax
   306 0000230E B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   307 00002310 E892FBFFFF          <1>     call mainCharIO
   308 00002315 58                  <1>     pop rax
   309 00002316 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   310 00002318 B402                <1>     mov ah, 02h ;Output char in al
   311 0000231A E888FBFFFF          <1>     call mainCharIO
   312 0000231F F8                  <1>     clc
   313                              <1>     return
    13                              <2> %%_ret:
    14 00002320 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .signalLoop:
   315 00002321 E802000000          <1>     call callInt48h
   316 00002326 EBE5                <1>     jmp short outputOnSFT
   317                              <1> 
   318                              <1> callInt48h:
   319                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   320 00002328 9C                  <1>     pushfq
   321 00002329 F605(94040000)FF    <1>     test byte [int48Flag], -1
   322 00002330 7417                <1>     jz .exit    ;If zero, not safe
   323 00002332 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   324 00002339 750E                <1>     jnz .exit
   325                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   326 0000233B FF35(94040000)      <1>     push qword [int48Flag] 
   327 00002341 CD48                <1>     int 48h
   328 00002343 8F05(94040000)      <1>     pop qword [int48Flag]    ;Return original value
   329                              <1> .exit:
   330 00002349 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 0000234A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> 
   334                              <1> vConCtrlCheck:
   335                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   336                              <1> ; the processing. 
   337                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   338                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   339                              <1> ;
   340                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   341                              <1> ;^S will pause screen processing until another key is processed by vCon input
   342                              <1> ;^P will toggle the printer echo feature of the vConsole
   343                              <1> ;
   344                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   345                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   346                              <1> ;
   347                              <1> ;Output: 
   348                              <1> ;   CF=CY : Error
   349                              <1> ;   CF=NC : ...
   350                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   351                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   352 0000234B E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   353 00002350 53                  <1>     push rbx
   354 00002351 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   355 00002353 E8BA000000          <1>     call getCharDevSFT
   356 00002358 5B                  <1>     pop rbx
   357                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002359 72EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358 0000235B B401                <1>     mov ah, 01  ;Non destructively read CON
   359 0000235D E845FBFFFF          <1>     call mainCharIO
   360 00002362 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   361                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   362 00002364 3C13                <1>     cmp al, DC3 ;^S ?
   363 00002366 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   364 00002368 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   365 0000236A E838FBFFFF          <1>     call mainCharIO
   366 0000236F E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   367                              <1> .checkPrintOrExit:
   368 00002374 3C10                <1>     cmp al, DLE ;Do we have ^P?
   369 00002376 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   370 00002378 3C03                <1>     cmp al, ETX ;Do we have ^C?
   371 0000237A 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   372                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   373                              <1>     return 
    13                              <2> %%_ret:
    14 0000237C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .printToggle:
   375 0000237D F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   376 00002383 53                  <1>     push rbx
   377 00002384 BB04000000          <1>     mov ebx, 4  ;PRN handle
   378 00002389 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   379 0000238E 5B                  <1>     pop rbx
   380                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000238F 72EB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00002391 57                  <1>     push rdi
   382 00002392 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   383 00002395 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   384 0000239B 741D                <1>     jz .notNet
   385 0000239D 50                  <1>     push rax
   386 0000239E B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   387 000023A3 CD4F                <1>     int 4Fh
   388 000023A5 58                  <1>     pop rax
   389 000023A6 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   390                              <1>     ;If something went wrong, turn off echo
   391 000023A8 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   392 000023AF 50                  <1>     push rax
   393 000023B0 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   394 000023B5 CD4F                <1>     int 4Fh
   395 000023B7 58                  <1>     pop rax
   396 000023B8 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   397                              <1> .notNet:
   398                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   399                              <1> ; 0Dh or 0Eh
   400 000023BA 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   401 000023C1 7507                <1>     jnz .echoOn
   402 000023C3 E837FCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   403 000023C8 EB05                <1>     jmp short .printExit
   404                              <1> .echoOn:
   405 000023CA E827FCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   406                              <1> .printExit:
   407 000023CF 5F                  <1>     pop rdi
   408                              <1>     return
    13                              <2> %%_ret:
    14 000023D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   410 000023D1 E852FFFFFF          <1>     call callInt48h
   411                              <1> .waitNextChar:   ;Here get next char
   412 000023D6 B401                <1>     mov ah, 01h ;ND read
   413 000023D8 E8CAFAFFFF          <1>     call mainCharIO
   414 000023DD 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   415                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   416 000023DF 53                  <1>     push rbx
   417 000023E0 31DB                <1>     xor ebx, ebx
   418 000023E2 E82B000000          <1>     call getCharDevSFT
   419 000023E7 5B                  <1>     pop rbx
   420                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000023E8 72E6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   421 000023EA 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   422 000023EC E8B6FAFFFF          <1>     call mainCharIO
   423 000023F1 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   424 000023F3 7514                <1>     jnz .checkBreak2
   425 000023F5 803D(C11A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   426 000023FC 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   427 00002402 C605(C11A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   428                              <1> .checkBreak2:
   429 00002409 3C03                <1>     cmp al, ETX
   430                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000240B 75C3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   431 0000240D E9AD3B0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   432                              <1> 
   433                              <1> 
   434                              <1> getCharDevSFT:
   435                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   436                              <1> ;Input: bx = zero extended handle number
   437                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   438                              <1> ;        CF=CY => al = Error code, abort operation
   439 00002412 F605(93040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   440 00002419 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   441                              <1> .getSFT:
   442 0000241B 57                  <1>     push rdi
   443 0000241C E814250000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   444 00002421 4889FE              <1>     mov rsi, rdi
   445 00002424 5F                  <1>     pop rdi
   446                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .swap:
   448                              <1> ;workingSFT is only set for CON calls
   449 00002426 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   450 0000242C 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   451 0000242E 488B35(1D070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   452 00002435 F8                  <1>     clc
   453                              <1>     return
    13                              <2> %%_ret:
    14 00002436 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   454                              <1> 
   455                              <1> ;------------------------
   456                              <1> ;   Utility functions   :
   457                              <1> ;------------------------
   458                              <1> printCaretASCII:
   459                              <1> ;Input: al = Char to print with a caret
   460                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   461                              <1> ;First check if the char should be careted, and then print normally if so
   462 00002437 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   463 00002439 0F834DFCFFFF        <1>     jae charOut_B.in
   464 0000243F 3C09                <1>     cmp al, TAB
   465 00002441 0F8445FCFFFF        <1>     je charOut_B.in
   466 00002447 3C15                <1>     cmp al, NAK
   467 00002449 0F843DFCFFFF        <1>     je charOut_B.in
   468 0000244F 3C14                <1>     cmp al, DC4
   469 00002451 0F8435FCFFFF        <1>     je charOut_B.in
   470 00002457 50                  <1>     push rax
   471 00002458 B05E                <1>     mov al, "^" ;Get caret in place
   472 0000245A E82DFCFFFF          <1>     call charOut_B.in
   473 0000245F 58                  <1>     pop rax
   474 00002460 0440                <1>     add al, "@" ;Turn into an ASCII Char
   475 00002462 E925FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   476                              <1> printCRLF:
   477 00002467 B00D                <1>     mov al, CR
   478 00002469 E81EFCFFFF          <1>     call charOut_B.in
   479 0000246E B00A                <1>     mov al, LF
   480 00002470 E917FCFFFF          <1>     jmp charOut_B.in
   481                              <1> 
   482                              <1> checkBreak:
   483                              <1> ;Reads bytes from CON if there are any bytes to read and 
   484                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   485 00002475 803D(08040000)01    <1>     cmp byte [inDOS], 1
   486                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000247C 75B8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> ;Returns in al the keystroke that is available IF one is available
   488                              <1> ; or al=0 if no keystroke available
   489 0000247E 53                  <1>     push rbx
   490 0000247F 56                  <1>     push rsi
   491 00002480 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   492                              <1>     ;Place command code and a zero status word at the same time
   493 00002487 C705(EC040000)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   493 0000248F 0000                <1>
   494                              <1>     ;Place the packet size in the hdrlen field
   495 00002491 C605(EA040000)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   496 00002498 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   497 0000249F E8CA3F0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   498                              <1>     ;Check if the busy bit is set (No keystroke available)
   499 000024A4 66F705(ED040000)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   499 000024AC 02                  <1>
   500 000024AD 7405                <1>     jz .charFound
   501                              <1> .exit:
   502 000024AF 30C0                <1>     xor al, al
   503 000024B1 5E                  <1>     pop rsi
   504 000024B2 5B                  <1>     pop rbx
   505                              <1>     return
    13                              <2> %%_ret:
    14 000024B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> .charFound:
   507                              <1> ;Keystroke available, proceed
   508 000024B4 8A05(F7040000)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   509 000024BA 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   510 000024BC 75F1                <1>     jne .exit   ;If not equal exit
   511                              <1> ;Now we pull the char out of the buffer
   512 000024BE C705(EC040000)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   512 000024C6 0000                <1>
   513 000024C8 C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   514                              <1>     ;Place pointers and number of chars
   515 000024CF C705(00050000)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   515 000024D7 0000                <1>
   516                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   517 000024D9 488D05(F7040000)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   518 000024E0 488905(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   519 000024E7 E8823F0000          <1>     call goDriver   ;RSI and RBX as before
   520 000024EC E9CE3A0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   521                              <1> 
   522                              <1> vConSwapDriver:
   523                              <1> ;Sets up the vCon to use the alternative SFT pointer
   524 000024F1 57                  <1>     push rdi
   525 000024F2 C605(93040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   526 000024F9 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   527 00002500 48893D(1D070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   528 00002507 5F                  <1>     pop rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002508 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> vConRetDriver:
   532                              <1> ;Returns the original driver (sets flag down)
   533 00002509 C605(93040000)00    <1>     mov byte [vConDrvSwp], 0
   534                              <1>     return
    13                              <2> %%_ret:
    14 00002510 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> ;--------------------------------------------------
   537                              <1> ;      Main Keyboard Buffered Input Function      :
   538                              <1> ;--------------------------------------------------
   539                              <1> buffCharInput_BE:  ;ah = 0Ah
   540                              <1> ;Buffer pointer in rdx
   541                              <1> ; byte [rdx + 0], buffer length
   542                              <1> ; byte [rdx + 1], number of chars in buffer
   543                              <1> ; byte [rdx + 2], buffer start
   544                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   545                              <1> ;Register use
   546                              <1> ; dh = Char offset in internal buffer
   547                              <1> ; dl = Buffer length
   548                              <1> ; bh = Char offset in user buffer
   549                              <1> ; bl = Number of chars already in the buffer
   550                              <1> ; rdi = Internal buffer
   551                              <1> ; rsi = User buffer
   552 00002511 4889D6              <1>     mov rsi, rdx
   553 00002514 66AD                <1>     lodsw   ;Get buffer metadata in ax
   554 00002516 84C0                <1>     test al, al
   555                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002518 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   556 0000251A 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   557 0000251D 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   558 0000251F 7606                <1>     jbe .avoidcheck
   559 00002521 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   560 00002525 7402                <1>     je .functionKeyOk
   561                              <1> .avoidcheck:
   562 00002527 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   563                              <1> .functionKeyOk:
   564 00002529 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   565 0000252C FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   566                              <1> .breakEP:
   567 0000252E 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   568 00002534 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   569 0000253A 56                  <1>     push rsi    ;Push user buffer address
   570 0000253B 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   571 00002542 C605(FE060000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   572                              <1> .mainLoop:
   573 00002549 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   574 0000254E 3C0A                <1>     cmp al, LF
   575 00002550 7505                <1>     jne .checkControlChars
   576                              <1> .mainLoop2:
   577 00002552 E8A8FCFFFF          <1>     call charIn_B
   578                              <1> .checkControlChars:
   579 00002557 3C06                <1>     cmp al, ACK
   580 00002559 74F7                <1>     je .mainLoop2   ;Get another char
   581 0000255B 3A05D9DAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   582 00002561 0F8426010000        <1>     je .escape
   583 00002567 3C7F                <1>     cmp al, DEL
   584 00002569 0F8489000000        <1>     je .delete
   585 0000256F 3C08                <1>     cmp al, BSP
   586 00002571 0F8481000000        <1>     je .delete
   587 00002577 3C17                <1>     cmp al, ETB
   588                              <1>     ;Add space for patched jump instructions
   589 00002579 9090909090          <1>     db 5 dup (90h)  ;NOP
   590 0000257E 3C15                <1>     cmp al, NAK
   591 00002580 9090909090          <1>     db 5 dup (90h)
   592 00002585 3C0D                <1>     cmp al, CR
   593 00002587 744C                <1>     je .carriageReturn
   594 00002589 3C0A                <1>     cmp al, LF
   595 0000258B 7461                <1>     je .lineFeed
   596 0000258D 3A05A8DAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   597 00002593 7429                <1>     je .break
   598                              <1> .checkIfCanInsert:
   599 00002595 38D6                <1>     cmp dh, dl
   600 00002597 731C                <1>     jae .bufOflw
   601 00002599 AA                  <1>     stosb   ;Store the byte and increment rdi!
   602 0000259A FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   603 0000259C E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   604 000025A1 803D(FE060000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   605 000025A8 75A8                <1>     jne .mainLoop2
   606                              <1>     ;IF not in insert mode, we fall here
   607                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   608                              <1>     ; or insert chars if needed.
   609 000025AA 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   610 000025AC 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   611 000025AE 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   612 000025B1 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   613 000025B3 EB9D                <1>     jmp short .mainLoop2
   614                              <1> .bufOflw:
   615                              <1> ;Buffer overflow
   616 000025B5 B007                <1>     mov al, BEL ;Sound the bell
   617 000025B7 E8D0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   618 000025BC EB94                <1>     jmp short .mainLoop2
   619                              <1> .break:
   620                              <1> ;Break, Place a "\", and do a CRLF
   621 000025BE B05C                <1>     mov al, "\"
   622 000025C0 E8C7FAFFFF          <1>     call charOut_B.in
   623 000025C5 5E                  <1>     pop rsi ;Realign stack
   624                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   625 000025C6 E89CFEFFFF          <1>     call printCRLF
   626                              <1>     ;Align to next tabstop
   627 000025CB E85AFBFFFF          <1>     call charOut_B.tab
   628 000025D0 E959FFFFFF          <1>     jmp .breakEP
   629                              <1> .carriageReturn:
   630 000025D5 AA                  <1>     stosb
   631 000025D6 E8B1FAFFFF          <1>     call charOut_B.in
   632 000025DB 5F                  <1>     pop rdi ;User buffer address was pushed 
   633 000025DC 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   634 000025DF FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   635                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   636 000025E1 488D35(CE020000)    <1>     lea rsi, vConBuffer
   637 000025E8 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   638 000025EB F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   639                              <1>     return
    13                              <2> %%_ret:
    14 000025ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> .lineFeed:
   641 000025EE E874FEFFFF          <1>     call printCRLF
   642 000025F3 E95AFFFFFF          <1>     jmp .mainLoop2
   643                              <1> .delete:
   644 000025F8 E805000000          <1>     call .removeChar
   645 000025FD E950FFFFFF          <1>     jmp .mainLoop2
   646                              <1> .removeChar:
   647 00002602 84F6                <1>     test dh, dh ;Is char count 0?
   648 00002604 741C                <1>     jz .normalChar   ;If so, skip going back!
   649 00002606 E868000000          <1>     call .vConErase
   650 0000260B 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   651 0000260D 3C20                <1>     cmp al, SPC
   652 0000260F 7311                <1>     jae .normalChar
   653 00002611 3C09                <1>     cmp al, TAB
   654 00002613 7420                <1>     je .eraTab
   655 00002615 3C15                <1>     cmp al, NAK
   656 00002617 7409                <1>     je .normalChar
   657 00002619 3C14                <1>     cmp al, DC4
   658 0000261B 7405                <1>     je .normalChar
   659 0000261D E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   660                              <1> .normalChar:
   661 00002622 803D(FE060000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   662                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002629 75C2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   663 0000262B 84FF                <1>     test bh, bh ;Beginning of user buffer?
   664                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000262D 74BE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   665 0000262F 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   666 00002632 FECF                <1>     dec bh
   667                              <1>     return
    13                              <2> %%_ret:
    14 00002634 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .eraTab:
   669                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   670                              <1> ; up to a tab stop worth of space chars printed
   671 00002635 57                  <1>     push rdi
   672 00002636 48FFCF              <1>     dec rdi
   673 00002639 FD                  <1>     std ;Go backwards
   674 0000263A 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   675 0000263D B020                <1>     mov al, SPC
   676 0000263F 53                  <1>     push rbx
   677 00002640 BB07000000          <1>     mov ebx, 7
   678 00002645 67E30D              <1>     jecxz .onTabstop
   679                              <1> .scanString:
   680 00002648 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   681 00002649 7608                <1>     jbe .notChar    ;No, skip handling
   682 0000264B 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   683 0000264F 740A                <1>     je .tabChar
   684 00002651 FECB                <1>     dec bl
   685                              <1> .notChar:
   686 00002653 E2F3                <1>     loop .scanString
   687                              <1> .onTabstop:
   688 00002655 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   689                              <1> .tabChar:
   690 0000265B 28F3                <1>     sub bl, dh  ;Same on tabstop
   691 0000265D 00D9                <1>     add cl, bl
   692 0000265F 80E107              <1>     and cl, 7
   693 00002662 5B                  <1>     pop rbx
   694 00002663 5F                  <1>     pop rdi
   695 00002664 FC                  <1>     cld
   696 00002665 74BB                <1>     jz .normalChar
   697                              <1>     ;Now erase all the spaces placed on the vCon
   698                              <1> .vConDelTab:
   699 00002667 E80C000000          <1>     call .vConEraseNoDec
   700 0000266C E2F9                <1>     loop .vConDelTab
   701 0000266E E9AFFFFFFF          <1>     jmp .normalChar
   702                              <1> .vConErase:
   703                              <1> ;Erase the char on the vCon
   704                              <1> ;Return through the output function
   705 00002673 48FFCF              <1>     dec rdi ;Go back a space in the 
   706 00002676 FECE                <1>     dec dh  ;Decrement char count in the buffer
   707                              <1> .vConEraseNoDec:
   708 00002678 B008                <1>     mov al, BSP ;Move cursor back
   709 0000267A E80DFAFFFF          <1>     call charOut_B.in
   710 0000267F B020                <1>     mov al, SPC ;Replace with a space
   711 00002681 E806FAFFFF          <1>     call charOut_B.in
   712 00002686 B008                <1>     mov al, BSP ;Move cursor back again
   713 00002688 E9FFF9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   714                              <1> .escape:
   715                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   716                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   717                              <1> ; including the function keys.
   718 0000268D FF259FD9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   719                              <1> .f2:
   720 00002693 E846000000          <1>     call .fCommon2
   721 00002698 EB0C                <1>     jmp short .fCommon
   722                              <1> .f3:
   723 0000269A 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   724 0000269D 28F9                <1>     sub cl, bh  ;Sub our current position
   725 0000269F EB05                <1>     jmp short .fCommon
   726                              <1> .f1:
   727 000026A1 B901000000          <1>     mov ecx, 1  ;Get one char
   728                              <1> .fCommon:
   729 000026A6 C605(FE060000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   730 000026AD 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   731 000026AF 0F849DFEFFFF        <1>     je .mainLoop2
   732 000026B5 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   733 000026B7 0F8495FEFFFF        <1>     je .mainLoop2
   734                              <1>     ;Else, copy byte by byte, and retain char in al
   735 000026BD AC                  <1>     lodsb
   736 000026BE AA                  <1>     stosb
   737 000026BF E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   738 000026C4 FEC7                <1>     inc bh
   739 000026C6 FEC6                <1>     inc dh
   740 000026C8 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   741 000026CA E983FEFFFF          <1>     jmp .mainLoop2
   742                              <1> .f4:
   743 000026CF E80A000000          <1>     call .fCommon2
   744 000026D4 4801CE              <1>     add rsi, rcx
   745 000026D7 00CF                <1>     add bh, cl
   746 000026D9 E974FEFFFF          <1>     jmp .mainLoop2
   747                              <1> .fCommon2:
   748 000026DE E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   749 000026E3 3A0551D9FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   750 000026E9 750B                <1>     jne .fnotEscape
   751                              <1>     ;Get another char if they typed escape and force it in the buffer
   752                              <1>     ; Do not return to caller
   753 000026EB E80FFBFFFF          <1>     call charIn_B
   754                              <1> .fforceExit:
   755 000026F0 59                  <1>     pop rcx ;Get original return address from stack
   756 000026F1 E95CFEFFFF          <1>     jmp .mainLoop2
   757                              <1> .fnotEscape:
   758 000026F6 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   759 000026F9 28F9                <1>     sub cl, bh
   760 000026FB 74F3                <1>     jz .fforceExit
   761 000026FD FFC9                <1>     dec ecx
   762 000026FF 74EF                <1>     jz .fforceExit
   763 00002701 57                  <1>     push rdi
   764 00002702 4889F7              <1>     mov rdi, rsi
   765 00002705 48FFC7              <1>     inc rdi
   766 00002708 F2AE                <1>     repne scasb ;Search for the char to start printing from
   767 0000270A 5F                  <1>     pop rdi
   768 0000270B 75E3                <1>     jne .fforceExit ;If char not found, return
   769 0000270D F6D1                <1>     not cl
   770 0000270F 00D9                <1>     add cl, bl
   771 00002711 28F9                <1>     sub cl, bh
   772                              <1>     return
    13                              <2> %%_ret:
    14 00002713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> .f5:
   774 00002714 B040                <1>     mov al, "@"
   775 00002716 E871F9FFFF          <1>     call charOut_B.in   ;Print the char
   776 0000271B 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   777 0000271C 57                  <1>     push rdi
   778 0000271D E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   779 00002722 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   780 00002723 88F3                <1>     mov bl, dh
   781 00002725 E99CFEFFFF          <1>     jmp .breakAlt
   782                              <1> .f6:
   783                              <1> ;If the user wants to insert a EOF, they can use F6
   784 0000272A B01A                <1>     mov al, EOF
   785 0000272C E964FEFFFF          <1>     jmp .checkIfCanInsert
   786                              <1> .f7:
   787                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   788 00002731 8A0503D9FFFF        <1>     mov al, byte [extESC]
   789 00002737 E959FEFFFF          <1>     jmp .checkIfCanInsert
   790                              <1> .toggleIns:
   791 0000273C F615(FE060000)      <1>     not byte [vConInsert]   ;Toggle
   792                              <1>     return
    13                              <2> %%_ret:
    14 00002742 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .eDel:
   794 00002743 38DF                <1>     cmp bh, bl
   795 00002745 0F8407FEFFFF        <1>     je .mainLoop2
   796 0000274B FEC7                <1>     inc bh
   797 0000274D 48FFC6              <1>     inc rsi
   798 00002750 E9FDFDFFFF          <1>     jmp .mainLoop2
   799                              <1> 
   800                              <1> editKeys:
   801                              <1> ;Our Default Extended keys handler
   802 00002755 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   803 0000275A B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   804 0000275F 57                  <1>     push rdi    ;Preserve rdi
   805 00002760 488D3DD5D8FFFF      <1>     lea rdi, extKeyTbl
   806 00002767 57                  <1>     push rdi
   807                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   808                              <1>     ; offset of function from extKeyTbl
   809                              <1> .lp:
   810 00002768 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   811 00002769 740D                <1>     je .charFound
   812 0000276B FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   813 0000276D 7414                <1>     jz .notInTable
   814 0000276F 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   815 00002776 EBF0                <1>     jmp short .lp
   816                              <1> .charFound:
   817 00002778 59                  <1>     pop rcx ;Pop back the effective address of the table
   818 00002779 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   819 0000277D 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   820 00002780 5F                  <1>     pop rdi
   821 00002781 FFE1                <1>     jmp rcx
   822                              <1> .notInTable:
   823 00002783 59                  <1>     pop rcx ;Realign stack
   824 00002784 59                  <1>     pop rcx
   825 00002785 E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    33                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 0000278A E879010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 0000278F E811410000          <1>     call getUserRegs
     6 00002794 668B15(8D040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 0000279B 0FB60D(8F040000)    <1>     movzx ecx, byte [years]
     9 000027A2 8A05(92040000)      <1>     mov al, byte [dayOfWeek]
    10 000027A8 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    11 000027AC 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    12                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000027B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> setDate:           ;ah = 2Bh
    14                              <1> ;	CX = year (1980-2099)
    15                              <1> ;   DH = month (1-12)
    16                              <1> ;	DL = day (1-31)
    17 000027B1 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    18                              <1>     return
    13                              <2> %%_ret:
    14 000027B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> getTime:           ;ah = 2Ch
    20 000027B7 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    21 000027BC E8E4400000          <1>     call getUserRegs
    22 000027C1 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    23 000027C8 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    24 000027CF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    25 000027D3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    26                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 000027D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                              <1> setTime:           ;ah = 2Dh
    28                              <1> ;   CH = hour (0-23)
    29                              <1> ;	CL = minutes (0-59)
    30                              <1> ;	DH = seconds (0-59)
    31                              <1> ;	DL = hundredths (0-99)
    32 000027D8 80FD17              <1>     cmp ch, 23
    33 000027DB 7749                <1>     ja .exitBad
    34 000027DD 80F93B              <1>     cmp cl, 59
    35 000027E0 7744                <1>     ja .exitBad
    36 000027E2 80FE3B              <1>     cmp dh, 59
    37 000027E5 773F                <1>     ja .exitBad
    38 000027E7 80FA63              <1>     cmp dl, 99
    39 000027EA 773A                <1>     ja .exitBad
    40                              <1> ;Now we read date (updating internal count if necessary)
    41 000027EC E817010000          <1>     call readDateTimeRecord
    42 000027F1 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    43 000027F8 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    44 000027FF 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    45 00002802 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    46 00002806 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    47 0000280A B906000000          <1>     mov ecx, 6
    48 0000280F 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    49 00002812 E80C3F0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    50 00002817 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    51 0000281E E84B3C0000          <1>     call goDriver
    52 00002823 30C0                <1>     xor al, al
    53                              <1>     return
    13                              <2> %%_ret:
    14 00002825 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> .exitBad:
    55 00002826 B0FF                <1>     mov al, -1
    56                              <1>     return
    13                              <2> %%_ret:
    14 00002828 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> ;------------------------
    58                              <1> ;   Utility functions   :
    59                              <1> ;------------------------
    60                              <1> writeDate:
    61 00002829 6681F97800          <1>     cmp cx, 120
    62 0000282E 0F83D1000000        <1>     jae .exitBad
    63 00002834 80FE0C              <1>     cmp dh, 12
    64 00002837 0F87C8000000        <1>     ja .exitBad
    65 0000283D 80FA1F              <1>     cmp dl, 31
    66 00002840 0F87BF000000        <1>     ja .exitBad
    67 00002846 668915(8D040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    68                              <1>     ;mov byte [monthOfYear], dh
    69 0000284D 880D(8F040000)      <1>     mov byte [years], cl    ;Save the years count
    70 00002853 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    71 00002858 88CD                <1>     mov ch, cl ;Get years count in ch
    72 0000285A C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    73 0000285D 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    74 00002860 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    75 00002863 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    76 00002868 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    77                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    78 0000286A 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    79 0000286D 67E316              <1>     jecxz .addDay    ;Skip adding years
    80 00002870 056E010000          <1>     add eax, 366    ;First add for a leap year
    81                              <1> .addYears:
    82 00002875 FFC9                <1>     dec ecx
    83 00002877 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
    84 0000287A 056D010000          <1>     add eax, 365    ;Add the days in the normal years
    85 0000287F EBF4                <1>     jmp short .addYears
    86                              <1> .addLeap:
    87 00002881 056E010000          <1>     add eax, 366    ;Add the days in the leap year
    88                              <1> .addDay:
    89 00002886 89C2                <1>     mov edx, eax    ;Save this number in edx
    90                              <1>     ;Now to add day offset
    91 00002888 0FB60D(8E040000)    <1>     movzx ecx, byte [monthOfYear]
    92 0000288F 488D35C7D7FFFF      <1>     lea rsi, monthsTbl
    93                              <1> .addDaysInMonth:
    94 00002896 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
    95 00002898 67E308              <1>     jecxz .addMonthOffset
    96 0000289B AC                  <1>     lodsb   ;Get the number of days in the month in al
    97 0000289C 0FB6C0              <1>     movzx eax, al
    98 0000289F 01C2                <1>     add edx, eax
    99 000028A1 EBF3                <1>     jmp short .addDaysInMonth
   100                              <1> .addMonthOffset:
   101 000028A3 0FB60D(8D040000)    <1>     movzx ecx, byte [dayOfMonth]
   102 000028AA FFC9                <1>     dec ecx
   103 000028AC 01CA                <1>     add edx, ecx    ;Add month offset
   104                              <1>     ;edx has the number of days since 01/01/1980
   105 000028AE 668915(90040000)    <1>     mov word [daysOffset], dx   ;Store!
   106                              <1> ;Now read and then write CLOCKrecrd
   107 000028B5 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   108 000028BC B906000000          <1>     mov ecx, 6
   109 000028C1 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   110 000028C4 E8653E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   111 000028C9 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   112 000028D0 E8993B0000          <1>     call goDriver
   113                              <1> ;Now we change daycount and write it back
   114 000028D5 0FB705(90040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   115 000028DC 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   116 000028E3 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   117 000028E6 B906000000          <1>     mov ecx, 6
   118 000028EB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   119 000028EE E8303E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   120 000028F3 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   121 000028FA E86F3B0000          <1>     call goDriver
   122 000028FF E8AE000000          <1>     call setDayofWeek
   123                              <1>     return
    13                              <2> %%_ret:
    14 00002904 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> .exitBad:
   125 00002905 B0FF                <1>     mov al, -1
   126                              <1>     return
    13                              <2> %%_ret:
    14 00002907 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> readDateTimeRecord:
   129                              <1> ;Will read the clock using the primary request header
   130                              <1> ;Preserves all regs except eax and flags
   131 00002908 53                  <1>     push rbx
   132 00002909 51                  <1>     push rcx
   133 0000290A 52                  <1>     push rdx
   134 0000290B 56                  <1>     push rsi
   135 0000290C 55                  <1>     push rbp
   136                              <1> 
   137 0000290D 66C705(C21A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   137 00002915 00                  <1>
   138 00002916 488D1D(15050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   139 0000291D B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   140 00002922 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   141                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   142                              <1> ; rbx = Data storage buffer ptr
   143                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   144                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   145 00002925 E8043E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   146 0000292A 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00002931 E8383B0000          <1>     call goDriver
   148 00002936 0FB705(15050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   149                              <1> ;Here we have:  ax = Days since 1/1/1980
   150                              <1> ;Updates the internal date fields
   151                              <1> ;Internal time fields are in the clock record
   152                              <1> ;So now we check if the number of days since 1980 are the same.
   153                              <1> ;If so, we can skip updating.
   154 0000293D 663B05(90040000)    <1>     cmp ax, word [daysOffset]
   155 00002944 7466                <1>     je .exit    ;Return if equal
   156 00002946 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   157 0000294B 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   158 0000294D 668905(90040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   159                              <1>     ;Now want to update years, month and day fields
   160                              <1>     ;ax has the number of days since 01/01/1980
   161                              <1>     ;Get days in a 4 year period
   162 00002954 BBB5050000          <1>     mov ebx, 365*4 + 1
   163 00002959 31D2                <1>     xor edx, edx
   164 0000295B 89D1                <1>     mov ecx, edx  ;Zero ecx
   165 0000295D F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   166                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   167                              <1>     ;edx has offset into current 4 year bunch
   168 0000295F BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   169 00002964 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   170 00002966 7210                <1>     jb .foundBunch
   171 00002968 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   172 0000296A FFC1                <1>     inc ecx
   173 0000296C FFCB                <1>     dec ebx ;Number of days in a normal year
   174                              <1> .findBunch:
   175 0000296E 39DA                <1>     cmp edx, ebx
   176 00002970 7206                <1>     jb .foundBunch
   177 00002972 29DA                <1>     sub edx, ebx
   178 00002974 FFC1                <1>     inc ecx
   179 00002976 EBF6                <1>     jmp short .findBunch
   180                              <1> .foundBunch:
   181                              <1>     ;If ecx = 0, february has 29 days!
   182                              <1>     ;eax has number of four year bunches elapsed since 1980
   183 00002978 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   184 0000297B 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   185                              <1>     ;ecx now has the number of years since 1980
   186 0000297D E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   187                              <1> ;edx has number of days into the year we are in
   188                              <1> ;eax has number of days in Feb for this year
   189 00002982 488D35D4D6FFFF      <1>     lea rsi, monthsTbl
   190 00002989 31C9                <1>     xor ecx, ecx    ;Use as month counter
   191                              <1> .monthSearch:
   192 0000298B FFC1                <1>     inc ecx ;Start from 1
   193 0000298D AC                  <1>     lodsb   ;Get value in al and inc rsi
   194 0000298E 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   195 00002991 39C2                <1>     cmp edx, eax
   196 00002993 7204                <1>     jb .monthFound
   197 00002995 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   198 00002997 EBF2                <1>     jmp short .monthSearch
   199                              <1> .monthFound:
   200                              <1>     ;cl has the month (01h-0Ch)
   201                              <1>     ;dl has the day of the month - 1
   202 00002999 FFC2                <1>     inc edx
   203 0000299B 880D(8E040000)      <1>     mov byte [monthOfYear], cl
   204 000029A1 8815(8D040000)      <1>     mov byte [dayOfMonth], dl
   205 000029A7 E806000000          <1>     call setDayofWeek
   206                              <1> .exit:
   207 000029AC 5D                  <1>     pop rbp
   208 000029AD 5E                  <1>     pop rsi
   209 000029AE 5A                  <1>     pop rdx
   210 000029AF 59                  <1>     pop rcx
   211 000029B0 5B                  <1>     pop rbx
   212                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000029B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> setDayofWeek:
   215                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   216 000029B2 0FB705(90040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   217 000029B9 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   218                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   219 000029BE 31D2                <1>     xor edx, edx
   220 000029C0 B907000000          <1>     mov ecx, 7   
   221 000029C5 F7F1                <1>     div ecx  ;Get remainder in dl
   222 000029C7 8815(92040000)      <1>     mov byte [dayOfWeek], dl
   223                              <1> ;Set ZF to indicate all ok
   224 000029CD 31C0                <1>     xor eax, eax
   225                              <1>     return
    13                              <2> %%_ret:
    14 000029CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   228                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   229                              <1> ;Input: cl = Year - 1980
   230                              <1> ;Output: al = Number of days in February
   231 000029D0 880D(8F040000)      <1>     mov byte [years], cl    ;Save this figure
   232 000029D6 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   233 000029D9 51                  <1>     push rcx
   234 000029DA 57                  <1>     push rdi
   235 000029DB B81C000000          <1>     mov eax, 28  ;Usual days in february
   236 000029E0 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   237 000029E5 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   238 000029E8 488D3D6FD6FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   239 000029EF AA                  <1>     stosb   ;Store the word in rdi
   240 000029F0 5F                  <1>     pop rdi
   241 000029F1 59                  <1>     pop rcx
   242                              <1>     return
    13                              <2> %%_ret:
    14 000029F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> getDirDTwords:
   245                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   246                              <1> ; High word of eax = Date
   247                              <1> ; Low word of eax = Time
   248                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   249                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   250                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   251                              <1> 
   252                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   253                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   254                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   255                              <1> ;Preserves all registers except eax
   256 000029F3 53                  <1>     push rbx
   257 000029F4 0FB61D(1A050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   258 000029FB D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   259 000029FD 89D8                <1>     mov eax, ebx
   260 000029FF 0FB61D(17050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   261 00002A06 C1E305              <1>     shl ebx, 5
   262 00002A09 09D8                <1>     or eax, ebx
   263 00002A0B 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   264 00002A12 C1E30B              <1>     shl ebx, 11
   265 00002A15 09D8                <1>     or eax, ebx
   266 00002A17 0FB61D(8D040000)    <1>     movzx ebx, byte [dayOfMonth]
   267 00002A1E C1E310              <1>     shl ebx, 16
   268 00002A21 09D8                <1>     or eax, ebx
   269 00002A23 0FB61D(8E040000)    <1>     movzx ebx, byte [monthOfYear]
   270 00002A2A C1E315              <1>     shl ebx, 21
   271 00002A2D 09D8                <1>     or eax, ebx
   272 00002A2F 0FB61D(8F040000)    <1>     movzx ebx, byte [years]
   273 00002A36 C1E319              <1>     shl ebx, 25
   274 00002A39 09D8                <1>     or eax, ebx
   275 00002A3B 5B                  <1>     pop rbx
   276                              <1>     return
    13                              <2> %%_ret:
    14 00002A3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   278                              <1> ;Returns edx = time
   279                              <1> ;        eax = date
   280                              <1> ; Formally ax and dx but we clear the upper words
   281 00002A3D E8C6FEFFFF          <1>     call readDateTimeRecord
   282 00002A42 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   283 00002A47 31D2                <1>     xor edx, edx
   284 00002A49 6689C2              <1>     mov dx, ax  ;Save time
   285 00002A4C C1E810              <1>     shr eax, 10h    ;Get date into rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 00002A4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
     3                              <1> ;On FAT 32 volumes things are a bit more restricted.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported for general FAT 32 files:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    14                              <1> ;   openFCB
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    24                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    25                              <1> 
    26                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    27                              <1> ;Reading and Writing to the Volume label will silently return ok.
    28                              <1> ;Volume labels will be editable by being created/opened/closed.
    29                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    30                              <1> ; root directory always.
    31                              <1> 
    32                              <1> findFirstFileFCB:  ;ah = 11h
    33                              <1> ;Input: rdx -> FCB
    34 00002A50 488915(15070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    35 00002A57 4889D6              <1>     mov rsi, rdx
    36 00002A5A 803EFF              <1>     cmp byte [rsi], -1
    37 00002A5D 7407                <1>     je .notExt1
    38 00002A5F 4881C607000000      <1>     add rsi, exFcb.driveNum
    39                              <1> .notExt1:
    40 00002A66 0FB606              <1>     movzx eax, byte [rsi]
    41 00002A69 50                  <1>     push rax    ;Push on stack the drive number
    42 00002A6A 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    43 00002A71 E8BF020000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    44 00002A76 7306                <1>     jnc .fcbOk
    45 00002A78 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    46 00002A79 E9AF420000          <1>     jmp fcbErrExit
    47                              <1> .fcbOk:
    48 00002A7E 488D3D(1D050000)    <1>     lea rdi, buffer1
    49 00002A85 E856E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    50 00002A8A 7306                <1>     jnc .fileFound
    51 00002A8C 5B                  <1>     pop rbx
    52 00002A8D E99B420000          <1>     jmp fcbErrExit
    53                              <1> .fileFound:
    54                              <1> ;Now we build an FFBlock internally
    55 00002A92 488D3D(2E060000)    <1>     lea rdi, dosffblock
    56 00002A99 57                  <1>     push rdi
    57 00002A9A E86BE6FFFF          <1>     call setupFFBlock
    58 00002A9F 5E                  <1>     pop rsi
    59                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    60 00002AA0 488B3D(15070000)    <1>     mov rdi, qword [workingFCB]
    61 00002AA7 F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
    62 00002AAE 7407                <1>     jz .notExt2
    63 00002AB0 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    64                              <1> .notExt2:
    65 00002AB7 5B                  <1>     pop rbx ;Get back the drive number in bl
    66 00002AB8 85DB                <1>     test ebx, ebx
    67 00002ABA 7509                <1>     jnz .notCurrentDrive
    68 00002ABC 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    69 00002AC3 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    70                              <1> .notCurrentDrive:
    71 00002AC5 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    72 00002AC6 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    73 00002AC9 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    74 00002ACE A5                  <1>     movsd
    75 00002ACF AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    76 00002AD0 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    77 00002AD7 488D35(59060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    78 00002ADE F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
    79 00002AE5 7412                <1>     jz .notExt3
    80 00002AE7 B8FFFFFFFF          <1>     mov eax, -1
    81 00002AEC AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    82 00002AED FFC0                <1>     inc eax ;Make it zero
    83 00002AEF AB                  <1>     stosd
    84 00002AF0 AA                  <1>     stosb   ;Store 5 bytes of zero
    85 00002AF1 0FB605(F7060000)    <1>     movzx eax, byte [searchAttr]
    86 00002AF8 AA                  <1>     stosb   ;Store the search attributes
    87                              <1> .notExt3:
    88 00002AF9 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    89 00002AFB AA                  <1>     stosb
    90 00002AFC B904000000          <1>     mov ecx, fatDirEntry_size/8
    91 00002B01 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    92 00002B04 E921420000          <1>     jmp fcbGoodExit
    93                              <1>     
    94                              <1> findNextFileFCB:   ;ah = 12h
    95 00002B09 488915(15070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    96 00002B10 C605(F6060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    97 00002B17 C605(F7060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    98 00002B1E 4889D6              <1>     mov rsi, rdx
    99                              <1> 
   100 00002B21 803EFF              <1>     cmp byte [rsi], -1
   101 00002B24 7514                <1>     jne .notExt
   102 00002B26 FE0D(F6060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   103 00002B2C 4881C606000000      <1>     add rsi, exFcb.attribute
   104 00002B33 AC                  <1>     lodsb   ;Get search attr in al
   105 00002B34 8805(F7060000)      <1>     mov byte [searchAttr], al
   106                              <1> .notExt:
   107                              <1>     ;rsi points to drive letter
   108 00002B3A 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   109 00002B41 31C0                <1>     xor eax, eax
   110 00002B43 AC                  <1>     lodsb   ;Get the FCB drive letter
   111 00002B44 50                  <1>     push rax    ;Push drive letter on the stack
   112 00002B45 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   113 00002B48 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   114 00002B49 B905000000          <1>     mov ecx, 5
   115 00002B4E F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   116 00002B50 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   117 00002B56 488D3D(2E060000)    <1>     lea rdi, dosffblock
   118 00002B5D 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   119 00002B5E 8F05(17040000)      <1>     pop qword [currentDTA]
   120 00002B64 E81FE2FFFF          <1>     call findNextMain
   121 00002B69 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   122 00002B6F 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   123 00002B75 488B3D(15070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   124 00002B7C F607FF              <1>     test byte [rdi], -1
   125 00002B7F 7407                <1>     jz .notExt2
   126 00002B81 4881C707000000      <1>     add rdi, exFcb.driveNum
   127                              <1> .notExt2:
   128 00002B88 5B                  <1>     pop rbx ;Get the drive letter back into bl
   129 00002B89 881F                <1>     mov byte [rdi], bl
   130 00002B8B E99D410000          <1>     jmp fcbErrExit  ;And exit bad
   131                              <1> 
   132                              <1> deleteFileFCB:     ;ah = 13h
   133 00002B90 488D3D(1D050000)    <1>     lea rdi, buffer1
   134 00002B97 57                  <1>     push rdi
   135 00002B98 E898010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   136 00002B9D 5F                  <1>     pop rdi ;Point rdi to the canonised path
   137 00002B9E 0F8289410000        <1>     jc fcbErrExit
   138 00002BA4 E837E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   139 00002BA9 0F827E410000        <1>     jc fcbErrExit
   140 00002BAF E85B0F0000          <1>     call outerDeleteMain
   141 00002BB4 0F8273410000        <1>     jc fcbErrExit
   142 00002BBA E96B410000          <1>     jmp fcbGoodExit
   143                              <1> 
   144                              <1> renameFileFCB:     ;ah = 17h
   145                              <1> ;Input: rdx -> User FCB
   146 00002BBF 488915(15070000)    <1>     mov qword [workingFCB], rdx
   147                              <1>     ;First we get the drive letter 
   148 00002BC6 4889D6              <1>     mov rsi, rdx
   149 00002BC9 803EFF              <1>     cmp byte [rsi], -1
   150 00002BCC 7507                <1>     jne .notExt
   151 00002BCE 4881C607000000      <1>     add rsi, exFcb.driveNum
   152                              <1> .notExt:
   153 00002BD5 31C0                <1>     xor eax, eax
   154 00002BD7 AC                  <1>     lodsb
   155 00002BD8 50                  <1>     push rax    ;Push the drive letter on the stack for now
   156 00002BD9 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   157 00002BE0 E850010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   158 00002BE5 723D                <1>     jc .badPop
   159 00002BE7 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   160 00002BED 8F05(25060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   161 00002BF3 58                  <1>     pop rax ;Get drive letter back
   162 00002BF4 488D3D(9D050000)    <1>     lea rdi, buffer2
   163 00002BFB E809010000          <1>     call fcbInitName2
   164 00002C00 7223                <1>     jc short .bad
   165 00002C02 488B05(25060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   166 00002C09 488705(1D060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   167 00002C10 488905(25060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   168 00002C17 E8F50A0000          <1>     call renameMain
   169 00002C1C 0F8308410000        <1>     jnc fcbGoodExit
   170 00002C22 EB01                <1>     jmp short .bad
   171                              <1> .badPop:
   172 00002C24 5B                  <1>     pop rbx ;Pop drive number off stack
   173                              <1> .bad:
   174 00002C25 E903410000          <1>     jmp fcbErrExit
   175                              <1> 
   176                              <1> getFileSizeFCB:    ;ah = 23h
   177                              <1> ;This function which can be used to test existance of file without opening it 
   178                              <1> ;Input: rdx -> FCB
   179 00002C2A 488915(15070000)    <1>     mov qword [workingFCB], rdx
   180 00002C31 488D3D(1D050000)    <1>     lea rdi, buffer1
   181 00002C38 57                  <1>     push rdi
   182 00002C39 E8F7000000          <1>     call fcbInitRoutine
   183 00002C3E 5F                  <1>     pop rdi
   184 00002C3F 0F82E8400000        <1>     jc fcbErrExit
   185 00002C45 E896E5FFFF          <1>     call getFilePathNoCanon
   186 00002C4A 0F82DD400000        <1>     jc fcbErrExit
   187 00002C50 8B05(75060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   188                              <1>     ;Now we gotta set up FCB randRecrd Field
   189 00002C56 488B35(15070000)    <1>     mov rsi, qword [workingFCB]
   190 00002C5D 803EFF              <1>     cmp byte [rsi], -1
   191 00002C60 7507                <1>     jne .notExtended
   192 00002C62 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   193                              <1> .notExtended:
   194                              <1> ;rsi points to the drive number now
   195 00002C69 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   196 00002C6D F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   197 00002C6F 85D2                <1>     test edx, edx
   198 00002C71 7402                <1>     jz .noRemainder
   199 00002C73 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   200                              <1> .noRemainder:
   201 00002C75 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   202 00002C78 E9AD400000          <1>     jmp fcbGoodExit
   203                              <1> 
   204                              <1> setDTA:            ;ah = 1Ah, Always can be used
   205                              <1> ;Called with:
   206                              <1> ;   rdx = Pointer to the new default DTA
   207 00002C7D 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   208 00002C84 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   209 00002C88 488915(17040000)    <1>     mov qword [currentDTA], rdx
   210 00002C8F C3                  <1>     ret
   211                              <1> 
   212                              <1> getDTA:            ;ah = 2Fh, Always can be used
   213 00002C90 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   214 00002C97 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   215 00002C9E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   216                              <1>     return
    13                              <2> %%_ret:
    14 00002CA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1>     
   218                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   219                              <1> ;Input:
   220                              <1> ;rsi points to a command line to parse
   221                              <1> ;rdi points to a future unopened FCB
   222                              <1> ;al = parsing control bits. 
   223                              <1> ; al[0] = If set, leading filename separators are scanned off
   224                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   225                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   226                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   227                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   228                              <1> ;        al = 1 => Wildcards found
   229                              <1> ;        al = -1 => Drive specifier invalid
   230                              <1> ;rsi -> to the first char past the parsed filename
   231                              <1> ;rdi -> First byte of the FCB 
   232                              <1> 
   233 00002CA3 E82D010000          <1>     call parseNameToFCB
   234 00002CA8 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   235 00002CA9 E8F73B0000          <1>     call getUserRegs
   236 00002CAE 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   237                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00002CB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> createFileFCB:     ;ah = 16h
   240                              <1> ;rdx -> Extended FCB
   241                              <1> ;       MUST BE EXTENDED. 
   242                              <1> ;       MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   243 00002CB2 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   244 00002CB5 7506                <1>     jne .exit
   245 00002CB7 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   246 00002CBB 7500                <1>     jne .exit
   247                              <1>     ;Here we search for a volume ID in the root directory.
   248                              <1>     ; If one exists, we replace the dir entry name field,
   249                              <1>     ; sync the BPB field and invalidate the DPB (to rebuid the BPB).
   250                              <1>     ; Else, we build a dir entry for it, sync the BPB and invalidate the DPB.
   251                              <1>     ;If ANY bits other than ValidCDS are set in the CDS, fail the operation.
   252                              <1> .exit:
   253 00002CBD B805000000          <1>     mov eax, errAccDen
   254 00002CC2 E966400000          <1>     jmp fcbErrExit
   255                              <1> 
   256                              <1> ;=================================================================
   257                              <1> ;=================================================================
   258                              <1> ;These functions will be marked as reserved for future expansion.
   259                              <1> ; One idea will be to create a handle based record IO interface.
   260                              <1> ; We will be able to do IO on records of predefined length 
   261                              <1> ; on a file handle, thus removing the need for an FCB but still
   262                              <1> ; maintaining the usefulness of record based IO.
   263                              <1> ;=================================================================
   264                              <1> ;=================================================================
   265                              <1> openFileFCB:       ;ah = 0Fh
   266                              <1> closeFileFCB:      ;ah = 10h
   267                              <1> sequentialReadFCB: ;ah = 14h
   268                              <1> sequentialWriteFCB:;ah = 15h
   269                              <1> randomReadFCB:     ;ah = 21h
   270                              <1> randomWriteFCB:    ;ah = 22h
   271                              <1> setRelRecordFCB:   ;ah = 24h
   272                              <1> randBlockReadFCB:  ;ah = 27h
   273                              <1> randBlockWriteFCB: ;ah = 28h
   274 00002CC7 B805000000          <1>     mov eax, errAccDen
   275 00002CCC E95C400000          <1>     jmp fcbErrExit
   276                              <1> 
   277                              <1> 
   278                              <1> ;--------------------------------
   279                              <1> ;  Common FCB related Routines  :
   280                              <1> ;--------------------------------
   281                              <1> fcbCheckDriveType:
   282                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   283                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   284                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   285                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   286                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   287                              <1> ;If a net CDS, automatic fail (for now).
   288 00002CD1 C605(F4060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   289 00002CD8 51                  <1>     push rcx
   290 00002CD9 57                  <1>     push rdi
   291 00002CDA 55                  <1>     push rbp
   292 00002CDB 9C                  <1>     pushfq
   293 00002CDC F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   294 00002CE3 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   295 00002CE5 E82E3B0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   296 00002CEA 7218                <1>     jc .exit
   297                              <1>     ;rdi has cds ptr now
   298 00002CEC 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   299 00002CF0 E8C0DCFFFF          <1>     call getFATtype
   300 00002CF5 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   301 00002CFB 7707                <1>     ja .exit
   302                              <1> .okToGo:
   303 00002CFD C605(F4060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   304                              <1> .exit:
   305 00002D04 9D                  <1>     popfq
   306 00002D05 5D                  <1>     pop rbp
   307 00002D06 5F                  <1>     pop rdi
   308 00002D07 59                  <1>     pop rcx
   309                              <1>     return
    13                              <2> %%_ret:
    14 00002D08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> fcbInitName2:
   311                              <1> ;Must be called after fcbInitRoutine has been run once
   312                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   313                              <1> ;       rdx -> UserFCB
   314                              <1> ;       eax[0] = Drive number (0 based)
   315 00002D09 55                  <1>     push rbp
   316 00002D0A 4889E5              <1>     mov rbp, rsp
   317 00002D0D 4881EC0F000000      <1>     sub rsp, 15
   318 00002D14 57                  <1>     push rdi
   319 00002D15 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   320 00002D19 4889D6              <1>     mov rsi, rdx
   321 00002D1C F605(F6060000)FF    <1>     test byte [extFCBFlag], -1
   322 00002D23 7407                <1>     jz .notExtended
   323 00002D25 4881C607000000      <1>     add rsi, exFcb.driveNum
   324                              <1> .notExtended:
   325                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   326 00002D2C 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   327 00002D33 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   328                              <1> fcbInitRoutine:
   329                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   330                              <1> ;Input: rdx -> User FCB
   331                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   332 00002D35 55                  <1>     push rbp
   333 00002D36 4889E5              <1>     mov rbp, rsp
   334 00002D39 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   335                              <1>     ;This space is used to store X:FILENAME.EXT,0
   336 00002D40 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   337 00002D41 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   338 00002D45 C605(F6060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   339 00002D4C C605(F7060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   340 00002D53 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   341 00002D58 7410                <1>     jz .notExtended
   342 00002D5A C605(F6060000)FF    <1>     mov byte [extFCBFlag], -1
   343 00002D61 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   344 00002D64 8805(F7060000)      <1>     mov byte [searchAttr], al
   345                              <1> .notExtended:
   346 00002D6A AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   347                              <1> .rename2EP:
   348 00002D6B E8C23B0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   349 00002D70 723F                <1>     jc .badDisk
   350 00002D72 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   351 00002D77 488D1D86D6FFFF      <1>     lea rbx, asciiCharProperties
   352 00002D7E B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   353 00002D83 56                  <1>     push rsi    ;rsi -> fcb.filename
   354                              <1> .nameCharCheck:
   355 00002D84 AC                  <1>     lodsb   ;Get the char in al
   356 00002D85 D7                  <1>     xlatb   ;Get the char signature in al
   357 00002D86 A808                <1>     test al, 8
   358 00002D88 7427                <1>     jz .badDisk
   359 00002D8A FFC9                <1>     dec ecx
   360 00002D8C 75F6                <1>     jnz .nameCharCheck
   361 00002D8E 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   362 00002D8F 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   363 00002D92 E833E3FFFF          <1>     call FCBToAsciiz
   364 00002D97 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   365 00002D98 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   366 00002D9B 7414                <1>     je .badDisk
   367 00002D9D 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   368 00002DA1 55                  <1>     push rbp
   369 00002DA2 E8F9E3FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   370 00002DA7 5D                  <1>     pop rbp
   371 00002DA8 7207                <1>     jc .badDisk
   372 00002DAA E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   373 00002DAF EB03                <1>     jmp short .jiggleStack  ;Skip the error
   374                              <1> .badDisk:
   375 00002DB1 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   376 00002DB3 F9                  <1>     stc
   377                              <1> .jiggleStack:
   378 00002DB4 4889EC              <1>     mov rsp, rbp
   379 00002DB7 5D                  <1>     pop rbp
   380                              <1> .exit:
   381                              <1>     return
    13                              <2> %%_ret:
    14 00002DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> storeZeroBasedDriveNumber:
   384                              <1> ;Input: al => 0 based drive letter
   385                              <1> ;       rdi -> Points to buffer to store the X: in
   386 00002DB9 FEC0                <1>     inc al
   387                              <1> storeOneBasedDriveNumber:
   388                              <1> ;Input: al => 1 based drive letter
   389                              <1> ;       rdi -> Points to buffer to store the X: in
   390 00002DBB 0440                <1>     add al, "@"
   391 00002DBD B43A                <1>     mov ah, ":"
   392 00002DBF 66AB                <1>     stosw
   393                              <1>     return
    13                              <2> %%_ret:
    14 00002DC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> isFCBExtended:
   396                              <1> ;Input: rdx = FCB ptr
   397                              <1> ;Output: rsi -> Drive letter of FCB
   398                              <1> ;        rdx -> FCB first byte
   399                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   400 00002DC2 4889D6              <1>     mov rsi, rdx
   401 00002DC5 803EFF              <1>     cmp byte [rsi], -1
   402 00002DC8 7507                <1>     jne .notExtended
   403 00002DCA 4881C607000000      <1>     add rsi, exFcb.driveNum
   404                              <1> .notExtended:
   405 00002DD1 4839F2              <1>     cmp rdx, rsi
   406                              <1>     return
    13                              <2> %%_ret:
    14 00002DD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> parseNameToFCB:
   409                              <1> ;rsi points to a command line to parse
   410                              <1> ;rdi points to a future unopened FCB
   411                              <1> ;al = parsing control bits. 
   412                              <1> ; al[0] = If set, leading filename separators are scanned off
   413                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   414                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   415                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   416                              <1> ;
   417                              <1> ;Separators include : . ; , = + TAB SPACE
   418                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   419                              <1> 
   420 00002DD5 C605(8C040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   421 00002DDC 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   422 00002DDE A802                <1>     test al, 2  ;Set drive letter>
   423 00002DE0 7402                <1>     jz .skipDriveLetter
   424 00002DE2 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   425                              <1> .skipDriveLetter:
   426 00002DE4 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   427 00002DE7 B908000000          <1>     mov ecx, 8  ;Copy Filename
   428 00002DEC A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   429 00002DEE 93                  <1>     xchg eax, ebx
   430 00002DEF B020                <1>     mov al, " " ;Clear the field
   431 00002DF1 7405                <1>     jz .clearFilenameField
   432 00002DF3 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   433 00002DF6 31C9                <1>     xor ecx, ecx
   434                              <1> .clearFilenameField:
   435 00002DF8 F3AA                <1>     rep stosb
   436 00002DFA B903000000          <1>     mov ecx, 3
   437 00002DFF F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   438 00002E02 7405                <1>     jz .clearExtensionField
   439 00002E04 4801CF              <1>     add rdi, rcx
   440 00002E07 31C9                <1>     xor ecx, ecx
   441                              <1> .clearExtensionField:
   442 00002E09 F3AA                <1>     rep stosb
   443 00002E0B 91                  <1>     xchg eax, ecx
   444 00002E0C AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   445 00002E0D 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   446 00002E14 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   447 00002E17 740F                <1>     jz .dontScanOff
   448 00002E19 E8013D0000          <1>     call skipSpacesAndTabs
   449 00002E1E E8083D0000          <1>     call isCharDelimType
   450 00002E23 7508                <1>     jnz .skipIfDelim
   451 00002E25 48FFC6              <1>     inc rsi
   452                              <1> .dontScanOff:
   453 00002E28 E8F23C0000          <1>     call skipSpacesAndTabs  ;Skip a char
   454                              <1> .skipIfDelim:
   455 00002E2D E8983B0000          <1>     call uppercaseCharAtPtr 
   456 00002E32 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   457 00002E34 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   458 00002E37 7519                <1>     jne .skipSettingDriveLetter
   459 00002E39 48FFC6              <1>     inc rsi ;Goto next char
   460 00002E3C 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   461 00002E3E 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   462 00002E40 50                  <1>     push rax    ;Save the 1 based drive letter
   463 00002E41 E8833A0000          <1>     call setDrive   ;Verifies if this drive letter is valid
   464 00002E46 58                  <1>     pop rax
   465 00002E47 7302                <1>     jnc .validDriveLetter
   466                              <1> .invalidDriveLetter:
   467 00002E49 B2FF                <1>     mov dl, -1
   468                              <1> .validDriveLetter:
   469 00002E4B AA                  <1>     stosb
   470 00002E4C 48FFC6              <1>     inc rsi ;Align pointers...
   471 00002E4F 48FFCF              <1>     dec rdi 
   472                              <1> .skipSettingDriveLetter:
   473 00002E52 48FFCE              <1>     dec rsi
   474 00002E55 48FFC7              <1>     inc rdi
   475                              <1>     
   476                              <1> getFCBFilename:
   477                              <1> ;Input: rsi points to first char of filename
   478                              <1> ;       rdi points to storage buffer for filename
   479                              <1> ;       dl contains the signature if drive invalid
   480                              <1> ;Output:
   481                              <1> ;       Fields filled
   482                              <1> ;       al = Return signature
   483 00002E58 B908000000          <1>     mov ecx, 8
   484 00002E5D E815000000          <1>     call getFCBNameField
   485 00002E62 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   486 00002E65 750D                <1>     jne .noExt
   487 00002E67 B903000000          <1>     mov ecx, 3
   488 00002E6C 48FFC6              <1>     inc rsi ;Skip this char
   489 00002E6F E814000000          <1>     call forceFCBNameField
   490                              <1> .noExt:
   491 00002E74 88D0                <1>     mov al, dl  ;Store the return signature
   492                              <1>     return
    13                              <2> %%_ret:
    14 00002E76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> getFCBNameField:
   495                              <1> ;Checks if the field is appropriate before copying it
   496 00002E77 E84E3B0000          <1>     call uppercaseCharAtPtr
   497 00002E7C 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   498 00002E7E 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   499 00002E81 48FFCE              <1>     dec rsi ;Point to previous char
   500                              <1>     return
    13                              <2> %%_ret:
    14 00002E84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> .okName:
   502 00002E85 48FFCE              <1>     dec rsi ;Go back now a char
   503                              <1> forceFCBNameField:
   504                              <1> ;Forcefully copies the name from rsi to rdi
   505 00002E88 E83D3B0000          <1>     call uppercaseCharAtPtr
   506 00002E8D 7226                <1>     jc .terminatingSpace
   507 00002E8F 750D                <1>     jnz .notSep
   508 00002E91 F605(8C040000)FF    <1>     test byte [fcbSpaceOk], -1
   509 00002E98 741B                <1>     jz .terminatingSpace
   510 00002E9A 3C20                <1>     cmp al, " "
   511 00002E9C 7517                <1>     jne .terminatingSpace
   512                              <1> .notSep:
   513 00002E9E 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   514 00002EA1 FFC9                <1>     dec ecx
   515 00002EA3 3C2A                <1>     cmp al, "*" ;Big wildcard?
   516 00002EA5 7504                <1>     jne .notBigWildcard
   517 00002EA7 B03F                <1>     mov al, "?"
   518 00002EA9 F3AA                <1>     rep stosb
   519                              <1> .notBigWildcard:
   520 00002EAB AA                  <1>     stosb   ;Stores the uppercased char
   521 00002EAC 3C3F                <1>     cmp al, "?"
   522 00002EAE 75D8                <1>     jne forceFCBNameField
   523 00002EB0 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   524 00002EB3 EBD3                <1>     jmp short forceFCBNameField
   525                              <1> .terminatingSpace:
   526 00002EB5 B020                <1>     mov al, " "
   527 00002EB7 AA                  <1>     stosb
   528 00002EB8 48FFCE              <1>     dec rsi ;Point to this trailing space
   529                              <1>     return
    13                              <2> %%_ret:
    14 00002EBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00002EBC 51                  <1>     push rcx    ;Save file attributes on stack
    11 00002EBD 488D0D0C0E0000      <1>     lea rcx, createMain
    12 00002EC4 C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    13 00002ECB EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00002ECD BB16000000          <1>     mov ebx, dirInclusive
    21 00002ED2 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
    22 00002ED9 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00002EDC 880D(F7060000)      <1>     mov byte [searchAttr], cl
    24 00002EE2 488D0DEB0C0000      <1>     lea rcx, openMain  
    25 00002EE9 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00002EEA 4889D6              <1>     mov rsi, rdx
    28 00002EED E8753B0000          <1>     call checkPathspecOK
    29 00002EF2 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00002EF4 58                  <1>     pop rax
    32 00002EF5 B803000000          <1>     mov eax, errPnf
    33 00002EFA E94E3E0000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00002EFF E8FE3D0000          <1>     call dosCrit1Enter
    36 00002F04 E833190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00002F09 E8FE3D0000          <1>     call dosCrit1Exit
    38 00002F0E 0F82AF000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00002F14 E85B180000          <1>     call setCurrentSFT
    41 00002F19 66891D(35070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00002F20 E8E0190000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00002F25 0F8298000000        <1>     jc .exitBad
    44 00002F2B 66891D(37070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00002F32 48893D(25070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00002F39 0FB71D(35070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00002F40 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00002F42 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00002F45 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00002F4C 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00002F4D E899E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00002F52 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00002F53 488D057A0C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 00002F5A 488B35(2D070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00002F61 7319                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00002F63 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00002F66 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    64 00002F68 F605(00070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00002F6F 750B                <1>     jnz .proceedCall    ;If so, proceed.
    66                              <1> .badPathspec:
    67 00002F71 58                  <1>     pop rax
    68 00002F72 B802000000          <1>     mov eax, errFnf
    69 00002F77 E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    70                              <1> .proceedCall:
    71                              <1> ;If the pathspec exists, recall that for create, we truncate.
    72 00002F7C 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    73 00002F7E 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    74 00002F81 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    75 00002F82 750B                <1>     jne .callProc   ;Jump if we are creating
    76                              <1>     ;al means openmode here
    77 00002F84 A880                <1>     test al, 80h    ;No Inherit bit set?
    78 00002F86 7407                <1>     jz .callProc
    79 00002F88 247F                <1>     and al, 7Fh     ;Clear this bit
    80 00002F8A B900100000          <1>     mov ecx, devNoInherit
    81                              <1> .callProc:
    82 00002F8F 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    83 00002F95 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    84 00002F9B 51                  <1>     push rcx    ;Save the device word 
    85 00002F9C FFD3                <1>     call rbx    ;Enter with open mode in 
    86 00002F9E 59                  <1>     pop rcx
    87 00002F9F 488B35(2D070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    88 00002FA6 722B                <1>     jc .exitBad2
    89 00002FA8 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    90 00002FAD 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
    91 00002FB1 0FB705(37070000)    <1>     movzx eax, word [currentHdl]
    92 00002FB8 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
    93 00002FBE E97C3D0000          <1>     jmp extGoodExit ;Save ax and return OK
    94                              <1> .exitBad:
    95 00002FC3 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
    96 00002FC4 5B                  <1>     pop rbx ;Pop the word from the stack
    97 00002FC5 66C705(35070000)FF- <1>     mov word [currentNdx], -1
    97 00002FCD FF                  <1>
    98 00002FCE E97A3D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
    99                              <1> .exitBad2:
   100                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   101 00002FD3 488B35(25070000)    <1>     mov rsi, qword [curHdlPtr]
   102 00002FDA C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   103 00002FDD 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
   104 00002FE4 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   105 00002FE9 66C705(35070000)FF- <1>     mov word [currentNdx], -1
   105 00002FF1 FF                  <1>
   106 00002FF2 E9563D0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   107                              <1> 
   108                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   109                              <1> ;Input: bx = file handle to close
   110 00002FF7 E81F190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   111 00002FFC 0F824B3D0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   112 00003002 E86D170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   113                              <1>     ;Check count to see if we need to check share mode
   114 00003007 31C0                <1>     xor eax, eax    ;Preset ax to 0
   115 00003009 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   116 0000300E 7406                <1>     je .skipShareCheck
   117                              <1>     ;Now check sharing mode
   118 00003010 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   119 00003014 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   120                              <1> .skipShareCheck:
   121 00003016 50                  <1>     push rax    ;Save the share mode on stack
   122 00003017 E87F0F0000          <1>     call closeMain  ;Call close main!
   123 0000301C 58                  <1>     pop rax 
   124 0000301D 0F822A3D0000        <1>     jc extErrExit   ;If an error, exit through error exit
   125 00003023 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   126 00003025 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   127 00003027 E8A4180000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   128 0000302C C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   129                              <1> .exitOk:
   130 0000302F 31C0                <1>     xor eax, eax    ;Return value
   131 00003031 E9093D0000          <1>     jmp extGoodExit
   132                              <1> 
   133                              <1> readFileHdl:       ;ah = 3Fh, handle function
   134 00003036 488D35DB0F0000      <1>     lea rsi, readBytes
   135                              <1> .common:
   136 0000303D E8D9180000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   137 00003042 0F82053D0000        <1>     jc extErrExit   ;Error code in al and exit
   138 00003048 E827170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   139 0000304D 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   140 0000304F FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   141 00003055 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   142 0000305C FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   143 0000305E 8F05(17040000)      <1>     pop qword [currentDTA]
   144 00003064 0F82E33C0000        <1>     jc extErrExit   ;Error code in al and exit
   145 0000306A 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   146 0000306C E9C53C0000          <1>     jmp extGoodExit2    ;and exit!
   147                              <1> 
   148                              <1> writeFileHdl:      ;ah = 40h, handle function
   149 00003071 488D35DF120000      <1>     lea rsi, writeBytes
   150 00003078 E9C0FFFFFF          <1>     jmp readFileHdl.common
   151                              <1> 
   152                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   153                              <1> ;Here don't allow malformed chars unless it is a network CDS
   154 0000307D BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   155 00003082 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   156 00003089 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   157 0000308C 880D(F7060000)      <1>     mov byte [searchAttr], cl
   158 00003092 4889D6              <1>     mov rsi, rdx
   159 00003095 E8CD390000          <1>     call checkPathspecOK
   160 0000309A 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   161 0000309C 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   162                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   163 0000309E F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   164 000030A5 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   165                              <1> .badPath:
   166 000030A7 B803000000          <1>     mov eax, errPnf
   167 000030AC E99C3C0000          <1>     jmp extErrExit
   168                              <1> .pathOk:
   169 000030B1 488D3D(1D050000)    <1>     lea rdi, buffer1
   170 000030B8 52                  <1>     push rdx
   171 000030B9 E82DE1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   172 000030BE 5A                  <1>     pop rdx
   173 000030BF 0F82883C0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   174                              <1>     ;In the case of a wildcard, recall this will return the first file
   175 000030C5 803D(FF060000)FF    <1>     cmp byte [fileExist], -1
   176 000030CC 0F857B3C0000        <1>     jnz extErrExit
   177 000030D2 E8380A0000          <1>     call outerDeleteMain
   178 000030D7 0F82703C0000        <1>     jc extErrExit
   179 000030DD E95D3C0000          <1>     jmp extGoodExit
   180                              <1> 
   181                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   182                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   183 000030E2 E834180000          <1>     call getSFTPtr
   184 000030E7 0F82603C0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   185 000030ED 3C03                <1>     cmp al, 3
   186 000030EF 720A                <1>     jb .validFunction
   187 000030F1 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   188 000030F6 E9523C0000          <1>     jmp extErrExit
   189                              <1> .validFunction:
   190 000030FB 3C01                <1>     cmp al, 1
   191 000030FD 7718                <1>     ja .seekend
   192 000030FF 7203                <1>     jb .seekset
   193                              <1> ;Here we are at seekcur, seek from current (signed)
   194 00003101 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   195                              <1> .seekset:
   196                              <1> ;Seek from the start (unsigned)
   197 00003104 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   198 00003107 E899370000          <1>     call getUserRegs    ;Get user regs in rsi
   199 0000310C 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   200                              <1> .seekExit:
   201 0000310F 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   202 00003112 E91F3C0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   203                              <1> .seekend:
   204                              <1> ;Here we are at seekend, seek from end (signed)
   205 00003117 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   206 0000311D 7505                <1>     jnz .netCheck
   207                              <1> .proceedDisk:
   208 0000311F 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   209 00003122 EBE0                <1>     jmp short .seekset
   210                              <1> .netCheck:
   211 00003124 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   212 0000312A 75F3                <1>     jnz .proceedDisk
   213 0000312C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   214                              <1>     ;Check it's share mode
   215 00003130 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   216 00003135 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   217 0000313A 7407                <1>     je .netSeek
   218 0000313C 3D30000000          <1>     cmp eax, denyReadShare
   219 00003141 75DC                <1>     jne .proceedDisk
   220                              <1> .netSeek:
   221 00003143 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   222 00003148 CD4F                <1>     int 4Fh
   223 0000314A 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   224 0000314C E9FC3B0000          <1>     jmp extErrExit
   225                              <1> 
   226                              <1> 
   227                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   228 00003151 3C01                <1>     cmp al, 1
   229 00003153 761F                <1>     jbe .subFuncOk
   230 00003155 B801000000          <1>     mov eax, errInvFnc
   231                              <1> .chmodError:
   232                              <1> ;Call with ax = errorcode
   233 0000315A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   234 00003161 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   235 00003168 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   236 0000316F E9D93B0000          <1>     jmp extErrExit
   237                              <1> .subFuncOk:
   238 00003174 4889D6              <1>     mov rsi, rdx
   239 00003177 89C3                <1>     mov ebx, eax    ;Store function code in bl
   240 00003179 53                  <1>     push rbx
   241 0000317A 51                  <1>     push rcx
   242 0000317B E8E7380000          <1>     call checkPathspecOK
   243 00003180 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   244                              <1> .badPath:
   245 00003182 59                  <1>     pop rcx
   246 00003183 5B                  <1>     pop rbx
   247 00003184 B803000000          <1>     mov eax, errPnf
   248 00003189 EBCF                <1>     jmp short .chmodError
   249                              <1> .pathOk:
   250 0000318B E8BD390000          <1>     call checkPathNet 
   251 00003190 74F0                <1>     jz .badPath ;Or Net paths
   252 00003192 E862390000          <1>     call scanPathWC
   253 00003197 72E9                <1>     jc .badPath ;Dont allow wildcards
   254 00003199 488D3D(1D050000)    <1>     lea rdi, buffer1
   255 000031A0 52                  <1>     push rdx
   256 000031A1 C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   257 000031A8 E83EE0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   258 000031AD 5A                  <1>     pop rdx
   259 000031AE 59                  <1>     pop rcx
   260 000031AF 5B                  <1>     pop rbx
   261 000031B0 0F82973B0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   262                              <1>     ;In the case of a wildcard, recall this will return the first file
   263 000031B6 803D(FF060000)FF    <1>     cmp byte [fileExist], -1
   264 000031BD 759B                <1>     jnz .chmodError
   265                              <1> 
   266 000031BF E854360000          <1>     call testCDSNet
   267 000031C4 730C                <1>     jnc .notNet
   268 000031C6 750A                <1>     jnz .notNet ;This type of net ok
   269 000031C8 B805000000          <1>     mov eax, errAccDen
   270 000031CD E97B3B0000          <1>     jmp extErrExit
   271                              <1> .notNet:
   272 000031D2 84DB                <1>     test bl, bl
   273 000031D4 7526                <1>     jnz .setAttribs
   274                              <1>     ;Get attribs here
   275 000031D6 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   276 000031DC 7412                <1>     jz .getDiskAttribs
   277 000031DE B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   278 000031E3 CD4F                <1>     int 4Fh
   279 000031E5 0F82623B0000        <1>     jc extErrExit
   280 000031EB E94F3B0000          <1>     jmp extGoodExit
   281                              <1> .getDiskAttribs:
   282 000031F0 0FB605(64060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   283 000031F7 E9433B0000          <1>     jmp extGoodExit
   284                              <1> 
   285                              <1> .setAttribs:
   286                              <1>     ;Set attribs here
   287 000031FC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   288 00003202 7417                <1>     jz .setDiskAttribs
   289 00003204 0FB7C9              <1>     movzx ecx, cx
   290 00003207 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   291 00003208 B80E110000          <1>     mov eax, 110Eh
   292 0000320D CD4F                <1>     int 4Fh
   293 0000320F 59                  <1>     pop rcx
   294 00003210 0F82373B0000        <1>     jc extErrExit
   295 00003216 E9243B0000          <1>     jmp extGoodExit
   296                              <1> .setDiskAttribs:
   297 0000321B E87B080000          <1>     call checkNoOpenHandlesForShareAction
   298 00003220 730A                <1>     jnc .okToSet
   299 00003222 B820000000          <1>     mov eax, errShrVio
   300 00003227 E9213B0000          <1>     jmp extErrExit
   301                              <1> .okToSet:
   302 0000322C E8C7EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   303 00003231 0F82163B0000        <1>     jc extErrExit
   304 00003237 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   305 0000323A 740A                <1>     jz .set
   306 0000323C B805000000          <1>     mov eax, errAccDen
   307 00003241 E9073B0000          <1>     jmp extErrExit
   308                              <1> .set:
   309 00003246 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   310 00003249 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   311 0000324C 08E9                <1>     or cl, ch
   312 0000324E 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   313 00003251 E8F2D4FFFF          <1>     call writeThroughBuffers
   314 00003256 7207                <1>     jc .setError
   315 00003258 31C0                <1>     xor eax, eax
   316 0000325A E9E03A0000          <1>     jmp extGoodExit
   317                              <1> .setError:
   318 0000325F E8ADD4FFFF          <1>     call cancelWriteThroughBuffers
   319 00003264 E9E43A0000          <1>     jmp extErrExit
   320                              <1> 
   321                              <1> duplicateHandle:   ;ah = 45h, handle function
   322                              <1> ;Input: bx = Handle to duplicate
   323                              <1> ;Output: If ok then ax = New handle
   324 00003269 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   325 0000326C E894160000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   326                              <1> .duplicateCommon:
   327 00003271 0F82D63A0000        <1>     jc extErrExit   ;Exit if no space
   328 00003277 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   329 0000327A 93                  <1>     xchg eax, ebx
   330 0000327B E89B160000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   331 00003280 0F82C73A0000        <1>     jc extErrExit
   332 00003286 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   333 00003289 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   334 0000328F 7505                <1>     jnz .netFile
   335 00003291 E8D0090000          <1>     call openDriverMux
   336                              <1> .netFile:
   337 00003296 E835160000          <1>     call getJFTPtr
   338 0000329B 8A1F                <1>     mov bl, byte [rdi]
   339 0000329D 881E                <1>     mov byte [rsi], bl
   340 0000329F E99B3A0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   341                              <1> 
   342                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   343                              <1> ;Input: bx = Handle to duplicate
   344                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   345                              <1>     ;First we close cx if it exists
   346 000032A4 0FB7C9              <1>     movzx ecx, cx
   347 000032A7 53                  <1>     push rbx
   348 000032A8 51                  <1>     push rcx
   349 000032A9 89CB                <1>     mov ebx, ecx
   350 000032AB E847FDFFFF          <1>     call closeFileHdl   ;Close handle 
   351 000032B0 5B                  <1>     pop rbx
   352 000032B1 58                  <1>     pop rax
   353 000032B2 E819160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   354 000032B7 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   355                              <1> 
   356                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   357                              <1> ;Input: cx = Search Attributes, cl only used
   358                              <1> ;       rdx = Ptr to path to file to look for
   359                              <1> ;       al = Document as needing to be 0 for now
   360                              <1> ;Return:
   361                              <1> ;Data in the DTA or error through AX with CF=CY
   362                              <1> ;CAVEATS!
   363                              <1> ;DTA:attribFnd = 40h => Char dev
   364                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   365 000032B9 880D(F7060000)      <1>     mov byte [searchAttr], cl
   366 000032BF 4889D6              <1>     mov rsi, rdx
   367 000032C2 E8A0370000          <1>     call checkPathspecOK
   368 000032C7 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   369 000032C9 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   370                              <1> .badPath:
   371 000032CB B803000000          <1>     mov eax, errPnf
   372 000032D0 E9783A0000          <1>     jmp extErrExit
   373                              <1> .pathspecOk:
   374 000032D5 FF35(17040000)      <1>     push qword [currentDTA]
   375 000032DB 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   376 000032E2 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   377 000032E9 488D3D(1D050000)    <1>     lea rdi, buffer1    ;Build the full path here
   378 000032F0 E8F6DEFFFF          <1>     call getFilePath
   379                              <1> .findfileExit:
   380 000032F5 8F05(17040000)      <1>     pop qword [currentDTA]
   381 000032FB 0F824C3A0000        <1>     jc extErrExit
   382 00003301 488D3D(2E060000)    <1>     lea rdi, dosffblock
   383 00003308 57                  <1>     push rdi
   384 00003309 E8FCDDFFFF          <1>     call setupFFBlock
   385 0000330E 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   386 0000330F 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   387 00003316 B92B000000          <1>     mov ecx, ffBlock_size
   388 0000331B F3A4                <1>     rep movsb   ;Copy the whole block. 
   389                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   390 0000331D 31C0                <1>     xor eax, eax    ;Return value
   391 0000331F E91B3A0000          <1>     jmp extGoodExit ;Exit well
   392                              <1> 
   393                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   394                              <1> ;Input: DTA has the find first block from the previous search
   395 00003324 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   396 0000332B 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   397 00003332 B92B000000          <1>     mov ecx, ffBlock_size
   398 00003337 F3A4                <1>     rep movsb
   399 00003339 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   400 0000333F 488D3D(2E060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   401 00003346 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   402 0000334D E836DAFFFF          <1>     call findNextMain
   403 00003352 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   404                              <1> 
   405                              <1> renameFile:        ;ah = 56h
   406                              <1> ;Input: rdx -> Filespec to rename
   407                              <1> ;       rdi -> New filespec
   408                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   409 00003354 4889D6              <1>     mov rsi, rdx
   410 00003357 BB16000000          <1>     mov ebx, dirInclusive
   411 0000335C F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   412 00003363 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   413 00003366 880D(F7060000)      <1>     mov byte [searchAttr], cl
   414                              <1>     ;Step 0, verify both paths provided are valid
   415 0000336C E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   416 00003371 7249                <1>     jc .pnfError
   417 00003373 56                  <1>     push rsi
   418 00003374 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   419 00003377 E84A000000          <1>     call .renamePathCheck
   420 0000337C 5E                  <1>     pop rsi
   421 0000337D 723D                <1>     jc .pnfError
   422                              <1>     ;Now we canonicalise the filenames to make life easy
   423 0000337F 56                  <1>     push rsi
   424 00003380 4889FE              <1>     mov rsi, rdi
   425 00003383 488D3D(9D050000)    <1>     lea rdi, buffer2
   426 0000338A E811DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   427 0000338F 5E                  <1>     pop rsi
   428 00003390 722A                <1>     jc .pnfError
   429                              <1>     ;Now test if first file exists.
   430 00003392 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   431 00003398 8F05(25060000)      <1>     pop qword [fname2Ptr]
   432 0000339E 488D3D(1D050000)    <1>     lea rdi, buffer1
   433 000033A5 E8F6DDFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   434 000033AA 7210                <1>     jc .pnfError  
   435 000033AC E860030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   436 000033B1 0F8296390000        <1>     jc extErrExit
   437 000033B7 E983390000          <1>     jmp extGoodExit
   438                              <1> .pnfError:
   439 000033BC B803000000          <1>     mov eax, errPnf
   440 000033C1 E987390000          <1>     jmp extErrExit
   441                              <1> .renamePathCheck:
   442                              <1> ;Checks if the pathspec in rsi is OK
   443 000033C6 56                  <1>     push rsi
   444 000033C7 57                  <1>     push rdi
   445 000033C8 E89A360000          <1>     call checkPathspecOK
   446 000033CD 5F                  <1>     pop rdi
   447 000033CE 5E                  <1>     pop rsi
   448 000033CF 730D                <1>     jnc .pathOk     ;Path ok 
   449 000033D1 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   450                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   451 000033D3 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   452 000033DA 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   453                              <1> .badPath:
   454 000033DC F9                  <1>     stc
   455                              <1>     return
    13                              <2> %%_ret:
    14 000033DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> .pathOk:
   457 000033DE F8                  <1>     clc
   458                              <1>     return
    13                              <2> %%_ret:
    14 000033DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getSetFileDateTime:;ah = 57h
   461 000033E0 3C01                <1>     cmp al, 1
   462 000033E2 760A                <1>     jbe .oksubfun
   463 000033E4 B801000000          <1>     mov eax, errInvFnc
   464 000033E9 E95F390000          <1>     jmp extErrExit
   465                              <1> .oksubfun:
   466 000033EE E828150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   467 000033F3 0F8254390000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   468 000033F9 3C01                <1>     cmp al, 1
   469 000033FB 741C                <1>     je .setTimeDate
   470                              <1>     ;Here we get the Time/Date
   471 000033FD 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   472 00003401 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   473 00003405 E89B340000          <1>     call getUserRegs
   474 0000340A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   475 0000340E 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   476 00003412 31C0                <1>     xor eax, eax
   477 00003414 E926390000          <1>     jmp extGoodExit
   478                              <1> .setTimeDate:
   479                              <1>     ;Here we set the Time/Date
   480 00003419 66894F13            <1>     mov word [rdi + sft.wTime], cx
   481 0000341D 66895715            <1>     mov word [rdi + sft.wDate], dx
   482 00003421 31C0                <1>     xor eax, eax
   483 00003423 E917390000          <1>     jmp extGoodExit
   484                              <1> 
   485                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   486                              <1> ;Uses the clock to do it's bidding
   487                              <1> ;cx = file attribute 
   488                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   489                              <1> ;       filename
   490 00003428 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   491 0000342D 740A                <1>     jz .validAttribs
   492 0000342F B805000000          <1>     mov eax, errAccDen
   493 00003434 E914390000          <1>     jmp extErrExit
   494                              <1> .validAttribs:
   495 00003439 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   496 0000343D 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   497 00003440 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   498 00003445 31C0                <1>     xor eax, eax
   499 00003447 4889D7              <1>     mov rdi, rdx
   500 0000344A F2AE                <1>     repne scasb
   501 0000344C 85C9                <1>     test ecx, ecx
   502 0000344E 750A                <1>     jnz .nullFnd
   503                              <1>     ;Bad path
   504 00003450 B803000000          <1>     mov eax, errPnf
   505 00003455 E9F3380000          <1>     jmp extErrExit
   506                              <1> .nullFnd:
   507 0000345A 48FFCF              <1>     dec rdi
   508 0000345D 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   509 00003461 E859350000          <1>     call swapPathSeparator
   510 00003466 7403                <1>     jz .pathsepFnd
   511                              <1>     ;If no pathsep found, force one at rdi
   512 00003468 B05C                <1>     mov al, "\"
   513 0000346A AA                  <1>     stosb
   514                              <1> .pathsepFnd:
   515 0000346B 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   516                              <1> .fileCreateLoop:
   517 0000346E 55                  <1>     push rbp
   518 0000346F E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   519 00003474 5D                  <1>     pop rbp
   520 00003475 0FB7C1              <1>     movzx eax, cx
   521 00003478 0FB7D2              <1>     movzx edx, dx
   522 0000347B C1E010              <1>     shl eax, 10h
   523 0000347E 09D0                <1>     or eax, edx  ;Add the bits of dx too
   524 00003480 E831000000          <1>     call .writeNybbles
   525 00003485 31C0                <1>     xor eax, eax
   526 00003487 AA                  <1>     stosb   ;Store terminating null
   527 00003488 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   528 0000348B 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   529 0000348E 55                  <1>     push rbp
   530 0000348F E85C000000          <1>     call createNewFile
   531 00003494 5D                  <1>     pop rbp
   532 00003495 0F83A4380000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   533 0000349B 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   534 000034A2 3D05000000          <1>     cmp eax, errAccDen
   535 000034A7 74C5                <1>     je .fileCreateLoop
   536 000034A9 3D50000000          <1>     cmp eax, errFilExist
   537 000034AE 74BE                <1>     je .fileCreateLoop
   538 000034B0 F9                  <1>     stc
   539 000034B1 E997380000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   540                              <1> .writeNybbles:
   541                              <1> ;Write the nybbles of eax at rdi
   542 000034B6 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   543                              <1> .wnLp:
   544 000034BB C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   545 000034BE 50                  <1>     push rax
   546 000034BF 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   547 000034C4 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   548 000034C9 3D39000000          <1>     cmp eax, '9'
   549 000034CE 7605                <1>     jbe .notExtDigit
   550 000034D0 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   551                              <1> .notExtDigit:
   552 000034D5 AA                  <1>     stosb   ;Store the digit
   553 000034D6 58                  <1>     pop rax
   554 000034D7 FFC9                <1>     dec ecx
   555 000034D9 75E0                <1>     jnz .wnLp
   556                              <1>     return
    13                              <2> %%_ret:
    14 000034DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> .uniqueTimeGet:
   559 000034DC E827F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   560 000034E1 668B0D(17050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   561 000034E8 668B15(19050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   562                              <1>     return
    13                              <2> %%_ret:
    14 000034EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> createNewFile:     ;ah = 5Bh
   565 000034F0 51                  <1>     push rcx    ;Save file attributes on stack
   566 000034F1 488D0DC3070000      <1>     lea rcx, createNewMain
   567 000034F8 C605(F7060000)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   568 000034FF E9E6F9FFFF          <1>     jmp openFileHdl.openCommon
   569                              <1> 
   570                              <1> lockUnlockFile:    ;ah = 5Ch
   571                              <1> ;ah = 5Ch
   572                              <1> ;al = subfunction
   573                              <1> ;       00h lock region of file
   574                              <1> ;       01h unlock region of file
   575                              <1> ;ebx = file handle
   576                              <1> ;ecx = start offset of region within file
   577                              <1> ;edi = length of region in bytes
   578 00003504 3C01                <1>     cmp al, 1
   579 00003506 7757                <1>     ja .badFunction
   580 00003508 57                  <1>     push rdi
   581 00003509 E827140000          <1>     call derefSFTPtr
   582 0000350E 730B                <1>     jnc .validHdl
   583 00003510 58                  <1>     pop rax ;Discard the qword on the stack
   584 00003511 B806000000          <1>     mov eax, errBadHdl
   585 00003516 E932380000          <1>     jmp extErrExit
   586                              <1> .validHdl:
   587 0000351B 84C0                <1>     test al, al ;Check if al = 0
   588 0000351D 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   589 0000351E 7424                <1>     jz .lockFileRegion
   590 00003520 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   591 00003526 740B                <1>     jz .unlockShare ;Jump if a local file only
   592 00003528 50                  <1>     push rax
   593 00003529 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   594 0000352E CD4F                <1>     int 4Fh
   595 00003530 5B                  <1>     pop rbx
   596 00003531 EB06                <1>     jmp short .exitSelect
   597                              <1> .unlockShare:
   598 00003533 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   599                              <1> .exitSelect:
   600 00003539 0F820E380000        <1>     jc extErrExit
   601 0000353F E9FB370000          <1>     jmp extGoodExit
   602                              <1> .lockFileRegion:
   603 00003544 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   604 0000354A 740B                <1>     jz .lockShare   ;Jump if a local file only
   605 0000354C 50                  <1>     push rax
   606 0000354D B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   607 00003552 CD4F                <1>     int 4Fh
   608 00003554 5B                  <1>     pop rbx
   609 00003555 EBE2                <1>     jmp short .exitSelect
   610                              <1> .lockShare:
   611 00003557 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   612 0000355D EBDA                <1>     jmp short .exitSelect
   613                              <1> .badFunction:
   614 0000355F B801000000          <1>     mov eax, errInvFnc
   615 00003564 668905(0B040000)    <1>     mov word [errorExCde], ax
   616 0000356B E9DD370000          <1>     jmp extErrExit
   617                              <1> 
   618                              <1> setHandleCount:    ;ah = 67h
   619                              <1> ;Input: bx = Size of new file handle table for process
   620                              <1> ;Output: CF=NC -> Ok to make more handles
   621                              <1> ;        CF=CY -> ax = Error code
   622                              <1> ;Five cases to consider:
   623                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   624                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   625                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   626                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   627                              <1> ;   Special case below, cannot be enacted directly by caller.
   628                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   629 00003570 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   630 00003573 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   631 0000357A 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   632 0000357E 7765                <1>     ja short .moreHdlsReq
   633 00003580 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   634 00003585 771A                <1>     ja short .reduceExternal
   635                              <1>     ;Here if 20 handles or less requested
   636 00003587 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   637 0000358D 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   638 0000358F 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   639 00003591 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   640                              <1> .exitGood:
   641 00003597 E9A3370000          <1>     jmp extGoodExit
   642                              <1> .exitBad:
   643 0000359C E9AC370000          <1>     jmp extErrExit
   644                              <1> .reduceExternal:
   645                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   646                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   647                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   648                              <1> ; and failing that, it will free it and then allocate a new block.
   649 000035A1 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   650 000035A5 E8E8000000          <1>     call .checkOpenHandles
   651 000035AA 72F0                <1>     jc short .exitBad
   652                              <1>     ;Recall ebx has the numebr of handles here
   653 000035AC E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   654 000035B1 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   655 000035B5 EBE0                <1>     jmp short .exitGood
   656                              <1> .reduceFree:
   657                              <1> ;Entered once we know that we have an external block
   658                              <1> ;Now we close all handles above JFT size
   659 000035B7 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   660 000035BB 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   661 000035BE E8CF000000          <1>     call .checkOpenHandles
   662 000035C3 72D7                <1>     jc short .exitBad
   663 000035C5 BB14000000          <1>     mov ebx, dfltJFTsize
   664 000035CA 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   665                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   666 000035CC E8B8000000          <1>     call .copyBlock
   667                              <1>     ;Now we can free the old block
   668 000035D1 4989F0              <1>     mov r8, rsi
   669 000035D4 53                  <1>     push rbx
   670 000035D5 E8621B0000          <1>     call freeMemory
   671 000035DA 5B                  <1>     pop rbx
   672 000035DB 72BF                <1>     jc short .exitBad
   673 000035DD 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   674 000035E1 31C0                <1>     xor eax, eax
   675                              <1> .exitGood2:
   676 000035E3 EBB2                <1>     jmp short .exitGood
   677                              <1> .moreHdlsReq:
   678 000035E5 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   679 000035EB 7507                <1>     jne short .okToExpand
   680 000035ED B801000000          <1>     mov eax, errInvFnc
   681                              <1> .exitBad2:
   682 000035F2 EBA8                <1>     jmp short .exitBad
   683                              <1> .okToExpand:
   684                              <1> ;Need to check if we are external and reallocating. 
   685                              <1> ;   If we are, can we realloc or do we need to free and save?
   686 000035F4 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   687 000035FA 762E                <1>     jbe short .moreFromJFT
   688 000035FC 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   689 00003600 E83C000000          <1>     call .reallocBlock
   690 00003605 7390                <1>     jnc short .exitGood
   691 00003607 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   692 0000360C 728E                <1>     jc short .exitBad
   693 0000360E 4989F0              <1>     mov r8, rsi ;Free the source block
   694 00003611 53                  <1>     push rbx
   695 00003612 57                  <1>     push rdi    ;Save the new pointer here
   696 00003613 55                  <1>     push rbp
   697 00003614 E8231B0000          <1>     call freeMemory
   698 00003619 5D                  <1>     pop rbp
   699 0000361A 5F                  <1>     pop rdi
   700 0000361B 5B                  <1>     pop rbx
   701 0000361C 7317                <1>     jnc short .freeOk ;Free'd the original block
   702 0000361E 50                  <1>     push rax    ;Save error code on stack
   703 0000361F 4989F8              <1>     mov r8, rdi ;Free the new block
   704 00003622 E8151B0000          <1>     call freeMemory
   705 00003627 58                  <1>     pop rax
   706 00003628 EBC8                <1>     jmp short .exitBad2
   707                              <1> .moreFromJFT:
   708 0000362A 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   709 0000362E E826000000          <1>     call .getBlock
   710 00003633 72BD                <1>     jc short .exitBad2
   711                              <1> .freeOk:
   712 00003635 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   713 00003639 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   714 0000363D 31C0                <1>     xor eax, eax
   715 0000363F EBA2                <1>     jmp short .exitGood2
   716                              <1> .reallocBlock:
   717                              <1> ;Input:
   718                              <1> ;   rsi -> Source block to reallocate
   719                              <1> ;   ebx = Number of handles
   720                              <1> ;   rbp -> Current PSP
   721                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   722                              <1> ;                 ebx = Number of handles
   723                              <1> ;        CF=CY => Error, EAX has error code
   724 00003641 56                  <1>     push rsi ;Save external pointer on stack
   725 00003642 53                  <1>     push rbx    ;Save number of handles on stack
   726 00003643 55                  <1>     push rbp
   727 00003644 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   728 0000364A C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   729 0000364D 4989F0              <1>     mov r8, rsi
   730 00003650 E8EF1B0000          <1>     call reallocMemory
   731 00003655 5D                  <1>     pop rbp
   732 00003656 5B                  <1>     pop rbx
   733 00003657 5E                  <1>     pop rsi ;Get external pointer back in rsi
   734                              <1>     return
    13                              <2> %%_ret:
    14 00003658 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> .getBlock:
   736                              <1> ;rsi -> Source block for copy 
   737                              <1> ;ebx = Number of new handles
   738                              <1> ;Output: rsi and ebx as before
   739                              <1> ;        rdi -> New block
   740                              <1> ;IF CF=CY, bad exit
   741 00003659 53                  <1>     push rbx    ;bx has the number of handles we want
   742 0000365A 56                  <1>     push rsi
   743 0000365B 55                  <1>     push rbp
   744 0000365C 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   745 00003662 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   746 00003665 89D9                <1>     mov ecx, ebx
   747 00003667 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   748 0000366A 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   749 0000366B E8C8180000          <1>     call allocateMemory ;Allocate memory 
   750 00003670 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   751 00003671 5D                  <1>     pop rbp ;Get the PSP pointer back
   752 00003672 5E                  <1>     pop rsi ;Get the source pointer back
   753 00003673 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   754                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003674 72E2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   755 00003676 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   756 00003679 57                  <1>     push rdi
   757 0000367A 31C0                <1>     xor eax, eax
   758 0000367C FFC8                <1>     dec eax
   759 0000367E F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   760 00003680 5F                  <1>     pop rdi
   761 00003681 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   762 00003683 E801000000          <1>     call .copyBlock ;Copy all the handles over
   763                              <1>     return
    13                              <2> %%_ret:
    14 00003688 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .copyBlock:
   765                              <1> ;Input: rsi -> Source block
   766                              <1> ;       rdi -> Destination block
   767                              <1> ;       ecx = Number of handles to copy
   768 00003689 56                  <1>     push rsi
   769 0000368A 57                  <1>     push rdi
   770 0000368B 51                  <1>     push rcx
   771 0000368C F3A4                <1>     rep movsb
   772 0000368E 59                  <1>     pop rcx
   773 0000368F 5F                  <1>     pop rdi
   774 00003690 5E                  <1>     pop rsi
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003691 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .checkOpenHandles:
   777                              <1> ;Checks for open handles in the range that is to be freed.
   778                              <1> ;If any found, error exit
   779                              <1> ;Input: rsi -> Where to start searching
   780 00003692 56                  <1>     push rsi
   781 00003693 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   782                              <1> .cohLoop:
   783 00003697 803EFF              <1>     cmp byte [rsi], -1
   784 0000369A 7509                <1>     jne .checkOpenHandlesBadExit
   785 0000369C 48FFC6              <1>     inc rsi
   786 0000369F FFC9                <1>     dec ecx
   787 000036A1 75F4                <1>     jnz .cohLoop
   788 000036A3 5E                  <1>     pop rsi
   789                              <1>     return
    13                              <2> %%_ret:
    14 000036A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   790                              <1> .checkOpenHandlesBadExit:
   791 000036A5 B804000000          <1>     mov eax, errNhl
   792 000036AA F9                  <1>     stc
   793 000036AB 5E                  <1>     pop rsi
   794                              <1>     return
    13                              <2> %%_ret:
    14 000036AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   795                              <1> 
   796                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   797                              <1>     ;Input: bx = File to flush
   798 000036AD E869120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   799 000036B2 0F8295360000        <1>     jc extErrExit
   800 000036B8 E8B7100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   801                              <1>     ;Now we check if the device is a char, disk or net file and commit
   802 000036BD E811000000          <1>     call commitMain
   803 000036C2 0F8285360000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   804                              <1> .exitOk:
   805 000036C8 30C0                <1>     xor al, al
   806 000036CA E8D6310000          <1>     call getUserRegs
   807 000036CF 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   808                              <1>     return
    13                              <2> %%_ret:
    14 000036D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   809                              <1> 
   810                              <1> ;-----------------------------------:
   811                              <1> ;       Main File IO Routines       :
   812                              <1> ;-----------------------------------:
   813                              <1> commitMain:
   814                              <1> ;Commits the current SFT 
   815 000036D3 E8A4100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   816 000036D8 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   817 000036DC A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   818                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000036E1 75EF                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   819 000036E3 66A90080            <1>     test ax, devRedirDev
   820 000036E7 7508                <1>     jnz .notNet
   821                              <1>     ;Commit file net redir call and exit
   822 000036E9 B807110000          <1>     mov eax, 1107h
   823 000036EE CD4F                <1>     int 4Fh
   824                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 000036F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> .notNet:
   826 000036F1 E80C360000          <1>     call dosCrit1Enter
   827 000036F6 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   828 000036FA E811310000          <1>     call setWorkingDPB
   829 000036FF E86EE6FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   830 00003704 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   831 00003706 E853D2FFFF          <1>     call flushFile  ;Now the file gets flushed
   832                              <1> .exit:
   833                              <1> ;Propagate CF and AL if needed due to error
   834 0000370B E8FC350000          <1>     call dosCrit1Exit
   835                              <1>     return
    13                              <2> %%_ret:
    14 00003710 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   836                              <1> renameMain:
   837                              <1> ;Now, creates a special find first block for the source file
   838                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   839                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   840                              <1> ; block. 
   841                              <1> ;Then we search for that file name specifically (again), replacing 
   842                              <1> ; the filename portion of the destination buffer. If it exists or the 
   843                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   844                              <1> ; the new directory entry and delete the original file. 
   845                              <1> ;Input:
   846                              <1> ; filenamePtr1 -> Source path + filename pattern
   847                              <1> ; filenamePtr2 -> New path + filename pattern
   848                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   849 00003711 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   850 00003718 E8FB300000          <1>     call testCDSNet ;CF=NC => Not net
   851 0000371D 7308                <1>     jnc .notNet
   852 0000371F B811110000          <1>     mov eax, 1111h
   853 00003724 CD4F                <1>     int 4Fh
   854                              <1>     return
    13                              <2> %%_ret:
    14 00003726 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   855                              <1> .notNet:
   856                              <1> ;First check if both drives are on the same disk
   857 00003727 8A05(1D050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   858 0000372D 8A25(9D050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   859 00003733 38E0                <1>     cmp al, ah
   860 00003735 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   861 00003737 B811000000          <1>     mov eax, errDevUnk
   862 0000373C F9                  <1>     stc
   863                              <1>     return
    13                              <2> %%_ret:
    14 0000373D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   864                              <1> .sameDrive:
   865                              <1> ;Now we check if either pathsepc is simply X:\,0
   866                              <1> ; If they are, return fail as we cannot rename the root dir
   867 0000373E E8BF350000          <1>     call dosCrit1Enter
   868 00003743 8B05(1D050000)      <1>     mov eax, dword [buffer1]
   869 00003749 30C0                <1>     xor al, al
   870 0000374B 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   871 00003750 750B                <1>     jne .checkpath2
   872                              <1> .accDen:
   873 00003752 B805000000          <1>     mov eax, errAccDen
   874                              <1> .errorExit:
   875 00003757 F9                  <1>     stc
   876 00003758 E9EE020000          <1>     jmp .exit2
   877                              <1> .checkpath2:
   878 0000375D 8B05(9D050000)      <1>     mov eax, dword [buffer2]
   879 00003763 30C0                <1>     xor al, al
   880 00003765 3D003A5C00          <1>     cmp eax, 005C3A00h
   881 0000376A 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   882                              <1> ;Now we find first the source file
   883 0000376C 488B35(1D060000)    <1>     mov rsi, qword [fname1Ptr]
   884 00003773 4889F7              <1>     mov rdi, rsi
   885 00003776 C605(F7060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   886 0000377D E85EDAFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   887 00003782 0F82C3020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   888 00003788 488D35(59060000)    <1>     lea rsi, curDirCopy
   889 0000378F 488D3D(BD070000)    <1>     lea rdi, renameDir
   890 00003796 B904000000          <1>     mov ecx, fatDirEntry_size/8
   891 0000379B F348A5              <1>     rep movsq   ;Copy directory over
   892 0000379E 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   893 000037A5 E860D9FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   894                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   895                              <1>     ; dir for any CDS.
   896 000037AA F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   897 000037B1 7543                <1>     jnz .notDirCheck
   898 000037B3 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   899 000037BA 57                  <1>     push rdi
   900 000037BB E83D320000          <1>     call strlen ;Get asciiz length in ecx
   901 000037C0 5B                  <1>     pop rbx
   902 000037C1 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   903 000037C3 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   904 000037CA 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   905                              <1> .dirCheck:
   906 000037D1 4889DF              <1>     mov rdi, rbx
   907 000037D4 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   908 000037D5 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   909 000037D7 AC                  <1>     lodsb   ;Get the last char to check in al
   910 000037D8 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   911 000037D9 7510                <1>     jne .neqDir
   912 000037DB 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   913 000037DD 0F846FFFFFFF        <1>     je .accDen
   914 000037E3 84C0                <1>     test al, al
   915 000037E5 0F8467FFFFFF        <1>     je .accDen
   916                              <1> .neqDir:
   917 000037EB 4881C65B000000      <1>     add rsi, cds_size   ;Goto next CDS
   918 000037F2 FFCA                <1>     dec edx
   919 000037F4 75DB                <1>     jnz .dirCheck
   920                              <1> .notDirCheck:
   921                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   922 000037F6 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   923 000037FB 31C0                <1>     xor eax, eax
   924 000037FD 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]
   925 00003804 F2AE                <1>     repne scasb   ;Search for terminating null
   926 00003806 FD                  <1>     std ;Go backwards now, to find the path sep
   927 00003807 B05C                <1>     mov al, "\"
   928 00003809 F2AE                <1>     repne scasb   ;Now rsi points one before
   929 0000380B FC                  <1>     cld ;Go normal ways now
   930 0000380C 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   931 00003813 57                  <1>     push rdi
   932 00003814 4889FE              <1>     mov rsi, rdi
   933 00003817 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
   934 0000381E E85FD8FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   935 00003823 5F                  <1>     pop rdi
   936 00003824 57                  <1>     push rdi    ;Save rdi on stack again
   937 00003825 488D35(B0070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   938                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   939 0000382C 48A5                <1>     movsq
   940 0000382E A5                  <1>     movsd
   941 0000382F A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   942 00003830 5F                  <1>     pop rdi ;rdi points to first char position
   943 00003831 E865020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   944 00003836 0F821BFFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   945                              <1>     ;Else return the pattern back to its original position
   946 0000383C 488D35(E0060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   947 00003843 E882D8FFFF          <1>     call FCBToAsciiz
   948                              <1>     ;Delete the original directory entry
   949 00003848 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   950 0000384C FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   951 0000384E 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   952 00003852 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   953 00003854 8B0D(9F070000)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   954 0000385A C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   955 0000385D 91                  <1>     xchg ecx, eax
   956 0000385E F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   957 00003860 89C3                <1>     mov ebx, eax
   958 00003862 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   959 00003868 E8B3D1FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   960 0000386D 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   961 00003870 E890D0FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   962 00003875 0F82DB010000        <1>     jc .badExit
   963 0000387B 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   964                              <1>     ;rsi points to the file entry
   965 00003880 8A05(03070000)      <1>     mov al, byte [delChar]
   966 00003886 8806                <1>     mov byte [rsi], al
   967 00003888 E8EDCEFFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   968                              <1> 
   969                              <1>     ;Now we use the destination filename pattern to build the new filename
   970 0000388D 488B3D(25060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   971 00003894 31C0                <1>     xor eax, eax
   972 00003896 B943000000          <1>     mov ecx, 67
   973 0000389B F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   974                              <1> .findPattern:
   975 0000389D 48FFCF              <1>     dec rdi
   976 000038A0 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   977 000038A3 75F8                <1>     jne .findPattern
   978                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   979 000038A5 C605(F9060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   980 000038AC 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   981 000038B0 750D                <1>     jne .notRoot
   982                              <1>     ;The root dir always exists on a volume so can skip the check.
   983 000038B2 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   984 000038B5 57                  <1>     push rdi
   985 000038B6 800D(F9060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   986 000038BD EB29                <1>     jmp short .skipCheck
   987                              <1> .notRoot:
   988 000038BF AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   989 000038C0 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   990                              <1>     ;Now check if the parent directory exists for the destination
   991 000038C1 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   992 000038C2 FF35(1D060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   993 000038C8 488D35(9D050000)    <1>     lea rsi, buffer2
   994 000038CF 4889F7              <1>     mov rdi, rsi
   995 000038D2 E802D9FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   996 000038D7 8F05(1D060000)      <1>     pop qword [fname1Ptr]
   997 000038DD 5F                  <1>     pop rdi
   998 000038DE 0F8272010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   999 000038E4 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1000                              <1> .skipCheck:
  1001                              <1>     ;rdi now points to the first char of the pattern
  1002 000038E8 4889FE              <1>     mov rsi, rdi
  1003 000038EB 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
  1004 000038F2 E88BD7FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1005                              <1>     ;Ensure the destination pattern is not all question marks
  1006 000038F7 813D(E0060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1006 000038FF 3F3F                <1>
  1007 00003901 7524                <1>     jne .validRenPattern
  1008 00003903 813D(E4060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1008 0000390B 3F3F                <1>
  1009 0000390D 7518                <1>     jne .validRenPattern
  1010 0000390F 66813D(E8060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1010 00003917 3F                  <1>
  1011 00003918 750D                <1>     jne .validRenPattern
  1012 0000391A 803D(EA060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1013 00003921 0F842A010000        <1>     je .bad ;Access denied buddy ol' pal
  1014                              <1> .validRenPattern:
  1015                              <1>     ;curDirCopy has information for the destination directory file we will 
  1016                              <1>     ; write to. The cluster points to the directory file itself to search in
  1017                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1018                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1019 00003927 488D35(BD070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1020 0000392E 488D3D(D4060000)    <1>     lea rdi, fcbName
  1021 00003935 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1022 00003936 B90B000000          <1>     mov ecx, 11
  1023 0000393B F3A4                <1>     rep movsb
  1024 0000393D 5F                  <1>     pop rdi
  1025 0000393E 488D35(E0060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1026                              <1> .mnnLp:
  1027 00003945 AC                  <1>     lodsb
  1028 00003946 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1029 00003948 7404                <1>     je .mnnWC   ;Skip overriding this char
  1030 0000394A AA                  <1>     stosb   ;Store new char and go forwards by one
  1031 0000394B 48FFCF              <1>     dec rdi ;Now go back by one
  1032                              <1> .mnnWC:
  1033 0000394E 48FFC7              <1>     inc rdi ;Goto next letter
  1034 00003951 FFC1                <1>     inc ecx
  1035 00003953 81F90B000000        <1>     cmp ecx, 11
  1036 00003959 75EA                <1>     jne .mnnLp
  1037 0000395B 488D35(D4060000)    <1>     lea rsi, fcbName
  1038 00003962 488D3D(BD070000)    <1>     lea rdi, renameDir
  1039 00003969 B90B000000          <1>     mov ecx, 11
  1040 0000396E F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1041 00003970 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1042 00003971 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1043 00003972 488D35(D4060000)    <1>     lea rsi, fcbName
  1044 00003979 E84CD7FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1045 0000397E 488B35(25060000)    <1>     mov rsi, qword [fname2Ptr]
  1046 00003985 4889F7              <1>     mov rdi, rsi
  1047 00003988 E853D8FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1048 0000398D 0F83C3000000        <1>     jnc .badExit   ;If the file exists, then error
  1049 00003993 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
  1050 00003998 0F85B8000000        <1>     jne .badExit
  1051                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1052                              <1>     ;If the parent is root, deal with special case
  1053 0000399E 488D1D(59060000)    <1>     lea rbx, curDirCopy
  1054 000039A5 F605(F9060000)02    <1>     test byte [fileFDflg], 2
  1055 000039AC C605(F9060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1056 000039B3 7416                <1>     jz .notRoot2
  1057 000039B5 488D35(D4060000)    <1>     lea rsi, fcbName
  1058 000039BC 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1059 000039C3 48A5                <1>     movsq
  1060 000039C5 A5                  <1>     movsd
  1061 000039C6 A4                  <1>     movsb
  1062 000039C7 31C0                <1>     xor eax, eax    ;Dir to search
  1063 000039C9 EB13                <1>     jmp short .getSpace
  1064                              <1> .notRoot2:
  1065 000039CB 0FB715(6D060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1066 000039D2 0FB705(73060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1067 000039D9 C1E210              <1>     shl edx, 10h
  1068 000039DC 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1069                              <1> .getSpace:
  1070 000039DE E87C000000          <1>     call .searchForDirSpace
  1071 000039E3 726C                <1>     jc .bad
  1072                              <1> ;dir Entry found, rsi points to space in buffer
  1073 000039E5 4889F7              <1>     mov rdi, rsi
  1074 000039E8 488D35(BD070000)    <1>     lea rsi, renameDir
  1075 000039EF B904000000          <1>     mov ecx, fatDirEntry_size/8
  1076 000039F4 F348A5              <1>     rep movsq   ;Copy dir over
  1077 000039F7 E87ECDFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1078                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1079                              <1>     ;If it does, we find next. If not, we exit
  1080 000039FC B03F                <1>     mov al, "?"
  1081 000039FE 488B3D(1D060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1082 00003A05 E8F32F0000          <1>     call strlen ;Get in rcx to get the length of the string
  1083 00003A0A F2AE                <1>     repne scasb
  1084 00003A0C 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1085 00003A0E B90B000000          <1>     mov ecx, 11
  1086 00003A13 488D3D(E0060000)    <1>     lea rdi, wcdFcbName
  1087 00003A1A F2AE                <1>     repne scasb
  1088 00003A1C 7525                <1>     jne .exit
  1089                              <1>     ;Here we gotta do a find next now!
  1090 00003A1E FF35(17040000)      <1>     push qword [currentDTA]
  1091 00003A24 488D3D(92070000)    <1>     lea rdi, renameFFBlk
  1092 00003A2B 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1093 00003A32 E851D3FFFF          <1>     call findNextMain
  1094 00003A37 8F05(17040000)      <1>     pop qword [currentDTA]
  1095 00003A3D 0F83E4FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1096                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1097                              <1> .exit:
  1098 00003A43 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1099 00003A44 E8FFCCFFFF          <1>     call writeThroughBuffers
  1100 00003A49 720B                <1>     jc .badExit
  1101                              <1> .exit2: ;Bad exit before we push qword on stack 
  1102 00003A4B E8BC320000          <1>     call dosCrit1Exit
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00003A50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> .bad:
  1105 00003A51 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1106                              <1> .badExit:
  1107 00003A56 E8B6CCFFFF          <1>     call cancelWriteThroughBuffers
  1108 00003A5B F9                  <1>     stc
  1109 00003A5C 5F                  <1>     pop rdi
  1110 00003A5D EBEC                <1>     jmp short .exit2
  1111                              <1> 
  1112                              <1> .searchForDirSpace:
  1113                              <1> ;Input: eax = First directory to search 
  1114 00003A5F 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1115 00003A65 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1116 00003A67 668905(83070000)    <1>     mov word [dirSect], ax
  1117 00003A6E 8905(85070000)      <1>     mov dword [dirEntry], eax
  1118 00003A74 E86CE2FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1119 00003A79 731C                <1>     jnc .dirEntryFnd
  1120 00003A7B 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1120 00003A83 0000                <1>
  1121 00003A85 7412                <1>     je .searchBad ;Set CF and exit
  1122 00003A87 E8A3E3FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1123 00003A8C 720B                <1>     jc .searchBad
  1124 00003A8E 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1125 00003A93 7404                <1>     je .searchBad
  1126                              <1>     ;Else eax = Newly allocated cluster
  1127 00003A95 EBC8                <1>     jmp short .searchForDirSpace
  1128                              <1> .dirEntryFnd:
  1129 00003A97 F8                  <1>     clc
  1130                              <1>     return
    13                              <2> %%_ret:
    14 00003A98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> .searchBad:
  1132 00003A99 F9                  <1>     stc
  1133                              <1>     return
    13                              <2> %%_ret:
    14 00003A9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1134                              <1> 
  1135                              <1> 
  1136                              <1> checkNoOpenHandlesForShareAction:
  1137                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1138                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1139                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1140                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1141                              <1> ; proceeding.
  1142                              <1> ;
  1143                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1144                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1145                              <1> ;       currDirCopy = Directory entry for the file
  1146 00003A9B E84B320000          <1>     call dosPushRegs    ;Save the context completely
  1147 00003AA0 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1148 00003AA7 740C                <1>     jz .noOpenFileCheckHandler
  1149 00003AA9 FF15(BF000000)      <1>     call qword [openFileCheck]
  1150 00003AAF 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1151 00003AB1 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1152 00003AB3 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1153                              <1> .noOpenFileCheckHandler:
  1154                              <1>     ;The following closes most recent shared handles referencing it
  1155                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1156                              <1>     ; mode and if there is precisely 1  
  1157 00003AB5 FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1158                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1159 00003ABB 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1160 00003AC2 48893D(2D070000)    <1>     mov qword [currentSFT], rdi
  1161 00003AC9 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1162 00003ACE C605(02070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1163                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1164 00003AD5 57                  <1>     push rdi
  1165 00003AD6 E884020000          <1>     call buildSFTEntry
  1166 00003ADB 5F                  <1>     pop rdi
  1167 00003ADC 7225                <1>     jc .errorMain
  1168 00003ADE 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1169 00003AE3 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1170 00003AE9 57                  <1>     push rdi
  1171 00003AEA E8FA390000          <1>     call shareFile
  1172 00003AEF 5F                  <1>     pop rdi
  1173 00003AF0 7211                <1>     jc .errorMain
  1174 00003AF2 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1175 00003AF7 E884390000          <1>     call closeShareCallWrapper
  1176                              <1> .exit:
  1177 00003AFC E8D3310000          <1>     call dosPopRegs
  1178 00003B01 F8                  <1>     clc
  1179                              <1>     return
    13                              <2> %%_ret:
    14 00003B02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1180                              <1> .errorMain:
  1181 00003B03 E8CC310000          <1>     call dosPopRegs
  1182 00003B08 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1183 00003B0D F9                  <1>     stc
  1184                              <1>     return
    13                              <2> %%_ret:
    14 00003B0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1185                              <1> 
  1186                              <1> outerDeleteMain:
  1187                              <1> ;Internal current dir must be populated with dir entry
  1188                              <1> ; and internal DOS directory variables now point to this entry.
  1189                              <1> ;Checks if the file is a char device or read only.
  1190                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1191                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1192                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1193                              <1> ;         CF=NC => File deleted
  1194 00003B0F 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
  1195 00003B16 E8FD2C0000          <1>     call testCDSNet ;CF=NC => Not net
  1196 00003B1B 7308                <1>     jnc .notNet
  1197 00003B1D B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1198 00003B22 CD4F                <1>     int 4Fh
  1199                              <1>     return
    13                              <2> %%_ret:
    14 00003B24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1200                              <1> .notNet:
  1201 00003B25 B805000000          <1>     mov eax, errAccDen  
  1202 00003B2A F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1203 00003B31 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1204 00003B33 F605(64060000)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1205 00003B3A 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1206 00003B3C E843000000          <1>     call deleteMain
  1207 00003B41 723F                <1>     jc .exitBad
  1208                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1209 00003B43 B03F                <1>     mov al, "?"
  1210 00003B45 488D3D(D4060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1211 00003B4C B90B000000          <1>     mov ecx, 11
  1212 00003B51 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1213 00003B53 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1214 00003B55 F8                  <1>     clc
  1215                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00003B56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .serverWCloop:
  1217 00003B57 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1218 00003B5D 488D3D(2E060000)    <1>     lea rdi, dosffblock
  1219 00003B64 57                  <1>     push rdi    ;Push this address onto the stack
  1220 00003B65 E8A0D5FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1221 00003B6A 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1222 00003B70 E813D2FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1223 00003B75 8F05(17040000)      <1>     pop qword [currentDTA]
  1224 00003B7B E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1225 00003B80 73D5                <1>     jnc .serverWCloop     
  1226                              <1> ;Stop as soon as an error occurs
  1227                              <1> .exitBad:
  1228 00003B82 F9                  <1>     stc
  1229                              <1>     return
    13                              <2> %%_ret:
    14 00003B83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1230                              <1> 
  1231                              <1> deleteMain:
  1232                              <1> ;Now unlink FAT chain and then clear directory entry
  1233                              <1> ;Get the start cluster of this file
  1234                              <1> ;Input:
  1235                              <1> ; The file must have NOT be read-only.
  1236                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1237                              <1> ;     - curDirCopy must be filled with the file directory information
  1238                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1239                              <1> ;Output: CF=NC => Success, 
  1240                              <1> ; If not net CDS:
  1241                              <1> ;   rsi keeps pointing to directory entry.
  1242                              <1> ;   al = First char of the file that was deleted.
  1243                              <1> ;        CF=CY => Error
  1244                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1245 00003B84 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1246                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B89 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1247 00003B8B 52                  <1>     push rdx
  1248 00003B8C 0FB715(73060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1249 00003B93 0FB705(6D060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1250 00003B9A C1E010              <1>     shl eax, 10h
  1251 00003B9D 09D0                <1>     or eax, edx ;Add low bits to eax
  1252 00003B9F 5A                  <1>     pop rdx
  1253 00003BA0 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1254 00003BA2 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1255 00003BA4 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1256 00003BAB E829D0FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1257 00003BB0 721B                <1>     jc .exitBad
  1258                              <1> .skipUnlink:
  1259                              <1>     ;Now replace the first char of the directory to 0E5h
  1260                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1261 00003BB2 E841E1FFFF          <1>     call getDiskDirectoryEntry
  1262 00003BB7 7214                <1>     jc .exitBad
  1263 00003BB9 8A05(03070000)      <1>     mov al, byte [delChar]
  1264 00003BBF 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1265 00003BC1 E8B4CBFFFF          <1>     call markBufferDirty
  1266                              <1>     ;CF must be clear
  1267 00003BC6 E87DCBFFFF          <1>     call writeThroughBuffers
  1268                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003BCB 73B6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1269                              <1> .exitBad:
  1270 00003BCD E83FCBFFFF          <1>     call cancelWriteThroughBuffers
  1271 00003BD2 F9                  <1>     stc
  1272                              <1>     return
    13                              <2> %%_ret:
    14 00003BD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1273                              <1> 
  1274                              <1> openMain:
  1275                              <1> ;Input: ax (formally al) = Open mode
  1276                              <1> ;       [currentSFT] = SFT we are building
  1277                              <1> ;       [workingCDS] = CDS of drive to access
  1278                              <1> ;       [workingDPB] = DPB of drive to access
  1279                              <1> ;Ouput: CF=CY => Error, eax has error code
  1280 00003BD4 E8AE000000          <1>     call setOpenMode
  1281                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003BD9 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1282 00003BDB 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1283 00003BE2 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
  1284 00003BE9 30E4                <1>     xor ah, ah  ;al has the access mode
  1285 00003BEB 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1286 00003BEF 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1287 00003BF6 750A                <1>     jne .notNet
  1288                              <1> .redirOpen:
  1289 00003BF8 50                  <1>     push rax    ;Push open mode onto stack
  1290 00003BF9 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1291 00003BFE CD4F                <1>     int 4Fh
  1292 00003C00 58                  <1>     pop rax
  1293                              <1>     return
    13                              <2> %%_ret:
    14 00003C01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1294                              <1> .notNet:
  1295 00003C02 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1296 00003C08 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1297 00003C0A E8F3300000          <1>     call dosCrit1Enter
  1298 00003C0F C605(02070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1299 00003C16 C605(03070000)E5    <1>     mov byte [delChar], 0E5h
  1300 00003C1D E83D010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1301 00003C22 7227                <1>     jc .errorExit
  1302                              <1> .openShareLoop:
  1303                              <1> ;Now we attempt to register the file with SHARE
  1304 00003C24 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount]    
  1305                              <1> .openShareTryAgain: 
  1306 00003C2B 51                  <1>     push rcx
  1307 00003C2C E848380000          <1>     call openShareCallWrapper
  1308 00003C31 59                  <1>     pop rcx
  1309 00003C32 731D                <1>     jnc .fileSharedOk
  1310 00003C34 E86A380000          <1>     call shareRetryCountdown
  1311 00003C39 FFC9                <1>     dec ecx
  1312 00003C3B 75EE                <1>     jnz .openShareTryAgain
  1313 00003C3D 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1314 00003C44 E87D380000          <1>     call shareCheckOpenViolation
  1315 00003C49 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1316                              <1> .errorExit:
  1317 00003C4B E8BC300000          <1>     call dosCrit1Exit   ;Else we error out
  1318                              <1>     return
    13                              <2> %%_ret:
    14 00003C50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1319                              <1> .fileSharedOk:
  1320 00003C51 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1321 00003C56 E8210B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1322 00003C5B FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1323 00003C61 E8A6300000          <1>     call dosCrit1Exit
  1324                              <1> openDriverMux:  ;Int 4Fh, AX=120Ch, jumped to by Create
  1325 00003C66 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1326 00003C6D E884E3FFFF          <1>     call openSFT
  1327 00003C72 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1328 00003C78 7501                <1>     jnz .netOpen
  1329                              <1>     return
    13                              <2> %%_ret:
    14 00003C7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> .netOpen:
  1331 00003C7B 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1332 00003C82 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1333                              <1>     return
    13                              <2> %%_ret:
    14 00003C86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1334                              <1> 
  1335                              <1> setOpenMode:
  1336                              <1> ;Input: al = Open mode for the file open
  1337 00003C87 8805(F8060000)      <1>     mov byte [fileOpenMd], al
  1338 00003C8D 53                  <1>     push rbx
  1339 00003C8E 88C3                <1>     mov bl, al
  1340 00003C90 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1341 00003C93 803D(FD060000)FF    <1>     cmp byte [dosInvoke], -1    
  1342 00003C9A 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1343 00003C9C 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1344 00003C9F 7405                <1>     je .s2
  1345                              <1> .s1:
  1346 00003CA1 80FB40              <1>     cmp bl, denyNoneShare
  1347 00003CA4 770D                <1>     ja .somBad
  1348                              <1> .s2:
  1349 00003CA6 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1350 00003CA8 80E30F              <1>     and bl, 0Fh
  1351 00003CAB 80FB02              <1>     cmp bl, RWAccess
  1352 00003CAE 7703                <1>     ja .somBad
  1353 00003CB0 5B                  <1>     pop rbx
  1354 00003CB1 F8                  <1>     clc
  1355                              <1>     return
    13                              <2> %%_ret:
    14 00003CB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1356                              <1> .somBad:
  1357 00003CB3 5B                  <1>     pop rbx
  1358 00003CB4 B80C000000          <1>     mov eax, errAccCde
  1359 00003CB9 F9                  <1>     stc
  1360                              <1>     return
    13                              <2> %%_ret:
    14 00003CBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1361                              <1> 
  1362                              <1> createNewMain:
  1363                              <1> ;Input: ax (formally al) = File attributes
  1364                              <1> ;       [currentSFT] = SFT we are building
  1365                              <1> ;       [workingCDS] = CDS of drive to access
  1366                              <1> ;       [workingDPB] = DPB of drive to access
  1367 00003CBB 0FB6C0              <1>     movzx eax, al
  1368 00003CBE B401                <1>     mov ah, 1    ;Tell redir to create new file
  1369 00003CC0 F605(FF060000)FF    <1>     test byte [fileExist], -1
  1370 00003CC7 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1371 00003CC9 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1372 00003CCE F9                  <1>     stc
  1373                              <1>     return
    13                              <2> %%_ret:
    14 00003CCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1374                              <1> createMain:
  1375                              <1> ;Input: ax (formally al) = File attributes
  1376                              <1> ;       [currentSFT] = SFT we are building
  1377                              <1> ;       [workingCDS] = CDS of drive to access
  1378                              <1> ;       [workingDPB] = DPB of drive to access
  1379 00003CD0 0FB6C0              <1>     movzx eax, al
  1380                              <1> .createNewEP:
  1381 00003CD3 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1382 00003CD5 750A                <1>     jnz .invalidAttrib
  1383 00003CD7 A808                <1>     test al, dirVolumeID
  1384 00003CD9 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1385 00003CDB 0C20                <1>     or al, dirArchive   ;Set archive bit
  1386 00003CDD A810                <1>     test al, dirDirectory   
  1387 00003CDF 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1388                              <1> .invalidAttrib:
  1389 00003CE1 B805000000          <1>     mov eax, errAccDen
  1390 00003CE6 F9                  <1>     stc
  1391                              <1>     return
    13                              <2> %%_ret:
    14 00003CE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .validAttr:
  1393 00003CE8 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1394 00003CEF 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
  1395 00003CF6 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1396 00003CFD 750A                <1>     jne .diskFile
  1397 00003CFF 50                  <1>     push rax    ;Save the new attributes
  1398 00003D00 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1399 00003D05 CD4F                <1>     int 4Fh
  1400 00003D07 5B                  <1>     pop rbx
  1401                              <1>     return
    13                              <2> %%_ret:
    14 00003D08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1402                              <1> .diskFile:
  1403 00003D09 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1404 00003D0F 740A                <1>     jz .hardFile
  1405 00003D11 50                  <1>     push rax    ;Save the new attributes
  1406 00003D12 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1407 00003D17 CD4F                <1>     int 4Fh
  1408 00003D19 5B                  <1>     pop rbx
  1409                              <1>     return
    13                              <2> %%_ret:
    14 00003D1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1410                              <1> .hardFile:
  1411 00003D1B 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1412 00003D21 C605(02070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1413 00003D28 C605(03070000)E5    <1>     mov byte [delChar], 0E5h
  1414 00003D2F E8CE2F0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1415 00003D34 57                  <1>     push rdi
  1416 00003D35 50                  <1>     push rax    ;Save the file attributes on stack
  1417 00003D36 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1418 00003D3B E81F000000          <1>     call buildSFTEntry
  1419 00003D40 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1420 00003D41 5F                  <1>     pop rdi
  1421 00003D42 7215                <1>     jc .errorExit
  1422 00003D44 B802000000          <1>     mov eax, 2
  1423 00003D49 FF15(2F010000)      <1>     call qword [updateDirShare]
  1424 00003D4F E8B82F0000          <1>     call dosCrit1Exit
  1425 00003D54 E90DFFFFFF          <1>     jmp openDriverMux
  1426                              <1> .errorExit:
  1427 00003D59 E8AE2F0000          <1>     call dosCrit1Exit
  1428                              <1>     return
    13                              <2> %%_ret:
    14 00003D5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> buildSFTEntry:
  1430                              <1> ;Called in a critical section.
  1431                              <1> ;Input: al = Open mode
  1432                              <1> ;       STACK: File attributes if creating a file
  1433                              <1> ;       [currentSFT] = SFT we are building
  1434                              <1> ;       [workingCDS] = CDS of drive to access
  1435                              <1> ;       [workingDPB] = DPB of drive to access
  1436                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1437                              <1> ;
  1438                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1439                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1440                              <1> ;        If CF=CY: - Return fail
  1441                              <1> ;
  1442                              <1> ;
  1443                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1444                              <1> ;   If not, create disk entry.
  1445                              <1> ;Check if the device was a char device by checking curDirCopy.
  1446                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1447                              <1> 
  1448                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1449                              <1> ; to start of file fields of the SFT
  1450 00003D5F 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1451 00003D60 4889E5              <1>     mov rbp, rsp
  1452 00003D63 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  1453                              <1> ;Set the open mode
  1454 00003D6A 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1455                              <1> ;Get current time
  1456 00003D6E E895EBFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1457 00003D73 E87BECFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1458 00003D78 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1459                              <1> ;Set current Owner
  1460 00003D7B 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1461 00003D82 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1462                              <1> ;Set file pointer to first byte
  1463 00003D86 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1464                              <1> ;Common fields set
  1465 00003D8D F605(02070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1466 00003D94 0F849D010000        <1>     jz .openProc
  1467                              <1>     ;Here if Creating a file.
  1468 00003D9A F605(FF060000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1469 00003DA1 0F84D9000000        <1>     jz .createFile
  1470 00003DA7 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1471 00003DAE 0F858C010000        <1>     jnz .charDev
  1472                              <1>     ;Here disk file exists, so recreating the file.
  1473                              <1>     ;If recreating, check we are not overwriting a Dir
  1474 00003DB4 F605(64060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1475 00003DBB 0F85CD010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1476 00003DC1 55                  <1>     push rbp
  1477 00003DC2 FF35(2D070000)      <1>     push qword [currentSFT]
  1478 00003DC8 E8B7FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1479 00003DCD 8F05(2D070000)      <1>     pop qword [currentSFT]
  1480 00003DD3 5D                  <1>     pop rbp
  1481 00003DD4 0F82B4010000        <1>     jc .bad
  1482                              <1>     ;al has the char for the filename
  1483                              <1>     ;Sets vars for the sector/offset into the sector
  1484 00003DDA 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1485 00003DE1 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1486 00003DE3 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1487                              <1>     ;al has file attributes.
  1488 00003DE7 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1489 00003DE9 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1490 00003DEC 31C0                <1>     xor eax, eax
  1491                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1492 00003DEE 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1493 00003DF2 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1494 00003DF6 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1495 00003DF9 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1496 00003DFC 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1497 00003DFF 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1498 00003E02 57                  <1>     push rdi    ;Save SFT pointer
  1499 00003E03 488D3D(59060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1500 00003E0A B920000000          <1>     mov ecx, fatDirEntry_size
  1501 00003E0F F3A4                <1>     rep movsb
  1502 00003E11 E864C9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1503 00003E16 5F                  <1>     pop rdi
  1504                              <1> .createCommon:  ;rdi must point to the current SFT 
  1505                              <1>     ;Now populate the remaining SFT fields 
  1506 00003E17 488D35(59060000)    <1>     lea rsi, curDirCopy
  1507 00003E1E 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1508 00003E21 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1509 00003E24 488B05(41070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1510 00003E2B 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1511 00003E2F 0FB705(49070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1512 00003E36 C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1513 00003E39 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1514 00003E3C 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1515 00003E3F 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1516 00003E42 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1517 00003E46 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1518 00003E4A C1E210              <1>     shl edx, 10h
  1519 00003E4D 09D0                <1>     or eax, edx
  1520 00003E4F 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1521                              <1> 
  1522 00003E52 31C0                <1>     xor eax, eax
  1523                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1524 00003E54 8A05(04070000)      <1>     mov al, byte [workingDrv]
  1525 00003E5A 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1526 00003E5C 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1527 00003E60 488B05(05070000)    <1>     mov rax, qword [workingDPB]
  1528 00003E67 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1529                              <1>     ;Last thing, copy the filename over
  1530                              <1>     ;Now save the name
  1531                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1532 00003E6B 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1533 00003E6F 488D35(59060000)    <1>     lea rsi, curDirCopy
  1534 00003E76 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1535 00003E78 66A5                <1>     movsw
  1536 00003E7A A4                  <1>     movsb
  1537                              <1>     ;SFT filled
  1538 00003E7B E905010000          <1>     jmp .exit
  1539                              <1> .createFile:
  1540                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1541                              <1>     ;rsi points to current sda entry
  1542 00003E80 488D3D(59060000)    <1>     lea rdi, curDirCopy
  1543                              <1>     ;Clear out the dir entry
  1544 00003E87 57                  <1>     push rdi
  1545 00003E88 B904000000          <1>     mov ecx, 4
  1546 00003E8D 31C0                <1>     xor eax, eax
  1547 00003E8F F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1548 00003E92 5F                  <1>     pop rdi
  1549                              <1>     ;Copy the FCB name over    
  1550 00003E93 56                  <1>     push rsi
  1551 00003E94 57                  <1>     push rdi
  1552 00003E95 B90B000000          <1>     mov ecx, 11
  1553 00003E9A 488D35(D4060000)    <1>     lea rsi, fcbName
  1554 00003EA1 F3A4                <1>     rep movsb   ;Move over the FCB name
  1555 00003EA3 5F                  <1>     pop rdi
  1556 00003EA4 5E                  <1>     pop rsi
  1557                              <1> 
  1558 00003EA5 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1559                              <1>     ;al has file attributes.
  1560 00003EA9 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1561 00003EAB 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1562 00003EAE 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1563 00003EB1 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1564 00003EB4 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1565 00003EB7 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1566                              <1> .searchForDirSpace:
  1567 00003EBD 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1568 00003EC3 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1569 00003EC5 668905(83070000)    <1>     mov word [dirSect], ax
  1570 00003ECC 8905(85070000)      <1>     mov dword [dirEntry], eax
  1571 00003ED2 57                  <1>     push rdi
  1572 00003ED3 E80DDEFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1573 00003ED8 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1574 00003ED9 7328                <1>     jnc .dirEntryFnd
  1575 00003EDB 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1575 00003EE3 0000                <1>
  1576 00003EE5 0F84A3000000        <1>     je .bad ;Set CF and exit
  1577 00003EEB E83FDFFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1578 00003EF0 0F828F000000        <1>     jc .exit
  1579 00003EF6 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1580 00003EFB 0F848D000000        <1>     je .bad
  1581                              <1>     ;Else eax = Newly allocated cluster
  1582 00003F01 EBBA                <1>     jmp short .searchForDirSpace
  1583                              <1> .dirEntryFnd:
  1584 00003F03 4887FE              <1>     xchg rdi, rsi
  1585 00003F06 B904000000          <1>     mov ecx, 4
  1586 00003F0B F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1587 00003F0E E867C8FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1588 00003F13 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1589 00003F1A E9F8FEFFFF          <1>     jmp .createCommon
  1590                              <1> .open:
  1591                              <1> ;curdircopy has a copy of the disk file directory
  1592                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1593 00003F1F 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1594 00003F26 488B2D(05070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1595                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1596 00003F2D E8C6DDFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1597 00003F32 E9E0FEFFFF          <1>     jmp .createCommon
  1598                              <1> .openProc:
  1599                              <1>     ;Here if Opening a file.
  1600 00003F37 F605(64060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1601 00003F3E 74DF                <1>     jz .open
  1602                              <1> .charDev:
  1603 00003F40 488B05(59060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1604 00003F47 E8132C0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1605 00003F4C 7307                <1>     jnc .notBadCharDevName
  1606 00003F4E B805000000          <1>     mov eax, errAccDen
  1607 00003F53 EB30                <1>     jmp short .exit ;CF already set
  1608                              <1> .notBadCharDevName:
  1609 00003F55 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  1610 00003F5C 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1611 00003F60 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1612 00003F64 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1613 00003F67 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1614 00003F6A 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1615 00003F6E C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1616 00003F75 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1617 00003F79 B820202020          <1>     mov eax, "    "
  1618 00003F7E 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1619 00003F82 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1620                              <1> .exit:
  1621 00003F85 E8080A0000          <1>     call writeThroughBuffersForHandle
  1622 00003F8A 7207                <1>     jc .bad2
  1623 00003F8C 5D                  <1>     pop rbp
  1624                              <1>     return
    13                              <2> %%_ret:
    14 00003F8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1625                              <1> .bad:   ;Set Access Denied
  1626 00003F8E B805000000          <1>     mov eax, errAccDen
  1627                              <1> .bad2:  ;Error propagating error code
  1628 00003F93 E82A0A0000          <1>     call cancelWriteThroughBuffersForHandle
  1629 00003F98 F9                  <1>     stc
  1630 00003F99 5D                  <1>     pop rbp
  1631                              <1>     return
    13                              <2> %%_ret:
    14 00003F9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1632                              <1> 
  1633                              <1> closeMain: ;Int 4Fh AX=1201h
  1634                              <1> ;Gets the directory entry for a file
  1635                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1636                              <1> ;If CF=CY on return: Error, return error with al = error code
  1637                              <1> ;Preserve all regs except eax and rdi
  1638                              <1> ; If CF=NC on return: eax = Unknown
  1639                              <1> ;                     rdi = current SFT ptr
  1640 00003F9B 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1641 00003FA2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1642 00003FA8 7408                <1>     jz .physical
  1643                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1644 00003FAA B806110000          <1>     mov eax, 1106h  ;Make request
  1645 00003FAF CD4F                <1>     int 4Fh ;Beep!
  1646                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00003FB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1647                              <1> .physical:  
  1648                              <1> ; We make a request to the dev dir to close the device
  1649                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1650 00003FB2 E84B2D0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1651 00003FB7 53                  <1>     push rbx
  1652 00003FB8 56                  <1>     push rsi
  1653 00003FB9 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1654 00003FBD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1655 00003FC3 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1656                              <1>     ;rsi has DPB pointer here
  1657                              <1>     ;rdi has the SFT pointer
  1658 00003FC5 55                  <1>     push rbp
  1659 00003FC6 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1660 00003FC9 E842280000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1661 00003FCE E89FDDFFFF          <1>     call updateDirectoryEntryForFile
  1662 00003FD3 5D                  <1>     pop rbp
  1663                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1664 00003FD4 7234                <1>     jc .exit
  1665 00003FD6 E883C9FFFF          <1>     call flushFile
  1666 00003FDB 722D                <1>     jc .exit    ;If something went wrong, exit
  1667 00003FDD 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1668 00003FE1 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1669                              <1> .charClose:
  1670                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1671                              <1>     ;We now decrement handle count in SFT structure
  1672 00003FE5 E899090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1673 00003FEA 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1674 00003FED 7503                <1>     jnz .driverClose
  1675 00003FEF 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1676                              <1> .driverClose:
  1677 00003FF2 50                  <1>     push rax
  1678 00003FF3 51                  <1>     push rcx
  1679 00003FF4 E887340000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1680 00003FF9 59                  <1>     pop rcx
  1681 00003FFA 58                  <1>     pop rax
  1682 00003FFB 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1683                              <1>     ;and if the device is a disk device, cl will have the unit number
  1684 00003FFC 9C                  <1>     pushfq
  1685 00003FFD E8FDDFFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1686 00004002 9D                  <1>     popfq
  1687 00004003 E88A090000          <1>     call writeThroughBuffersForHandle
  1688 00004008 7306                <1>     jnc short .exitOk
  1689                              <1> .exit:
  1690 0000400A E8B3090000          <1>     call cancelWriteThroughBuffersForHandle
  1691 0000400F F9                  <1>     stc
  1692                              <1> .exitOk:
  1693 00004010 5E                  <1>     pop rsi
  1694 00004011 5B                  <1>     pop rbx
  1695 00004012 E8F52C0000          <1>     call dosCrit1Exit
  1696                              <1>     return
    13                              <2> %%_ret:
    14 00004017 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> readBytes:
  1699                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1700                              <1> ;Input: ecx = Number of bytes to read
  1701                              <1> ;Output: ecx = Number of bytes read
  1702                              <1> ;Number of bytes read 
  1703                              <1> ;If CF=CY, return with error code in ax
  1704 00004018 E85F070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1705 0000401D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1706 00004021 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1707 00004023 3C01                <1>     cmp al, WriteAccess
  1708 00004025 7509                <1>     jne .readable
  1709 00004027 B805000000          <1>     mov eax, errAccDen
  1710 0000402C 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1711 0000402E F9                  <1>     stc
  1712                              <1>     return
    13                              <2> %%_ret:
    14 0000402F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1713                              <1> .readable:
  1714 00004030 E889070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1715 00004035 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1716 00004038 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1717 0000403E 740A                <1>     jz .notRedir
  1718 00004040 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1719 00004045 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1720                              <1>     return 
    13                              <2> %%_ret:
    14 00004047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1721                              <1> .exitOk:
  1722 00004048 F8                  <1>     clc
  1723                              <1>     return 
    13                              <2> %%_ret:
    14 00004049 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1724                              <1> .notRedir:
  1725 0000404A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1726 00004050 7510                <1>     jnz readCharDev
  1727 00004052 E8AB2C0000          <1>     call dosCrit1Enter
  1728 00004057 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1729 0000405C E8AB2C0000          <1>     call dosCrit1Exit
  1730                              <1>     return 
    13                              <2> %%_ret:
    14 00004061 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1731                              <1> readCharDev:
  1732                              <1> ;rdi points to sft for char dev to read
  1733                              <1> ;ecx has the number of bytes to transfer
  1734                              <1> ;Vars have been set up and DTA has the transfer address
  1735                              <1> ;Returns in ecx, the actual bytes transferred
  1736                              <1> ;If CF=CY, return with error code in ax
  1737 00004062 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1738 00004069 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1739 0000406D 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1740 00004074 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1741 00004077 0F84CE020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1742 0000407D F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1743 00004080 7407                <1>     jz .notNul
  1744                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1745                              <1>     ;NUL never transfers bytes 
  1746 00004082 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1747 00004084 E9C2020000          <1>     jmp readExitOk    ;Goto exit
  1748                              <1> .notNul:
  1749 00004089 F6C320              <1>     test bl, charDevBinary
  1750 0000408C 0F857F000000        <1>     jnz .binary
  1751                              <1>     ;Here if the device is in ASCII mode
  1752 00004092 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1753 00004095 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1754                              <1> .consoleInput:
  1755                              <1>     ;Console input here
  1756 0000409B E851E4FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1757                              <1>     ;Get current offset into buffer (if one exists)
  1758 000040A0 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1759 000040A7 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1760 000040AA 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1761 000040AC 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1762 000040B3 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1763                              <1>     ;Else, reset the buffer
  1764 000040B5 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1764 000040BD FF                  <1>
  1765                              <1> .oldBuf:
  1766                              <1> ;Preserve the dta and number of chars to tfr
  1767 000040BE 51                  <1>     push rcx
  1768 000040BF 57                  <1>     push rdi
  1769 000040C0 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1770 000040C7 E845E4FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1771 000040CC 5F                  <1>     pop rdi
  1772 000040CD 59                  <1>     pop rcx
  1773 000040CE 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1774 000040D5 803E1A              <1>     cmp byte [rsi], EOF
  1775 000040D8 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1776 000040DA C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1777 000040DD B00A                <1>     mov al, LF
  1778 000040DF E8A8DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1779 000040E4 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1780 000040E6 EB18                <1>     jmp short .exit
  1781                              <1> .tfrBuf:
  1782 000040E8 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1783 000040E9 AA                  <1>     stosb
  1784 000040EA 3C0D                <1>     cmp al, CR 
  1785 000040EC 7503                <1>     jne .noCRLF
  1786 000040EE C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1787                              <1> .noCRLF:
  1788 000040F1 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1789 000040F3 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1790 000040F5 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1791                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1792 000040F7 E890DFFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1793 000040FC 31F6                <1>     xor esi, esi
  1794 000040FE 0C01                <1>     or al, 1    ;Set ZF = NZ
  1795                              <1> .exit:
  1796 00004100 E804E4FFFF          <1>     call vConRetDriver
  1797 00004105 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1798 0000410C E93A020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1799                              <1> 
  1800                              <1> .binary:
  1801                              <1>     ;Setup registers for transfer
  1802 00004111 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1803 00004114 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1804                              <1>     ;ecx has the number of bytes to transfer directly
  1805 00004117 E812260000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1806 0000411C 488B35(05070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1807 00004123 E846230000          <1>     call goDriver   ;Make the request
  1808 00004128 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1809 0000412B 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1810 00004132 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1811 00004138 7422                <1>     jz .binNoError
  1812                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1813 0000413A B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1814 0000413C E8C51D0000          <1>     call charDevErr   ;ah = has part of the error 
  1815                              <1>     ;al now has the response
  1816 00004141 3C00                <1>     cmp al, critIgnore
  1817 00004143 7417                <1>     je .binNoError ;Simply proceed as normal
  1818 00004145 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1819 00004148 3C03                <1>     cmp al, critFail
  1820 0000414A 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1821                              <1>     ;Fallthrough here for fail!
  1822                              <1> .failExit:
  1823 0000414C 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  1824 00004153 31C9                <1>     xor ecx, ecx
  1825 00004155 B805000000          <1>     mov eax, errAccDen
  1826 0000415A F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1827                              <1>     return
    13                              <2> %%_ret:
    14 0000415B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1828                              <1> .binNoError:
  1829                              <1>     ;Get number of bytes transferred into 
  1830 0000415C 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1831 00004162 F7D8                <1>     neg eax ;make it into -eax
  1832 00004164 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1833                              <1>     ;ecx now has bytes left to transfer
  1834 00004168 50                  <1>     push rax    ;Save value on stack
  1835 00004169 31C0                <1>     xor eax, eax ;Set ZF
  1836 0000416B FFC0                <1>     inc eax ;Clear ZF
  1837 0000416D 58                  <1>     pop rax ;Get back the original value
  1838 0000416E E9D8010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1839                              <1> .generalASCII:
  1840                              <1>     ;ecx has bytes to transfer here
  1841                              <1>     ;Setup registers for transfer
  1842 00004173 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1843 00004176 51                  <1>     push rcx
  1844 00004177 B901000000          <1>     mov ecx, 1  ;Get one char
  1845 0000417C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1846 0000417F E8AA250000          <1>     call primReqReadSetup   ;Setup request
  1847 00004184 59                  <1>     pop rcx
  1848                              <1>     ;rbx now has request header ptr
  1849 00004185 488B35(05070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1850                              <1> .asciiReadChar:
  1851 0000418C 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1852 0000418F E8E1E2FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1853 00004194 E8D5220000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1854 00004199 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1855 000041A0 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1856 000041A6 741E                <1>     jz .asciiNoError
  1857 000041A8 E8591D0000          <1>     call charDevErr    ;Call Int 44h
  1858                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1859 000041AD C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1859 000041B5 0000                <1>
  1860 000041B7 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1861 000041BA 3C03                <1>     cmp al, critFail
  1862 000041BC 748E                <1>     je .failExit
  1863 000041BE 3C01                <1>     cmp al, critRetry
  1864 000041C0 74CA                <1>     je .asciiReadChar
  1865                              <1>     ;Ignore here, pretend NULL CHAR was read
  1866 000041C2 30C0                <1>     xor al, al
  1867 000041C4 EB15                <1>     jmp short .asciiIgnoreEP
  1868                              <1> .asciiNoError:
  1869                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1870                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1871                              <1> ;Preserve RBX, RSI
  1872                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1873 000041C6 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1874 000041C9 813D(D6040000)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1874 000041D1 0000                <1>
  1875 000041D3 0F8572010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1876 000041D9 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1877                              <1> .asciiIgnoreEP:
  1878 000041DB 48FF05(CE040000)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1879 000041E2 48FFC7              <1>     inc rdi ;Also advance register pointer
  1880 000041E5 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1881 000041E7 0F845E010000        <1>     je readExitOk
  1882 000041ED 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1883 000041EF E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1884                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1885 000041F1 FEC0                <1>     inc al  ;make ZF=NZ
  1886 000041F3 E953010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1887                              <1> 
  1888                              <1> readDiskFile:
  1889                              <1> ;rdi = Current SFT
  1890                              <1> ;rbp = WorkingDPB
  1891                              <1> ;ecx = Bytes to transfer
  1892 000041F8 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1893 000041FF C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1894                              <1>     ;We have the following vars setup:
  1895                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1896                              <1>     ;currClustF
  1897                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1898                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1899 00004206 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1900 00004209 85D2                <1>     test edx, edx
  1901 0000420B 0F843A010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1902 00004211 8B15(4B070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1903 00004217 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1904 0000421A 8905(4F070000)      <1>     mov dword [currClustD], eax
  1905 00004220 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1906 00004222 0F8423010000        <1>     jz readExitOk
  1907 00004228 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1908 0000422D 0F8418010000        <1>     jz readExitOk   
  1909 00004233 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1910                              <1>     ;Check if we have opened a volume label (should never happen)
  1911 00004239 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1912 0000423F 7407                <1>     jz .shareCheck
  1913 00004241 B805000000          <1>     mov eax, errAccDen
  1914 00004246 F9                  <1>     stc
  1915                              <1>     return
    13                              <2> %%_ret:
    14 00004247 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1916                              <1> .shareCheck:
  1917                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1918 00004248 E83A320000          <1>     call retryShareIODelay
  1919 0000424D 7308                <1>     jnc .shareOk
  1920 0000424F E834330000          <1>     call shareCheckReadLockViolation
  1921 00004254 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1922                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004256 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1923                              <1> .shareOk:
  1924 00004257 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1925 00004259 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1926 0000425B 7426                <1>     jz .skipWalk
  1927                              <1> .goToCurrentCluster:
  1928 0000425D E8C0C9FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1929 00004262 0F82D4000000        <1>     jc .badExit   ;This can only return Fail
  1930 00004268 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1931 0000426D 0F84D8000000        <1>     je readExitOk ;Exit with no bytes transferred
  1932 00004273 8905(4F070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1933 00004279 FFCA                <1>     dec edx ;Decrement counter
  1934 0000427B 75E0                <1>     jnz .goToCurrentCluster
  1935                              <1> ;Now we fall out with ebx = Current cluster
  1936 0000427D 8B05(4F070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1937                              <1>     ;mov eax, ebx
  1938                              <1> .skipWalk:
  1939 00004283 E898C7FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1940                              <1>     ;Now we add the offset to this
  1941 00004288 0FB61D(57070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1942 0000428F 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1943 00004292 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1944                              <1> ;Main
  1945                              <1> .mainRead:
  1946 00004299 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  1947 000042A0 7407                <1>     jz .mainReadNoBreak
  1948 000042A2 50                  <1>     push rax
  1949 000042A3 E8CDE1FFFF          <1>     call checkBreak
  1950 000042A8 58                  <1>     pop rax
  1951                              <1> .mainReadNoBreak:
  1952 000042A9 E88CC6FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  1953 000042AE 0F8288000000        <1>     jc .badExit
  1954 000042B4 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1955 000042B8 0FB71D(60070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1956 000042BF 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1957                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1958                              <1>     ; 1) Sector size, 2) Bytes left in File, 
  1959                              <1>     ; 3) Bytes left to read from Request, 4) Bytes left in sector
  1960                              <1> 
  1961 000042C2 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1962 000042C5 2B0D(62070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  1963 000042CB 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  1964 000042D1 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1965 000042D3 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1966 000042D6 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1967 000042DA 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1968 000042DC 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1969                              <1>     
  1970 000042DF 57                  <1>     push rdi
  1971 000042E0 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  1972 000042E7 51                  <1>     push rcx
  1973 000042E8 F3A4                <1>     rep movsb
  1974 000042EA 59                  <1>     pop rcx
  1975 000042EB 010D(62070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1976 000042F1 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1977 000042F7 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1978 000042FE 8B05(62070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1979 00004304 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1980 00004308 31D2                <1>     xor edx, edx    ;Zero rdx
  1981 0000430A F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1982 0000430C 668915(60070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1983 00004313 5F                  <1>     pop rdi
  1984 00004314 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1985 0000431A 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1986 0000431C 742D                <1>     jz readExitOk ;Exit if so!
  1987 0000431E E860C8FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1988 00004323 7217                <1>     jc .badExit
  1989                              <1>     ;If ZF=ZE then currClustF has last cluster
  1990 00004325 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1991                              <1>     ;Else repeat
  1992                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1993 00004327 66C705(60070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1993 0000432F 00                  <1>
  1994 00004330 488B05(58070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1995 00004337 E95DFFFFFF          <1>     jmp .mainRead
  1996                              <1> .badExit:
  1997                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1998                              <1>     ; we need to update the SFT before returning
  1999 0000433C 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2000 00004342 30C0                <1>     xor al, al  ;Set ZF flag
  2001 00004344 E802000000          <1>     call readExitOk   ;We call this
  2002 00004349 F9                  <1>     stc ;All calls which end up here return Fail!
  2003 0000434A C3                  <1>     ret
  2004                              <1> 
  2005                              <1> readExitOk:
  2006                              <1> ;Input: ecx = Number of bytes left to transfer!
  2007                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  2008 0000434B 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2009                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  2010                              <1>     ;jnz .skipbitClear
  2011                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  2012                              <1>     ;The disk transfer must've flushed by now. 
  2013                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2014                              <1> .skipbitClear:  ;Or skip that entirely
  2015 00004351 E82E040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2016                              <1>     return 
    13                              <2> %%_ret:
    14 00004356 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2017                              <1> 
  2018                              <1> writeBytes:
  2019                              <1> ;Writes the bytes from the user buffer
  2020                              <1> ;Input: ecx = Bytes to xfr
  2021                              <1> ;Returns number of bytes written in ecx
  2022 00004357 E820040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2023 0000435C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2024 00004360 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2025 00004362 3C00                <1>     cmp al, ReadAccess
  2026 00004364 7509                <1>     jne .writeable
  2027                              <1> .noWrite:
  2028 00004366 B805000000          <1>     mov eax, errAccDen
  2029 0000436B 31C9                <1>     xor ecx, ecx
  2030 0000436D F9                  <1>     stc
  2031 0000436E C3                  <1>     ret
  2032                              <1> .writeable:
  2033 0000436F 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2034 00004375 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  2035 00004377 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2036 0000437B 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2037                              <1> .skipAttribCheck:
  2038 0000437D E83C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2039 00004382 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2040 00004388 7408                <1>     jz .notRedir
  2041 0000438A B809110000          <1>     mov eax, 1109h  ;Write to redir
  2042 0000438F CD4F                <1>     int 4Fh
  2043                              <1>     return
    13                              <2> %%_ret:
    14 00004391 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2044                              <1> .notRedir:
  2045 00004392 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2046 00004398 7510                <1>     jnz writeCharDev
  2047 0000439A E863290000          <1>     call dosCrit1Enter
  2048 0000439F E84C010000          <1>     call writeDiskFile
  2049 000043A4 E863290000          <1>     call dosCrit1Exit
  2050                              <1>     return
    13                              <2> %%_ret:
    14 000043A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2051                              <1> writeCharDev:
  2052 000043AA C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2053                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2054 000043B1 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2055 000043B7 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2056                              <1>     ;If ecx = 0, we exit
  2057 000043BB 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2058 000043BD 85C9                <1>     test ecx, ecx
  2059 000043BF 0F849F030000        <1>     jz writeExitChar
  2060 000043C5 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2061 000043CC 4889DF              <1>     mov rdi, rbx
  2062 000043CF 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2063 000043D1 A820                <1>     test al, charDevBinary
  2064 000043D3 744A                <1>     jz .asciiDev
  2065                              <1> ;Write binary transfer here
  2066                              <1> .binaryLp:
  2067 000043D5 31C0                <1>     xor eax, eax
  2068 000043D7 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2069 000043DA E844230000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2070 000043DF 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  2071 000043E6 E87F200000          <1>     call goDriverChar
  2072 000043EB 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2073 000043EE B487                <1>     mov ah, critCharDev | critData | critWrite
  2074 000043F0 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2075 000043F7 F7C700800000        <1>     test edi, drvErrStatus
  2076 000043FD 7415                <1>     jz .binXfrOk
  2077 000043FF E8021B0000          <1>     call charDevErr ;Invoke Int 44h
  2078 00004404 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2079 00004407 3C00                <1>     cmp al, critIgnore
  2080 00004409 7409                <1>     je .binXfrOk
  2081 0000440B 3C01                <1>     cmp al, critRetry
  2082 0000440D 74C6                <1>     je .binaryLp
  2083 0000440F E9D5000000          <1>     jmp .exitFail
  2084                              <1> .binXfrOk:
  2085 00004414 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  2086 0000441A E945030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2087                              <1> .asciiDev:
  2088 0000441F A802                <1>     test al, charDevConOut
  2089 00004421 0F859E000000        <1>     jnz .conDev
  2090 00004427 A804                <1>     test al, charDevNulDev
  2091 00004429 0F858F000000        <1>     jnz .nulDev
  2092                              <1>     ;Here we transfer for a generic character device in ascii mode
  2093 0000442F 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2094 00004431 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2095 00004434 0F842A030000        <1>     je writeExitChar
  2096 0000443A 51                  <1>     push rcx
  2097 0000443B B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2098 00004440 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2099 00004443 E8DB220000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2100 00004448 59                  <1>     pop rcx
  2101 00004449 488B35(2D070000)    <1>     mov rsi, qword [currentSFT]
  2102 00004450 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2103                              <1> .asciiLp:
  2104 00004454 E81CE0FFFF          <1>     call checkBreak
  2105 00004459 E810200000          <1>     call goDriver
  2106 0000445E 57                  <1>     push rdi
  2107 0000445F B487                <1>     mov ah, critCharDev | critData | critWrite
  2108 00004461 0FB73D(C3040000)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  2109 00004468 F7C700800000        <1>     test edi, drvErrStatus
  2110 0000446E 741D                <1>     jz .asciiNoError
  2111 00004470 E8911A0000          <1>     call charDevErr ;Invoke Int 44h
  2112 00004475 5F                  <1>     pop rdi
  2113 00004476 C705(D6040000)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2113 0000447E 0000                <1>
  2114 00004480 3C01                <1>     cmp al, critRetry
  2115 00004482 74D0                <1>     je .asciiLp
  2116 00004484 3C00                <1>     cmp al, critIgnore
  2117 00004486 7412                <1>     je .ignoreEp
  2118 00004488 E95C000000          <1>     jmp .exitFail
  2119                              <1> .asciiNoError:
  2120 0000448D 5F                  <1>     pop rdi
  2121 0000448E 813D(D6040000)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  2121 00004496 0000                <1>
  2122 00004498 741D                <1>     je .bytesXfrdOk
  2123                              <1> .ignoreEp:
  2124 0000449A FFC2                <1>     inc edx ;One more char has been xfrd
  2125 0000449C FF05(CE040000)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  2126 000044A2 48FFC7              <1>     inc rdi ;And our copy... 
  2127 000044A5 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2128 000044A8 740D                <1>     je .bytesXfrdOk
  2129 000044AA 66C705(C3040000)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  2129 000044B2 00                  <1>
  2130 000044B3 FFC9                <1>     dec ecx
  2131 000044B5 759D                <1>     jnz .asciiLp
  2132                              <1> .bytesXfrdOk:
  2133 000044B7 89D0                <1>     mov eax, edx
  2134 000044B9 E9A6020000          <1>     jmp writeExitChar
  2135                              <1> .nulDev:
  2136 000044BE 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2137 000044C0 E99F020000          <1>     jmp writeExitChar
  2138                              <1> .conDev:
  2139 000044C5 E827E0FFFF          <1>     call vConSwapDriver
  2140 000044CA 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2141 000044CD 51                  <1>     push rcx
  2142                              <1> .conDevLp:
  2143 000044CE AC                  <1>     lodsb
  2144 000044CF 3C1A                <1>     cmp al, EOF
  2145 000044D1 7409                <1>     je .conDevExit
  2146 000044D3 E8B4DBFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2147 000044D8 FFC9                <1>     dec ecx
  2148 000044DA 75F2                <1>     jnz .conDevLp
  2149                              <1> .conDevExit:
  2150 000044DC 58                  <1>     pop rax ;Get initial ecx back into eax
  2151 000044DD 29C8                <1>     sub eax, ecx
  2152 000044DF E825E0FFFF          <1>     call vConRetDriver
  2153 000044E4 E97B020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2154                              <1> .exitFail:
  2155 000044E9 B805000000          <1>     mov eax, errAccDen
  2156 000044EE F9                  <1>     stc
  2157                              <1>     return
    13                              <2> %%_ret:
    14 000044EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2158                              <1> writeDiskFile:
  2159                              <1>     ;rdi has SFT ptr
  2160 000044F0 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2161 000044F6 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2162 000044FD C605(FB060000)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  2163 00004504 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2164 0000450A 0F850B020000        <1>     jnz .badExit
  2165 00004510 85C9                <1>     test ecx, ecx
  2166 00004512 7505                <1>     jnz .nonZeroWrite
  2167 00004514 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  2168                              <1> .nonZeroWrite:
  2169                              <1>     ;Now do share check here
  2170 00004519 E8692F0000          <1>     call retryShareIODelay
  2171 0000451E 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2172 00004520 E85A300000          <1>     call shareCheckWriteLockViolation
  2173 00004525 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2174                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004527 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2175                              <1> .proceedWithWrite:
  2176 00004528 31DB                <1>     xor ebx, ebx
  2177 0000452A 891D(6F070000)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2178 00004530 881D(6E070000)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2179 00004536 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2180                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2181 00004539 85C0                <1>     test eax, eax
  2182 0000453B 7520                <1>     jnz .notStart
  2183 0000453D E858C5FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2184 00004542 0F82BA010000        <1>     jc .exitPrepHardErr
  2185 00004548 3DFFFFFFFF          <1>     cmp eax, -1
  2186 0000454D 0F84DA010000        <1>     je writeExit
  2187                              <1>     ;Now eax has the first cluster of chain
  2188 00004553 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2189 00004556 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2190                              <1> .notStart:
  2191                              <1> ;eax has the start cluster of the file
  2192                              <1> ;Now we go to CurntOff
  2193 0000455D 8905(4F070000)      <1>     mov dword [currClustD], eax ;Store in var
  2194 00004563 31DB                <1>     xor ebx, ebx
  2195 00004565 8B15(4B070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2196 0000456B 85D2                <1>     test edx, edx
  2197 0000456D 7458                <1>     jz .skipWalk
  2198                              <1> .goToCurrentCluster:
  2199 0000456F E8AEC6FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2200 00004574 0F8288010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2201 0000457A 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2202 0000457F 7536                <1>     jne .stillInFile
  2203                              <1> .addCluster:
  2204                              <1>     ;Here we extend by one cluster
  2205 00004581 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2206 00004587 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2207 00004589 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2208 0000458E E82DC5FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2209 00004593 0F8269010000        <1>     jc .exitPrepHardErr
  2210 00004599 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2211 0000459B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2212 0000459F 010D(6F070000)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2213 000045A5 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1
  2214 000045AC E871C6FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2215 000045B1 0F824B010000        <1>     jc .exitPrepHardErr
  2216                              <1> .stillInFile:
  2217 000045B7 8905(4F070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2218 000045BD FFCA                <1>     dec edx ;Decrement counter
  2219 000045BF 75AE                <1>     jnz .goToCurrentCluster
  2220                              <1> ;Now we fall out
  2221 000045C1 8B05(4F070000)      <1>     mov eax, dword [currClustD]
  2222                              <1> .skipWalk:
  2223 000045C7 E854C4FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2224                              <1>     ;Now we add the offset to this
  2225 000045CC 0FB61D(57070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2226 000045D3 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2227 000045D6 488905(58070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2228 000045DD 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2229 000045E3 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2230 000045E5 751F                <1>     jnz .mainWrite  
  2231                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2232 000045E7 F605(6E070000)FF    <1>     test byte [fileGrowing], -1
  2233 000045EE 750B                <1>     jnz .extend
  2234                              <1> ;Here we truncate where needed
  2235 000045F0 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2236 000045F6 E8F8C5FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2237                              <1> .extend:
  2238 000045FB 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2239 000045FE 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2240 00004601 E91C010000          <1>     jmp .noByteExit ;Exit ok!
  2241                              <1> .mainWrite:
  2242 00004606 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set, 
  2243 0000460D 7407                <1>     jz .mainWriteNoBreak
  2244 0000460F 50                  <1>     push rax
  2245 00004610 E860DEFFFF          <1>     call checkBreak
  2246 00004615 58                  <1>     pop rax
  2247                              <1> .mainWriteNoBreak:
  2248 00004616 E81FC3FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuff var for sector in rax
  2249 0000461B 0F82FA000000        <1>     jc .badExit
  2250 00004621 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2251 00004625 0FB71D(60070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2252 0000462C 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2253                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2254                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2255                              <1>     ; 3) Number of bytes left free in the sector
  2256 0000462F 31C0                <1>     xor eax, eax
  2257 00004631 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2258 00004635 89D8                <1>     mov eax, ebx
  2259 00004637 662B05(60070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2260 0000463E 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2261                              <1> 
  2262 00004644 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2263 00004646 0F47CB              <1>     cmova ecx, ebx
  2264 00004649 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2265 0000464B 0F47C8              <1>     cmova ecx, eax
  2266                              <1> 
  2267 0000464E 56                  <1>     push rsi
  2268 0000464F 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2269 00004656 51                  <1>     push rcx
  2270 00004657 F3A4                <1>     rep movsb
  2271 00004659 59                  <1>     pop rcx
  2272 0000465A E81BC1FFFF          <1>     call markBufferDirty   ;Preserves all CPU state 
  2273                              <1> 
  2274 0000465F 010D(62070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2275 00004665 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2276 0000466B 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2277                              <1> 
  2278 00004672 488B35(39070000)    <1>     mov rsi, qword [currBuff]    ;Get current disk buffer
  2279 00004679 488D7630            <1>     lea rsi, qword [rsi + bufferHdr.dataarea]   ;Shift the ptr to the first data byte
  2280 0000467D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] 
  2281 00004681 4801DE              <1>     add rsi, rbx    ;Point rsi to the end of the disk buffer
  2282 00004684 4839F7              <1>     cmp rdi, rsi    ;If current pos - end < 0, jump
  2283 00004687 5E                  <1>     pop rsi
  2284 00004688 7207                <1>     jb short .skipWritethrough
  2285 0000468A E8A4C0FFFF          <1>     call writeThroughBuffer ;Write thru this disk buffer now it is full
  2286 0000468F 7271                <1>     jc .exitPrepHardErr
  2287                              <1> .skipWritethrough:
  2288 00004691 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2289 00004697 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2290 0000469D 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2291 0000469F 0F8488000000        <1>     jz writeExit
  2292 000046A5 E8D9C4FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2293 000046AA 7256                <1>     jc .exitPrepHardErr
  2294 000046AC 3DFFFFFFFF          <1>     cmp eax, -1
  2295 000046B1 753A                <1>     jne .noExtend
  2296                              <1>     ;Here we need to extend by a cluster
  2297 000046B3 8B05(4F070000)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2298 000046B9 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2299 000046BB B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2300 000046C0 E8FBC3FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2301 000046C5 723B                <1>     jc .exitPrepHardErr
  2302 000046C7 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2303 000046C9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2304 000046CD 011D(6F070000)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2305 000046D3 C605(6E070000)FF    <1>     mov byte [fileGrowing], -1
  2306 000046DA E8A4C4FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2307 000046DF 7221                <1>     jc .exitPrepHardErr
  2308 000046E1 3DFFFFFFFF          <1>     cmp eax, -1
  2309 000046E6 B805000000          <1>     mov eax, errAccDen
  2310 000046EB 7415                <1>     je .exitPrepHardErr
  2311                              <1> .noExtend:
  2312 000046ED 66C705(60070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2312 000046F5 00                  <1>
  2313 000046F6 488B05(58070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2314 000046FD E904FFFFFF          <1>     jmp .mainWrite
  2315                              <1> .exitPrepHardErr:
  2316 00004702 50                  <1>     push rax    ;Save error code
  2317 00004703 E825000000          <1>     call writeExit
  2318 00004708 58                  <1>     pop rax
  2319                              <1> .badExitHard:    ;AL has error code already
  2320 00004709 E803C0FFFF          <1>     call cancelWriteThroughBuffers
  2321 0000470E B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2322 00004713 FF15(2F010000)      <1>     call qword [updateDirShare]
  2323 00004719 F9                  <1>     stc
  2324                              <1>     return
    13                              <2> %%_ret:
    14 0000471A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2325                              <1> .badExit:
  2326                              <1> ;Might need to do some weird stuff later. Leave for now
  2327 0000471B B805000000          <1>     mov eax, errAccDen
  2328 00004720 EBE7                <1>     jmp short .badExitHard
  2329                              <1> 
  2330                              <1> .noByteExit:
  2331 00004722 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2332 00004727 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2333                              <1> writeExit:
  2334                              <1> ;Advances the bytes on the file pointer
  2335                              <1> ;Return: ecx = Number of bytes transferred
  2336 0000472D 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2337 00004734 E84B000000          <1>     call updateCurrentSFT
  2338 00004739 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2339 0000473B 7404                <1>     jz .noFlush
  2340 0000473D 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2341                              <1> .noFlush:
  2342 00004741 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2343 00004747 750E                <1>     jnz .exit
  2344 00004749 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2345 0000474C 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2346 0000474F 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2347 00004751 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2348 00004754 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2349                              <1> .exit:
  2350 00004757 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2351 0000475C FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2352 00004762 F8                  <1>     clc
  2353                              <1>     return
    13                              <2> %%_ret:
    14 00004763 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2354                              <1> writeExitChar:
  2355                              <1> ;Input: eax = Number of chars transferred
  2356 00004764 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2357 0000476A 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2358 0000476C 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2359 00004772 EBB9                <1>     jmp short writeExit
  2360                              <1> ;-----------------------------------:
  2361                              <1> ;        File Handle routines       :
  2362                              <1> ;-----------------------------------:
  2363                              <1> 
  2364                              <1> setCurrentSFT:
  2365                              <1> ;Set the pointer in rdi as current SFT 
  2366 00004774 48893D(2D070000)    <1>     mov qword [currentSFT], rdi
  2367                              <1>     return 
    13                              <2> %%_ret:
    14 0000477B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2368                              <1> getCurrentSFT:
  2369                              <1> ;Get the current SFT pointer in rdi
  2370 0000477C 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2371                              <1>     return 
    13                              <2> %%_ret:
    14 00004783 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> updateCurrentSFT:
  2373                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2374                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2375 00004784 57                  <1>     push rdi
  2376 00004785 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2377 0000478C E8BF010000          <1>     call getBytesTransferred
  2378 00004791 67E327              <1>     jecxz .exit ;Skip this if ecx = 0
  2379                              <1>     ;ecx has bytes transferred
  2380 00004794 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2381 0000479A 751F                <1>     jnz .exit
  2382 0000479C 50                  <1>     push rax
  2383 0000479D 8B05(4F070000)      <1>     mov eax, dword [currClustD]
  2384 000047A3 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2385 000047A6 8B05(4B070000)      <1>     mov eax, dword [currClustF]
  2386 000047AC 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2387 000047AF 58                  <1>     pop rax
  2388 000047B0 51                  <1>     push rcx
  2389 000047B1 8B0D(62070000)      <1>     mov ecx, dword [currByteF]
  2390 000047B7 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2391 000047BA 59                  <1>     pop rcx
  2392                              <1> .exit:
  2393 000047BB 5F                  <1>     pop rdi
  2394 000047BC F8                  <1>     clc
  2395                              <1>     return 
    13                              <2> %%_ret:
    14 000047BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2396                              <1> 
  2397                              <1> setupVarsForTransfer:
  2398                              <1> ;Computes the actual bytes to be transferred and 
  2399                              <1> ; sets up internal variables for the transfer. 
  2400                              <1> ;Works for both reading and writing
  2401                              <1> ;Input: ecx = User desired Bytes to transfer
  2402                              <1> ;       rdi = SFT pointer for the file
  2403                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2404                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2405                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2406                              <1> ;
  2407                              <1> ;Note: Does not account for a FULL disk. When writing,
  2408                              <1> ; if the disk will get full as a result of the write,
  2409                              <1> ; stop at the last byte before the transfer. If the 
  2410                              <1> ; file pointer is past the last free byte, write 0
  2411 000047BE 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2412 000047C2 488935(05070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2413 000047C9 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2414 000047CC 8905(62070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2415 000047D2 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2416 000047D8 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2417 000047DE 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2418 000047E4 7402                <1>     jz setupVarsForDiskTransfer
  2419 000047E6 F8                  <1>     clc
  2420                              <1>     return
    13                              <2> %%_ret:
    14 000047E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2421                              <1> setupVarsForDiskTransfer:
  2422                              <1> ;Extension of the above, but for Disk files only
  2423                              <1> ;Input: ecx = User desired Bytes to transfer
  2424                              <1> ;       rdi = SFT pointer for the file
  2425                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2426                              <1> ;        CF=CY: Error exit
  2427 000047E8 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2428 000047EB 8905(62070000)      <1>     mov dword [currByteF], eax
  2429 000047F1 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2430                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2431 000047F5 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2432 000047FC 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2433 000047FF 881D(04070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2434 00004805 8B05(62070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2435 0000480B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2436 0000480F 31D2                <1>     xor edx, edx    ;Zero rdx
  2437 00004811 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2438                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2439                              <1>     ;edx has the offset into that sector
  2440 00004813 8905(53070000)      <1>     mov dword [currSectF], eax
  2441 00004819 668915(60070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2442 00004820 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2443 00004822 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2444 00004825 8805(57070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2445 0000482B 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2446 0000482D 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2447 00004830 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2448 00004832 8915(4B070000)      <1>     mov dword [currClustF], edx ;Save in var
  2449 00004838 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2450                              <1> .exit:
  2451 0000483A F8                  <1>     clc
  2452                              <1>     return 
    13                              <2> %%_ret:
    14 0000483B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2453                              <1> findFreeSFT:
  2454                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2455                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2456                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2457                              <1> ;        CF=CY => eax = errNhl, error exit
  2458 0000483C 31DB                <1>     xor ebx, ebx
  2459                              <1> .mainLp:
  2460 0000483E 53                  <1>     push rbx    ;Save the sft ndx
  2461 0000483F E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2462 00004844 5B                  <1>     pop rbx
  2463 00004845 7307                <1>     jnc .sftExists
  2464 00004847 B804000000          <1>     mov eax, errNhl
  2465 0000484C F9                  <1>     stc
  2466                              <1>     return
    13                              <2> %%_ret:
    14 0000484D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2467                              <1> .sftExists:
  2468 0000484E 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2469 00004853 7427                <1>     je .sftFound
  2470 00004855 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2471 0000485A 751C                <1>     jne .gotoNextNdx
  2472                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2473 0000485C 53                  <1>     push rbx
  2474 0000485D 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2475 00004864 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2476 00004868 750B                <1>     jne .netGoToNextNdx
  2477 0000486A 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2478 00004871 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2479                              <1> .netGoToNextNdx:
  2480 00004875 5B                  <1>     pop rbx
  2481 00004876 7404                <1>     je .sftFound
  2482                              <1> .gotoNextNdx:
  2483 00004878 FFC3                <1>     inc ebx
  2484 0000487A EBC2                <1>     jmp short .mainLp
  2485                              <1> .sftFound:
  2486 0000487C 53                  <1>     push rbx
  2487 0000487D 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2488 00004882 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2489 00004889 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2490 0000488D 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2491 00004894 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2492 00004898 5B                  <1>     pop rbx
  2493 00004899 F8                  <1>     clc
  2494                              <1>     return
    13                              <2> %%_ret:
    14 0000489A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2495                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2496                              <1> ;Return a pointer to the SFT entry in rdi
  2497                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2498                              <1> ;Output: rdi = SFT pointer
  2499 0000489B 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2500                              <1> .walk:
  2501 000048A2 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2502 000048A6 7212                <1>     jb .thisTable
  2503 000048A8 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2504 000048AC 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2505 000048AF 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2506 000048B6 75EA                <1>     jne .walk
  2507 000048B8 F9                  <1>     stc
  2508                              <1>     return
    13                              <2> %%_ret:
    14 000048B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2509                              <1> .thisTable:
  2510 000048BA 50                  <1>     push rax
  2511 000048BB 52                  <1>     push rdx
  2512 000048BC B84F000000          <1>     mov eax, sft_size
  2513 000048C1 F7E3                <1>     mul ebx
  2514 000048C3 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2515 000048C6 5A                  <1>     pop rdx
  2516 000048C7 58                  <1>     pop rax
  2517 000048C8 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2518                              <1>     return
    13                              <2> %%_ret:
    14 000048CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2519                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2520                              <1> ;Return a zero extended value in rdi for the SFT entry
  2521                              <1> ;Input: bx = JFT handle (we zero extend)
  2522                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2523                              <1> ;        CF=CY => al = Error code, Fail
  2524 000048D0 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2525 000048D3 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2526 000048DA 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2527 000048DE 7204                <1>     jb .ok
  2528 000048E0 B006                <1>     mov al, errBadHdl
  2529 000048E2 F9                  <1>     stc
  2530                              <1>     return
    13                              <2> %%_ret:
    14 000048E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2531                              <1> .ok:
  2532 000048E4 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2533 000048EA 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2534 000048EC 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2535 000048EE 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2536 000048F2 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2537 000048F6 EB0B                <1>     jmp short .pspOkExit
  2538                              <1> .pspJftBelow:
  2539 000048F8 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2540                              <1> .pspJftOk:
  2541 000048FE 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2542                              <1> .pspOkExit:
  2543 00004903 F8                  <1>     clc
  2544                              <1>     return
    13                              <2> %%_ret:
    14 00004904 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2545                              <1> findFreeJFTEntry:
  2546                              <1> ;Finds a free JFT entry in the currentPSP.
  2547                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2548                              <1> ;        CF=CY => al=errNhl
  2549 00004905 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2550                              <1> .searchLp:
  2551 00004907 E8C4FFFFFF          <1>     call getJFTPtr
  2552 0000490C 7209                <1>     jc .badExit
  2553 0000490E 803FFF              <1>     cmp byte [rdi], -1
  2554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004911 74F1                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2555 00004913 FFC3                <1>     inc ebx
  2556 00004915 EBF0                <1>     jmp short .searchLp
  2557                              <1> .badExit:
  2558 00004917 B004                <1>     mov al, errNhl
  2559 00004919 F9                  <1>     stc
  2560                              <1>     return
    13                              <2> %%_ret:
    14 0000491A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2561                              <1> getSFTPtr:
  2562                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2563                              <1> ;Input: bx = JFT handle
  2564                              <1> ;Output: CF=NC: rdi = SFT pointer
  2565                              <1> ;        CF=CY: Error, ax=Error code
  2566 0000491B E815000000          <1>     call derefSFTPtr
  2567                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004920 72F8                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2568 00004922 50                  <1>     push rax
  2569 00004923 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2570 0000492A 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2571 0000492E 58                  <1>     pop rax
  2572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000492F 74E9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2573 00004931 B006                <1>     mov al, errBadHdl   ;Error code
  2574 00004933 F9                  <1>     stc         ;Reset CF
  2575                              <1>     return
    13                              <2> %%_ret:
    14 00004934 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2576                              <1> 
  2577                              <1> derefSFTPtr:
  2578                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2579                              <1> ;Input: bx = File handle (gets zero extended)
  2580                              <1> ;Output: CF=NC: rdi = SFT pointer
  2581                              <1> ;        CF=CY: Error, ax=Error code
  2582 00004935 E896FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2583 0000493A 7205                <1>     jb .fail
  2584 0000493C 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2585 0000493F 7504                <1>     jne .ok
  2586                              <1> .fail:
  2587 00004941 B006                <1>     mov al, errBadHdl
  2588 00004943 F9                  <1>     stc
  2589                              <1>     return
    13                              <2> %%_ret:
    14 00004944 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2590                              <1> .ok:
  2591 00004945 53                  <1>     push rbx    ;Preserve the JFT handle
  2592 00004946 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2593 00004949 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2594 0000494E 5B                  <1>     pop rbx 
  2595                              <1>     return
    13                              <2> %%_ret:
    14 0000494F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2596                              <1> 
  2597                              <1> getBytesTransferred:
  2598 00004950 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2599 00004956 F7D9                <1>     neg ecx ;Multiply by -1
  2600 00004958 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2601                              <1>     return ;Return bytes transferred in ecx
    13                              <2> %%_ret:
    14 0000495E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2602                              <1> 
  2603                              <1> getSFTndxInheritable:
  2604                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2605                              <1> ;Input: ebx = SFTndx (word)
  2606                              <1> ;Output: 
  2607                              <1> ;   ZF=ZE => Inheritable
  2608                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2609 0000495F 57                  <1>     push rdi
  2610 00004960 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2611 00004965 7208                <1>     jc .badNdx
  2612 00004967 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2613 0000496D 5F                  <1>     pop rdi
  2614                              <1>     return
    13                              <2> %%_ret:
    14 0000496E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2615                              <1> .badNdx:
  2616 0000496F 31FF                <1>     xor edi, edi
  2617 00004971 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2618 00004973 F8                  <1>     clc
  2619 00004974 5F                  <1>     pop rdi
  2620                              <1>     return
    13                              <2> %%_ret:
    14 00004975 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2621                              <1> 
  2622                              <1> incrementOpenCount:
  2623                              <1> ;Given a SFTndx, this function will increment it's open count
  2624                              <1> ;Output:
  2625                              <1> ;   CF=NC => sftndx ok, count incremented
  2626                              <1> ;   CF=CY => Bad ndx
  2627 00004976 57                  <1>     push rdi
  2628 00004977 E81FFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2629 0000497C 7203                <1>     jc .exit
  2630 0000497E 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2631                              <1> .exit:
  2632 00004981 5F                  <1>     pop rdi
  2633                              <1>     return
    13                              <2> %%_ret:
    14 00004982 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2634                              <1> 
  2635                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2636                              <1> ;Input: rdi = SFT pointer
  2637                              <1> ;Output: ax = Original wNumHandles count
  2638 00004983 9C                  <1>     pushfq
  2639 00004984 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2640 00004987 FFC8                <1>     dec eax     ;Decrement count
  2641 00004989 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2642 0000498B FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2643                              <1> .exit:
  2644 0000498D 9D                  <1>     popfq
  2645 0000498E 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2646                              <1>     return
    13                              <2> %%_ret:
    14 00004991 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2647                              <1> 
  2648                              <1> ;Buffer Wrappers
  2649                              <1> writeThroughBuffersForHandle:
  2650                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2651 00004992 57                  <1>     push rdi
  2652 00004993 55                  <1>     push rbp
  2653 00004994 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2654 0000499B 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2655 000049A1 751C                <1>     jnz .exit
  2656 000049A3 FF35(05070000)      <1>     push qword [workingDPB]
  2657 000049A9 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2658 000049AD 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2659 000049B4 E88FBDFFFF          <1>     call writeThroughBuffers
  2660 000049B9 8F05(05070000)      <1>     pop qword [workingDPB]
  2661                              <1> .exit:
  2662 000049BF 5D                  <1>     pop rbp
  2663 000049C0 5F                  <1>     pop rdi
  2664                              <1>     return
    13                              <2> %%_ret:
    14 000049C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2665                              <1> 
  2666                              <1> cancelWriteThroughBuffersForHandle:
  2667                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2668 000049C2 57                  <1>     push rdi
  2669 000049C3 55                  <1>     push rbp
  2670 000049C4 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
  2671 000049CB 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2672 000049D1 751C                <1>     jnz .exit
  2673 000049D3 FF35(05070000)      <1>     push qword [workingDPB]
  2674 000049D9 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2675 000049DD 48892D(05070000)    <1>     mov qword [workingDPB], rbp
  2676 000049E4 E828BDFFFF          <1>     call cancelWriteThroughBuffers
  2677 000049E9 8F05(05070000)      <1>     pop qword [workingDPB]
  2678                              <1> .exit:
  2679 000049EF 5D                  <1>     pop rbp
  2680 000049F0 5F                  <1>     pop rdi
  2681                              <1>     return
    13                              <2> %%_ret:
    14 000049F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 000049F2 3C0F                <1>     cmp al, 15
    36 000049F4 7747                <1>     ja .invalidFunction
    37 000049F6 84C0                <1>     test al, al
    38 000049F8 745B                <1>     jz .getDevWord
    39 000049FA 3C01                <1>     cmp al, 1
    40 000049FC 746E                <1>     je .setDevWord
    41 000049FE 2C02                <1>     sub al, 2
    42 00004A00 3C03                <1>     cmp al, 3
    43 00004A02 7673                <1>     jbe .ioctlStringFunctions
    44 00004A04 2C04                <1>     sub al, 4
    45 00004A06 3C01                <1>     cmp al, 1
    46 00004A08 0F8681010000        <1>     jbe .ioStatusFunctions
    47 00004A0E 2C02                <1>     sub al, 2
    48 00004A10 3C02                <1>     cmp al, 2
    49 00004A12 0F8644020000        <1>     jbe .devControl
    50 00004A18 2C03                <1>     sub al, 3
    51 00004A1A 0F840F030000        <1>     jz .setSharingCount
    52 00004A20 FEC8                <1>     dec al
    53 00004A22 0F8425030000        <1>     jz .genericCharDevIOCTL
    54 00004A28 FEC8                <1>     dec al
    55 00004A2A 0F844B030000        <1>     jz .genericBlokDevIOCTL
    56 00004A30 FEC8                <1>     dec al
    57 00004A32 0F840A040000        <1>     jz .getDrvLogicalDevice
    58 00004A38 E981040000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00004A3D B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00004A42 E906230000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 00004A47 B805000000          <1>     mov eax, errAccDen
    65 00004A4C EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00004A4E B806000000          <1>     mov eax, errBadHdl
    68 00004A53 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00004A55 E8DBFEFFFF          <1>     call derefSFTPtr
    74 00004A5A 72F2                <1>     jc .badHandle
    75 00004A5C 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00004A60 30C0                <1>     xor al, al
    77 00004A62 E83E1E0000          <1>     call getUserRegs
    78 00004A67 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00004A6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00004A6C E8C4FEFFFF          <1>     call derefSFTPtr
    84 00004A71 72DB                <1>     jc .badHandle 
    85 00004A73 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 00004A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 00004A77 0FB6F3              <1>     movzx esi, bl
    96 00004A7A 488D1D(C0040000)    <1>     lea rbx, primReqHdr
    97 00004A81 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 00004A88 C605(67040000)00    <1>     mov byte [Int44bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00004A8F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00004A92 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00004A95 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 00004A99 51                  <1>     push rcx
   105 00004A9A 52                  <1>     push rdx
   106 00004A9B B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00004AA0 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00004AA5 A801                <1>     test al, 1  ;If set, this is a write operation
   109 00004AA7 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 00004AAA 7507                <1>     jnz .notWrite
   111 00004AAC 800D(67040000)01    <1>     or byte [Int44bitfld], critWrite
   112                              <1> .notWrite:
   113 00004AB3 5A                  <1>     pop rdx
   114 00004AB4 59                  <1>     pop rcx
   115 00004AB5 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 00004AB8 3C01                <1>     cmp al, 1
   117 00004ABA 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00004ABC 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00004ABF E871FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00004AC4 7288                <1>     jc .badHandle 
   122 00004AC6 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00004ACD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00004AD3 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 00004AD9 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00004ADD 800D(67040000)80    <1>     or byte [Int44bitfld], critCharDev
   128 00004AE4 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 00004AE7 31C0                <1>     xor eax, eax
   130 00004AE9 EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00004AEB C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00004AF2 89F0                <1>     mov eax, esi
   136 00004AF4 53                  <1>     push rbx
   137 00004AF5 E8381E0000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 00004AFA 5B                  <1>     pop rbx
   139 00004AFB 730A                <1>     jnc .okDrive
   140 00004AFD B80F000000          <1>     mov eax, errBadDrv
   141 00004B02 E946220000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 00004B07 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   144 00004B0E 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 00004B12 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 00004B15 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 00004B18 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 00004B1C 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 00004B1F 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 00004B23 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 00004B26 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 00004B2C 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158                              <1> .ioctlStringCommonRetry:
   159 00004B32 51                  <1>     push rcx    ;Push xfrctr
   160 00004B33 52                  <1>     push rdx    ;Buffer Ptr
   161 00004B34 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   162 00004B3A E82F190000          <1>     call goDriver
   163 00004B3F 5A                  <1>     pop rdx
   164 00004B40 59                  <1>     pop rcx
   165                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   166 00004B41 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   167 00004B47 0F84F2210000        <1>     jz extGoodExit
   168 00004B4D 800D(67040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   169 00004B54 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   170 00004B57 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]
   171 00004B5D 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi
   172 00004B64 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   173 00004B69 E8AE130000          <1>     call criticalDOSError
   174 00004B6E 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   175 00004B75 3C00                <1>     cmp al, critIgnore
   176 00004B77 0F84C2210000        <1>     je extGoodExit 
   177 00004B7D 3C01                <1>     cmp al, critRetry
   178 00004B7F 74B1                <1>     je .ioctlStringCommonRetry
   179 00004B81 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   180 00004B85 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   181 00004B8A E9BE210000          <1>     jmp extErrExit
   182                              <1> 
   183                              <1> 
   184                              <1> .ioStatusFunctions:
   185                              <1> ;al = 0 -> Get input status 
   186                              <1> ;al = 1 -> Get output status
   187 00004B8F E8A1FDFFFF          <1>     call derefSFTPtr
   188 00004B94 0F82B4FEFFFF        <1>     jc .badHandle 
   189 00004B9A 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   190 00004BA1 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   191 00004BA4 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   192 00004BAB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   193 00004BB1 0F8586FEFFFF        <1>     jnz .invalidFunction
   194 00004BB7 C605(67040000)00    <1>     mov byte [Int44bitfld], 0
   195 00004BBE B906000000          <1>     mov ecx, drvINSTATUS
   196 00004BC3 BA0A000000          <1>     mov edx, drvOUTSTATUS
   197 00004BC8 84C0                <1>     test al, al
   198 00004BCA 0F45CA              <1>     cmovnz ecx, edx
   199 00004BCD 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   200 00004BD0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   201 00004BD6 7416                <1>     jz .ioStatDisk
   202 00004BD8 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   203 00004BDF 800D(67040000)80    <1>     or byte [Int44bitfld], critCharDev
   204 00004BE6 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   205 00004BEA 30C0                <1>     xor al, al
   206 00004BEC EB15                <1>     jmp short .ioStatCommon
   207                              <1> .ioStatDisk:
   208 00004BEE C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   209 00004BF5 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   210 00004BF9 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   211 00004BFC 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   212 00004BFF 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   213                              <1> .ioStatCommon:
   214 00004C03 E866180000          <1>     call goDriver
   215 00004C08 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   216 00004C0E 743E                <1>     jz .ioStatOk
   217                              <1>     ;Error handling here
   218                              <1> 
   219 00004C10 800D(67040000)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   220 00004C17 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   221 00004C1A 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]
   222 00004C20 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi
   223 00004C27 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   224 00004C2C E8EB120000          <1>     call criticalDOSError
   225 00004C31 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   226 00004C38 3C00                <1>     cmp al, critIgnore
   227 00004C3A 7412                <1>     je .ioStatOk 
   228 00004C3C 3C01                <1>     cmp al, critRetry
   229 00004C3E 74C3                <1>     je .ioStatCommon
   230 00004C40 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   231 00004C44 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   232 00004C49 E9FF200000          <1>     jmp extErrExit
   233                              <1> 
   234                              <1> .ioStatOk:
   235 00004C4E 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   236 00004C54 7403                <1>     jz .notBusyExit
   237 00004C56 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   238                              <1>     return 
    13                              <2> %%_ret:
    14 00004C58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> .notBusyExit:
   240                              <1> ;Device ready/NotEOF
   241 00004C59 31C0                <1>     xor eax, eax
   242                              <1>     return
    13                              <2> %%_ret:
    14 00004C5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> .devControl:
   245                              <1> ;al = 0 -> Is media removable?
   246                              <1> ;al = 1 -> Is device local or remote?
   247                              <1> ;al = 2 -> Is handle local or remote?
   248 00004C5C 84C0                <1>     test al, al
   249 00004C5E 746D                <1>     jz .remTest
   250 00004C60 A801                <1>     test al, 1
   251 00004C62 751B                <1>     jnz .deviceTest
   252                              <1> ;Handle Local or Remote
   253 00004C64 E8CCFCFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   254 00004C69 0F82DFFDFFFF        <1>     jc .badHandle 
   255 00004C6F 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   256                              <1> .devControlExit:
   257 00004C73 E82D1C0000          <1>     call getUserRegs
   258 00004C78 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   259 00004C7C 31C0                <1>     xor eax, eax
   260                              <1>     return 
    13                              <2> %%_ret:
    14 00004C7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   261                              <1> .deviceTest:
   262                              <1> ;Drive Local or Remote
   263                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   264                              <1> ;Else, just get the CDS word and swap subst and net
   265 00004C7F 88D8                <1>     mov al, bl
   266 00004C81 E8AC1C0000          <1>     call getCDS
   267 00004C86 730A                <1>     jnc .devTestOkDrive
   268 00004C88 B80F000000          <1>     mov eax, errBadDrv
   269 00004C8D E9BB200000          <1>     jmp extErrExit
   270                              <1> .devTestOkDrive:
   271 00004C92 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   272 00004C99 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   273 00004C9D 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   274 00004CA2 7513                <1>     jnz .remoteDrive
   275 00004CA4 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   276 00004CA8 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   277 00004CAC 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   278 00004CB0 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   279 00004CB5 EBBC                <1>     jmp short .devControlExit
   280                              <1> .remoteDrive:
   281 00004CB7 6689D3              <1>     mov bx, dx
   282 00004CBA 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   283 00004CBF 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   284 00004CC4 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   285 00004CC6 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   286 00004CCB EBA6                <1>     jmp short .devControlExit   ;Store it
   287                              <1> 
   288                              <1> .remTest:
   289                              <1> ;Drive letter in bl
   290 00004CCD 88D8                <1>     mov al, bl
   291 00004CCF E85E1C0000          <1>     call getCDS
   292 00004CD4 730A                <1>     jnc .remTestOkDrive
   293                              <1> .remTestBadDrv:
   294 00004CD6 B80F000000          <1>     mov eax, errBadDrv
   295 00004CDB E96D200000          <1>     jmp extErrExit
   296                              <1> .remTestOkDrive:
   297 00004CE0 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   298 00004CE7 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   299 00004CED 75E7                <1>     jnz .remTestBadDrv
   300 00004CEF 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   301 00004CF6 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   302 00004CFA 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   303 00004CFD 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   304 00004D01 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   305 00004D07 0F8430FDFFFF        <1>     jz .invalidFunction
   306 00004D0D C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   307 00004D10 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   308 00004D14 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   309 00004D1A 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   310 00004D1D E84C170000          <1>     call goDriver
   311 00004D22 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   312 00004D26 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   313 00004D2B C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004D2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> 
   316                              <1> .setSharingCount:
   317                              <1> ;Input: cx = Share Count
   318                              <1> ;       dx = Share Retry
   319 00004D2F 66890D(1F000000)    <1>     mov word [shareCount], cx
   320 00004D36 6685D2              <1>     test dx, dx
   321 00004D39 0F84FEFCFFFF        <1>     jz .invalidFunction
   322 00004D3F 668915(21000000)    <1>     mov word [shareDelay], dx
   323 00004D46 31C0                <1>     xor eax, eax
   324 00004D48 E9F21F0000          <1>     jmp extGoodExit
   325                              <1> 
   326                              <1> .genericCharDevIOCTL:
   327 00004D4D E8C9FBFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   328 00004D52 7311                <1>     jnc .okHandle
   329                              <1> .ioctrlBadHandle:
   330 00004D54 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   331 00004D5B B806000000          <1>     mov eax, errBadHdl
   332 00004D60 E9E81F0000          <1>     jmp extErrExit
   333                              <1> .okHandle:
   334 00004D65 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   335 00004D6B 75E7                <1>     jnz .ioctrlBadHandle
   336 00004D6D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   337 00004D73 74DF                <1>     jz .ioctrlBadHandle
   338 00004D75 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   339 00004D79 EB49                <1>     jmp short .ioctlReqMake
   340                              <1> .genericBlokDevIOCTL:
   341 00004D7B 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   342 00004D7D 51                  <1>     push rcx
   343 00004D7E 52                  <1>     push rdx
   344 00004D7F E8AE1B0000          <1>     call getCDS ;Sets the current CDS
   345 00004D84 5A                  <1>     pop rdx
   346 00004D85 59                  <1>     pop rcx
   347 00004D86 7217                <1>     jc .badDrv
   348                              <1>     ;Check the CDS not net, subst or join
   349 00004D88 488B35(0D070000)    <1>     mov rsi, qword [workingCDS]
   350 00004D8F 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   351 00004D93 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   352 00004D97 7406                <1>     jz .badDrv
   353 00004D99 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   354 00004D9D 7411                <1>     jz .goodDrive
   355                              <1> .badDrv:
   356 00004D9F C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   357 00004DA6 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   358 00004DAB E99D1F0000          <1>     jmp extErrExit
   359                              <1> .goodDrive:
   360                              <1>     ;CDS is good,now get the DPB
   361 00004DB0 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   362 00004DB4 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   363 00004DB8 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   364 00004DBB 8805(C1040000)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   365 00004DC1 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   366                              <1> .ioctlReqMake:
   367                              <1> ;rsi must point to the driver header here
   368 00004DC4 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   369 00004DCA 7511                <1>     jnz .supportsIOCTL
   370                              <1> .badFunction:
   371 00004DCC C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   372 00004DD3 B801000000          <1>     mov eax, errInvFnc
   373 00004DD8 E9701F0000          <1>     jmp extErrExit
   374                              <1> .supportsIOCTL:
   375                              <1>     ;Setup the request header
   376 00004DDD 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   377 00004DE4 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 00004DE7 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 00004DEB 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 00004DF1 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 00004DF5 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 00004DF9 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 00004DFC E8A41A0000          <1>     call getUserRegs
   384 00004E01 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 00004E05 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 00004E09 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 00004E0D 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00004E11 4889FE              <1>     mov rsi, rdi
   389 00004E14 E855160000          <1>     call goDriver
   390 00004E19 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   391 00004E1F 0F841A1F0000        <1>     jz extGoodExit
   392 00004E25 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   393 00004E29 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   394 00004E2F 89F8                <1>     mov eax, edi
   395 00004E31 E85A100000          <1>     call xlatHardError
   396 00004E36 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   397 00004E3D E90B1F0000          <1>     jmp extErrExit
   398                              <1> 
   399                              <1> .getDrvLogicalDevice:
   400 00004E42 88D8                <1>     mov al, bl
   401 00004E44 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   402 00004E4B C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   403 00004E4F C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   404 00004E52 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   405 00004E58 53                  <1>     push rbx
   406 00004E59 E8D41A0000          <1>     call getCDS
   407 00004E5E 8805(04070000)      <1>     mov byte [workingDrv], al
   408 00004E64 5B                  <1>     pop rbx
   409 00004E65 0F826BFEFFFF        <1>     jc .remTestBadDrv
   410 00004E6B 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   411 00004E72 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   412 00004E76 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   413 00004E7A 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   414 00004E7D 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   415                              <1> 
   416 00004E80 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   417 00004E86 0F84B1FBFFFF        <1>     jz .invalidFunction
   418 00004E8C E8DD150000          <1>     call goDriver
   419 00004E91 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   420 00004E97 7421                <1>     jz .getDrvOk
   421                              <1>     ;Can only Fail, Ignore and Abort.
   422 00004E99 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  
   423 00004EA0 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   424 00004EA3 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   425 00004EA7 E870100000          <1>     call criticalDOSError
   426 00004EAC 3C00                <1>     cmp al, critIgnore
   427 00004EAE 740A                <1>     je .getDrvOk
   428 00004EB0 B801000000          <1>     mov eax, errInvFnc
   429 00004EB5 E9931E0000          <1>     jmp extErrExit
   430                              <1> .getDrvOk:
   431 00004EBA 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .setDrvLogicalDevice:
   434 00004EBE 88D8                <1>     mov al, bl
   435 00004EC0 488D1D(C0040000)    <1>     lea rbx, primReqHdr
   436 00004EC7 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   437 00004ECB C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   438 00004ECE 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   439 00004ED4 53                  <1>     push rbx
   440 00004ED5 E8581A0000          <1>     call getCDS
   441 00004EDA 8805(04070000)      <1>     mov byte [workingDrv], al
   442 00004EE0 5B                  <1>     pop rbx
   443 00004EE1 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   444 00004EE7 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
   445 00004EEE 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004EF2 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004EF6 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004EF9 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   449 00004EFC 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   450 00004F02 0F8435FBFFFF        <1>     jz .invalidFunction
   451 00004F08 E861150000          <1>     call goDriver
   452 00004F0D 30C0                <1>     xor al, al
   453 00004F0F 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454                              <1>     retz    ;Return if OK
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004F15 74A6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004F17 0FB605(04070000)    <1>     movzx eax, byte [workingDrv]  
   457 00004F1E 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004F21 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004F25 E8F20F0000          <1>     call criticalDOSError
   460 00004F2A 3C00                <1>     cmp al, critIgnore
   461                              <1>     rete    ;Return if Ignore
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004F2C 748F                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   462 00004F2E B801000000          <1>     mov eax, errInvFnc
   463 00004F33 E9151E0000          <1>     jmp extErrExit
   464                              <1> 
    37                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00004F38 E8C51D0000          <1>     call dosCrit1Enter
    15 00004F3D B806000000          <1>     mov eax, 6
    16 00004F42 39C3                <1>     cmp ebx, eax
    17 00004F44 0F42D8              <1>     cmovb ebx, eax
    18 00004F47 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00004F49 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00004F50 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 00004F57 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00004F5E 31ED                <1>     xor ebp, ebp    
    24 00004F60 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00004F62 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00004F69 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00004F6C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00004F6F 7409                <1>     je .walk1
    30 00004F71 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00004F74 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00004F7A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00004F82 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00004F88 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00004F8B 744A                <1>     je .det0    ;Determine if this block is useful
    41 00004F8D 31C9                <1>     xor ecx, ecx
    42 00004F8F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00004F92 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00004F99 48C1E104            <1>     shl rcx, 4
    46 00004F9D 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00004FA0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 00004FA3 7409                <1>     je .cons1
    49 00004FA5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 00004FA8 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00004FAE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 00004FB6 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 00004FB8 31C9                <1>     xor ecx, ecx
    56 00004FBA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 00004FBD 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 00004FC3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 00004FC6 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 00004FC8 31D2                <1>     xor edx, edx
    61 00004FCA 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 00004FCD 48895608            <1>     mov qword [rsi + 8], rdx
    63 00004FD1 3C5A                <1>     cmp al, mcbMarkEnd
    64 00004FD3 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 00004FD5 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 00004FD7 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 00004FDA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 00004FDD 39D9                <1>     cmp ecx, ebx
    72 00004FDF 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 00004FE1 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 00004FE8 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00004FEF 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00004FF2 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00004FF4 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 00004FFB 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00004FFD 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00004FFF 7209                <1>     jb .walk2
    83 00005001 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005003 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 0000500A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 0000500D 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 0000500F 31C9                <1>     xor ecx, ecx
    89 00005011 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005014 48C1E104            <1>     shl rcx, 4
    91 00005018 4881C610000000      <1>     add rsi, mcb.program
    92 0000501F 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005022 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005027 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 0000502E 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005030 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 00005037 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000503A 0F84A8000000        <1>     jz .allocFail
   102 00005040 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005042 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005045 31C9                <1>     xor ecx, ecx
   105 00005047 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000504A 29D9                <1>     sub ecx, ebx
   107 0000504C 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005052 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005055 48C1E104            <1>     shl rcx, 4
   110 00005059 4881C610000000      <1>     add rsi, mcb.program
   111 00005060 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005063 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005065 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00005068 EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000506A 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005071 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00005078 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005080 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005083 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005085 31C9                <1>     xor ecx, ecx
   123 00005087 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000508A 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 0000508C 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 0000508E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005094 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005097 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00005099 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 0000509C 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 0000509F 4881C710000000      <1>     add rdi, mcb.program
   133 000050A6 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000050AC 48C1E304            <1>     shl rbx, 4
   135 000050B0 4801DF              <1>     add rdi, rbx
   136 000050B3 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000050B5 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000050BD 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000050C0 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000050C7 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000050CB 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   144 000050D2 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000050D6 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000050D9 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000050DD E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000050E2 E8251C0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000050E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000050E8 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000050EF 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000050F1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000050F4 7409                <1>     je .af1
   157 000050F6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000050F9 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 000050FF 31C9                <1>     xor ecx, ecx
   161 00005101 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005104 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 0000510C 7505                <1>     jne .af2
   164 0000510E 39D9                <1>     cmp ecx, ebx
   165 00005110 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005113 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005116 7410                <1>     je .afExit
   169 00005118 48C1E104            <1>     shl rcx, 4
   170 0000511C 4881C610000000      <1>     add rsi, mcb.program
   171 00005123 4801CE              <1>     add rsi, rcx
   172 00005126 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00005128 B808000000          <1>     mov eax, errNoMem
   175 0000512D 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   176 00005134 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005137 E925030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 0000513C E8C11B0000          <1>     call dosCrit1Enter
   183 00005141 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00005148 31C9                <1>     xor ecx, ecx
   185 0000514A 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005151 4889F7              <1>     mov rdi, rsi
   187 00005154 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005157 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 0000515B 4881C610000000      <1>     add rsi, mcb.program
   190 00005162 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005165 31C9                <1>     xor ecx, ecx
   193 00005167 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000516A 7409                <1>     je .valid
   195 0000516C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 0000516F 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005175 4939F0              <1>     cmp r8, rsi
   199 00005178 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000517A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 0000517D 0F84A5000000        <1>     je .blockError
   203 00005183 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005186 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000518A 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005191 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005194 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005196 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 0000519E 0F8484000000        <1>     je .blockError
   213 000051A4 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000051AC 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000051B4 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000051B6 31C9                <1>     xor ecx, ecx
   218 000051B8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000051BB 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000051C1 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000051C4 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000051C6 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000051C8 31C9                <1>     xor ecx, ecx
   225 000051CA 48890E              <1>     mov qword [rsi], rcx
   226 000051CD 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000051D1 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000051D4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000051D7 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000051D9 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000051DC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000051DF 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000051E3 4881C110000000      <1>     add rcx, mcb.program
   236 000051EA 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000051ED 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 000051F5 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 000051F7 31C9                <1>     xor ecx, ecx
   241 000051F9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 000051FC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005202 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005205 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005207 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005209 31C9                <1>     xor ecx, ecx
   248 0000520B 48890E              <1>     mov qword [rsi], rcx
   249 0000520E 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005212 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005217 E8F01A0000          <1>     call dosCrit1Exit
   253 0000521C 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   254 00005223 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005227 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005228 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 0000522F B809000000          <1>     mov eax, errMemAddr
   259 00005234 E8141B0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005239 E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 0000523E E8C91A0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005244 E8B91A0000          <1>     call dosCrit1Enter
   268 00005249 85DB                <1>     test ebx, ebx
   269 0000524B 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005251 B806000000          <1>     mov eax, 6
   271 00005256 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005258 0F42D8              <1>     cmovb ebx, eax
   273 0000525B 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005262 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005265 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005268 7409                <1>     je .ctn
   277 0000526A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 0000526D 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005273 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 0000527B 74AB                <1>     je freeMemory.blockError
   284 0000527D 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005280 31C9                <1>     xor ecx, ecx
   286 00005282 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005285 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005287 0F8791000000        <1>     ja .growth
   289 0000528D 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005293 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005295 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 0000529B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 0000529E 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000052A4 48C1E304            <1>     shl rbx, 4
   296 000052A8 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000052AF 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000052B2 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000052B4 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000052B7 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000052B9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000052C1 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000052C4 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000052C6 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000052CC 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000052CF 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000052D3 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000052DA 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000052DD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000052E0 7409                <1>     je .shrinkAbsorb
   312 000052E2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000052E5 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000052EB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 000052F3 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 000052F9 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 000052FB 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 000052FD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005300 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005303 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005306 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005309 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 0000530D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005310 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005312 48890E              <1>     mov qword [rsi], rcx
   329 00005315 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005319 E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 0000531E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005321 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005327 31C9                <1>     xor ecx, ecx
   337 00005329 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 0000532C 48C1E104            <1>     shl rcx, 4
   339 00005330 4889F7              <1>     mov rdi, rsi    
   340 00005333 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 0000533A 4801CE              <1>     add rsi, rcx
   342 0000533D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005340 7409                <1>     je .growthOK
   344 00005342 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005345 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 0000534B 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005353 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005355 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005357 31C9                <1>     xor ecx, ecx
   353 00005359 31D2                <1>     xor edx, edx
   354 0000535B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 0000535E 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005364 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005367 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005369 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 0000536B 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 0000536E 775E                <1>     ja .notEnuffMem1
   361 00005370 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005372 81FA01000000        <1>     cmp edx, 1
   363 00005378 744E                <1>     je .notEnuffMem2
   364 0000537A 31C9                <1>     xor ecx, ecx
   365 0000537C 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 0000537F 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005383 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005386 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005389 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005390 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005394 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005397 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 0000539B 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 0000539D 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 0000539F 7411                <1>     jz .exit
   378 000053A1 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 000053A7 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 000053AA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 000053B2 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 000053B7 E850190000          <1>     call dosCrit1Exit
   384 000053BC 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   385 000053C3 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 000053C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 000053C8 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 000053CA EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 000053CC 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 000053CE B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 000053D3 488B15(7A040000)    <1>     mov rdx, qword [oldRSP]
   395 000053DA 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 000053DD E97F000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 000053E2 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 000053E7 E975000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 000053EC 84C0                <1>     test al, al
   402 000053EE 741F                <1>     jz .get
   403 000053F0 3C02                <1>     cmp al, 2
   404 000053F2 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 000053F4 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   407 000053FB 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 000053FF 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005405 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005409 E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 0000540E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 0000540F 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   414 00005416 31C0                <1>     xor eax, eax
   415 00005418 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 0000541E 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005421 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005425 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 0000542A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 0000542B B801000000          <1>     mov eax, errInvFnc
   422 00005430 EB2F                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005432 50                  <1>     push rax
   428 00005433 53                  <1>     push rbx
   429 00005434 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 0000543B 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 0000543E 7408                <1>     je .ok1
   433 00005440 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005443 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005445 5B                  <1>     pop rbx
   437 00005446 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005447 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005448 31C0                <1>     xor eax, eax
   441 0000544A 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 0000544D 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005451 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005458 4801C3              <1>     add rbx, rax
   445 0000545B EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 0000545D 5B                  <1>     pop rbx ;Pop off the stack first!
   448 0000545E 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 0000545F B007                <1>     mov al, errMCBbad   ;Yikes!
   451                              <1> mcbErrHdlr:
   452                              <1>     ;Jumped to with eax = error code
   453 00005461 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   454 00005468 E8E0180000          <1>     call extErrExit ;Error thru the unified error handler
   455 0000546D 3C07                <1>     cmp al, errMCBbad
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000546F 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00005471 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    38                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 40h
     7 00005473 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005475 E900170000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 47h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 0000547A 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005480 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005483 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    14 00005488 E9ED160000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 0000548D C605(14050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005494 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 0000549B 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 0000549D 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 0000549E EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 000054A0 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 000054A7 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 000054AB 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 000054AC 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 000054B3 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 000054B7 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 000054BB 4C89C6              <1>     mov rsi, r8
    52 000054BE 4889D7              <1>     mov rdi, rdx
    53 000054C1 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 000054C6 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 000054C9 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 000054D1 F605(14050000)FF    <1>     test byte [pspCopyFlg], -1
    57 000054D8 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 000054DA 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 000054E2 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 000054E6 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 000054EA 31C9                <1>     xor ecx, ecx
    64 000054EC B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 000054F1 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 000054F5 B0FF                <1>     mov al, -1
    67 000054F7 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 000054F9 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 000054FB E8D0F3FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005500 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005503 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005507 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 0000550B 67E31C              <1>     jecxz .copy
    77 0000550E FFC9                <1>     dec ecx
    78 00005510 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005511 0FB6D8              <1>     movzx ebx, al
    80 00005514 53                  <1>     push rbx
    81 00005515 E845F4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 0000551A 58                  <1>     pop rax
    83 0000551B 7508                <1>     jnz .badJFT
    84 0000551D AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 0000551E E853F4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005523 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005525 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005528 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 0000552A C605(14050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005531 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005532 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005535 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
    96 00005539 B042                <1>     mov al, 42h
    97 0000553B E837130000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005540 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005543 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005545 B043                <1>     mov al, 43h
   101 00005547 E82B130000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 0000554C 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 0000554F 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005551 B044                <1>     mov al, 44h
   105 00005553 E81F130000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005558 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 0000555B 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 0000555D 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   110 00005562 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   111 00005568 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 0000556C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 0000556D C605(01070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005574 81FA06000000        <1>     cmp edx, 6
   120 0000557A 7305                <1>     jae .aboveMinimum
   121 0000557C BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005581 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005588 89D3                <1>     mov ebx, edx
   129 0000558A 50                  <1>     push rax    ;Preserve errorlevel across call
   130 0000558B 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 0000558C E8B3FCFFFF          <1>     call reallocMemory
   132 00005591 5B                  <1>     pop rbx
   133 00005592 58                  <1>     pop rax
   134 00005593 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005595 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005599 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 0000559B 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;Here we must:
   143                              <1> ;0) Build errorlevel and adjust variables accordingly
   144                              <1> ;1) Call Network Termination hook.
   145                              <1> ;2) Check if the program is it's own parent. If so, return.
   146                              <1> ;3) Swap the console back to the original driver if it is swapped.
   147                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   148                              <1> ;4) Free all file handles associated to the current process.
   149                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   150                              <1> ;5) Free all memory blocks that have the signature of current PSP
   151                              <1> ;6) Set current PSP to parent PSP
   152                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   153                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   154                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   155                              <1> ;10) Exit all critical sections.
   156                              <1> ;
   157                              <1> ; Step 0
   158                              <1> ;For now, just adjust error level in var
   159 0000559D 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   160 0000559F 8625(01070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   161 000055A5 F605(8B040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   162 000055AC 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   163 000055AE 8625(8B040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   164 000055B4 C605(01070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   165                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   166 000055BB 8A25(01070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   167                              <1> .storeELvl:
   168 000055C1 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   169                              <1>     
   170                              <1> ; Step 1 Tell network a process is terminating
   171 000055C8 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   172 000055CD 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   173 000055D4 CD4F                <1>     int 4Fh
   174                              <1> ; Step 2
   175                              <1> .step1:
   176 000055D6 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   177 000055DD 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   178 000055E0 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   179 000055E4 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   180 000055E7 0F84BC000000        <1>     je .exit
   181                              <1> ; Step 3
   182 000055ED E817CFFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   183                              <1> ; Step 3.5
   184 000055F2 803D(01070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   185 000055F9 747A                <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   186                              <1> ; Step 4
   187 000055FB 803D(01070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   188 00005602 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   189 00005604 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   190 00005609 CD4F                <1>     int 4Fh
   191                              <1> .skipAbortNetClose:
   192 0000560B FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   193 00005611 FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   194                              <1> 
   195 00005617 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   196 0000561E 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   197 00005622 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   198                              <1> .s4lp:
   199 00005624 53                  <1>     push rbx
   200 00005625 51                  <1>     push rcx
   201 00005626 E8CCD9FFFF          <1>     call closeFileHdl
   202 0000562B 59                  <1>     pop rcx
   203 0000562C 5B                  <1>     pop rbx
   204 0000562D FFC3                <1>     inc ebx ;Goto next handle to close
   205 0000562F 39CB                <1>     cmp ebx, ecx
   206 00005631 75F1                <1>     jne .s4lp   ;Keep looping for all entries in the JFT 
   207                              <1> ;Step 5
   208                              <1> .step5:
   209 00005633 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   210                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   211                              <1>     ; with the currentPSP signature and free them.
   212 0000563A 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   213                              <1> .s5lp:  ;And walk the chain
   214                              <1> ;First verify the address in rsi is a valid mcb
   215 00005641 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   216 00005643 80F94D              <1>     cmp cl, mcbMarkCtn
   217 00005646 7405                <1>     je .checkToFree
   218 00005648 80F95A              <1>     cmp cl, mcbMarkEnd
   219 0000564B 7528                <1>     jne .step6  ;Something wrong so stop freeing
   220                              <1> .checkToFree:
   221 0000564D 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   222 00005651 750F                <1>     jne .noFree
   223 00005653 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   224 00005657 53                  <1>     push rbx
   225 00005658 51                  <1>     push rcx
   226 00005659 56                  <1>     push rsi
   227 0000565A E8DDFAFFFF          <1>     call freeMemory ;Free this memory block
   228 0000565F 5E                  <1>     pop rsi
   229 00005660 59                  <1>     pop rcx
   230 00005661 5B                  <1>     pop rbx
   231                              <1>     ;If an error occured, the internal vars will be set.
   232                              <1> .noFree:
   233 00005662 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   234 00005665 740E                <1>     je .step6   ;Skip if we are
   235 00005667 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   236 0000566A 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   237 0000566E 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   238 00005673 EBCC                <1>     jmp short .s5lp
   239                              <1> ;Step 6
   240                              <1> .step6:
   241                              <1> 
   242 00005675 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   243                              <1> 
   244 0000567B 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   245 0000567F 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   246                              <1> ;Step 7
   247                              <1>     ;rbx points to current PSP, the old parent task
   248                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   249 00005686 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   250 0000568A B044                <1>     mov al, 44h
   251 0000568C E8D2180000          <1>     call setIntVector
   252 00005691 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   253 00005695 B043                <1>     mov al, 43h
   254 00005697 E8C7180000          <1>     call setIntVector
   255 0000569C 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   256 000056A0 B042                <1>     mov al, 42h
   257 000056A2 52                  <1>     push rdx
   258 000056A3 E8BB180000          <1>     call setIntVector
   259 000056A8 5A                  <1>     pop rdx
   260                              <1> ;Step 8
   261                              <1> .exit:
   262 000056A9 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   263 000056AB CD4A                <1>     int 4ah
   264                              <1> 
   265 000056AD FA                  <1>     cli
   266 000056AE 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   267 000056B5 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   268                              <1>     ;Make the parent register frame the current one
   269                              <1>     ;Make RSP point to user stack from parent entry to exec
   270 000056B9 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   271                              <1> 
   272 000056BD 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   273 000056C2 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   274                              <1> 
   275 000056CB C605(95040000)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   276 000056D2 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   277 000056D9 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset
   278 000056E0 E8EF150000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   279 000056E5 48CF                <1>     iretq   ;and return to address that was in rdx
    39                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 000056E7 55                  <1>     push rbp
   100 000056E8 4889E5              <1>     mov rbp, rsp
   101 000056EB 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 000056F2 31C9                <1>     xor ecx, ecx
   104 000056F4 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105                              <1>     ;These two are cleared
   106                              <1>     ;mov qword [rbp - execFrame.pEnvBase], rcx
   107                              <1>     ;mov qword [rbp - execFrame.pProgBase], rcx
   108 000056F8 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   109 000056FC 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   110                              <1> 
   111 00005700 B403                <1>     mov ah, execOverlay
   112 00005702 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   113 00005709 7402                <1>     jz short .noMulti
   114 0000570B B404                <1>     mov ah, execBkgrnd
   115                              <1> .noMulti:
   116 0000570D 38E0                <1>     cmp al, ah
   117 0000570F 7615                <1>     jbe .validSubfunction
   118                              <1> .badSubFunction:
   119 00005711 B801000000          <1>     mov eax, errInvFnc
   120 00005716 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   121                              <1> .badExit:
   122 0000571D 4889EC              <1>     mov rsp, rbp
   123 00005720 5D                  <1>     pop rbp
   124 00005721 E927160000          <1>     jmp extErrExit
   125                              <1> 
   126                              <1> .validSubfunction:
   127 00005726 3C02                <1>     cmp al, execInvld
   128 00005728 74E7                <1>     je .badSubFunction
   129                              <1>     ;Save registers for each function call
   130 0000572A 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   131 0000572E 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   132 00005732 0FB6C0              <1>     movzx eax, al
   133 00005735 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   134 00005739 4889D7              <1>     mov rdi, rdx
   135 0000573C E8BC120000          <1>     call strlen ;Get string length in cx
   136 00005741 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   137                              <1>     ;Now open the file we wanna yeet to
   138 00005745 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   139 00005747 55                  <1>     push rbp    ;Preserve local frame ptr
   140 00005748 E880D7FFFF          <1>     call openFileHdl
   141 0000574D 5D                  <1>     pop rbp
   142 0000574E 72CD                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005750 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005754 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 00005757 E8D9F1FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 0000575C 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005760 F7C280000000        <1>     test edx, devCharDev
   149 00005766 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 00005768 B002                <1>     mov al, errFnf
   151 0000576A E932060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 0000576F 31C0                <1>     xor eax, eax
   154 00005771 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   155 00005775 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   156 00005779 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   157 00005781 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   158 00005787 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 0000578B 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 0000578E 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   161 00005791 7514                <1>     jnz short .copyEnvironmentBlock
   162 00005793 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 0000579A 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   164 0000579E 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   165 000057A2 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   166 000057A5 746D                <1>     jz short .loadProgram
   167                              <1> .copyEnvironmentBlock:
   168 000057A7 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1>     ;Get the length of the environment
   170 000057AA B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   171 000057AF 31C0                <1>     xor eax, eax
   172 000057B1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 000057B4 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 000057B6 7531                <1>     jnz short .invalidEnvironmentError
   176 000057B8 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 000057BB FFC9                <1>     dec ecx
   178 000057BD AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 000057BE 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 000057C0 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 000057C3 57                  <1>     push rdi     ;Save the length of the environment block
   183 000057C4 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 000057CA 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 000057CE 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 000057D0 89FB                <1>     mov ebx, edi
   187 000057D2 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 000057D5 55                  <1>     push rbp
   189 000057D6 E85DF7FFFF          <1>     call allocateMemory
   190 000057DB 5D                  <1>     pop rbp
   191 000057DC 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 000057DD 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 000057DF B808000000          <1>     mov eax, errNoMem
   196 000057E4 E9B8050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 000057E9 B80A000000          <1>     mov eax, errBadEnv
   199 000057EE E9AE050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 000057F3 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 000057F6 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 000057FA 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 000057FE 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005801 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005803 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 00005808 66AB                <1>     stosw       ;Away you go!
   211 0000580A 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 0000580E 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005812 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005814 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 00005819 488D15(E2190000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005820 E898050000          <1>     call .readDataFromHdl
   219 00005825 0F8271050000        <1>     jc .badFmtErr
   220 0000582B 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 0000582D 0F8469050000        <1>     jz .badFmtErr
   222 00005833 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 00005838 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 0000583E 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005843 740B                <1>     je .proceedEXE
   227 00005845 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 0000584A 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005850 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005851 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005854 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 00005857 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 00005859 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 0000585B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 0000585F E87ED8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005864 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005865 B918000000          <1>     mov ecx, imageFileHeader_size
   240 0000586A E84E050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 0000586F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005871 0F8425050000        <1>     jz .badFmtErr
   243 00005877 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 0000587C 0F821A050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005882 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005888 0F850E050000        <1>     jne .badFmtErr
   248 0000588E 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005894 0F8502050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 0000589A 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 0000589E 66A90200            <1>     test ax, imageFileExecutable
   253 000058A2 0F84F4040000        <1>     jz .badFmtErr
   254 000058A8 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 000058AC 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 000058B2 0F82E4040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 000058B8 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 000058BC 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 000058BE 0F84D8040000        <1>     jz .badFmtErr
   262 000058C4 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 000058C8 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 000058CD E8EB040000          <1>     call .readDataFromHdl
   267 000058D2 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 000058D4 0F84C2040000        <1>     jz .badFmtErr
   269 000058DA 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 000058DF 0F82B7040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 000058E5 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 000058EC 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 000058F4 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 000058F6 8B1D(1A1A0000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 000058FC 488B05(2A1A0000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   279 00005903 4885C0              <1>     test rax, rax
   280 00005906 750A                <1>     jnz .notDefaultStackAlloc
   281 00005908 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00005911 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00005912 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00005914 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 0000591A 031D(021A0000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00005920 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00005923 81C311000000        <1>     add ebx, 11h
   291 00005929 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 0000592C 55                  <1>     push rbp
   293 0000592D E806F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00005932 5D                  <1>     pop rbp
   295 00005933 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00005939 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 0000593D 480500010000        <1>     add rax, psp_size
   298 00005943 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00005947 813D(E6190000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 0000594F 0000                <1>
   302 00005951 0F8445040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00005957 EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00005959 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 0000595D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00005960 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00005964 8B15(4E1A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 0000596A C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 0000596D 31C9                <1>     xor ecx, ecx
   347 0000596F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00005973 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00005975 E868D7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 0000597A 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 0000597D 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 00005981 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 00005985 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 00005987 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 0000598B 51                  <1>     push rcx    ;Save # of segments left on stack
   360 0000598C 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 0000598D B928000000          <1>     mov ecx, imageSectionHdr_size
   362 00005992 488D15(521A0000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 00005999 E81F040000          <1>     call .readDataFromHdl
   364 0000599E 5F                  <1>     pop rdi
   365 0000599F 59                  <1>     pop rcx
   366 000059A0 85C0                <1>     test eax, eax
   367 000059A2 0F84F4030000        <1>     jz .badFmtErr
   368 000059A8 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 000059AD 0F85E9030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 000059B3 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 000059BA 8B15(661A0000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 000059C0 85D2                <1>     test edx, edx
   376 000059C2 744B                <1>     jz short .skipRawPtrMove
   377 000059C4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 000059C8 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 000059CA 51                  <1>     push rcx
   380 000059CB 57                  <1>     push rdi
   381 000059CC E811D7FFFF          <1>     call lseekHdl
   382 000059D1 5F                  <1>     pop rdi
   383 000059D2 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 000059D3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 000059DB 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 000059DD 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 000059E1 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 000059E9 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 000059EB 51                  <1>     push rcx
   396 000059EC 57                  <1>     push rdi
   397 000059ED 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 000059F1 8B0D(5E1A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 000059F7 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 000059FA 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 000059FE 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00005A02 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00005A06 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00005A09 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 00005A0D 5F                  <1>     pop rdi
   406 00005A0E 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 00005A0F 51                  <1>     push rcx
   409 00005A10 31FF                <1>     xor edi, edi
   410 00005A12 8B3D(5E1A0000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00005A18 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 00005A1C 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00005A20 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00005A23 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00005A25 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 00005A2C 31C9                <1>     xor ecx, ecx
   420 00005A2E 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00005A31 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00005A35 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 00005A3C 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 00005A3F 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00005A42 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00005A44 F705(761A0000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 00005A4C 0000                <1>
   430 00005A4E 0F8548030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00005A54 59                  <1>     pop rcx
   435 00005A55 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00005A57 8B0D(5A1A0000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 00005A5D 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00005A60 57                  <1>     push rdi    ;Save section in memory locally
   440 00005A61 E857030000          <1>     call .readDataFromHdl
   441 00005A66 5F                  <1>     pop rdi
   442 00005A67 59                  <1>     pop rcx
   443 00005A68 0F822E030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 00005A6E 3B05(5A1A0000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00005A74 0F8522030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 00005A7A 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 00005A7D 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 00005A7E 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 00005A81 8B0D(021A0000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 00005A87 FFC9                <1>     dec ecx ;Turn into a mask
   455 00005A89 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 00005A8C FFC1                <1>     inc ecx
   457 00005A8E 4829C1              <1>     sub rcx, rax
   458 00005A91 31C0                <1>     xor eax, eax
   459 00005A93 F3AA                <1>     rep stosb
   460 00005A95 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 00005A96 FFC9                <1>     dec ecx ;Decrement our section counter
   463 00005A98 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 00005A9A 51                  <1>     push rcx
   466 00005A9B 57                  <1>     push rdi
   467 00005A9C 30C0                <1>     xor al, al  ;Move rel start of file
   468 00005A9E 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 00005AA1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 00005AA5 31C9                <1>     xor ecx, ecx
   471 00005AA7 E836D6FFFF          <1>     call lseekHdl
   472 00005AAC 5F                  <1>     pop rdi
   473 00005AAD 59                  <1>     pop rcx
   474 00005AAE E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 00005AB3 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 00005AB7 483B15(FA190000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 00005ABE 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 00005AC4 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 00005AC8 66A90100            <1>     test ax, imageFileRelocsStripped
   491 00005ACC 0F85CA020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 00005AD2 8B15(4E1A0000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 00005AD8 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 00005ADE 0F82B8020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00005AE4 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00005AE7 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 00005AED 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00005AF1 31C0                <1>     xor eax, eax
   502 00005AF3 E8EAD5FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00005AF8 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 00005AFB B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00005B00 488D15(521A0000)    <1>     lea rdx, sectHdr
   507 00005B07 E8B1020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 00005B0C 85C0                <1>     test eax, eax
   509 00005B0E 0F8488020000        <1>     jz .badFmtErr
   510 00005B14 39C8                <1>     cmp eax, ecx
   511 00005B16 0F8580020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 00005B1C 8B35(521A0000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00005B22 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00005B24 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00005B26 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 00005B2A 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 00005B2E 482B05(FA190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00005B35 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 00005B3D 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 00005B3F 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00005B43 482B05(FA190000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 00005B4A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 00005B4E 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00005B51 8B0D(561A0000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00005B57 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00005B59 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 00005B5B 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 00005B5C 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 00005B5E 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00005B62 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00005B65 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00005B68 67E31E              <1>     jecxz .blockDone    
   547 00005B6B 81E908000000        <1>     sub ecx, 8
   548 00005B71 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00005B78 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 00005B7A 66AD                <1>     lodsw   ;Get the next page offset word
   552 00005B7C 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 00005B81 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 00005B85 FFC9                <1>     dec ecx
   556 00005B87 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 00005B89 59                  <1>     pop rcx
   559 00005B8A FFC9                <1>     dec ecx
   560 00005B8C 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 00005B8E 8B05(F2190000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 00005B94 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 00005B98 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 00005B9C FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 00005BA2 0F82F4010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 00005BA8 E9A5000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 00005BAD 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 00005BB5 7450                <1>     je .comOverlay
   575 00005BB7 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   576 00005BBC 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 00005BBF 55                  <1>     push rbp
   578 00005BC0 E873F3FFFF          <1>     call allocateMemory
   579 00005BC5 5D                  <1>     pop rbp
   580 00005BC6 734C                <1>     jnc .comallocOk
   581 00005BC8 3C08                <1>     cmp al, errNoMem
   582 00005BCA 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available
   584                              <1>     ;We check if this value is psp_size more than filesize
   585 00005BD0 53                  <1>     push rbx    ;Save new minimum size
   586 00005BD1 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   587 00005BD6 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   588 00005BDA 31D2                <1>     xor edx, edx    ;Go to end of file
   589 00005BDC E801D5FFFF          <1>     call lseekHdl
   590                              <1>     ;eax has file size
   591 00005BE1 5B                  <1>     pop rbx ;Get back max alloc size
   592 00005BE2 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   593 00005BE4 29C2                <1>     sub edx, eax
   594 00005BE6 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   595 00005BEC 0F82EDFBFFFF        <1>     jb .insufficientMemory   ;Fail
   596 00005BF2 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   597 00005BF5 55                  <1>     push rbp
   598 00005BF6 E83DF3FFFF          <1>     call allocateMemory
   599 00005BFB 5D                  <1>     pop rbp
   600 00005BFC 0F829F010000        <1>     jc .cleanAndFail
   601 00005C02 E90D000000          <1>     jmp .comallocOk
   602                              <1> .comOverlay:
   603                              <1>     ;Here we simply read the file into the buffer provided
   604 00005C07 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   605 00005C0B 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   606 00005C0E 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   607 00005C12 EB0A                <1>     jmp short .comRead
   608                              <1> .comallocOk:
   609                              <1>     ;rax should point to the first byte
   610 00005C14 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   611 00005C18 480500010000        <1>     add rax, psp_size
   612                              <1> .comRead:
   613 00005C1E 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   614                              <1> 
   615 00005C22 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   616 00005C27 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   617 00005C2B 31D2                <1>     xor edx, edx    ;Go to end of file
   618 00005C2D E8B0D4FFFF          <1>     call lseekHdl
   619                              <1>     ;eax has filesize now
   620 00005C32 50                  <1>     push rax    ;Save filesize
   621 00005C33 31C0                <1>     xor eax, eax    ;Reposition to start of file
   622 00005C35 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   623 00005C39 31D2                <1>     xor edx, edx    ;Go to start of file
   624 00005C3B E8A2D4FFFF          <1>     call lseekHdl
   625 00005C40 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   626 00005C41 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   627 00005C45 E873010000          <1>     call .readDataFromHdl   ;Read from the file handle
   628 00005C4A 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   629 00005C4E 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   630                              <1> .buildChildPSP:
   631                              <1>     ;We can close handle now
   632 00005C52 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   633 00005C56 55                  <1>     push rbp
   634 00005C57 E89BD3FFFF          <1>     call closeFileHdl   ;Close the file
   635 00005C5C 5D                  <1>     pop rbp
   636                              <1> 
   637                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   638 00005C5D 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   639 00005C65 0F840E010000        <1>     je .overlayExit
   640                              <1>     ;Now build the PSP
   641 00005C6B 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   642 00005C6E 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   643 00005C72 52                  <1>     push rdx
   644 00005C73 55                  <1>     push rbp
   645 00005C74 E814F8FFFF          <1>     call createPSP
   646 00005C79 5D                  <1>     pop rbp
   647 00005C7A 5A                  <1>     pop rdx
   648                              <1> 
   649                              <1>     ;Now copy the environment block over if rax != 0
   650 00005C7B 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   651 00005C7F 4885DB              <1>     test rbx, rbx
   652 00005C82 7404                <1>     jz short .skipEnvCopy
   653 00005C84 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   654                              <1> .skipEnvCopy:
   655                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   656 00005C88 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   657 00005C8F E86E100000          <1>     call dosCrit1Enter
   658 00005C94 E84B010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   659                              <1> 
   660 00005C99 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   661 00005CA0 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   662                              <1> 
   663                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   664                              <1>     ; and set FS to point to the PSP
   665 00005CA7 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   666                              <1> 
   667 00005CAB 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   668 00005CAF B925000000          <1>     mov ecx, fcb_size
   669 00005CB4 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   670 00005CB8 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   671 00005CBA F3A4                <1>     rep movsb   ;Copy fcb 1 over
   672 00005CBC 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   673 00005CC0 B925000000          <1>     mov ecx, fcb_size
   674 00005CC5 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   675 00005CC9 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   676 00005CCB F3A4                <1>     rep movsb   ;Copy fcb 2 over
   677 00005CCD 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   678 00005CD1 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   679 00005CD8 B980000000          <1>     mov ecx, 80h
   680 00005CDD F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   681                              <1> 
   682 00005CDF 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   683 00005CE1 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   684                              <1> 
   685                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   686 00005CE4 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   687 00005CE9 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   688 00005CEB 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   689 00005CEF 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   690                              <1> 
   691 00005CF1 E8AF0B0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   692 00005CF6 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   693 00005CFA 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   694 00005CFE 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   695 00005D01 B042                <1>     mov al, 42h
   696 00005D03 E85B120000          <1>     call setIntVector   ;bx preserved by this call
   697                              <1> 
   698                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   699 00005D08 88D8                <1>     mov al, bl
   700 00005D0A 30DB                <1>     xor bl, bl
   701 00005D0C E8B80B0000          <1>     call setDrive
   702 00005D11 7302                <1>     jnc .drive1Ok
   703 00005D13 B3FF                <1>     mov bl, -1
   704                              <1> .drive1Ok:
   705 00005D15 88F8                <1>     mov al, bh
   706 00005D17 30FF                <1>     xor bh, bh
   707 00005D19 E8AB0B0000          <1>     call setDrive
   708 00005D1E 7302                <1>     jnc .drive2Ok
   709 00005D20 B7FF                <1>     mov bh, -1
   710                              <1> .drive2Ok:
   711                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   712                              <1>     ;rdi has pointer to psp
   713 00005D22 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   714                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   715 00005D25 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   716 00005D2A 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   716 00005D33 FF                  <1>
   717 00005D34 4821C6              <1>     and rsi, rax    ;To align downwards
   718                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   719                              <1>     ;That is the job of the runtime to handle.
   720                              <1> ;Registers carrying data at this point:
   721                              <1> ;bx = FCB drive statuses
   722                              <1> ;rsi = Stack Base
   723                              <1> ;rbp = execFrame
   724 00005D37 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   725 00005D3B 750B                <1>     jne short .noBg
   726                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   727 00005D3D 56                  <1>     push rsi
   728 00005D3E E8620B0000          <1>     call getUserRegs
   729 00005D43 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   730 00005D47 5E                  <1>     pop rsi
   731                              <1> .noBg:
   732 00005D48 FF15(9F000000)      <1>     call qword [launchTask]
   733 00005D4E 7251                <1>     jc short .cleanAndFail
   734                              <1> ;Final step: Transfer control
   735 00005D50 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   736 00005D54 742C                <1>     je .xfrProgram
   737 00005D56 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   738 00005D5A 741D                <1>     je .overlayExit ;Skip the below for background tasks
   739 00005D5C 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   740 00005D60 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   741 00005D64 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   742 00005D68 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   743 00005D6B 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   744 00005D6E 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00005D75 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   746                              <1> .overlayExit:
   747 00005D79 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   748 00005D7C 5D                  <1>     pop rbp ;Point rsp to the return address
   749 00005D7D E9BD0F0000          <1>     jmp extGoodExit ;And return!
   750                              <1> .xfrProgram:
   751 00005D82 FA                  <1>     cli
   752 00005D83 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   753 00005D86 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   754 00005D8D FB                  <1>     sti
   755                              <1> 
   756 00005D8E 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   757 00005D8F FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   758 00005D92 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   759 00005D95 4989F9              <1>     mov r9, rdi
   760 00005D98 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   761                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 00005D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> ;r8 is guaranteed to have a copy of the PSP.
   763                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   764                              <1> ;Everything else is optional and potentially changable at a later stage
   765                              <1> 
   766                              <1> .badFmtErr:
   767 00005D9C B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   768                              <1> .cleanAndFail:
   769                              <1> ;Close the open file and any open resources and fail
   770 00005DA1 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   771 00005DA6 E8610F0000          <1>     call dosCrit1Exit
   772 00005DAB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   773 00005DAF 50                  <1>     push rax    ;Save error code
   774 00005DB0 55                  <1>     push rbp
   775 00005DB1 E841D2FFFF          <1>     call closeFileHdl
   776 00005DB6 5D                  <1>     pop rbp
   777 00005DB7 58                  <1>     pop rax
   778 00005DB8 E960F9FFFF          <1>     jmp .badExit
   779                              <1> 
   780                              <1> .readDataFromHdl:
   781                              <1> ;Input: ecx = Number of bytes to transfer
   782                              <1> ;       rdx = Ptr to the buffer to use
   783 00005DBD 52                  <1>     push rdx
   784 00005DBE E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   785 00005DC3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   786 00005DC7 55                  <1>     push rbp
   787 00005DC8 E869D2FFFF          <1>     call readFileHdl
   788 00005DCD 5D                  <1>     pop rbp
   789 00005DCE E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   790 00005DD3 5A                  <1>     pop rdx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00005DD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> .clearArenaOwner:
   793 00005DD5 53                  <1>     push rbx
   794 00005DD6 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   795 00005DD8 E8250F0000          <1>     call dosCrit1Enter
   796 00005DDD E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   797 00005DE2 5B                  <1>     pop rbx
   798                              <1>     return
    13                              <2> %%_ret:
    14 00005DE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   799                              <1> .setPSPArenaOwner:
   800                              <1> ;Sets the current PSP as the arena owner
   801 00005DE4 53                  <1>     push rbx
   802 00005DE5 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   803 00005DEC E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   804 00005DF1 E8160F0000          <1>     call dosCrit1Exit
   805 00005DF6 5B                  <1>     pop rbx
   806                              <1>     return
    13                              <2> %%_ret:
    14 00005DF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   807                              <1> .setProgOrEnvArenaOwnerToRBX:
   808                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   809 00005DF8 9C                  <1>     pushfq
   810 00005DF9 50                  <1>     push rax
   811                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   812                              <1>     ;This is because they are set up at separate points in the routine!
   813 00005DFA 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   814 00005DFE E80C000000          <1>     call .writeArenaHeaderOwner
   815 00005E03 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   816 00005E07 E803000000          <1>     call .writeArenaHeaderOwner
   817 00005E0C 58                  <1>     pop rax
   818 00005E0D 9D                  <1>     popfq
   819                              <1>     return
    13                              <2> %%_ret:
    14 00005E0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .writeArenaHeaderOwner:
   821                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   822                              <1> ;       rbx = Owner ID
   823 00005E0F 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   824                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005E12 74FA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825 00005E14 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   826 00005E1A 48895801            <1>     mov qword [rax + 1], rbx
   827                              <1>     return
    13                              <2> %%_ret:
    14 00005E1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    40                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00005E1F 3C01                <1>     cmp al, 01
    12 00005E21 740B                <1>     je .setSC
    13 00005E23 7210                <1>     jb .getSC
    14 00005E25 3C03                <1>     cmp al, 03
    15 00005E27 7214                <1>     jb .getDev
    16 00005E29 741C                <1>     je .setDev
    17 00005E2B B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00005E2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00005E2E 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00005E34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00005E35 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00005E3B EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00005E3D B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00005E3F E8610A0000          <1>     call getUserRegs
    29 00005E44 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00005E47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;Currently only accept subfunction al = 0, current country
    36                              <1> ;AL > 0 => errInvFnc, Subfunction error
    37                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    38 00005E48 84C0                <1>     test al, al
    39 00005E4A 740A                <1>     jz .currentCountry
    40                              <1> .invalidFunction:
    41 00005E4C B801000000          <1>     mov eax, errInvFnc
    42 00005E51 E9F70E0000          <1>     jmp extErrExit
    43                              <1> .currentCountry:
    44 00005E56 4881FAFFFFFFFF      <1>     cmp rdx, -1
    45 00005E5D 74ED                <1>     je .invalidFunction
    46 00005E5F 488D3542A3FFFF      <1>     lea rsi, ctryTbl
    47 00005E66 4889D7              <1>     mov rdi, rdx
    48 00005E69 B926000000          <1>     mov ecx, countryStruc_size
    49 00005E6E F3A4                <1>     rep movsb
    50 00005E70 31C0                <1>     xor eax, eax
    51 00005E72 E9C80E0000          <1>     jmp extGoodExit
    52                              <1> 
    53                              <1> 
    54                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    55                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    56                              <1>     return
    13                              <2> %%_ret:
    14 00005E77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> caseMapFunc:
    59                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
    60 00005E78 3C80                <1>     cmp al, 80h
    61                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00005E7A 72FB                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    62 00005E7C 53                  <1>     push rbx
    63 00005E7D 488D1D4CA3FFFF      <1>     lea rbx, ucTbl
    64 00005E84 2C80                <1>     sub al, 80h ;Turn into an offset into the table
    65 00005E86 D7                  <1>     xlatb
    66 00005E87 5B                  <1>     pop rbx
    67                              <1>     return
    13                              <2> %%_ret:
    14 00005E88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/ctrlc.asm"
     1                              <1> 
     2                              <1> fullcriticalErrorInvoke:
     3 00005E89 B803000000          <1>     mov eax, 03 ;Always fail for now
     4 00005E8E F9                  <1>     stc
     5                              <1>     return
    13                              <2> %%_ret:
    14 00005E8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     6                              <1> xlatHardError:
     7                              <1> ;Translates a hard error code to a generic DOS error
     8                              <1> ;Input: edi = eax = Hard Error Code
     9 00005E90 50                  <1>     push rax
    10 00005E91 3D13000000          <1>     cmp eax, drvErrShft
    11 00005E96 7205                <1>     jb .skipXlat
    12 00005E98 0513000000          <1>     add eax, drvErrShft
    13                              <1> .skipXlat:
    14 00005E9D 880511A6FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    15 00005EA3 58                  <1>     pop rax
    16 00005EA4 56                  <1>     push rsi
    17 00005EA5 488D3559A2FFFF      <1>     lea rsi, extErrTbl
    18 00005EAC E8F50E0000          <1>     call setErrorVars
    19 00005EB1 5E                  <1>     pop rsi
    20                              <1>     return
    13                              <2> %%_ret:
    14 00005EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> diskDevErr:
    23                              <1> ;Called, NOT Jumped to. 
    24                              <1> ;Input: rdi = Disk Buffer pointer
    25                              <1> ;       eax = Status word (Zero Extended)
    26                              <1> ;       rbp = Disk DPB pointer
    27                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    28                              <1> ;Output: al = Int 44h response (0-3)
    29                              <1> ; All other registers preserved
    30 00005EB3 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    31 00005EBA 89C7                <1>     mov edi, eax    ;Store status word in rdi
    32 00005EBC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    33 00005EBF 8A25(67040000)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    34 00005EC5 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    35                              <1>     ;Test for correct buffer data type
    36 00005EC8 53                  <1>     push rbx    ;Save rbx temporarily
    37 00005EC9 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    38 00005ECC F6C301              <1>     test bl, dosBuffer
    39 00005ECF 7505                <1>     jnz .df0
    40 00005ED1 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    41 00005ED4 EB17                <1>     jmp short .df3
    42                              <1> .df0:
    43 00005ED6 F6C302              <1>     test bl, fatBuffer
    44 00005ED9 7505                <1>     jnz .df1
    45 00005EDB 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    46 00005EDE EB0D                <1>     jmp short .df3
    47                              <1> .df1:
    48 00005EE0 F6C304              <1>     test bl, dirBuffer
    49 00005EE3 7505                <1>     jnz .df2
    50 00005EE5 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    51 00005EE8 EB03                <1>     jmp short .df3
    52                              <1> .df2:
    53 00005EEA 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    54                              <1> .df3:
    55 00005EED 5B                  <1>     pop rbx
    56 00005EEE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    57 00005EF2 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    58 00005EF7 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    59 00005EFE 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    60                              <1>     return
    13                              <2> %%_ret:
    14 00005F05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> 
    62                              <1> charDevErr:
    63                              <1> ;Called with ah with additional bits
    64 00005F06 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    65                              <1> criticalErrorSetup:
    66 00005F09 8825(67040000)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    67 00005F0F 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    68 00005F16 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    69                              <1>     ;For now, fall through, but need much work to change it later! 
    70                              <1> 
    71                              <1> 
    72                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    73                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    74                              <1> ; to the critical error handler.
    75                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    76                              <1> ; and with Int44Bitfield set
    77                              <1> ;               AH = Critical Error Bitfield
    78                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    79                              <1> ;               Bit 6 - Reserved
    80                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    81                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    82                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    83                              <1> ;               Bits [2-1] = Affected Disk Error
    84                              <1> ;                     0 0   DOS area
    85                              <1> ;                     0 1   FAT area
    86                              <1> ;                     1 0   Directory area
    87                              <1> ;                     1 1   Data area
    88                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    89                              <1> ;               AL  = Failing drive number if AH[7] = 0
    90                              <1> ;               DIL = Error code for errorMsg
    91                              <1> ;               RSI = EA of Device Header for which device the error occured
    92                              <1> ;Return:
    93                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    94                              <1> ;                  = 1 - Retry the Operation    (Retry)
    95                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    96                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    97                              <1> ; Return response from int 44h in al
    98                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    99                              <1> ; This function will terminate the program if an abort was requested!
   100                              <1> ; This function also destroys RBP
   101 00005F1C 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   102 00005F23 7204                <1>     jb .noIntError  ;If not 0, enter
   103 00005F25 B003                <1>     mov al, critFail    ;Else, return Fail always
   104 00005F27 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   105                              <1> .noIntError:
   106 00005F29 FA                  <1>     cli ;Disable Interrupts
   107 00005F2A FE05(07040000)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   108 00005F30 FE0D(08040000)      <1>     dec byte [inDOS]    ;Exiting DOS
   109 00005F36 488925(5F040000)    <1>     mov qword [xInt44hRSP], rsp
   110 00005F3D 488B25(7A040000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   111 00005F44 31ED                <1>     xor ebp, ebp    ;Always zeroed
   112 00005F46 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   113 00005F48 488B25(5F040000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   114 00005F4F C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   115 00005F56 FE05(08040000)      <1>     inc byte [inDOS]    ;Reenter DOS
   116 00005F5C FB                  <1>     sti ;Reenable Interrupts
   117                              <1>     ;Now we check that the response given was allowed, and translate if needed
   118                              <1> .checkResponse:
   119 00005F5D 3C00                <1>     cmp al, critIgnore
   120 00005F5F 7421                <1>     je .checkIgnore
   121 00005F61 3C01                <1>     cmp al, critRetry
   122 00005F63 7428                <1>     je .checkRetry
   123 00005F65 3C03                <1>     cmp al, critFail
   124 00005F67 752F                <1>     jne .abort   ;Must be abort
   125                              <1> .setFail:   ;Here is for fail
   126 00005F69 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   127 00005F6B FE05(69040000)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   128 00005F71 F605(67040000)08    <1>     test byte [Int44bitfld], critFailOK
   129 00005F78 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   130                              <1> .exit:
   131 00005F7A C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   132                              <1>     return
    13                              <2> %%_ret:
    14 00005F81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   133                              <1> .checkIgnore:
   134 00005F82 F605(67040000)20    <1>     test byte [Int44bitfld], critIgnorOK
   135 00005F89 75EF                <1>     jnz .exit
   136 00005F8B EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   137                              <1> .checkRetry:
   138 00005F8D F605(67040000)10    <1>     test byte [Int44bitfld], critRetryOK
   139 00005F94 75E4                <1>     jnz .exit   
   140 00005F96 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   141                              <1> .abort:
   142                              <1> ;Prepare to abort. We abort from within!
   143                              <1> ;If a network request requests abort, translate to fail
   144 00005F98 803D(FD060000)FF    <1>     cmp byte [dosInvoke], -1
   145 00005F9F 7509                <1>     jne .kill   ;If this is zero, local invokation
   146 00005FA1 C605(95040000)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   147 00005FA8 EBD0                <1>     jmp short .exit
   148                              <1> .kill:
   149 00005FAA 66893D(0B040000)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   150 00005FB1 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   151 00005FB3 C605(01070000)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   152 00005FBA E9FCF5FFFF          <1>     jmp terminateClean.altEP
   153                              <1> 
   154                              <1> ctrlBreakHdlr:
   155 00005FBF B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   156 00005FC1 E871C4FFFF          <1>     call printCaretASCII
   157 00005FC6 E89CC4FFFF          <1>     call printCRLF
   158                              <1>     ;Reset the console back to 0
   159 00005FCB C605(93040000)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   160                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   161                              <1> .exceptEP:
   162                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   163                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   164                              <1> ;   interrupted DOS call is restarted
   165 00005FD2 FA                  <1> 	cli
   166 00005FD3 488B25(7A040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   167 00005FDA E8F50C0000          <1> 	call dosPopRegs ;Get user state back
   168 00005FDF C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   169 00005FE6 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   170 00005FED 488925(27040000)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   171 00005FF4 F8                  <1>     clc
   172 00005FF5 CD43                <1>     int 43h ;Call critical error handler
   173 00005FF7 FA                  <1>     cli ;Clear interrupts again
   174 00005FF8 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   175 00005FFF 9C                  <1>     pushfq  ;Get flags in rax
   176 00006000 58                  <1>     pop rax 
   177 00006001 483B25(27040000)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   178 00006008 750C                <1>     jne .checkCF
   179                              <1> .returnToDOS:
   180 0000600A 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   181 00006011 E9640B0000          <1>     jmp functionDispatch    ;Goto int 41h
   182                              <1> .checkCF:
   183 00006016 488B25(27040000)    <1>     mov rsp, qword [xInt43hRSP]  ;Account for the flags and SS:RSP left on stack
   184 0000601D A801                <1>     test al, 1  ;CF set?
   185 0000601F 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   186 00006021 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   187 00006026 C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   188 0000602D E9480B0000          <1>     jmp functionDispatch
   189                              <1> 
   190                              <1> ;CPU Exception handlers
   191                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   192                              <1> ; CTRL+C exit.
   193                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   194                              <1> ; system.
   195                              <1> ; Also halt if the application is it's own parent.
   196                              <1> ;An application should hook these interupts if they wish to not 
   197                              <1> ; CTRL+C exit, and instead return to DOS.
   198                              <1> i0:
   199 00006032 31C0                <1>     xor eax, eax
   200 00006034 E9AB000000          <1>     jmp cpu_2args
   201                              <1> i1:
   202 00006039 B801000000          <1>     mov eax, 1
   203 0000603E E9A1000000          <1>     jmp cpu_2args
   204                              <1> i2:
   205 00006043 B802000000          <1>     mov eax, 2
   206 00006048 E997000000          <1>     jmp cpu_2args
   207                              <1> i3:
   208 0000604D B803000000          <1>     mov eax, 3
   209 00006052 E98D000000          <1>     jmp cpu_2args
   210                              <1> i4:
   211 00006057 B804000000          <1>     mov eax, 4
   212 0000605C E983000000          <1>     jmp cpu_2args
   213                              <1> i5:
   214 00006061 B805000000          <1>     mov eax, 5
   215 00006066 EB7C                <1>     jmp short cpu_2args
   216                              <1> i6:
   217 00006068 B806000000          <1>     mov eax, 6
   218 0000606D EB75                <1>     jmp short cpu_2args
   219                              <1> i7:
   220 0000606F B807000000          <1>     mov eax, 7
   221 00006074 EB6E                <1>     jmp short cpu_2args
   222                              <1> i8:
   223 00006076 B808000000          <1>     mov eax, 8
   224 0000607B EB60                <1>     jmp short cpu_3args
   225                              <1> i9:
   226 0000607D B809000000          <1>     mov eax, 9
   227 00006082 EB60                <1>     jmp short cpu_2args
   228                              <1> i10:
   229 00006084 B80A000000          <1>     mov eax, 0Ah
   230 00006089 EB52                <1>     jmp short cpu_3args
   231                              <1> i11:
   232 0000608B B80B000000          <1>     mov eax, 0Bh
   233 00006090 EB4B                <1>     jmp short cpu_3args
   234                              <1> i12:
   235 00006092 B80C000000          <1>     mov eax, 0Ch
   236 00006097 EB44                <1>     jmp short cpu_3args
   237                              <1> i13:
   238 00006099 B80D000000          <1>     mov eax, 0Dh
   239 0000609E EB3D                <1>     jmp short cpu_3args
   240                              <1> i14:
   241 000060A0 B80E000000          <1>     mov eax, 0Eh
   242 000060A5 EB2F                <1>     jmp short cpu_4args
   243                              <1> i15:
   244 000060A7 B80F000000          <1>     mov eax, 0Fh
   245 000060AC EB36                <1>     jmp short cpu_2args
   246                              <1> i16:
   247 000060AE B810000000          <1>     mov eax, 10h
   248 000060B3 EB2F                <1>     jmp short cpu_2args
   249                              <1> i17:
   250 000060B5 B811000000          <1>     mov eax, 11h
   251 000060BA EB21                <1>     jmp short cpu_3args
   252                              <1> i18:
   253 000060BC B812000000          <1>     mov eax, 12h
   254 000060C1 EB21                <1>     jmp short cpu_2args
   255                              <1> i19:
   256 000060C3 B813000000          <1>     mov eax, 13h
   257 000060C8 EB1A                <1>     jmp short cpu_2args
   258                              <1> i20:
   259 000060CA B814000000          <1>     mov eax, 14h
   260 000060CF EB13                <1>     jmp short cpu_2args
   261                              <1> i21:
   262 000060D1 B815000000          <1>     mov eax, 15h
   263                              <1> cpu_4args:
   264 000060D6 B903000000          <1>     mov ecx, 3
   265 000060DB EB0C                <1>     jmp short cpu_exception
   266                              <1> cpu_3args:
   267 000060DD B902000000          <1>     mov ecx, 2
   268 000060E2 EB05                <1>     jmp short cpu_exception
   269                              <1> cpu_2args:
   270 000060E4 B901000000          <1>     mov ecx, 1
   271                              <1> cpu_exception:
   272                              <1> ;Enter with:
   273                              <1> ; eax = Exception number in binary
   274                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   275 000060E9 488D356D020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   276 000060F0 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   277 000060F5 E81B020000          <1>     call .writeExceptionMessage
   278                              <1> 
   279 000060FA 803D(08040000)01    <1>     cmp byte [inDOS], 1
   280 00006101 7327                <1>     jae .introStop
   281 00006103 3D02000000          <1>     cmp eax, 2
   282 00006108 7420                <1>     je .introStop
   283                              <1> 
   284 0000610A 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   285 00006111 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   286 00006115 7413                <1>     je .introStop
   287                              <1> 
   288 00006117 488D3568020000      <1>     lea rsi, .fatal1
   289 0000611E BBC1000000          <1>     mov ebx, fatal1L
   290 00006123 E8ED010000          <1>     call .writeExceptionMessage
   291 00006128 EB18                <1>     jmp short .introEnd
   292                              <1> .introStop:
   293 0000612A C605(8A1A0000)FF    <1>     mov byte [haltDOS], -1
   294 00006131 488D3512030000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   295 00006138 BB19000000          <1>     mov ebx, fatalHaltL  ;Get the length
   296 0000613D E8D3010000          <1>     call .writeExceptionMessage
   297                              <1> .introEnd:
   298 00006142 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   299 00006149 E895010000          <1>     call .printbyte ;Store the error code in the byte buffer
   300 0000614E 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   301 00006155 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   302 0000615A E8B6010000          <1>     call .writeExceptionMessage
   303                              <1> 
   304 0000615F 488D35E1020000      <1>     lea rsi, .fatal2
   305 00006166 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   306 0000616B E8A5010000          <1>     call .writeExceptionMessage
   307                              <1> 
   308 00006170 80F901              <1>     cmp cl, 1
   309 00006173 0F87D0000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   310                              <1> .cpurollprint:
   311 00006179 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   312 00006180 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   313                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   314 00006184 B108                <1>     mov cl, 8    ;8 bytes
   315                              <1> .cpurollprint1:
   316 00006186 48C1C208            <1>     rol rdx, 8
   317 0000618A 88D0                <1>     mov al, dl
   318 0000618C 52                  <1>     push rdx
   319 0000618D E851010000          <1>     call .printbyte
   320 00006192 5A                  <1>     pop rdx
   321 00006193 FEC9                <1>     dec cl
   322 00006195 75EF                <1>     jnz .cpurollprint1
   323                              <1> 
   324 00006197 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   325 0000619C 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   326 000061A3 E86D010000          <1>     call .writeExceptionMessage
   327                              <1> 
   328 000061A8 BB03000000          <1>     mov ebx, crlfL
   329 000061AD 488D35AF020000      <1>     lea rsi, .crlf
   330 000061B4 E85C010000          <1>     call .writeExceptionMessage    
   331                              <1> 
   332 000061B9 F605(8A1A0000)FF    <1>     test byte [haltDOS], -1
   333 000061C0 7534                <1>     jnz .fatalStop
   334 000061C2 E839010000          <1>     call .readInputChar
   335                              <1>     ;Set error code to General Failure
   336 000061C7 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   336 000061CF 00                  <1>
   337 000061D0 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   338 000061D7 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   339 000061DE C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   340 000061E5 B8FF4C0000          <1>     mov eax, 4cFFh
   341 000061EA C605(8B040000)FF    <1>     mov byte [ctrlCExit], -1
   342                              <1>     ;If a -1 error code and ctrlC exit and the extended error
   343                              <1>     ; setup as above, chances are it was a CPU error
   344 000061F1 E984090000          <1>     jmp functionDispatch    ;Call Int 41h politely, clean up resources
   345                              <1> .fatalStop:
   346                              <1> ;This is called if inDOS > 1 or NMI occured
   347                              <1> ;Waits 1 minute then reboots
   348 000061F6 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   349 000061FB CD4A                <1>     int 4Ah
   350 000061FD E8000B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   351 00006202 E80F0B0000          <1>     call dosCrit2Enter  ;Get the lock to end all multitasking
   352 00006207 E831C8FFFF          <1>     call getDateAndTimeOld  ;Get time packed in edx (edx[0:4] = Seconds/2)
   353 0000620C 89D3                <1>     mov ebx, edx
   354 0000620E 81E31F000000        <1>     and ebx, 1Fh    ;Save the relevent bits
   355                              <1> .loopForNextSecond:
   356 00006214 E820000000          <1>     call .getTimeDateCompare
   357 00006219 74F9                <1>     je .loopForNextSecond
   358                              <1> .loopTillTimeElapsed:
   359 0000621B E819000000          <1>     call .getTimeDateCompare
   360 00006220 75F9                <1>     jne .loopTillTimeElapsed
   361                              <1>     ;Now we triple fault
   362 00006222 0F011D06000000      <1>     lidt [.resetIDT] ;Triple fault the machine
   363 00006229 EB00                <1>     jmp short .toHell
   364                              <1> .toHell:
   365 0000622B CD00                <1>     int 00h ;Call div by 0 to trigger reboot if not somehow failed yet
   366 0000622D EBFC                <1>     jmp short .toHell
   367                              <1> .resetIDT:
   368 0000622F 0000                <1>     dw 0
   369 00006231 0000000000000000    <1>     dq 0
   370                              <1> .getTimeDateCompare:
   371 00006239 53                  <1>     push rbx
   372 0000623A E8FEC7FFFF          <1>     call getDateAndTimeOld
   373 0000623F 5B                  <1>     pop rbx
   374 00006240 81E21F000000        <1>     and edx, 1Fh
   375 00006246 39DA                <1>     cmp edx, ebx
   376                              <1>     return
    13                              <2> %%_ret:
    14 00006248 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> .cpuextendederror:
   379 00006249 5A                  <1>     pop rdx
   380 0000624A 48FFC9              <1>     dec rcx
   381 0000624D 51                  <1>     push rcx
   382 0000624E 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   383 00006255 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   384 00006257 86D6                <1>     xchg dl, dh   
   385                              <1> .pr1:
   386 00006259 88D0                <1>     mov al, dl
   387 0000625B 52                  <1>     push rdx
   388 0000625C E882000000          <1>     call .printbyte
   389 00006261 5A                  <1>     pop rdx
   390 00006262 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   391 00006265 FEC9                <1>     dec cl
   392 00006267 75F0                <1>     jnz .pr1
   393                              <1> 
   394 00006269 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   395 00006270 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   396 00006275 E89B000000          <1>     call .writeExceptionMessage
   397                              <1> 
   398 0000627A 488D35C6010000      <1>     lea rsi, .fatal2
   399 00006281 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   400 00006286 E88A000000          <1>     call .writeExceptionMessage
   401                              <1> 
   402 0000628B 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   403 0000628C 48FFC9              <1>     dec rcx
   404 0000628F 0F84E4FEFFFF        <1>     jz .cpurollprint
   405                              <1> 
   406 00006295 B108                <1>     mov cl, 8   ;16 nybbles
   407 00006297 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   408 0000629A 488D3D(7A1A0000)    <1>     lea rdi, byteBuffer
   409                              <1> .pr2:
   410 000062A1 48C1C208            <1>     rol rdx, 8    ;Print rdx
   411 000062A5 88D0                <1>     mov al, dl
   412 000062A7 52                  <1>     push rdx
   413 000062A8 E836000000          <1>     call .printbyte
   414 000062AD 5A                  <1>     pop rdx
   415 000062AE FEC9                <1>     dec cl
   416 000062B0 75EF                <1>     jnz .pr2
   417                              <1> 
   418 000062B2 488D35(7A1A0000)    <1>     lea rsi, byteBuffer
   419 000062B9 BB10000000          <1>     mov ebx, 16
   420 000062BE E852000000          <1>     call .writeExceptionMessage
   421                              <1> 
   422 000062C3 488D357D010000      <1>     lea rsi, .fatal2
   423 000062CA BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   424 000062CF E841000000          <1>     call .writeExceptionMessage
   425                              <1> 
   426 000062D4 E9A0FEFFFF          <1>     jmp .cpurollprint
   427                              <1> 
   428                              <1> 
   429                              <1> .char:    ;Print a single character
   430 000062D9 488D1D6D000000      <1>     lea rbx, .ascii
   431 000062E0 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   432 000062E1 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   433 000062E2 C3                  <1>     ret
   434                              <1> .printbyte:
   435 000062E3 88C2                <1>     mov dl, al            ;save byte in dl
   436 000062E5 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   437 000062E9 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   438 000062EE 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   439 000062F2 E8E2FFFFFF          <1>     call .char
   440 000062F7 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   441 000062FA E8DAFFFFFF          <1>     call .char
   442 000062FF C3                  <1>     ret        
   443                              <1> 
   444                              <1> 
   445                              <1> .readInputChar:
   446 00006300 C605(EC040000)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   447 00006307 488D35(1B050000)    <1>     lea rsi, singleIObyt
   448 0000630E BB01000000          <1>     mov ebx, 1  ;Read one char
   449 00006313 EB07                <1>     jmp short .ioException
   450                              <1> .writeExceptionMessage:
   451                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   452 00006315 C605(EC040000)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   453                              <1> .ioException:
   454 0000631C C605(EA040000)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   455 00006323 66C705(ED040000)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   455 0000632B 00                  <1>
   456 0000632C 891D(00050000)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   457 00006332 488D1D(EA040000)    <1>     lea rbx, critReqHdr
   458 00006339 488935(F8040000)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   459 00006340 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   460 00006347 E822010000          <1>     call goDriver
   461                              <1>     return
    13                              <2> %%_ret:
    14 0000634C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> 
   463                              <1> 
   464                              <1> ;Error messages
   465 0000634D 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   465 00006356 39414243444546      <1>
   466 0000635D 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   466 00006366 20205343502F444F53- <1>
   466 0000636F 20455843455054494F- <1>
   466 00006378 4E2044455445435445- <1>
   466 00006381 44210D0A0A          <1>
   467                              <1> fatalt0L   equ $ - .fatalt0
   468                              <1> 
   469                              <1> .fatal1:   
   470 00006386 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   470 0000638F 656E7469616C6C7920- <1>
   470 00006398 666174616C20657272- <1>
   470 000063A1 6F7220686173206265- <1>
   470 000063AA 656E20646574656374- <1>
   470 000063B3 65640D0A            <1>
   471 000063B7 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   471 000063C0 68652063757272656E- <1>
   471 000063C9 74206170706C696361- <1>
   471 000063D2 74696F6E206D757374- <1>
   471 000063DB 206265207465726D69- <1>
   471 000063E4 6E617465642E0D0A0A  <1>
   472 000063ED 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   472 000063F6 20616E79206B657920- <1>
   472 000063FF 746F20636F6E74696E- <1>
   472 00006408 7565206F7220435452- <1>
   472 00006411 4C2B414C542B44454C- <1>
   472 0000641A 20746F207265737461- <1>
   472 00006423 727420746865206D61- <1>
   472 0000642C 6368696E652E        <1>
   473 00006432 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   473 0000643B 5354454D204552524F- <1>
   473 00006444 523A20              <1>
   474                              <1> fatal1L equ $ - .fatal1
   475                              <1> 
   476 00006447 203A20              <1> .fatal2:   db " : "
   477                              <1> fatal2L    equ $ - .fatal2
   478                              <1> 
   479                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   480 0000644A 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   480 00006453 4F532053595354454D- <1>
   480 0000645C 2053544F503A20      <1>
   481                              <1> fatalHaltL equ $ - .fatalHalt
   482 00006463 0D0A0A              <1> .crlf:  db CR,LF,LF
   483                              <1> crlfL  equ $ - .crlf
    42                                  %include "./src/Kernel/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 45h Int 46h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006466 B003                <1>     mov al, critFail
     7 00006468 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 0000646A 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 0000646E E8A3080000          <1>     call dosCrit2Enter
    16 00006473 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006476 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006479 E8A2080000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 0000647E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 0000647F 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006485 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006486 84C0                <1>     test al, al
    33 00006488 723F                <1>     jc .diskError
    34 0000648A 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006490 7337                <1>     jae .diskError
    36 00006492 50                  <1>     push rax
    37 00006493 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006495 E898040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 0000649A 58                  <1>     pop rax
    40 0000649B 7235                <1>     jc .error
    41 0000649D 8805(04070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 000064A3 488B2D(0D070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 000064AA 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    44 000064B2 750A                <1>     jnz .netError
    45 000064B4 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 000064B8 E853030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 000064BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 000064BE 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 000064C6 00                  <1>
    50 000064C7 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 000064C9 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 000064D1 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    54 000064D2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 000064D9 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 000064E0 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 000064E7 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 000064E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 000064E9 FE05(08040000)      <1>     inc byte [inDOS]
    63 000064EF FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 000064F0 FC                  <1>     cld ;Set string ops in the right direction
    65 000064F1 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000064F6 72F0                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    67 000064F8 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    68 000064FF 56                  <1>     push rsi
    69 00006500 50                  <1>     push rax
    70 00006501 488D35(1D050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006508 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 0000650A 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 0000650D 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006513 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006514 B800030000          <1>     mov eax, 0300h  
    79 00006519 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 0000651B 58                  <1>     pop rax
    82 0000651C 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 0000651D 729F                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000651F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 46h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006520 FA                  <1>     cli
    93 00006521 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006528 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 0000652F 55                  <1>     push rbp
    96 00006530 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006531 E8B3FFFFFF          <1>     call setupAbsDiskEntry
    98 00006536 7252                <1>     jc absDiskExit
    99 00006538 E8E6010000          <1>     call primReqWriteSetup
   100 0000653D EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 45h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 0000653F FA                  <1>     cli 
   107 00006540 488925(7A040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006547 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 0000654E 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 0000654F 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006550 E894FFFFFF          <1>     call setupAbsDiskEntry
   112 00006555 7233                <1>     jc absDiskExit
   113 00006557 E8D2010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 0000655C E859000000          <1>     call absDiskDriverCall
   118 00006561 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006563 8A05(C3040000)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006569 B480                <1>     mov ah, 80h ;Attachment failure
   123 0000656B 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 0000656D 741A                <1>     je .absExit
   125 0000656F B440                <1>     mov ah, 40h ;Seek error
   126 00006571 3C06                <1>     cmp al, 06h
   127 00006573 7414                <1>     je .absExit
   128 00006575 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006577 3C04                <1>     cmp al, 04h
   130 00006579 740E                <1>     je .absExit
   131 0000657B B404                <1>     mov ah, 04h ;Sector not found
   132 0000657D 3C08                <1>     cmp al, 08h
   133 0000657F 7408                <1>     je .absExit
   134 00006581 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006583 84C0                <1>     test al, al
   136 00006585 7402                <1>     je .absExit
   137 00006587 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006589 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 0000658A 5B                  <1>     pop rbx
   142 0000658B 5D                  <1>     pop rbp
   143 0000658C FA                  <1>     cli
   144 0000658D 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]
   145 00006594 FB                  <1>     sti ;Reenable interrupts
   146 00006595 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 0000659C 9C                  <1>     pushfq
   148 0000659D 5A                  <1>     pop rdx ;Get the current flags
   149 0000659E 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 000065A2 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 000065A7 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 000065A9 FA                  <1>     cli
   154 000065AA 52                  <1>     push rdx    ;Push the flags on the stack
   155 000065AB 51                  <1>     push rcx    ;Push the return address on the stack
   156 000065AC 9C                  <1>     pushfq
   157 000065AD 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 000065AF 89CA                <1>     mov edx, ecx
   159 000065B1 FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 000065B7 9D                  <1>     popfq
   161 000065B8 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 000065B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 000065BA 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 000065BB 8B0D(D6040000)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 000065C1 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 000065C5 E8A4FEFFFF          <1>     call goDriver   ;Make request
   176 000065CA 5E                  <1>     pop rsi
   177 000065CB 8B05(D6040000)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 000065D1 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 000065D3 0FB705(C3040000)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   180 000065DA 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 000065DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 000065DF 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 000065E3 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 000065E6 8805(04070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 000065EC E81F020000          <1>     call setWorkingDPB
   192 000065F1 57                  <1>     push rdi    ;Save the CDS ptr
   193 000065F2 E83A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 000065F7 5F                  <1>     pop rdi
   195 000065F8 7236                <1>     jc .exitBad ;Preserve CF
   196 000065FA 7533                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 000065FC 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006603 31C0                <1>     xor eax, eax
   200 00006605 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006608 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 0000660C 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Subst, Redir and Join are skipped as the
   205 00006613 66F7474300B0        <1>     test word [rdi + cds.wFlags], cdsRedirDrive | cdsSubstDrive | cdsJoinDrive
   206 00006619 7509                <1>     jnz .next
   207 0000661B 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 0000661F 7503                <1>     jne .next   ;Else, goto next
   209 00006621 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006624 4881C75B000000      <1>     add rdi, cds_size
   212 0000662B FFC9                <1>     dec ecx
   213 0000662D 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 0000662F F8                  <1>     clc
   216                              <1> .exitBad:
   217                              <1>     return
    13                              <2> %%_ret:
    14 00006630 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 00006631 E841010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   226                              <1> ;Return in rbx the req hdr address
   227 00006636 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000663A E82FFEFFFF          <1>     call goDriver   ;Request!
   229 0000663F 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   230 00006643 F7C700800000        <1>     test edi, drvErrStatus
   231 00006649 7575                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 0000664B 8A05(04070000)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 00006651 30E4                <1>     xor ah, ah
   235 00006653 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   236 00006656 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 00006659 780B                <1>     js short .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000665B 75D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   239 0000665D E88BA0FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 00006662 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 00006663 7206                <1>     jc short .resetDPB   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 00006665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 00006666 E8A6A0FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   247                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   248 0000666B C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   249 0000666F C605(E0190000)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250                              <1>     ;Get a buffer to read BPB into in rdi
   251 00006676 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   252 00006678 E8AAA2FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   253 0000667D 7239                <1>     jc short .exitBad    ;Immediately exit with the carry flag set
   254 0000667F 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   255                              <1> .repeatEP:
   256 00006683 E81B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   257 00006688 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   258 0000668C E8DDFDFFFF          <1>     call goDriver   ;Request!
   259 00006691 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   260 00006695 A900800000          <1>     test eax, drvErrStatus
   261 0000669A 7562                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 0000669C 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 000066A0 53                  <1>     push rbx
   265 000066A1 E8C7090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   266 000066A6 5B                  <1>     pop rbx
   267                              <1>     ;Adjust the buffer header information
   268 000066A7 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 000066AA 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 000066AD 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 000066B0 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 000066B3 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   273 000066B5 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   274                              <1> .exitBad:
   275 000066B8 C605(E0190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag
   276                              <1>     return
    13                              <2> %%_ret:
    14 000066BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> .diskDrvCritErrMedChk:
   278                              <1> ;Critical Errors fall through here
   279                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   280 000066C0 48893D(0F040000)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   281 000066C7 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   282 000066CE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   283 000066D1 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   284 000066D3 8825(67040000)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   285 000066D9 E83EF8FFFF          <1>     call criticalDOSError
   286 000066DE 488B3D(0F040000)    <1>     mov rdi, qword [xInt44RDI]
   287 000066E5 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   288 000066EC 3C01                <1>     cmp al, critRetry
   289 000066EE 0F843DFFFFFF        <1>     je .medChk
   290 000066F4 3C00                <1>     cmp al, critIgnore
   291 000066F6 0F844FFFFFFF        <1>     je .medChkIgnore
   292 000066FC F9                  <1>     stc ;Set error flag to indicate fail
   293                              <1>     return ;And exit from function with CF set
    13                              <2> %%_ret:
    14 000066FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 000066FE C605(E0190000)00    <1>     mov byte [diskChange], 0   ;Clear Disk Change flag (to prevent abort issues)
   299 00006705 C605(67040000)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   300 0000670C C605(E0190000)FF    <1>     mov byte [diskChange], -1  ;Set Disk Change flag again as we are back in
   301 00006713 E89BF7FFFF          <1>     call diskDevErr
   302 00006718 3C01                <1>     cmp al, critRetry
   303 0000671A 0F8463FFFFFF        <1>     je .repeatEP
   304                              <1>     ;Else we fail (Ignore=Fail here)
   305 00006720 F9                  <1>     stc ;Set error flag to indicate fail
   306 00006721 EB95                <1>     jmp short .exitBad ;And exit from function with CF set
   307                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   308                              <1> ;           Primitive Driver Requests
   309                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   310                              <1> ;First are Disk requests, then Char device requests
   311                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   312                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   313                              <1> 
   314                              <1> primReqWriteSetup:
   315 00006723 50                  <1>     push rax
   316 00006724 B408                <1>     mov ah, drvWRITE    ;Command code
   317 00006726 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   318 0000672C EB03                <1>     jmp short primReqRWCommon
   319                              <1> primReqReadSetup:
   320 0000672E 50                  <1>     push rax
   321 0000672F B404                <1>     mov ah, drvREAD
   322                              <1> primReqRWCommon:
   323                              <1> ;Sets up the IO request packet with:
   324                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   325                              <1> ; rbx = Data storage buffer ptr
   326                              <1> ; ecx = Number of sectors to transfer
   327                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   328                              <1> ; ~~~~ Set by entry function ~~~~ 
   329                              <1> ; ah = Command code
   330                              <1> ; All regs preserved EXCEPT rbx.
   331                              <1> ; Return: rbx = Transfer Address
   332 00006731 48891D(CE040000)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   333 00006738 890D(D6040000)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   334 0000673E C605(C0040000)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   335 00006745 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   336 0000674A 8905(C1040000)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   337 00006750 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   338 00006753 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   339                              <1>     ;Disk operations only here!
   340 00006755 488915(DA040000)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   341 0000675C 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   342 0000675F 8805(CD040000)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   343 00006765 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   344 00006768 8805(C1040000)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   345                              <1> primReqCommonExit:
   346                              <1> ;Returns in rbx the primary request header as these functions
   347                              <1> ; setup the request in the primary request header space
   348 0000676E 58                  <1>     pop rax
   349 0000676F 488D1D(C0040000)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   350                              <1>     return
    13                              <2> %%_ret:
    14 00006776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> primReqMedCheckSetup:
   353                              <1> ;Prepare the diskIO packet for mediacheck
   354                              <1> ;rbp has DPB pointer for device to check media on
   355 00006777 50                  <1>     push rax
   356 00006778 C605(C0040000)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   357 0000677F 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   358 00006782 8805(CD040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   359 00006788 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   360 0000678B 8805(C1040000)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   361 00006791 C605(C2040000)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   362 00006798 66C705(C3040000)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   362 000067A0 00                  <1>
   363 000067A1 EBCB                <1>     jmp short primReqCommonExit
   364                              <1> 
   365                              <1> primReqGetBPBSetup:
   366                              <1> ;rbp has DPB pointer for device
   367                              <1> ;rdi has sector buffer header pointer for transfer
   368 000067A3 50                  <1>     push rax
   369 000067A4 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   370 000067A8 48893D(CE040000)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   371 000067AF C605(C0040000)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   372 000067B6 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 000067B9 8805(CD040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   374 000067BF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   375 000067C2 8805(C1040000)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   376 000067C8 C605(C2040000)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   377 000067CF 66C705(C3040000)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   377 000067D7 00                  <1>
   378 000067D8 EB94                <1>     jmp short primReqCommonExit
   379                              <1> 
   380                              <1> primReqOpenSetup:
   381                              <1> ;al = unit number if a disk device. Undefined otherwise
   382 000067DA 50                  <1>     push rax
   383 000067DB B40D                <1>     mov ah, drvOPEN
   384 000067DD EB03                <1>     jmp short primReqOCcommon
   385                              <1> primReqCloseSetup:
   386                              <1> ;al = unit number if a disk device. Undefined otherwise
   387 000067DF 50                  <1>     push rax
   388 000067E0 B40E                <1>     mov ah, drvCLOSE
   389                              <1> primReqOCcommon:
   390 000067E2 C605(C0040000)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   391 000067E9 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   392 000067EA 8905(C1040000)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   393                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   394 000067F0 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   395                              <1> 
   396                              <1> secdReqCharIOReq:
   397                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   398                              <1> ;Input:
   399                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   400                              <1> ; ecx = Length of buffer
   401                              <1> ; rdi = Buffer pointer
   402                              <1> ;Output: 
   403                              <1> ; rbx = Transfer Address 
   404 000067F5 488D1D(96040000)    <1>     lea rbx, secdReqHdr
   405 000067FC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   406 000067FF 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   407 00006802 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   408 00006808 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   409 0000680C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000680F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> ;If the device which will process this request is a disk device
   412                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   413                              <1> ;Then we will read the appropriate byte from that buffer to the 
   414                              <1> ; singleIOByt buffer.
   415                              <1> ;Such a request will require additional setup with the following fields:
   416                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    43                                  %include "./src/Kernel/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00006810 48892D(05070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00006817 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00006818 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]
    21 0000681F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00006826 7409                <1>     je .net
    23 00006828 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 0000682E 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00006830 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00006831 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00006832 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 00006833 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 00006838 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 0000683A B80C110000          <1>     mov eax, 110Ch 
    43 0000683F CD4F                <1>     int 4Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00006841 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00006842 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00006849 E8B4040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 0000684E E88CFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 00006853 721C                <1>     jc .exit
    51 00006855 E8D5A2FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 0000685A 7215                <1>     jc .exit
    53 0000685C 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    54 0000685F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    55 00006861 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    56 00006864 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    57 00006867 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    58 00006869 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    59 0000686D 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    60 00006870 F8                  <1>     clc
    61                              <1> .exit:
    62 00006871 E896040000          <1>     call dosCrit1Exit
    63                              <1>     return
    13                              <2> %%_ret:
    14 00006876 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
    66                              <1> ;Input: al = Interrupt number
    67                              <1> ;Output: rbx = Interrupt Vector
    68 00006877 50                  <1>     push rax    ;Preserve rax
    69 00006878 FA                  <1>     cli ;Halt interrupts
    70 00006879 0F010D(C41A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    71 00006880 0FB6C0              <1>     movzx eax, al
    72 00006883 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    73 00006887 480305(C61A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    74 0000688E 31DB                <1>     xor ebx, ebx
    75 00006890 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    76 00006893 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    77 00006897 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    78 0000689B 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    79 0000689F 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    80 000068A2 FB                  <1>     sti
    81 000068A3 58                  <1>     pop rax
    82                              <1>     return
    13                              <2> %%_ret:
    14 000068A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    85                              <1> ;Returns ptr to user regs in rsi
    86 000068A5 488B35(7A040000)    <1>     mov rsi, qword [oldRSP]
    87                              <1>     return
    13                              <2> %%_ret:
    14 000068AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> walkDPBchain:
    90                              <1> ;Called with al = 0 based drive number
    91                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    92 000068AD 488B35(43000000)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    93                              <1> .walk:
    94 000068B4 4881FEFFFFFFFF      <1>     cmp rsi, -1
    95 000068BB 740A                <1>     je .exitBad
    96 000068BD 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    97 000068BF 7407                <1>     je .exit    ;Drive found
    98 000068C1 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    99 000068C5 EBED                <1>     jmp short .walk
   100                              <1> .exitBad:
   101 000068C7 F9                  <1>     stc
   102                              <1> .exit:
   103                              <1>     return
    13                              <2> %%_ret:
    14 000068C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> setDrive:   
   105                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   106                              <1> ;Input: al = 1-based drive number
   107                              <1> ;Output: al = 0-based drive number
   108                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   109                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   110                              <1> ;            set.
   111 000068C9 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   112 000068CE 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   113 000068D0 56                  <1>     push rsi
   114 000068D1 488B35(0D070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   115 000068D8 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   116 000068DE 5E                  <1>     pop rsi
   117 000068DF 7401                <1>     jz .exit
   118 000068E1 F9                  <1>     stc
   119                              <1> .exit:
   120                              <1>     return
    13                              <2> %%_ret:
    14 000068E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   123                              <1> ;Allows a redirector or subst/join to build a CDS
   124                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   125                              <1> ; volumes, that are made at system boot.
   126                              <1> ;Input: al = Drive Letter for drive
   127                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   128                              <1> ;Output: rdi = newly filled in workingCDS
   129                              <1> ;CF=NC => CDS valid and has a DPB
   130                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   131 000068E3 50                  <1>     push rax
   132 000068E4 2C40                <1>     sub al, "A"-1
   133 000068E6 3A05(77000000)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   134 000068EC 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   135 000068F3 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   136 000068F9 58                  <1>     pop rax
   137 000068FA 7235                <1>     jb .exit    ;Exit with CF=CY
   138 000068FC 50                  <1>     push rax
   139 000068FD 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   140 00006902 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   141 00006904 58                  <1>     pop rax
   142 00006905 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   143 0000690B C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   144 00006912 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   145 0000691A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   146                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   147 00006920 50                  <1>     push rax
   148 00006921 56                  <1>     push rsi
   149 00006922 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   150 00006924 E884FFFFFF          <1>     call walkDPBchain
   151 00006929 7204                <1>     jb .skipSettingDPB
   152 0000692B 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   153                              <1> .skipSettingDPB:
   154 0000692F 5E                  <1>     pop rsi
   155 00006930 58                  <1>     pop rax
   156                              <1> .exit:
   157                              <1>     return
    13                              <2> %%_ret:
    14 00006931 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> getCDS:     ;Int 4Fh AX=1219h
   160                              <1> ;Gets the device DPB and saves it in the DOS variable
   161                              <1> ;This can be called to get CDS for network drives too!
   162                              <1> ;Input: al = 1 based drive number
   163                              <1> ;Sets workingCDS var with the CDS for the device. 
   164                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   165 00006932 84C0                <1>     test al, al
   166 00006934 7508                <1>     jnz .skip
   167 00006936 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   168 0000693C FEC0                <1>     inc al
   169                              <1> .skip:
   170 0000693E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   171 00006940 56                  <1>     push rsi
   172 00006941 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   173 00006948 F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   174 0000694F 7423                <1>     jz .physDrive
   175                              <1>     ;Invokation via 21/5D00
   176 00006951 50                  <1>     push rax
   177 00006952 57                  <1>     push rdi
   178 00006953 488D3D(79060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   179 0000695A 48893D(0D070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   180 00006961 0441                <1>     add al, "A" ;Convert to a drive letter
   181 00006963 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   182 00006968 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   183 0000696E 5F                  <1>     pop rdi
   184 0000696F 58                  <1>     pop rax
   185 00006970 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   186 00006972 EB17                <1>     jmp short .exitOk   ;All oki
   187                              <1> .physDrive:
   188 00006974 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   189 00006979 7208                <1>     jc .exitBad
   190 0000697B 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   191 00006981 7508                <1>     jnz .exitOk ;Exit with flag cleared
   192                              <1>     ;Else Return to unknown error locus
   193                              <1> .exitBad:
   194 00006983 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   195                              <1> .exitBad1:
   196 0000698A F9                  <1>     stc
   197                              <1> .exitOk:
   198 0000698B 5E                  <1>     pop rsi
   199                              <1>     return
    13                              <2> %%_ret:
    14 0000698C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   202                              <1>     ;Gets the CDS for the current drive in al
   203                              <1>     ;Input: al = Drive number, 0 = A ...
   204                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   205                              <1>     ;        CF=CY => al not valid
   206 0000698D 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   207 00006993 7202                <1>     jb .ctn
   208 00006995 F9                  <1>     stc 
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006996 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> .ctn:
   211 00006997 50                  <1>     push rax
   212 00006998 52                  <1>     push rdx
   213 00006999 0FB6C0              <1>     movzx eax, al
   214 0000699C 48BE5B000000000000- <1>     mov rsi, cds_size
   214 000069A5 00                  <1>
   215 000069A6 31D2                <1>     xor edx, edx
   216 000069A8 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   217 000069AA 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   218 000069B1 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   219 000069B4 488935(0D070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   220 000069BB 5A                  <1>     pop rdx
   221 000069BC 58                  <1>     pop rax
   222 000069BD F8                  <1>     clc
   223                              <1>     return
    13                              <2> %%_ret:
    14 000069BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> 
   226                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   227                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   228                              <1> ;Input: AL = Char to normalise.
   229                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   230                              <1> ;If path separator, set ZF=ZE
   231 000069BF 3C5C                <1>     cmp al, "\"
   232 000069C1 7406                <1>     je .exit
   233 000069C3 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   234 000069C5 7502                <1>     jne .exit
   235 000069C7 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   236                              <1> .exit:
   237                              <1>     return
    13                              <2> %%_ret:
    14 000069C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> uppercaseCharAtPtr:
   240                              <1> ;Get the char pointed to by rsi and then fall
   241 000069CA AC                  <1>     lodsb
   242                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   243                              <1> ;Convert a lowercase char to uppercase
   244                              <1> ; Leave alone uppercase chars and invalid chars
   245                              <1> ;Input: al = Char to convert to uppercase
   246                              <1> ;Output: al = Processed char
   247 000069CB 53                  <1>     push rbx
   248 000069CC 3C61                <1>     cmp al, "a"
   249 000069CE 7214                <1>     jb .exit
   250 000069D0 3C7A                <1>     cmp al, "z"
   251 000069D2 7702                <1>     ja .checkExt
   252 000069D4 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   253                              <1> .checkExt:
   254 000069D6 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   255 000069D8 720A                <1>     jb .exit
   256 000069DA 2C80                <1>     sub al, 80h ;Turn into table offset
   257 000069DC 488D1D6F98FFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   258 000069E3 D7                  <1>     xlatb   ;Get converted extended byte into al
   259                              <1> .exit:
   260 000069E4 50                  <1>     push rax    ;Save al temporarily
   261 000069E5 488D1D189AFFFF      <1>     lea rbx, asciiCharProperties
   262 000069EC D7                  <1>     xlatb   ;Get the signature in al
   263 000069ED A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   264 000069EF 58                  <1>     pop rax
   265 000069F0 5B                  <1>     pop rbx
   266                              <1>     return
    13                              <2> %%_ret:
    14 000069F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   267                              <1> 
   268                              <1> strlen2:    ;Int 4Fh, AX=1212h
   269                              <1> ;Entry point for Multiplex
   270 000069F2 57                  <1>     push rdi
   271 000069F3 4889F7              <1>     mov rdi, rsi
   272 000069F6 E802000000          <1>     call strlen
   273 000069FB 5F                  <1>     pop rdi
   274                              <1>     return
    13                              <2> %%_ret:
    14 000069FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> strlen: 
   276                              <1> ;Gets the length of a ASCIIZ string
   277                              <1> ;Input: rdi = Source buffer
   278                              <1> ;Output: ecx = Length of string
   279 000069FD 50                  <1>     push rax
   280 000069FE 57                  <1>     push rdi
   281 000069FF 30C0                <1>     xor al, al
   282 00006A01 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   283 00006A03 FFC9                <1>     dec ecx ;rcx = -1
   284 00006A05 F2AE                <1>     repne scasb
   285 00006A07 F7D1                <1>     not ecx
   286 00006A09 5F                  <1>     pop rdi
   287 00006A0A 58                  <1>     pop rax
   288                              <1>     return
    13                              <2> %%_ret:
    14 00006A0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> 
   290                              <1> strcpy:
   291                              <1> ;Copies a null terminated string from rsi to rdi
   292 00006A0C AC                  <1>     lodsb
   293 00006A0D AA                  <1>     stosb
   294 00006A0E 84C0                <1>     test al, al
   295                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006A10 74F9                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   296 00006A12 EBF8                <1>     jmp short strcpy
   297                              <1> 
   298                              <1> strcmp:
   299                              <1> ;Compares two ASCIIZ strings for equality.
   300                              <1> ;Input: rsi = First string
   301                              <1> ;       rdi = Second string
   302                              <1> ;       ecx = Number of bytes to compare
   303                              <1> ;Output: ZF=ZE => Equal
   304                              <1> ;        ZF=NZ => Not equal
   305 00006A14 56                  <1>     push rsi
   306 00006A15 57                  <1>     push rdi
   307 00006A16 F3A6                <1>     repe cmpsb
   308 00006A18 5F                  <1>     pop rdi
   309 00006A19 5E                  <1>     pop rsi
   310                              <1>     return
    13                              <2> %%_ret:
    14 00006A1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> 
   313                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   314                              <1> ;Converts lowercase to uppercase and / to "\"
   315                              <1> ;Input: rsi = Source buffer
   316                              <1> ;       rdi = Buffer to place normalised path
   317 00006A1B 50                  <1>     push rax
   318 00006A1C 56                  <1>     push rsi
   319 00006A1D 57                  <1>     push rdi
   320                              <1> .scan:
   321 00006A1E AC                  <1>     lodsb
   322 00006A1F 84C0                <1>     test al, al
   323 00006A21 740D                <1>     jz .exit
   324 00006A23 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   325 00006A28 E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   326 00006A2D AA                  <1>     stosb
   327 00006A2E EBEE                <1>     jmp short .scan
   328                              <1> .exit:
   329 00006A30 5F                  <1>     pop rdi
   330 00006A31 5E                  <1>     pop rsi
   331 00006A32 58                  <1>     pop rax
   332                              <1>     return
    13                              <2> %%_ret:
    14 00006A33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   335                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   336                              <1> ;Input: rsi = One ASCIIZ pathname
   337                              <1> ;       rdi = Second ASCIIZ pathname
   338                              <1> ;Return:
   339                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   340 00006A34 50                  <1>     push rax
   341 00006A35 56                  <1>     push rsi
   342 00006A36 57                  <1>     push rdi
   343                              <1> .scan:
   344 00006A37 8A06                <1>     mov al, byte [rsi]
   345 00006A39 84C0                <1>     test al, al
   346 00006A3B 7424                <1>     jz .endOfString
   347 00006A3D 8A27                <1>     mov ah, byte [rdi]
   348 00006A3F E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   349 00006A44 7410                <1>     jz .pathseps
   350 00006A46 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   351 00006A4A 38E0                <1>     cmp al, ah
   352 00006A4C 7515                <1>     jnz .exit
   353                              <1> .nextChar:
   354 00006A4E 48FFC6              <1>     inc rsi
   355 00006A51 48FFC7              <1>     inc rdi
   356 00006A54 EBE1                <1>     jmp short .scan
   357                              <1> .pathseps:
   358 00006A56 86E0                <1>     xchg ah, al
   359 00006A58 E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   360 00006A5D 7504                <1>     jnz .exit
   361 00006A5F EBED                <1>     jmp short .nextChar ;Else get the next chars
   362                              <1> .endOfString:
   363 00006A61 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   364                              <1> .exit:
   365 00006A63 5F                  <1>     pop rdi
   366 00006A64 5E                  <1>     pop rsi
   367 00006A65 58                  <1>     pop rax
   368                              <1>     return
    13                              <2> %%_ret:
    14 00006A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> checkPathspecOK:
   370                              <1> ;Input:
   371                              <1> ;rsi -> points to a path to verify if it is ok.
   372                              <1> ;Output:
   373                              <1> ;CF=NC => The path is totally clean and ok to use.
   374                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   375                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   376                              <1> ; and depending on method of invokation and caller, may be permissable.
   377                              <1> ;We accept lc and uc characters in this check function.
   378 00006A67 50                  <1>     push rax
   379 00006A68 53                  <1>     push rbx    ;Use rbx as the return flag status
   380 00006A69 56                  <1>     push rsi
   381 00006A6A 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   382                              <1> 
   383                              <1>     ;Start by getting the length of the ASCIIZ string.
   384 00006A6C 51                  <1>     push rcx
   385 00006A6D 57                  <1>     push rdi
   386 00006A6E 4889F7              <1>     mov rdi, rsi
   387 00006A71 E887FFFFFF          <1>     call strlen
   388 00006A76 81F940000000        <1>     cmp ecx, 64    ;Check
   389 00006A7C 5F                  <1>     pop rdi
   390 00006A7D 59                  <1>     pop rcx
   391 00006A7E 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   392                              <1>     ;First we verify if our path is relative or canonical (absolute)
   393 00006A80 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   394 00006A83 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   395 00006A87 7416                <1>     je .netName
   396 00006A89 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   397 00006A8D 7410                <1>     je .netName
   398 00006A8F 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   399 00006A92 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   400                              <1>     ;Here if relative
   401 00006A94 F605(FD060000)FF    <1>     test byte [dosInvoke], -1
   402 00006A9B 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   403 00006A9D EB1F                <1>     jmp short .okToScan
   404                              <1> .netName:
   405 00006A9F 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   407                              <1> .diskPath:
   408 00006AA6 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   409 00006AAD F605(FD060000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   410 00006AB4 7408                <1>     jz .okToScan
   411 00006AB6 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   412 00006AB7 E803FFFFFF          <1>     call swapPathSeparator
   413 00006ABC 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   414                              <1> .okToScan:
   415 00006ABE AC                  <1>     lodsb   
   416 00006ABF 84C0                <1>     test al, al ;End of path char?
   417 00006AC1 7430                <1>     jz .exit
   418 00006AC3 E8F7FEFFFF          <1>     call swapPathSeparator
   419 00006AC8 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   420 00006ACA 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   421 00006ACC 7411                <1>     je .wcFound
   422 00006ACE 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   423 00006AD0 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   424                              <1>     ;Else we check that the char in al is an acceptable char
   425 00006AD2 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   426 00006AD4 74E8                <1>     je .okToScan
   427 00006AD6 E831000000          <1>     call checkCharValid
   428 00006ADB 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   429 00006ADD EBDF                <1>     jmp short .okToScan
   430                              <1> .wcFound:
   431 00006ADF BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   432 00006AE4 EBD8                <1>     jmp short .okToScan
   433                              <1> .wcCheck:
   434                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   435 00006AE6 F7C340000000        <1>     test ebx, 40h
   436 00006AEC 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   437                              <1>     ;Else fall through in error
   438                              <1> .badExit:
   439 00006AEE BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   440                              <1> .exit:
   441 00006AF3 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   442 00006AF4 9D                  <1>     popfq
   443 00006AF5 5E                  <1>     pop rsi
   444 00006AF6 5B                  <1>     pop rbx
   445 00006AF7 58                  <1>     pop rax
   446                              <1>     return
    13                              <2> %%_ret:
    14 00006AF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> 
   448                              <1> scanPathWC:
   449                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   450                              <1> ; even in the final path componant.
   451                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   452                              <1> ;Output: CF=NC => No wildcards present
   453                              <1> ;        CF=CY => Wildcards found
   454 00006AF9 50                  <1>     push rax
   455 00006AFA 56                  <1>     push rsi
   456                              <1> .scan:
   457 00006AFB AC                  <1>     lodsb
   458 00006AFC 84C0                <1>     test al, al
   459 00006AFE 7409                <1>     jz .exit
   460 00006B00 3C3F                <1>     cmp al, "?"
   461 00006B02 7404                <1>     je .wcFnd
   462 00006B04 3C2A                <1>     cmp al, "*"
   463 00006B06 75F3                <1>     jne .scan
   464                              <1> .wcFnd:
   465 00006B08 F9                  <1>     stc
   466                              <1> .exit:
   467 00006B09 5E                  <1>     pop rsi
   468 00006B0A 58                  <1>     pop rax
   469                              <1>     return
    13                              <2> %%_ret:
    14 00006B0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> checkCharValid:
   472                              <1> ;If ZF=ZE => Invalid Char
   473                              <1> ;If ZF=NZ => Valid Char
   474 00006B0C 51                  <1>     push rcx
   475 00006B0D 57                  <1>     push rdi
   476 00006B0E B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   477 00006B13 488D3D6A99FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   478 00006B1A F2AE                <1>     repne scasb ;Scan. Stop when equal
   479 00006B1C 5F                  <1>     pop rdi
   480 00006B1D 59                  <1>     pop rcx
   481                              <1>     return
    13                              <2> %%_ret:
    14 00006B1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> 
   484                              <1> skipSpacesAndTabs:
   485                              <1> ;Input: rsi -> String 
   486                              <1> ;Output: rsi -> First non Space or Tab type char
   487 00006B1F AC                  <1>     lodsb
   488 00006B20 E815000000          <1>     call isCharSpaceType
   489 00006B25 74F8                <1>     jz skipSpacesAndTabs
   490 00006B27 48FFCE              <1>     dec rsi
   491                              <1>     return
    13                              <2> %%_ret:
    14 00006B2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> isCharDelimType:
   494                              <1> ;Input: al = Char to check properties of
   495                              <1> ;Output:    ZF=NZ => Char not name delimiter
   496                              <1> ;           ZF=ZE => Char delimiter
   497 00006B2B 50                  <1>     push rax
   498 00006B2C 53                  <1>     push rbx
   499 00006B2D 488D1DD098FFFF      <1>     lea rbx, asciiCharProperties
   500 00006B34 D7                  <1>     xlatb
   501 00006B35 A802                <1>     test al, 2
   502 00006B37 5B                  <1>     pop rbx
   503 00006B38 58                  <1>     pop rax
   504                              <1>     return
    13                              <2> %%_ret:
    14 00006B39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> isCharSpaceType:
   507                              <1> ;Input: al = Char to check properties of
   508                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   509                              <1> ;           ZF=ZE => Char Space or Tab
   510 00006B3A 50                  <1>     push rax
   511 00006B3B 53                  <1>     push rbx
   512 00006B3C 488D1DC198FFFF      <1>     lea rbx, asciiCharProperties
   513 00006B43 D7                  <1>     xlatb
   514 00006B44 A804                <1>     test al, 4
   515 00006B46 5B                  <1>     pop rbx
   516 00006B47 58                  <1>     pop rax
   517                              <1>     return
    13                              <2> %%_ret:
    14 00006B48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> 
   519                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   520                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   521                              <1> ;Input: rsi = One pointer
   522                              <1> ;       rdi = Second pointer
   523                              <1> ;Output: ZF=ZE if equal
   524                              <1> ;        ZF=NZ if not
   525 00006B49 4839FE              <1>     cmp rsi, rdi
   526                              <1>     return
    13                              <2> %%_ret:
    14 00006B4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkPathNet:
   529                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   530                              <1> ;Output: ZF=ZE => Path is a net path
   531                              <1> ;        ZF=NZ => Path is not a net path
   532 00006B4D 50                  <1>     push rax
   533 00006B4E 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   534 00006B51 E869FEFFFF          <1>     call swapPathSeparator
   535 00006B56 7505                <1>     jnz .exit
   536 00006B58 E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   537                              <1> .exit:
   538 00006B5D 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 00006B5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> getCharDevDriverPtr:
   542                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   543                              <1> ;Input: rax = Device Driver name (space padded)
   544                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   545 00006B5F 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   546                              <1> .lp:
   547 00006B66 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   548                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00006B6A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   549 00006B6C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   550 00006B6F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   551 00006B76 75EE                <1>     jne .lp ;If not loop
   552 00006B78 F9                  <1>     stc ;Else bad exit
   553                              <1>     return
    13                              <2> %%_ret:
    14 00006B79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
    44                                  %include "./src/Kernel/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 41h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 00006B7A FA                  <1>     cli ;Halt external interrupts
    19 00006B7B FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00006B7C 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00006B7F 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 00006B85 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00006B88 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 00006B8A 0F847C020000        <1>     je ctrlBreakCheck
    26 00006B90 80FC64              <1>     cmp ah, 64h
    27 00006B93 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    28 00006B99 7724                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    29 00006B9B 80FC51              <1>     cmp ah, 51h
    30 00006B9E 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 00006BA4 80FC62              <1>     cmp ah, 62h
    32 00006BA7 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    33 00006BAD 80FC50              <1>     cmp ah, 50h
    34 00006BB0 0F8484020000        <1>     je setCurrProcessID
    35 00006BB6 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 00006BB9 0F849E020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 00006BBF E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 00006BC4 48891D(82040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 00006BCB 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 00006BD3 00                  <1>
    41 00006BD4 488B05(7A040000)    <1>     mov rax, qword [oldRSP]
    42 00006BDB 488905(6A040000)    <1>     mov qword [oldoldRSP], rax
    43 00006BE2 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 00006BE8 488925(7A040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 00006BEF C605(FD060000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 00006BF6 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 00006BFD 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 00006C01 58                  <1>     pop rax     ;Get old rax back
    51 00006C02 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .abortEP:
    53                              <1> .charFun0CEP:
    54                              <1> .serverEP:
    55 00006C03 488D25(080D0000)    <1>     lea rsp, critStakTop
    56 00006C0A FB                  <1>     sti         ;Reenable interrupts
    57                              <1> 
    58 00006C0B 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    59 00006C0D 881D(93040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    60 00006C13 C605(94040000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    61 00006C1A 881D(69040000)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    62 00006C20 881D(8A040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    63                              <1> 
    64 00006C26 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    65 00006C27 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    66 00006C29 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    67 00006C2B 488D058698FFFF      <1>     lea rax, kDispTbl
    68 00006C32 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    69 00006C35 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    70 00006C39 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    71 00006C3C 58                  <1>     pop rax
    72                              <1> 
    73 00006C3D 84E4                <1>     test ah, ah     ;Simple Terminate function?
    74 00006C3F 741C                <1>     jz .fddiskOp
    75 00006C41 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    76 00006C44 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    77 00006C46 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    78 00006C49 7712                <1>     ja .fddiskOp
    79                              <1> ;Char operations here
    80 00006C4B F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    81 00006C52 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    82 00006C54 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    83 00006C5B EB40                <1>     jmp short .fdGoToFunction
    84                              <1> .fddiskOp:
    85                              <1>     ;Disk operations go here
    86                              <1>     ;Save rax on entry to a disk funciton
    87 00006C5D 488905(33040000)    <1>     mov qword [oldRAX], rax
    88                              <1>     ;Clear up error info
    89 00006C64 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    90 00006C6B C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    91 00006C72 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    92                              <1> 
    93 00006C79 50                  <1>     push rax
    94 00006C7A B482                <1>     mov ah, 82h ;Cancel all critical section!
    95 00006C7C CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
    96 00006C7E 58                  <1>     pop rax
    97                              <1> 
    98 00006C7F C605(94040000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
    99 00006C86 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   100 00006C8D F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   101 00006C94 7407                <1>     jz .fdGoToFunction
   102                              <1> ; HANDLE CTRL+BREAK HERE!
   103 00006C96 50                  <1>     push rax
   104 00006C97 E8D9B7FFFF          <1>     call checkBreak   ; Check for a ^C
   105 00006C9C 58                  <1>     pop rax
   106                              <1> .fdGoToFunction:
   107 00006C9D 48871D(82040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   108                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   109                              <1>     ;
   110                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   111                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   112                              <1>     ;
   113                              <1>     %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1>     %endif
   119 00006CA4 FF15(82040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1>     %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1>     %endif
   130                              <1>     %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1>     %endif
   136                              <1> .fdExit:
   137 00006CAA FA                  <1>     cli     ;Redisable interrupts
   138 00006CAB FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 00006CB1 488B25(7A040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00006CB8 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00006CBB 488B05(6A040000)    <1>     mov rax, qword [oldoldRSP]
   142 00006CC2 488905(7A040000)    <1>     mov qword [oldRSP], rax
   143 00006CC9 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 00006CCE 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 00006CD0 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 00006CD2 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00006CD4 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00006CDA 58                  <1>     pop rax
   152 00006CDB 5B                  <1>     pop rbx
   153 00006CDC 59                  <1>     pop rcx
   154 00006CDD 5A                  <1>     pop rdx
   155 00006CDE 5E                  <1>     pop rsi
   156 00006CDF 5F                  <1>     pop rdi
   157 00006CE0 5D                  <1>     pop rbp
   158 00006CE1 4158                <1>     pop r8
   159 00006CE3 4159                <1>     pop r9
   160 00006CE5 FF25(72040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00006CEB 8F05(72040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 00006CF1 4151                <1>     push r9
   164 00006CF3 4150                <1>     push r8
   165 00006CF5 55                  <1>     push rbp
   166 00006CF6 57                  <1>     push rdi
   167 00006CF7 56                  <1>     push rsi
   168 00006CF8 52                  <1>     push rdx
   169 00006CF9 51                  <1>     push rcx
   170 00006CFA 53                  <1>     push rbx
   171 00006CFB 50                  <1>     push rax
   172 00006CFC FF25(72040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 00006D02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 00006D03 B801800000          <1>     mov eax, 8001h
   176 00006D08 CD4A                <1>     int 4ah
   177 00006D0A 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 00006D0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 00006D0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 00006D0D B801810000          <1>     mov eax, 8101h
   182 00006D12 CD4A                <1>     int 4ah
   183 00006D14 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00006D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00006D16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00006D17 B802800000          <1>     mov eax, 8002h
   188 00006D1C CD4A                <1>     int 4ah
   189 00006D1E 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 00006D1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 00006D20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 00006D21 B802810000          <1>     mov eax, 8102h
   194 00006D26 CD4A                <1>     int 4ah
   195 00006D28 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00006D29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 00006D2A 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006D2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 00006D2D E836000000          <1>     call xLatError
   207 00006D32 B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 00006D34 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 00006D35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 00006D36 E86AFBFFFF          <1>     call getUserRegs
   216 00006D3B 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 00006D3D EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 00006D3F E861FBFFFF          <1>     call getUserRegs
   222 00006D44 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 00006D47 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 00006D4B F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 00006D4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 00006D4D 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 00006D50 E813000000          <1>     call xLatError
   237 00006D55 E891000000          <1>     call checkFail
   238 00006D5A E846FBFFFF          <1>     call getUserRegs
   239 00006D5F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   240 00006D62 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   241 00006D66 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   242                              <1>     return
    13                              <2> %%_ret:
    14 00006D67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> xLatError:
   244                              <1> ;Translates the error code given in ax and sets error code in the var
   245                              <1> ; Input: ax = Extended Error Code
   246                              <1> ; Output: ax = Potentially translated Error Code
   247                              <1> ;         [errorExCde] = Original Error Code
   248                              <1> ;Preserves all registers except ax
   249                              <1> ;AH is always returned as 0
   250 00006D68 53                  <1>     push rbx
   251 00006D69 51                  <1>     push rcx
   252 00006D6A 56                  <1>     push rsi
   253 00006D6B 668905(0B040000)    <1>     mov word [errorExCde], ax
   254 00006D72 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   255 00006D74 488D35EE92FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   256                              <1> .readEntry:
   257 00006D7B 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   258 00006D7D 3CFF                <1>     cmp al, -1
   259 00006D7F 741F                <1>     je .skipXlat
   260 00006D81 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   261 00006D87 7408                <1>     je .found
   262                              <1>     ;Here, entry not found, goto next entry
   263 00006D89 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   264 00006D8C 4801C6              <1>     add rsi, rax    ;Goto next entry
   265 00006D8F EBEA                <1>     jmp short .readEntry
   266                              <1> .found:
   267                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   268 00006D91 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   269                              <1> .mainSearch:
   270 00006D94 AC                  <1>     lodsb   ;Get one byte into al
   271 00006D95 38C3                <1>     cmp bl, al  ;Check against the error code
   272 00006D97 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   273 00006D99 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   274 00006D9B 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   275                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   276 00006D9D 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   277                              <1> .skipXlat:
   278 00006DA0 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   279 00006DA2 5E                  <1>     pop rsi
   280 00006DA3 59                  <1>     pop rcx
   281 00006DA4 5B                  <1>     pop rbx
   282                              <1>     return
    13                              <2> %%_ret:
    14 00006DA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   284                              <1> ;Looks up the error code in the variable and sets the other error vars
   285                              <1> ;Called with the lookup table in rsi
   286                              <1> ;All regs preserved
   287 00006DA6 50                  <1>     push rax
   288 00006DA7 53                  <1>     push rbx
   289 00006DA8 51                  <1>     push rcx
   290 00006DA9 56                  <1>     push rsi
   291 00006DAA 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   292 00006DB1 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   293                              <1> .readEntry:
   294 00006DB6 AD                  <1>     lodsd   ;Read the dword table entry into eax
   295 00006DB7 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   296 00006DBC 7428                <1>     je .exit    
   297 00006DBE 38D8                <1>     cmp al, bl  ;Compare the error codes
   298 00006DC0 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   299 00006DC2 D3E8                <1>     shr eax, cl
   300 00006DC4 3CFF                <1>     cmp al, -1
   301 00006DC6 7406                <1>     je .skipClass
   302 00006DC8 8805(0E040000)      <1>     mov byte [errorClass], al
   303                              <1> .skipClass:
   304 00006DCE D3E8                <1>     shr eax, cl
   305 00006DD0 3CFF                <1>     cmp al, -1
   306 00006DD2 7406                <1>     je .skipAct
   307 00006DD4 8805(0D040000)      <1>     mov byte [errorAction], al
   308                              <1> .skipAct:
   309 00006DDA D3E8                <1>     shr eax, cl
   310 00006DDC 3CFF                <1>     cmp al, -1
   311 00006DDE 7406                <1>     je .exit
   312 00006DE0 8805(0A040000)      <1>     mov byte [errorLocus], al
   313                              <1> .exit:
   314 00006DE6 5E                  <1>     pop rsi
   315 00006DE7 59                  <1>     pop rcx
   316 00006DE8 5B                  <1>     pop rbx
   317 00006DE9 58                  <1>     pop rax
   318                              <1>     return
    13                              <2> %%_ret:
    14 00006DEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   319                              <1> checkFail:
   320                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   321                              <1> ; and swaps the var error code if so
   322 00006DEB 803D(69040000)00    <1>     cmp byte [Int44Fail], 0
   323 00006DF2 7509                <1>     jnz .skipFail
   324 00006DF4 66C705(0B040000)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   324 00006DFC 00                  <1>
   325                              <1> .skipFail:
   326 00006DFD 56                  <1>     push rsi
   327 00006DFE 488D350093FFFF      <1>     lea rsi, extErrTbl
   328 00006E05 E89CFFFFFF          <1>     call setErrorVars
   329 00006E0A 5E                  <1>     pop rsi
   330                              <1>     return
    13                              <2> %%_ret:
    14 00006E0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> ;========================================:
   332                              <1> ;      Reentrant Kernel Functions        :
   333                              <1> ;========================================:
   334                              <1> ctrlBreakCheck:    ;ah = 33h
   335 00006E0C 84C0                <1>     test al, al
   336 00006E0E 7508                <1>     jnz .cbcget  ;Get the state or other functions
   337 00006E10 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   338 00006E16 48CF                <1>     iretq
   339                              <1> .cbcget:
   340 00006E18 3C02                <1>     cmp al, 02h
   341 00006E1A 771A                <1>     ja .cbcBad
   342 00006E1C 740D                <1>     jz .cbcxchg ;Function 2
   343 00006E1E 52                  <1>     push rdx
   344 00006E1F 80E201              <1>     and dl, 1   ;Get only the bottom bit
   345 00006E22 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   346 00006E28 5A                  <1>     pop rdx
   347 00006E29 48CF                <1>     iretq
   348                              <1> .cbcxchg:
   349 00006E2B 80E201              <1>     and dl, 1
   350 00006E2E 8615(32040000)      <1>     xchg byte [breakFlag], dl
   351 00006E34 48CF                <1>     iretq
   352                              <1> .cbcBad:
   353 00006E36 B0FF                <1>     mov al, -1
   354 00006E38 48CF                <1>     iretq
   355                              <1> 
   356                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   357 00006E3A 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   358 00006E41 48CF                <1>     iretq
   359                              <1> 
   360                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   361 00006E43 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   362 00006E4A 48CF                <1>     iretq
   363                              <1> 
   364                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   365 00006E4C 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   366 00006E53 48CF                <1>     iretq
   367                              <1> 
   368                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   369 00006E55 8805(E1190000)      <1>     mov byte [lookahead], al    
   370 00006E5B 48CF                <1>     iretq
   371                              <1> 
   372                              <1> systemServices: ;ah = 61h
   373                              <1> ;All pointers returned in rdx
   374                              <1> ;al = 0 -> Get Environment pointer in rdx
   375                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   376                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   377                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   378                              <1> ;                        Else, rdx -> Filename
   379 00006E5D 3C01                <1>     cmp al, 1
   380 00006E5F 7453                <1>     je short .getCmdLineArgs
   381 00006E61 3C02                <1>     cmp al, 2
   382 00006E63 760C                <1>     jbe .getEnvPtr
   383 00006E65 B801000000          <1>     mov eax, errInvFnc
   384                              <1> .exitBad:
   385 00006E6A 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   386 00006E6F 48CF                <1>     iretq
   387                              <1> .getEnvPtr:
   388                              <1>     ;Gets the environment pointer in rdx
   389 00006E71 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   390 00006E78 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   391 00006E7C 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   392                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   393                              <1> ; pass the ptr to the word after.
   394 00006E7E FA                  <1>     cli
   395 00006E7F 51                  <1>     push rcx
   396 00006E80 31C9                <1>     xor ecx, ecx
   397 00006E82 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   398                              <1> .gep0:
   399 00006E87 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   400 00006E8C 740D                <1>     je short .gep1
   401 00006E8E 48FFC2              <1>     inc rdx         ;Go to the next byte
   402 00006E91 FFC9                <1>     dec ecx
   403 00006E93 75F2                <1>     jnz short .gep0
   404                              <1> .gep00:
   405                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   406 00006E95 59                  <1>     pop rcx
   407 00006E96 FB                  <1>     sti
   408 00006E97 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   409 00006E99 EBCF                <1>     jmp short .exitBad
   410                              <1> .gep1:
   411 00006E9B 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   412 00006EA2 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   413 00006EA7 75EC                <1>     jne .gep00
   414 00006EA9 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   415 00006EB0 59                  <1>     pop rcx
   416 00006EB1 FB                  <1>     sti
   417 00006EB2 EB0B                <1>     jmp short .exitOk
   418                              <1> .getCmdLineArgs:
   419 00006EB4 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   420 00006EBB 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   421                              <1> .exitOk:
   422 00006EBF 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   423 00006EC4 48CF                <1>     iretq
   424                              <1> 
   425                              <1> 
   426                              <1> ;========================================:
   427                              <1> ;            Kernel Functions            :
   428                              <1> ;========================================:
   429                              <1> diskReset:         ;ah = 0Dh
   430                              <1> ;Flush all dirty buffers to disk
   431 00006EC6 E837FEFFFF          <1>     call dosCrit1Enter
   432 00006ECB 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   433                              <1> .drCheckBuffer:
   434 00006ED2 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   435 00006ED6 7407                <1>     jz .drGotoNextBuffer
   436                              <1> .drFlushBuffer:
   437 00006ED8 E84597FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   438 00006EDD 720C                <1>     jc .drExit
   439                              <1> .drGotoNextBuffer:
   440 00006EDF 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   441 00006EE2 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   442 00006EE9 75E7                <1>     jne .drCheckBuffer
   443                              <1> .drExit:
   444 00006EEB E81CFEFFFF          <1>     call dosCrit1Exit
   445 00006EF0 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   446 00006EF5 CD4F                <1>     int 4fh
   447                              <1>     return
    13                              <2> %%_ret:
    14 00006EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> 
   449                              <1> selectDisk:        ;ah = 0Eh
   450                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   451 00006EF8 88D0                <1>     mov al, dl
   452 00006EFA FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   453 00006EFC E8C8F9FFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   454 00006F01 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   455 00006F03 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   456                              <1> .skipSettingCurrent:
   457 00006F09 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   458                              <1>     return
    13                              <2> %%_ret:
    14 00006F10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   461 00006F11 8A05(31040000)      <1>     mov al, byte [currentDrv]
   462                              <1>     return
    13                              <2> %%_ret:
    14 00006F17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> FATinfoDefault:    ;ah = 1Bh
   465 00006F18 30D2                <1>     xor dl, dl
   466                              <1> FATinfoDevice:     ;ah = 1Ch
   467                              <1> ;Input: dl = 1 based drive number
   468                              <1> ;Output:
   469                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   470                              <1> ;cx = bytes per sector
   471                              <1> ;edx = total number of clusters
   472                              <1> ;rbx = Ptr to media ID byte
   473 00006F1A 88D0                <1>     mov al, dl  ;Move drive number into al
   474 00006F1C E811FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   475 00006F21 7307                <1>     jnc .fidCDSFound
   476 00006F23 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   477 00006F28 EB2E                <1>     jmp short .error 
   478                              <1> .fidCDSFound:
   479 00006F2A E804F9FFFF          <1>     call getDiskData
   480 00006F2F 7227                <1>     jc .error
   481                              <1> ;Now we have that:
   482                              <1> ;al = sectors per cluster
   483                              <1> ;ah = media ID byte
   484                              <1> ;ebx = total clusters
   485                              <1> ;cx = bytes per sector
   486                              <1> ;edx = number of available clusters
   487 00006F31 E86FF9FFFF          <1>     call getUserRegs
   488 00006F36 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   489 00006F3C 30E4                <1>     xor ah, ah
   490 00006F3E 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   491 00006F41 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   492 00006F45 488D1D(91070000)    <1>     lea rbx, mediaByte
   493 00006F4C 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   494 00006F50 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   495                              <1> .badExit:
   496 00006F54 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   497                              <1>     return
    13                              <2> %%_ret:
    14 00006F57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   498                              <1> .error:
   499 00006F58 E8F0FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   500 00006F5D 66B8FFFF            <1>     mov ax, -1
   501 00006F61 EBF1                <1>     jmp short .badExit
   502                              <1> 
   503                              <1> setIntVector:      ;ah = 25h
   504                              <1> ;Called with:
   505                              <1> ;   rdx = Pointer to interrupt handler
   506                              <1> ;   al = Interrupt number
   507 00006F63 FA                  <1>     cli ;Halt interrupts
   508 00006F64 0F010D(C41A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   509 00006F6B 0FB6C0              <1>     movzx eax, al
   510 00006F6E 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   511 00006F72 480305(C61A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   512 00006F79 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   513 00006F7C 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   514 00006F80 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   515 00006F84 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   516 00006F88 895008              <1>     mov dword [rax + 8], edx
   517 00006F8B FB                  <1>     sti
   518                              <1>     return
    13                              <2> %%_ret:
    14 00006F8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   521 00006F8D 8805(D0030000)      <1>     mov byte [verifyFlag], al
   522 00006F93 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   523                              <1>     return
    13                              <2> %%_ret:
    14 00006F9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> getDOSversion:     ;ah = 30h
   525 00006F9B E805F9FFFF          <1>     call getUserRegs
   526 00006FA0 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   527 00006FA2 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   528 00006FA5 668B055490FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   529 00006FAC 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   530                              <1>     return
    13                              <2> %%_ret:
    14 00006FAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   533                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   534 00006FB0 30D2                <1>     xor dl, dl
   535                              <1> getDeviceDPBptr:   ;ah = 32h
   536                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   537                              <1> ;On exit: rbx = DPB pointer
   538 00006FB2 88D0                <1>     mov al, dl
   539 00006FB4 E879F9FFFF          <1>     call getCDS
   540 00006FB9 722C                <1>     jc .bad
   541 00006FBB 488B3D(0D070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   542 00006FC2 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   543 00006FC8 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   544                              <1>     ;Here ONLY if accessing critical Disk data structures
   545 00006FCA E833FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   546 00006FCF E80BF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   547 00006FD4 E833FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   548 00006FD9 720C                <1>     jc .bad
   549 00006FDB E8C5F8FFFF          <1>     call getUserRegs
   550 00006FE0 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   551 00006FE4 30C0                <1>     xor al, al
   552                              <1>     return
    13                              <2> %%_ret:
    14 00006FE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .bad:
   554 00006FE7 B0FF                <1>     mov al, -1
   555                              <1>     return
    13                              <2> %%_ret:
    14 00006FE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   556                              <1> 
   557                              <1> getInDOSflagPtr:   ;ah = 34h
   558 00006FEA 488D15(08040000)    <1>     lea rdx, inDOS
   559 00006FF1 E8AFF8FFFF          <1>     call getUserRegs
   560 00006FF6 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   561                              <1>     return
    13                              <2> %%_ret:
    14 00006FFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getIntVector:      ;ah = 35h
   564                              <1> ;Called with:
   565                              <1> ;   al = Interrupt Number
   566                              <1> ;Returns:
   567                              <1> ;   rbx = Pointer to interrupt handler
   568 00006FFB E877F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   569 00007000 E8A0F8FFFF          <1>     call getUserRegs
   570 00007005 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   571                              <1>     return
    13                              <2> %%_ret:
    14 00007009 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getDiskFreeSpace:  ;ah = 36h
   574                              <1> ;Input: Drive number in dl (0 = Current)
   575                              <1> ;Output:    ax = sectors per cluster
   576                              <1> ;           ebx = number of free clusters
   577                              <1> ;           cx = bytes per sector
   578                              <1> ;           edx = total clusters on drive
   579 0000700A 88D0                <1>     mov al, dl
   580 0000700C E821F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   581 00007011 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   582                              <1> ;Else, we at an error.
   583                              <1> ;Simply return with CY set and error code in al with extended error info
   584 00007013 B80F000000          <1>     mov eax, errBadDrv
   585 00007018 E830FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   586                              <1>     ;extErrExit sets rsi to caller regs
   587 0000701D 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   588                              <1>     return
    13                              <2> %%_ret:
    14 00007022 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> .gdfsCDSFound:
   590 00007023 E80BF8FFFF          <1>     call getDiskData
   591 00007028 7219                <1>     jc .error
   592                              <1> ;Now we have that:
   593                              <1> ;al = sectors per cluster
   594                              <1> ;ah = media ID byte
   595                              <1> ;ebx = total clusters
   596                              <1> ;cx = bytes per sector
   597                              <1> ;edx = number of available clusters
   598 0000702A E876F8FFFF          <1>     call getUserRegs
   599 0000702F 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   600 00007031 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   601 00007034 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   602 00007038 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   603 0000703B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   604                              <1> .badExit:
   605 0000703F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   606                              <1>     return
    13                              <2> %%_ret:
    14 00007042 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   607                              <1> .error:
   608 00007043 E805FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   609 00007048 66B8FFFF            <1>     mov ax, -1
   610 0000704C EBF1                <1>     jmp short .badExit
   611                              <1> 
   612                              <1> 
   613                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   614 0000704E 31C0                <1>     xor eax, eax
   615 00007050 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   616 00007057 E9E3FCFFFF          <1>     jmp extGoodExit
   617                              <1> 
   618                              <1> getSysVarsPtr:     ;ah = 52h
   619 0000705C 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   620 00007063 E83DF8FFFF          <1>     call getUserRegs
   621 00007068 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   622                              <1>     return
    13                              <2> %%_ret:
    14 0000706C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> 
   624                              <1> 
   625                              <1> ;AH = 53h - CREATE DPB
   626                              <1> createDPB:         ;generates a DPB from a given BPB
   627                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   628                              <1> ;This is done so that the other fields of the DPB can be recycled
   629                              <1> ;Input: rsi = ptr to the BPB
   630                              <1> ;       rbp = ptr to the DPB
   631                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   632                              <1> ;bMediaDescriptor
   633 0000706D 8A4615              <1>     mov al, byte [rsi + bpb.media]
   634 00007070 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   635                              <1> ;dFirstFreeCluster
   636 00007073 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   637                              <1> ;dNumberOfFreeClusters
   638 0000707A C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   639                              <1> ;wBytesPerSector
   640 00007081 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   641 00007085 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   642                              <1> ;bMaxSectorInCluster
   643 00007089 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   644 0000708C FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   645 0000708E 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   646                              <1> ;bSectorsPerClusterShift
   647 00007091 FEC0                <1>     inc al
   648 00007093 30C9                <1>     xor cl, cl
   649                              <1> .cd2:
   650 00007095 D0E8                <1>     shr al, 1
   651 00007097 7404                <1>     jz .cd3
   652 00007099 FEC1                <1>     inc cl
   653 0000709B EBF8                <1>     jmp short .cd2
   654                              <1> .cd3:
   655 0000709D 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   656                              <1> ;wFAToffset, number of reserved sectors in partition
   657 000070A0 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   658 000070A4 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   659                              <1> ;bNumberOfFATs
   660 000070A8 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   661 000070AB 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   662                              <1> ;wNumberRootDirEntries
   663                              <1> ;Gets the number of 32 byte entries in the root directory
   664                              <1> ;Only valid for FAT 12/16
   665 000070AE 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   666 000070B2 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   667                              <1> ;dFATlength, get the FAT length
   668 000070B6 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   669 000070BA 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   670 000070BD 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   671 000070BF 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   672 000070C2 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   673                              <1> ;Complex cases below...
   674                              <1> ;dClusterHeapOffset, start sector of the data area
   675 000070C5 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   676 000070C9 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   677 000070CC 85C0                <1>     test eax, eax
   678 000070CE 0F44C3              <1>     cmovz eax, ebx
   679                              <1> ;eax = FATsz
   680 000070D1 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   681 000070D5 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   682 000070D8 85DB                <1>     test ebx, ebx
   683 000070DA 0F44D9              <1>     cmovz ebx, ecx 
   684                              <1> ;ebx = TotSec
   685 000070DD 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   686 000070E0 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   687                              <1> .cd4:
   688 000070E2 01C2                <1>     add edx, eax
   689 000070E4 FEC9                <1>     dec cl
   690 000070E6 75FA                <1>     jnz .cd4
   691 000070E8 89D0                <1>     mov eax, edx    ;Store product in eax
   692 000070EA 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   693 000070EE 01D0                <1>     add eax, edx
   694                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   695 000070F0 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   696 000070F4 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   697 000070F7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   698 000070FB 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   699 000070FC 89D0                <1>     mov eax, edx
   700 000070FE 31D2                <1>     xor edx, edx
   701 00007100 F7F1                <1>     div ecx
   702 00007102 89C2                <1>     mov edx, eax
   703 00007104 58                  <1>     pop rax
   704 00007105 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   705                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   706                              <1>     ;aka eax = Start sector of the data area in volume
   707 00007107 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   708                              <1> ;dClusterCount
   709 0000710A 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   710 0000710C 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   711 0000710E 31D2                <1>     xor edx, edx
   712 00007110 BB01000000          <1>     mov ebx, 1
   713 00007115 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   714 00007118 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   715 0000711A F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   716 0000711C FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   717 0000711E 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   718                              <1> ;dFirstUnitOfRootDir
   719 00007121 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   720 00007126 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   721 00007129 770F                <1>     ja .cd5
   722                              <1>     ;Else, we need to find the first sector of the root directory
   723                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   724 0000712B 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   725 0000712F 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   726                              <1> .cd51:
   727 00007133 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   728 00007136 FFC9                <1>     dec ecx
   729 00007138 75F9                <1>     jnz .cd51
   730                              <1> .cd5:
   731 0000713A 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   732 0000713D C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   733                              <1> ;Exit epilogue
   734 00007141 488B1D(7A040000)    <1>     mov rbx, qword [oldRSP]
   735 00007148 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   736                              <1>     %if DEBUG && DPBINFO
   737                              <1>     ;Print DPB 
   738                              <1>     debugEnterM
   739                              <1>     push rbp
   740                              <1>     lea rbp, .l0000
   741                              <1>     call debPrintNullString
   742                              <1>     pop rbp
   743                              <1>     call debDPBBPBptr
   744                              <1>     call debMakeDebuggerRespond
   745                              <1>     jmp short .l0001
   746                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   747                              <1> .l0001:
   748                              <1>     debugExitM
   749                              <1>     %endif
   750                              <1>     return
    13                              <2> %%_ret:
    14 0000714A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> getVerifySetting:  ;ah = 54h
   753 0000714B 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   754                              <1>     return
    13                              <2> %%_ret:
    14 00007151 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> getExtendedError:  ;ah = 59h
   757 00007152 E84EF7FFFF          <1>     call getUserRegs
   758 00007157 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   759 0000715E 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   760 00007164 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   761 0000716A 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   762 00007170 668906              <1>     mov word [rsi + callerFrame.rax], ax
   763 00007173 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   764 00007177 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   765                              <1>     return
    13                              <2> %%_ret:
    14 0000717A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   766                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   767                              <1> noOp:
   768                              <1>     return
    13                              <2> %%_ret:
    14 0000717B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 0000717C 3C07                <1>     cmp al, 07h
     8 0000717E 7204                <1>     jb .skip
     9 00007180 3C09                <1>     cmp al, 09h
    10 00007182 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007184 4889D6              <1>     mov rsi, rdx
    13 00007187 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 0000718B 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007192 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007196 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 0000719D 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 000071A4 53                  <1>     push rbx
    20 000071A5 488B1D(8B1A0000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 000071AC 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 000071AD 50                  <1>     push rax    ;Push al onto stack as a qword
    23 000071AE E856010000          <1>     call serverFunctionSelect
    24 000071B3 B801000000          <1>     mov eax, eLocUnk
    25 000071B8 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 000071BE E98AFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 000071C3 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 000071C4 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 000071C5 5F                  <1>     pop rdi
    33 000071C6 E8DAF6FFFF          <1>     call getUserRegs
    34 000071CB 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 000071CE 56                  <1>     push rsi
    36 000071CF B906000000          <1>     mov ecx, 6
    37 000071D4 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 000071D7 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 000071DE 48A5                <1>     movsq   ;Transfer r8...
    40 000071E0 48A5                <1>     movsq   ;... and r9
    41 000071E2 5E                  <1>     pop rsi
    42 000071E3 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 000071E6 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 000071EA 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 000071EE 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 000071F2 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 000071F6 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 000071FA 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 000071FE 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007202 48891D(82040000)    <1>     mov qword [oldRBX], rbx
    51 00007209 C605(FD060000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007210 E9EEF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007215 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 0000721C 66813BCD40          <1>     cmp word [rbx], 40CDh
    61 00007221 740A                <1>     je .validTask
    62 00007223 B805000000          <1>     mov eax, errAccDen
    63 00007228 E920FBFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 0000722D 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 0000722F E8CEFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007234 53                  <1>     push rbx
    70 00007235 E8FBD6FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 0000723A 7227                <1>     jc .exit
    72 0000723C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007241 741B                <1>     je .gotoNextFile
    74 00007243 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007248 7414                <1>     je .gotoNextFile
    76 0000724A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007250 750C                <1>     jnz .gotoNextFile
    78 00007252 48893D(2D070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007259 E875C4FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 0000725E 5B                  <1>     pop rbx
    83 0000725F FFC3                <1>     inc ebx
    84 00007261 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007263 E8A4FAFFFF          <1>     call dosCrit1Exit
    87 00007268 5B                  <1>     pop rbx ;Align stack
    88 00007269 E9D1FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 0000726E FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007274 0F82D3FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 0000727A E9C0FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 0000727F FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007285 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007287 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 0000728D EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 0000728F FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007295 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007297 E809F6FFFF          <1>     call getUserRegs
   110 0000729C 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 000072A0 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 000072A4 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 000072A8 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 000072AA 488D3D(07040000)    <1>     lea rdi, sda
   124 000072B1 48B984160000000000- <1>     mov rcx, sdaLen
   124 000072BA 00                  <1>
   125 000072BB 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 000072C4 00                  <1>
   126 000072C5 E8DBF5FFFF          <1>     call getUserRegs
   127 000072CA 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 000072CE 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 000072D2 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 000072D4 50                  <1>     push rax
   133 000072D5 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 000072DA CD4F                <1>     int 4Fh
   135 000072DC 5B                  <1>     pop rbx
   136 000072DD 7295                <1>     jc short closeFilesByName.shareExitBad
   137 000072DF EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 000072E1 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 000072E3 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 000072EA 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   145 000072EE 488905(0F040000)    <1>     mov qword [xInt44RDI], rax
   146 000072F5 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 000072F8 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 000072FF 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007302 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007309 55                  <1>     push rbp
   156 0000730A 4889E5              <1>     mov rbp, rsp
   157 0000730D 53                  <1>     push rbx
   158 0000730E 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007312 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007315 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007318 7621                <1>     jbe short .argumentTooBig
   162 0000731A 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 0000731E D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007320 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007322 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007326 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007329 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 0000732D 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007331 5B                  <1>     pop rbx
   170 00007332 5D                  <1>     pop rbp
   171 00007333 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 0000733A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 0000733B 5B                  <1>     pop rbx
   175 0000733C 5D                  <1>     pop rbp
   176 0000733D C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007340 3C01                <1>     cmp al, 01
   181 00007342 7214                <1>     jb .getName
   182 00007344 7437                <1>     jz .setName
   183 00007346 3C06                <1>     cmp al, 6
   184 00007348 724C                <1>     jb .netRedir
   185 0000734A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007351 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007353 E9F5F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007358 4889D7              <1>     mov rdi, rdx
   198 0000735B 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007362 E83EF5FFFF          <1>     call getUserRegs
   200 00007367 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 0000736B 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007372 31C0                <1>     xor eax, eax
   204 00007374 48A5                <1>     movsq
   205 00007376 A5                  <1>     movsd
   206 00007377 66A5                <1>     movsw
   207 00007379 A4                  <1>     movsb
   208 0000737A AA                  <1>     stosb   ;Store terminating null
   209 0000737B EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 0000737D 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007384 4889D6              <1>     mov rsi, rdx
   217 00007387 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 0000738D 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007394 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007396 50                  <1>     push rax
   223 00007397 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 0000739C CD4F                <1>     int 4Fh
   225 0000739E 5A                  <1>     pop rdx
   226 0000739F 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000073A1 E999F9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000073A6 80FC07              <1>     cmp ah, 07h
   233 000073A9 7419                <1>     je .driveAction
   234 000073AB 80FC08              <1>     cmp ah, 08h
   235 000073AE 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 000073B0 50                  <1>     push rax
   238 000073B1 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 000073B6 CD4F                <1>     int 4Fh
   240 000073B8 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 000073B9 0F828EF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 000073BF E97BF9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 000073C4 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 000073C6 E8C2F5FFFF          <1>     call getCDSforDrive
   249 000073CB 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 000073CD 80EA07              <1>     sub dl, 7
   252 000073D0 7408                <1>     jz .enable
   253 000073D2 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 000073D8 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 000073DA 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 000073E0 EBDD                <1>     jmp short .goodExit
    46                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    21 000073E2 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 000073E5 7411                <1>     je .installCheck
    23 000073E7 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 000073EA 740C                <1>     je .installCheck
    25 000073EC 80FC12              <1>     cmp ah, 12h
    26 000073EF 741E                <1>     je .goMplx
    27 000073F1 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 000073F4 7402                <1>     je .installCheck
    29 000073F6 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 000073F8 84C0                <1>     test al, al
    38 000073FA 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 000073FC B801000000          <1>     mov eax, errInvFnc
    41 00007401 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007408 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 0000740D 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 0000740F 3C26                <1>     cmp al, mDispTblL / 2
    48 00007411 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50 00007413 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    51 00007414 53                  <1>     push rbx    ;Storage for DOS function
    52 00007415 53                  <1>     push rbx    ;Stores rbx value
    53 00007416 488D1D30000000      <1>     lea rbx, .retAddr
    54 0000741D 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    55                              <1> 
    56 00007422 51                  <1>     push rcx
    57 00007423 488D1D6291FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    58 0000742A 53                  <1>     push rbx
    59 0000742B 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    60 0000742E 488B442450          <1>     mov rax, qword [rsp + 10*8]  ;Pick the word pushed on the stack before call 
    61 00007433 D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007435 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007438 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 0000743C 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 0000743D 4801CB              <1>     add rbx, rcx
    66 00007440 59                  <1>     pop rcx
    67 00007441 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007446 5B                  <1>     pop rbx
    69 00007447 488B442438          <1>     mov rax, qword [rsp + 7*8]  ;Get qword that may be passed on stack
    70                              <1>     return
    13                              <2> %%_ret:
    14 0000744C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    71                              <1> 
    72                              <1> .retAddr:
    73 0000744D 53                  <1>     push rbx
    74 0000744E 9C                  <1>     pushfq
    75 0000744F 5B                  <1>     pop rbx
    76 00007450 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    77 00007455 5B                  <1>     pop rbx
    78 00007456 48CF                <1>     iretq
    79                              <1> 
    80                              <1> multiplexTest:
    81 00007458 B0FF                <1>     mov al, -1
    82 0000745A C3                  <1>     ret
    83                              <1> 
    84                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    85                              <1> ;Return: r8 = Dos Data Segment Pointer
    86 0000745B 4C8D05(00000000)    <1>     lea r8, dosDataArea
    87                              <1>     return
    13                              <2> %%_ret:
    14 00007462 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    47                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007463 B801000000          <1>     mov eax, errInvFnc
     6 00007468 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 0000746F F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007470 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007471 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007477 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007478 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007479 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 0000747F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007480 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007486 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007487 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 0000748E 53                  <1>     push rbx
    34 0000748F FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007495 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007496 73EE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    37 00007498 E806000000          <1>     call shareRetryCountdown
    38 0000749D FFCB                <1>     dec ebx
    39 0000749F 75ED                <1>     jnz .mainLoop
    40 000074A1 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 000074A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 000074A3 F605(FD060000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000074AA 75F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    48 000074AC 51                  <1>     push rcx
    49 000074AD 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 000074B4 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 000074B7 51                  <1>     push rcx
    53 000074B8 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 000074BA 66FFC9              <1>     dec cx
    56 000074BD 75FB                <1>     jnz .mainLoop
    57 000074BF 59                  <1>     pop rcx
    58 000074C0 FFC9                <1>     dec ecx
    59 000074C2 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 000074C4 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 000074C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 000074C6 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 000074CC 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 000074CE 50                  <1>     push rax
    69 000074CF 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 000074D3 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 000074D8 58                  <1>     pop rax
    72 000074D9 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 000074DB E83B000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000074E0 73E3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    76                              <1> .notInCompatMode:
    77 000074E2 B820000000          <1>     mov eax, errShrVio
    78 000074E7 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000074E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87 000074E9 51                  <1>     push rcx
    88                              <1> .reloadCounter:
    89 000074EA 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    90                              <1> .keepLooping:
    91 000074F1 488B3D(2D070000)    <1>     mov rdi, qword [currentSFT]
    92 000074F8 31C0                <1>     xor eax, eax
    93 000074FA 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    94 00007500 51                  <1>     push rcx
    95 00007501 E873FFFFFF          <1>     call openShareCallWrapper
    96 00007506 59                  <1>     pop rcx
    97 00007507 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    98 00007509 E895FFFFFF          <1>     call shareRetryCountdown
    99 0000750E FFC9                <1>     dec ecx
   100 00007510 75DF                <1>     jnz .keepLooping
   101 00007512 E827000000          <1>     call shareCriticalError
   102 00007517 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   103                              <1> .exit:
   104 00007519 59                  <1>     pop rcx
   105                              <1>     return
    13                              <2> %%_ret:
    14 0000751A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareLockViolationCriticalError:
   108                              <1> ;This does NOT force rwFlag to 0.
   109 0000751B 57                  <1>     push rdi
   110 0000751C C605(67040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   111 00007523 B821000000          <1>     mov eax, errLokVio
   112 00007528 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   113                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   114 0000752F E855E9FFFF          <1>     call fullcriticalErrorInvoke
   115 00007534 5F                  <1>     pop rdi
   116 00007535 3D01000000          <1>     cmp eax, critRetry
   117                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000753A 74DE                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   118 0000753C F9                  <1>     stc
   119                              <1>     return
    13                              <2> %%_ret:
    14 0000753D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   122                              <1> ;Used for share Read/Write requests
   123 0000753E 57                  <1>     push rdi
   124 0000753F C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   125 00007546 C605(67040000)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   126 0000754D 488B2D(05070000)    <1>     mov rbp, qword [workingDPB]
   127 00007554 BF01000000          <1>     mov edi, 1
   128                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   129 00007559 E82BE9FFFF          <1>     call fullcriticalErrorInvoke
   130 0000755E 5F                  <1>     pop rdi
   131 0000755F 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007561 74DA                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00007563 F9                  <1>     stc
   134                              <1>     return
    13                              <2> %%_ret:
    14 00007564 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> shareReadWriteViolationError:
   137                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   138 00007565 3C0F                <1>     cmp al, drvBadDskChnge
   139 00007567 7510                <1>     jne .doReq
   140 00007569 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   141 0000756A 488B05(E2040000)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   142 00007571 488905(0F040000)    <1>     mov qword [xInt44RDI], rax
   143 00007578 58                  <1>     pop rax
   144                              <1> .doReq:
   145 00007579 E80BE9FFFF          <1>     call fullcriticalErrorInvoke
   146                              <1>     return
    13                              <2> %%_ret:
    14 0000757E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   147                              <1> 
   148                              <1> shareCheckWriteLockViolation:
   149 0000757F C605(FB060000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   150 00007586 EB07                <1>     jmp short shareCheckReadLockViolation.common
   151                              <1> shareCheckReadLockViolation:
   152 00007588 C605(FB060000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   153                              <1> .common:
   154                              <1> ;Input:
   155                              <1> ;rdi -> SFT for the file we are reading
   156 0000758F 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   157 00007595 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   158 00007597 50                  <1>     push rax
   159 00007598 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   160 0000759C 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   161 000075A1 58                  <1>     pop rax
   162 000075A2 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   163                              <1> .fcbQuirk:
   164 000075A4 E872FFFFFF          <1>     call shareLockViolationCriticalError
   165                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000075A9 73D3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   166                              <1> .notInCompatMode:
   167 000075AB 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   168 000075AD B821000000          <1>     mov eax, errLokVio
   169 000075B2 F9                  <1>     stc ;Set the flag for error
   170                              <1>     return
    13                              <2> %%_ret:
    14 000075B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  ;These driver files are to be written by an OEM.
    49                                  %include "./src/Drivers/drvHdrs.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;          Driver routines          :
     3                              <1> ;-----------------------------------:
     4                              <1> driverChain:
     5                              <1> conHdr:
     6 000075B4 [D675000000000000]  <1>     dq auxHdr
     7 000075BC 1380                <1>     dw 08013h
     8 000075BE [5477000000000000]  <1>     dq commonStrat
     9 000075C6 [5C77000000000000]  <1>     dq conDriver
    10 000075CE 434F4E2020202020    <1>     db "CON     "
    11                              <1> auxHdr:
    12 000075D6 [F875000000000000]  <1>     dq prnHdr
    13 000075DE 0080                <1>     dw 08000h
    14 000075E0 [5477000000000000]  <1>     dq commonStrat
    15 000075E8 [517A000000000000]  <1>     dq com1Intr
    16 000075F0 4155582020202020    <1>     db "AUX     "
    17                              <1> prnHdr:
    18 000075F8 [1A76000000000000]  <1>     dq clkHdr
    19 00007600 40A0                <1>     dw 0A040h
    20 00007602 [7F64000000000000]  <1>     dq nulStrat
    21 0000760A [8564000000000000]  <1>     dq nulIntr
    22 00007612 50524E2020202020    <1>     db "PRN     "
    23                              <1> clkHdr:
    24 0000761A [3C76000000000000]  <1>     dq msdHdr
    25 00007622 0880                <1>     dw 08008h
    26 00007624 [5477000000000000]  <1>     dq commonStrat
    27 0000762C [C778000000000000]  <1>     dq clkDriver
    28 00007634 434C4F434B242020    <1>     db "CLOCK$  "
    29                              <1> msdHdr:
    30 0000763C [5E76000000000000]  <1>     dq com1Hdr
    31 00007644 4008                <1>     dw 00840h   
    32 00007646 [5477000000000000]  <1>     dq commonStrat
    33 0000764E [D97B000000000000]  <1>     dq msdDriver
    34 00007656 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    35                              <1> com1Hdr:
    36 0000765E [8076000000000000]  <1>     dq com2Hdr
    37 00007666 0080                <1>     dw 08000h
    38 00007668 [5477000000000000]  <1>     dq commonStrat
    39 00007670 [517A000000000000]  <1>     dq com1Intr
    40 00007678 434F4D3120202020    <1>     db "COM1    "
    41                              <1> com2Hdr:
    42 00007680 [A276000000000000]  <1>     dq com3Hdr
    43 00007688 0080                <1>     dw 08000h
    44 0000768A [5477000000000000]  <1>     dq commonStrat
    45 00007692 [5A7A000000000000]  <1>     dq com2Intr
    46 0000769A 434F4D3220202020    <1>     db "COM2    "
    47                              <1> com3Hdr:
    48 000076A2 [C476000000000000]  <1>     dq com4Hdr
    49 000076AA 0080                <1>     dw 08000h
    50 000076AC [5477000000000000]  <1>     dq commonStrat
    51 000076B4 [637A000000000000]  <1>     dq com3Intr
    52 000076BC 434F4D3320202020    <1>     db "COM3    "
    53                              <1> com4Hdr:
    54 000076C4 [E676000000000000]  <1>     dq lpt1Hdr
    55 000076CC 0080                <1>     dw 08000h
    56 000076CE [5477000000000000]  <1>     dq commonStrat
    57 000076D6 [6C7A000000000000]  <1>     dq com4Intr
    58 000076DE 434F4D3420202020    <1>     db "COM4    "
    59                              <1> lpt1Hdr:
    60 000076E6 [0877000000000000]  <1>     dq lpt2Hdr
    61 000076EE 40A0                <1>     dw 0A040h
    62 000076F0 [7F64000000000000]  <1>     dq nulStrat
    63 000076F8 [8564000000000000]  <1>     dq nulIntr
    64 00007700 4C50543120202020    <1>     db "LPT1    "
    65                              <1> lpt2Hdr:
    66 00007708 [2A77000000000000]  <1>     dq lpt3Hdr
    67 00007710 40A0                <1>     dw 0A040h
    68 00007712 [7F64000000000000]  <1>     dq nulStrat
    69 0000771A [8564000000000000]  <1>     dq nulIntr
    70 00007722 4C50543220202020    <1>     db "LPT2    "
    71                              <1> lpt3Hdr:
    72 0000772A FFFFFFFFFFFFFFFF    <1>     dq -1
    73 00007732 40A0                <1>     dw 0A040h
    74 00007734 [7F64000000000000]  <1>     dq nulStrat
    75 0000773C [8564000000000000]  <1>     dq nulIntr
    76 00007744 4C50543320202020    <1>     dq "LPT3    "
    77 0000774C 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    50                                  %include "./src/Drivers/charDrv.asm"
     1                              <1> commonStrat:
     2                              <1> ;DOS calls this function with rbx=Ptr to request header
     3 00007754 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
     4 0000775B C3                  <1>     ret
     5                              <1> conDriver:
     6 0000775C 50                  <1>     push rax
     7 0000775D 53                  <1>     push rbx
     8 0000775E 488B1DE7FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
     9 00007765 B003                <1>     mov al, 03h ;Unknown Command
    10 00007767 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    11 0000776B 773D                <1>     ja .conWriteErrorCode ;If yes, error!
    12                              <1> 
    13 0000776D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    14 00007770 84C0                <1>     test al, al
    15 00007772 7445                <1>     jz .conInit
    16 00007774 3C04                <1>     cmp al, 4
    17 00007776 745B                <1>     jz .conRead
    18 00007778 3C05                <1>     cmp al, 5
    19 0000777A 0F8499000000        <1>     jz .conNondestructiveRead
    20 00007780 3C06                <1>     cmp al, 6
    21 00007782 0F84C2000000        <1>     jz .conInputStatus
    22 00007788 3C07                <1>     cmp al, 7
    23 0000778A 0F84CA000000        <1>     jz .conFlushInputBuffers
    24 00007790 3C08                <1>     cmp al, 8
    25 00007792 0F84E4000000        <1>     jz .conWrite
    26 00007798 3C09                <1>     cmp al, 9
    27 0000779A 0F84DC000000        <1>     jz .conWrite
    28 000077A0 3C0A                <1>     cmp al, 0Ah
    29 000077A2 0F84FD000000        <1>     jz .conOutputStatus
    30 000077A8 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    31                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    32 000077AA B480                <1>     mov ah, 80h ;Set error bit
    33 000077AC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    34                              <1> .conExit:
    35 000077B0 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
    36 000077B6 5B                  <1>     pop rbx
    37 000077B7 58                  <1>     pop rax
    38 000077B8 C3                  <1>     ret
    39                              <1> .conInit:    ;Function 0 wrapper
    40 000077B9 B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
    41 000077BB F60510000000FF      <1>     test byte [.conInitDone], -1
    42 000077C2 75EC                <1>     jnz short .conExit
    43 000077C4 E8F60B0000          <1>     call conInit
    44 000077C9 C60502000000FF      <1>     mov byte [.conInitDone], -1 ;Set initialised
    45 000077D0 EBDE                <1>     jmp short .conExit
    46 000077D2 00                  <1> .conInitDone:   db 0
    47                              <1> 
    48                              <1> .conRead:    ;Function 4
    49 000077D3 B005                <1>     mov al, 05h ;Bad request structure length?
    50 000077D5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    51 000077D8 75D0                <1>     jne .conWriteErrorCode
    52                              <1> 
    53 000077DA 57                  <1>     push rdi
    54 000077DB 51                  <1>     push rcx
    55 000077DC 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    56 000077E0 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    57                              <1> .cre1:
    58 000077E2 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    59 000077E5 741C                <1>     je .cre2
    60 000077E7 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    61 000077EE 751A                <1>     jnz .cre3   ;No, get the buffer value
    62 000077F0 31C0                <1>     xor eax, eax
    63 000077F2 CD36                <1>     int 36h
    64                              <1> .cre11:
    65 000077F4 AA                  <1>     stosb
    66 000077F5 84C0                <1>     test al, al ;Was the ascii code stored 0?
    67 000077F7 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    68 000077F9 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    69                              <1> .cre12:
    70 000077FF FFC1                <1>     inc ecx ;Inc chars stored in buffer
    71 00007801 EBDF                <1>     jmp short .cre1
    72                              <1> .cre2:
    73 00007803 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    74 00007806 59                  <1>     pop rcx
    75 00007807 5F                  <1>     pop rdi
    76 00007808 EBA6                <1>     jmp short .conExit
    77                              <1> .cre3:
    78 0000780A 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    79 00007810 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    80 00007817 EBDB                <1>     jmp short .cre11
    81                              <1> 
    82                              <1> .conNondestructiveRead:  ;Function 5
    83 00007819 B005                <1>     mov al, 05h ;Bad request structure length?
    84 0000781B 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
    85 0000781E 758A                <1>     jne .conWriteErrorCode
    86 00007820 803D8E00000000      <1>     cmp byte [.conBuf], 0
    87 00007827 7519                <1>     jnz .cnr2
    88 00007829 B401                <1>     mov ah, 01h     ;Get key if exists
    89 0000782B CD36                <1>     int 36h
    90 0000782D 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
    91                              <1>     ;Keystroke available
    92                              <1> .cnr0:
    93 0000782F 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
    94 00007832 E979FFFFFF          <1>     jmp .conExit
    95                              <1> .cnr1: ;No keystroke available
    96 00007837 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
    97 0000783D E96EFFFFFF          <1>     jmp .conExit
    98                              <1> .cnr2:
    99 00007842 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   100 00007848 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   101                              <1> 
   102                              <1> .conInputStatus:         ;Function 6
   103 0000784A B005                <1>     mov al, 05h ;Bad request structure length?
   104 0000784C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   105 0000784F 0F8555FFFFFF        <1>     jne .conWriteErrorCode
   106 00007855 E956FFFFFF          <1>     jmp .conExit ;Exit, device ready
   107                              <1> 
   108                              <1> .conFlushInputBuffers:   ;Function 7
   109 0000785A B005                <1>     mov al, 05h ;Bad request structure length?
   110 0000785C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   111 0000785F 0F8545FFFFFF        <1>     jne .conWriteErrorCode
   112 00007865 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   113                              <1> .cfib0:
   114 0000786C B401                <1>     mov ah, 01      ;Get buffer status
   115 0000786E CD36                <1>     int 36h
   116 00007870 0F843AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   117 00007876 30E4                <1>     xor ah, ah
   118 00007878 CD36                <1>     int 36h ;Read key to flush from buffer
   119 0000787A EBF0                <1>     jmp short .cfib0
   120                              <1> 
   121                              <1> .conWrite:   ;Function 8 and 9
   122 0000787C B005                <1>     mov al, 05h ;Bad request structure length?
   123 0000787E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   124 00007881 0F8523FFFFFF        <1>     jne .conWriteErrorCode
   125                              <1> 
   126 00007887 56                  <1>     push rsi
   127 00007888 51                  <1>     push rcx
   128 00007889 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   129 0000788D 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   130                              <1> .cw1: 
   131 0000788F 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   132 00007892 7407                <1>     je .cw2
   133 00007894 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   134 00007895 CD49                <1>     int 49h ;Fast print char
   135 00007897 FFC1                <1>     inc ecx
   136 00007899 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   137                              <1> .cw2:
   138 0000789B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   139 0000789E 59                  <1>     pop rcx
   140 0000789F 5E                  <1>     pop rsi
   141 000078A0 E90BFFFFFF          <1>     jmp .conExit
   142                              <1> .conOutputStatus:   ;Function 0Ah
   143 000078A5 B005                <1>     mov al, 05h ;Bad request structure length?
   144 000078A7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   145 000078AA 0F85FAFEFFFF        <1>     jne .conWriteErrorCode
   146 000078B0 E9FBFEFFFF          <1>     jmp .conExit
   147                              <1> 
   148 000078B5 00                  <1> .conBuf db 0    ;Single byte buffer
   149                              <1> fastOutput:         ;This CON driver supports Int 49h
   150                              <1> ;Called with char to transfer in al
   151 000078B6 50                  <1>     push rax
   152 000078B7 B40E                <1>     mov ah, 0Eh
   153 000078B9 CD30                <1>     int 30h
   154 000078BB 58                  <1>     pop rax
   155 000078BC 48CF                <1>     iretq
   156                              <1> ctrlBreak:
   157                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   158 000078BE C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   159 000078C5 48CF                <1>     iretq
   160                              <1> 
   161                              <1> clkDriver:
   162 000078C7 50                  <1>     push rax
   163 000078C8 53                  <1>     push rbx
   164 000078C9 51                  <1>     push rcx
   165 000078CA 52                  <1>     push rdx
   166 000078CB 56                  <1>     push rsi
   167 000078CC 55                  <1>     push rbp
   168 000078CD 488B1D78FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   169 000078D4 B003                <1>     mov al, 03h ;Unknown Command
   170 000078D6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   171 000078DA 772F                <1>     ja .clkWriteErrorCode ;If yes, error!
   172                              <1> 
   173 000078DC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   174 000078DF 84C0                <1>     test al, al
   175 000078E1 743B                <1>     jz .clkInit
   176 000078E3 3C04                <1>     cmp al, 04h
   177 000078E5 7451                <1>     jz .clkRead
   178 000078E7 3C06                <1>     cmp al, 06h
   179 000078E9 0F84AE000000        <1>     jz .clkInputStatus
   180 000078EF 3C07                <1>     cmp al, 07h
   181 000078F1 0F84B6000000        <1>     jz .clkFlushInputBuffers
   182 000078F7 3C08                <1>     cmp al, 08h
   183 000078F9 0F84BE000000        <1>     jz .clkWrite
   184 000078FF 3C09                <1>     cmp al, 09h
   185 00007901 0F84B6000000        <1>     jz .clkWrite
   186 00007907 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   187                              <1> .clkNotFunctioning:
   188 00007909 B002                <1>     mov al, 02h ;Device not ready error
   189                              <1> .clkWriteErrorCode:
   190 0000790B B480                <1>     mov ah, 80h ;Set error bit
   191 0000790D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   192                              <1> .clkExit:
   193 00007911 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Merge done bit
   194 00007917 5D                  <1>     pop rbp
   195 00007918 5E                  <1>     pop rsi
   196 00007919 5A                  <1>     pop rdx
   197 0000791A 59                  <1>     pop rcx
   198 0000791B 5B                  <1>     pop rbx
   199 0000791C 58                  <1>     pop rax
   200 0000791D C3                  <1>     ret
   201                              <1> .clkInit:           ;Function 0
   202 0000791E B00C                <1>     mov al, errGF - drvErrShft ;General Error code (0Ch)
   203 00007920 F60510000000FF      <1>     test byte [.clkInitDone], -1
   204 00007927 75E8                <1>     jnz short .clkExit
   205 00007929 E8F20A0000          <1>     call clockInit
   206 0000792E C60502000000FF      <1>     mov byte [.clkInitDone], -1 ;Set initialised
   207 00007935 EBDA                <1>     jmp short .clkExit
   208 00007937 00                  <1> .clkInitDone:   db 0
   209                              <1> 
   210                              <1> .clkRead:           ;Function 4
   211 00007938 B005                <1>     mov al, 05h ;Bad request structure length?
   212 0000793A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   213 0000793D 75CC                <1>     jne .clkWriteErrorCode
   214                              <1> 
   215 0000793F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   216 00007942 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   217 00007946 668B0502010000      <1>     mov ax, word [.clkDate] ;Get the clock date
   218 0000794D 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   219 00007951 30E4                <1>     xor ah, ah
   220 00007953 CD3A                <1>     int 3Ah         ;Read the system timer
   221 00007955 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   222 00007957 740D                <1>     jz .clkr1       ;Nope, now just time 
   223 00007959 30E4                <1>     xor ah, ah
   224                              <1>     ;This works as al should keep count of the # of days passed since last read
   225 0000795B 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   226 0000795F 660105E9000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   227                              <1> .clkr1:
   228 00007966 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   229 00007969 0FB7D2              <1>     movzx edx, dx
   230 0000796C 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   231 0000796E 89D0                <1>     mov eax, edx
   232 00007970 31D2                <1>     xor edx, edx
   233 00007972 89D8                <1>     mov eax, ebx
   234 00007974 B944040000          <1>     mov ecx, 1092   
   235 00007979 F7F1                <1>     div ecx
   236 0000797B 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   237 0000797E 89D0                <1>     mov eax, edx    ;Get remainder in eax
   238 00007980 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   239 00007984 31D2                <1>     xor edx, edx
   240 00007986 B95B000000          <1>     mov ecx, 91 ;5*18.2
   241 0000798B F7F1                <1>     div ecx
   242 0000798D 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   243 00007990 89D0                <1>     mov eax, edx    ;Get remainder in eax
   244                              <1>     ;lea eax, dword [eax + 4*eax]
   245                              <1>     ;add eax, edx    ;Essentially multiply by 6
   246 00007992 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   247 00007995 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   248 00007998 E974FFFFFF          <1>     jmp .clkExit
   249                              <1> 
   250                              <1> .clkInputStatus:    ;Function 6
   251                              <1> ;Always return ready
   252 0000799D B005                <1>     mov al, 05h ;Bad request structure length?
   253 0000799F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   254 000079A2 0F8563FFFFFF        <1>     jne .clkWriteErrorCode
   255 000079A8 E964FFFFFF          <1>     jmp .clkExit
   256                              <1> .clkFlushInputBuffers:  ;Function 7
   257                              <1> ;Always return done immediately
   258 000079AD B005                <1>     mov al, 05h ;Bad request structure length?
   259 000079AF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   260 000079B2 0F8553FFFFFF        <1>     jne .clkWriteErrorCode
   261 000079B8 E954FFFFFF          <1>     jmp .clkExit
   262                              <1> 
   263                              <1> .clkWrite:          ;Functions 8 and 9
   264 000079BD B005                <1>     mov al, 05h ;Bad request structure length?
   265 000079BF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   266 000079C2 0F8543FFFFFF        <1>     jne .clkWriteErrorCode
   267                              <1> 
   268 000079C8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   269 000079CB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   270 000079CF 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   271 000079D3 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   272                              <1> 
   273 000079DA 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   274 000079DC 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   275 000079E0 B105                <1>     mov cl, 5
   276 000079E2 F6F1                <1>     div cl          ;Divide al by 5
   277 000079E4 30E4                <1>     xor ah, ah      ;Remove the remainder
   278 000079E6 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   279                              <1> ;Using the decimal part of this formula for the low count
   280                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   281 000079E8 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   282 000079EB B912000000          <1>     mov ecx, 18
   283 000079F0 F7E1                <1>     mul ecx  
   284 000079F2 01C3                <1>     add ebx, eax
   285                              <1> 
   286 000079F4 31D2                <1>     xor edx, edx
   287 000079F6 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   288 000079FA B944040000          <1>     mov ecx, 1092
   289 000079FF F7E1                <1>     mul ecx
   290 00007A01 01C3                <1>     add ebx, eax
   291 00007A03 89DA                <1>     mov edx, ebx    ;edx now has low count
   292 00007A05 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   293 00007A09 B401                <1>     mov ah, 01h     ;Set the system time
   294 00007A0B CD3A                <1>     int 3Ah
   295                              <1> 
   296 00007A0D 4889F3              <1>     mov rbx, rsi
   297 00007A10 E9FCFEFFFF          <1>     jmp .clkExit
   298                              <1> 
   299                              <1> .clkBCDtoHex:
   300                              <1> ;Converts a BCD value to a Hex byte
   301                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   302 00007A15 51                  <1>     push rcx
   303 00007A16 0FB6C0              <1>     movzx eax, al   ;Zero extend
   304 00007A19 89C1                <1>     mov ecx, eax    ;Save al in ecx
   305 00007A1B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   306 00007A20 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   307 00007A26 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   308                              <1> .cbth0:
   309 00007A29 050A000000          <1>     add eax, 10
   310 00007A2E E2F9                <1>     loop .cbth0
   311 00007A30 59                  <1>     pop rcx
   312 00007A31 C3                  <1>     ret
   313                              <1> 
   314                              <1> .clkHexToBCD:
   315                              <1> ;Converts a Hex byte into two BCD digits
   316                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   317 00007A32 51                  <1>     push rcx
   318 00007A33 0FB6C0              <1>     movzx eax, al   ;Zero extend
   319 00007A36 31C9                <1>     xor ecx, ecx
   320                              <1> .chtb0:
   321 00007A38 3D0A000000          <1>     cmp eax, 10
   322 00007A3D 7209                <1>     jb .chtb1
   323 00007A3F 2D0A000000          <1>     sub eax, 10
   324 00007A44 FFC1                <1>     inc ecx
   325 00007A46 EBF0                <1>     jmp short .chtb0
   326                              <1> .chtb1:
   327 00007A48 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   328 00007A4B 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   329 00007A4D 59                  <1>     pop rcx
   330 00007A4E C3                  <1>     ret
   331 00007A4F 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   332                              <1> 
   333                              <1> ;COM Driver headers and main interrupt strat
   334                              <1> com1Intr:
   335 00007A51 C6058001000000      <1>     mov byte [comIntr.comDevice], 0
   336 00007A58 EB19                <1>     jmp short comIntr
   337                              <1> com2Intr:
   338 00007A5A C6057701000001      <1>     mov byte [comIntr.comDevice], 1
   339 00007A61 EB10                <1>     jmp short comIntr
   340                              <1> com3Intr:
   341 00007A63 C6056E01000002      <1>     mov byte [comIntr.comDevice], 2
   342 00007A6A EB07                <1>     jmp short comIntr
   343                              <1> com4Intr:
   344 00007A6C C6056501000003      <1>     mov byte [comIntr.comDevice], 3
   345                              <1> comIntr:
   346 00007A73 50                  <1>     push rax
   347 00007A74 53                  <1>     push rbx
   348 00007A75 51                  <1>     push rcx
   349 00007A76 52                  <1>     push rdx
   350 00007A77 56                  <1>     push rsi
   351 00007A78 57                  <1>     push rdi
   352 00007A79 488B1DCCFCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   353 00007A80 B003                <1>     mov al, 03h ;Unknown Command
   354 00007A82 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   355 00007A86 775C                <1>     ja .comWriteErrorCode ;If yes, error!
   356                              <1> 
   357 00007A88 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   358 00007A8B 84C0                <1>     test al, al
   359 00007A8D 745B                <1>     jz short .comExit
   360 00007A8F 3C04                <1>     cmp al, 4   ;Read Character(s)
   361 00007A91 7464                <1>     jz .comRead
   362 00007A93 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   363 00007A95 0F849D000000        <1>     jz .comNondestructiveRead   
   364 00007A9B 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   365 00007A9D 0F8486000000        <1>     jz .comReadInputStatus
   366 00007AA3 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   367 00007AA5 0F849C000000        <1>     jz .comFlushInputBuffers
   368 00007AAB 3C08                <1>     cmp al, 8
   369 00007AAD 0F84BA000000        <1>     jz .comWrite
   370 00007AB3 3C09                <1>     cmp al, 9
   371 00007AB5 0F84B2000000        <1>     jz .comWrite
   372 00007ABB 3C0A                <1>     cmp al, 0Ah
   373 00007ABD 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   374 00007AC3 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   375                              <1> .comErrorNoCount:
   376 00007AC5 B002                <1>     mov al, 02h ;Unknown device
   377 00007AC7 EB1B                <1>     jmp short .comWriteErrorCode
   378                              <1> .comReadError:
   379 00007AC9 BA0B000000          <1>     mov edx, 0Bh
   380 00007ACE EB05                <1>     jmp short .comError
   381                              <1> .comWriteError:
   382 00007AD0 BA0A000000          <1>     mov edx, 0Ah
   383                              <1> .comError:
   384 00007AD5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   385 00007AD8 B902000000          <1>     mov ecx, 02h    ;Unknown device
   386 00007ADD 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   387 00007ADF 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   388 00007AE2 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   389                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   390 00007AE4 B480                <1>     mov ah, 80h ;Set error bit
   391 00007AE6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   392                              <1> .comExit:
   393 00007AEA 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus    ;Merge done bit
   394 00007AF0 5F                  <1>     pop rdi
   395 00007AF1 5E                  <1>     pop rsi
   396 00007AF2 5A                  <1>     pop rdx
   397 00007AF3 59                  <1>     pop rcx
   398 00007AF4 5B                  <1>     pop rbx
   399 00007AF5 58                  <1>     pop rax
   400 00007AF6 C3                  <1>     ret
   401                              <1> 
   402                              <1> .comRead:
   403 00007AF7 B005                <1>     mov al, 05h ;Bad request structure length?
   404 00007AF9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   405 00007AFC 75E6                <1>     jne .comWriteErrorCode
   406 00007AFE 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   407 00007B02 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   408                              <1> .cr1:
   409 00007B04 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   410 00007B07 741B                <1>     je .cre2
   411                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   412 00007B09 B800020000          <1>     mov eax, 0200h    ;Recieve 
   413 00007B0E 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   414 00007B15 F8                  <1>     clc
   415 00007B16 CD34                <1>     int 34h ;Recieve Char
   416 00007B18 72BB                <1>     jc .comError
   417 00007B1A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   418 00007B1D 74EA                <1>     je .cr11
   419 00007B1F AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   420 00007B20 FFC1                <1>     inc ecx
   421 00007B22 EBE0                <1>     jmp short .cr1
   422                              <1> .cre2:
   423 00007B24 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   424 00007B27 EBC1                <1>     jmp short .comExit
   425                              <1> 
   426                              <1> .comReadInputStatus:
   427 00007B29 B005                <1>     mov al, 05h ;Bad request structure length?
   428 00007B2B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   429 00007B2E 75B4                <1>     jne .comWriteErrorCode
   430 00007B30 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   431 00007B36 EBB2                <1>     jmp short .comExit
   432                              <1> 
   433                              <1> .comNondestructiveRead:
   434                              <1> ;The buffer is always empty for now (no keystroke available)
   435 00007B38 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00007B3A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   437 00007B3D 75A5                <1>     jne .comWriteErrorCode
   438 00007B3F 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   439 00007B45 EBA3                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comFlushInputBuffers:
   442 00007B47 B005                <1>     mov al, 05h ;Bad request structure length?
   443 00007B49 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   444 00007B4C 7596                <1>     jne .comWriteErrorCode
   445                              <1> .cfib0:
   446 00007B4E 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   447 00007B55 B800020000          <1>     mov eax, 0200h    ;Recieve
   448 00007B5A F8                  <1>     clc
   449 00007B5B CD34                <1>     int 34h
   450 00007B5D 0F8262FFFFFF        <1>     jc .comErrorNoCount
   451 00007B63 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   452 00007B66 75E6                <1>     jne .cfib0
   453 00007B68 E97DFFFFFF          <1>     jmp .comExit
   454                              <1> 
   455                              <1> .comWrite:
   456 00007B6D B005                <1>     mov al, 05h ;Bad request structure length?
   457 00007B6F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   458 00007B72 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   459                              <1> 
   460 00007B78 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   461 00007B7C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   462                              <1> .cw1: 
   463 00007B7E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   464 00007B81 7417                <1>     je .cw2
   465 00007B83 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   466 00007B84 B401                <1>     mov ah, 01h ;Move function number into ah
   467 00007B86 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   468 00007B8D F8                  <1>     clc
   469 00007B8E CD34                <1>     int 34h ;Transmit char
   470 00007B90 0F823FFFFFFF        <1>     jc .comError
   471 00007B96 FFC1                <1>     inc ecx
   472 00007B98 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   473                              <1> .cw2:
   474 00007B9A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   475 00007B9D E948FFFFFF          <1>     jmp .comExit
   476                              <1> 
   477                              <1> .comOutputStatus:
   478                              <1> ;Read MODEM status
   479 00007BA2 B005                <1>     mov al, 05h ;Bad request structure length?
   480 00007BA4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   481 00007BA7 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   482                              <1> 
   483 00007BAD 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   484 00007BB4 B403                <1>     mov ah, 03h     ;Get status
   485 00007BB6 F8                  <1>     clc
   486 00007BB7 CD34                <1>     int 34h
   487 00007BB9 0F8206FFFFFF        <1>     jc .comErrorNoCount
   488 00007BBF 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   489 00007BC4 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   490 00007BC7 F7D0                <1>     not eax      ;Bitwise inversion
   491 00007BC9 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   492 00007BCE 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   493 00007BD3 E912FFFFFF          <1>     jmp .comExit
   494 00007BD8 00                  <1> .comDevice   db 0
    51                                  %include "./src/Drivers/diskDrv.asm"
     1                              <1> msdDriver:
     2 00007BD9 50                  <1>     push rax
     3 00007BDA 53                  <1>     push rbx
     4 00007BDB 51                  <1>     push rcx
     5 00007BDC 52                  <1>     push rdx
     6 00007BDD 56                  <1>     push rsi
     7 00007BDE 57                  <1>     push rdi
     8 00007BDF 55                  <1>     push rbp
     9 00007BE0 4150                <1>     push r8
    10 00007BE2 488B1D63FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    11 00007BE9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    12 00007BED B003                <1>     mov al, drvBadCmd
    13 00007BEF 0F87C5000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    14 00007BF5 B001                <1>     mov al, drvBadUnit 
    15 00007BF7 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    16 00007BFB 0F87B9000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    17 00007C01 488D358B040000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    18 00007C08 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    19 00007C0C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    20 00007C0F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    21 00007C13 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    22 00007C17 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    23 00007C19 488D0DA1000000      <1>     lea rcx, .msdTable
    24 00007C20 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    25 00007C24 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    26 00007C26 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    27 00007C28 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    28 00007C2B FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    29                              <1> .msdDriverExit:
    30 00007C2D 66814B030001        <1>     or word [rbx + drvReqHdr.status], drvDonStatus ;Set done bit
    31 00007C33 4158                <1>     pop r8
    32 00007C35 5D                  <1>     pop rbp
    33 00007C36 5F                  <1>     pop rdi
    34 00007C37 5E                  <1>     pop rsi
    35 00007C38 5A                  <1>     pop rdx
    36 00007C39 59                  <1>     pop rcx
    37 00007C3A 5B                  <1>     pop rbx
    38 00007C3B 58                  <1>     pop rax
    39 00007C3C C3                  <1>     ret
    40                              <1> 
    41                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    42 00007C3D 4889FB              <1>     mov rbx, rdi
    43 00007C40 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    44 00007C43 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    45 00007C45 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    46                              <1> ;Now fall through to general error
    47                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    48 00007C48 488B1DFDFAFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 00007C4F B401                <1>     mov ah, 01h
    50 00007C51 CD33                <1>     int 33h ;Read status of last operation
    51 00007C53 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    52 00007C56 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    53 00007C58 7460                <1>     je .msdWriteErrorCode 
    54 00007C5A B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    55 00007C5C 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    56 00007C5F 7459                <1>     je .msdWriteErrorCode 
    57 00007C61 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    58 00007C64 7454                <1>     je .msdWriteErrorCode
    59                              <1> ;Device Not Ready
    60 00007C66 B002                <1>     mov al, 02h  ;Device not ready code
    61 00007C68 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    62 00007C6B 744D                <1>     je .msdWriteErrorCode
    63 00007C6D 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    64 00007C71 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    65                              <1> ;Write Protected
    66 00007C75 30C0                <1>     xor al, al
    67 00007C77 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    68 00007C7C 743C                <1>     je .msdWriteErrorCode
    69                              <1> ;CRC Error
    70 00007C7E B004                <1>     mov al, 04h     ;CRC error code
    71 00007C80 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    72 00007C85 7433                <1>     je .msdWriteErrorCode
    73 00007C87 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    74 00007C8C 742C                <1>     je .msdWriteErrorCode
    75 00007C8E 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
    76 00007C93 7425                <1>     je .msdWriteErrorCode
    77                              <1> ;Seek Error
    78 00007C95 B006                <1>     mov al, 06h     ;Seek error code
    79 00007C97 80F902              <1>     cmp cl, 02h     ;No Seek Complete
    80 00007C9A 741E                <1>     je .msdWriteErrorCode
    81                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
    82                              <1> ;This error should only be called if BPB not recognised for Flash Drives
    83 00007C9C B007                <1>     mov al, 07h
    84 00007C9E 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
    85 00007CA1 7417                <1>     je .msdWriteErrorCode
    86                              <1> ;Sector Not Found
    87 00007CA3 B008                <1>     mov al, 08h     ;Sector not found code
    88 00007CA5 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
    89 00007CA8 7410                <1>     je .msdWriteErrorCode
    90                              <1> ;Write faults
    91 00007CAA B00A                <1>     mov al, 0Ah     ;Write fault
    92 00007CAC 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
    93 00007CAF 7409                <1>     je .msdWriteErrorCode
    94                              <1> ;Read faults
    95 00007CB1 B00B                <1>     mov al, 0Bh     ;Read fault
    96 00007CB3 80F911              <1>     cmp cl, 11h     ;Read error
    97 00007CB6 7402                <1>     je .msdWriteErrorCode
    98                              <1> ;General Errors
    99 00007CB8 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   100                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   101 00007CBA B480                <1>     mov ah, 80h ;Set error bit
   102 00007CBC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   103 00007CC0 C3                  <1>     ret ;Return to set done bit
   104                              <1> .msdTable:
   105 00007CC1 3200                <1>     dw .msdInitShim - .msdTable     ;Function 0
   106 00007CC3 4700                <1>     dw .msdMedChk - .msdTable       ;Function 1
   107 00007CC5 AD00                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   108 00007CC7 0D01                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   109 00007CC9 1901                <1>     dw .msdRead - .msdTable         ;Function 4
   110 00007CCB 0000                <1>     dw 0                            ;Function 5
   111 00007CCD 0000                <1>     dw 0                            ;Function 6
   112 00007CCF 0000                <1>     dw 0                            ;Function 7
   113 00007CD1 5201                <1>     dw .msdWrite - .msdTable        ;Function 8
   114 00007CD3 8B01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   115 00007CD5 0000                <1>     dw 0                            ;Function 10
   116 00007CD7 0000                <1>     dw 0                            ;Function 11
   117 00007CD9 D101                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   118 00007CDB DD01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   119 00007CDD F801                <1>     dw .msdDevClose - .msdTable     ;Function 14
   120 00007CDF 1302                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   121 00007CE1 0000                <1>     dw 0                            ;Function 16
   122 00007CE3 0000                <1>     dw 0                            ;Function 17
   123 00007CE5 0000                <1>     dw 0                            ;Function 18
   124 00007CE7 3B02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   125 00007CE9 0000                <1>     dw 0                            ;Function 20
   126 00007CEB 0000                <1>     dw 0                            ;Function 21
   127 00007CED 0000                <1>     dw 0                            ;Function 22
   128 00007CEF E202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   129 00007CF1 F702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   130                              <1> .msdInitShim:
   131 00007CF3 53                  <1>     push rbx
   132 00007CF4 4157                <1>     push r15
   133 00007CF6 E8A3070000          <1>     call msdInit
   134 00007CFB 415F                <1>     pop r15
   135 00007CFD 5B                  <1>     pop rbx
   136 00007CFE 66C705BAFFFFFF0000  <1>     mov word [.msdTable], 0 ;Now prevent init from firing again
   137 00007D07 C3                  <1>     ret
   138                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   139                              <1> .msdMedChk:          ;Function 1
   140 00007D08 B005                <1>     mov al, 05h ;Bad request structure length
   141 00007D0A 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   142 00007D0D 75AB                <1>     jne .msdWriteErrorCode
   143                              <1> 
   144 00007D0F E8DC020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   145 00007D14 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   146 00007D16 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   147 00007D1B 488D0D67030000      <1>     lea rcx, .msdBIOSmap
   148 00007D22 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   149 00007D25 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   150 00007D28 753F                <1>     jnz .mmcNoChange
   151                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   152 00007D2A B416                <1>     mov ah, 16h 
   153 00007D2C CD33                <1>     int 33h
   154 00007D2E 0F8214FFFFFF        <1>     jc .msdGenDiskError
   155 00007D34 80FC80              <1>     cmp ah, 80h
   156 00007D37 740E                <1>     je .mmcNoChangeLine
   157 00007D39 80FC86              <1>     cmp ah, 86h
   158 00007D3C 7409                <1>     je .mmcNoChangeLine
   159 00007D3E 84E4                <1>     test ah, ah ;No change?
   160 00007D40 7427                <1>     jz .mmcNoChange
   161 00007D42 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   162 00007D45 750D                <1>     jnz .mmcChange
   163                              <1> ;If nothing, fall through and test manually, should never happen though
   164                              <1> .mmcNoChangeLine:
   165                              <1> ;Now we test Media Descriptor
   166 00007D47 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   167 00007D4C 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   168 00007D4F 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   169 00007D52 7410                <1>     je .mmcUnsure
   170                              <1> .mmcChange:
   171 00007D54 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   172 00007D58 488D051E030000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   173 00007D5F 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   174                              <1>     ;Check here if there were any open handles on the device when it was changed
   175 00007D63 C3                  <1>     ret
   176                              <1> .mmcUnsure:
   177 00007D64 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   178 00007D68 C3                  <1>     ret
   179                              <1> .mmcNoChange:
   180 00007D69 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   181 00007D6D C3                  <1>     ret
   182                              <1> 
   183                              <1> 
   184                              <1> .msdBuildBPB:        ;Function 2
   185 00007D6E B005                <1>     mov al, 05h ;Bad request structure length
   186 00007D70 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   187 00007D73 0F8541FFFFFF        <1>     jne .msdWriteErrorCode
   188                              <1> 
   189 00007D79 4889DE              <1>     mov rsi, rbx
   190 00007D7C 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   191 00007D81 488D0D01030000      <1>     lea rcx, .msdBIOSmap
   192 00007D88 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   193 00007D8B 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   194 00007D8F 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   195 00007D91 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   196 00007D94 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   197 00007D99 CD33                <1>     int 33h
   198 00007D9B 0F82A7FEFFFF        <1>     jc .msdGenDiskError
   199                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   200 00007DA1 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   201 00007DA5 7418                <1>     je .mbbpb0
   202 00007DA7 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   203 00007DAB 7412                <1>     je .mbbpb0
   204 00007DAD 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   205 00007DB1 740C                <1>     je .mbbpb0
   206 00007DB3 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   207 00007DB7 B007                <1>     mov al, 07h ;Unknown media error code
   208 00007DB9 0F82FBFEFFFF        <1>     jb .msdWriteErrorCode
   209                              <1> .mbbpb0:
   210 00007DBF 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   211 00007DC2 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   212 00007DC5 B90F000000          <1>     mov ecx, bpbEx_size/8
   213 00007DCA F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   214 00007DCD C3                  <1>     ret
   215                              <1> .msdIOCTLRead:       ;Function 3, returns done
   216 00007DCE B005                <1>     mov al, drvBadDrvReq
   217 00007DD0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   218 00007DD3 0F85E1FEFFFF        <1>     jne .msdWriteErrorCode
   219 00007DD9 C3                  <1>     ret
   220                              <1> .msdRead:            ;Function 4
   221                              <1> ;Will read one sector at a time.
   222 00007DDA B005                <1>     mov al, 05h ;Bad request structure length
   223 00007DDC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   224 00007DDF 0F85D5FEFFFF        <1>     jne .msdWriteErrorCode
   225                              <1> 
   226 00007DE5 E806020000          <1>     call .msdCheckDeviceType
   227                              <1> 
   228 00007DEA 4889DF              <1>     mov rdi, rbx
   229 00007DED 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   230                              <1> .msdr0:
   231 00007DEF B682                <1>     mov dh, 82h ;LBA Read Sectors
   232 00007DF1 E8D7010000          <1>     call .msdBlkIOCommon
   233 00007DF6 0F8241FEFFFF        <1>     jc .msdIOError
   234 00007DFC 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   235 00007E00 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   236 00007E04 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   237 00007E08 FFC6                <1>     inc esi
   238 00007E0A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   239 00007E0D 75E0                <1>     jne .msdr0
   240 00007E0F 4889FB              <1>     mov rbx, rdi
   241 00007E12 C3                  <1>     ret
   242                              <1> .msdWrite:           ;Function 8
   243                              <1> ;Will write one sector at a time.
   244 00007E13 B005                <1>     mov al, 05h ;Bad request structure length
   245 00007E15 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 00007E18 0F859CFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 00007E1E E8CD010000          <1>     call .msdCheckDeviceType
   249                              <1> 
   250 00007E23 4889DF              <1>     mov rdi, rbx
   251 00007E26 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   252                              <1> .msdw0:
   253 00007E28 B683                <1>     mov dh, 83h ;LBA Write Sectors
   254 00007E2A E89E010000          <1>     call .msdBlkIOCommon
   255 00007E2F 0F8208FEFFFF        <1>     jc .msdIOError
   256 00007E35 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   257 00007E39 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   258 00007E3D 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   259 00007E41 FFC6                <1>     inc esi
   260 00007E43 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   261 00007E46 75E0                <1>     jne .msdw0
   262 00007E48 4889FB              <1>     mov rbx, rdi
   263 00007E4B C3                  <1>     ret
   264                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   265                              <1> ;Will write one sector at a time and then verify it.
   266 00007E4C B005                <1>     mov al, 05h ;Bad request structure length
   267 00007E4E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   268 00007E51 0F8563FEFFFF        <1>     jne .msdWriteErrorCode
   269                              <1> 
   270 00007E57 E894010000          <1>     call .msdCheckDeviceType
   271                              <1> 
   272 00007E5C 4889DF              <1>     mov rdi, rbx
   273 00007E5F 31F6                <1>     xor esi, esi  ;Set counter to zero
   274                              <1> .msdwv0:
   275 00007E61 B683                <1>     mov dh, 83h ;LBA Write Sectors
   276 00007E63 E865010000          <1>     call .msdBlkIOCommon
   277 00007E68 0F82CFFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   278 00007E6E B684                <1>     mov dh, 84h ;LBA Verify Sectors
   279 00007E70 E858010000          <1>     call .msdBlkIOCommon
   280 00007E75 0F82C2FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   281 00007E7B 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   282 00007E7F 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   283 00007E83 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   284 00007E87 FFC6                <1>     inc esi
   285 00007E89 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 00007E8C 75D3                <1>     jne .msdwv0
   287 00007E8E 4889FB              <1>     mov rbx, rdi
   288 00007E91 C3                  <1>     ret
   289                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   290 00007E92 B005                <1>     mov al, drvBadDrvReq
   291 00007E94 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00007E97 0F851DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00007E9D C3                  <1>     ret
   295                              <1> .msdDevOpen:         ;Function 13
   296 00007E9E B005                <1>     mov al, drvBadDrvReq
   297 00007EA0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   298 00007EA3 0F8511FEFFFF        <1>     jne .msdWriteErrorCode
   299                              <1> 
   300 00007EA9 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   301 00007EAE 488D0DD9010000      <1>     lea rcx, .msdHdlCnt
   302 00007EB5 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   303 00007EB8 C3                  <1>     ret
   304                              <1> .msdDevClose:        ;Function 14
   305 00007EB9 B005                <1>     mov al, drvBadDrvReq
   306 00007EBB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   307 00007EBE 0F85F6FDFFFF        <1>     jne .msdWriteErrorCode
   308                              <1> 
   309 00007EC4 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   310 00007EC9 488D0DBE010000      <1>     lea rcx, .msdHdlCnt
   311 00007ED0 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   312 00007ED3 C3                  <1>     ret
   313                              <1> .msdRemovableMedia:  ;Function 15
   314 00007ED4 B005                <1>     mov al, drvBadDrvReq
   315 00007ED6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   316 00007ED9 0F85DBFDFFFF        <1>     jne .msdWriteErrorCode
   317                              <1>     
   318 00007EDF 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   319 00007EE4 488D0D9E010000      <1>     lea rcx, .msdBIOSmap
   320 00007EEB 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   321 00007EEF 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   322 00007EF4 C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   323 00007EF7 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   324 00007EFB C3                  <1>     ret
   325                              <1> .msdGenericIOCTL:    ;Function 19
   326 00007EFC B005                <1>     mov al, drvBadDrvReq
   327 00007EFE 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   328 00007F01 0F85B3FDFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> ;Need to spend some time to implement proper IOCTL with LBA instead of CHS.
   330                              <1> ;Implement two undoc functions 80h|42h (format) and 80h|60h (get LBA params)
   331 00007F07 B003                <1>     mov al, drvBadCmd
   332 00007F09 0FB74B0D            <1>     movzx ecx, word [rbx + ioctlReqPkt.majfun]
   333 00007F0D 80FD08              <1>     cmp ch, 08h    ;Disk Drive Major Code?
   334 00007F10 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode  ;If not, exit bad
   335 00007F16 F6C180              <1>     test cl, 80h    ;Extended function bit set?
   336 00007F19 0F849BFDFFFF        <1>     jz .msdWriteErrorCode
   337 00007F1F 80E17F              <1>     and cl, 7Fh     ;Clear the upper bit
   338 00007F22 80F941              <1>     cmp cl, 41h     
   339 00007F25 743F                <1>     je .msdGIOCTLWrite
   340 00007F27 80F942              <1>     cmp cl, 42h
   341 00007F2A 7451                <1>     je .msdGIOCTLFormat
   342 00007F2C 80F960              <1>     cmp cl, 60h
   343 00007F2F 0F8585FDFFFF        <1>     jne .msdWriteErrorCode  ;Error if not this function with bad command
   344                              <1>     ;Get params here
   345 00007F35 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   346 00007F39 488D1549010000      <1>     lea rdx, .msdBIOSmap
   347 00007F40 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   348 00007F43 B488                <1>     mov ah, 88h ;Read LBA Device Parameters
   349 00007F45 53                  <1>     push rbx
   350 00007F46 CD33                <1>     int 33h
   351                              <1>     ;Returns:
   352                              <1>     ;rbx = Sector size in bytes
   353                              <1>     ;rcx = Last LBA block
   354 00007F48 4889D8              <1>     mov rax, rbx    ;Move sector size into rax
   355 00007F4B 5B                  <1>     pop rbx ;Get back the ioctlReqPktPtr
   356 00007F4C 0F82F6FCFFFF        <1>     jc .msdGenDiskError
   357                              <1> ;Get LBA Table:
   358                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   359                              <1> ;Offset 1:  Reserved, 7 bytes
   360                              <1> ;Offset 8:  Sector size in bytes (DWORD)
   361                              <1> ;Offset 16: Number Of Sectors on Medium + 1 (QWORD)
   362 00007F52 488B531F            <1>     mov rdx, qword [rbx + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   363 00007F56 48C70218000000      <1>     mov qword [rdx + genioctlGetParamsTable.size], 24
   364 00007F5D 48894208            <1>     mov qword [rdx + genioctlGetParamsTable.sectorSize], rax
   365 00007F61 48894A10            <1>     mov qword [rdx + genioctlGetParamsTable.numSectors], rcx
   366                              <1>     return
    13                              <2> %%_ret:
    14 00007F65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> .msdGIOCTLWrite:
   369                              <1> ;Write Table:
   370                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   371                              <1> ;Offset 1:  Number of sectors to write (BYTE)
   372                              <1> ;Offset 2:  Reserved, 6 bytes
   373                              <1> ;Offset 8:  Sector to start format at (QWORD)
   374                              <1> ;Offset 16: Pointer to transfer buffer (QWORD)
   375 00007F66 E81B000000          <1>     call .msdGIOCTLFormatWriteSetup
   376 00007F6B 488B5F10            <1>     mov rbx, qword [rdi + genioctlLBAwrite.xferBuffer]
   377 00007F6F B483                <1>     mov ah, 83h
   378                              <1> .msdGIOCTLwfCommon:
   379 00007F71 CD33                <1>     int 33h
   380 00007F73 0F82CFFCFFFF        <1>     jc .msdGenDiskError
   381 00007F79 4889F3              <1>     mov rbx, rsi    ;Geturns rbx to point to the request pointer
   382                              <1>     return 
    13                              <2> %%_ret:
    14 00007F7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> .msdGIOCTLFormat:
   385                              <1> ;Format Table:
   386                              <1> ;Offset 0:  Size of the table in bytes (24 bytes) (BYTE)
   387                              <1> ;Offset 1:  Number of sectors to format (BYTE)
   388                              <1> ;Offset 2:  Reserved, 6 bytes
   389                              <1> ;Offset 8:  Sector to start format at (QWORD)
   390 00007F7D E804000000          <1>     call .msdGIOCTLFormatWriteSetup
   391 00007F82 B485                <1>     mov ah, 85h
   392 00007F84 EBEB                <1>     jmp short .msdGIOCTLwfCommon
   393                              <1> 
   394                              <1> .msdGIOCTLFormatWriteSetup:
   395                              <1> ;Sets the following:
   396                              <1> ;al = Number of sectors to write/format
   397                              <1> ;rcx = Sector to begin transfer at
   398                              <1> ;dl = BIOS Drive to do transfer on
   399                              <1> ;rsi = Driver Packet (usually set to rbx)
   400                              <1> ;rdi = Write/Format packet
   401 00007F86 0FB64301            <1>     movzx eax, byte [rbx + ioctlReqPkt.unitnm] ;Get the driver unit number
   402 00007F8A 488D15F8000000      <1>     lea rdx, .msdBIOSmap
   403 00007F91 8A1402              <1>     mov dl, byte [rdx + rax]    ;Get the BIOS number for the device
   404 00007F94 4889DE              <1>     mov rsi, rbx
   405 00007F97 488B7E1F            <1>     mov rdi, qword [rsi + ioctlReqPkt.ctlptr]   ;Get the req pkt ptr
   406 00007F9B 8A4701              <1>     mov al, byte [rdi + genioctlLBAformat.numSectors]
   407 00007F9E 488B4F08            <1>     mov rcx, qword [rdi + genioctlLBAformat.startSector]
   408                              <1>     return
    13                              <2> %%_ret:
    14 00007FA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> .msdGetLogicalDev:   ;Function 23
   411 00007FA3 B005                <1>     mov al, drvBadDrvReq
   412 00007FA5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   413 00007FA8 0F850CFDFFFF        <1>     jne .msdWriteErrorCode
   414                              <1> 
   415 00007FAE 8A05D4000000        <1>     mov al, byte [.msdCurDev]
   416 00007FB4 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   417 00007FB7 C3                  <1>     ret
   418                              <1> .msdSetLogicalDev:   ;Function 24
   419 00007FB8 B005                <1>     mov al, drvBadDrvReq
   420 00007FBA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   421 00007FBD 0F85F7FCFFFF        <1>     jne .msdWriteErrorCode
   422                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   423 00007FC3 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   424 00007FC6 8805BC000000        <1>     mov byte [.msdCurDev], al
   425 00007FCC C3                  <1>     ret
   426                              <1> 
   427                              <1> .msdBlkIOCommon:  ;Does block IO
   428                              <1> ;Called with rdi containing old rbx value and ah with function number
   429                              <1> ;rbp points to bpb
   430                              <1> ;Error handled by caller
   431                              <1> ;Sector count handled by caller
   432                              <1> ;Called with dh = BIOS function number
   433 00007FCD 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   434 00007FD2 488D0DB0000000      <1>     lea rcx, .msdBIOSmap
   435 00007FD9 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req in dl
   436 00007FDC 31C9                <1>     xor ecx, ecx
   437 00007FDE 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   438 00007FE1 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   439 00007FE5 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   440 00007FE9 88F4                <1>     mov ah, dh
   441 00007FEB B001                <1>     mov al, 01h ;Do one sector at a time 
   442 00007FED CD33                <1>     int 33h
   443                              <1>     return
    13                              <2> %%_ret:
    14 00007FEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> .msdCheckDeviceType:
   446                              <1> ;Checks a new device is being transacted on. Sets the internal var if so.
   447                              <1> ;If additionally in single drive mode, and a different drive (either A or B)
   448                              <1> ; is being transacted on, prompts the user. Else, 
   449                              <1> ;Returns ZF=NZ if media number changed!
   450                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   451 00007FF0 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   452 00007FF4 3A058E000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   453                              <1>     rete    ;Exit if equal (ZF=ZE)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00007FFA 74F3                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   454                              <1> ;If not equal, check new drive is not A or B
   455 00007FFC 3C02                <1>     cmp al, 2
   456 00007FFE 733E                <1>     jae .msdCDTexitOk ;Exit by setting the new unit number, keep ZF=ZE
   457                              <1>     ;Check if we are in single drive mode or not
   458 00008000 F6057F000000FF      <1>     test byte [.msdSingleFlag], -1
   459 00008007 7435                <1>     jz .msdCDTexitOk    ;If not in single drive mode, exit ok
   460 00008009 3A0578000000        <1>     cmp al, byte [.msdSingleDrv]    ;Is this single drive the same as the old?
   461 0000800F 742D                <1>     je .msdCDTexitOk    ;Exit if so
   462 00008011 880570000000        <1>     mov byte [.msdSingleDrv], al    ;Else, replace this number
   463 00008017 0441                <1>     add al, "A" ;Convert to a letter
   464 00008019 88053A000000        <1>     mov byte [.msdStrikeLetter], al
   465 0000801F 488D3520000000      <1>     lea rsi, .msdStrike
   466 00008026 B937000000          <1>     mov ecx, .msdStrikeL
   467                              <1> .msdCDTprintMessage:
   468 0000802B AC                  <1>     lodsb   ;Get the char in al, inc rsi
   469 0000802C CD49                <1>     int 49h ;Print char in al
   470 0000802E FFC9                <1>     dec ecx
   471 00008030 75F9                <1>     jnz .msdCDTprintMessage
   472 00008032 31C0                <1>     xor eax, eax
   473 00008034 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   474                              <1> .msdCDTexit:
   475 00008036 E803000000          <1>     call .msdCDTexitOk  ;Set unit number and Set ZF
   476 0000803B FFC0                <1>     inc eax ;Clear ZF
   477 0000803D C3                  <1>     ret
   478                              <1> .msdCDTexitOk:
   479 0000803E E880FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   480 00008043 31C0                <1>     xor eax, eax
   481 00008045 C3                  <1>     ret
   482                              <1> 
   483 00008046 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   483 0000804F 666F72206472697665- <1>
   483 00008058 20                  <1>
   484 00008059 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   484 00008062 72696B650D0A616E79- <1>
   484 0000806B 206B6579207768656E- <1>
   484 00008074 2072656164790D0A0A  <1>
   485                              <1> .msdStrikeL equ $ - .msdStrike
   486                              <1> 
   487 0000807D 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   488                              <1> ;LASTDRIVE default is 5
   489                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   490                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   491 00008086 00                  <1> .msdSingleFlag  db 0    ;Single removable drive only
   492 00008087 00                  <1> .msdSingleDrv   db 0    ;Keeps track of the last single drive used. 
   493 00008088 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   494                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   495 00008089 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   496 0000808E 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   497 00008093 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   497 0000809C 000000000000000000- <1>
   497 000080A5 000000000000000000- <1>
   497 000080AE 000000000000000000- <1>
   497 000080B7 00000000            <1>
   498 000080BB 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   498 000080C4 000000000000000000- <1>
   498 000080CD 000000000000000000- <1>
   498 000080D6 000000000000000000- <1>
   498 000080DF 000000000000000000- <1>
   498 000080E8 000000000000000000- <1>
   498 000080F1 000000000000000000- <1>
   498 000080FA 000000000000000000- <1>
   498 00008103 000000000000000000- <1>
   498 0000810C 000000000000000000- <1>
   498 00008115 000000000000000000- <1>
   498 0000811E 000000000000000000- <1>
   498 00008127 000000000000000000- <1>
   498 00008130 000000000000000000- <1>
   498 00008139 000000000000000000- <1>
   498 00008142 000000000000000000- <1>
   498 0000814B 000000000000000000- <1>
   498 00008154 000000000000000000- <1>
   498 0000815D 000000000000000000- <1>
   498 00008166 000000000000000000- <1>
   498 0000816F 000000000000000000- <1>
   498 00008178 000000000000000000- <1>
   498 00008181 000000000000000000- <1>
   498 0000818A 000000000000000000- <1>
   498 00008193 000000000000000000- <1>
   498 0000819C 000000000000000000- <1>
   498 000081A5 000000000000000000- <1>
   498 000081AE 000000000000000000- <1>
   498 000081B7 000000000000000000- <1>
   498 000081C0 000000000000000000- <1>
   498 000081C9 000000000000000000- <1>
   498 000081D2 000000000000000000- <1>
   498 000081DB 000000000000000000- <1>
   498 000081E4 000000000000000000- <1>
   498 000081ED 000000000000000000- <1>
   498 000081F6 000000000000000000- <1>
   498 000081FF 000000000000000000- <1>
   498 00008208 000000000000000000- <1>
   498 00008211 000000000000000000- <1>
   498 0000821A 000000000000000000- <1>
   498 00008223 000000000000000000- <1>
   498 0000822C 000000000000000000- <1>
   498 00008235 000000000000000000- <1>
   498 0000823E 000000000000000000- <1>
   498 00008247 000000000000000000- <1>
   498 00008250 000000000000000000- <1>
   498 00008259 000000000000000000- <1>
   498 00008262 000000000000000000- <1>
   498 0000826B 000000000000000000- <1>
   498 00008274 000000000000000000- <1>
   498 0000827D 000000000000000000- <1>
   498 00008286 000000000000000000- <1>
   498 0000828F 000000000000000000- <1>
   498 00008298 000000000000000000- <1>
   498 000082A1 000000000000000000- <1>
   498 000082AA 000000000000000000- <1>
   498 000082B3 000000000000000000- <1>
   498 000082BC 000000000000000000- <1>
   498 000082C5 000000000000000000- <1>
   498 000082CE 000000000000000000- <1>
   498 000082D7 000000000000000000- <1>
   498 000082E0 000000000000000000- <1>
   498 000082E9 000000000000000000- <1>
   498 000082F2 000000000000000000- <1>
   498 000082FB 000000000000000000- <1>
   498 00008304 000000000000000000- <1>
   498 0000830D 000000000000        <1>
   499                              <1> .dfltBPB     defaultBPB ;If no removable devices, A and B point here
   499                              <2> .dfltBPB :
   174 00008313 E9                  <2>  db 0E9h
   175 00008314 00                  <2>  db 00h
   176 00008315 90                  <2>  db 90h
   177 00008316 534350444F537631    <2>  db 'SCPDOSv1'
   178 0000831E 0002                <2>  dw 0200h
   179 00008320 01                  <2>  db 01h
   180 00008321 0100                <2>  dw 0001h
   181 00008323 02                  <2>  db 02h
   182 00008324 E000                <2>  dw 00E0h
   183 00008326 400B                <2>  dw 0B40h
   184 00008328 F0                  <2>  db 0F0h
   185 00008329 0900                <2>  dw 0009h
   186 0000832B 1200                <2>  dw 0012h
   187 0000832D 0200                <2>  dw 0002h
   188 0000832F 00000000            <2>  dd 0
   189 00008333 00000000            <2>  dd 0
   190 00008337 00                  <2>  db 00h
   191 00008338 00                  <2>  db 00h
   192 00008339 29                  <2>  db 29h
   193 0000833A 00000000            <2>  dd 0
   194 0000833E 4E4F204E414D452020- <2>  db 'NO NAME    '
   194 00008347 2020                <2>
   195 00008349 4641543132202020    <2>  db 'FAT12   '
   196 00008351 000000000000000000- <2>  db 58 dup 0
   196 0000835A 000000000000000000- <2>
   196 00008363 000000000000000000- <2>
   196 0000836C 000000000000000000- <2>
   196 00008375 000000000000000000- <2>
   196 0000837E 000000000000000000- <2>
   196 00008387 00000000            <2>
   500                              <1> endptr equ $
    52                                  %include "./src/Drivers/drvInits.asm"
     1                              <1> ejectPoint: ;Address of the ejection code
     2                              <1> 
     3                              <1> installInterrupt:
     4                              <1> ;Writes the interrupt in the right place in the table
     5                              <1>     ;al = Interrupt number
     6                              <1>     ;rdx -> Handler to install
     7 0000838B 0F010D23000000      <1>     sidt [myIdt]
     8 00008392 0FB6C0              <1>     movzx eax, al
     9 00008395 4892                <1>     xchg rdx, rax
    10 00008397 48C1E204            <1>     shl rdx, 4h     ;Multiply IDT entry number by 16
    11 0000839B 48031515000000      <1>     add rdx, qword [myIdt.base]    
    12 000083A2 668902              <1>     mov word [rdx], ax  ;Get low word into offset 15...0
    13 000083A5 48C1E810            <1>     shr rax, 10h    ;Bring next word low
    14 000083A9 66894206            <1>     mov word [rdx + 6], ax  ;Get low word into offset 31...16
    15 000083AD 48C1E810            <1>     shr rax, 10h    ;Bring last dword low
    16 000083B1 894208              <1>     mov dword [rdx + 8], eax
    17 000083B4 C3                  <1>     ret
    18                              <1> myIdt:
    19 000083B5 0000                <1> .limit  dw 0
    20 000083B7 0000000000000000    <1> .base   dq 0
    21                              <1> 
    22                              <1> conInit:
    23                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
    24 000083BF 50                  <1>     push rax
    25 000083C0 53                  <1>     push rbx    ;Save the pointer to the request packet on the stack
    26 000083C1 51                  <1>     push rcx
    27 000083C2 52                  <1>     push rdx
    28 000083C3 488D15ECF4FFFF      <1>     lea rdx, qword [fastOutput]
    29 000083CA B849000000          <1>     mov eax, 49h
    30 000083CF E8B7FFFFFF          <1>     call installInterrupt
    31 000083D4 488D15E3F4FFFF      <1>     lea rdx, qword [ctrlBreak]
    32 000083DB B83B000000          <1>     mov eax, 3Bh
    33 000083E0 E8A6FFFFFF          <1>     call installInterrupt
    34                              <1> .ci0:
    35 000083E5 B401                <1>     mov ah, 01      ;Get buffer status
    36 000083E7 CD36                <1>     int 36h
    37 000083E9 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
    38 000083EB 30E4                <1>     xor ah, ah
    39 000083ED CD36                <1>     int 36h ;Read key to flush from buffer
    40 000083EF EBF4                <1>     jmp short .ci0
    41                              <1> .ci1:
    42 000083F1 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
    43 000083F6 CD30                <1>     int 30h
    44 000083F8 B402                <1>     mov ah, 02h
    45 000083FA 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
    46 000083FC 88D7                <1>     mov bh, dl      ;Set cursor for page 0
    47 000083FE CD30                <1>     int 30h
    48 00008400 B707                <1>     mov bh, 07h     ;Grey/Black attribs
    49 00008402 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
    50 00008407 CD30                <1>     int 30h
    51 00008409 5A                  <1>     pop rdx
    52 0000840A 59                  <1>     pop rcx
    53 0000840B 5B                  <1>     pop rbx
    54 0000840C 58                  <1>     pop rax
    55                              <1> devDrvExit:
    56 0000840D 66C7030001          <1>     mov word [rbx], drvDonStatus ;Set the drive done status bit
    57 00008412 50                  <1>     push rax
    58 00008413 488D0571FFFFFF      <1>     lea rax, ejectPoint
    59 0000841A 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
    60 0000841E 58                  <1>     pop rax
    61                              <1>     return
    13                              <2> %%_ret:
    14 0000841F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> clockInit:
    64 00008420 53                  <1>     push rbx    ;Push the pointer to the request header here
    65                              <1> ;CH - Hours, in BCD
    66                              <1> ;CL - Minutes, in BCD
    67                              <1> ;DH - Seconds, in BCD
    68 00008421 B402                <1>     mov ah, 02  ;Read RTC Time
    69 00008423 CD3A                <1>     int 3Ah
    70 00008425 7271                <1>     jc .clkEnd  ;if error, just exit
    71                              <1>     ;Now set the driver time. Convert From BCD to Decimal
    72 00008427 0FB6C5              <1>     movzx eax, ch   ;Hours
    73 0000842A E84D000000          <1>     call .bcd2Bin
    74 0000842F 88C5                <1>     mov ch, al
    75 00008431 0FB6C1              <1>     movzx eax, cl     ;Mins
    76 00008434 E843000000          <1>     call .bcd2Bin
    77 00008439 88C1                <1>     mov cl, al
    78 0000843B 0FB6C6              <1>     movzx eax, dh   ;Seconds
    79 0000843E E839000000          <1>     call .bcd2Bin
    80 00008443 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
    81 00008445 89C2                <1>     mov edx, eax
    82 00008447 B42D                <1>     mov ah, 2Dh ;DOS Set Time
    83 00008449 CD41                <1>     int 41h
    84                              <1> ;Now get the date from RTC
    85                              <1> ;CL - Year, in BCD
    86                              <1> ;DH - Month, in BCD
    87                              <1> ;DL - Day, in BCD
    88 0000844B B404                <1>     mov ah, 04  ;Read RTC Date
    89 0000844D CD3A                <1>     int 3Ah
    90 0000844F 7247                <1>     jc .clkEnd
    91                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
    92 00008451 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
    93 00008454 E823000000          <1>     call .bcd2Bin
    94 00008459 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
    95 0000845C 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
    96 00008462 0FB6C6              <1>     movzx eax, dh   ;Get Months
    97 00008465 E812000000          <1>     call .bcd2Bin
    98 0000846A 88C6                <1>     mov dh, al  
    99 0000846C 0FB6C2              <1>     movzx eax, dl   ;Get day
   100 0000846F E808000000          <1>     call .bcd2Bin
   101 00008474 88C2                <1>     mov dl, al
   102 00008476 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   103 00008478 CD41                <1>     int 41h
   104 0000847A EB1C                <1>     jmp short .clkEnd
   105                              <1> .bcd2Bin:
   106                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   107 0000847C 51                  <1>     push rcx
   108 0000847D 89C1                <1>     mov ecx, eax
   109 0000847F 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   110 00008484 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   111 0000848A 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   112 0000848D C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   113                              <1> .b2blp:
   114 00008490 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   115 00008492 FFC9                <1>     dec ecx
   116 00008494 75FA                <1>     jnz .b2blp
   117                              <1> .b2bexit:
   118 00008496 59                  <1>     pop rcx
   119 00008497 C3                  <1>     ret
   120                              <1> .clkEnd:
   121 00008498 5B                  <1>     pop rbx ;Get the pointer back
   122 00008499 E96FFFFFFF          <1>     jmp devDrvExit
   123                              <1> 
   124                              <1> msdInit:
   125                              <1>     ;We create a function to deal with BPB parsing etc
   126                              <1>     ;Start with the first primary partition on each hard disk (until max)
   127                              <1>     ;   They dont have to be bootable
   128                              <1>     ;Then go back and look for other partitions partitions. 
   129                              <1>     ;   Add each other primary or logical ptn (until max)
   130                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   131                              <1>     ;Use r8 as device counter
   132                              <1>     ;Use r15 as the pointer to the next free BPB entry
   133                              <1>     ;First set up the two default BPB's if no removable drives
   134 0000849E 53                  <1>     push rbx    ;Push the pointer to the driver parameter block
   135                              <1> 
   136 0000849F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   137 000084A1 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   138 000084A5 664489C0            <1>     mov ax, r8w
   139 000084A9 8825(02000000)      <1>     mov byte [remDrv], ah    ;Save num of phys int 33h rem drives
   140 000084AF 8805(01000000)      <1>     mov byte [fixDrv], al    ;Save number of physical hard drives
   141 000084B5 C605(00000000)00    <1>     mov byte [physVol], 0    ;Initialise this byte to 0
   142                              <1> 
   143 000084BC 4C8D3DF8FBFFFF      <1>     lea r15, [msdDriver.msdBPBblks]    ;Point to the BPB storage place
   144 000084C3 803D(01000000)00    <1>     cmp byte [fixDrv], 0 ;Do we have any fixed drives?
   145 000084CA 0F847C000000        <1>     jz .remInit ;No? Go to removables
   146 000084D0 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   146 000084D9 00                  <1>
   147 000084DA B280                <1>     mov dl, 80h ;Start with HDD 0
   148                              <1> .primary:
   149 000084DC 803D(00000000)03    <1>     cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   150 000084E3 7467                <1>     je .remInit
   151 000084E5 31C9                <1>     xor ecx, ecx    ;Sector 0
   152 000084E7 E80B010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   153 000084EC 724F                <1>     jc .primaryEpilog
   154                              <1>     ;Here, check MBR or BPB
   155 000084EE 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   156 000084F7 7544                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   157                              <1>     ;Now check if BPB or MBR
   158 000084F9 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   159 000084FB 8A6302              <1>     mov ah, byte [rbx + 2]
   160 000084FE 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   161 00008502 7439                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   162                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   163                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   164 00008504 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   165 0000850B B104                <1>     mov cl, 4
   166                              <1> .checkPrimary:
   167 0000850D 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   168 00008510 3C01                <1>     cmp al, 01
   169 00008512 7421                <1>     je .primaryFound
   170 00008514 3C04                <1>     cmp al, 04
   171 00008516 741D                <1>     je .primaryFound
   172 00008518 3C06                <1>     cmp al, 06
   173 0000851A 7419                <1>     je .primaryFound
   174 0000851C 3C0B                <1>     cmp al, 0Bh
   175 0000851E 7415                <1>     je .primaryFound
   176 00008520 3C0C                <1>     cmp al, 0Ch
   177 00008522 7411                <1>     je .primaryFound
   178 00008524 3C0E                <1>     cmp al, 0Eh
   179 00008526 740D                <1>     je .primaryFound
   180 00008528 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   181 0000852F FEC9                <1>     dec cl
   182 00008531 740A                <1>     jz .primaryEpilog
   183 00008533 EBD8                <1>     jmp short .checkPrimary
   184                              <1> .primaryFound:
   185                              <1>     ;Copy the first sector of this partition into memory
   186 00008535 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   187 00008538 E8C8000000          <1>     call .readSectorAndAddDataToTables
   188                              <1> .primaryEpilog:
   189 0000853D FEC2                <1>     inc dl  ;Goto next BIOS drive
   190 0000853F 88D6                <1>     mov dh, dl
   191 00008541 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   192 00008544 3A35(01000000)      <1>     cmp dh, byte [fixDrv]    ;Have we gone thru all hard drives?
   193 0000854A 7590                <1>     jne .primary    ;Whilst we have fewer, go back
   194                              <1> .extended:
   195                              <1> ;We have gone through all the devices once
   196                              <1>     ;cmp byte [physVol], 3  ;Are we at maximum devices (A: B: reserved)?
   197                              <1>     ;je .remInit ;If yes, get removable devices
   198                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   199                              <1>     ;xor ecx, ecx    ;Get MBR back
   200                              <1>     ;call .initReadSector
   201                              <1>     ;Now we eventually search MBR for a FAT extended partition
   202                              <1> .remInit:
   203                              <1> ;Start by linking the default BPB's in the pointers table in the event that
   204                              <1> ; for some reason the removable drives stop working or dont exist.
   205 0000854C 488D35C0FDFFFF      <1>     lea rsi, qword [msdDriver.dfltBPB]  ;Point to the default BPB
   206 00008553 488D3D39FBFFFF      <1>     lea rdi, qword [msdDriver.msdBPBTbl]  ;Point to the BPB ptr table
   207 0000855A 488937              <1>     mov qword [rdi], rsi    ;Store the pointer in the first two entries
   208 0000855D 48897708            <1>     mov qword [rdi + 8], rsi
   209                              <1> ;This forces the hard drives to start at C:
   210 00008561 4D89C1              <1>     mov r9, r8  ;Save number of next device after fixed drive in r9
   211 00008564 30D2                <1>     xor dl, dl  ;Start with removable device 0
   212 00008566 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   213                              <1>     ;rdi points to the space for the subsequent bpb's
   214 00008569 803D(02000000)00    <1>     cmp byte [remDrv], 0  ;Just skip removable init if no rem drives
   215 00008570 7508                <1>     jnz .removables
   216 00008572 8005(00000000)02    <1>     add byte [physVol], 2 ;Pretend we have two more drives (A: and B:)
   217 00008579 C3                  <1>     ret ;and return!
   218                              <1> .removables:
   219 0000857A 31C9                <1>     xor ecx, ecx    ;Read sector 0
   220 0000857C E884000000          <1>     call .readSectorAndAddDataToTables
   221                              <1> .removableEpilogue:
   222 00008581 FEC2                <1>     inc dl  ;Goto next BIOS device now
   223 00008583 3A15(02000000)      <1>     cmp dl, byte [remDrv] ;Are we past last rem dev?
   224 00008589 7412                <1>     je .end
   225 0000858B 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   226 00008592 7503                <1>     jne .re0
   227 00008594 4588C8              <1>     mov r8b, r9b    ;Return to this drive number
   228                              <1> .re0:
   229 00008597 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   230 0000859B 72DD                <1>     jb .removables
   231                              <1> .end:
   232 0000859D 803D(02000000)01    <1>     cmp byte [remDrv], 1  ;Do we have only 1 removable device?
   233 000085A4 741D                <1>     je .singleRemDev
   234                              <1> .msdExit:
   235 000085A6 5B                  <1>     pop rbx ;rbx points to the parameter block
   236                              <1>     ;Now we set the .optptr, .endptr and .numunt
   237 000085A7 50                  <1>     push rax
   238 000085A8 0FB605(00000000)    <1>     movzx eax, byte [physVol]   ;Get the number of detected volumes
   239 000085AF 88430D              <1>     mov byte [rbx + initReqPkt.numunt], al
   240 000085B2 488D05DAFAFFFF      <1>     lea rax, msdDriver.msdBPBTbl    ;Get the BPB table here
   241 000085B9 48894316            <1>     mov qword [rbx + initReqPkt.optptr], rax
   242 000085BD 58                  <1>     pop rax
   243 000085BE E94AFEFFFF          <1>     jmp devDrvExit  ;Sets .endptr and the status word
   244                              <1> .singleRemDev:
   245                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   246 000085C3 488D1DBFFAFFFF      <1>     lea rbx, qword [msdDriver.msdBIOSmap]
   247 000085CA 8A15B9FAFFFF        <1>     mov dl, byte [msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   248 000085D0 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   249 000085D3 488D1DB9FAFFFF      <1>     lea rbx, qword [msdDriver.msdBPBTbl] 
   250 000085DA 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   251 000085DD 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   252 000085E1 C6059EFAFFFFFF      <1>     mov byte [msdDriver.msdSingleFlag], -1   ;Set this mode on
   253 000085E8 C60598FAFFFF00      <1>     mov byte [msdDriver.msdSingleDrv], 0 ;Start on drive A
   254 000085EF FE05(00000000)      <1>     inc byte [physVol] ;Gotta register the phantom drive!
   255 000085F5 EBAF                <1>     jmp short .msdExit
   256                              <1> .initReadSector:
   257                              <1> ;Called with sector number in rcx and BIOS device number in dl
   258 000085F7 B482                <1>     mov ah, 82h ;Read
   259 000085F9 B001                <1>     mov al, 1   ;One sector
   260 000085FB 488D1D(03000000)    <1>     lea rbx, qword [msdTempBuffer]  ;Into temporary buffer
   261 00008602 CD33                <1>     int 33h
   262 00008604 C3                  <1>     ret
   263                              <1> 
   264                              <1> .readSectorAndAddDataToTables:
   265                              <1> ;Input:
   266                              <1> ;ecx = Sector number to read
   267                              <1> ;r15 -> bpb array entry for the BPB
   268                              <1> ;r8 = Logical Drive number (offset into arrays)
   269 00008605 E8EDFFFFFF          <1>     call .initReadSector
   270                              <1>     retc   ;Goto next device
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000860A 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000860C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   271                              <1>     ;Now verify this is a BPB
   272 0000860D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   273 0000860F 8A6302              <1>     mov ah, byte [rbx + 2]
   274 00008612 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   275                              <1>     retne   ;If not, skip
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00008616 75F4                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276                              <1>     ;Now copy data to internal tables
   277 00008618 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   278 0000861B 51                  <1>     push rcx
   279 0000861C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   280 00008621 4C89FF              <1>     mov rdi, r15
   281 00008624 F348A5              <1>     rep movsq   ;Copy the BPB
   282 00008627 59                  <1>     pop rcx
   283                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   284 00008628 498D98[89800000]    <1>     lea rbx, qword [msdDriver.msdBIOSmap + r8]
   285                              <1>     ;Add device count to rbx to point to correct entry
   286 0000862F 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   287 00008631 4A8D1CC5[93800000]  <1>     lea rbx, qword [msdDriver.msdBPBTbl + 8*r8]
   288 00008639 4C893B              <1>     mov qword [rbx], r15
   289 0000863C 49FFC0              <1>     inc r8  ;Goto next logical drive
   290 0000863F FE05(00000000)      <1>     inc byte [physVol] ;Increment the number of valid drives we have
   291 00008645 4981C778000000      <1>     add r15, bpbEx_size  ;Goto next table entry
   292                              <1>     return
    13                              <2> %%_ret:
    14 0000864C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  dosLen  equ ($-$$)  ;Get the length of the Segment
    54                                  Segment drvbss follows=resSeg align=1 nobits
    55                                  %include "./src/Drivers/drvBuf.asm"
     1                              <1> ;This file is just to denote UNINITIALISED buffers and vars
     2                              <1> ; for the drivers that are to be used during INIT.
     3                              <1> ;They can (and should) be ejected after use
     4                              <1> 
     5 00000000 ??                  <1> physVol db ?
     6 00000001 ??                  <1> fixDrv  db ?
     7 00000002 ??                  <1> remDrv  db ?
     8                              <1> 
     9 00000003 <res 1000h>         <1> msdTempBuffer   db 4096 dup (?) 
    56 00001003 <res Dh>                    alignb 10h  ;Ensure paragraph alignment
    57                                  dosEnd: ;Used to compute the size of resident DOS
    57          ------------------       info: assembly required 1+17+2 passes

